//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections;

/// <summary>
/// Generates a safe wrapper for MonsterSelectPrefab.
/// </summary>
using System;
using AssetPipeline;


public class MonsterSelectView : BaseView
{
    static public MonsterSelectView CreateNew(MonsterController mc, Action selectDelegate)
    {
        GameObject monsterSelectPrefab = ResourcePoolManager.Instance.LoadUI("MonsterSelectPrefab") as GameObject;
        GameObject monsterSelectGO = NGUITools.AddChild(LayerManager.Root.BattleUIHUDPanel.cachedGameObject, monsterSelectPrefab);
        MonsterSelectView monsterSelectView = BaseView.Create<MonsterSelectView>(monsterSelectGO);
        monsterSelectView.SetDelegate(selectDelegate);

        UIFollowTarget follower = monsterSelectGO.AddComponent<UIFollowTarget>();
		
        follower.gameCamera = LayerManager.Root.BattleCamera_Camera;
        follower.uiCamera = LayerManager.Root.UICamera.cachedCamera;

        monsterSelectView.UpdateFollowTarget(mc);
        monsterSelectView.SetData(mc);

        return monsterSelectView;
    }

    public void UpdateFollowTarget(MonsterController mc)
    {
        UIFollowTarget follower = this.gameObject.GetComponent<UIFollowTarget>();
        if (follower == null)
        {
            return;
        }

        Transform tf = mc.GetMountHit();

        if (tf == null)
        {
            tf = mc.gameObject.transform;
            UpdateFollowTarget(tf);
        }
        else
        {
            tf.localRotation = Quaternion.identity;
            tf.localScale = Vector3.one;
            tf.position = new Vector3(tf.position.x, tf.position.y, tf.position.z);	

            UpdateFollowTarget(tf,Vector3.zero);
        }
//        DisableUIFollowTargetDelay(follower);
    }

    public void UpdateFollowTarget(Transform mc)
    {
        UpdateFollowTarget(mc,new Vector3(0, 0.5f, 0));
    }

    private void UpdateFollowTarget(Transform mc,Vector3 pOffset)
    {
        var follower = gameObject.GetComponent<UIFollowTarget>();
        if (follower == null)
        {
            return;
        }
        var tf = mc;
        follower.offset = pOffset;
        follower.target = tf;
    }

    //延迟的原因在于其更新并非一定在当前帧，不延迟可能导致本修改失效。
    //禁用的原因在于，S1不需要圆圈跟着人物走了，2017-03-20 18:22:15
    private void DisableUIFollowTargetDelay(UIFollowTarget pUIFollowTarget)
    {
        string tTimer = string.Format("DisableUIFollowTargetDelay_{0}", gameObject.GetInstanceID());
        JSTimer.Instance.CancelCd(tTimer);
        JSTimer.Instance.SetupCoolDown(tTimer, 0.1f, null, () =>
            {
                if (null == pUIFollowTarget)
                    return;
                pUIFollowTarget.enabled = false;
            });
    }

    public UILabel NameLabel_UILabel;
    public UISprite _selectSprite;
    public UIButton _selectButton;
    public UIEventTrigger _selectButtonEventTrigger;

    private event Action _onSelectDelegate;

    protected override void LateElementBinding()
    {
        base.LateElementBinding();
        NameLabel_UILabel = gameObject.FindScript<UILabel>("NameLabel");
        _selectSprite = gameObject.FindScript<UISprite>("SelectSprite");
        _selectButton = gameObject.FindScript<UIButton>("SelectSprite");
        _selectButtonEventTrigger = gameObject.FindScript<UIEventTrigger>("SelectSprite");

        EventDelegate.Set(_selectButton.onClick, OnSelectButtonClick);
        EventDelegate.Set(_selectButtonEventTrigger.onPress, OnPressSelectButton);
        EventDelegate.Set(_selectButtonEventTrigger.onRelease, OnReleaseSelectButton);
    }

    public void SetDelegate(Action selectDelegate)
    {
        _onSelectDelegate = selectDelegate;
    }

    private void OnPressSelectButton()
    {
        GameDebuger.TODO(@"if (NewBieGuideManager.Instance.IsForceGuideRunning())
        {
            return;
        }        
");

        GameDebuger.TODO(@"if (BattleController.Instance.IsGuideBattle)
        {
            return;
        }");

        JSTimer.Instance.SetupCoolDown("BattleOrderArrowClickTimer", 0.4f, null, () =>
            {
                _mc.PlayTargetOrderArrowEffect();
            });
		
        JSTimer.Instance.SetupCoolDown("BattleBuffClickTimer", 0.6f, null, () =>
            {
                ProxyMainUI.OpenBattleBuffTipsView(_mc);
            });
    }

    private void OnReleaseSelectButton()
    {
        GameDebuger.TODO(@"if (NewBieGuideManager.Instance.IsForceGuideRunning())
        {
            return;
        }           
");

        GameDebuger.TODO(@"if (BattleController.Instance.IsGuideBattle)
        {
            return;
        }");

        JSTimer.Instance.CancelCd("BattleOrderArrowClickTimer");
        JSTimer.Instance.CancelCd("BattleBuffClickTimer");
    }

    private void OnSelectButtonClick()
    {
        if (_onSelectDelegate != null)
        {
            _onSelectDelegate();
        }
    }

    private MonsterController _mc;

    private void SetData(MonsterController mc)
    {
        _mc = mc;
        if (mc.GetFaction() != null)
        {
            GameDebuger.TODO(@"NameLabel_UILabel.text = '[b]' + mc.GetGrade() + ' ' + mc.GetFaction ().shortDesc;");
        }
        else
        {
            if (mc.IsMonster())
            {
                NameLabel_UILabel.text = "";
            }
            else
            {
                NameLabel_UILabel.text = "[b]" + mc.GetGrade().ToString();
            }
        }
    }

    public void Show(bool show, bool isCouple = false)
    {
        if (show)
        {
            SetData(_mc);
        }
        else
        {
            NameLabel_UILabel.text = "";
        }
        //this.gameObject.SetActive (show);
        _selectButton.enabled = show;
        //NameLabel_UILabel.gameObject.SetActive(show);
        _selectSprite.alpha = show ? 1f : (1f / 255f);

        if (show)
        {
            _selectSprite.spriteName = isCouple ? "choice-couple" : "choice";
        }
    }

    public void Destroy()
    {
        JSTimer.Instance.CancelCd("BattleOrderArrowClickTimer");
        JSTimer.Instance.CancelCd("BattleBuffClickTimer");
        _mc.StopTargetSelectEffect();
        GameObject.Destroy(this.gameObject);
        _mc = null;
    }
}
