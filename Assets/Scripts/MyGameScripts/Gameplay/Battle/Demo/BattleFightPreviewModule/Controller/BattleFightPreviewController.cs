// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 04/20/2017 16:20:24
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using System;
using AssetPipeline;
using BattleNetworkManager = BattleDataManager.BattleNetworkManager;
using MonsterManager = BattleDataManager.MonsterManager;
using BattleInstController = BattleDataManager.BattleInstController;

/// <summary>
/// This is the controller class for module BattleFightPreview, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 04/20/2017 16:20:24
/// </summary>
public class BattleFightPreviewController : MonoViewController<BattleFightPreviewView>
{
    #region property and field

    private const float PLAYER_Y_Rotation = 100f;
    private const float ENEMY_Y_Rotation = -80f;
    public int _battleRound;

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        LayerManager.Instance.UpdateBGTextureVisible(false);
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        GameEventCenter.AddListener(GameEvent.BATTLE_FIGHT_EXITBATTLE, OnFinishFadeOut);
        EventDelegate.Set(View.BtnBack_UIButton.onClick, OnFinishFadeOut);
        EventDelegate.Set(View.BtnReplay_UIButton.onClick,OnBtnReplayClick);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        GameEventCenter.RemoveListener(GameEvent.BATTLE_FIGHT_EXITBATTLE, OnFinishFadeOut);
        LayerManager.Instance.UpdateBGTextureVisible(true);
    }

    #endregion

    #region Event Handlers
    private void OnBtnReplayClick()
    {
        var tPreviewVideo = BattleDataManager.DataMgr.BattleDemo.GameVideo as PreviewVideo;
        MonsterManager.Instance.ResetMonsterStatus();
        var tVideoRound = VideoRoundSimulater.SimulateVideoRound(tPreviewVideo.ateam.teamSoldiers,tPreviewVideo.bteam.teamSoldiers,ModelManager.Player.GetPlayerId(),tPreviewVideo.Skill);
        BattleNetworkManager.HanderVideoRound(tVideoRound);
    }

    #endregion

    #region Public or open interface

    #endregion

    #region Update global UI

    private void UpdateAllUI()
    {
        UpdateBattleTextureBG();
    }

    private void UpdateBattleTextureBG()
    {
        try
        {
            //放到最底层，不要挡住名字了
            View.CntrBG_UIPanel.depth = -1;
            UITexture tNormalBattleBG = LayerManager.Root.BattleBgTexture;
            NGUITools.SetLayer(View.CntrBG_Transform.gameObject, tNormalBattleBG.gameObject.layer);
            View.CntrBG_Transform.position = tNormalBattleBG.transform.position;
            View.CntrBG_Transform.rotation = tNormalBattleBG.transform.rotation;
        }
        catch (Exception e)
        {
            GameDebuger.LogError(string.Format("UpdateBattleTextureBG failed , e :{0}", e));
        }
    }

    #endregion

    #region 流程控制


    public void Open(Video video)
    {
        _battleRound = video.currentRound;
        BattleDataManager.DataMgr.BattleDemo.isAIManagement = false;
        InitlializeBattleInfo(video);
    }

    private void InitlializeBattleInfo(Video video)
    {
        BattleInstController.Instance.Setup(video);
        BattleActionPlayerPoolManager.Instance.Setup(gameObject);

        AdjustGameContingent();
        StartGameVideo();
    }

    //调整队伍，把主角的队伍放到A队, 也就是判断B队伍是否主角，如果是主角， 则换成AB队互换
    private void AdjustGameContingent()
    {
        var playerId = ModelManager.Player.GetPlayerId();
        if (ContainPlayer(BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam.teamSoldiers, playerId))
        {
            var temp = BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam;
            BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam = BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam;
            BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam = temp;
        }

        if (BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam.formation == null)
        {
            GameDebuger.LogError("ateam阵法设置为null， 请联系服务器端检查，此处强行设置阵型为1");
            BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam.formationId = 1;
        }

        if (BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam.formation == null)
        {
            GameDebuger.LogError("bteam阵法设置为null， 请联系服务器端检查，此处强行设置阵型为1");
            BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam.formationId = 1;
        }

        BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam.teamSoldiers.Sort(OnVideoSoldierSort);
        BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam.teamSoldiers.Sort(OnVideoSoldierSort);
    }

    public void StartGameVideo()
    {
        ShowTeamMonsters(BattlePosition.MonsterSide.Enemy);
        ShowTeamMonsters(BattlePosition.MonsterSide.Player);

        UpdateAllUI();

        PlayGameVideo();
    }

    private void PlayGameVideo()
    {
        BattleInstController.Instance.PlayGameVideo();
        OnBtnReplayClick();
    }

    private void OnFinishFadeOut()
    {
        BattleStatusEffectManager.Instance.Dispose();
        ProxyMainUI.CloseBattleBuffTipsView();
        ProxyBattleFightPreviewModule.Close();
        MonsterManager.Instance.ResetData();

        ResourcePoolManager.UnloadAssetsAndGC();
        BattleActionPlayerPoolManager.Instance.Dispose();
    }
    #endregion

    #region 通用辅助方法

    private bool ContainPlayer(List<VideoSoldier> pBattleEntities, long pPlayerId)
    {
        if (null == pBattleEntities || pBattleEntities.Count <= 0 || pPlayerId <= 0)
            return false;
        VideoSoldier tVideoSoldier;
        for (int tCounter = 0; tCounter < pBattleEntities.Count; tCounter++)
        {
            tVideoSoldier = pBattleEntities[tCounter];
            if (null != tVideoSoldier && tVideoSoldier.id == pPlayerId)
                return true;
        }
        return false;
    }

    private int OnVideoSoldierSort(VideoSoldier x, VideoSoldier y)
    {
        if (x.position > y.position)
        {
            return 1;
        }
        if (x.position < y.position)
        {
            return -1;
        }
        return 0;
    }

    private void ShowTeamMonsters(BattlePosition.MonsterSide side)
    {
        VideoTeam videoTeam = null;

        if (side == BattlePosition.MonsterSide.Player)
        {
            videoTeam = BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam;
        }
        else
        {
            videoTeam = BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam;
        }

        CreateMonsters(videoTeam.teamSoldiers, side);
    }

    public bool CreateMonsters(List<VideoSoldier> strikers, BattlePosition.MonsterSide side)
    {
        if (strikers == null || strikers.Count <= 0)
            return false;

        float yRotation = PLAYER_Y_Rotation;
        if (side == BattlePosition.MonsterSide.Enemy)
        {
            yRotation = ENEMY_Y_Rotation;
        }

        int mcIndex = 1;
        for (int i = 0, len = strikers.Count; i < len; i++)
        {
            VideoSoldier soldier = strikers[i];
            if (ContainMonster(soldier.id) == false)
            {
                MonsterController mc = CreateMonster(soldier, yRotation,
                                           BattlePositionCalculator.GetMonsterPosition(soldier, side), side);

                mc.gameObject.name = mc.gameObject.name + "_" + mcIndex;

                mcIndex++;
            }
        }

        return true;
    }

    private MonsterController CreateMonster(VideoSoldier monsterData, float yRotation, Vector3 position,
                                            BattlePosition.MonsterSide side)
    {
        GameObject go = new GameObject();
        MonsterController mc = go.AddComponent<MonsterController>();
        if (mc == null)
        {
            GameDebuger.Log("Add MonsterController component failed!!!!");
            return null;
        }

        GameObjectExt.AddPoolChild(LayerManager.Root.BattleActors, go);

        //float scale = monsterData.pet.scale / 10000.0f;

        mc.transform.localEulerAngles = new Vector3(0, yRotation, 0);
        //mc.transform.localScale = new Vector3( scale, scale, scale );
        mc.transform.localScale = Vector3.one;
        mc.transform.localPosition = position;

        bool showFashion = true;
        mc.InitMonster(monsterData, side, showFashion);

        GameDebuger.Log(mc.GetDebugInfo());

        MonsterManager.Instance.AddMonsterController(mc);

        return mc;
    }

    private bool ContainMonster(long id)
    {
        MonsterController mc = MonsterManager.Instance.GetMonsterFromSoldierID(id);
        return mc != null;
    }
    
    #endregion
}
