// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/15/2017 11:26:17
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using System;
using AppDto;
using UnityEngine;

/// <summary>
/// 战斗界面顶部 名字队列
/// @MarsZ in 03/15/2017 11:26:17
/// </summary>
public class BattleActionQueueController : MonolessViewController<BattleActionQueueView>
{
    #region property and field

    //队列上的名字列表
    private BattleActionQueueItemController[] mActionQueueNameItemSet;
    //当前正在特殊显示的名字行动
    private BattleActionQueueItemController mBattleActionQueueItemController;

    private BattleFormationInfoViewController mBattleFormationInfoController;

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        var cnt = BattleDataManager.DataMgr.BattleDemo.MaxQueueNameActionNum;
        mActionQueueNameItemSet = new BattleActionQueueItemController[cnt];
        for (var i = 0; i < cnt; i++)
        {
            var ctrl = AddCachedChild<BattleActionQueueItemController,BattleActionQueueItem>(
                View.CntrNamesGrid_UIGrid.gameObject
                , BattleActionQueueItem.NAME);
            mActionQueueNameItemSet[i] = ctrl;
            ctrl.Hide();
        }
        View.AttributeDesLabel_UILabel.text = "[f4feff]属性克制时,伤害加成20%。属性被克制时,[baff3f]伤害减少20%[-]。时、空、幻属性相互克制，[baff3f]克制加成仅为10%[-][-]";
        View.CntrNamesGrid_UIGrid.Reposition();

        mBattleFormationInfoController = AddController<BattleFormationInfoViewController, BattleFormationInfoView>(
                _view.BattleFormationInfoView);
        mBattleFormationInfoController.gameObject.SetActive(false);
    }

    protected override void OnDispose()
    {
        mActionQueueNameItemSet = null;
        UICamera.onClick -= OnCameraClick;
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        EventDelegate.Add(View.AttributeIconButton_UIButton.onClick,OnArrClickHandler);
        EventDelegate.Add(View.colloderButton_UIButton.onClick,OnCollderButton);
        EventDelegate.Add(View.FormationInfoBtn_UIButton.onClick, ShowFormationInfoView);

        UICamera.onClick += OnCameraClick;
    }

    //收到界面销毁后的回收处理，比如引用置空等

    protected override void RemoveCustomEvent()
    {
        
    }

    #endregion

    #region Event Handlers

    #endregion

    #region Public or open interface


    #endregion

    #region Update global UI

    #endregion

    public void UpdateView(IMainBattleView data)
    {
       var actionQueue = data.CurActDto;
        if (actionQueue == null)
        {
            mActionQueueNameItemSet.ForEach(ctrl=>ctrl.Hide());
            return;
        }

        BattleActionQueueItemController tFirstBattleActionQueueItemController = null;
        mActionQueueNameItemSet[0].transform.localPosition = new Vector3(0,6,0);
        actionQueue.actionTimeQueue
           .ForEachI((at, idx) =>
       {
           var ctrl = mActionQueueNameItemSet.TryGetValue(idx);
           if (ctrl == null) return;
           var rewardID = actionQueue.rewardQueue.TryGetValue(idx);
           var reward = DataCache.getDtoByCls<ActionTimeReward>(rewardID);
           var icon = string.Empty;
           var pPlayerUID = actionQueue.soldierQueue.TryGetValue(idx);
           var tMonsterController = BattleDataManager.MonsterManager.Instance.GetMonsterFromSoldierID(pPlayerUID);
           if (tMonsterController == null)
               return;
           var charactorType = string.Empty;
           
           switch (tMonsterController.side)
           {
               case BattlePosition.MonsterSide.Player:
                   charactorType = tMonsterController.videoSoldier.charactorType == (int)GeneralCharactor.CharactorType.MainCharactor ? "AC_MainCharactor" : "AC_Crew";
                   break;
               case BattlePosition.MonsterSide.Enemy:
                   charactorType = "AC_Monster";
                   break;
           }
           if (null != tMonsterController)
           {
               var tVideoSoldier = tMonsterController.videoSoldier;
               if (null != tVideoSoldier)
               {
                   if(tVideoSoldier.charactor != null)
                   {
                       icon = tVideoSoldier.charactor.texture.ToString();
                   }
                   else if(tVideoSoldier.monster != null)
                   {
                       icon = tVideoSoldier.monster.texture.ToString();
                   }
                   else
                   {
                       GameDebuger.Log("没有找到相对应图标");
                   }
               }
           }
           var itemData = BattleActionQueueItemData.Create(icon, reward,charactorType);
           ctrl.Show();
           ctrl.UpdateView(itemData,idx);
           if (tFirstBattleActionQueueItemController == null)
           {
               tFirstBattleActionQueueItemController = ctrl;
               ctrl.Flashing = true;
           }
           else
           {
               ctrl.Flashing = false;
           }
       });

        var i = actionQueue.actionTimeQueue.Count;
        while (i < mActionQueueNameItemSet.Length)
        {
            var ctrl = mActionQueueNameItemSet[i];
            ctrl.Hide();
            i++;
        }
    }

    #region 设置当前回合数
    public void SetRoundNumber(int number)
    {
        View.RoundNumberLabel_UILabel.text = number.ToString();
    }
    #endregion

    #region 设置阵法属性

    private FormationInfoDto GetFormation(int id, int lv)
    {
        FormationInfoDto info = new FormationInfoDto();
        info.formationId = id;
        info.level = lv;
        return info;
    }

    public void SetFormation()
    {
        var sFormation = BattleDataManager.DataMgr.BattleDemo.GameVideo.ateam;
        var eFormation = BattleDataManager.DataMgr.BattleDemo.GameVideo.bteam;
        var selfFormation = DataCache.getDtoByCls<Formation>(sFormation.formationId);
        var enemyFormation = DataCache.getDtoByCls<Formation>(eFormation.formationId);

        _view.EnemyFormation_UISprite.spriteName = string.Format("formationicon_{0}", enemyFormation == null ? "" : enemyFormation.id.ToString());
        _view.SelfFormation_UISprite.spriteName = string.Format("formationicon_{0}", selfFormation == null ? "" : selfFormation.id.ToString());

        if(selfFormation != null)
            mBattleFormationInfoController.SetSelfFormation(GetFormation(selfFormation.id, sFormation.formationGradeId));
        if(enemyFormation != null)
            mBattleFormationInfoController.SetEnemyFormation(GetFormation(eFormation.formationId, eFormation.formationGradeId));

        var i = IsRestrain(sFormation.formationId, eFormation.formationId);
        _view.SelfArrow_UISprite.spriteName = i >= 0
            ? i > 0 ? "ect_arrow_up" : ""
            : "ect_arrow_down";
        _view.EnemyArrow_UISprite.spriteName = i >= 0
            ? i > 0 ? "ect_arrow_down" : ""
            : "ect_arrow_up";
    }

    public void UpdateBGHeight()
    {
        mBattleFormationInfoController.UpdateBGHeight();
    }

    //1代表克制敌方,-1代表被敌方克制,0代表双方无克制
    private int IsRestrain(int sfid, int efid)
    {
        var f = DataCache.getDtoByCls<Formation>(sfid);
        if (f.debuffTargetIds.FindIndex(d => d == efid) != -1)
            return 1;
        if (f.targetIds.FindIndex(d => d == efid) != -1)
            return -1;
        return 0;
    }
    #endregion

    #region 点击属性相克按钮
    void OnArrClickHandler()
    {
        //属性克制时，伤害加成20%。属性被克制时，伤害减少20%。时空幻属性相互克制，克制加成仅为10%
        View.AttributeDesPanel_Gameobject.SetActive(!View.AttributeDesPanel_Gameobject.activeSelf);
    }

    void OnCollderButton()
    {
        if(View.AttributeDesPanel_Gameobject.activeSelf)
            View.AttributeDesPanel_Gameobject.SetActive(false);
    }

    void ShowFormationInfoView()
    {
        _view.FormationInfoUI_UIPanel.gameObject.SetActive(true);
    }
    #endregion

    private void OnCameraClick(GameObject go)
    {
        UIPanel panel = UIPanel.Find(go.transform);
        if(_view.FormationInfoUI_UIPanel.gameObject.activeSelf 
            && go != _view.FormationInfoUI_UIPanel)
            _view.FormationInfoUI_UIPanel.gameObject.SetActive(false);
    }
}
