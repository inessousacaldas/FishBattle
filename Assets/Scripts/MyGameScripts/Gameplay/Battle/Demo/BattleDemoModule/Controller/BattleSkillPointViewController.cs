// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/15/2017 11:56:03
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using AppDto;
using MyGameScripts.Gameplay.Battle.Demo.Helper;
using UnityEngine;
using BattleInstController = BattleDataManager.BattleInstController;
using MonsterManager = BattleDataManager.MonsterManager;

/// <summary>
/// 战斗界面技能点/行动点UI
/// @MarsZ in 03/15/2017 11:56:03
/// </summary>

public interface IBattleSkillPointViewData
{
    long pCharacterUID { get; }
    string Texture { get;}
    int MaxCP { get;}
    int CP { get; }
    int MaxHP { get;}
    int HP { get; }
    int MaxEP { get;}
    int EP { get; }
    string Icon { get; }
}

public partial class MonsterController : IBattleSkillPointViewData
{
    public string Icon {
        get { return DefaultMagicOrCraft.icon ; }
    }

    public long pCharacterUID {
        get { return GetId(); }
    }

    public string Texture {
        get { return videoSoldier.PlayerHeadTex(); }
    }

    public int CP {
        get { return videoSoldier.cp; }
    }

    public int HP {
        get { return videoSoldier.hp; }
    }

    public int EP {
        get { return videoSoldier.ep; }
    }
}
                     
public partial class BattleSkillPointViewController 
{
    #region property and field

    //前台角色
    private long mCurrentSelectedCharacterUID = 0L;
    
    //soliderID
    private long soliderID = 0l;

    private int sCraftNeedCP;

    public int SCraftNeedCP
    {
        set { sCraftNeedCP = value; }
    }

    public long SoliderID {
        get { return soliderID;}
        set { soliderID = value; }
    }

    //BUFF专用UI环绕特效
    private SurroundUIEffect mEffectForBuff;
    private SkillButtonCellController mSelectedSkillButtonCellController = null;

    private BaseProgressBarController hpProgressBar;
    private BaseProgressBarController epProgressBar;
    private BaseProgressBarController cpProgressBar;

    private OneShotUIEffect mFireEffect;   //火焰特效
    #endregion
    
    #region const

    //技能收缩效果持续时间
    public const float SKILL_HIDE_DURATION = 0.5f;

    public const string EFFECTNAME = "ui_eff_superskill";

    #endregion
    
    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        View.CntrNext_TweenPosition.duration = SKILL_HIDE_DURATION;//统一设置缓动时间
        hpProgressBar = AddController<BaseProgressBarController, BaseProgressBar>(_view.hp_ProgressBar);
        epProgressBar = AddController<BaseProgressBarController, BaseProgressBar>(_view.ep_ProgressBar);
        cpProgressBar = AddController<BaseProgressBarController, BaseProgressBar>(_view.cp_ProgressBar);

        SetFireEffect();
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        GameEventCenter.AddListener(GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, OnBuffStatusChanged);
        GameEventCenter.AddListener(GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, OnQueueUpdate);
        GameEventCenter.AddListener(GameEvent.BATTLE_UI_CD_STATUS_UPDATE, OnCDStatusUpdate);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void RemoveCustomEvent()
    {
        GameEventCenter.RemoveListener(GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, OnBuffStatusChanged);
        GameEventCenter.RemoveListener(GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, OnQueueUpdate);
        GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_CD_STATUS_UPDATE, OnCDStatusUpdate);
    }

    protected override void OnDispose()
    {
        if (null != mEffectForBuff)
        {
            mEffectForBuff.Dispose();
            mEffectForBuff = null;
        }

        if (null != mFireEffect)
        {
            mFireEffect.Dispose();
            mFireEffect = null;
        }
    }

    private void SetFireEffect()
    {
        mFireEffect = OneShotUIEffect.BeginFollowEffect(EFFECTNAME, _view.effgo, Vector2.zero);
    }
    #endregion

    #region Event Handlers

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>

    public void UpdateView(IBattleSkillPointViewData data)
    {
        mCurrentSelectedCharacterUID = data.pCharacterUID;
        // 头像
        View.SpriteCurrentHead_UISprite.enabled = !string.IsNullOrEmpty(data.Texture);
        UIHelper.SetPetIcon(View.SpriteCurrentHead_UISprite, data.Texture);
        // CP MaxCp
        UpdateCP(data.CP, data.MaxCP);
        // HP MaxHp
        UpdateHp(data.HP, data.MaxHP);
        // Ep MaxEp
        UpdateEp(data.EP, data.MaxEP);
        // bool Show btn

        UIHelper.SetSkillIcon(View.autoAtkBtn_UISprite, data.Icon);

    }

    private void UpdateEp(int dataEp, int dataMaxEp)
    {
        UpdateProgress(dataEp, dataMaxEp, _view.LabelCurEP_UILabel, epProgressBar);
    }

    private void UpdateHp(int dataHp, int dataMaxHp)
    {
        UpdateProgress(dataHp, dataMaxHp, _view.LabelHP_UILabel, hpProgressBar);
    }

    #endregion

    #region Update global UI
    
    #region 技能点、行动点

    private void UpdateProgress(int cur, int max, UILabel label, BaseProgressBarController ctrl)
    {
        label.text = cur.ToString();

        ctrl.UpdateView(cur, max);
    }

    private void UpdateCP(int pCurrentCP, int pMaxCP)
    {
        UpdateProgress(pCurrentCP, pMaxCP, _view.LabelCurCP_UILabel, cpProgressBar);
        _view.effgo.cachedGameObject.SetActive(sCraftNeedCP > 0 && pCurrentCP > sCraftNeedCP);
    }

    #endregion

    #endregion

    #region 当前操作角色的状态描述

    private void OnCDStatusUpdate(MonsterController pMonsterController)
    {
        if (null == pMonsterController || pMonsterController.GetId() != mCurrentSelectedCharacterUID)
            return;
        UpdateCurrentRoleStatus(mCurrentSelectedCharacterUID);
    }

    private void OnQueueUpdate(long pCharacterUID)
    {
//        if (pCharacterUID != mCurrentSelectedCharacterUID)
//            return;
        UpdateCurrentRoleStatus(mCurrentSelectedCharacterUID);
    }

    private void UpdateCurrentRoleStatus(long pCharacterUID)
    {
        var tStatusTip = string.Empty;
        var tMonsterController = MonsterManager.Instance.GetMonsterFromSoldierID(pCharacterUID);
        if (null != tMonsterController)
        {
            if (tMonsterController.IsInCD)//技能CD时，显示操作状态
            {
                var tSkill = tMonsterController.GetCurSelectSkill();
                if (null != tSkill)
                {
                    if (BattleDataManager.GetUseItemSkillId() == tSkill.id)
                        tStatusTip = "使用物品中";
                    else
                        tStatusTip = "技能吟唱中";
                }
            }
            else//队列中
            {
                var tQueueIndex = BattleInstController.Instance.GetVideoRoundIndexByPlayerUID(pCharacterUID);
                if (tQueueIndex >= 0)
                    tStatusTip = string.Format("行动顺序:{0}", tQueueIndex + 1);
            }
        }
        UpdateCurrentRoleStatus(tStatusTip);
    }

    private void UpdateCurrentRoleStatus(string pStatusTip)
    {
        if (string.IsNullOrEmpty(pStatusTip))
        {
            View.LabelOptionStatus_UILabel.alpha = 0f;
        }
        else
        {
            View.LabelOptionStatus_UILabel.alpha = 1f;
            View.LabelOptionStatus_UILabel.text = pStatusTip;
        }
    }

    #endregion

    

    #region BUFF效果

    private void OnBuffStatusChanged(long pMonsterUID, SkillBuff pBuff, bool pIsBuffAdded)
    {
        if (pMonsterUID != mCurrentSelectedCharacterUID || null == pBuff)
            return;
        ShowBuffEffect(pBuff, pIsBuffAdded);
    }

    private void ShowBuffEffect(SkillBuff pSkillBuff, bool pIsBuffAdded)
    {
        if (null == pSkillBuff)
            return;
        var tSurroundEffectName = BattleDataManager.DataMgr.BattleDemo.GetUIEffectForBuff(pSkillBuff);
        if (string.IsNullOrEmpty(tSurroundEffectName))
        {
            GameDebuger.Log("ShowBuffEffect failed , tSurroundEffectName IsNullOrEmpty ");
            return;
        }
        ShowBUFFEffect(tSurroundEffectName, pIsBuffAdded);
    }

    private void ShowBUFFEffect(string pBuffEffectName, bool pShow)
    {
        if (pShow)
        {
            if (null != mEffectForBuff)
            {
                if (mEffectForBuff.GetEffectName() == pBuffEffectName)
                {
                    mEffectForBuff.SetActive(true);
                    return;
                }
                mEffectForBuff.Dispose();
            }

            mEffectForBuff = SurroundUIEffect.Begin(pBuffEffectName, _view.BtnCurrentHead_UIButton.sprite, 4f, false, DG.Tweening.PathType.CatmullRom);
        }
        else
        {
            if (null != mEffectForBuff)
                mEffectForBuff.SetActive(false);
            CheckMoreEffect();
        }
    }

    private void CheckMoreEffect()
    {
        var tMonsterController = MonsterManager.Instance.GetMonsterFromSoldierID(mCurrentSelectedCharacterUID);
        if (null == tMonsterController)
            return;
        var tSkillBuff = tMonsterController.GetNeedUIEffectBuff();
        if (null != tSkillBuff)
            ShowBuffEffect(tSkillBuff, true);
    }

    #endregion
}
