// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 01/19/2017 20:38:46
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using AppDto;
using MyGameScripts.Gameplay.Battle.Demo.Helper;
using UniRx;
using UnityEngine;

/// <summary>
/// 战斗内主界面
/// This is the controller class for module BattleDemoS1Main, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 01/19/2017 20:38:46
/// </summary>

public partial interface IBattleDemoViewController
{
    void StartGameVideo();
    void CancelAutoButton();
    void ShowRoundWating(bool show);
    void UpdateBattleLaunchTimer(int tReadyTimeInSec, Action act);
	void RemoveRollSkillView();
    IBattleItemViewController ShowItemPanel();
    //IBattleOrderViewContorller PlayerOrderCtrl { get; }

    UniRx.IObservable<long> OnPlayerBtnCurrentHeadClick { get; }
    IBattleOptionsController BattleOptionCtrl { get; }
    IBattleSummonViewController ShowBattleSummonPanel();

    void RemoveItemView();
    void RemveAutoSkillView();

    IBattleSkillViewController ShowSkillPanel(IEnumerable<Skill> skillList, Skill.SkillEnum type = Skill.SkillEnum.Crafts);
    IBattleSkillViewController ShowAutoSkillPanel(IEnumerable<Skill> skillList);

    Action<IBattleDemoViewController, long> OnAutoSkillBtnClick { set; }
    IBattleSummonViewController SummonCtrl { get; }
}

public sealed partial class BattleDataManager
{
    public partial class BattleDemoViewController
    {

        #region const

        private const string SKILL_COMMMON_CD_COOLDOWN = "BATTLE_SKILL_COMMMON_CD_COOLDOWN_ID_{0}";

        #endregion

        #region property and field

        //-------------------------------------------------------------------------------------------------------------

        //战斗回合时间控制
        private BattleLaunchTimer _battleLaunchTimer;

        public int _battleRound;

        #region data

        #endregion

        #endregion

        #region 能量点相关UI 
        private Subject<long> sCraftBtnClick; 
        private List<BattleSkillPointViewController> _mPlayerSkillCtrlList = null;

        #endregion

        #region 角色指令选择盘
        #endregion

        #region 右侧按钮栏
        private bool _isShow = true;
        private RightExpandBtnGroupController _rightExpandBtnGroupCtrl;
        #endregion

        //操作按钮界面
        private BattleOptionViewController _mBattleOptionViewController = null;

//        #region 名字队列
        private BattleActionQueueController mBattleActionQueueController = null;

        private BattleSkillViewController _battleSkillCtrl; //手动战斗技能
        private BattleSkillViewController _autoSkillCtrl;   //自动战斗技能
        private BattleSummonViewController _summonCtrl;         //召唤伙伴界面

        // 物品使用界面
        private BattleItemViewController _battleItemViewCtrl;
        private Action onLaunchTimeFinishDelegate;
        private BattleOptionsController _battleOptionCtrl;
        public IBattleOptionsController BattleOptionCtrl { get { return _battleOptionCtrl; } }
        public IBattleSummonViewController SummonCtrl { get { return _summonCtrl; } }
        
        private List<SkillItemController> _autoSkillItemControllers;

        public Action<IBattleDemoViewController, long> _onAutoSkillBtnClick;
        public Action<IBattleDemoViewController, long> OnAutoSkillBtnClick {
            set { _onAutoSkillBtnClick = value;}
        }

        //在打开界面之前，初始化数据
        protected override void InitData()
        {
            _disposable = new CompositeDisposable();
            sCraftBtnClick = new Subject<long>();
            _mPlayerSkillCtrlList = new List<BattleSkillPointViewController>(BattleConst.MaxTeamMemberCnt);
            _autoSkillItemControllers = new List<SkillItemController>(2);
            
        }
        private void InitlializeBattleInfo()
        {
            BattleActionPlayerPoolManager.Instance.Setup(this.gameObject);
        }

        protected override void UpdateDataAndView(IBattleDemoModel demoModel)
        {
            var data = demoModel.MainBattleView;

            if (data.battleState == BattleSceneStat.Battle_OVER)
            {
                return;
            }

            UpdateTeamMemberCtrl(data);
            
            UpdateAutoSkillGrid(data);
            
            if (data.isAIManagement
                || data.battleState != BattleSceneStat.BATTLE_PlayerOpt_Time
                || data.CurActMonsterController.GetCurSelectSkill() != null)
            {
                RemoveRollSkillView();
                RemoveItemUseView();
                RemoveSummonCrewView();
            }

            if (!data.isAIManagement)
            {
                RemveAutoSkillView();
            }

            if (data.lastBattleState == BattleSceneStat.Invalid
                || data.battleState != data.lastBattleState)
            {
                UpdateByState(data);

                if ( data.battleState == BattleSceneStat.ON_WAITING_ActTime_Update)
                    BattleRoundPlayFinish(data.CurRoundCnt);

                StopTimer();
                if (data.battleState == BattleSceneStat.BATTLE_PlayerOpt_Time)
                {
                    UpdateBattleLaunchTimer(data.OptTime);
                }
            }

            View.AutoButton_UIButton.gameObject.SetActive(!data.isAIManagement);
            View.ManualButton_UIButton.gameObject.SetActive(data.isAIManagement);

            mBattleActionQueueController.UpdateView(data);
            UpdateBattleRoundLabel(data.CurRoundCnt);

            OnAutoBtnStatusChange(data.isAIManagement);

            var showDesc = data.battleState == BattleSceneStat.BATTLE_PlayerOpt_Time
                           && !data.isAIManagement
                           && data.IsCurActMonsterCanbeOpt
                           && data.CurActMonsterController.GetCurSelectSkill() != null;
            var skill = showDesc ? data.CurActMonsterController.GetCurSelectSkill() : null;

            UpdateOptionBtnsTable(data);
            UpdateSkillDes(showDesc, skill, data.IsCurActMonsterUsingSCraft);
            
        }

        private void UpdateOptionBtnsTable(IMainBattleView data)
        {
            _view.BattleOptionsTable.gameObject.SetActive(data.IsCurActMonsterCanbeOpt
                                               && data.CurActMonsterController.GetCurSelectSkill() == null);
            _view.CallButton_UIButton.gameObject.SetActive(
                data.CurActMonsterController != null 
                && data.CurActMonsterController.IsMainCharactor());
            _view.BattleOptionsTable.Reposition();
        }

        private void UpdateAutoSkillGrid(IMainBattleView data)
        {
            var soldiers = data.GetOptSoldiers();
            if (soldiers == null)
            {
                _view.AutoSkillGrid.gameObject.SetActive(false);
                return;
            }
            _view.AutoSkillGrid.gameObject.SetActive(true);
            var i = 0;
            
            var childCnt = _autoSkillItemControllers.Count;
            
            soldiers.ForEachI((s, idx) =>
            {
                var ctrl = _autoSkillItemControllers.TryGetValue(idx);
                if (ctrl == null)
                {
                    ctrl = AddCachedChild<SkillItemController, SkillItem>(
                        _view.AutoSkillGrid.gameObject
                        , SkillItem.NAME
                        , SkillItem.NAME + "_" + idx);
                    _autoSkillItemControllers.Add(ctrl);
                    _disposable.Add(ctrl.OnSkillItem_UIButtonClick.Subscribe(_ =>
                    {
                        if (_onAutoSkillBtnClick != null)
                            _onAutoSkillBtnClick(this, s.id);
                    }));
                }
                else
                {
                    ctrl.Show();
                }
                ctrl.UpdateView(s.defaultSkillId);
                
                i = idx + 1;
            });

            while (i < childCnt)
            {
                var ctrl = _autoSkillItemControllers[i];
                ctrl.Hide();
                i++;
            }
            
            _view.AutoSkillGrid.Reposition();
        }

        private void RemoveItemUseView()
        {
            if (_battleItemViewCtrl != null)
            {
                var tips = _battleItemViewCtrl.GetTips;
                if (tips != null)
                    tips.Close();

                RemoveChild<BattleItemViewController, BattleItemView>(_battleItemViewCtrl);
            }
            _battleItemViewCtrl = null;
        }

        private void UpdateTeamMemberCtrl(IMainBattleView data)
        {
            var ctrlCnt = _mPlayerSkillCtrlList.Count;
            var i = 0;
            data.GetControlledMC().ForEachI((mc, idx)=>
            {
                BattleSkillPointViewController ctrl = null;
                if (idx < ctrlCnt)
                {
                    ctrl = _mPlayerSkillCtrlList[idx];
                }
                else
                {
                    ctrl = AddCachedChild<BattleSkillPointViewController, BattleSkillPointView>(_view.PositionSkillPointUI,
                        BattleSkillPointView.NAME);
                    _mPlayerSkillCtrlList.Add(ctrl);
                    ctrl.OnBtnCurrentHead_UIButtonClick.Subscribe(_ =>
                        sCraftBtnClick.OnNext(ctrl.SoliderID)
                    );
                    _disposable.Add(MonsterController.SoliderStream.Subscribe(solider =>
                    {
                        if (solider.id != ctrl.SoliderID)
                            return;
                     
                        ctrl.UpdateView(mc);
                    }));
                }
                
                if (ctrl.SoliderID <= 0 || ctrl.SoliderID != mc.GetId())
                {
                    ctrl.SoliderID = mc.GetId();    
                    var skill = DataCache.getDtoByCls<Skill>(mc.videoSoldier.defaultSCraftsId);
                    ctrl.SCraftNeedCP = skill != null ? skill.consume : 0;
                }
                
                ctrl.UpdateView(mc);
                ctrl.Show();
                
                i = idx;
            });

            while (i < ctrlCnt - 1)
            {
                i++;
                var ctrl = _mPlayerSkillCtrlList[i];
                ctrl.Hide();
            }
            _view.PositionSkillPointUI_UIGrid.Reposition();
        }

        private void UpdateSkillDes(bool showDesc, Skill skill, bool isUsingSCraft)
        {
            _view.SkillDescribe.SetActive(showDesc);
            _view.CancelSkillButton_UIButton.gameObject.SetActive(showDesc);
            //_view.CancelButton_UIButton.gameObject.SetActive(!isUsingSCraft);//不显示取消按钮
            if (!showDesc) return;
            try
            {
                _view.titleLabel_UILabel.text = skill.name;
                _view.contentLabel_UILabel.text = skill.shortDescription;
                _view.SkillDescBG_UISprite.UpdateAnchors();
            }
            catch (Exception e)
            {
                GameDebuger.LogError(e);
                throw;
            }
        }

        public void StartGameVideo()
        {
            ShowBattleUI();

            _mBattleOptionViewController.UpdateDefaultSkillIcon();
            _mBattleOptionViewController.UpdatePlayerAndPetDefaultSkill();
        }

        public UniRx.IObservable<long> OnPlayerBtnCurrentHeadClick {
            get { return sCraftBtnClick; }
        }
        
        public void RemoveRollSkillView()
        {
            if (_battleSkillCtrl != null)
            {
                _battleSkillCtrl.CloseTips();
                RemoveChild<BattleSkillViewController, BattleSkillView>(_battleSkillCtrl);
            }
            _battleSkillCtrl = null;
        }

        public void RemveAutoSkillView()
        {
            if (_autoSkillCtrl != null)
            {
                _autoSkillCtrl.CloseTips();
                RemoveChild<BattleSkillViewController, BattleSkillView>(_autoSkillCtrl);
            }
            _autoSkillCtrl = null;
        }

        public void RemoveItemView()
        {
            if (_battleItemViewCtrl != null)
                RemoveChild<BattleItemViewController, BattleItemView>(_battleItemViewCtrl);
            _battleItemViewCtrl = null;
        }

        public void RemoveSummonCrewView()
        {
            if (_summonCtrl != null)
            {
                RemoveChild<BattleSummonViewController, BattleSummonView>(_summonCtrl);
            }
            _summonCtrl = null;
        }

        public void StopTimer()
        {
            _battleLaunchTimer.StopTimer();
            _battleLaunchTimer.Hide();
        }

        public IBattleSkillViewController ShowSkillPanel(IEnumerable<Skill> skillList, Skill.SkillEnum type = Skill.SkillEnum.Crafts)
        {
            _view.SkillGroup.SetActive(true);
            if (_battleSkillCtrl == null)
            {
                _battleSkillCtrl = AddChild<BattleSkillViewController, BattleSkillView>(_view.SkillGroup.gameObject,
                    BattleSkillView.NAME);
            }
            SetSkillViewPos(type);
            _battleSkillCtrl.SetSkillList(skillList);
            _disposable.Add(_battleSkillCtrl.GetCloseHandler.Subscribe(_ => { RemoveRollSkillView(); }));
            return _battleSkillCtrl;
        }

        public IBattleSkillViewController ShowAutoSkillPanel(IEnumerable<Skill> skillList)
        {
            _view.SkillGroup.SetActive(true);
            if (_autoSkillCtrl == null)
            {
                _autoSkillCtrl = AddChild<BattleSkillViewController, BattleSkillView>(_view.SkillGroup.gameObject,
                    BattleSkillView.NAME);
            }
            
            if(skillList.Count() > 6)
                _view.SkillGroup.transform.localPosition = new Vector3(-23, -50, 0);
            else
                _view.SkillGroup.transform.localPosition = new Vector3(-23, -168, 0);

            _autoSkillCtrl.SetSkillList(skillList);
            _disposable.Add(_autoSkillCtrl.GetCloseHandler.Subscribe(_ => { RemveAutoSkillView(); }));
            return _autoSkillCtrl;
        }

        private void SetSkillViewPos(Skill.SkillEnum type)
        {
            switch (type)
            {
                 case Skill.SkillEnum.Crafts:   
                    _view.SkillGroup.transform.localPosition = new Vector3(-23, -73, 0);
                    break;
                case Skill.SkillEnum.Magic:
                    _view.SkillGroup.transform.localPosition = new Vector3(-23, 5, 0);
                    break;
            }
        }
        
        public IBattleItemViewController ShowItemPanel()
        {
            if (_battleItemViewCtrl == null)
                _battleItemViewCtrl = AddChild<BattleItemViewController, BattleItemView>(
                    _view.panelPos
                    , BattleItemView.NAME);
            _disposable.Add(_battleItemViewCtrl.OnCloseHandler.Subscribe(_ => { RemoveItemView(); }));
            return _battleItemViewCtrl;
        }

        public IBattleSummonViewController ShowBattleSummonPanel()
        {
            if (_summonCtrl == null)
                _summonCtrl = AddChild<BattleSummonViewController, BattleSummonView>(_view.CrewPanelPos_UIPanel.gameObject,
                    BattleSummonView.NAME);

            _disposable.Add(_summonCtrl.GetCloseHandler.Subscribe(_ => { RemoveSummonCrewView(); }));
            return _summonCtrl;
        }

        public void CancelAutoButton()
        {
            _mBattleOptionViewController.CancelAutoButton();
        }

        //界面就绪后初始化，比如组件初始化
        protected override void AfterInitView()
        {
            LayerManager.Instance.UpdateBGTextureVisible(true);

            // 系统功能开放临时方案 fish
            var isOpen = FunctionOpenHelper.isFuncOpen( FunctionOpen.FunctionOpenEnum.FUN_4);
            _view.AutoButton.SetActive(isOpen);
            _view.cancelLabel_UILabel.text = "取消";

            _mBattleOptionViewController =
                AddCachedChild<BattleOptionViewController, BattleOptionView>(_view.CntrOption,
                    BattleOptionView.NAME);
            _mBattleOptionViewController.Hide();

            mBattleActionQueueController = AddCachedChild<BattleActionQueueController, BattleActionQueueView>(
                _view.ActionViewPos
                , BattleActionQueueView.NAME);

            _battleOptionCtrl = AddController<BattleOptionsController, BattleOptions>(_view.BattleOptionsTable.gameObject);
            
            _rightExpandBtnGroupCtrl =
                AddController<RightExpandBtnGroupController, RightExpandBtnGroup>(_view.RightExpandGroup.gameObject);
            _rightExpandBtnGroupCtrl.SetFuncOpen();
            _rightExpandBtnGroupCtrl.RefreshTweenPos(false);

            InitBattleLaunchTimer();

            GameDebuger.TODO(@"CurWatchTeamId = watchTeamId;");

            GameDebuger.TODO(@"if (DataMgr._data.GameVideo is GuideVideo)
        {
            _guideBattle = true;
            DataMgr._data.isAIManagement = false;
            TalkingDataHelper.OnEventSetp('StartBattle', 'Begin');
        }
        else
        {
            _guideBattle = false;
        }");

            BattleLaunchTimer.MAX_INSTRUCTION_TIME = DataMgr._data.GameVideo.readyTime;


            GameDebuger.TODO(@"PetPropertyInfo battlePetInfo = ModelManager.Pet.GetBattlePetInfo();
        if (battlePetInfo != null)
        {
            if ((battlePetInfo.petDto.lifePoint >= 0 && battlePetInfo.petDto.lifePoint <= 50) && !ModelManager.Pet.isZhenShenPet(battlePetInfo))
            {
                TipManager.AddTip(""参战宠物寿命≤50，无法出战"");
            }
        }        
");
            InitlializeBattleInfo();
            SetFormationInfo();
        }

        private void UpdateByState(IMainBattleView data)
        {
            GameDebuger.TODO(@"if (IsWatchMode)
                {
                    return;
                }");
            var stat = data.battleState;
            
            switch (stat)
            {
                case BattleSceneStat.BATTLE_PlayerOpt_Time:
                case BattleSceneStat.ON_WAITING_ActTime_Update:
                    ShowTargetSelect(null);          
                    ShowRoundWating(false);
                    UpdateBattleButtonView();
                    _mBattleOptionViewController.UpdateDefaultSkillIcon();
                    
                    break;
                
                case BattleSceneStat.FINISH_COMMAND:
                    MonsterManager.Instance.UpdateMonsterNeedReady(false, (mc) =>
                    {
                        return mc.IsPlayerCtrlCharactor();
                    });

                    ShowTargetSelect(null);

                    if (!DataMgr._data.isAIManagement)
                    {
                        ProxyBattleDemoModule.HideSkillSelect();
                    }
                    _battleLaunchTimer.Hide();
                    ShowRoundWating(true);
                    UpdateBattleButtonView();
                    
                    break;
                case BattleSceneStat.ON_COMMAND_ENTER:
                    _mBattleOptionViewController.HideAllButton(true);
                    break;
                case BattleSceneStat.ON_COMMAND_EXIT:
                    _mBattleOptionViewController.HideAllButton(false);
                    break;
               
                case BattleSceneStat.Invalid:
                    break;
                case BattleSceneStat.BATTLE_PRESTART:
                    SetReadyState();
                    break;
                case BattleSceneStat.BATTLE_VIDEOROUND_PLAYING:
                    break;
                default:
                    break;
            }
        }

        private void SetDefaultSkillIcon(UISprite sprite, GameObject iconGroup, UISprite iconSprite, UILabel label,
            int skillId)
        {
            var skill = DataCache.getDtoByCls<Skill>(skillId);
            if (null == skill)
            {
                GameDebuger.LogError("SetDefaultSkillIcon failed , Skill is null ,skillId " + skillId.ToString());
                return;
            }
            sprite.gameObject.SetActive(false);
            iconGroup.SetActive(true);
            label.text = skill.name;
            UIHelper.SetSkillIcon(iconSprite, skill.icon);
        }

        //添加事件监听
        protected override void RegistCustomEvent()
        {
            #region Logic Event
            
            GameEventCenter.AddListener(GameEvent.BATTLE_FIGHT_DESTROY, Destory);
            GameEventCenter.AddListener(GameEvent.BATTLE_FIGHT_VIDEOROUND, UpdateBattleRound);
            GameEventCenter.AddListener(GameEvent.BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL, OnHideAutoRoundTimeLabel);
            GameEventCenter.AddListener(GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, ShowTargetSelect);
            GameEventCenter.AddListener(GameEvent.BATTLE_UI_SHOW_SKILL_TIP, OnShowSkillTip);
            
            #endregion

            EventDelegate.Add(_view.ShowPanelBtn_UIButton.onClick, () =>
            {
                _rightExpandBtnGroupCtrl.RefreshTweenPos(_isShow);
                _isShow = !_isShow;
            });
            _disposable.Add(_rightExpandBtnGroupCtrl.RefreshPos.Subscribe(_ =>
            {
                _rightExpandBtnGroupCtrl.RefreshTweenPos(_isShow);
                _isShow = !_isShow;
            }));
        }

        protected override void RemoveCustomEvent()
        {
            #region Logic Events
            GameEventCenter.RemoveListener(GameEvent.BATTLE_FIGHT_DESTROY, Destory);
            GameEventCenter.RemoveListener(GameEvent.BATTLE_FIGHT_VIDEOROUND, UpdateBattleRound);

            GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL, OnHideAutoRoundTimeLabel);
            GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, ShowTargetSelect);
            GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_SHOW_SKILL_TIP, OnShowSkillTip);

            #endregion
        }

        //收到界面销毁后的回收处理，比如引用置空等
        protected override void OnDispose()
        {
            GameDebuger.TODO(@"if (IsGuideHeroAndPetBattle())
        {
            NewBieGuideManager.DataMgr.FinishGuide(NewBieGuideManager.Key_GuideHeroAndPetBattle);
            }");
            
            LayerManager.Instance.UpdateBGTextureVisible(false);
            ProxyTipsModule.CloseSkillTips();
            
            RemoveEvent();
            _disposable = _disposable.CloseOnceNull();
             sCraftBtnClick = sCraftBtnClick.CloseOnceNull();
            _mPlayerSkillCtrlList.Clear();
            _autoSkillItemControllers.Clear();
        }

        #region Event Handlers

        private void OnShowSkillTip(Skill pSkill, bool pShow)
        {
            if (pShow)
            {
                if (null == pSkill)
                    return;
                ProxyTipsModule.ShowSkillTips(pSkill, _view.CntrSkillTip);
            }
            else
                ProxyTipsModule.CloseSkillTips();
        }

        #endregion

        #region Public or open interface

        public void ShowRoundWating(bool show)
        {
            show = false;
            _view.RoundWatingSprite.gameObject.SetActive(show);
        }

        private void InitBattleLaunchTimer()
        {
            _battleLaunchTimer = _view.RoundTimeLabel_UILabel.gameObject.GetMissingComponent<BattleLaunchTimer>();
            _battleLaunchTimer.autoRoundTimeLabel = _mBattleOptionViewController.autoRoundTimeLabel;
            GameDebuger.TODO(@"if (!IsWatchMode && !_guideBattle)");
            {
                _battleLaunchTimer.OnFinishedDelegate += HandleLaunchTimeFinish;
            }
        }

        // todo fish
        //战斗回合播放完成
        private void BattleRoundPlayFinish(int round)
        {
            var tPreFinishActionUID = BattleInstController.Instance.PreFinishedActionPlayerUID();
            if (tPreFinishActionUID <= 0)
                return;
                
            if (ServiceRequestAction.SimulateNet)
            {
                if (round ==
                    BattleInstController.Instance.VideoRoundsCnt)
                {
                    GameDebuger.LogError(string.Format("[单机/非错误]模拟大回合开始，_playRoundIndex：{0}，_videoRounds.Count：{1}",
                        round,
                        BattleInstController.Instance.VideoRoundsCnt));
                    //                    DemoSimulateHelper.SimulateRoundStart();
                }
            }
            
            ShowRoundWating(true);
        }

        //战斗准备状态
        private void SetReadyState()
        {
            ShowRoundWating(false);
        }

        public void UpdateBattleLaunchTimer(int tReadyTimeInSec, Action act = null )
        {
            onLaunchTimeFinishDelegate = act;
            GameDebuger.TODO(@"if (!_guideBattle)");
            {
                GameDebuger.TODO(@"if (DataMgr._data.GameVideo.currentRoundCommandOptRemainSec != 0)
                {
                    _battleLaunchTimer.LaunchTimer(DataMgr._data.GameVideo.currentRoundCommandOptRemainSec, DataMgr._data.GameVideo.cancelAutoSec,
                        DataMgr._data.isAIManagement);
                    DataMgr._data.GameVideo.currentRoundCommandOptRemainSec = 0;
                }
                else");
                {
                    _battleLaunchTimer.LaunchTimer(
                        tReadyTimeInSec
                        , tReadyTimeInSec
                        , true);
                }
            }
        }

        private void Destory()
        {
            if (_battleLaunchTimer == null) return;
            _battleLaunchTimer.OnFinishedDelegate -= HandleLaunchTimeFinish;
            _battleLaunchTimer.DestroyIt();
        }
        
        #endregion

        #region Update global UI

        private void HandleLaunchTimeFinish()
        {
            GameUtil.SafeRun(onLaunchTimeFinishDelegate);
            onLaunchTimeFinishDelegate = null;
        }

        //显示目标选择
        public void ShowTargetSelect(Skill skill, string pTipContent = "")
        {
            if (skill == null)
            {
                GameDebuger.Log(
                    "ShowTargetSelect , TargetSelectSprite_UISprite SetActive false , because skill == null !");
                _view.TargetSelectSprite.SetActive(false);
            }
            else
            {
                UIHelper.SetPetIcon(_view.SpriteHead_UISprite,
                    DataMgr._data.CurActMonsterController.videoSoldier.charactor.texture.ToString());
                _view.SkillNameLabel_UILabel.text = skill.name;
                _view.TargetSelectSprite.SetActive(true);
                _view.SelectTipLabel_UILabel.text = pTipContent;
            }
        }

        public void ShowBattleUI()
        {
            GameDebuger.TODO(@"ShowMonsterStatus(null);");

            UpdateBattleButtonView();
            ShowTargetSelect(null);
            ShowRoundWating(false);
            UpdateBattleRound(null);

            GameDebuger.TODO(@"if (IsWatchMode)
        {
            BattleOptionController.UpdateExitBtnStatus(true);
            View.BottomRightAnchor_Transform.gameObject.SetActive(false);
            View.BottomButtonGrid_UIGrid.gameObject.SetActive(false);
        }
        else");
            {
                _mBattleOptionViewController.UpdateExitBtnStatus(false);
            }

            _mBattleOptionViewController.UpdateOptionRole(ModelManager.Player.GetPlayerId());
        }

        public void UpdateBattleRound(VideoRound videoRound)
        {

            GameDebuger.TODO(@"int showRound = _battleRound == 0 ? 1 : _battleRound;
            UpdateBattleRound(showRound);");

            _battleLaunchTimer.Hide();
            ShowRoundWating(false);
            GameDebuger.TODO(@"CheckRoundMonsterShout();
        if (_battleRound == 3 && IsGuideHeroAndPetBattle())
        {
            UIModuleManager.DataMgr.SendOpenEvent(GuideAutoSkillSetting, this);
        }");
        }

        public void UpdateBattleRoundLabel(int round)
        {
            round = Mathf.Max(0, round);
            _view.RoundLabel_UILabel.text = round.ToString();
            mBattleActionQueueController.SetRoundNumber(round);
        }

        #endregion

        #region 各种按钮点击回调

        private void OnAutoBtnStatusChange(bool isAuto)
        {
            //_view.AutoableGroup.SetActive(isAuto);
            _view.AutoButton_UIButton.gameObject.SetActive(!isAuto);
            _view.ManualButton_UIButton.gameObject.SetActive(isAuto);
            //ShowManualEffect(isAuto);     //暂时不显示特效   --xush
        }

        private void BtnCommand_UIButtonClickHandler()
        {
            ProxyBattleDemoModule.OpenBattleOrderListView(1, ModelManager.Player.GetPlayerId(), (pBattleOrderInfo) =>
            {
                if (null != pBattleOrderInfo)
                    _mBattleOptionViewController.UseSpecialSkill(BattleDataManager.GetCommandSkillId(),
                        pBattleOrderInfo.orderName, 0, 0, "请选择指挥标记目标", pBattleOrderInfo);
            });
        }

        //响应取消按钮点击
        private void CancelButton_UIButtonClickHandler()
        {
            if (DataMgr._data.IsGameOver
            || DataMgr._data.LockUI)
            {
                return;
            }

            var skillId = DataMgr._data.CurActMonsterController.GetBattleTargetSelector().GetSelectedSkillId();
            if (!DataMgr._data.CurActMonsterController.IsNormalAttack(skillId)
                && skillId != GetProtectSkillId()
                && skillId != GetCaptureSkillId()
                && skillId != GetUseItemSkillId()
                && skillId != GetCommandSkillId())
            {
                _mBattleOptionViewController.OnSkillButtonClick();
            }

            ShowTargetSelect(null);
        }

        #endregion

        #region 自动手动相关操作UI

        private void UpdateBattleButtonView()
        {   
            GameDebuger.TODO(@"if (!IsWatchMode)");
            {
                _mBattleOptionViewController.SetAutoMode(
                    DataMgr._data.isAIManagement
                    , DataMgr._data.battleState == BattleSceneStat.FINISH_COMMAND
                    , DataMgr._data.battleState == BattleSceneStat.ON_COMMAND_ENTER);
            }

            GameDebuger.TODO(@"if (_guideBattle && DataMgr._data.battleState == BattleSceneStat.ON_PROGRESS)
        {
            View.Anchor_BottomRight_Transform.gameObject.SetActive(false);
        }
        else");
            {
                _view.Anchor_BottomRight.SetActive(true);
            }
        }

        private void OnHideAutoRoundTimeLabel()
        {
            _battleLaunchTimer.HideAutoRoundTimeLabel();
        }

        #endregion

        #region 总伤害信息

        private BattleTotalDamageHealController mBattleTotalDamageHealController;

        private BattleTotalDamageHealController BattleTotalDamageHealController
        {
            get
            {
                return mBattleTotalDamageHealController ?? (mBattleTotalDamageHealController =
                           AddCachedChild<BattleTotalDamageHealController, BattleTotalDamageHealView>(
                               _view.CntrDamageHealInfoUI, BattleTotalDamageHealView.NAME));
            }
        }

        #endregion

        #region 阵型UI相关

        private void SetFormationInfo()
        {
            mBattleActionQueueController.SetFormation();
            mBattleActionQueueController.UpdateBGHeight();
        }

        #endregion

    }
}

