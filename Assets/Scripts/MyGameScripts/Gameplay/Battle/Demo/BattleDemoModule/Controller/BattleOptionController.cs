// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/15/2017 15:58:06
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System;
using MonsterManager = BattleDataManager.MonsterManager;

/// <summary>
/// 战斗界面（技能等）操作按钮集合
/// @MarsZ in 03/15/2017 15:58:06
/// </summary>
public partial class BattleOptionViewController
{
    #region property and field

    //快捷技能列表
    private List<SkillButtonCellController> mSkillButtonCellControllerList = new List<SkillButtonCellController>();
    //自动模式默认技能选择窗打开状态
    private bool _isPetautoSkillSelect;

    //当前选中的操作角色
    public long mCurrentSelectedCharacterUID = 0L;

    #region data

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        View.BottomButtonGrid_TweenPosition.duration = BattleSkillPointViewController.SKILL_HIDE_DURATION;//统一设置缓动时间
        View.BtnConfig_TweenPosition.duration = BattleSkillPointViewController.SKILL_HIDE_DURATION;//统一设置缓动时间
        View.BottomRightAnchor_TweenPosition.duration = BattleSkillPointViewController.SKILL_HIDE_DURATION;//统一设置缓动时间
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        GameDebuger.TODO(@"EventDelegate.Set(View.ProtectButton.onClick, OnProtectButtonClick);");
        GameDebuger.TODO(@"EventDelegate.Set(View.CatchButton.onClick, OnCatchButtonClick);");
        GameDebuger.TODO(@"EventDelegate.Set(View.MagicButton_UIButton.onClick, OnMagicEquipButtonClick);");
        EventDelegate.Set(View.SkillButton_UIButton.onClick, OnSkillButtonClick);
        
        EventDelegate.Set(View.ItemButton_UIButton.onClick, OnItemButtonClick);
        EventDelegate.Set(View.DefenseButton_UIButton.onClick, OnDefenseButtonClick);

        DefaultSkillController.OnClickHandler = OnDefaultSkillClick;
        PlayerDefaultSkillController.OnClickHandler = OnPlayerDefaultSkillClick;
        PetDefaultSkillController.OnClickHandler = OnPetDefaultSkillClick;

        GameEventCenter.AddListener(GameEvent.BATTLE_UI_UPDATE_POSITION, OnTranPositionUpdate);
        GameEventCenter.AddListener(GameEvent.BATTLE_UI_SKILL_COMMON_CD, OnBattleCommonCD);
        GameEventCenter.AddListener(GameEvent.BATTLE_UI_SKILL_SELECTED, OnSkillSelected);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        mSkillButtonCellControllerList.Clear();
    }

    protected override void RemoveCustomEvent()
    {
        GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_UPDATE_POSITION, OnTranPositionUpdate);
        GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_SKILL_COMMON_CD, OnBattleCommonCD);
        GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_SKILL_SELECTED, OnSkillSelected);
    }

    #endregion

    #region Event Handlers

    private void OnTranPositionUpdate(Transform pTransform)
    {
        if (BaseView.IsViewDestroy(View) || null == pTransform)
            return;
        pTransform.OverlayPosition(View.SkillButton_UIButton.transform);  
    }

    #endregion

    #region Public or open interface

    #endregion

    #region Update global UI

    //设置自动模式
    public void SetAutoMode(bool auto, bool inFinishCommand, bool pIsInCommandSelect)
    {
        //  TestIn 战斗界面销毁后检查
        
        var hide = auto || inFinishCommand;
        HideOperateButton(hide, !(inFinishCommand), false);

        var commandOpen = true;
        GameDebuger.TODO(@"bool functionOpenEnum_BattleTrick = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleTrick,
            false, "", null);");
        var functionOpenEnum_BattleTrick = true;
        var functionOpenEnum_BattleCall = true;
        GameDebuger.TODO(@"if (actionState == ActionState.HERO)
        {
            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CharactorCommand, false, "", null);
        }
        else
        {
            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PetCommand, false, "", null);
        }

        bool functionOpenEnum_CatchPet = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CatchPet, false, "", null);
        bool functionOpenEnum_BattleCall = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleCall, false, "", null);
        bool functionOpenEnum_MagicSystem = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_MagicEquipment, false, "", null);");

        if (!hide)
        {
            GameDebuger.TODO(@"View.CatchButton.gameObject.SetActive(actionState == ActionState.ActionState.HERO && commandOpen &&
                functionOpenEnum_CatchPet);");
            GameDebuger.TODO(@"View.SummonButton_UIButton.gameObject.SetActive(actionState == ActionState.HERO && commandOpen &&functionOpenEnum_BattleCall);");
            //S1宠物有大招，跟H系列不一样，2017-02-13 18:12:09
            View.StuntButton_UIButton.gameObject.SetActive(/**actionState == ActionState.HERO &&*/ commandOpen &&
                functionOpenEnum_BattleTrick);
            GameDebuger.TODO(@"View.MagicButton_UIButton.gameObject.SetActive(actionState == ActionState.HERO && commandOpen &&
                functionOpenEnum_MagicSystem);");
        }

//        if (auto)
//        {
//            PlayerDefaultSkillController.Show();
        if (null != MonsterManager.Instance.GetMyPet())
            PetDefaultSkillController.Show();
        else
            PetDefaultSkillController.Hide();
//        }
//        else
//        {
//            PlayerDefaultSkillController.Hide();
//            PetDefaultSkillController.Hide();
//        }
        //用缓动替换之，2017-03-27 16:10:20
//        View.BottomRightBg.SetActive(auto);

        auto = auto && !inFinishCommand;

       

        repositionNow();
    }

    private void repositionNow()
    {
        View.BottomButtonGrid_UIGrid.Reposition();
        View.BottomButtonGrid2_UIGrid.Reposition();
    }

    //pAutoUIRelated 是否跟自动手动切换有关
    private void HideOperateButton(bool hide, bool pAutoUIRelated, bool pAlsoHideMainRole)
    {
        if (hide)
        {
            DefaultSkillController.Hide();
        }

        var commandOpen = true;
        GameDebuger.TODO(@"if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.HERO)
        {
            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CharactorCommand, false, "", null);
        }
        else
        {
            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PetCommand, false, "", null);
        }

        bool functionOpenEnum_CatchPet = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CatchPet, false, "", null);

        bool functionOpenEnum_BattleProtect = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleDefend,
            false, "", null);
        bool functionOpenEnum_BattleCall = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleCall, false, "", null);
        bool functionOpenEnum_MagicEquip = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_MagicEquipment, false, "", null);");
        GameDebuger.TODO(@"bool functionOpenEnum_BattleTrick = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleTrick,
            false, "", null);
        bool functionOpenEnum_BattleItems = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleItems,
            false, "", null);");
        var functionOpenEnum_BattleTrick = true;
        var functionOpenEnum_BattleItems = true;
        var functionOpenEnum_Retreatable = BattleDataManager.DataMgr.BattleDemo.GameVideo.retreatable;
        var functionOpenEnum_BattleCall = true;

        GameDebuger.TODO(@"View.AttackButton.gameObject.SetActive(!hide);
        View.ProtectButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_BattleProtect);
        View.CatchButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_CatchPet);
        View.MagicButton_UIButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_MagicEquip);");
        GameDebuger.TODO(@"View.SummonButton_UIButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_BattleCall);");
//        View.SkillButton_UIButton.gameObject.SetActive(!hide);//legacy 不需要技能图标了
        GameDebuger.TODO(@"View.DefenseButton_UIButton.gameObject.SetActive(!hide);");
        View.DefenseButton_UIButton.gameObject.SetActive(false);
        GameDebuger.TODO(@"View.RetreatButton_UIButton.gameObject.SetActive(!hide && functionOpenEnum_Retreatable);");
        GameDebuger.TODO(@"View.RetreatButton_UIButton.gameObject.SetActive(functionOpenEnum_Retreatable);//DEMO让逃跑一直可用。2017-02-25 16:47:03");
//        View.StuntButton_UIButton.gameObject.SetActive(commandOpen && functionOpenEnum_BattleTrick);

//        View.ItemButton_UIButton.gameObject.SetActive(commandOpen && functionOpenEnum_BattleItems);

        //        View.RightButtonGrid.SetActive(!hide);
        ShowItemBtnEffect(hide, pAutoUIRelated);
    }


    public void UpdateDefaultSkillIcon()
    {
        // 暂时不兼容宠物
        var defaultSkillId = BattleDataManager.DataMgr.BattleDemo.LastPlayerSkillId;

        if (defaultSkillId == 0 || BattleDataManager.DataMgr.BattleDemo.isAIManagement)
            DefaultSkillController.Hide();
        else
        {
            if (BattleDataManager.DataMgr.BattleDemo.battleState == BattleSceneStat.BATTLE_PlayerOpt_Time ||
                BattleDataManager.DataMgr.BattleDemo.battleState == BattleSceneStat.ON_WAITING_ActTime_Update)
                DefaultSkillController.Show();
            DefaultSkillController.UpdateData(defaultSkillId);
        }
    }

    public void UpdatePlayerAndPetDefaultSkill()
    {
        if (MonsterManager.Instance.GetMyHero() != null)
            PlayerDefaultSkillController.UpdateData(MonsterManager.Instance.GetMyHero().videoSoldier.defaultSkillId);

        if (MonsterManager.Instance.GetMyPet() != null)
            PetDefaultSkillController.UpdateData(MonsterManager.Instance.GetMyPet().videoSoldier.defaultSkillId);
    }

    #endregion

    #region 按钮事件

    private void OnPlayerDefaultSkillClick(SkillButtonCellController pSkillButtonCellController, Skill pSkill)
    {
        OpenAutoSkillSelect(MonsterManager.Instance.GetMyHero());
    }

    private void OnPetDefaultSkillClick(SkillButtonCellController pSkillButtonCellController, Skill pSkill)
    {
        OpenAutoSkillSelect(MonsterManager.Instance.GetMyPet());
    }

    private void OpenAutoSkillSelect(MonsterController mc)
    {


    }

    private void OnDefaultSkillClick(SkillButtonCellController pSkillButtonCellController, Skill pSkill)
    {
//        if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.HERO)
//        {
//            SelectSkill(MonsterManager.Instance.GetMyHero(), DataCache.getDtoByCls<Skill>(BattleDataManager.DataMgr.BattleDemo.LastPlayerSkillId));
//            //            ChoosePet(MonsterManager.DataMgr.GetMyHero(), DemoS1SimulateHelper.SimulateSkill(LastPlayerSkillId));//legacy 2017-02-22 16:32:05
//        }
//        else if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.PET)
//        {
//            SelectSkill(MonsterManager.Instance.GetMyPet(), DataCache.getDtoByCls<Skill>(BattleDataManager.DataMgr.BattleDemo.LastPetSkillId));
//            //            ChoosePet(MonsterManager.DataMgr.GetMyPet(), DemoS1SimulateHelper.SimulateSkill(LastPetSkillId));//legacy 2017-02-22 16:32:05
//        }
    }

    //响应防御按钮点击
    private void OnDefenseButtonClick()
    {
        if (!BattleDataManager.DataMgr.BattleDemo.CanUseCommand())
        {
            return;
        }

        if (BattleDataManager.DataMgr.BattleDemo.LockUI)
        {
            return;
        }

        GameDebuger.TODO(@"if (_guideBattle)
        {
            return;
        }");

        CancelAutoButton();

        var requestInfo = Services.Battle_Defence(BattleDataManager.DataMgr.BattleDemo.GameVideo.id, BattleDataManager.DataMgr.BattleDemo.CurActMonsterController.GetId());
        
        BattleDataManager.DataMgr.BattleDemo.LockUI = true;

        BattleDataManager.BattleNetworkManager.ReqServerWithSimulate(requestInfo, "", e =>
        {
            BattleDataManager.DataMgr.BattleDemo.LockUI = false;
            BattleDataManager.DataMgr.BattleDemo.CurActMonsterController.NeedReady = false;
        });
    }

    //响应自动战斗点击
    public void OnAutoButtonClick()
    {
        GameLog.Log_Battle("响应自动战斗点击------------");
        if (BattleDataManager.DataMgr.BattleDemo.IsGameOver)
        {
            return;
        }
        if (BattleDataManager.DataMgr.BattleDemo.LockUI)
        {
            return;
        }

        GameDebuger.TODO(@"if (_guideBattle)
        {
            return;
        }");

        GameDebuger.TODO(@"if (IsGuideHeroAndPetBattle() && (battleState == BattleSceneStat.ON_PROGRESS || battleState == BattleSceneStat.ON_WAITING_ActTime_Update))
        {
            return;
        }");

        CancelTimerOnAutoButtonClick();

        BattleDataManager.DataMgr.BattleDemo.LockUI = true;

        ServiceRequestAction.requestServerWithSimulate(Services.Battle_Auto(BattleDataManager.DataMgr.BattleDemo.GameVideo.id), "", e =>
            {
                BattleDataManager.DataMgr.BattleDemo.LockUI = false;
                BattleDataManager.DataMgr.BattleDemo.isAIManagement = true;

            }, (e) =>
        {
            BattleDataManager.DataMgr.CheckBattleOver(e);
            });
    }

    //响应法术按钮点击
    public void OnSkillButtonClick()
    {
        if (BattleDataManager.DataMgr.BattleDemo.IsGameOver)
        {
            return;
        }

        if (BattleDataManager.DataMgr.BattleDemo.LockUI)
        {
            return;
        }

        CancelAutoButton();

        var count = 0;
        var mc = GetCurrentActionMonster();
        if (mc.IsPet())
        {
            GameDebuger.TODO(@"PetPropertyInfo petPropertyInfo = ModelManager.Pet.GetPetInfoByUID(mc.GetId());

            List<int> skills = petPropertyInfo.GetBattleSkillList();

            for (int i = 0, len = skills.Count; i < len; i++)
            {
                Skill skill = DataCache.getDtoByCls<Skill>(skills[i]);
                if (skill != null && skill.activeSkill)
                {
                    count++;
                }
            }");

            #region DEMO临时代码，正式时需要正确获取宠物的技能数目，2017-02-28 16:59:17
            count = mc.GetAllSkillIds().Count;
            #endregion

        }
        else
        {
            count = 1;
        }

        if (count > 0)
        {
            GameDebuger.TODO(@"if (IsGuideBattle)
            {
                ProxyBattleModule.OpenGuideSkillSelect(GetCurrentActionMonster(), OnSkillSelectDelegate);
            }
            else");
            {
                ProxyBattleDemoModule.OpenSkillSelect(GetCurrentActionMonster(), OnSkillSelectDelegate);
            }
        }
        else
        {
            TipManager.AddTip("你的宠物不会主动法术");
        }
    }

    //响应技能选择结果
    private void OnSkillSelectDelegate(Skill skill)
    {
        GameDebuger.Log("OnSkillSelectDelegate");
        GameDebuger.TODO(@"if (skill != null && skill.battleType == Skill.BattleType_PVP && !BattleDataManager.DataMgr.IsCurrentPvpBattle())
        {
            TipManager.AddTip('只能在玩家对战中使用');
        }");
// todo fish
//        if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.HERO)
//        {
//            if (skill != null)
//            {
//                BattleDataManager.DataMgr.BattleDemo.LastPlayerSkillId = skill.id;
//            }
//            ChoosePet(MonsterManager.Instance.GetMyHero(), skill, true);
//        }
//        else if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.PET)
//        {
//            if (skill != null)
//            {
//                BattleDataManager.DataMgr.BattleDemo.LastPetSkillId = skill.id;
//            }
//            ChoosePet(MonsterManager.Instance.GetMyPet(), skill, true);
//        }
//        GameEventCenter.SendEvent(GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, skill, "请选择技能目标");
    }

    //响应特技选择结果
    private void OnDefaultSkillSelectDelegate(MonsterController mc, Skill skill)
    {
        GameDebuger.TODO(@"if (_guideBattle)
        {
            return;
        }");

        GameDebuger.Log("OnDefaultSkillSelectDelegate");
        if (skill != null)
        {
            var playerSkillId = 0;

            var tIsPet = false;
            if (mc.IsPlayerMainCharactor())
            {
                MonsterManager.Instance.GetMyHero().videoSoldier.defaultSkillId = skill.id;
                PlayerDefaultSkillController.UpdateData(skill);

                ModelManager.Player.SetPlayerDefaultSkillId(skill.id);
            }

            var petSkillId = 0;

            if (mc.IsPlayerPet())
            {
                tIsPet = true;
                MonsterManager.Instance.GetMyPet().videoSoldier.defaultSkillId = skill.id;
                PetDefaultSkillController.UpdateData(skill);

                ModelManager.Player.SetPetDefaultSkillId(skill.id);
            }

            if (MonsterManager.Instance.GetMyHero() != null)
            {
                playerSkillId = MonsterManager.Instance.GetMyHero().videoSoldier.defaultSkillId;
            }

            if (MonsterManager.Instance.GetMyPet() != null)
            {
                petSkillId = MonsterManager.Instance.GetMyPet().videoSoldier.defaultSkillId;
            }

            ServiceRequestAction.requestServer(tIsPet
                ? Services.Battle_DefaultSkill(BattleDataManager.DataMgr.BattleDemo.GameVideo.id, mc.GetId(),petSkillId)
                : Services.Battle_DefaultSkill(BattleDataManager.DataMgr.BattleDemo.GameVideo.id,mc.GetId(), playerSkillId));

            DemoSimulateHelper.SimulateDefaultSkill(mc.GetId(), playerSkillId, petSkillId);
        }
    }


    //响应物品按钮点击
    private void OnItemButtonClick()
    {
        if (BattleDataManager.DataMgr.BattleDemo.CanUseCommand())
        {
            return;
        }

        if (BattleDataManager.DataMgr.BattleDemo.LockUI)
        {
            return;
        }

        GameDebuger.TODO(@"if (_guideBattle)
        {
            return;
        }");

        int battleType = 0;
        GameDebuger.TODO(@"if (BattleDataManager.DataMgr.BattleDemo.GameVideo is PvpVideo)
        {
            battleType = (BattleDataManager.DataMgr.BattleDemo.GameVideo as PvpVideo).type;
        }");
        ProxyItemUseModule.OpenBattleItem(BattleDataManager.DataMgr.BattleDemo.ItemUsedCount, GetCurrentActionMonster().GetCharactorType(), battleType,
            OnBattleSelectCallback);
    }

    private void OnBattleSelectCallback(BagItemDto packItem)
    {
        if (null != packItem)
        {
//        CancelAutoButton();
//        Skill skill = new Skill();
//        skill.id = BattleDataManager.GetUseItemSkillId();
//        skill.logicId = packItem.index;
//        skill.name = packItem.item.name;
            GameDebuger.TODO(@"var props = packItem.item as Props;
        if (props != null)
            skill.skillAiId = props.targetType;");
            //        ChoosePet(GetCurrentActionMonster(), skill);
            UseSpecialSkill(BattleDataManager.GetUseItemSkillId(), packItem.item.name, packItem.index, 0, "请选择使用目标");
        }
    }

    public void UseSpecialSkill(int pSkillId, string pSkillName, int pLogicId, int pSkillAiId, string pTipContent, object pSkillAdditionParam = null)
    {
        CancelAutoButton();

        var skill = new Skill();
        skill.id = pSkillId;
        skill.logicId = pLogicId;
        skill.name = pSkillName;
        skill.skillAiId = pSkillAiId;
        ChoosePet(GetCurrentActionMonster(), skill, false, pSkillAdditionParam);
    }

    public void HideAllButton(bool hide)
    {
        HideOperateButton(hide, false, true);
    }

    public void CancelAutoButton()
    {
        if (!BattleDataManager.DataMgr.BattleDemo.isAIManagement) return;
        BattleDataManager.DataMgr.BattleDemo.isAIManagement = false;

        CancelTimerOnAutoButtonClick();
        BattleDataManager.FireData();
    }

    #endregion

    #region 目标选择

    // to be check---- todo fish
    //选择下达指令宠物
    public void ChoosePet(MonsterController pet, Skill skill, bool pForbidenTip = false, object pSkillAdditionParam = null)
    {
        if (!BattleDataManager.DataMgr.BattleDemo.CanUseCommand(pForbidenTip))
            return;

        if (!BattleDataManager.DataMgr.BattleDemo.CurActMonsterController.CanChoose(pForbidenTip))
        {
            //            TipManager.AddTip("本回合不能行动");
            return;
        }

        if (mCurrentSelectedCharacterUID != pet.GetId())
        {
            mCurrentSelectedCharacterUID = pet.GetId();
        }
// todo fish :检查一下是否要删除
        BattleDataManager.DataMgr.BattleDemo.CurActMonsterController.SetMagicOrCraftSkill(skill, pSkillAdditionParam);

//        int count = ShowSelectEffect();
//
//        if (count == 0)
//        {
//            if (skill != null && skill.id == BattleDataManager.GetCaptureSkillId())
//            {
//                TipManager.AddTip("当前没有可捕捉的目标");
//                GameEventCenter.SendEvent(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK);
//                return;
//            }
//        }        
    }


    #endregion

    #region 杂烩

    public void UpdateExitBtnStatus(bool pVisible)
    {
        View.ExitButton_UIButton.gameObject.SetActive(pVisible);
    }

    private MonsterController GetCurrentActionMonster()
    {
//        if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.HERO)
//        {
//            return MonsterManager.Instance.GetMyHero();
//        }
//        if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.PET)
//        {
//            return MonsterManager.Instance.GetMyPet();
//        }
        return null;
    }

    public void ShowActionWaitTip()
    {
        var tMonsterController = GetCurrentActionMonster();
        var skill = tMonsterController != null ? tMonsterController.GetCurSelectSkill() : null;
//        ChoosePet(tMonsterController, skill);
    }

    public void InvokeAutoButtonClickDelay()
    {
        CancelTimerOnAutoButtonClick();
        AddOrResetCDTask("OnAutoButtonClick", 4f, null, OnAutoButtonClick);
    }

    private void CancelTimerOnAutoButtonClick()
    {
        RemoveCDTask("OnAutoButtonClick");
    }

    public UILabel autoRoundTimeLabel
    {
        get
        {
            return View.AutoRoundTimeLabel_UILabel;
        }
    }

    public void UpdateOptionRole(long pCurrentSelectedCharacterUID)
    {
//        mCurrentSelectedCharacterUID = pCurrentSelectedCharacterUID;
    }

    #endregion

    #region 那些默认技能们

    //默认技能
    private SkillButtonCellController mDefaultSkillController = null;

    private SkillButtonCellController DefaultSkillController
    {
        get
        {
            if (null == mDefaultSkillController)
            {
                mDefaultSkillController = AddCachedChild<SkillButtonCellController,SkillButtonCell>(View.DefaultSkillButton, SkillButtonCell.NAME);
                mDefaultSkillController.ButtonLabelSpacingAdjustEnable = false;
                mDefaultSkillController.NameLabelVisible = false;
            }
            return mDefaultSkillController;
        }
    }

    //玩家默认技能
    private SkillButtonCellController mPlayerDefaultSkillController = null;

    private SkillButtonCellController PlayerDefaultSkillController
    {
        get
        {
            if (null == mPlayerDefaultSkillController)
            {
                mPlayerDefaultSkillController = AddCachedChild<SkillButtonCellController,SkillButtonCell>(View.PlayerDefaultSkillButton, SkillButtonCell.NAME);
                mPlayerDefaultSkillController.ButtonLabelSpacingAdjustEnable = false;
                mPlayerDefaultSkillController.NameLabelVisible = false;
            }
            return mPlayerDefaultSkillController;
        }
    }

    //宠物默认技能
    private SkillButtonCellController mPetDefaultSkillController = null;

    private SkillButtonCellController PetDefaultSkillController
    {
        get
        {
            if (null == mPetDefaultSkillController)
            {
                mPetDefaultSkillController = AddCachedChild<SkillButtonCellController,SkillButtonCell>(View.PetDefaultSkillButton, SkillButtonCell.NAME);
                mPetDefaultSkillController.ButtonLabelSpacingAdjustEnable = false;
                mPetDefaultSkillController.NameLabelVisible = false;
            }
            return mPetDefaultSkillController;
        }
    }

    private void OnBattleCommonCD(long pPlayerUID, float pPassedTime, float pTotalTime)
    {
//        DefaultSkillController.UpdateCD(pPassedTime, pTotalTime);
//
//        if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.HERO)
//            PlayerDefaultSkillController.UpdateCD(pPassedTime, pTotalTime);
//        else if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.PET)
//            PetDefaultSkillController.UpdateCD(pPassedTime, pTotalTime);
//
//        if (null != mSkillButtonCellControllerList && mSkillButtonCellControllerList.Count > 0)
//        {
//            for (int tCounter = 0; tCounter < mSkillButtonCellControllerList.Count; tCounter++)
//            {
//                mSkillButtonCellControllerList[tCounter].UpdateCD(pPassedTime, pTotalTime);
//            }
//        }
    }

    private void OnSkillSelected(MonsterController pMonsterController, Skill pSkill)
    {
//        OnDefaultSkillSelectDelegate(pMonsterController, pSkill);
//        HideAutoSkillSelect();
        SelectSkill(pMonsterController, pSkill);
    }

    private void SelectSkill(MonsterController pMonsterController, Skill pSkill)
    {
        if (pMonsterController == null)
            return;
        if (!BattleDataManager.DataMgr.BattleDemo.CanUseCommand())
        {
            return;
        }

        if (BattleDataManager.DataMgr.BattleDemo.LockUI)
        {
            return;
        }

        GameDebuger.TODO(@"if (_guideBattle)
        {
            return;
        }");
// todo fish: 做技能选择的时候，来看一下是否可以用
//        if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.HERO)
//        {
//            ChoosePet(pMonsterController, pSkill, true);
//            //            ChoosePet(MonsterManager.DataMgr.GetMyHero(), DemoS1SimulateHelper.SimulateSkill(LastPlayerSkillId));//legacy 2017-02-22 16:32:05
//        }
//        else if (BattleDataManager.DataMgr.BattleDemo.actionState == ActionState.PET)
//        {
//            ChoosePet(pMonsterController, pSkill, true);
//            //            ChoosePet(MonsterManager.DataMgr.GetMyPet(), DemoS1SimulateHelper.SimulateSkill(LastPetSkillId));//legacy 2017-02-22 16:32:05
//        }
    }

    #endregion

    #region 收缩效果

    private void ShowItemBtnEffect(bool pHide, bool pAutoUIRelated = true)
    {
        if (pHide)
        {
            View.BottomButtonGrid_TweenPosition.PlayForward();
            if (pAutoUIRelated)
                HideAutoSkillRelatedUI(false);
        }
        else
        {
            View.BottomButtonGrid_TweenPosition.PlayReverse();
            if (pAutoUIRelated)
                HideAutoSkillRelatedUI(true);
        }
    }

    private void HideAutoSkillRelatedUI(bool pHide)
    {
        if (pHide)
        {
            View.BtnConfig_TweenPosition.PlayReverse();
            View.BottomRightAnchor_TweenPosition.PlayReverse();    
        }
        else
        {
            View.BtnConfig_TweenPosition.PlayForward();
            View.BottomRightAnchor_TweenPosition.PlayForward(); 
        }
    }

    #endregion
}
