// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/13/2017 14:48:17
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using AppDto;
using MonsterManager = BattleDataManager.MonsterManager;
using System;

public interface IBattleActionQueueItemData
{
    string Icon{ get; }
    ActionTimeReward Reward { get; }

    string CharactorType { get; }
}

public class BattleActionQueueItemData : IBattleActionQueueItemData
{
    public string icon;

    public string Icon
    {
        get { return icon; }
    }

    public ActionTimeReward Reward
    {
        get { return reward; }
    }

    public ActionTimeReward reward;

    public string charactorType;
    public string CharactorType {
        get { return charactorType; }
    }


    public static BattleActionQueueItemData Create(string icon, ActionTimeReward reward,string _charactorType)
    {
        return new BattleActionQueueItemData
        {
            icon = icon,
            reward = reward,
            charactorType = _charactorType
        };
    }
}

public class BattleActionQueueItemController : MonolessViewController<BattleActionQueueItem>
{
    #region property and field

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
    }

    #endregion

    #region Event Handlers

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>
    public void UpdateView(IBattleActionQueueItemData data,int index)
    {
        View.SpriteType_UISprite.spriteName = data.CharactorType;
        if (data.Reward != null)
        {
            _view.SpriteDescBG_UISprite.enabled = true;
            if(index == 0)
            {
                View.SpriteDesc_UISprite.spriteName = data.Reward.icon;
                _view.BattleRewardBG_UISprite.spriteName = "";
                _view.RewardLabel_UILabell.text = string.Empty;
                _view.BattleReward_UISprite.spriteName = "";
                _view.SpriteDescBG_UISprite.spriteName = "bg_ActionBar_6";
            }
            else
            {
                View.SpriteDesc_UISprite.spriteName = "";
                _view.BattleReward_UISprite.spriteName = data.Reward.name;
                _view.BattleRewardBG_UISprite.spriteName = "bg_ActionBar_7";
                _view.RewardLabel_UILabell.text = data.Reward.val.ToString();
                _view.SpriteDescBG_UISprite.spriteName = "";
            }
            //UIHelper.SetCommonIcon(_view.SpriteDescBG_UISprite, data.Reward.icon);
        }
        else
        {
            //_view.SpriteDescBG_UISprite.enabled = false;
            View.SpriteDesc_UISprite.spriteName = "";
            _view.BattleReward_UISprite.spriteName = "";
            _view.RewardLabel_UILabell.text = string.Empty;
            _view.BattleRewardBG_UISprite.spriteName = "";
            _view.SpriteDescBG_UISprite.spriteName = "";
        }
        if(index == 0)
        {
            transform.localScale = Vector3.one;
        }
        else
        {
            transform.localScale = new Vector3(0.8f,0.8f,1);
        }
        UIHelper.SetPetIcon(View.SpriteHead_UISprite, data.Icon);
    }

    #endregion
    //R为0时，灰色了，微调下
    private Color GetQueueNameItemColor(long pPlayerUID)
    {
        if (pPlayerUID == ModelManager.Player.GetPlayerId())
            return ColorConstantV3.Color_Green_Strong + new Color(0.01f, 0, 0);
        if (MonsterManager.Instance.IsEnemy(pPlayerUID))
            return ColorConstantV3.Color_PaleRed + new Color(0.01f, 0, 0);
        return ColorConstantV3.Color_ChatNameBlue + new Color(0.01f, 0, 0);
    }

    public bool mFlashing = true;

    public bool Flashing
    {
        get
        { 
            return mFlashing;
        }
        set
        { 
            if (BaseView.IsViewDestroy(View))
                return;
            if (mFlashing == value) return;
            mFlashing = value;
            View.SpriteHightLight.SetActive(mFlashing);
            //if (mFlashing)
            //    View.SpriteHightLight_TweenAlpha.PlayForward();
        }
    }

}
