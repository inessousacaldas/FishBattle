// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/08/2017 15:49:10
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System.Collections;
using System;
using DG.Tweening;

/// <summary>
/// 技能图标组件，带图标、名字、类型等。支持CD
/// @MarsZ in 03/08/2017 15:49:10
/// </summary>
public class SkillButtonCellController : MonolessViewController<SkillButtonCell>
{
    #region property and field

    public Action<SkillButtonCellController,Skill> OnClickHandler{ get; set; }

    public Skill Skill{ private set; get; }
    //可用特效
    private SurroundUIEffect mUsableEffect;
    //当前行动点是否足够使用本技能
    public bool IsActionPointEnoughToUseSkill{ get; private set; }

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        InitUI();
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        GameEventCenter.AddListener(GameEvent.BATTLE_UI_SKILL_COMMON_CD, OnBattleCommonCD);
        EventDelegate.Set(View.SkillButtonCell_UIButton.onClick, OnBtnClickHandler);
        UIEventListener.Get(View.SkillButtonCell_UIButton.gameObject).onTooltip = OnBtnTipHandler;
        View.EnableEffect_TweenAlpha.SetOnFinished(RevertShowEnableStatus);
    }

    protected override void RemoveCustomEvent()
    {
        GameEventCenter.RemoveListener(GameEvent.BATTLE_UI_SKILL_COMMON_CD, OnBattleCommonCD);
        View.EnableEffect_TweenAlpha.onFinished.Clear();
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        InitUI();
        GameEventCenter.SendEvent(GameEvent.BATTLE_UI_SHOW_SKILL_TIP, Skill, false);
        OnClickHandler = null;
        Skill = null;
        if (null != mUsableEffect)
        {
            mUsableEffect.Dispose();
            mUsableEffect = null;
        }
    }

    #endregion

    #region Event Handlers

    private void OnBtnClickHandler()
    {
        if (null != OnClickHandler)
            OnClickHandler(this, Skill);
    }

    private void OnBattleCommonCD(long pPlayerUID, float pPassedTime, float pTotalTime)
    {
        UpdateCD(pPassedTime, pTotalTime);
    }

    private void OnBtnTipHandler(GameObject go, bool pShow)
    {
        GameEventCenter.SendEvent(GameEvent.BATTLE_UI_SHOW_SKILL_TIP, Skill, pShow);
    }

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>
    public void UpdateData(int pSkillId)
    {
        Skill tSkill = null;
        if (pSkillId > 0)
            tSkill = DataCache.getDtoByCls<Skill>(pSkillId);
        UpdateData(tSkill);
    }

    public void UpdateData(Skill pSkill)
    {
        Skill = pSkill;
        UpdateAllUI(pSkill);
    }

    public bool ButtonLabelSpacingAdjustEnable
    {
        get
        {
            return null != View && View.SkillIconGroup_ButtonLabelSpacingAdjust.enabled;
        }
        set
        {
            if (BaseView.IsViewDestroy(View))
                return;
            View.SkillIconGroup_ButtonLabelSpacingAdjust.enabled = value;
        }
    }

    public void TweenHide(Vector3 pTargetPosition, float pDuration, Action<bool> pCallback = null, bool pAutoRelated = true)
    {
        if (BaseView.IsViewDestroy(View))
            return;
        TweenPosition tTweenPosition = TweenPosition.Begin(View.gameObject, pDuration, pTargetPosition, true);
        if (null != pCallback)
            tTweenPosition.SetOnFinished(() =>
                {
                    pCallback(pAutoRelated);
                });
    }

    #endregion

    #region Update global UI

    private void InitUI()
    {
        View.SkillMask_UISprite.gameObject.SetActive(false);
        Selected = false;
        IsSuperSkill = false;
        NameLabelVisible = false;
        CDEnable = true;
        CostEnable = true;
        IsActionPointEnoughToUseSkill = false;
        NamePosition = PivotPosition.CenterBottom;
        DragEnable = false;
        Gray = false;
        ShowSuperSkillSubscript = false;
    }

    private void UpdateAllUI(Skill pSkill)
    {
        if (null == pSkill)
        {
            //设置alpha比设置active性能更高。2017-03-27 20:32:56
            View.SkillIconGroup_UIWidget.alpha = 0f;
        }
        else
        {
            View.SkillIconGroup_UIWidget.alpha = 1f;
            string tIcon = pSkill.icon;
            string tName = pSkill.name;
            if (NameLabelVisible)
                View.NameLabel_UILabel.text = tName;
            UIHelper.SetSkillIcon(View.SkillIcon_UISprite, tIcon);
            UpdateUseCost();
        }
    }

    private void UpdateUseCost()
    {
        if (!CostEnable)
            return;
        int tPointCost = 0;
        if (null != Skill)
        {
            if (IsSuperSkill)
            {
                var tMonsterController = BattleDataManager.DataMgr.BattleDemo.CurActMonsterController;
                if (null != tMonsterController)
                    tPointCost = DemoSkillHelper.GetSkillSP(tMonsterController.videoSoldier, Skill.id);
            }
            else
                tPointCost = DemoSkillHelper.GetSkillActionPoint(Skill);
        }
    }

    #endregion

    #region CD


    //pCurrentRemain:当前剩余倒计时，pTotalDuration总倒计时
    public void UpdateCD(float pRemainTime, float pTotalDuration)
    {
        if (!CDEnable || BaseView.IsViewDestroy(View))
            return;
        View.SkillMask_UISprite.gameObject.SetActive(true);
        string tCDName = string.Format("SKILL_CD_COOL_DOWN_INSTANCEID_{0}", View.gameObject.GetInstanceID().ToString());
        JSTimer.CdTask.OnCdUpdate tOnCdUpdate = (pRemain) =>
        {
            if (BaseView.IsViewDestroy(View))
                RemoveCDTask(tCDName);
            else
            {
                UpdateSpriteFillAmount(pRemain / pTotalDuration);
                View.LabelCD_UILabel.text = Mathf.CeilToInt(pRemain).ToString();
            }
        };
        JSTimer.CdTask.OnCdFinish tOnCdFinish = () =>
        {
            RemoveCDTask(tCDName);
            if (BaseView.IsViewDestroy(View))
                return;
            ShowEnableEffect = true;
            View.SkillMask_UISprite.gameObject.SetActive(false);
            View.LabelCD_UILabel.text = string.Empty;
        };
        JSTimer.CdTask tCdTask = AddOrResetCDTask(tCDName, pTotalDuration, tOnCdUpdate, tOnCdFinish, 0.01f);
        tCdTask.remainTime = pRemainTime;
    }

    private void UpdateSpriteFillAmount(float pFillAmount)
    {
        View.SkillMask_UISprite.fillAmount = pFillAmount;
    }

    #endregion

    #region 选中

    private bool mSelected = true;

    public bool Selected
    {
        get
        { 
            return mSelected;
        }
        set
        {
            if (mSelected != value)
            {
                mSelected = value;
                View.SpriteSelected.SetActive(mSelected);
            }
        }
    }

    #endregion

    #region 文本显隐

    private bool mNameLabelVisible = true;

    public bool NameLabelVisible
    {
        get
        { 
            return mNameLabelVisible;
        }
        set
        {
            if (mNameLabelVisible != value)
            {
                mNameLabelVisible = value;
                View.NameLabel_UILabel.gameObject.SetActive(mNameLabelVisible);
            }
        }
    }

    #endregion

    #region 奥义技能

    private bool mIsSuperSkill = true;

    public bool IsSuperSkill
    {
        get
        { 
            return mIsSuperSkill;
        }
        set
        {
            if (mIsSuperSkill != value)
            {
                mIsSuperSkill = value;
                UpdateBySuperSkill(mIsSuperSkill);
            }
        }
    }

    private void UpdateBySuperSkill(bool pIsSuperSkill)
    {
        if (pIsSuperSkill)
        {
            //缩放在预设中设置
            GameDebuger.LogError("[TEMP]设置奥义的背景图");
        }
        else
        {
            View.transform.localScale = Vector3.one; 
        }
    }

    #endregion

    #region CD

    private bool mCDEnable = false;

    public bool CDEnable
    {
        get
        { 
            return mCDEnable;
        }
        set
        {
            if (mCDEnable != value)
            {
                mCDEnable = value;
                View.CntrCD.SetActive(mCDEnable);
            }
        }
    }

    #endregion

    #region 是否显示消耗

    private bool mCostEnable = false;

    public bool CostEnable
    {
        get
        { 
            return mCostEnable;
        }
        set
        {
            if (mCostEnable != value)
            {
                mCostEnable = value;
                View.CntrPoint.SetActive(mCostEnable);
            }
        }
    }

    #endregion

    #region 点数可用特效

    public void ShowUsableEffect(bool pShow)
    {
        if (pShow)
        {
            if (null == mUsableEffect)
            {
                var effname = PathHelper.GetEffectPath(GameEffectConst.GameEffectConstEnum.EFFECT_SURROUND);
                mUsableEffect = SurroundUIEffect.Begin(
                    effname
                    , _view.SkillIcon_UISprite
                    , 4f
                    , false
                    , DG.Tweening.PathType.CatmullRom);
            }
            
            else
                mUsableEffect.SetActive(true);
        }
        else
        {
            if (null == mUsableEffect)
                return;
            mUsableEffect.SetActive(false);
        }
    }

    #endregion

    #region 位置

    public enum PivotPosition
    {
        CenterBottom = 0,
        Bottom = 1
    }

    private PivotPosition mNamePosition = PivotPosition.CenterBottom;

    public PivotPosition NamePosition
    {
        get
        { 
            return mNamePosition;
        }
        set
        {
            if (mNamePosition != value)
            {
                mNamePosition = value;
                UpdateNamePosition(mNamePosition);
            }
        }
    }

    private void UpdateNamePosition(PivotPosition pPivotPosition)
    {
        Transform tParent = View.NamePositionCenterDown_Transform;
        switch (pPivotPosition)
        {
            case PivotPosition.Bottom:
                tParent = View.NamePositionDown_Transform;
                break;
            case PivotPosition.CenterBottom:
                tParent = View.NamePositionDown_Transform;
                break;
            default:
                tParent = View.NamePositionCenterDown_Transform;
                break;
        }
        //直接setparent，可能导致一些问题
        View.NameLabel_UILabel.transform.position = tParent.position;
    }

    #endregion

    #region 拖动

    private bool mDragEnable = true;

    public bool DragEnable
    {
        get
        { 
            return mDragEnable;
        }
        set
        {
            if (mDragEnable != value)
            {
                mDragEnable = value;
                View.SkillButtonCell_UIDragScrollView.enabled = mDragEnable;
            }
        }
    }

    #endregion

    #region 不可用效果

    private bool mGray = false;

    public bool Gray
    {
        get{ return mGray; }
        set
        {
            if (mGray != value)
            {
                mGray = value;
                View.SkillIcon_UISprite.isGrey = mGray;
                View.SkillButtonCell_UIButton.isEnabled = !mGray;
            }
        }
    }

    #endregion

    #region 是否显示奥义角标

    private bool mShowSuperSkillSubscript = false;

    public bool ShowSuperSkillSubscript
    {
        get{ return mShowSuperSkillSubscript; }
        set
        {
            if (mShowSuperSkillSubscript != value)
            {
                mShowSuperSkillSubscript = value;
                View.SpriteSuper_UISprite.alpha = mShowSuperSkillSubscript ? 1f : 0f;
            }
        }
    }

    #endregion

    #region 可用特效

    private bool mShowEnableEffect = false;

    public bool ShowEnableEffect
    {
        get{ return mShowEnableEffect; }
        set
        {
            if (mShowEnableEffect != value)
            {
                mShowEnableEffect = value;
                View.EnableEffect.SetActive(mShowEnableEffect);
                if (mShowEnableEffect)
                {
                    View.EnableEffect_TweenAlpha.ResetToBeginning();
                    View.EnableEffect_TweenAlpha.PlayForward();
                }
            }
        }
    }

    private void RevertShowEnableStatus()
    {
        ShowEnableEffect = false;
    }
    #endregion
}
