// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 01/19/2017 20:38:46
// Desc : Auto generated by MarsZ. update this if need.
// **********************************************************************

using System;
using AppDto;
using System.Collections.Generic;
using MyGameScripts.Gameplay.Battle.Demo.Helper;
using BattleDemoModel = BattleDataManager.BattleDemoModel;

/// <summary>
/// This is the model class for module BattleDemoS1Main, use this to manage the data of module BattleDemoS1Main.</p>
/// Use this in ModelManager 
/// DO NOT USE THIS DIRECTLY.
/// @MarsZ in 01/19/2017 20:38:46
/// </summary>
/// 

public interface IMainBattleView
{
    BattleSceneStat battleState { get; }
    BattleSceneStat lastBattleState { get; }
    bool CanChangeSkill();
    bool isAIManagement { get; }
    bool IsDead { get; }
    int CurRoundCnt { get; }
    ActionQueueDto CurActDto { get; }
    VideoSoldier GetMainRoleSoldier { get; }
    MonsterController GetMainRoleMonster { get; }
    int OptTime { get; }
    MonsterController GetMainPetMonster { get; set; }
    bool IsCurActMonsterCanbeOpt { get; }
    MonsterController CurActMonsterController { get; }
    bool IsCurActMonsterUsingSCraft { get; }
    bool CanUseCommand(bool b);
    IEnumerable<MonsterController> GetControlledMC();
    IEnumerable<VideoSoldier> GetOptSoldiers();
}

public interface IBattleDemoModel
{
    float CurrentCommonCDLeft { get; }
    float CommonCD { get;  }
    Video GameVideo { get; set; }
    int MaxQueueNameActionNum { get; }
    
    int LastPlayerSkillId { get; set; }
    int LastPetSkillId { get; set; }
    bool isAIManagement { get; set; }
    bool LockUI { get; set; }
    bool IsGameOver { get; }
    BattleSceneStat battleState { get; }
    BattleSceneStat lastBattleState { get; }
    int ItemUsedCount { get; }
    bool ShowTip { get; set; }
    Dictionary<long,VideoSoldier> AllVideoSoldierList { get;}
    
    bool CanUseCommand(bool pShowTip = true);
    IEnumerable<BattleOrderInfo> getMyOrderList();
    IEnumerable<BattleOrderInfo> getEnemyOrderList();
    void modifyOrderItemData(int orderType, int index, string orderName, bool add = false);
    string GetUIEffectForBuff(SkillBuff pSkillBuff);
    bool IsSameBattle(long battleId);
    long HasBuff(VideoSkillAction tVideoSkillAction);
    BattleResult Result { get; set; }
    IMainBattleView MainBattleView { get; }

    MonsterController CurActMonsterController { get; }
    bool IsCurActMonsterCanbeOpt { get;}
}

public enum BattleResult
{
    UNKNOW = 0,
    WIN,
    LOSE,
    Retreat,
}

public sealed partial class BattleDataManager
{
    public sealed partial class BattleDemoModel
        : IBattleDemoModel
        , IMainBattleView
    {   
        public void InitData()
        {
            ResetData();
        }

        public void ResetData()
        {
            _actionQueueDtoSet = new List<ActionReadyNotify>();
            isAIManagement = false;
            curActDto = null;
            _isGameOver = false;
            battleState = BattleSceneStat.Invalid;
            mlastBattleState = BattleSceneStat.Invalid;
            
            _result = BattleResult.UNKNOW;
            _isDead = false;
            _isTimeCountFinish = false;
            reqActCnt = 0;
            _gameVideo = null;
            usableCallTime = 0;
        }

        #region const

        //    private const string PREFIX_ACTION_QUEUE_TIMER = "BATTLE_PREFIX_ACTION_QUEUE_TIMER_ID_{0}_NAME_{1}";

        //    private const string PREFIX_UPDATE_ORDER_ITEMS_TIMER = "BATTLE_PREFIX_UPDATE_ORDER_ITEMS_TIMER_ID_{0}_NAME_{1}";

        #endregion

        #region Server Data

        #endregion
        
        #region Client State Data

        public int CurRoundCnt {
            get
            {
                var cnt = BattleInstController.Instance.CurRoundIdx;
                if (cnt > 0) return cnt;
                if (_gameVideo != null)
                    cnt = _gameVideo.currentRound;
                return  cnt = Math.Max(0, cnt);
            }
        }

        public ActionQueueDto CurActDto {
            get { return curActDto; }
        }

        public List<ActionReadyNotify> _actionQueueDtoSet = new List<ActionReadyNotify>();
        public ActionQueueDto curActDto;

        public int usableCallTime = 0;
        #endregion
        
        #region field and property

        /**重要信息是否显示提示*/
        public bool showTip = true;

        public bool ShowTip
        {
            get { return showTip; }
            set { showTip = value; }
        }

        public bool mIsAIManagement = true;

        public bool isAIManagement
        {
            get
            { 
                return mIsAIManagement;
            }
            set
            {
                if (mIsAIManagement != value)
                {
                    // GameDebuger.LogError(string.Format("isAIManagement from {0} to {1}", mIsAIManagement, value));
                    mIsAIManagement = value;
                }
            }
        }

        private bool _isGameOver;
        public bool IsGameOver {
            get { return _isGameOver; }
            set
            {
                if (!value && _isGameOver) return;
                GameLog.Log_Battle("set _isGameOver :" +value);
                _isGameOver = value;
            }
        }

        private BattleResult _result = BattleResult.UNKNOW;
        public BattleResult Result {
            get { return _result; }
            set { _result = value; }
        }
        
        public BattleSceneStat mBattleState = BattleSceneStat.Invalid;

        public BattleSceneStat battleState
        {
            get
            {
                // todo fish:考虑每次获取的时候都计算
                // 这个时候要去考虑lastState的维护，以表达状态跃迁
                return mBattleState;
            }
            set
            {
                GameLog.Log_Battle("set battleState -----------" +value, "#AA49F3FF");
                mlastBattleState = mBattleState;
                if (mBattleState != value)
                {
                    //  GameDebuger.LogError(string.Format("mBattleState from {0} to {1}", mBattleState, value));
                    mBattleState = value;
                }
            }
        }

        public BattleSceneStat mlastBattleState = BattleSceneStat.Invalid;

        public BattleSceneStat lastBattleState
        {
            get { return mlastBattleState; }
        }

        public IMainBattleView MainBattleView {
            get { return this; }
        }

        public long WinId {
            get { return BattleInstController.Instance._playRound != null
                 ? BattleInstController.Instance._playRound.winId
                : -1L; }
        }

        // current video， 另外有一个nextvideo
        public Video _gameVideo;

        public Video GameVideo
        {
            get { return _gameVideo; }
            set
            {
                _gameVideo = value;
                if (_gameVideo == null)
                    usableCallTime = 0;
                else
                {
                    var playerInfoDto = _gameVideo.playerInfos.Find(info=>info.playerId == ModelManager.IPlayer.GetPlayerId());
                    usableCallTime = playerInfoDto == null ? 0 : playerInfoDto.usableCallTime;    
                }
            }
        }
    
        private int mSealBuffID = 0;

        public int SealBuffID
        {
            get
            {
                if (mSealBuffID <= 0)
                {
                    GameDebuger.LogError("[TEMP]封印BUFF类型，客户端暂时写死，等待服务端生成配置");
                    mSealBuffID = 1;
                }
                return mSealBuffID;
            }
        }

        private int mMaxQueueNameActionNum = 16;

        //UI名字队列上允许存在的最多行动数目
        public int MaxQueueNameActionNum
        {
            get
            {
                return mMaxQueueNameActionNum;
            }
        }

        private int mMaxQueueDuration = 0;

        //UI队列上允许存在的最长等待播放时长，单位毫秒
        public int MaxQueueDuration
        {
            get
            {
                if (mMaxQueueDuration <= 0)
                {
                    GameDebuger.TODO("UI队列上允许存在的最长等待播放时长。");
                    mMaxQueueDuration = DemoSimulateHelper.SIMULATE_QUEUE_DELAY << 2;
                }
                return mMaxQueueDuration;
            }
        }

        private float mCommonCD = 0f;

        public float CommonCD
        {
            get
            {
                if (mCommonCD <= 0)
                {
                    mCommonCD = (float)DataCache.GetStaticConfigValue(AppStaticConfigs.SKILL_CD_TIME, 5000) / 1000f;
                }
                return mCommonCD;
            }
        }

        //当前剩余的公共CD，单位秒
        public float currentCommonCDLeft;

        public float CurrentCommonCDLeft
        {
            get { return currentCommonCDLeft; }
            set { currentCommonCDLeft = value; }
        }

        //被打断后的CD时间，比如种了封印等后需要短暂CD，RM:http://oa.cilugame.com/redmine/issues/15011
        public const float CD_FOR_INTERRUPT = 0.5f;

        private Dictionary<long,VideoSoldier> mAllVideoSoldierDic = null;

        //所有战斗单位列表
        public Dictionary<long,VideoSoldier> AllVideoSoldierList
        {
            get
            {
                if (null == GameVideo)
                    return null;
                if (null != mAllVideoSoldierDic && mAllVideoSoldierDic.Count > 0) return mAllVideoSoldierDic;
                mAllVideoSoldierDic = new Dictionary<long, VideoSoldier>();
                if (null != GameVideo.ateam)
                {
                    GameVideo.ateam.teamSoldiers.ForEach<VideoSoldier>(soldier =>
                    {
                        mAllVideoSoldierDic.AddOrReplace((soldier.id), soldier);    
                    });
                }

                if (null != GameVideo.bteam)
                {
                    GameVideo.bteam.teamSoldiers.ForEach<VideoSoldier>(soldier =>
                    {
                        mAllVideoSoldierDic.AddOrReplace((soldier.id), soldier);    
                    });
                }
                return mAllVideoSoldierDic;
            }
        }

        //当前队列中的所有行动列表，不论是否正在走进度条的，都在里边
        //    private Dictionary<long,ActionQueueAddNotifyDto> mAllActionQueueDic = new Dictionary<long, ActionQueueAddNotifyDto>();

        //    public Dictionary<long,ActionQueueAddNotifyDto> AllActionQueueDic
        //    {
        //        get
        //        {
        //            if (null == mAllActionQueueDic)
        //                mAllActionQueueDic = new Dictionary<long, ActionQueueAddNotifyDto>();
        //            return mAllActionQueueDic;
        //        }
        //    }
        //当前队列中正在显示（如名字或跑条）的，非正在播放技能的
        //    public Dictionary<long,ActionQueueAddNotifyDto> CurShowingActionQueueDic { get; private set; }

        //    private Dictionary<long,JSTimer.CdTask> mActionQueueTimerDic = null;

        public bool IsSameBattle(long pBattleUID)
        {
            var tIsSameBattle = pBattleUID > 0 && null != GameVideo && GameVideo.id == pBattleUID;
            if (!tIsSameBattle)
                GameDebuger.LogError(string.Format("[Error]IsSameBattle is false ! pBattleUID :{0}", pBattleUID));
            return tIsSameBattle;
        }
        
        //当前下达指令的角色
        public MonsterController CurActMonsterController
        {
            get
            {
                return battleState == BattleSceneStat.BATTLE_PlayerOpt_Time
                    ? FirstMonsterAtATQueue
                    : null;
            }
        }

        // 行动条第一个角色
        public MonsterController FirstMonsterAtATQueue
        {
            get
            {
                if (curActDto == null) return null;
                long soldierId;
                curActDto.soldierQueue.TryGetValue(0, out soldierId);
                return MonsterManager.Instance.GetMonsterFromSoldierID(soldierId);
            }   
        }

        //lock ui when user have clicked any battle button and request to server but have not revice the response
        // todo fish:建立数据表达依赖
        private bool _lockUI;

        public bool LockUI
        {
            get { return _lockUI; }
            set { _lockUI = value; }
        }

        //上次选择的宠物技能
        public int _lastPetSkillId;

        public int LastPetSkillId
        {
            get { return _lastPetSkillId; }
            set { _lastPetSkillId = value; }
        }

        //上次选择的玩家技能
        public int _lastPlayerSkillId;

        public int LastPlayerSkillId
        {
            get { return _lastPlayerSkillId; }
            set { _lastPlayerSkillId = value; }
        }

        //主角已经使用的道具数量
        public int ItemUsedCount
        {
            get
            {
                var info = DataMgr._data.GameVideo.playerInfos.Find<BattlePlayerInfoDto>(player =>
                    player.playerId == ModelManager.Player.GetPlayerId());
                return info != null
                    ? info.useItemCount
                    : 0;
            }
        }

        #endregion

        #region initial and dispose

        /// <summary>
        /// 如进入游戏后需要获取初始化数据，请把本方法放于 ModelManager 中。
        /// </summary>
        /// <param name="pAfterLoginDto">P after login dto.</param>
        

        /// <summary>
        /// 切换角色或帐号时，会自动调用本方法清理 Model 数据。其他时候如需要请手动调用。
        /// </summary>
        public void Dispose()
        {
            _gameVideo = null;
            _actionQueueDtoSet.Clear();
            curActDto = null;
            isAIManagement = false;
//        mCurrentShowingVideoRounds.Clear();
//        AllActionQueueDic.Clear();
//        CurShowingActionQueueDic = null;
            mAllVideoSoldierDic = null;
//        CancelActionQueueTimers();

            //战斗指挥数据清空
            LastOrderListOpenState = false;
            _myOrderList = null;
            _enemyOrderList = null;
        }

        #endregion


        #region Funtions

        public VideoSoldier GetVideoSoldier(long pFighterUID)
        {
            if (pFighterUID <= 0 || null == AllVideoSoldierList)
                return null;
            VideoSoldier tVideoSoldier = null;
            AllVideoSoldierList.TryGetValue(pFighterUID, out tVideoSoldier);
            return tVideoSoldier;
        }

        public bool AutoChangeRoleEnable
        {
            get
            {
                GameDebuger.LogError("[TEMP]系统设置中是否设置了自动切换。");
                return true;
            }
        }

        public void ExitCommandState()
        {
            if (battleState == BattleSceneStat.ON_COMMAND_ENTER)
                DataMgr.SetState(BattleSceneStat.ON_COMMAND_EXIT);
        }

        #endregion


        #region CD

        private void ResetOptionStateForInterruptted(long pPreActionUID)
        {
            if (!IsPlayerMyHeroOrPet(pPreActionUID))
                return;
            //状态切换到准备就绪阶段，可以选择指令。仅限玩家或宠物
            DataMgr.SetState(BattleSceneStat.BATTLE_PlayerOpt_Time);
        }

        #endregion

        #region 最近的行动者信息

        //获取刚才的行动者的UID，如果是玩家自己或者其宠物才返回有效值，否则返回0
        public bool IsPlayerMyHeroOrPet(long pUID = -1)
        {
            if (pUID < 0)
                pUID = BattleInstController.Instance.PreFinishedActionPlayerUID();
            if (pUID == ModelManager.Player.GetPlayerId())
                return true;
            var tMonsterController = MonsterManager.Instance.GetMyPet();
            return null != tMonsterController && tMonsterController.GetId() == pUID;
        }

        public long HasBuff(VideoSkillAction pVideoSkillAction)
        {
            if (null == pVideoSkillAction)
                return 0;
            var targetStateGroups = pVideoSkillAction.targetStateGroups;
            if (targetStateGroups.IsNullOrEmpty())
                return 0;
            var tVideoTargetStateGroup = targetStateGroups[0];
            if (null == tVideoTargetStateGroup)
                return 0;
            var state = tVideoTargetStateGroup.targetStates.Find(t =>t is VideoBuffAddTargetState);
            return state == null ? 0 : state.id;
        }

        public bool CanChangeSkill()
        {
            var b = CanUseCommand(false);
            return !b ? b : !IsCurActMonsterDriving();
        }

        public bool IsCurActMonsterDriving()
        {
            var mc = CurActMonsterController;
            // 默认技能不是魔法，或者不处于驱动状态
            return battleState == BattleSceneStat.BATTLE_PlayerOpt_Time
                   && mc != null
                   && mc.GetCurSelectSkill() != null
                   && mc.GetCurSelectSkill().type == (int) Skill.SkillEnum.Magic
                   && curActDto.driving;
        }

        public bool IsCurActMonsterUsingSCraft
        {
            get
            {
                return CurActMonsterController != null
                       && curActDto.usingSCraft;
            }
        }
        public bool CanUseCommand(bool pShowTip = true)
        {
            //GameDebuger.LogError(string.Format("CanUseCommand mc.IndexBuffByType(Buff.SEAL_BUFF_ID):{0}", mc.IndexBuffByType(Buff.SEAL_BUFF_ID)));
            var mc = CurActMonsterController;
            if (mc == null)
                return false;
            var tTipContent = string.Empty;
            var b = true;
            if (mc.dead)
            {
                tTipContent = "操作目标已死亡，操作无法执行！";
                b = false;
            }
            else if (currentCommonCDLeft > 0)
            {
                tTipContent = "技能正在冷却，暂时无法使用";
                b = false;
            }
            else if (IsGameOver || battleState != BattleSceneStat.BATTLE_PlayerOpt_Time)
            {
                tTipContent = "当前无法操作！";
                b = false;
            }
            else if (mc.FindBuffByGroup(SkillBuff.BuffGroup.SEAL) > 0)
            {
                tTipContent = "正在封印状态，无法使用技能！";
                b = false;
            }
            
            if (pShowTip && !string.IsNullOrEmpty(tTipContent))
                TipManager.AddTip(tTipContent);
            return b;
        }

        public IEnumerable<MonsterController> GetControlledMC()
        {
            return MonsterManager.Instance.GetMonsterFromPlayerID(ModelManager.IPlayer.GetPlayerId());
        }

        public IEnumerable<VideoSoldier> GetOptSoldiers()
        {
            if (battleState == BattleSceneStat.Battle_OVER
                || battleState == BattleSceneStat.BATTLE_PRESTART
                || !isAIManagement)
                return null;

            var mainRoleID = ModelManager.IPlayer.GetPlayerId();
            return MonsterManager.Instance.GetMonsterList(p:mc=>mc.GetPlayerId() == mainRoleID).Map(m=>m.videoSoldier);
        }

        #endregion

        #region 队伍指挥

        private List<BattleOrderInfo> _enemyOrderList;
        //敌方指令列表
        private List<BattleOrderInfo> _myOrderList;
        //己方指令列表
        public bool LastOrderListOpenState = false;

        public int CurWatchTeamId
        {
            get
            {
                if (_gameVideo == null)
                    return 0;
                var id = 0;
                _watchTeamIdDic.TryGetValue(_gameVideo.id, out id);
                return id;
            }
        }
        public Dictionary<long, int> _watchTeamIdDic = new Dictionary<long, int>();
        public bool _isDead;
        public bool _isTimeCountFinish = false;  // 开场动作播放

        public bool IsDead
        {
            get { return _isDead; }
        }

        //缓存最近一次玩家操作打开指令列表的状态

        private const string ENEMY_ORDER_INFO = "enemy_order_info";
        private const string MY_ORDER_INFO = "my_order_info";

        public IEnumerable<BattleOrderInfo> getEnemyOrderList()
        {
            if (_enemyOrderList == null)
            {
                _enemyOrderList = new List<BattleOrderInfo>();
                var dic = DataCache.getDicByCls<TeamCommand>();
//            Dictionary<int, TeamCommand> dic = DemoSimulateHelper.SimulateTeamCommandDic();
                BattleOrderInfo info;
                TeamCommand targetItem;
                foreach (KeyValuePair<int, TeamCommand> pair in dic)
                {
                    if (pair.Key != 2) continue;
                    targetItem = pair.Value;
                    if (targetItem != null)
                    {
                        for (int i = 0; i < targetItem.command.Count; i++)
                        {
                            info = new BattleOrderInfo();
                            info.type = 2;
                            info.index = i;
                            info.orderName = targetItem.command[i];
                            _enemyOrderList.Add(info);
                        }
                    }
                }

                for (int i = 5; i < 13; i++)
                {
                    info = new BattleOrderInfo();
                    info.type = 2;
                    info.index = i;
                
                    var b = i == 10 || i == 11 || i == 12; 
                    info.canEdit = !b;
                    info.isClearButton = b;
                
                    _enemyOrderList.Add(info);
                }

                //读取本地存取
                var orders = PlayerPrefsExt.GetPlayerString(ENEMY_ORDER_INFO).Split(',');
                for (var i = 0; i < orders.Length; i++)
                {
                    if (string.IsNullOrEmpty(orders[i])) continue;
                    var order = _enemyOrderList.Find(o => o.canEdit && string.IsNullOrEmpty(o.orderName));
                    if (order != null)
                        order.orderName = orders[i];
                }
            }
            return _enemyOrderList;
        }

        public IEnumerable<BattleOrderInfo> getMyOrderList()
        {
            if (_myOrderList == null)
            {
                _myOrderList = new List<BattleOrderInfo>();
                Dictionary<int, TeamCommand> dic = DataCache.getDicByCls<TeamCommand>();
//            Dictionary<int, TeamCommand> dic = DemoSimulateHelper.SimulateTeamCommandDic();
                BattleOrderInfo info;
                TeamCommand targetItem;
                foreach (KeyValuePair<int, TeamCommand> pair in dic)
                {
                    if (pair.Key == 1)
                    {
                        targetItem = pair.Value;
                        if (targetItem != null)
                        {
                            for (int i = 0; i < targetItem.command.Count; i++)
                            {
                                info = new BattleOrderInfo();
                                info.type = 1;
                                info.index = i;
                                info.orderName = targetItem.command[i];
                                _myOrderList.Add(info);
                            }
                        }
                    }
                }

                for (int i = 5; i < 13; i++)
                {
                    info = new BattleOrderInfo();
                    info.type = 1;
                    info.index = i;
                    info.canEdit = true;
                    if (i == 10)
                    {
                        info.isClearButton = true;
                        info.canEdit = false;
                    }
                    if (i == 11)
                    {
                        info.isAllClearButton = true;
                        info.canEdit = false;
                    }
                    if (i == 12)
                    {
                        info.isAddButton = true;
                        info.canEdit = false;
                    }
                    _myOrderList.Add(info);
                }

                //读取本地存取
                string[] orders = PlayerPrefsExt.GetPlayerString(MY_ORDER_INFO).Split(',');
                for (int i = 0; i < orders.Length; i++)
                {
                    bool added = false;
                    if (!string.IsNullOrEmpty(orders[i]))
                    {
                        for (int j = 0; j < _myOrderList.Count; j++)
                        {
                            if (_myOrderList[j].canEdit && string.IsNullOrEmpty(_myOrderList[j].orderName) && added == false)
                            {
                                _myOrderList[j].orderName = orders[i];
                                added = true;
                            }
                        }
                    }

                }
            }

            return _myOrderList;
        }

        //修改战斗指令单元数据
        public void modifyOrderItemData(int orderType, int index, string orderName, bool add = false)
        {
            if (orderType == 1)
            {
                for (int i = 0; i < _myOrderList.Count; i++)
                {
                    if (add)
                    {
                        if (string.IsNullOrEmpty(_myOrderList[i].orderName) && _myOrderList[i].canEdit)
                        {
                            _myOrderList[i].orderName = orderName;
                            GameEventCenter.SendEvent(GameEvent.BATTLE_UI_ONORDERLISTUPDATE);
                            setOrderToLocal(_myOrderList, MY_ORDER_INFO);
                            return;
                        }
                    }
                    else
                    {
                        if (_myOrderList[i].index == index)
                        {
                            _myOrderList[i].orderName = orderName;
                            setOrderToLocal(_myOrderList, MY_ORDER_INFO);
                        }
                    }
                }
            }
            else
            {
                for (int i = 0; i < _enemyOrderList.Count; i++)
                {
                    if (add)
                    {
                        if (string.IsNullOrEmpty(_enemyOrderList[i].orderName) && _enemyOrderList[i].canEdit)
                        {
                            _enemyOrderList[i].orderName = orderName;
                            GameEventCenter.SendEvent(GameEvent.BATTLE_UI_ONORDERLISTUPDATE);
                            setOrderToLocal(_enemyOrderList, ENEMY_ORDER_INFO);
                            return;
                        }
                    }
                    else
                    {
                        if (_enemyOrderList[i].index == index)
                        {
                            _enemyOrderList[i].orderName = orderName;
                            setOrderToLocal(_enemyOrderList, ENEMY_ORDER_INFO);
                        }
                    }
                }
            }

            GameEventCenter.SendEvent(GameEvent.BATTLE_UI_ONORDERLISTUPDATE);
        }

        private void setOrderToLocal(List<BattleOrderInfo> lists, string mark)
        {
            var strs = new string[5];

            if (lists == null) return;
            var j = 0;
            for (var i = 0; i < lists.Count; i++)
            {
                if (!lists[i].canEdit) continue;
                if (string.IsNullOrEmpty(lists[i].orderName)) continue;
                strs[j] = lists[i].orderName;
                j++;
            }

            var infoStr = string.Join(",", strs);
            PlayerPrefsExt.SetPlayerString(mark, infoStr);
        }

        #endregion

        #region BUFF

        public string GetUIEffectForBuff(SkillBuff pSkillBuff)
        {
            return null != pSkillBuff ? pSkillBuff.uiSurroudEffect : string.Empty;
        }

        #endregion

        public bool IsCurActMonsterCanbeOpt
        {
            get
            {
                var mc = CurActMonsterController;

                if (mc != null)
                {
                    GameLog.Log_Battle(string.Format( "mc name = {0} mc.GetPlayerId() ={1} ModelManager.IPlayer.GetPlayerId() = {2} ", mc.GetName(), mc.GetPlayerId() , ModelManager.IPlayer.GetPlayerId()));
                    GameLog.Log_Battle(string.Format(" !IsCurActMonsterCanbeOpt :isAIManagement {0} " +
                                                     "&& mc != null {1}" +
                                                     "&& !mc.IsDead() {2} " +
                                                     " && (mc.GetPlayerId() == ModelManager.IPlayer.GetPlayerId()) {3}" +
                                                     "&&  !mc.driving {4}"
                        , !isAIManagement
                        , mc != null
                        , !mc.IsDead()
                        , mc.GetPlayerId() == ModelManager.IPlayer.GetPlayerId()
                        , !mc.driving), "#AA49F3FF");
                }
                

                //轮到己方出手时，是否可以操作
                return !isAIManagement
                         && mc != null
                         && !mc.IsDead()
                         && mc.GetPlayerId() == ModelManager.IPlayer.GetPlayerId()
                         && !mc.driving;
            }
        }

        public VideoSoldier GetMainRoleSoldier
        {
            get
            {
                return MonsterManager.Instance.GetMainCharactorSoldier();
            }
        }

        public MonsterController GetMainRoleMonster {
            get { return MonsterManager.Instance.GetMyHero(); }
        }

        public int OptTime {
            get
            {
                var actQueueDto = _actionQueueDtoSet.Find(s=>s.round == CurRoundCnt + 1);
                if (actQueueDto != null)
                {
                    var dataTime = DateUtil.UnixTimeStampToDateTime(actQueueDto.expiredTime);
                    var serverDateTime = SystemTimeManager.Instance.GetServerTime();
                    var timespan = (dataTime - serverDateTime);
                    return (int)timespan.TotalSeconds;
                }
                else
                    return -1;
            }
        }

        public MonsterController GetMainPetMonster { get; set; }
        
        // todu fish:增加一个字段 一场战斗只播一次
        public bool AnimShown {
            get { return false; }
        }

        public bool CheckMonsterCanUseSCraft(long id, ref string tip)
        {

            if (battleState == BattleSceneStat.Battle_OVER)
            {
                tip = "战斗已结束";
                return false;
            }

            var mc = MonsterManager.Instance.GetMonsterFromSoldierID(id);
            if (mc == null)
                return false;

            var validate = false;
            if (mc.IsDead())
            {
                tip = "角色已死亡，不能使用S技";
            }
            if (mc.videoSoldier.defaultSCraftsId <= 0)
            {
                tip = "角色没有S技";
            }
            else if (CurActMonsterController != null
                     && mc.GetId() == CurActMonsterController.GetId())
            {
                tip = "角色操作中，不能使用S技";
            }
            else if (!mc.videoSoldier.CheckCPEnoughForSCraft())
            {
                tip = "CP不足";
            }
            else
            {
                validate = true;
            }
            return validate;
        }

        public bool IsNeedSynSettingVideo()
        {
            return GameVideo.needPlayerAutoBattle;
        }

        public bool IsPlayerTeamLeaderId(long playerId)
        {
            return ContainPlayer(GameVideo.ateam.teamSoldiers, playerId);
        }

        public bool ContainPlayer(IEnumerable<VideoSoldier> pBattleEntities, long pPlayerId)
        {
            if (pPlayerId <= 0)
                return false;
            return pBattleEntities.Find(soldier => null != soldier && soldier.id == pPlayerId) != null;
        }

        public bool IsNoMapBattle()
        {
            return null != GameVideo && GameVideo is PreviewVideo;
        }

        public int reqActCnt = 0;
        public void UpdateReqActCnt(bool reqSuccess = true)
        {
            reqActCnt = _actionQueueDtoSet.IsNullOrEmpty() ? 0 : _actionQueueDtoSet[0].round;

            if (reqSuccess)
                reqActCnt += 1;
        }
    }
}

//S1下，绝大部分状态都是针对主角和宠物而言的，除了类似游戏结束的大状态。
// 根据时间轴划分，保证枚举值没有重叠
public enum BattleSceneStat
{
    Invalid,
    Battle_OVER, // 可用
    BATTLE_PRESTART,  // 新增 预备，倒计时，刚进游戏(收到video的resp)并且，回合数为0
    //S1中，此状态表示技能播放完毕，等待后端返回可以选择技能的通知，2017-02-25 15:30:22
    ON_WAITING_ActTime_Update, // 可用，播完视频等AT刷新：isplaying = false && at.round idx < idx && videoround.idx <idx
    //S1中，此状态表示可以选择技能等操作，2017-02-25 15:29:25
    // 可用 不用和刚进游戏的ready分开  ，at 刷新后倒计时， 直到下一个videoround下发
    // at.round idx <＝ idx && videoround.idx <idx
    // 有问题，区分不出发技能选择协议前，发技能选择协议后 ------- todo fish
    BATTLE_PlayerOpt_Time,
    BATTLE_WaitVideo,
    //  videoround.idx >=idx               
    BATTLE_VIDEOROUND_PLAYING,  // 可用  新增

    //玩家操作完毕，比如选择了技能等。
    FINISH_COMMAND, 
    //进入指令、物品、特技等选择
    ON_COMMAND_ENTER,
    //退出指令、物品、特技等选择，进入目标选择
    ON_COMMAND_EXIT,
}

public enum BATTLE_MODE
{
    //未定义、未知
    Undefined = 0,
    //普通战斗(PVE/PVP等)
    Normal = 1,
    //技能预览
    SkillPreview = 2,
    //技能编辑
    SkillEditor = 3,
}