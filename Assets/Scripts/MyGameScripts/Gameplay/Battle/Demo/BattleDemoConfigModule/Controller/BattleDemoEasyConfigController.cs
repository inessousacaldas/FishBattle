// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/09/2017 16:35:22
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using System.Collections.Generic;
using AppDto;
using BattleNetworkManager = BattleDataManager.BattleNetworkManager;

/// <summary>
/// This is the controller class for module BattleDemoEasyConfig, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 03/09/2017 16:35:22
/// </summary>
public class BattleDemoEasyConfigController : MonoViewController<BattleDemoEasyConfigView>
{
    #region property and field

    #region const

    #endregion


    #region data

    private List<FighterConfigDto> mBattleDemoS1ConfigDtoListEnemy = null;
    private List<FighterConfigDto> mBattleDemoS1ConfigDtoListFriend = null;
    private List<BattleDemoEasyConfigItemController> mBattleDemoS1ItemControllerEnemyList = null;
    private List<BattleDemoEasyConfigItemController> mBattleDemoS1ItemControllerFriendList = null;
    private BattleDemoEasyConfigItemController mSelectedEnemeyBattleDemoS1ItemController = null;
    private BattleDemoEasyConfigItemController mSelectedFriendBattleDemoS1ItemController = null;
    //当前选中的战斗配置key
    private string mSelectedBattleConfigKey = null;
    private string mSelectedEnemyJobKey = null;
    private string mSelectedFriendJobKey = null;

    private string mFightersConfigDtoJSON = null;
    private string mFightersConfigDtoJSONKey = null;

    private string FightersConfigDtoJSONKey
    {
        get
        {
            if (string.IsNullOrEmpty(mFightersConfigDtoJSONKey))
                mFightersConfigDtoJSONKey = "FightersConfigDtoJSON_EASY_" + ModelManager.Player.GetPlayerId().ToString(); 
            return mFightersConfigDtoJSONKey;
        }
    }

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        InitPopBattleConfig();
        DemoConfigUIHelper.InitializePopListWithMonsterJobDesc(View.PopEnemyJob_UIPopupList);
        DemoConfigUIHelper.InitializePopListWithMonsterJobDesc(View.PopFriendJob_UIPopupList);
        mSelectedFriendJobKey = View.LabelPopEnemyJob_UILabel.text;
        mSelectedEnemyJobKey = View.LabelPopFriendJob_UILabel.text;
        InitMonsterListUI();
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        EventDelegate.Set(View.CloseButton_UIButton.onClick, ProxyBattleDemoConfigModule.CloseEasyConfig);
        EventDelegate.Set(View.PopBattleConfig_UIPopupList.onChange, OnPopBattleConfigChangeHandler);
        EventDelegate.Set(View.PopEnemyJob_UIPopupList.onChange, OnPopEnemyJobChangeHandler);
        EventDelegate.Set(View.PopFriendJob_UIPopupList.onChange, OnPopFriendJobChangeHandler);
        EventDelegate.Set(View.BattleButton_UIButton.onClick, OnBtnBattleClick);
        EventDelegate.Set(View.BtnAddEnemy_UIButton.onClick, OnBtnAddEnemyClick);
        EventDelegate.Set(View.BtnDeleteEnemy_UIButton.onClick, OnBtnDeleteEnemyClick);
        EventDelegate.Set(View.BtnCopyEnemy_UIButton.onClick, OnBtnCopyEnemyClick);
        EventDelegate.Set(View.BtnAddFriend_UIButton.onClick, OnBtnAddFriendClick);
        EventDelegate.Set(View.BtnDeleteFriend_UIButton.onClick, OnBtnDeleteFriendClick);
        EventDelegate.Set(View.BtnCopyFriend_UIButton.onClick, OnBtnCopyFriendClick);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
    }

    #endregion

    #region Event Handlers

    private void OnPopBattleConfigChangeHandler()
    {
        View.PopBattleConfig_UIPopupList.GetComponentInChildren<UILabel>().text = View.PopBattleConfig_UIPopupList.value;
        var tTargetValue = View.PopBattleConfig_UIPopupList.value;
        if (mSelectedBattleConfigKey == tTargetValue)
            return;
        mSelectedBattleConfigKey = tTargetValue;
        InitMonsterListUI();
    }

    private void OnPopEnemyJobChangeHandler()
    {
        View.LabelPopEnemyJob_UILabel.text = View.PopEnemyJob_UIPopupList.value;
        mSelectedEnemyJobKey = View.PopEnemyJob_UIPopupList.value;
    }

    private void OnPopFriendJobChangeHandler()
    {
        View.LabelPopFriendJob_UILabel.text = View.PopFriendJob_UIPopupList.value;
        mSelectedFriendJobKey = View.PopFriendJob_UIPopupList.value;
    }

    private void OnBtnBattleClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid, 0, true))
            return;
        UpdateBattleDemoS1ConfigDtoListByItemList();
        EnterBattle();
    }

    private void OnBtnAddEnemyClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        var tTempInt = 0;
        tTempInt = ModelManager.BattleDemoConfig.GetMonsterIdByJobDesc(mSelectedEnemyJobKey);
        if (tTempInt > 0)
            AddBattleDemoS1ItemController(View.GridEnemy_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster(tTempInt, tTempInt));
    }

    private void OnBtnDeleteEnemyClick()
    {
        RemoveBattleDemoS1ItemController(ref mSelectedEnemeyBattleDemoS1ItemController);
    }

    private void OnBtnCopyEnemyClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        CopyBattleDemoS1ItemController(mSelectedEnemeyBattleDemoS1ItemController);
    }

    private void OnBtnAddFriendClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        var tTempInt = 0;
        tTempInt = ModelManager.BattleDemoConfig.GetMonsterIdByJobDesc(mSelectedFriendJobKey);
        if (tTempInt > 0)
            AddBattleDemoS1ItemController(View.GridFriend_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster(tTempInt, tTempInt));
    }

    private void OnBtnDeleteFriendClick()
    {
        RemoveBattleDemoS1ItemController(ref mSelectedFriendBattleDemoS1ItemController);
    }

    private void OnBtnCopyFriendClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        CopyBattleDemoS1ItemController(mSelectedFriendBattleDemoS1ItemController);
    }

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>
    public void UpdateData()
    {
        UpdateAllUI();
    }

    #endregion

    #region Update global UI

    private void UpdateAllUI()
    {

    }

    private void UpdateList(UIGrid pUIGrid, List<int> pListDataProvider)
    {
        
    }

    //考虑到只是测试用，本处不计较这部分性能和优化了，2017-03-09 19:31:23
    private void DisposeDataAndUI()
    {
        if (null != mBattleDemoS1ItemControllerFriendList)
            mBattleDemoS1ItemControllerFriendList.Clear();
        if (null != mBattleDemoS1ItemControllerEnemyList)
            mBattleDemoS1ItemControllerEnemyList.Clear();
        if (null != mBattleDemoS1ConfigDtoListEnemy)
            mBattleDemoS1ConfigDtoListEnemy.Clear();
        if (null != mBattleDemoS1ConfigDtoListFriend)
            mBattleDemoS1ConfigDtoListFriend.Clear();
        if (null != mSelectedEnemeyBattleDemoS1ItemController)
            mSelectedEnemeyBattleDemoS1ItemController = null;
        if (null != mSelectedFriendBattleDemoS1ItemController)
            mSelectedFriendBattleDemoS1ItemController = null;

        View.GridEnemy_UIGrid.transform.RemoveChildren();
        View.GridFriend_UIGrid.transform.RemoveChildren();
    }

    #endregion

    #region 战斗配置

    private void InitPopBattleConfig()
    {
        View.PopBattleConfig_UIPopupList.Clear();
        var tDic = ModelManager.BattleDemoConfig.BattleConfigDic;
        if (null == tDic || tDic.Count <= 0)
        {
            GameDebuger.LogError("InitPopBattleConfig failed , BattleConfigDic == null ! ");
            return;
        }
        var tEnum = tDic.GetEnumerator();
        mSelectedBattleConfigKey = string.Empty;
        while (tEnum.MoveNext())
        {
            if (string.IsNullOrEmpty(mSelectedBattleConfigKey))
            {
                mSelectedBattleConfigKey = tEnum.Current.Key;
                View.PopBattleConfig_UIPopupList.value = mSelectedBattleConfigKey;
            }
            View.PopBattleConfig_UIPopupList.AddItem(tEnum.Current.Key);
        }
    }

    private void InitMonsterListUI()
    {
        DisposeDataAndUI();
        var tFightersConfigDto = LoadBattleConfig(mSelectedBattleConfigKey);
        InitMonsterListUI(tFightersConfigDto);
    }

    private FightersConfigDto LoadBattleConfig(string pConfigKey)
    {
        List<int> tEnemyIDList = null;
        List<int> tFriendIDList = null;
        if (ModelManager.BattleDemoConfig.GetMonsterIDListByConfigId(pConfigKey, out tEnemyIDList, out tFriendIDList))
            return DemoSimulateHelper.SimulateFightersConfigDtoByIDList(tEnemyIDList, tFriendIDList);
        else
            return null;
    }

    private FightersConfigDto CreateFightersConfigDto()
    {
        var tFightersConfigDto = new FightersConfigDto();
        tFightersConfigDto.ateam = DemoSimulateHelper.SimulateFighterConfigDtoList(true);
        tFightersConfigDto.bteam = DemoSimulateHelper.SimulateFighterConfigDtoList(false);
        return tFightersConfigDto;
    }

    private void InitMonsterListUI(FightersConfigDto pFightersConfigDto)
    {
        if (null == pFightersConfigDto)
        {
            GameDebuger.LogError(string.Format("InitMonsterListUI failed , null == pFightersConfigDto , mSelectedBattleConfigKey : {0}", mSelectedBattleConfigKey));
            return;
        }
        InitMonsterListUI(View.GridFriend_UIGrid, pFightersConfigDto.ateam);
        InitMonsterListUI(View.GridEnemy_UIGrid, pFightersConfigDto.bteam);
    }

    private void InitMonsterListUI(UIGrid pUIGrid, List<FighterConfigDto> pBattleDemoS1ConfigDtoList)
    {
        if (null == pUIGrid || null == pBattleDemoS1ConfigDtoList || pBattleDemoS1ConfigDtoList.Count <= 0)
            return;
        for (var tCounter = 0; tCounter < pBattleDemoS1ConfigDtoList.Count; tCounter++)
        {
            AddBattleDemoS1ItemController(pUIGrid, pBattleDemoS1ConfigDtoList[tCounter], false);
        }
        pUIGrid.Reposition();
        ResetPositionDelay(pUIGrid.GetComponentInParent<UIScrollView>());
    }

    #endregion

    #region 开战


    private void UpdateBattleDemoS1ConfigDtoListByItemList()
    {
        mBattleDemoS1ConfigDtoListEnemy = UpdateBattleDemoS1ConfigDtoListByItemList(true);
        mBattleDemoS1ConfigDtoListFriend = UpdateBattleDemoS1ConfigDtoListByItemList(false);
    }

    private List<FighterConfigDto> UpdateBattleDemoS1ConfigDtoListByItemList(bool pIsEnemy)
    {
        var tItemList = pIsEnemy ? mBattleDemoS1ItemControllerEnemyList : mBattleDemoS1ItemControllerFriendList;
        if (tItemList .IsNullOrEmpty())
            return null;

        return tItemList.Filter(tItem=>tItem != null)
            .Map<BattleDemoEasyConfigItemController, FighterConfigDto>(tItem=>tItem.BattleDemoS1ConfigDto)
            .ToList();
    }

    private void EnterBattle()
    {
        if (null == mBattleDemoS1ConfigDtoListEnemy || mBattleDemoS1ConfigDtoListEnemy.Count <= 0 || null == mBattleDemoS1ConfigDtoListFriend || mBattleDemoS1ConfigDtoListFriend.Count <= 0)
        {
            GameDebuger.LogError("敌我都必须最少配置1个！");
            return;
        }

        var tFightersConfigDto = new FightersConfigDto();
        tFightersConfigDto.ateam = new List<FighterConfigDto>(mBattleDemoS1ConfigDtoListFriend);
        tFightersConfigDto.bteam = new List<FighterConfigDto>(mBattleDemoS1ConfigDtoListEnemy);
        BattleNetworkManager.EnterBattle(ModelManager.BattleDemoConfig.BattleSceneId, tFightersConfigDto, () =>
            {
                SaveFightersConfigDtoJSON(tFightersConfigDto);
                ProxyBattleDemoConfigModule.CloseEasyConfig();
            });
    }

    private void SaveFightersConfigDtoJSON(FightersConfigDto pFightersConfigDto)
    {
        mFightersConfigDtoJSON = LITJson.JsonMapper.ToJson(pFightersConfigDto);
        PlayerPrefsExt.SetPlayerString(FightersConfigDtoJSONKey, mFightersConfigDtoJSON);
    }

    #endregion

    #region 增删改查操作

    private BattleDemoEasyConfigItemController AddBattleDemoS1ItemController(UIGrid pParent, FighterConfigDto pBattleDemoS1ConfigDto = null, bool pResetPosition = true)
    {
        var tBattleDemoS1ItemController = AddCachedChild<BattleDemoEasyConfigItemController, BattleDemoEasyConfigItem>(
                                              pParent.gameObject
            , BattleDemoEasyConfigItem.NAME);

        var item = tBattleDemoS1ItemController.gameObject;
        item.transform.SetAsFirstSibling();

        tBattleDemoS1ItemController.UpdateData(pBattleDemoS1ConfigDto, OnItemClickHandler);

        if (pResetPosition)
        {
            pParent.Reposition();
            ResetPositionDelay(pParent.transform.GetComponentInParent<UIScrollView>());
        }

        if (pParent == View.GridEnemy_UIGrid)
        {
            if (null == mBattleDemoS1ItemControllerEnemyList)
                mBattleDemoS1ItemControllerEnemyList = new List<BattleDemoEasyConfigItemController>();
            mBattleDemoS1ItemControllerEnemyList.Add(tBattleDemoS1ItemController);
        }
        else
        {
            if (null == mBattleDemoS1ItemControllerFriendList)
                mBattleDemoS1ItemControllerFriendList = new List<BattleDemoEasyConfigItemController>();
            mBattleDemoS1ItemControllerFriendList.Add(tBattleDemoS1ItemController);
        }
        return tBattleDemoS1ItemController;
    }

    private void CopyBattleDemoS1ItemController(BattleDemoEasyConfigItemController pSelectedBattleDemoS1ItemController, bool pResetPosition = true)
    {
        if (null == pSelectedBattleDemoS1ItemController)
        {
            TipManager.AddTip("请先选择要拷贝的Item！");
            return;
        }
        AddBattleDemoS1ItemController(pSelectedBattleDemoS1ItemController.gameObject.GetComponentInParent<UIGrid>(), pSelectedBattleDemoS1ItemController.BattleDemoS1ConfigDto);
    }

    private void RemoveBattleDemoS1ItemController(ref BattleDemoEasyConfigItemController pBattleDemoS1ItemController, bool pResetPosition = true)
    {
        if (null == pBattleDemoS1ItemController)
        {
            TipManager.AddTip("请先选择要删除的Item！");
            return;
        }

        List<BattleDemoEasyConfigItemController> tBattleDemoS1ItemControllerList = null;
        if (null != pBattleDemoS1ItemController.gameObject)
        {
            var tUIGrid = pBattleDemoS1ItemController.transform.GetComponentInParent<UIGrid>();
            var tUIScrollView = pBattleDemoS1ItemController.transform.GetComponentInParent<UIScrollView>();
            RemoveCachedChild<BattleDemoEasyConfigItemController, BattleDemoEasyConfigItem>(pBattleDemoS1ItemController);
            if (null != tUIGrid)
            {
                if (pResetPosition)
                {
                    tUIGrid.Reposition();
                    ResetPositionDelay(tUIScrollView);
                }

                tBattleDemoS1ItemControllerList = tUIGrid == View.GridEnemy_UIGrid ? mBattleDemoS1ItemControllerEnemyList : mBattleDemoS1ItemControllerFriendList;
            }
        }

        if (null != tBattleDemoS1ItemControllerList)
            tBattleDemoS1ItemControllerList.Remove(pBattleDemoS1ItemController);

        pBattleDemoS1ItemController = null;
    }


    private void ResetPositionDelay(UIScrollView pUIScrollView)
    {
        if (null == pUIScrollView)
            return;
        AddOrResetCDTask("ResetPositionDelay", 0.3f, null, () =>
            {
                RemoveCDTask("ResetPositionDelay");
                if (BaseView.IsViewDestroy(View) || null == pUIScrollView)
                    return;

                GameDebuger.TODO("ResetPositionDelay : " + pUIScrollView.ToString());
                pUIScrollView.ResetPosition();
            });
    }


    private void OnItemClickHandler(BattleDemoEasyConfigItemController pBattleDemoS1ItemController, FighterConfigDto pBattleDemoS1ConfigDto)
    {
        GameDebuger.TODO(string.Format("OnItemClickHandler pBattleDemoS1ItemController:{0},pBattleDemoS1ConfigDto:{1}", pBattleDemoS1ItemController, pBattleDemoS1ConfigDto));
        if (mSelectedEnemeyBattleDemoS1ItemController == pBattleDemoS1ItemController)
        {
            return;
        }
        else
        {
            if (null == pBattleDemoS1ItemController || null == pBattleDemoS1ItemController.gameObject)
                return;
            var tUIGrid = pBattleDemoS1ItemController.gameObject.GetComponentInParent<UIGrid>();
            if (null == tUIGrid)
                return;
            if (tUIGrid == View.GridEnemy_UIGrid)
            {
                if (null != mSelectedEnemeyBattleDemoS1ItemController)
                    mSelectedEnemeyBattleDemoS1ItemController.Selected = false;
                mSelectedEnemeyBattleDemoS1ItemController = pBattleDemoS1ItemController;
                mSelectedEnemeyBattleDemoS1ItemController.Selected = true;
            }
            else
            {
                if (null != mSelectedFriendBattleDemoS1ItemController)
                    mSelectedFriendBattleDemoS1ItemController.Selected = false;
                mSelectedFriendBattleDemoS1ItemController = pBattleDemoS1ItemController;
                mSelectedFriendBattleDemoS1ItemController.Selected = true;
            }
        }
    }

    #endregion
}
