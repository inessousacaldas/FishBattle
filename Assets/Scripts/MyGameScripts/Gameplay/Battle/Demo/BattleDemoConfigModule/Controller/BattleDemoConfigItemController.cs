// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 01/17/2017 12:11:38
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System.Collections;
using System;

/// <summary>
/// This is the controller class for module BattleDemoS1Item, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 01/17/2017 12:11:38
/// </summary>
public class BattleDemoConfigItemController :MonolessViewController <BattleDemoConfigItem>
{
    public FighterConfigDto BattleDemoS1ConfigDto { get; private set; }

    private Action<BattleDemoConfigItemController,FighterConfigDto> mOnItemClickHandler = null;

    #region property and field

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    //打开界面后的一些显示准备，比如获取数据什么的
    public void Open(FighterConfigDto pBattleDemoS1ConfigDto,
                     Action<BattleDemoConfigItemController,FighterConfigDto> pOnItemClickHandler)
    {
        UpdateData(pBattleDemoS1ConfigDto, pOnItemClickHandler);
    }

    //添加事件监听
    protected override void RegistCustomEvent()
    {
        UIEventListener.Get(View.gameObject).onClick = OnItemClick;
        EventDelegate.Set(View.LabelType_UIInput.onChange, OnTypeInputChange);
        EventDelegate.Set(View.LabelId_UIInput.onChange, OnIdInputChange);
        EventDelegate.Set(View.LabelPlayerId_UIInput.onChange, OnNameInputChange);
        EventDelegate.Set(View.LabelActiveSkill_UIInput.onChange, OnActiveSkillInputChange);
        EventDelegate.Set(View.LabelAttack_UIInput.onChange, OnAttackInputChange);
        EventDelegate.Set(View.LabelAttackMagic_UIInput.onChange, OnAttackMagicInputChange);
        EventDelegate.Set(View.LabelDefence_UIInput.onChange, OnDefenceInputChange);
        EventDelegate.Set(View.LabelDefenceMagic_UIInput.onChange, OnDefenceMagicInputChange);
        EventDelegate.Set(View.LabelHP_UIInput.onChange, OnHPInputChange);
        EventDelegate.Set(View.LabelEP_UIInput.onChange, OnEPInputChange);
        EventDelegate.Set(View.LabelSpeed_UIInput.onChange, OnSpeedInputChange);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        Selected = false;
    }

    #endregion

    #region Event Handlers

    private void OnItemClick(GameObject go)
    {
        if (null != mOnItemClickHandler)
            mOnItemClickHandler(this, BattleDemoS1ConfigDto);
    }

    private void OnTypeInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelType_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.characterType = tTempInt;
    }

    private void OnNameInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelPlayerId_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.playerId = tTempInt;
    }

    private void OnIdInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelId_UIInput.value, out tTempInt))
        {
            BattleDemoS1ConfigDto.characterId = tTempInt;
            BattleDemoS1ConfigDto.id = tTempInt;
        }
    }

    private void OnActiveSkillInputChange()
    {
        BattleDemoS1ConfigDto.activeSkillIds = View.LabelActiveSkill_UIInput.value;
    }

    private void OnAttackInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelAttack_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.phyAttack = tTempInt;
    }

    private void OnAttackMagicInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelAttackMagic_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.magicAttack = tTempInt;
    }

    private void OnDefenceInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelDefence_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.phyDefence = tTempInt;
    }

    private void OnDefenceMagicInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelDefenceMagic_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.magicDefence = tTempInt;
    }

    private void OnHPInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelHP_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.hp = tTempInt;
    }

    private void OnEPInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelEP_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.ep = tTempInt;
    }

    private void OnSpeedInputChange()
    {
        int tTempInt = 0;
        if (int.TryParse(View.LabelSpeed_UIInput.value, out tTempInt))
            BattleDemoS1ConfigDto.speed = tTempInt;
    }

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>
    public void UpdateData(FighterConfigDto pBattleDemoS1ConfigDto,
                           Action<BattleDemoConfigItemController,FighterConfigDto> pOnItemClickHandler)
    {
        BattleDemoS1ConfigDto = null == pBattleDemoS1ConfigDto ? (new FighterConfigDto()) : pBattleDemoS1ConfigDto;
        mOnItemClickHandler = pOnItemClickHandler;
        UpdateAllUI();
    }

    #endregion

    #region Update global UI

    private void UpdateAllUI()
    {
        Selected = false;
        if (null == BattleDemoS1ConfigDto)
            return;

        View.LabelType_UIInput.value = BattleDemoS1ConfigDto.characterType.ToString();
        //View.LabelId_UIInput.value = 5.ToString();  //暂时写死
        View.LabelId_UIInput.value = BattleDemoS1ConfigDto.id.ToString();
        View.LabelPlayerId_UIInput.value = BattleDemoS1ConfigDto.playerId.ToString();
        View.LabelActiveSkill_UIInput.value = (null == BattleDemoS1ConfigDto.activeSkillIds) ? string.Empty : BattleDemoS1ConfigDto.activeSkillIds.ToString();
        View.LabelAttack_UIInput.value = BattleDemoS1ConfigDto.phyAttack.ToString();
        View.LabelAttackMagic_UIInput.value = BattleDemoS1ConfigDto.magicAttack.ToString();
        View.LabelDefence_UIInput.value = BattleDemoS1ConfigDto.phyDefence.ToString();
        View.LabelDefenceMagic_UIInput.value = BattleDemoS1ConfigDto.magicDefence.ToString();
        View.LabelHP_UIInput.value = BattleDemoS1ConfigDto.hp.ToString();
        View.LabelSpeed_UIInput.value = BattleDemoS1ConfigDto.speed.ToString();
        View.LabelEP_UIInput.value = BattleDemoS1ConfigDto.ep.ToString();
    }

    #endregion

    #region

    private bool mSelected = false;

    public bool Selected
    {
        get
        {
            return mSelected;
        }
        set
        {
            if (mSelected != value)
            {
                View.SelectedSprite.SetActive(value);
                mSelected = value;
            }
        }
    }

    #endregion
}
