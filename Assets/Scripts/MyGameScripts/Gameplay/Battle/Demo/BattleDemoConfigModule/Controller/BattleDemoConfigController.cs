// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 01/17/2017 12:09:09
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using System.Collections.Generic;
using AppDto;
using System.Text;
using System;
using BattleNetworkManager = BattleDataManager.BattleNetworkManager;

/// <summary>
/// DEMO版本战斗测试入口
/// This is the controller class for module BattleDemoConfig, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 01/17/2017 12:09:09
/// </summary>
public class BattleDemoConfigController : MonoViewController<BattleDemoConfigView>
{
    #region property and fieldS

    private List<FighterConfigDto> mBattleDemoS1ConfigDtoListEnemy = null;
    private List<FighterConfigDto> mBattleDemoS1ConfigDtoListFriend = null;
    private List<BattleDemoConfigItemController> mBattleDemoS1ItemControllerEnemyList = null;
    private List<BattleDemoConfigItemController> mBattleDemoS1ItemControllerFriendList = null;
    private BattleDemoConfigItemController mSelectedEnemeyBattleDemoS1ItemController = null;
    private BattleDemoConfigItemController mSelectedFriendBattleDemoS1ItemController = null;

    private string mFightersConfigDtoJSON = null;
    private string mFightersConfigDtoJSONKey = null;

    private string FightersConfigDtoJSONKey
    {
        get
        {
            if (string.IsNullOrEmpty(mFightersConfigDtoJSONKey))
                mFightersConfigDtoJSONKey = "FightersConfigDtoJSON_" + ModelManager.Player.GetPlayerId().ToString(); 
            return mFightersConfigDtoJSONKey;
        }
    }

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    //界面就绪后初始化，比如组件初始化
    protected override void AfterInitView()
    {
        InitMonsterListUI();
    }

    //添加事件监听
    protected override void RegistCustomEvent()
    {
        EventDelegate.Set(View.CloseButton_UIButton.onClick, ProxyBattleDemoConfigModule.Close);
        EventDelegate.Set(View.BtnReloadConfig_UIButton.onClick, OnBtnReloadConfigHandler);
        EventDelegate.Set(View.ResumeButton_UIButton.onClick, OnBtnResumeHandler);
        EventDelegate.Set(View.BattleButton_UIButton.onClick, OnBtnBattleClick);
        EventDelegate.Set(View.BtnAddEnemy_UIButton.onClick, OnBtnAddEnemyClick);
        EventDelegate.Set(View.BtnDeleteEnemy_UIButton.onClick, OnBtnDeleteEnemyClick);
        EventDelegate.Set(View.BtnCopyEnemy_UIButton.onClick, OnBtnCopyEnemyClick);
        EventDelegate.Set(View.BtnAddFriend_UIButton.onClick, OnBtnAddFriendClick);
        EventDelegate.Set(View.BtnDeleteFriend_UIButton.onClick, OnBtnDeleteFriendClick);
        EventDelegate.Set(View.BtnCopyFriend_UIButton.onClick, OnBtnCopyFriendClick);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
    }

    #endregion

    #region Event Handlers

    private void OnBtnReloadConfigHandler()
    {
        BattleConfigManager.Instance.Setup();
        TipManager.AddTip("战斗配置重载成功，重新进入战斗即可生效。");
    }

    private void OnBtnResumeHandler()
    {
        ResumeFightersConfigDto();
        TipManager.AddTip("敌我配置重置成功，重启界面即可生效。");
    }

    private void OnBtnBattleClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;

        UpdateSceneIdUI();
        UpdateBattleDemoS1ConfigDtoListByItemList();
        LogBattleDemoS1ConfigDtoFromList();
        UIModuleManager.Instance.CloseModule(BattleDemoConfigView.NAME, false);
        EnterBattle();
    }

    private void EnterBattle()
    {
        if (null == mBattleDemoS1ConfigDtoListEnemy || mBattleDemoS1ConfigDtoListEnemy.Count <= 0 || null == mBattleDemoS1ConfigDtoListFriend || mBattleDemoS1ConfigDtoListFriend.Count <= 0)
        {
            GameDebuger.LogError("敌我都必须最少配置1个！");
            return;
        }

        GameDebuger.TODO(@"ServiceRequestAction.requestServer(DemoService.updateEnemyDummy(enemyDummySetting.GetSettingInfo()));");
        var tFightersConfigDto = new FightersConfigDto();
        tFightersConfigDto.ateam = new List<FighterConfigDto>(mBattleDemoS1ConfigDtoListFriend);
        tFightersConfigDto.bteam = new List<FighterConfigDto>(mBattleDemoS1ConfigDtoListEnemy);
        BattleNetworkManager.EnterBattle(ModelManager.BattleDemoConfig.BattleSceneId, tFightersConfigDto, () =>
            {
                SaveFightersConfigDtoJSON(tFightersConfigDto);
                ProxyBattleDemoConfigModule.Close();
            });
    }

    private void SaveFightersConfigDtoJSON(FightersConfigDto pFightersConfigDto)
    {
        mFightersConfigDtoJSON = LITJson.JsonMapper.ToJson(pFightersConfigDto);
        PlayerPrefsExt.SetPlayerString(FightersConfigDtoJSONKey, mFightersConfigDtoJSON);
    }

    private void OnBtnAddEnemyClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        var tTempInt = 0;
        int.TryParse(View.LabelEnemyMonsterId_UIInput.value, out tTempInt);
        AddBattleDemoS1ItemController(View.GridEnemy_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster(tTempInt));
    }

    private void OnBtnDeleteEnemyClick()
    {
        RemoveBattleDemoS1ItemController(ref mSelectedEnemeyBattleDemoS1ItemController);
    }

    private void OnBtnCopyEnemyClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        CopyBattleDemoS1ItemController(mSelectedEnemeyBattleDemoS1ItemController);
    }

    private void OnBtnAddFriendClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        var tTempInt = 0;
        int.TryParse(View.LabelFriendMonsterId_UIInput.value, out tTempInt);
        AddBattleDemoS1ItemController(View.GridFriend_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster(tTempInt));
    }

    private void OnBtnDeleteFriendClick()
    {
        RemoveBattleDemoS1ItemController(ref mSelectedFriendBattleDemoS1ItemController);
    }

    private void OnBtnCopyFriendClick()
    {
        if (ModelManager.BattleDemoConfig.IsPlayerCountMaxForRequest(View.GridEnemy_UIGrid, View.GridFriend_UIGrid))
            return;
        CopyBattleDemoS1ItemController(mSelectedFriendBattleDemoS1ItemController);
    }

    private void OnItemClickHandler(BattleDemoConfigItemController pBattleDemoS1ItemController, FighterConfigDto pBattleDemoS1ConfigDto)
    {
        GameDebuger.TODO(string.Format("OnItemClickHandler pBattleDemoS1ItemController:{0},pBattleDemoS1ConfigDto:{1}", pBattleDemoS1ItemController, pBattleDemoS1ConfigDto));
        if (mSelectedEnemeyBattleDemoS1ItemController == pBattleDemoS1ItemController)
        {
            return;
        }
        else
        {
            if (null == pBattleDemoS1ItemController || null == pBattleDemoS1ItemController.gameObject)
                return;
            var tUIGrid = pBattleDemoS1ItemController.gameObject.GetComponentInParent<UIGrid>();
            if (null == tUIGrid)
                return;
            if (tUIGrid == View.GridEnemy_UIGrid)
            {
                if (null != mSelectedEnemeyBattleDemoS1ItemController)
                    mSelectedEnemeyBattleDemoS1ItemController.Selected = false;
                mSelectedEnemeyBattleDemoS1ItemController = pBattleDemoS1ItemController;
                mSelectedEnemeyBattleDemoS1ItemController.Selected = true;
            }
            else
            {
                if (null != mSelectedFriendBattleDemoS1ItemController)
                    mSelectedFriendBattleDemoS1ItemController.Selected = false;
                mSelectedFriendBattleDemoS1ItemController = pBattleDemoS1ItemController;
                mSelectedFriendBattleDemoS1ItemController.Selected = true;
            }
        }
    }

    #endregion

    #region Public or open interface


    #endregion

    #region Update global UI

    private void InitMonsterListUI()
    {
        FightersConfigDto tFightersConfigDto = null;
        mFightersConfigDtoJSON = PlayerPrefsExt.GetPlayerString(FightersConfigDtoJSONKey);
        if (!string.IsNullOrEmpty(mFightersConfigDtoJSON) && mFightersConfigDtoJSON.Length > 10)
            tFightersConfigDto = LITJson.JsonMapper.ToObject<FightersConfigDto>(mFightersConfigDtoJSON);
        if (null == tFightersConfigDto)
            tFightersConfigDto = CreateFightersConfigDto();
        InitMonsterListUI(tFightersConfigDto);
    }

    private void UpdateSceneIdUI()
    {
        int tBattleSceneId = 0;
        int.TryParse(View.SceneIdInput_UIInput.value, out tBattleSceneId);
        ModelManager.BattleDemoConfig.BattleSceneId = tBattleSceneId;
        if (ModelManager.BattleDemoConfig.BattleSceneId <= 0)
        {
            ModelManager.BattleDemoConfig.BattleSceneId = BattleDemoConfigModel.DEFAULT_SCENE_ID;
            View.SceneIdInput_UIInput.value = ModelManager.BattleDemoConfig.BattleSceneId.ToString();
        }

        int tBattleCameraId = 0;
        int.TryParse(View.SceneCameraInput_UIInput.value, out tBattleCameraId);
        if (tBattleCameraId <= 0 && ModelManager.BattleDemoConfig.BattleSceneId > 0)
            tBattleCameraId = 1;
        ModelManager.BattleDemoConfig.BattleCameraId = tBattleCameraId;
    }

    #endregion

    #region 更新数据列表

    private void UpdateBattleDemoS1ConfigDtoListByItemList()
    {
        mBattleDemoS1ConfigDtoListEnemy = UpdateBattleDemoS1ConfigDtoListByItemList(true);
        mBattleDemoS1ConfigDtoListFriend = UpdateBattleDemoS1ConfigDtoListByItemList(false);
    }

    private List<FighterConfigDto> UpdateBattleDemoS1ConfigDtoListByItemList(bool pIsEnemy)
    {
        List<BattleDemoConfigItemController> tItemList = pIsEnemy ? mBattleDemoS1ItemControllerEnemyList : mBattleDemoS1ItemControllerFriendList;
        if (null == tItemList || tItemList.Count <= 0)
            return null;

        List<FighterConfigDto> tBattleDemoS1ConfigDtoList = new List<FighterConfigDto>();
        foreach (var tItem in tItemList)
        {
            if (null != tItem)
            {
//                UpdateDataDicForItem(tItem, tItemList);
//                tBattleDemoS1ConfigDtoList.Add(tItemList[tItem]);
                tBattleDemoS1ConfigDtoList.Add(tItem.BattleDemoS1ConfigDto);
            }
        }
        return tBattleDemoS1ConfigDtoList;
    }

    private FightersConfigDto CreateFightersConfigDto()
    {
        FightersConfigDto tFightersConfigDto = new FightersConfigDto();
        tFightersConfigDto.ateam = DemoSimulateHelper.SimulateFighterConfigDtoList(true);
        tFightersConfigDto.bteam = DemoSimulateHelper.SimulateFighterConfigDtoList(false);
        return tFightersConfigDto;
    }

    private void ResumeFightersConfigDto()
    {
        SaveFightersConfigDtoJSON(CreateFightersConfigDto());
    }

    #endregion

    #region BattleDemoS1ItemController 操作

    private BattleDemoConfigItemController AddBattleDemoS1ItemController(UIGrid pParent, FighterConfigDto pBattleDemoS1ConfigDto = null, bool pResetPosition = true)
    {
        var tBattleDemoS1ItemController = AddCachedChild<BattleDemoConfigItemController, BattleDemoConfigItem>(
                                              pParent.gameObject
            , BattleDemoConfigItem.NAME);

        var item = tBattleDemoS1ItemController.gameObject;
        item.transform.SetAsFirstSibling();

        tBattleDemoS1ItemController.UpdateData(pBattleDemoS1ConfigDto, OnItemClickHandler);

        if (pResetPosition)
        {
            pParent.Reposition();
            ResetPositionDelay(pParent.transform.GetComponentInParent<UIScrollView>());
        }

        if (pParent == View.GridEnemy_UIGrid)
        {
            if (null == mBattleDemoS1ItemControllerEnemyList)
                mBattleDemoS1ItemControllerEnemyList = new List<BattleDemoConfigItemController>();
            mBattleDemoS1ItemControllerEnemyList.Add(tBattleDemoS1ItemController);
        }
        else
        {
            if (null == mBattleDemoS1ItemControllerFriendList)
                mBattleDemoS1ItemControllerFriendList = new List<BattleDemoConfigItemController>();
            mBattleDemoS1ItemControllerFriendList.Add(tBattleDemoS1ItemController);
        }
        return tBattleDemoS1ItemController;
    }

    private void CopyBattleDemoS1ItemController(BattleDemoConfigItemController pSelectedBattleDemoS1ItemController, bool pResetPosition = true)
    {
        if (null == pSelectedBattleDemoS1ItemController)
        {
            TipManager.AddTip("请先选择要拷贝的Item！");
            return;
        }
        AddBattleDemoS1ItemController(pSelectedBattleDemoS1ItemController.gameObject.GetComponentInParent<UIGrid>(), pSelectedBattleDemoS1ItemController.BattleDemoS1ConfigDto);
    }

    private void RemoveBattleDemoS1ItemController(ref BattleDemoConfigItemController pBattleDemoS1ItemController, bool pResetPosition = true)
    {

        if (null == pBattleDemoS1ItemController)
        {
            TipManager.AddTip("请先选择要删除的Item！");
            return;
        }

        List<BattleDemoConfigItemController> tBattleDemoS1ItemControllerList = null;
        if (null != pBattleDemoS1ItemController.gameObject)
        {
            UIGrid tUIGrid = pBattleDemoS1ItemController.transform.GetComponentInParent<UIGrid>();
            UIScrollView tUIScrollView = pBattleDemoS1ItemController.transform.GetComponentInParent<UIScrollView>();
            RemoveCachedChild<BattleDemoConfigItemController, BattleDemoConfigItem>(pBattleDemoS1ItemController);

            if (null != tUIGrid)
            {
                if (pResetPosition)
                {
                    tUIGrid.Reposition();
                    ResetPositionDelay(tUIScrollView);
                }

                tBattleDemoS1ItemControllerList = tUIGrid == View.GridEnemy_UIGrid ? mBattleDemoS1ItemControllerEnemyList : mBattleDemoS1ItemControllerFriendList;
            }
        }

        if (null != tBattleDemoS1ItemControllerList)
            tBattleDemoS1ItemControllerList.Remove(pBattleDemoS1ItemController);

        pBattleDemoS1ItemController = null;
    }

    private void ResetPositionDelay(UIScrollView pUIScrollView)
    {
        if (null == pUIScrollView)
            return;
        AddOrResetCDTask("ResetPositionDelay", 0.3f, null, () =>
            {
                RemoveCDTask("ResetPositionDelay");
                if (BaseView.IsViewDestroy(View) || null == pUIScrollView)
                    return;

                GameDebuger.TODO("ResetPositionDelay : " + pUIScrollView.ToString());
                pUIScrollView.ResetPosition();
            });
    }

    private void InitMonsterListUI(FightersConfigDto pFightersConfigDto)
    {
        InitMonsterListUI(View.GridFriend_UIGrid, pFightersConfigDto.ateam);
        InitMonsterListUI(View.GridEnemy_UIGrid, pFightersConfigDto.bteam);
    }

    private void InitMonsterListUI(UIGrid pUIGrid, List<FighterConfigDto> pBattleDemoS1ConfigDtoList)
    {
        if (null == pUIGrid || null == pBattleDemoS1ConfigDtoList || pBattleDemoS1ConfigDtoList.Count <= 0)
            return;
        for (int tCounter = 0; tCounter < pBattleDemoS1ConfigDtoList.Count; tCounter++)
        {
            AddBattleDemoS1ItemController(pUIGrid, pBattleDemoS1ConfigDtoList[tCounter], false);
        }
        pUIGrid.Reposition();
        ResetPositionDelay(pUIGrid.GetComponentInParent<UIScrollView>());
    }

    #endregion

    #region Temp help function

    private void LogBattleDemoS1ConfigDtoFromList()
    {
        LogBattleDemoS1ConfigDtoFromList(mBattleDemoS1ConfigDtoListEnemy);
        LogBattleDemoS1ConfigDtoFromList(mBattleDemoS1ConfigDtoListFriend);
    }

    private void LogBattleDemoS1ConfigDtoFromList(List<FighterConfigDto> pBattleDemoS1ConfigDtoList)
    {
        if (null == pBattleDemoS1ConfigDtoList || pBattleDemoS1ConfigDtoList.Count <= 0)
            return;
        StringBuilder tStringBuilder = new StringBuilder();
        tStringBuilder.AppendLine(pBattleDemoS1ConfigDtoList.ToString());
        for (int tCounter = 0; tCounter < pBattleDemoS1ConfigDtoList.Count; tCounter++)
        {
            try
            {
                tStringBuilder.AppendLine(pBattleDemoS1ConfigDtoList[tCounter].ToString());
            }
            catch (Exception e)
            {
                GameDebuger.LogError(e);
            }
        }
        GameDebuger.Log(tStringBuilder.ToString());
    }

    #endregion
}
