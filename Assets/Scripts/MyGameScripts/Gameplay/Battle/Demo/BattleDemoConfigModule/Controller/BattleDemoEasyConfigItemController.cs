// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/09/2017 16:38:34
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System.Collections;
using System;

/// <summary>
/// This is the controller class for module BattleDemoEasyConfigItem, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 03/09/2017 16:38:34
/// </summary>
public class BattleDemoEasyConfigItemController : MonolessViewController<BattleDemoEasyConfigItem>
{
    public FighterConfigDto BattleDemoS1ConfigDto { get; private set; }

    private Action<BattleDemoEasyConfigItemController,FighterConfigDto> mOnItemClickHandler = null;

    #region property and field

    #region const

    #endregion


    #region data

    #endregion

    #endregion

    #region interface functions

    //打开界面后的一些显示准备，比如获取数据什么的
    public void Open(FighterConfigDto pBattleDemoS1ConfigDto,
                     Action<BattleDemoEasyConfigItemController,FighterConfigDto> pOnItemClickHandler)
    {
        UpdateData(pBattleDemoS1ConfigDto, pOnItemClickHandler);
    }

    protected override void AfterInitView()
    {
        DemoConfigUIHelper.InitializePopListWithCharacterType(View.PopCharacterType_UIPopupList);
    }

    //添加事件监听
    protected override void RegistCustomEvent()
    {
        UIEventListener.Get(View.gameObject).onClick = OnItemClick;
        EventDelegate.Set(View.LabelId_UIInput.onChange, OnIdInputChange);
        EventDelegate.Set(View.PopJob_UIPopupList.onChange, OnPopJobChange);
        EventDelegate.Set(View.PopCharacterType_UIPopupList.onChange, OnPopCharacterTypeChange);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        Selected = false;
    }

    #endregion

    #region Event Handlers

    private void OnItemClick(GameObject go)
    {
        if (null != mOnItemClickHandler)
            mOnItemClickHandler(this, BattleDemoS1ConfigDto);
    }

    private void OnPopJobChange()
    {
        if (!IDChangable)
            return;
        if (View.LabelPopJob_UILabel.text == View.PopJob_UIPopupList.value)
            return;
        View.LabelPopJob_UILabel.text = View.PopJob_UIPopupList.value;
        string tTargetValue = View.PopJob_UIPopupList.value;
        int tTempInt = 0;
        if ((GeneralCharactor.CharactorType)BattleDemoS1ConfigDto.characterType == GeneralCharactor.CharactorType.Monster)
            tTempInt = ModelManager.BattleDemoConfig.GetMonsterIdByJobDesc(tTargetValue);
        else
            tTempInt = ModelManager.BattleDemoConfig.GetCharacterIdByCharacterName(tTargetValue);
        if (tTempInt > 0)
        {
            BattleDemoS1ConfigDto.characterId = tTempInt;
            BattleDemoS1ConfigDto.id = tTempInt;
            UpdateAllUI();
        }
    }

    private void OnPopCharacterTypeChange()
    {
        if (!IDChangable)
            return;
        if (View.LabelPopCharacterType_UILabel.text == View.PopCharacterType_UIPopupList.value)
            return;
        View.LabelPopCharacterType_UILabel.text = View.PopCharacterType_UIPopupList.value;
        string tTargetValue = View.PopCharacterType_UIPopupList.value;
        GeneralCharactor.CharactorType tTempInt = ModelManager.BattleDemoConfig.GetCharacterTypeByTypeDesc(tTargetValue);
        if (tTempInt != GeneralCharactor.CharactorType.Unknown)
        {
            if (((GeneralCharactor.CharactorType)BattleDemoS1ConfigDto.characterType == GeneralCharactor.CharactorType.Monster && tTempInt != GeneralCharactor.CharactorType.Monster) ||
                ((GeneralCharactor.CharactorType)BattleDemoS1ConfigDto.characterType != GeneralCharactor.CharactorType.Monster && tTempInt == GeneralCharactor.CharactorType.Monster))
            {
                UpdatePopJob(tTempInt);
            }
            BattleDemoS1ConfigDto.characterType = (int)tTempInt;
            UpdateAllUI();
        }
    }

    private void OnIdInputChange()
    {
        if (!IDChangable)
            return;
        int tTempInt = 0;
        if (int.TryParse(View.LabelId_UIInput.value, out tTempInt))
        {
            BattleDemoS1ConfigDto.characterId = tTempInt;
            BattleDemoS1ConfigDto.id = tTempInt;
            UpdateAllUI();
        }
    }

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>
    public void UpdateData(FighterConfigDto pBattleDemoS1ConfigDto,
                           Action<BattleDemoEasyConfigItemController,FighterConfigDto> pOnItemClickHandler)
    {
        BattleDemoS1ConfigDto = null == pBattleDemoS1ConfigDto ? (new FighterConfigDto()) : pBattleDemoS1ConfigDto;
        mOnItemClickHandler = pOnItemClickHandler;
        UpdatePopJob((GeneralCharactor.CharactorType)BattleDemoS1ConfigDto.characterType);
        UpdateAllUI();
    }

    #endregion

    #region Update global UI

    private void UpdateAllUI()
    {
        Selected = false;
        string tIcon = string.Empty;
        string tJobDec = "未知";
        string tTypeDesc = "未知";
        string tId = string.Empty;
        if (null != BattleDemoS1ConfigDto)
        {
            GeneralCharactor tGeneralCharactor = DataCache.getDtoByCls<GeneralCharactor>(BattleDemoS1ConfigDto.characterId);
            if (null != tGeneralCharactor)
                tIcon = tGeneralCharactor.texture.ToString();
            tId = BattleDemoS1ConfigDto.id.ToString();
            tJobDec = ModelManager.BattleDemoConfig.GetJobDescKeyByID(BattleDemoS1ConfigDto);
            tTypeDesc = ModelManager.BattleDemoConfig.GetCharacterTypeDescByTypeID((GeneralCharactor.CharactorType)BattleDemoS1ConfigDto.characterType);
        }
        View.LabelId_UIInput.value = tId;
        View.PopJob_UIPopupList.value = tJobDec;
        View.PopCharacterType_UIPopupList.value = tTypeDesc;
        UIHelper.SetPetIcon(View.HeadIcon_UISprite, tIcon);
        View.LabelId_UIInput.enabled = View.PopCharacterType_UIPopupList.enabled = View.PopJob_UIPopupList.enabled = IDChangable;
    }

    private void UpdatePopJob(GeneralCharactor.CharactorType pCharacterType)
    {
        if (pCharacterType == GeneralCharactor.CharactorType.Monster)
            DemoConfigUIHelper.InitializePopListWithMonsterJobDesc(View.PopJob_UIPopupList, false);
        else
            DemoConfigUIHelper.InitializePopListWithCharacterNames(View.PopJob_UIPopupList, false);
    }

    #endregion

    #region

    private bool mSelected = false;

    public bool Selected
    {
        get
        {
            return mSelected;
        }
        set
        {
            if (mSelected != value)
            {
                View.SelectedSprite.SetActive(value);
                mSelected = value;
            }
        }
    }

    private bool IDChangable
    {
        get
        {
            return null == BattleDemoS1ConfigDto || BattleDemoS1ConfigDto.id != ModelManager.Player.GetPlayerId();
        }
    }
    #endregion
}
