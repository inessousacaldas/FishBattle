// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 01/17/2017 12:09:09
// Desc : Auto generated by MarsZ. update this if need.
// **********************************************************************

using AppDto;
using AppServices;
using System;
using System.Collections.Generic;
using BattleNetworkManager = BattleDataManager.BattleNetworkManager;
/// <summary>
/// This is the model class for module BattleDemoConfig, use this to manage the data of module BattleDemoConfig.</p>
/// Use this in ModelManager 
/// DO NOT USE THIS DIRECTLY.
/// @MarsZ in 01/17/2017 12:09:09
/// </summary>
public class BattleDemoConfigModel : IModuleModel
{
    #region field and property

    //DEMO的战斗请求协议最多支持这么多人对战，超过会导致协议包体太大，网络断开
    public const int MAX_PLAYER = 40;
    
    public const int DEFAULT_SCENE_ID = 11001;
    //TODO@MarsZ 重构时临时用默认场景ID，其他场景的话，配置跟资源并不一定对的上。2017-01-13 10:44:36
    public int BattleSceneId = DEFAULT_SCENE_ID;

    //0是2D战场。123对应之前的1无镜头3D战场、2普通镜头3D战场、3BOSS镜头3D战场
    public int BattleCameraId = 1;

    //怪物职业描述VSID
    private Dictionary<string,Monster> mMonsterJobIdDic = null;

    public Dictionary<string,Monster> MonsterJobIdDic
    {
        get
        { 
            if (null == mMonsterJobIdDic)
            {
                mMonsterJobIdDic = new Dictionary<string, Monster>();
                List<Monster> tMonsterList = DataCache.getArrayByCls<Monster>();
                if (null == tMonsterList || tMonsterList.Count <= 0)
                    return null;
                Monster tMonster = null;
                for (int tCounter = 0; tCounter < tMonsterList.Count; tCounter++)
                {
                    tMonster = tMonsterList[tCounter];
                    if (null == tMonster)
                        continue;
                    mMonsterJobIdDic.Add(GetJobDescKey(tMonster.id, tMonster.shortDesc), tMonster);
                }
            }
            return mMonsterJobIdDic;
        }
    }

    //战斗配置
    private Dictionary<string,Dictionary<int,List<int>>> mBattleConfigDic = null;

    public Dictionary<string,Dictionary<int,List<int>>> BattleConfigDic
    {
        get
        { 
            if (null == mBattleConfigDic)
            {
                mBattleConfigDic = new Dictionary<string, Dictionary<int, List<int>>>();
                var tBattleConfig = DataCache.GetStaticConfigValues(AppStaticConfigs.BATTLE_CONFIG, @"战斗配置1|1_2_3#4_5_6;战斗配置2|2_1_3#4_5_6;战斗配置3|3_1_2#4_5_6;战斗配置4|4_2_3#1_5_6");
                if (string.IsNullOrEmpty(tBattleConfig))
                    return null;
                var tGroupsStrs = tBattleConfig.Split(';');//各组战斗配置
                if (null == tGroupsStrs || tGroupsStrs.Length <= 0)
                    return null;
                string tGroupString;
                string[] tGroupIdStrs;
                Dictionary<int,List<int>> tIDListDic;
                List<int> tIDList;
                string[] tIDStrs, tIDStrs2;
                int tCounter2, tLen2, tCounter3;
                for (int tCounter = 0, tLen = tGroupsStrs.Length; tCounter < tLen; tCounter++)
                {
                    tGroupString = tGroupsStrs[tCounter];
                    if (string.IsNullOrEmpty(tGroupString))
                        continue;
                    tGroupIdStrs = tGroupString.Split('|');//战斗配置的key|value
                    if (null == tGroupIdStrs || tGroupIdStrs.Length <= 1)
                        continue;
                    tIDListDic = new Dictionary<int, List<int>>();
                    tIDStrs = tGroupIdStrs[1].Split('#');//敌人ID列表#我方ID列表
                    if (null == tIDStrs || tIDStrs.Length != 2)
                        continue;
                    for (tCounter3 = 0; tCounter3 < 2; tCounter3++)
                    {
                        tIDList = new List<int>();
                        tIDStrs2 = tIDStrs[tCounter3].Split('_');//ID列表
                        if (null == tIDStrs2 || tIDStrs2.Length <= 0)
                            continue;
                        for (tCounter2 = 0 ,tLen2 = tIDStrs2.Length; tCounter2 < tLen2; tCounter2++)
                        {
                            tIDList.Add(tIDStrs2[tCounter2].ToInt());
                        }
                        tIDListDic.Add(tCounter3, tIDList);
                    }
                    mBattleConfigDic.Add(tGroupIdStrs[0], tIDListDic);
                }
            }
            return mBattleConfigDic;
        }
    }

    private List<FighterConfigDto> mMainRolePropertyList = null;

    private List<FighterConfigDto> MainRolePropertyList
    {
        get
        {
            if (null != mMainRolePropertyList) return mMainRolePropertyList;
            mMainRolePropertyList = new List<FighterConfigDto>();
            //var mMainRoleProperties = DataCache.GetStaticConfigValues(AppStaticConfigs.MAIN_ROLE_PROPERTIES, @"1#1_1117_1116|1406|598|506|414|6583|796;2#1_2712_5358|1411|464|532|509|4744|678;3#1712_4103_1616_1212|420|616|748|742|7467|663;4#1712_1512_5364|420|384|1527|958|5706|461;5#1712_1512_1315|456|464|1075|774|4650|970");
            //if (string.IsNullOrEmpty(mMainRoleProperties))
            //    return null;
            //var tGroupStrs = mMainRoleProperties.Split(';');//各组
            //if (null == tGroupStrs || tGroupStrs.Length <= 0)
            //    return null;
            //string[] tValuesStrs, tValuesStrs2;
            //for (int tCounter = 0, tLen = tGroupStrs.Length; tCounter < tLen; tCounter++)
            //{
            //    tValuesStrs = tGroupStrs[tCounter].Split('#');
            //    if (null == tValuesStrs || tValuesStrs.Length < 2)
            //        continue;
            //    tValuesStrs2 = tValuesStrs[1].Split('|');
            //    if (null == tValuesStrs2 || tValuesStrs2.Length < 7)
            //        continue;
            //    mMainRolePropertyList.Add(DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto(0, 0, 0, 0, string.Empty, tValuesStrs2[0].Replace('_', ','), 0, tValuesStrs2[1].ToInt(), tValuesStrs2[2].ToInt(), 
            //        tValuesStrs2[3].ToInt(), tValuesStrs2[4].ToInt(), tValuesStrs2[5].ToInt(), tValuesStrs2[6].ToInt()));
            //}
            return mMainRolePropertyList;
        }
    }

    private FighterConfigDto GetMainCharactor(int charactorId)
    {
        var charactor = DataCache.getDtoByCls<GeneralCharactor>(charactorId) as MainCharactor;
        //mMainRolePropertyList = new List<FighterConfigDto>();
        string[] tValuesStrs;
        tValuesStrs = charactor.battleTest.Split('|');
        var fighterConfigDto = DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto(0, 0, 0, 0, string.Empty,
            tValuesStrs[0].Replace('_', ','),
            0, tValuesStrs[1].ToInt(), tValuesStrs[2].ToInt(), tValuesStrs[3].ToInt(), tValuesStrs[4].ToInt(),
            tValuesStrs[5].ToInt(), tValuesStrs[7].ToInt(), tValuesStrs[6].ToInt());
        return fighterConfigDto;
    }

    //人物类型VS类型值
    private Dictionary<string,GeneralCharactor.CharactorType> mCharacterTypeDic = null;

    public Dictionary<string,GeneralCharactor.CharactorType> CharacterTypeDic
    {
        get
        { 
            if (null == mCharacterTypeDic)
            {
                mCharacterTypeDic = new Dictionary<string, GeneralCharactor.CharactorType>()
                { 
                    { "玩家",GeneralCharactor.CharactorType.MainCharactor }, { "伙伴",GeneralCharactor.CharactorType.Crew },
                    { "宠物",GeneralCharactor.CharactorType.Pet }, { "怪物",GeneralCharactor.CharactorType.Monster }
                };
            }
            return mCharacterTypeDic;
        }
    }

    //人物类型VS类型值
    private Dictionary<string,int> mCharacterNameDic = null;

    public Dictionary<string,int> CharacterNameDic
    {
        get
        { 
            if (null == mCharacterNameDic)
            {
                mCharacterNameDic = new Dictionary<string, int>();
                List<GeneralCharactor> tGeneralCharactorList = DataCache.getArrayByCls<GeneralCharactor>();
                if (null == tGeneralCharactorList)
                    return null;
                tGeneralCharactorList.ForEach<GeneralCharactor>((pGeneralCharactor) =>
                    {
                        if (mCharacterNameDic.ContainsKey(pGeneralCharactor.name))
                            mCharacterNameDic[pGeneralCharactor.name] = pGeneralCharactor.id;
                        else
                            mCharacterNameDic.Add(pGeneralCharactor.name, pGeneralCharactor.id);
                    });
            }
            return mCharacterNameDic;
        }
    }

    #endregion

    #region initial and dispose

    /// <summary>
    /// 切换角色或帐号时，会自动调用本方法清理 Model 数据。其他时候如需要请手动调用。
    /// </summary>
    public void Dispose()
    {
        
    }

    #endregion

    #region Events


    #endregion

    #region 下拉框

    public int GetMonsterIdByJobDesc(string pJobDesc)
    {
        if (string.IsNullOrEmpty(pJobDesc))
        {
            GameDebuger.LogError("GetMonsterIdByJob failed , pJobDesc IsNullOrEmpty !");
            return 0;
        }
        var tId = 0;
        Monster tMonster = null;
        if (MonsterJobIdDic.TryGetValue(pJobDesc, out tMonster))
            tId = tMonster.id;
        else
            GameDebuger.LogError(string.Format("GetMonsterIdByJob failed , pJobDesc:{0}", pJobDesc));
        return tId;
    }

    public string GetJobDescKeyByID(FighterConfigDto pFighterConfigDto)
    {
        if ((GeneralCharactor.CharactorType)pFighterConfigDto.characterType == GeneralCharactor.CharactorType.Monster)
        {
            var tMonster = DataCache.getDtoByCls<Monster>((int)pFighterConfigDto.id);
            if (null != tMonster)
                return GetJobDescKey(tMonster.id, tMonster.shortDesc);
        }
        else
        {
            var tGeneralCharactor = DataCache.getDtoByCls<GeneralCharactor>(pFighterConfigDto.characterId);
            if (null != tGeneralCharactor)
                return tGeneralCharactor.name;
        }
        return "未知";
    }

    public string GetJobDescKey(int pMonsterId, string pJodDesc)
    {
        return string.Format("{0}_{1}", pMonsterId, pJodDesc);
    }

    public bool GetMonsterIDListByConfigId(string pConfigKey, out List<int> pEnemyIDList, out List<int> pFriendIDList)
    {
        pEnemyIDList = null;
        pFriendIDList = null;
        if (string.IsNullOrEmpty(pConfigKey))
            return false;
        Dictionary<int,List<int>> tAllIDList;
        if (!BattleConfigDic.TryGetValue(pConfigKey, out tAllIDList))
            return false;
        if (null == tAllIDList || tAllIDList.Count <= 0)
            return false;
        pEnemyIDList = tAllIDList[0];
        pFriendIDList = tAllIDList[1];
        return true;
    }

    public FighterConfigDto GetFighterConfigDtoByCharacterId(int pCharacterId)
    {
        FighterConfigDto tFighterConfigDto = null;
        try
        {
            tFighterConfigDto = GetMainCharactor(pCharacterId);
        }
        catch (Exception e)
        {
            GameDebuger.LogError(string.Format("GetFighterConfigDtoByCharacterId failed , pCharacterId:{0} , e:{1}", pCharacterId, e));
        }
        return tFighterConfigDto;
    }

    public GeneralCharactor.CharactorType GetCharacterTypeByTypeDesc(string pCharacterTypeDesc)
    {
        if (string.IsNullOrEmpty(pCharacterTypeDesc))
        {
            GameDebuger.LogError("GetCharacterTypeByTypeDesc failed , pCharacterTypeDesc IsNullOrEmpty !");
            return 0;
        }
        var tType = GeneralCharactor.CharactorType.Unknown;
        if (!CharacterTypeDic.TryGetValue(pCharacterTypeDesc, out tType))
            GameDebuger.LogError(string.Format("GetCharacterTypeByTypeDesc failed , pCharacterTypeDesc:{0}", pCharacterTypeDesc));
        return tType;
    }

    public string GetCharacterTypeDescByTypeID(GeneralCharactor.CharactorType pCharacterType)
    {
        Dictionary<string,GeneralCharactor.CharactorType>.Enumerator tEnum = CharacterTypeDic.GetEnumerator();
        while (tEnum.MoveNext())
        {
            if (tEnum.Current.Value == pCharacterType)
                return tEnum.Current.Key;
        }
        return "未知";
    }

    public int GetCharacterIdByCharacterName(string pCharacterName)
    {
        List<GeneralCharactor> tGeneralCharactorList = DataCache.getArrayByCls<GeneralCharactor>();
        GeneralCharactor tGeneralCharactor = null;
        for (int tCounter = 0; tCounter < tGeneralCharactorList.Count; tCounter++)
        {
            tGeneralCharactor = tGeneralCharactorList[tCounter];
            if (tGeneralCharactor.name == pCharacterName)
                return tGeneralCharactor.id;
        }
        return 0;
    }

    #endregion

    public bool IsPlayerCountMaxForRequest(UIGrid pUIGridA, UIGrid pUIGridB, int pAddCount = 1, bool pShowTip = true)
    {
        int tTargetCount = pUIGridA.transform.childCount + pUIGridB.transform.childCount;
        tTargetCount += pAddCount;
        if (tTargetCount > MAX_PLAYER)
        {
            if (pShowTip)
                TipManager.AddTip(string.Format("由配置界面进入战斗的敌我总数不得超过{0}", MAX_PLAYER.ToString().WrapColor(ColorConstantV3.Color_Red2)));
            return true;
        }
        return false;
    }
}

#region Enum and struct
public enum BATTLE_DEMO_MODEL
{
    Battle = 0,
    Watch = 1
}
#endregion