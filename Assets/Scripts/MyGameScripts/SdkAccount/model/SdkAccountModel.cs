// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Xianjian
// Created : 9/26/2016 11:39:52 AM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using SdkAccountDto;

/// <summary>
/// This is the model class for module AccountSDK, use this to manage the data of module AccountSDK.
/// @Xianjian in 9/26/2016 11:39:52 AM
/// </summary>
public class SdkAccountModel
{
    private static readonly SdkAccountModel _instance = new SdkAccountModel();

    public static SdkAccountModel Instance
    {
        get { return _instance; }
    }

    public SdkAccountModel()
	{
    }

    //验证码时间限制
    public const float CODE_LIMIT_SEC = 100f;
    public const string LOGINCACHE_KEY = "logincache";


    private AccountDto _loginAccount;
    public AccountDto loginAccount
    {
        get { return _loginAccount; }
    }
    private List<AccountDto> _accountList;
    public List<AccountDto> GetLastAccount()
    {
        if (_accountList != null) return _accountList;

        _accountList = new List<AccountDto>();
        string sCache = PlayerPrefs.GetString(LOGINCACHE_KEY);

        //sCache = "0;test1;sdgsefasdfdsge|1;test2;cvxbvsfadsf|2;test3;sdgfdsdsfa";
        if (string.IsNullOrEmpty(sCache)) return _accountList;

        string[] sAccountList = sCache.Split('|');
        foreach(string sInfo in sAccountList)
        {
            string[] sList = sInfo.Split(';');
            if (sList.Length != 3) continue;

            AccountDto dto = new AccountDto();
            dto.type = (AccountDto.AccountType)StringHelper.ToInt(sList[0]);
            dto.name = sList[1];
            dto.password = sList[2];
            _accountList.Add(dto);
        }
        return _accountList;
    }

    public void SaveAccount(AccountDto dto)
    {
        _loginAccount = dto;
        foreach (AccountDto account in _accountList)
        {
            if(account.type == dto.type)
            {
                _accountList.Remove(account);
                break;
            }
        }
        _accountList.Insert(0, dto);

        string sSave = "";
        for(int i=0; i < _accountList.Count; ++i)
        {
            AccountDto account = _accountList[i];
            sSave += string.Format("{0};{1};{2}", (int)account.type, account.name, account.password);
            if (i != _accountList.Count - 1) sSave += "|";
        }
        PlayerPrefs.SetString(LOGINCACHE_KEY, sSave);
    }

    public void DoLogin(string account, string password, AccountDto.AccountType type)
    {
        SdkService.RequestLogin(account, password, type, OnLoginSuccess);
    }

    public void OnLoginSuccess(AccountDto dto)
    {
        SaveAccount(dto);

        SdkProxyModule.ClearModule();
        SdkProxyModule.SetModuleType(SdkModuleMgr.ModuleType.gameEnter);

        bool bGuest = (dto.type == AccountDto.AccountType.device);
        SdkLoginMessage.Instance.Sdk2CLogin(bGuest, dto.seesionDto.sid);
    }

    //sdk层退出账号
    public void Logout()
    {
        SdkLoginMessage.Instance.Sdk2CLogout();
        //_loginAccount = null;
        //SdkProxyModule.ClearModule();
        //SdkProxyModule.OpenLogin();
    }

    //游戏层通知退出账号
    public void Game2Logout()
    {
        _loginAccount = null;
        SdkProxyModule.ClearModule();
        SdkProxyModule.OpenLogin();
    }

    /// <summary>
    /// 是否处于登录状态
    /// </summary>
    /// <returns></returns>
    public bool IsLogin()
    {
        return _loginAccount != null;
    }

    public string GetSid()
    {
        if (_loginAccount == null) return "";

        return _loginAccount.seesionDto.sid;
    }

    public static bool CheckAccount(string account)
    {
        return true;
    }

    public static bool CheckPhone(string phone)
    {
        if(string.IsNullOrEmpty(phone) || phone.Length != 11 || !IsDigit(phone))
        {
            SdkProxyModule.ShowTips("请输入正确的手机号");
            return false;
        }

        return true;
    }

    public static bool CheckEmail(string email)
    {
        if (string.IsNullOrEmpty(email))
        {
            SdkProxyModule.ShowTips("请输入正确的邮箱");
            return false;
        }
        return true;
    }

    public static bool CheckPassword(string password1, string password2)
    {
        if (string.IsNullOrEmpty(password1))
        {
            SdkProxyModule.ShowTips("密码不能为空");
            return false;
        }

        if(password1 != password2)
        {
            SdkProxyModule.ShowTips("两次密码不一致");
            return false;
        }

        //密码其它规则交给服务端

        return true;
    }

    //检测验证码
    public static bool CheckVerifyCode(string code)
    {
        if (string.IsNullOrEmpty(code))
        {
            SdkProxyModule.ShowTips("验证码不能为空");
            return false;
        }
        return true;
    }

    public static bool IsDigit(string str)
    {
        return Regex.IsMatch(str, @"^[0-9]+$");
    }
}