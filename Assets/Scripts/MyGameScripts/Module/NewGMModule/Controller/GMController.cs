// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : qian.xu
// Created : 6/27/2017 11:49:35 AM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System.Diagnostics;
using GamePlot;

/// <summary>
/// This is the controller class for module GM, use this to control the ui or view , such as it's init , update or dispose.
/// @qian.xu in 6/27/2017 11:49:35 AM
/// </summary>
public class GMController : MonoViewController<NewGMView>
{
    private enum TabBtnWidth
    {
        Default = 122,RecordTab = 148
    };

    private static int mMainViewSelectBtnIndex = 0;
    private int mNextViewSelectBtnIndex = 0;
    private GMData[] mGMBtns;

    private static Vector3[] GMPosition = new Vector3[2] { Vector3.left*150f,Vector3.zero };
    private static bool IsOpenGMExpand = false;
    private string mInputContent = "";

    private bool IsRepeat = true;
    private List<GMRecordData> mRecordPrefsExt;

    private Dictionary<string, List<TabBtnWidgetController>> ViewButtonsController = new Dictionary<string, List<TabBtnWidgetController>>();

    private LimitedCycleMove mMainBtnController;
    private List<TabBtnWidgetController> mMainCells;

    private LimitedCycleMove mRecordBtnController;
    private List<TabBtnWidgetController> mRecordCells;

    string[] GMModuleName;
    public Transform ViewTransform
    {
        get
        {
            return View.transform;
        }
    }
    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
	protected override void AfterInitView()
    {
        //Stopwatch sw = new Stopwatch();
        //sw.Start();

        //Profiler.BeginSample("QIAN==============================>>>");
        InitViewContent();
        NextBtnsViewInit(mMainViewSelectBtnIndex);
        RecordInit();
       //  Profiler.EndSample();

        SetGMPosition(false);

        //sw.Stop();
        //GameDebuger.LogError("花费时间：" + sw.ElapsedMilliseconds);
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        //主界面
        EventDelegate.Set(View.MarkBtn_UIButton.onClick, MarkBtnOnClick);
        EventDelegate.Set(View.RepeatBtn_UIButton.onClick, RepeatBtnOnClick);
        EventDelegate.Set(View.CleanRecordBtn_UIButton.onClick, CleanRecord);
        EventDelegate.Set(View.MainCloseBtn_UIButton.onClick, CloseView);
        EventDelegate.Set(View.RecordCloseBtn_UIButton.onClick, CloseRecordView);
        EventDelegate.Set(View.GMExpandCloseBtn_UIButton.onClick, ()=>{ SetGMPosition(false); });
        EventDelegate.Set(View.RecordOpenBtn_UIButton.onClick, OpenRecordView);
        EventDelegate.Set(View.GMExpandOpenBtn_UIButton.onClick, () => { SetGMPosition(true); });
        
        //界面扩展
        /*新剧情*/
        EventDelegate.Set(View.PlotPlayerBtn_UIButton.onClick, OnPlotPlayBtnClick);
        EventDelegate.Set(View.GuidePlayBtn_UIButton.onClick, OnGuidePlayBtnClick);
        EventDelegate.Set(View.CleanGuidePlayBtn_UIButton.onClick, OnCleanUpGuideInfo);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        WirteRecord();

        foreach(List<TabBtnWidgetController> Value in ViewButtonsController.Values)
        {
            for (int i = 0; i < Value.Count; i++)
                Value[i].Show();
        }

        mMainBtnController.Dispose();
        mRecordBtnController.Dispose();
    }
    #endregion

    #region 界面控制

    #region 主按钮视图

    private void InitViewContent()
    {
        Dictionary<int, string> GMModules = ModelManager.GM.GMModules;
        int GMModuleCount = GMModules.Count;

        GMModuleName = new string[GMModuleCount];
        for (int i = 0; i < GMModuleCount; i++)
            GMModuleName[i] = GMModules[i];
        
         mMainBtnController = new LimitedCycleMove();
        int CreateCount = mMainBtnController.InitData(GMModuleCount, View.MainBtnsScrollView_UIScrollView.panel, View.MainBtnsScrollView_UIScrollView, 134, 62, 1);
        mMainCells = new List<TabBtnWidgetController>();
        List<GameObject> gos = new List<GameObject>();
        TabBtnWidgetController con;
        for (int index = 0; index < CreateCount; index++)
        {
            con = AddCachedChild<TabBtnWidgetController, TabBtnWidget>(View.MainBtnsGrid, TabbtnPrefabPath.TabBtnWidget_H3_SHORT.ToString());

            UIDragScrollView dragSV = con.gameObject.AddComponent<UIDragScrollView>();
            dragSV.scrollView = View.MainBtnsScrollView_UIScrollView;

            ResetRepeatBtnWidth(ref con);

            gos.Add(con.gameObject);
            mMainCells.Add(con);
        }
        mMainBtnController.InitCells(ref gos, MainCellUpdate, Vector3.zero, View.MainBtnsGrid_BoxCollider);
        SelectMainViewButton(0);
    }

    private void MainCellUpdate(GameObject go,int cellIndex,int dataIndex)
    {
        UIEventTrigger trigger = mMainCells[cellIndex].gameObject.GetMissingComponent<UIEventTrigger>();
        EventDelegate.Set(trigger.onClick, delegate
        {
            MainBtnsOnClick(dataIndex);
        });
        
        mMainCells[cellIndex].SetBtnLbl(GMModuleName[dataIndex]);
    }
    
    private void MainBtnsOnClick(int index)
    {
        SelectMainViewButton(index);
        NextBtnsViewInit(mMainViewSelectBtnIndex);

    }

    private void GMDataBtnOnClick(int index)
    {
        NextBtnsOnclickCallBack(mGMBtns[index].type)(index);
    }

    private System.Action<int> NextBtnsOnclickCallBack(int type)
    { 
        if (type == 0)
        {
            return GMTextDataOnClick; 
        }
        else
        {
            return GMFunctionDataOnClick;
        }
    }

    private void GMTextDataOnClick(int index)
    {
        mNextViewSelectBtnIndex = index;
        GMData GM = mGMBtns[index];
        string text = !string.IsNullOrEmpty( GM.param)? GM.param : GM.fun;
        UpdateGmText(text, GM.tip);
    }

    private void GMFunctionDataOnClick(int index)
    {
        mNextViewSelectBtnIndex = index;
        GMData GM = mGMBtns[index];
        TipManager.AddTip("执行命令："+GM.name);
        UpdateGmTip(GM.tip);
        AddRecord(index);
        GM.callback();
    }

    #endregion

    #region 次级按钮视图

    private void NextBtnsViewInit(int index)
    {
        mGMBtns = ModelManager.GM.GetGMDatas(index);
        int GMBtnLength = mGMBtns.Length;

        string[] Names = new string[GMBtnLength];
        for (int i = 0; i < GMBtnLength; i++)
            Names[i] = mGMBtns[i].name;

        ControllerViewButtonsShow(View.NextBtnsGrid_Transform, ref View.NextBtnsScrollView_UIScrollView, ref Names, GMDataBtnOnClick, ref View.NextBtnsGrid_UIGrid);
        View.NextBtnsScrollView_UIScrollView.ResetPosition();

        if (mGMBtns[0].type == 0)
            UpdateGmTip("该模块点击后呈现命令行");
        else
            UpdateGmTip("该模块点击后就执行");

        SetNextGridBoxSize(Names.Length);
    }

    private void SetNextGridBoxSize(int count)
    {
        int HCount = count / 4<4? 4: count / 4;
        float w = View.NextBtnsGrid_UIGrid.cellWidth * 4 +20;
        float h = View.NextBtnsGrid_UIGrid.cellHeight * HCount + 50;
        Vector3 Size = new Vector3(w, h, 0);
        View.NextBtnsGrid_BoxCollider.size = Size;
        View.NextBtnsGrid_BoxCollider.center = new Vector3(w / 2 - 75, -h / 2 + 23, 0);
    }

    #endregion

    #region 控制隐藏显示

    private void ControllerViewButtonsShow(Transform parent, ref UIScrollView scrollView, ref string[] Datas, System.Action<int> callback, ref UIGrid UIGrid, TabBtnWidth width = TabBtnWidth.Default)
    {
        int ShowCount = Datas.Length;
        
        if(!ViewButtonsController.ContainsKey(parent.name))
        {
            ViewButtonsController.Add(parent.name, new List<TabBtnWidgetController>());
        }

        List<TabBtnWidgetController> list = ViewButtonsController[parent.name];
        GameObject GoParent = parent.gameObject;
        if (parent.childCount == 0)
        {
            AddTabBtns(ShowCount, GoParent, Datas, callback, ref scrollView, ref list,ref UIGrid, width);
        }
        else
        {
            TabBtnWidgetController con = null;
            int OwnCount = parent.childCount;
            for (int i = 0; i < ShowCount; i++)
            {
                if (i < OwnCount)
                {
                    con = list[i];
                    con.Show();
                    con.SetBtnLbl(Datas[i]);
                }
                else
                {
                    con = AddTabBtn(GoParent, i, Datas[i], callback, ref scrollView, width);
                    list.Add(con);
                }
            }
            for (int i = OwnCount - ShowCount -1; i >= 0; i--)
            {
                list[ShowCount + i].Hide();
            }

            UIGrid.Reposition();
        }
        
    }

    private void HideAllViewButtonsShow(string ParentName)
    {
        if (ViewButtonsController.ContainsKey(ParentName))
        {
            List<TabBtnWidgetController> cons = ViewButtonsController[ParentName];
            for(int i=0,count = cons.Count; i<count;i++ )
            {
                cons[i].Hide();
            }
        }
    }

    private void SetViewButtonName(string ParentName,string Name,int Index = 0)
    {
        if (ViewButtonsController.ContainsKey(ParentName))
        {
            ViewButtonsController[ParentName][Index].SetBtnLbl(Name);
        }
    }

    private void AddViewButton(Transform parent, ref UIScrollView scrollView, ref string Name, System.Action<int> callback, ref UIGrid UIGrid, TabBtnWidth width = TabBtnWidth.Default)
    {
        bool IsFirst = true;
        string ParentName = parent.name;
        if (ViewButtonsController.ContainsKey(ParentName))
        {
            if (ViewButtonsController[ParentName].Count != 0)
                IsFirst = false;
        }
        else
            ViewButtonsController.Add(ParentName, new List<TabBtnWidgetController>());

        if (mRecordPrefsExt.Count > 20)
        {
            int Index = ViewButtonsController.Count - 1;
            SetViewButtonName(ParentName, Name, Index);
            ViewButtonsController[ParentName][Index].transform.SetAsFirstSibling();
            UIGrid.Reposition();
        }
        else
        {
            TabBtnWidgetController con = AddTabBtn(parent.gameObject, ViewButtonsController[ParentName].Count, Name, callback, ref scrollView, width);
            if (IsFirst)
            {
                ViewButtonsController[ParentName].Add(con);
                UIGrid.Reposition();
            }
            else
            {
                con.SetBtnLbl(Name);
                ViewButtonsController[ParentName].Add(con);
            }
        }
    }

    private void SelectMainViewButton(int Index)
    {
       // mViewButtonsController[View.MainBtnsGrid_UIGrid.name][mMainViewSelectBtnIndex].SetSelected(false);
        mMainViewSelectBtnIndex = Index;
       // mViewButtonsController[View.MainBtnsGrid_UIGrid.name][mMainViewSelectBtnIndex].SetSelected(true);
    }

    #endregion

    #region 添加按钮

    private void AddTabBtns(int count,
        GameObject partent, string[] names, System.Action<int> selectedCallback, ref UIScrollView ScrollView,
        ref List<TabBtnWidgetController> List, ref UIGrid UIGird, TabBtnWidth width = TabBtnWidth.Default)
    {
        if (names.Length != count)
        {
            GameDebuger.LogError("传入的名字数量和生成数量不相同！");
            return;
        }

        TabBtnWidgetController btnCon = null;
        UIDragScrollView dragSV = null;

        if (List == null)
            List = new List<TabBtnWidgetController>();

        List<TabBtnWidgetController> list = List;
        UIScrollView scrollView = ScrollView;
        UIGrid gird = UIGird;

        int NewLint = partent.name == View.NextBtnsGrid_Transform.name ? count : 7;
        for (int i = 0; i < count && i < NewLint; i++)
        {
            AddTabBtn(ref btnCon, ref dragSV, partent, i, names[i], selectedCallback, ref scrollView, width);
            list.Add(btnCon);
        }
        gird.Reposition();

        if (count > NewLint)
        {
            int index = NewLint;
            AddOrResetCDTask("GMButtonInit_" + partent.name, 0.6f, (e) =>
             {
                 for (int i = 0; i <4; i++)
                 {
                     if (index == count)
                         break;

                     AddTabBtn(ref btnCon, ref dragSV, partent, index, names[index], selectedCallback, ref scrollView, width);
                     btnCon.Hide();
                     list.Add(btnCon);
                     index += 1;
                 }
             }, () =>
               {
                   for (int i = NewLint; i < count; i++)
                       list[i].Show();

                   gird.Reposition();
               }, 0.1f);
        }

    }


    private TabBtnWidgetController AddTabBtn(GameObject partent, int index, string btnName, System.Action<int> selectedCallback,ref UIScrollView scrollView, TabBtnWidth width = TabBtnWidth.Default)
    {
        TabBtnWidgetController btnCon = null;
        UIDragScrollView dragSV = null;

        AddTabBtn( ref btnCon, ref dragSV, partent,index,  btnName,selectedCallback, ref scrollView, width);
        return btnCon;
    }

    private void AddTabBtn(ref TabBtnWidgetController btnCon, ref UIDragScrollView dragSV,
       GameObject partent, int index, string btnName, System.Action<int> selectedCallback, ref UIScrollView scrollView,
       TabBtnWidth width = TabBtnWidth.Default)
    {
        btnCon = AddCachedChild<TabBtnWidgetController, TabBtnWidget>(partent, TabbtnPrefabPath.TabBtnWidget_H3_SHORT.ToString());
        
        UIEventTrigger trigger = btnCon.gameObject.GetMissingComponent<UIEventTrigger>();
        EventDelegate.Set(trigger.onClick, delegate
        {
            selectedCallback(index);
        });
        
        btnCon.SetBtnLbl(btnName);

        dragSV = btnCon.gameObject.AddComponent<UIDragScrollView>();
        dragSV.scrollView = scrollView;

        if (width == TabBtnWidth.Default)
            ResetRepeatBtnWidth(ref btnCon);
        else if (width == TabBtnWidth.RecordTab)
            SetRepeatBtnWidth(ref btnCon);
    }
    

    #endregion

    #region 命令

    private void UpdateGmText(string GMContent,string Tip)
    {
        View.InputSprite_UIInput.value = GMContent;
        UpdateGmTip(Tip);
    }

    private void UpdateGmTip( string Tip)
    {
        View.TipLabel_UILabel.text = Tip;
    }

    private void MarkBtnOnClick()
    {
        mInputContent = View.InputSprite_UIInput.value;

        SendGMToService(mInputContent);
    }

    private void SendGMToService(string content)
    {
        if (string.IsNullOrEmpty(content))
            return;

        AddRecord(mInputContent);

        string gmParam = content.Substring(content.IndexOf(" ") + 1);
        string[] paramStrs = gmParam.Split(' ');

        if (!IsSendGMCommand( ref gmParam, ref paramStrs))
            return;

        GameDebuger.Log("GmService: " + content);
        if(content.Contains("local") && gmParam.ToInt() > 0)
        {
            GamePlotManager.Instance.PlayPlot(StringHelper.ToInt(gmParam));
        }
        else
        {
            //ServiceRequestAction.requestServer(Services.Gm_Execute(content), ServiceRequestAction.RequestLockType.NoLock, e => { MartTureGMCommand(ref gmParam, ref paramStrs); });
            ServiceRequestAction.requestServer(Services.Gm_Execute(content), "GM Command", e => { MartTureGMCommand(ref gmParam, ref paramStrs); });    
        }
    }

    private bool IsSendGMCommand(ref string gmParam, ref string[] paramStrs)
    {

        if (mInputContent.StartsWith("#smartguide"))
        {
            int type = StringHelper.ToInt(paramStrs[0]);
            string param = paramStrs[1];
            //SmartGuideManager.Instance.Open(type, param);
            CloseView();
            return false;
        }

        else if (mInputContent.StartsWith("#clear_challenge_cd"))
        {
            //JSTimer.Instance.CancelCd(ArenaModel.REFRESH_TIMER);

            return false;
        }
        else
        {
            return true;    
        }
    }

    private void MartTureGMCommand(ref string gmParam, ref string[] paramStrs)
    {
        //PetPropertyInfo battlePetInfo;
        switch (paramStrs[0])
        {
            case "#reset_challenge":
                GameDebuger.TODO(@"ModelManager.Arena.ResetRemainTimes()");
                break;

            case "#clear_battle_pet_skills":
                GameDebuger.TODO(@"battlePetInfo = ModelManager.Pet.GetBattlePetInfo();
                if (battlePetInfo != null)
                    battlePetInfo.petDto.skillIds.Clear();");
                GameDebuger.TODO(@"");
                
                break;

            case "#add_battle_pet_skill":
                GameDebuger.TODO(@"int newSkillId = StringHelper.ToInt(gmParam);
                battlePetInfo = ModelManager.Pet.GetBattlePetInfo();
                if (battlePetInfo != null)
                    battlePetInfo.petDto.skillIds.Add(newSkillId);");
                break;

            case "#add_potential":
                int potentialCount = gmParam.ToInt();
                ModelManager.Player.GetPlayerPropertyInfo().playerDto.potential += potentialCount;
                ModelManager.Player.CheckPlayerHasPotentialPoint();
                break;

            case "#equip_skill":
                int part = paramStrs[0].ToInt();
                int skillId = paramStrs[1].ToInt();
                GameDebuger.TODO(@" PackItemDto itemDto = ModelManager.Backpack.GetEquipByPartType(part);
                if (itemDto != null)
                {
                    EquipmentExtraDto extraDto = itemDto.extra as EquipmentExtraDto;
                    if (extraDto != null)
                    {
                        if (extraDto.activeSkillIds == null)
                        {
                            extraDto.activeSkillIds = new List<int>();
                        }
                        extraDto.activeSkillIds.Clear();
                        extraDto.activeSkillIds.Add(skillId);
                    }
                }");
               
                Skill skill = DataCache.getDtoByCls<Skill>(skillId);
                TipManager.AddTip("装备部位" + part + " 增加特技 " + skill.name);
                break;

            case "add_challenge_times":
                int count = StringHelper.ToInt(paramStrs[0]);
                GameDebuger.TODO(@"ModelManager.Arena.AddRemainTimes(count);");
                break;

            case "add_challenge_trophy":
                int trophyCount = StringHelper.ToInt(paramStrs[0]);
                GameDebuger.TODO(@"ModelManager.Arena.UpdatePlayerTrophyCount(trophyCount);");
                break;

            case "#clear nextchangefactiontime":
                ModelManager.Player.NextChangeFactionTime = 0;
                break;

            default:
                TipManager.AddTip("GmService: " + View.InputLabel_UILabel.text + " 执行完毕");
                break;
        }
    }

    //批量发送GM指令
    //public void LotSizeSendGMCommand(string commandStr)
    //{
    //    string gmCommand = commandStr;
    //    string gmParam = gmCommand.Substring(gmCommand.IndexOf(" ") + 1);

    //    string[] paramStrs = gmParam.Split(' ');

    //    if (gmCommand.StartsWith("#smartguide"))
    //    {
    //        int type = StringHelper.ToInt(paramStrs[0]);
    //        string param = paramStrs[1];
    //        SmartGuideManager.Instance.Open(type, param);
    //        CloseView();
    //        return;
    //    }

    //    if (gmCommand.StartsWith("#clear_challenge_cd"))
    //    {
    //        JSTimer.Instance.CancelCd(ArenaModel.REFRESH_TIMER);
    //        return;
    //    }

    //    GameDebuger.Log("GmService: " + gmCommand);
    //    ServiceRequestAction.requestServer(GmService.execute(gmCommand), "GM Command", e =>
    //    {
    //        if (gmCommand.StartsWith("#reset_challenge"))
    //        {
    //            ModelManager.Arena.ResetRemainTimes();
    //        }
    //        else if (gmCommand.StartsWith("#clear_battle_pet_skills"))
    //        {
    //            PetPropertyInfo battlePetInfo = ModelManager.Pet.GetBattlePetInfo();
    //            if (battlePetInfo != null)
    //                battlePetInfo.petDto.skillIds.Clear();
    //        }
    //        else if (gmCommand.StartsWith("#add_battle_pet_skill"))
    //        {
    //            int newSkillId = StringHelper.ToInt(gmParam);
    //            PetPropertyInfo battlePetInfo = ModelManager.Pet.GetBattlePetInfo();
    //            if (battlePetInfo != null)
    //                battlePetInfo.petDto.skillIds.Add(newSkillId);
    //        }
    //        else if (gmCommand.StartsWith("#add_potential"))
    //        {
    //            int potentialCount = StringHelper.ToInt(gmParam);
    //            ModelManager.Player.GetPlayerPropertyInfo().playerDto.potential += potentialCount;
    //            ModelManager.Player.CheckPlayerHasPotentialPoint();
    //        }
    //        else if (gmCommand.StartsWith("#equip_skill"))
    //        {
    //            int part = StringHelper.ToInt(paramStrs[0]);
    //            int skillId = StringHelper.ToInt(paramStrs[1]);
    //            PackItemDto itemDto = ModelManager.Backpack.GetEquipByPartType(part);
    //            if (itemDto != null)
    //            {
    //                EquipmentExtraDto extraDto = itemDto.extra as EquipmentExtraDto;
    //                if (extraDto != null)
    //                {
    //                    if (extraDto.activeSkillIds == null)
    //                    {
    //                        extraDto.activeSkillIds = new List<int>();
    //                    }
    //                    extraDto.activeSkillIds.Clear();
    //                    extraDto.activeSkillIds.Add(skillId);
    //                }
    //            }
    //            Skill skill = DataCache.getDtoByCls<Skill>(skillId);
    //            TipManager.AddTip("装备部位" + part + " 增加特技 " + skill.name);
    //        }
    //        else if (gmCommand.StartsWith("#add_challenge_times"))
    //        {
    //            int count = StringHelper.ToInt(paramStrs[0]);
    //            ModelManager.Arena.AddRemainTimes(count);
    //        }
    //        else if (gmCommand.StartsWith("#add_challenge_trophy"))
    //        {
    //            int trophyCount = StringHelper.ToInt(paramStrs[0]);
    //            ModelManager.Arena.UpdatePlayerTrophyCount(trophyCount);
    //        }
    //        else if (gmCommand.StartsWith("#clear nextchangefactiontime"))
    //        {
    //            ModelManager.Player.NextChangeFactionTime = 0;
    //        }
    //        else
    //        {
    //            TipManager.AddTip("GmService: " + View.InputSprite_UIInput.value + " 执行完毕");
    //        }
    //    });
    //}
    #endregion

    #region 点击记录

    private void RecordInit()
    {
        mRecordPrefsExt = ModelManager.GM.ReadRecordPrefs();

        GMRecordData data;
        GMData GMData;
        int RecordPrefsCount = mRecordPrefsExt.Count;
        List<string> mRecordName = new List<string>();
        for (int i = 0; i < RecordPrefsCount; i++)
        {
            data = mRecordPrefsExt[i];
            if (data.Type == 0)
            {
                GMData = ModelManager.GM.GetGMDataFromGMRecordData(data);
                mRecordName.Add(GMData.name);
            }
            else
                mRecordName.Add(data.data);
        }

        mRecordBtnController = new LimitedCycleMove();
        int CreateCount = mRecordBtnController.InitData(RecordPrefsCount, View.RecordScrollView_UIScrollView.panel, View.RecordScrollView_UIScrollView, 184, 62, 1);
        mRecordCells = new List<TabBtnWidgetController>();
        List<GameObject> gos = new List<GameObject>();
        TabBtnWidgetController con;
        for (int index = 0; index < CreateCount; index++)
        {
            con = AddCachedChild<TabBtnWidgetController, TabBtnWidget>(View.RecordGrid, TabbtnPrefabPath.TabBtnWidget_H3_SHORT.ToString());

            UIDragScrollView dragSV = con.gameObject.AddComponent<UIDragScrollView>();
            dragSV.scrollView = View.RecordScrollView_UIScrollView;

            SetRepeatBtnWidth(ref con);

            gos.Add(con.gameObject);
            mRecordCells.Add(con);
        }
        mRecordBtnController.InitCells(ref gos, RecordCellSetup, Vector3.zero,View.RecordGrid_BoxCollider);
    }

    private void RecordCellSetup(GameObject go,int cellIndex,int dataIndex)
    {
        UIEventTrigger trigger = mRecordCells[cellIndex].gameObject.GetMissingComponent<UIEventTrigger>();
        EventDelegate.Set(trigger.onClick, delegate
        {
            SelectRecordBtn(dataIndex);
        });
        
        if (mRecordPrefsExt[dataIndex].Type == 0)
        {
            GMData GMData = ModelManager.GM.GetGMDataFromGMRecordData(mRecordPrefsExt[dataIndex]);
            mRecordCells[cellIndex].SetBtnLbl(GMData.name);
        }else
        {
            mRecordCells[cellIndex].SetBtnLbl(mRecordPrefsExt[dataIndex].data);
        }
    }

    private void AddRecord(int DataIndex)
    {
        GMData data = mGMBtns[DataIndex];
        if (data.type == 0)
        {
            AddRecord(data.GetGMTextData());
        }
        else
        {
            GMRecordData RecordData = new GMRecordData(ModelManager.GM.GMModules[mMainViewSelectBtnIndex], DataIndex);
            KeepRecord(RecordData);
        }
    }

    private void AddRecord(string Data)
    {
        GMRecordData RecordData = new GMRecordData(Data);
        KeepRecord(RecordData);
    }

    private void KeepRecord(GMRecordData data)
    {
        bool IsStrRepeat = false;
        int RecordPrefsExtCount = mRecordPrefsExt.Count;
        if (RecordPrefsExtCount != 0)
            IsStrRepeat = GMRecordData.IsRecordDataRepeat(data, mRecordPrefsExt[0]);
        
        if (IsStrRepeat && IsRepeat)
            mRecordPrefsExt[0] = data;
        else
            mRecordPrefsExt.Insert(0,data);
        
        if ((RecordPrefsExtCount + 1) > 20)
            mRecordPrefsExt.RemoveRange(0, 1);
        
      //  WirteRecord(0, data);

        mRecordBtnController.UpdateDataCount(mRecordPrefsExt.Count);
    }

    public void WirteRecord(int Index,GMRecordData data)
    {
        ModelManager.GM.WriteRecordPrefs(Index,data);
    }

    public void WirteRecord()
    {
        ModelManager.GM.WriteRecordPrefs(mRecordPrefsExt);
    }

    private void CleanRecord()
    {
        ModelManager.GM.CleanRecordPrefs();
        mRecordPrefsExt.Clear();
        TipManager.AddTip("执行记录数据已被清除！");

        // HideAllViewButtonsShow(View.RecordGrid_Transform.name);

        mRecordBtnController.UpdateDataCount(0,true);
    }

    private void SelectRecordBtn(int index)
    {
        GMRecordData data = mRecordPrefsExt[index];
        if (data.Type == 0)
        {
            ModelManager.GM.GetGMDataFromGMRecordData(data).callback();
        }
        else
        {
            UpdateGmText(data.data, "无");
        }
    }

    private void RepeatBtnOnClick()
    {
        IsRepeat = !IsRepeat;
        View.RepeatTipLabel_UILabel.text = IsRepeat ? "开启" : "关闭";
    }

    private void SetRepeatBtnWidth(ref TabBtnWidgetController con)
    {
        int Width = (int)TabBtnWidth.RecordTab;
        
//        con.View.btnLbl_UILabel.width = Width - 16;
        con.transform.SetAsFirstSibling();
    }

    private void ResetRepeatBtnWidth(ref TabBtnWidgetController con)
    {
        return;
        int Width = (int)TabBtnWidth.Default;
        
        con.View.btnLbl_UILabel.width = Width - 8;
    }
    #endregion

    #region 界面按钮

    private void SetGMPosition(bool b)
    {
        IsOpenGMExpand = b;
        if (IsOpenGMExpand)
        {
            View.GMPosition_Transform.localPosition = GMPosition[1];
            OpenGMExplaneView();
        }
        else
        {
            View.GMPosition_Transform.localPosition = GMPosition[0];
            CloseGMExplaneView();
        }
    }

    private void CloseView()
    {
        UIModuleManager.Instance.CloseModule(NewGMView.NAME);
    }

    private void CloseRecordView()
    {
        View.Record_UIPanel.alpha = 0;
    }

    private void CloseGMExplaneView()
    {
        View.GMExpand_UIPanel.alpha = 0;
    }

    private void OpenRecordView()
    {
        View.Record_UIPanel.alpha =1;
    }

    private void OpenGMExplaneView()
    {
        View.GMExpand_UIPanel.alpha = 1;
    }
    

    #endregion

    #endregion

    #region 界面扩展

    #region 新剧情
    private void OnPlotPlayBtnClick()
    {
        if (string.IsNullOrEmpty(View.PlotPlayerInput_UIInput.value))
        {
            return;
        }

        int plotId = 0;
        if (int.TryParse(View.PlotPlayerInput_UIInput.value, out plotId))
        {
            GamePlotManager.Instance.PlayPlot(plotId);
            CloseView();
        }
    }

    private void OnGuidePlayBtnClick()
    {
        if (string.IsNullOrEmpty(View.PlotPlayerInput_UIInput.value))
            return;

        int guideId = 0;
        if (int.TryParse(View.PlotPlayerInput_UIInput.value, out guideId))
        {
            //NewBieGuideManager.Instance.ActiveGuide(guideId);
            TipManager.AddTip("还没有这个功能哦！");
            CloseView();
        }
    }

    private void OnCleanUpGuideInfo()
    {
        //NewBieGuideManager.Instance.CleanUpGuideInfo();
        TipManager.AddTip("清除引导记录成功");
    }
    #endregion

    #endregion
}
