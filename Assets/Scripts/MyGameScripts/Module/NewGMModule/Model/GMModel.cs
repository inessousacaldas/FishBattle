// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : qian.xu
// Created : 6/27/2017 11:49:35 AM
// Desc : Auto generated by MarsZ. update this if need.
// **********************************************************************

using AppDto;
using AppServices;
using System.Collections.Generic;
using AssetPipeline;
using UnityEngine;
using System.IO;

/// <summary>
/// This is the model class for module GM, use this to manage the data of module GM.</p>
/// Use this in ModelManager 
/// DO NOT USE THIS DIRECTLY.
/// @qian.xu in 6/27/2017 11:49:35 AM
/// </summary> 

public class GMData
{
    public string name;
    //名字
    public string tip;
    //提示
    public int type;
    //下面两种类型

    /* GM指令类型 - 0*/
    public string param;
    //服务端指令
    public string fun;
    //本地指令

    /*调用函数类型 - 1*/
    public System.Action callback;
    //函数
    

    public GMData(string Name, string Param, string Tip = "无", string Fun = "")
    {
        name = Name;
        param = Param;
        fun = Fun;
        tip = Tip;
        type = 0;
        callback = null;
    }

    public GMData(string Name, System.Action CallBack, string Tip = "无")
    {
        name = Name;
        callback = CallBack;
        tip = Tip;
        type = 1;
        param = null;
        fun = null;
    }

    public string GetGMTextData()
    {
        return type == 0 ? (!string.IsNullOrEmpty(param) ? param : fun) : null;
    }
}

public class GMRecordData
{
    /*数据有存储的类型 - 0*/
    public string ModuleName;
    //模块名字
    public int DataIndex;
    //数据位置

    /*数据没有存储的类型 - 1*/
    public string data;
    //数据

    private int type;
    //上面两种类型
    public int Type
    {
        get
        {
            return type;
        }
    }


    public GMRecordData(string Module, int Index)
    {
        ModuleName = Module;
        DataIndex = Index;
        type = 0;
        data = null;
    }

    public GMRecordData(string Data)
    {
        data = Data;
        type = 1;
        ModuleName = null;
        DataIndex = -1;
    }

    public override string ToString()
    {
        string Str = type + ",";
        if (type == 0)
            Str += ModuleName + "," + DataIndex;
        else
            Str += data;
        return Str;
    }

    public static GMRecordData StringToGMRecordData(string Str)
    {
        string[] paramStrs = Str.Split(',');

        if (StringHelper.ToInt(paramStrs[0]) == 0)
        {
            GMRecordData RecordDate = new GMRecordData(paramStrs[1], StringHelper.ToInt(paramStrs[2]));
            return ModelManager.GM.CanGMRecordDataToGMData(RecordDate) ? RecordDate : null;
        }
        else
            return new GMRecordData(paramStrs[1]);
    }

    public static bool IsRecordDataRepeat(GMRecordData data1, GMRecordData data2)
    {
        if (data1.type == data2.type)
        {
            if (data1.type == 0)
            {
                if (data1.ModuleName == data2.ModuleName && data1.DataIndex == data2.DataIndex)
                    return true;
            }
            else
            {
                string[] paramStrs1 = data1.data.Split(' ');
                string[] paramStrs2 = data2.data.Split(' ');
                if (paramStrs1[0] == paramStrs2[0])
                    return true;
            }
        }
        return false;
    }

}




public class GMModel : IModuleModel
{
    #region initial and dispose

    /// <summary>
    /// 如进入游戏后需要获取初始化数据，请把本方法放于 ModelManager 中。
    /// </summary>
    /// <param name="pAfterLoginDto">P after login dto.</param>

    /// <summary>
    /// 切换角色或帐号时，会自动调用本方法清理 Model 数据。其他时候如需要请手动调用。
    /// </summary>
    public void Dispose()
    {
    }

    #endregion

    private static Dictionary<int, string> mGMModules;
    private static Dictionary<string, GMData[]> mGMData;

    private int MaxRecordCount = 20;
    private const string PrafsName = "GMRecord_";

    #region 获取数据

    public Dictionary<int, string> GMModules
    {
        get
        {
            if (mGMModules == null)
                Init();
            return mGMModules;
        }
    }

    private Dictionary<string, GMData[]> GMData
    {
        get
        {
            if (mGMData == null)
                Init();
            return mGMData;
        }
    }


    public GMData[] GetGMDatas(int index)
    {
        string name = GMModules[index];
        return GetGMDatas(name);
    }

    public GMData[] GetGMDatas(string moduleName)
    {
        if (GMData.ContainsKey(moduleName))
            return GMData[moduleName];

        GameDebuger.LogError("名字不存在，无法寻找到对应的GM模块信息");
        return null;
    }

    public bool CanGMRecordDataToGMData(GMRecordData RecordData)
    {
        if (RecordData.Type == 1)
        {
            GameDebuger.LogError("该类型不能使用该函数获取数据");
            return false;
        }

        GMData[] Datas = GetGMDatas(RecordData.ModuleName);
        if (Datas.Length <= RecordData.DataIndex)
            return false;

        return true;
    }

    public GMData GetGMDataFromGMRecordData(GMRecordData RecordData)
    {
        if (RecordData.Type == 1)
        {
            GameDebuger.LogError("该类型不能使用该函数获取数据");
            return null;
        }

        if (!CanGMRecordDataToGMData(RecordData))
            return null;
        
        return  GetGMDatas(RecordData.ModuleName)[RecordData.DataIndex];
        ;
    }

    #endregion

    #region 存储执行数据

    public List<GMRecordData> ReadRecordPrefs()
    {
        List<GMRecordData> GMData = new List<GMRecordData>();
        GMRecordData data;
        string value;
        for (int i = 0; i < MaxRecordCount; i++)
        {
            value = PlayerPrefsExt.GetPlayerString(PrafsName + i);
            if (!string.IsNullOrEmpty(value))
            {
                data = GMRecordData.StringToGMRecordData(value);
                if (data != null)
                    GMData.Add(data);
            }
        }
        
        return GMData;
    }


    public void WriteRecordPrefs(List<GMRecordData> Record)
    {
        for (int index = 0; index < Record.Count; index++)
        {
            PlayerPrefsExt.SetPlayerString(PrafsName + index, Record[index].ToString());
        }
    }

    public void WriteRecordPrefs(int RecordIndex, GMRecordData Record)
    {
        PlayerPrefsExt.SetPlayerString(PrafsName + RecordIndex, Record.ToString());
    }

    public void CleanRecordPrefs()
    {
        for (int i = 0; i < MaxRecordCount; i++)
            PlayerPrefsExt.DeletePlayerKey(PrafsName + i);
    }

    #endregion

    #region 初始化数据//GM指令添加在这里

    public void Init()
    {
        mGMModules = new Dictionary<int, string>();
        mGMData = new Dictionary<string, GMData[]>();

        FunctionModuleInit();

        GMTextInit();
    }

    private void GMTextInit() 
    {
        AddModule("背包");
        mGMData.Add("背包", new GMData[]
            {
                new GMData("增加物品", "#addprops 21070 1 0 1","物品ID 数量 流通类型（绑定：4、非绑定：1） 背包"),
                new GMData("清空背包", "#clean_all_bag"),
                new GMData("增加背包容量到100", "#backpack_expand"),
            });

        AddModule("财富");
        mGMData.Add("财富", new GMData[]
            {
                new GMData("增加主角经验", "#add_main_char_exp 10000000000"),
                new GMData("主角等级", "#player_grade set 100"),
                new GMData("加钻石", "#addprops 1 100000 0 1"),
                new GMData("加绑钻", "#addprops 2 100000 0 1"),
                new GMData("加米拉", "#addprops 3 100000 0 1"),
                new GMData("加金币", "#addprops 4 100000 0 1"),
                new GMData("加银币", "#addprops 5 100000 0 1"),
                new GMData("加活力", "#addprops 6 100 0 1"),
                new GMData("加天赋点", "#addprops 7 100 0 1"),
                new GMData("加专精点", "#addprops 8 100 0 1"),
                new GMData("加公会勋章", "#addprops 9 100 0 1"),
                new GMData("加游击士经验","#add_bracer_exp 1000","增加经验数量"),
                new GMData("减少财富", "#subwealth id 数量"), 
                new GMData("每日问答", "#resetQuestionInfo 2"), 
            });

        AddModule("伙伴");
        mGMData.Add("伙伴", new GMData[]
            {
                //new GMData("增加指定伙伴到指定等级", "#set_crew_grade crewId newGrade")
                new GMData("加伙伴经验","#add_crew_exp 0 100"),
                new GMData("加伙伴碎片","#add_crewchip 101 100"),
                new GMData("加所有伙伴碎片","#add_all_crewchip 100"),
                new GMData("增加伙伴","#call Crew_Add 20001"),
                new GMData("all伙伴EXP", OnAllCrewEXP),
                new GMData("all伙伴材料", OnAllCrewMaterial),
            });

        AddModule("好友");
        mGMData.Add("好友", new GMData[]
            {
                new GMData("加在线好友", "#addFriend"),
                new GMData("加友好度", "#addFrienddegree 0 10"),
            }); 

        AddModule("任务");
        mGMData.Add("任务", new GMData[]
            {
                new GMData("接受任务", "#acceptmission 201"),
                new GMData("清理任务", "#clean_mission"),
            }); 

        AddModule("其他");
        mGMData.Add("其他", new GMData[]
            {
                new GMData("游击士开启", OpenBracer),
                new GMData("邮件", "#addmail title comtent system 1"),
                new GMData("导力器材料", OnOrbmentMaterial),
                new GMData("装备纹章", OnMedallionMaterial),
                new GMData("装备打造", OnEquipmentSmithMaterial),
                new GMData("生活携带材料", OnAddAssistMaterial1),
                new GMData("大盘&导力材料", OnAddAssistMaterial2and3),
                new GMData("阵法所需材料", OnAddFormationMaterial),
                new GMData("生活委托", OnAddAssistDelegateMaterial),
                new GMData("送花", OnAddFlowerMaterial),
                new GMData("日程活跃度", "#schedule addActive 100"),
            });

        AddModule("交易");
        mGMData.Add("交易", new GMData[]
        {
            new GMData("商会初始化", OnOpenTrade),
            new GMData("使摆摊物品过期", OnStallItemExpired), 
        });

        AddModule("武术大会");
        GMData.Add("武术大会", new GMData[]
        {
            new GMData("开始", "#@kungfu start 0 1 10 1","延迟 准备 匹配 清除"),
            new GMData("结束",KungFuEnd),
            new GMData("匹配战斗", KungFuWar),
            new GMData("进入比武大会场景", EnterKungFu),    
        });
    }

    private void AddModule(string name)
    {
        if (!GMModules.ContainsValue(name))
        {
            GMModules.Add(GMModules.Count, name);
        }
    }

    #endregion

    #region 业务测试

    private void FunctionModuleInit()
    {
        ModuleBtnInit();
        //ModuleCheckInit();
    }

    private void ModuleCheckInit() //业务测试添加在这里
    {
        AddModule("业务测试");
        mGMData.Add("业务测试", new GMData[]
            {
                new GMData("强化拦截测试", () =>
                    {
                        //ModelManager.Equipment.bInterceptForConsolidate = !ModelManager.Equipment.bInterceptForConsolidate;
                        //string msg = string.Format("强化材料金钱条件拦截：{0}",
                        //                 ModelManager.Equipment.bInterceptForConsolidate ? "已开" : "已关");
                        //TipManager.AddTip(msg);
                        //GameDebuger.LogError(msg);
                    }),
                new GMData("YS测试按钮", () =>
                    {
                        //  ProxyMountModule.OpenMountMainView();
                        //ProxyMountMainModule.Open();
                    }),
                //new GMData("宠物抽卡", ProxyPetRecruitViewModule.OpenBaseView),
                //new GMData("聊天系统", () => ProxyChatSysModule.Open()),
                new GMData("GM测试按钮", () =>
                    {
                        TipManager.AddTip("GM测试按钮");
                    }),
                //new GMData("旧商店", ()=> { ProxyShopModule.OpenMallShopping(); }),
                new GMData("限时折扣模块打开", () =>
                    {
                        TipManager.AddTip("限时模块");
                        //ServiceRequestAction.requestServer(Services.Gm_Execute("#time_limited_shop 308 0 0 60"));
                        //ModelManager.Store.ShopItemBuyDatasSetup(null);
                    }),
                new GMData("旧家族", () =>
                    {
                        //if (ModelManager.Player.HasGuild())
                        //{
                        //    if (ModelManager.GuildV1.IsShowRedPointIndex1(false))
                        //        ProxyGuildModuleV1.OpenMyGuildInfo(1);
                        //    else if (ModelManager.GuildV1.IsShowRedPointIndex2())
                        //        ProxyGuildModuleV1.OpenMyGuildInfo(2);
                        //    else if (ModelManager.GuildV1.IsShowRedPointIndex3())
                        //        ProxyGuildModuleV1.OpenMyGuildInfo(3);
                        //    else
                        //        ProxyGuildModuleV1.OpenMyGuildInfo();
                        //}
                        //else
                        //{
                        //    ProxyGuildModuleV1.OpenGuildInfoList();
                        //}
                    }),
                new GMData("旧交易", () =>
                    {
                        //if (ModelManager.TradeData.IsExistTradeBaseFloatSta(0))
                        //    ProxyTradeModule.OpenBySmartGuide(0);
                        //else if (ModelManager.TradeData.IsExistTradeBaseFloatSta(1))
                        //{
                        //    ModelManager.TradeData.marketTabNum = 1;
                        //    ProxyTradeModule.OpenBySmartGuide(1);
                        //}
                        //else if (ModelManager.TradeData.IsExistTradeBaseFloatSta(2))
                        //{
                        //    ModelManager.TradeData.auctionTabType = TradeDataModel.AuctionTabEnum.bid;
                        //    ProxyTradeModule.OpenBySmartGuide(2);
                        //}
                        //else
                        //{
                        //    ProxyTradeModule.Open();
                        //}
                        //CloseView();
                    }),
                new GMData("200消息记录", () =>
                    {
                        //ModelManager.Friend.SpwanMsg();
                    })
            });

    }

    private void ModuleBtnInit()
    {
        AddModule("基础调试");
        mGMData.Add("基础调试", new GMData[]
            {
                //new GMData("伙伴碎片", CrewChip),
                new GMData("一百万经验", OnShowMeTheExp),
                new GMData("钱钱钱", OnShowMeTheMoney),
                new GMData("断开网络", OnTestSocketClose),
                new GMData("重新登录", OnReLogin),
                new GMData("机器人", OnOpenRobot),
                new GMData("地图测试", OnMapTestClick),
                new GMData("快快快", OnSpeedUp),
                new GMData("慢慢慢", OnSpeedDown),
                new GMData("100倍速", OnSpeedUp100),
                new GMData("模型动作", OnPetActionClick),
                new GMData("镜头跟随", OnCameraFollowClick),
                new GMData("播放剧情","localPlayPlot 1001"),
                new GMData("一级属性","#playerbp_reset 500 500 500 500"),
                new GMData("离线时长","#offplayer_delay 50")
            });

        AddModule("战斗调试");
        AddModule("开关控制");
        mGMData.Add("战斗调试", new GMData[]
        {
            new GMData("断开网络", OnTestSocketClose),
            new GMData("重新登录", OnReLogin),
            
            new GMData("快快快", OnSpeedUp),
            new GMData("慢慢慢", OnSpeedDown),
            new GMData("100倍速", OnSpeedUp100),
            
            new GMData("重载战斗", OnReloadBattleConfig),
            new GMData("战斗测试", OnBattleTestClick),
            new GMData("关卡战斗","#@tollgatebattle 1000","关卡ID"),
            new GMData("胜利退出", OnWinExit),
            new GMData("失败退出", OnLoseExit),

#if UNITY_EDITOR
            new GMData("技能编辑器", OnBattleSkillEditorClick)
#endif
        });
        
        mGMData.Add("开关控制", new GMData[]
            {
                new GMData("Debug开关", OnDebugBtnClick),
                new GMData("预判开关", OnServerRequestCheckSwitch),
                new GMData("延迟开关", OnServerRequestDelaySwitch),
                new GMData("锁请求开关", OnServerRequestLockSwitch),
                new GMData("延迟请求遮罩", OnServerRequestMaskSwitch),
                new GMData("加载延迟开关", OnResourcesLoadDelaySwitch),
                new GMData("内存模式切换", OnMemorySwitch)
            });

        AddModule("游戏数据");
        mGMData.Add("游戏数据", new GMData[]
            {
                new GMData("游戏分析器", OnGameAnaly),
                new GMData("清空本地数据", OnCelanLocalData),
                new GMData("清空游戏资源", OnCleanUpGameRes),
                new GMData("清空内存", OnCleanUpMemory),
                new GMData("下载管理", OnDownloadManager),
                new GMData("PlayerView缓存开关", OnPlayerViewCache),
                new GMData("执行批量GM", OpenMoreGMView),
                new GMData("获取场景坐标点", OnGetWalkBtn)
            });
        AddModule("野外boss");
        mGMData.Add("野外boss",new GMData[]
        {
             new GMData("地区治安","#refresh_monster constable"),
             new GMData("噬身之蛇","#refresh_monster evilsnake"),
             new GMData("远古神兽","#refresh_monster aw"),
        });
        AddModule("技能");
        mGMData.Add("技能", new GMData[]
        {
            new GMData("升级潜能","#potentialGrade 潜能id 等级")
        });
        AddModule("公会");
        mGMData.Add("公会", new GMData[]
        {
            new GMData("添加公会财富","#addGuildWealth 公会id 数量"),
            new GMData("移除公会", "#removeGuild 公会id"),
            new GMData("清楚所有公会","#removeAllGuild")
        });
    }

    #region 基础调试

    private void CrewChip()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_all_crewchip 100"));
        CloseView();
    }

    private void QuickUpGrade()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#player_grade set 100"));
        OnShowMeTheMoney();
        //  CloseView();
    }


    private void OnShowMeTheExp()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_main_char_exp 1000000"));
        CloseView();
    }

    private void OnShowMeTheMoney()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_ingot 1000000"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_silver 1000000"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_copper 50000000"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_score 100000"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_contribute 100000"));

        CloseView();
    }

    private void OnAddAssistMaterial1()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 6 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400101 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400102 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400103 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400104 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400105 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400106 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400107 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400108 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400109 10 0 1"));
    }

    private void OnAddAssistMaterial2and3()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 6 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400201 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400202 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400203 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400204 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400205 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400206 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400207 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 400301 100 0 1"));
    }

    private void OpenBracer()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#enable_bracer"));
        CloseView();
    }

    private void OnAllCrewEXP()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_all_crew_exp 100000"));
    }

    private void OnAllCrewMaterial()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#crewmaterial"));
    }

    private void OnOrbmentMaterial()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#orbmentmaterial"));
    }

    private void OnMedallionMaterial()
    {
        //纹章
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101001 1 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101002 1 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101003 1 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101004 1 0 1"));
        //铭刻符
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403001 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403002 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403003 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403004 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403005 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403006 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403007 3 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 403008 3 0 1"));
    }
    private void OnEquipmentSmithMaterial()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301004 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301002 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301001 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301003 100 0 1"));

        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301106 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301107 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301108 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301109 10 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 301110 10 0 1"));
    }

    private void OnAddFormationMaterial()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#add_allFormationMaterial"));
    }

    private void OnAddAssistDelegateMaterial()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 100013 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 100014 100 0 1"));
    }

    private void OnAddFlowerMaterial()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101010 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101011 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101012 100 0 1"));
        ServiceRequestAction.requestServer(Services.Gm_Execute("#addprops 101013 100 0 1"));
    }

    private void OnOpenTrade()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#tradeInit"));
    }

    private void OnStallItemExpired()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#stallItemExpired "));
    }

    private void KungFuStart()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute(""));
    }

    private void KungFuEnd()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#@kungfu end"));
    }

    private void KungFuWar()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#@kungfu beginFight"));
    }

    private void EnterKungFu()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#call Kungfu_Enter"));
    }

    private void OnTestSocketClose()
    {
        SocketManager.Instance.Close(false);
        CloseView();
    }

    private void OnReLogin()
    {
        ExitGameScript.Instance.HanderRelogin();
        CloseView();
    }

    private  GameObject go;

    private void OnOpenRobot()
    {
        TipManager.AddTip("添加机器人");
//#if !ENABLE_JSB
//        if (RobotInfo.Instance.IsOPen())
//        {
//            Object.Destroy(go);
//            RobotInfo.Instance.SetGo(null);
//            RobotInfo.Instance.SetOpen(false);
//        }
//        else if (RobotInfo.Instance.AddNew())
//        {
//            go = new GameObject();
//            go.name = "tool";
//            go.GetMissingComponent<RobotTool>();
//            Object.DontDestroyOnLoad(go);
//            //			go.GetMissingComponent<GameMemoryDisplay>();
//            RobotInfo.Instance.SetGo(go);
//            RobotInfo.Instance.SetOpen(true);
//        }

//        CloseView();
//#endif
    }

    private void OnMapTestClick()
    {
        CloseView();
        ProxyWorldMapModule.OpenWorldMap();
    }

    private void OnSpeedUp()
    {
        if (Time.timeScale == 1f)
        {
            Time.timeScale = 3f;
        }
        else
        {
            Time.timeScale = 1f;
        }
        CloseView();
    }

    private void OnSpeedDown()
    {
        if (Time.timeScale == 1f)
        {
            Time.timeScale = 0.3f;
        }
        else
        {
            Time.timeScale = 1f;
        }
        CloseView();
    }

    private void OnSpeedUp100()
    {
        if (Time.timeScale == 1f)
        {
            Time.timeScale = 100f;
        }
        else
        {
            Time.timeScale = 1f;
        }
        CloseView();
    }

    private void OnPetActionClick()
    {
        ProxyAnimatorTestModule.Open();
        CloseView();
    }

    private void OnCameraFollowClick()
    {
        GamePlayer.CameraManager.Instance.SceneCamera.SceneCameraController.ChangeAction();
        CloseView();
    }
    
    private void OnReloadBattleConfig()
    {
        BattleConfigManager.Instance.Setup();
    }

    private void OnBattleTestClick()
    {
        //ProxyBattleDemo.Open();
        ProxyBattleDemoConfigModule.Open();
        CloseView();
    }
    
    private void OnWinExit()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#@battlewin"));
        CloseView();
    }
    
    private void OnLoseExit()
    {
        ServiceRequestAction.requestServer(Services.Gm_Execute("#@battlelose"));
        CloseView();
    }

    private void OnBattleSkillEditorClick()
    {
        ProxyBattleSkillEditor.Open(ProxyBattleSkillEditorPreview.OpenPreview, ProxyBattleSkillEditorPreview.ReplayPreview, ProxyBattleSkillEditorPreview.ClosePreview);
        CloseView();
    }

    private void CloseView()
    {
        UIModuleManager.Instance.CloseModule(NewGMView.NAME);
    }

    #endregion

    #region 开关控制

    private void OnDebugBtnClick()
    {
        CSGameDebuger.debugIsOn = !CSGameDebuger.debugIsOn;
        GameDebuger.debugIsOn = !GameDebuger.debugIsOn;
        if (GameDebuger.debugIsOn)
        {
            GameDebugConsole.Setup();
        }
        else
        {
            GameDebugConsole.Dispose();
        }
        CloseView();
    }

    private void OnServerRequestCheckSwitch()
    {
        ServiceRequestAction.ServerRequestCheck = !ServiceRequestAction.ServerRequestCheck;
        TipManager.AddTip("预判开关:" + ServiceRequestAction.ServerRequestCheck);
    }

    private void OnServerRequestDelaySwitch()
    {
        ServiceRequestAction.ServerRequestDelay = !ServiceRequestAction.ServerRequestDelay;
        TipManager.AddTip("延迟开关:" + ServiceRequestAction.ServerRequestDelay);
    }

    private void OnServerRequestLockSwitch()
    {
        ServiceRequestAction.ServerRequestLock = !ServiceRequestAction.ServerRequestLock;
        TipManager.AddTip("锁请求开关:" + ServiceRequestAction.ServerRequestLock);
    }

    private void OnServerRequestMaskSwitch()
    {
        GameDebuger.TODO(@"");
        //ServiceRequestAction.ServerRequestMaskDelay = !ServiceRequestAction.ServerRequestMaskDelay;
        //TipManager.AddTip("客户端发送请求时延迟显示加载遮罩:" + ServiceRequestAction.ServerRequestMaskDelay);
    }

    private void OnResourcesLoadDelaySwitch()
    {
#if UNITY_EDITOR
        AssetManager.EditorLoadDelay = AssetManager.EditorLoadDelay == 0f ? 1f : 0f;
        TipManager.AddTip("加载延迟开关:" + AssetManager.EditorLoadDelay);
#endif
    }

    private void OnMemorySwitch()
    {
        GameDebuger.TODO(@"       SystemSetting.LowMemory = !SystemSetting.LowMemory;
        SystemSetting.UpdateSettingWithMemory(SystemSetting.LowMemory);
        SystemSetting.UsePool = !SystemSetting.LowMemory;");
        //if (SystemSetting.LowMemory)
        //{
        //    TipManager.AddTip(">>>>> 低内存模式");
        //}
        //else
        //{
        //    TipManager.AddTip("高内存模式");
        //}
    }

    #endregion

    #region 游戏数据

    private void OnGameAnaly()
    {
        //ProxyGameAnalyModule.Open();
        CloseView();
    }

    private void OnCelanLocalData()
    {
        DataManager.CleanUp();
        GameDataManager.Instance.CleanUp();
        CloseView();
    }

    private void OnCleanUpGameRes()
    {
        AssetManager.Instance.MarkCleanUpResFlag();
    }

    private void OnCleanUpMemory()
    {
        AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(true);
    }

    private void OnDownloadManager()
    {
        //ProxyGameResManagementModule.Open();
    }

    private void OnPlayerViewCache()
    {
        WorldView.UsePool = !WorldView.UsePool;
        TipManager.AddTip("WorldView.UsePool:" + WorldView.UsePool);
    }

    private const string _gmView = "MoreGMView";

    private void OpenMoreGMView()
    {
        //GameObject view = UIModuleManager.Instance.AddChildPanel(_gmView, UIModuleManager.Instance.GetModuleController<GMController>(GMView.NAME).ViewTransform, 1, true);
        //view.GetMissingComponent<MoreGMController>();
    }

    private void OnGetWalkBtn()
    {
        string path = Application.dataPath + "/Docs/NavigationArea/";

        if (!string.IsNullOrEmpty(path))
        {
            if (Directory.Exists(path))
            {
                PlayerPrefs.SetString("dev_walkPath", path);
                NavigationArea area = new NavigationArea();
                area.CreateMoveNavigation();
                area.OutputFile(path);
            }
            else
            {
                TipManager.AddTip("目录不存在");
            }
        }
        else
        {
            TipManager.AddTip("目录不能为空");
        }
    }

    #endregion

    #endregion

}
