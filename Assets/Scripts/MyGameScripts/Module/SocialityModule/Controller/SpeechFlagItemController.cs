// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : Carrien
// Created : 7/19/2017 7:47:01 PM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System.Collections;

/// <summary>
/// This is the controller class for module SpeechFlagItem, use this to control the ui or view , such as it's init , update or dispose.
/// @Carrien in 7/19/2017 7:47:01 PM
/// </summary>
public class SpeechFlagItemController : MonoViewController<SpeechFlagItem>
{
    private static SpeechFlagItemController _instance;


    public static SpeechFlagItemController Instance
    {
        get
        {
            if (_instance == null)
            {
                _instance = UIModuleManager.Instance.OpenFunModule<SpeechFlagItemController>(SpeechFlagItem.NAME, UILayerType.FourModule, false);
            }
            return _instance;
        }
    }

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
	protected override void AfterInitView()
    {
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        VoiceRecognitionManager.Instance.OnError += HandleVoiceError;
        VoiceRecognitionManager.Instance.OnRecordTimeOut += OnRecordTimeOut;
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        VoiceRecognitionManager.Instance.OnError -= HandleVoiceError;
        VoiceRecognitionManager.Instance.OnRecordTimeOut -= OnRecordTimeOut;
    }

    #endregion

    public bool isDragOut = false;
    private long _curChannelId;

    private enum SpeechFlagState
    {
        Record,
        Cancel,
        Error
    }
    private bool _isRecord = false;
    private int _delay = 0;

    public static void OpenSpeechFlag(int channelId, string param = "")
    {
        //#if UNITY_EDITOR
        //        TipManager.AddTip("编辑模式下不能使用语音");
        //#else

        //if (channelId != -1 && !ChatDataMgr.DataMgr.CanChannelChat(channelId))
        //    return;

        if (!VoiceRecognitionManager.Instance.IsRecord())
        {
            Instance.Open(channelId);
        }
        else
        {
            TipManager.AddTip("录音引擎忙碌中,请稍后尝试");
        }
        //#endif
    }

    public static void SendVoiceMessage()
    {
        if (_instance != null && IsShow())
        {
            Instance.sendVoiceMessage();
        }
    }

    public static bool IsShow()
    {
        if (_instance != null)
        {
            return Instance.isShow();
        }
        return false;
    }

    public bool isShow()
    {
        return gameObject.activeSelf;
    }

    private void sendVoiceMessage()
    {
//#if UNITY_EDITOR
        CloseView();
//#else
        if (_isRecord == false)
        {
            if (VoiceRecognitionManager.Instance.IsRecord())
            {
                if (isDragOut)
                {
                    VoiceRecognitionManager.Instance.Cancel();
                    CloseView();
                    return;
                }

                VoiceRecognitionManager.Instance.Stop(CloseView);
            }
            else
            {
                CloseView();
            }
        }
        else
        {
            _isRecord = false;
            TipManager.AddTip("说话时间太短");
            AudioManager.Instance.PlayVoiceWhenFinishRecord();
            CloseView();
        }
//#endif
    }

    private void CloseView()
    {
        HideSpeechFlag();
    }
    public void HideSpeechFlag()
    {
        UIModuleManager.Instance.HideModule(SpeechFlagItem.NAME);
    }
    public void Open(long channelId)
    {
        this.gameObject.SetActive(true);
        CancelCloseView();
        isDragOut = false;
        _curChannelId = channelId;
        ChangeMode(SpeechFlagState.Record);

        VoiceRecognitionManager.Instance.StopCurrVoice(false);
        AudioManager.Instance.StopVolumeWhenRecordVoice();
        _isRecord = true;
        _delay = 0;
    }

    private void CancelCloseView()
    {
        JSTimer.Instance.CancelCd("DelayCloseSpeechFlagView");
    }

    private void ChangeMode(SpeechFlagState state, int type = 0, string txt = "")
    {
        if (state == SpeechFlagState.Record)
        {
            View.stateSprite_UISprite.cachedTransform.localPosition = new Vector3(-20f, 15f, 0f);
            View.volumeSprite_UISprite.enabled = true;
            //View.stateSprite_UISprite.spriteName = "microphone";
            View.stateSprite_UISprite.spriteName = "zhandou_hautong002";
            View.tipLbl_UILabel.text = "手指下滑,取消发送";
            View.RedUnderLine_UISprite.cachedGameObject.SetActive(false);
        }
        else
        {
            View.stateSprite_UISprite.cachedTransform.localPosition = new Vector3(0f, 15f, 0f);
            View.volumeSprite_UISprite.enabled = false;

            if (state == SpeechFlagState.Cancel)
            {
                //View.stateSprite_UISprite.spriteName = "talking-back";
                View.stateSprite_UISprite.spriteName = "zhandou_yuyingchehui";
                View.tipLbl_UILabel.text = "松开手指,取消发送";
                View.RedUnderLine_UISprite.cachedGameObject.SetActive(true);
            }
            else if (state == SpeechFlagState.Error)
            {
                if (type == VoiceErrorCode.ERROR_SHORT_VOICE)
                {
                    //View.stateSprite_UISprite.spriteName = "no-voice";
                    //View.tipLbl_UILabel.text = "说话时间太短";
                    TipManager.AddTip("说话时间太短");

                    View.RedUnderLine_UISprite.cachedGameObject.SetActive(false);
                }
                else if (type == VoiceErrorCode.ERROR_NO_DATA)
                {
                    //View.stateSprite_UISprite.spriteName = "no-voice";
                    if (string.IsNullOrEmpty(txt))
                    {
                        //View.tipLbl_UILabel.text = "没有录音数据";
                        TipManager.AddTip("没有录音数据");
                    }


                    else
                        View.tipLbl_UILabel.text = txt;
                    View.RedUnderLine_UISprite.cachedGameObject.SetActive(false);
                }
                else if (type == VoiceErrorCode.ERROR_TO_AMR)
                {
                    //View.stateSprite_UISprite.spriteName = "no-voice";
                    if (string.IsNullOrEmpty(txt))
                    {
                        //View.tipLbl_UILabel.text = "语音数据处理失败";
                        TipManager.AddTip("语音数据处理失败");
                    }
                    else
                        View.tipLbl_UILabel.text = txt;
                    View.RedUnderLine_UISprite.cachedGameObject.SetActive(false);
                }
            }
        }
        View.stateSprite_UISprite.MakePixelPerfect();
    }

    public static void HandleDragEvent(Vector2 delta)
    {
        if (_instance != null)
        {
            Instance.handleDragEvent(delta);
        }
    }
    public void handleDragEvent(Vector2 delta)
    {
        if (Mathf.Abs(delta.y) < 15f)
            return;

        if (delta.y < 0)
        {
            ChangeMode(SpeechFlagState.Cancel);
            isDragOut = true;
            Debug.LogError("isDragOut----------:" + isDragOut);
        }
        if (delta.y > 0)
        {
            ChangeMode(SpeechFlagState.Record);
            isDragOut = false;
        }
    }
    private void HandleVoiceError(int errorCode, string txt)
    {
        if (View == null) return;

        if (this.gameObject.activeSelf)
        {
            DelayCloseViewTimer();
            ChangeMode(SpeechFlagState.Error, errorCode, txt);
        }
    }
    private void DelayCloseViewTimer()
    {
        JSTimer.Instance.SetupCoolDown("DelayCloseSpeechFlagView", 1f, null, CloseView);
    }

    private void OnRecordTimeOut()
    {
        CloseView();
    }
    void Update()
    {
        if (_isRecord)
        {
            if (_delay >= 6)
            {
                VoiceRecognitionManager.Instance.Record(_curChannelId);
                _isRecord = false;
            }
        }

        _delay++;

        if (VoiceRecognitionManager.Instance.IsRecord())
        {
            if (_delay % 5 == 0)
            {
                float v = VoiceRecognitionManager.Instance.GetVoiceVolume();
                View.volumeSprite_UISprite.fillAmount = v;
                //Debug.Log("语音声音: " + v);
            }
        }
    }
}

