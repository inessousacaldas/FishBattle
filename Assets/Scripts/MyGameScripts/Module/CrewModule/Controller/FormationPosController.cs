// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : CL-PC007
// Created : 7/25/2017 2:15:20 PM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using System.Collections.Generic;
using System.Text;
using AppDto;
using UniRx;
using UnityEngine;

/// <summary>
/// This is the controller class for module FormationPos, use this to control the ui or view , such as it's init , update or dispose.
/// @CL-PC007 in 7/25/2017 2:15:20 PM
/// </summary>
public class FormationPosController : MonolessViewController<FormationPosView>
{
	private CompositeDisposable _disposable;

    private FormationType _curformationType;
    private int _playerPos;     //玩家当前位置
    private int _curCaseId;     //当前方案id
    private int _curRank = -1;  //选中列
    private bool _isCompileRow = false;    //是否在编辑队列
    private bool _isCompileRank = false;    //是否在编辑行
    private List<Crew> _allCrewList = new List<Crew>(); 
    private List<CrewIconItemController> _playerList = new List<CrewIconItemController>();
    private List<UIButton> _btnList = new List<UIButton>();
    private int[] _posList = {0, 1, 2, 3};
    private int[] _selectPos = {-150, -61, 29, 120};      //选中框的x坐标

    private delegate void PlayerItemClickEvt(CrewIconItemController item, int idx);

    private delegate void ChangeRankClickEvt(UIButton btn, int idx);

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView ()
    {	    	    
	    _disposable = new CompositeDisposable();
        DataCache.getArrayByCls<GeneralCharactor>().ForEach(d =>
        {
            if (d is Crew)
                _allCrewList.Add(d as Crew);
        });

	    InitPlayerList();
        InitPosBtn();
    }

	private void InitPlayerList()
	{
	    PlayerItemClickEvt fun = (item, idx) =>
	    {
            _disposable.Add(item.GetClickHandler.Subscribe(_=>
            {
                if (!_isCompileRank) return;

                ChangeRow(idx);
                UpdateCrewItemSelect();
            }
	    ));};

        for (int i = 0; i < _view.ItemGrid_UIGrid.transform.childCount; i++)
	    {
	        var item = _view.ItemGrid_UIGrid.GetChild(i).gameObject;
	        var controller = AddController<CrewIconItemController, CrewIconItem>(item);
            _playerList.Add(controller);
	        fun(controller, i);
	    }
	}

    private void ChangeRow(int pos)
    {
        if (pos%4 == _playerPos%4 && pos != _playerPos)
        {
            if (_curformationType == FormationType.Team)
                TeamChangeRow(_playerPos, pos);
            else
                ChangeRow(_playerPos, pos);
        }
    }

    private void InitPosBtn()
    {
        ChangeRankClickEvt fun = (btn, idx) =>
        {
            _disposable.Add(btn.AsObservable().Subscribe(_ =>
            {
                if (!_isCompileRow) return;

                _view.SelectSprite_Transform.gameObject.SetActive(_curRank == -1);
                if (_curRank == -1)
                {
                    _curRank = idx;
                    _view.SelectSprite_Transform.localPosition = new Vector3(_selectPos[_curRank], -11 , 0); //根据选中的列移动选中框的x左边,每次移动38像素
                    btn.sprite.spriteName = "zhenfa-xiaoanniuhuangse";
                    btn.normalSprite = "zhenfa-xiaoanniuhuangse";
                }
                else
                    ChangeRank(idx);
            }));
        };

        for (int i = 0; i < _view.BtnGrid_UIGrid.transform.childCount; i++)
        {
            var btn = _view.BtnGrid_UIGrid.GetChild(i).GetComponent<UIButton>();
            _btnList.Add(btn);
            fun(btn, i);
        }
    }

    private void ChangeRank(int endPos)
    {
        _posList[endPos] = _curRank;
        _posList[_curRank] = endPos;
        if (_curformationType == FormationType.Team)
            TeamExchangeColumn();
        else
            ExchangeColumn(_curRank, endPos);

        _btnList.ForEach(btn =>
        {
            btn.sprite.spriteName = "zhenfa-xiaoanniulanse";
            btn.normalSprite = "zhenfa-xiaoanniulanse";
        });
    }

    //刷新伙伴站位
	public void UpdateCrewPos(FormationCaseInfoDto data, FormationType type)
	{
	    if (data == null)
	        return;

        _curformationType = type;
        _curCaseId = data.caseId;
        var p = data.casePositions.Find(d => d.crewId == ModelManager.Player.GetPlayerId());
	    _playerPos = p == null ? 0 : p.position;

	    _playerList.ForEachI((item, idx) => { item.SetNullItem(); });
        data.casePositions.ForEach(d =>
        {
            if(d.position < _playerList.Count)
                _playerList.TryGetValue(d.position).SetCasePosition(d);
        });
        _posList = new int[] { 0, 1, 2, 3 };    //重置站位缓存数据
	    _curRank = -1;
        UpdateCrewItemSelect();
    }

    //刷新组队阵法站位
    public void UpdateTeamPos(List<TeamMemberDto> members, FormationType type)
    {
        _curformationType = type;
        var p = members.Find(d => d.id == ModelManager.Player.GetPlayerId());
        _playerPos = p == null ? 0 : p.position;
        _playerList.ForEachI((item, idx) => { item.SetNullItem(); });
        members.ForEach(d =>
        {
            d.crewPositionNotifys.ForEach(c =>
            {
                if (c.position < _playerList.Count)
                    _playerList.TryGetValue(c.position).SetCrewPosition(c);
            });
            if (d.position < _playerList.Count)
                _playerList.TryGetValue(d.position).SetMemberInfo(d);
        });
        _posList = new int[] { 0, 1, 2, 3 };    //重置站位缓存数据
        _curRank = -1;
        UpdateCrewItemSelect();
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
	protected override void RegistCustomEvent ()
	{
        _disposable.Add(_view.InfoBtn_UIButton.AsObservable().Subscribe(_=> OnInfoBtnClick()));
	    _disposable.Add(_view.PlayerPosBtn_UIButton.AsObservable().Subscribe(_ =>
	    {
            _isCompileRank = true;
	        UpdateCrewItemSelect();
            _view.BtnGrid_UIGrid.gameObject.SetActive(false);
	        HidePosBtn(true);
            _view.DescLb_UILabel.gameObject.SetActive(true);
	    }));
	    _disposable.Add(_view.TeamPosBtn_UIButton.AsObservable().Subscribe(_ =>
	    {
	        if (_curformationType == FormationType.Team && !TeamDataMgr.DataMgr.IsLeader())
	        {
                TipManager.AddTip("队员不能调整队伍位置");
	            return;
	        }
	        HidePosBtn(true);
            _isCompileRow = true;
            _view.BtnGrid_UIGrid.gameObject.SetActive(true);
        }));
        _disposable.Add(_view.EnterBtn_UIButton.AsObservable().Subscribe(_ =>
        {
            EnterBtnClickHandler();
        }));
	}

    public void EnterBtnClickHandler()
    {
        _view.BtnGrid_UIGrid.gameObject.SetActive(false);
        _playerList.ForEach(item => item.Selected = false);
        _view.SelectSprite_Transform.gameObject.SetActive(false);
        HidePosBtn(false);
        _isCompileRank = false;
        _isCompileRow = false;
    }

    private void UpdateCrewItemSelect()
    {
        if (!_isCompileRank) return;
        _playerList.ForEachI((item, idx) =>
        {
            item.Selected = idx % 4 == _playerPos % 4 && idx != _playerPos;
        });
    }

    private void HidePosBtn(bool b)
    {
        _view.EnterBtn_UIButton.gameObject.SetActive(b);
        _view.PlayerPosBtn_UIButton.gameObject.SetActive(!b);
        _view.TeamPosBtn_UIButton.gameObject.SetActive(!b);
        _view.DescLb_UILabel.gameObject.SetActive(false);
    }

	private void OnInfoBtnClick()
	{
		ProxyFormation.OpenConstrainView();
	}
	
    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        _disposable = _disposable.CloseOnceNull();
    }

    public enum FormationType
    {
        Team = 0,   //组队布阵
        Crew = 1,    //伙伴布阵
    }

    //组队换列
    private void TeamExchangeColumn()
    {
        if (TeamDataMgr.DataMgr.HasTeam())
        {
            StringBuilder sb = new StringBuilder();
            _posList.ForEach(i => { sb.Append(i + ","); });
            TeamFormationDataMgr.TeamFormationNetMsg.Team_ExchangeColumn(sb.ToString());
        }
    }

    //伙伴换列
    private void ExchangeColumn(int start, int end)
    {
        TeamFormationDataMgr.TeamFormationNetMsg.Team_ExchangeColumn(_curCaseId, start, end);
    }

    private void TeamChangeRow(int oldPos, int newPos)
    {
        TeamFormationDataMgr.TeamFormationNetMsg.Team_ExchangeRow(oldPos, newPos);
    }

    private void ChangeRow(int oldPos, int newPos)
    {
        TeamFormationDataMgr.TeamFormationNetMsg.Team_ExchangeRow(_curCaseId, oldPos, newPos);
    }
}