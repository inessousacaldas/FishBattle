//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using System.Collections;
using UniRx;

/// <summary>
/// Generates a safe wrapper for posAnchor.
/// </summary>
public partial class posAnchor : BaseView
{
	public const string NAME ="posAnchor";
	public UISpriteAnimation CanExchangeEff_UISpriteAnimation;
	public UIButton SelectBtn_UIButton;

	protected override void InitElementBinding ()
	{
		var root = this.gameObject.transform;
		CanExchangeEff_UISpriteAnimation = root.Find("CanExchangeEff").GetComponent<UISpriteAnimation>();
		SelectBtn_UIButton = root.Find("SelectBtn").GetComponent<UIButton>();
	}
}

public partial class posAnchorController : MonolessViewController<posAnchor>
{
	private IDisposable _disposable;
	
	private Subject<int> _clickEvt = new Subject<int>();
	public UniRx.IObservable<int> OnClickEvt { get{return _clickEvt;}}

	private int _idx;
	protected override void RegistCustomEvent()
	{
		_disposable = _view.SelectBtn_UIButton.AsObservable().Subscribe(_ =>
		{
			_clickEvt.OnNext(_idx);
		});
	}

	public void SetIdx(int idx)
	{
		_idx = idx;
	}
	
	public void ShowEff(bool b)
	{
		_view.CanExchangeEff_UISpriteAnimation.SetEnable(b);
	}

	protected override void OnDispose()
	{
		_disposable.Dispose();
		_disposable = null;
	}
}
