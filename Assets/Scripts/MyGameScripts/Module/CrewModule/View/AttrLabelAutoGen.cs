//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using AppDto;
using MyGameScripts.Gameplay.Player;

/// <summary>
/// Generates a safe wrapper for AttrLabel.
/// </summary>
public partial class AttrLabel : BaseView
{
	public const string NAME ="AttrLabel";
	public UILabel AttrLabel_UILabel;
	public UILabel Name_UILabel;
	public UISprite Icon_UISprite;

	protected override void InitElementBinding ()
	{
		var root = this.gameObject.transform;
	    AttrLabel_UILabel = root.GetComponent<UILabel>();
		Name_UILabel = root.Find("Name").GetComponent<UILabel>();
		Icon_UISprite = root.Find("Line").GetComponent<UISprite>();
	}
}

public partial class AttrLabelController : MonolessViewController<AttrLabel>
{
    private string[] propertyName = {"","火","水","土","风","时","空","幻"};
    private List<CharacterAbility> characterList = DataCache.getArrayByCls<CharacterAbility>();

    public void SetInfo(CharacterPropertyDto dto)
    {
        bool isPercent = false;

        if (characterList.Find(x => x.id == dto.propId) != null)
            isPercent = characterList.Find(x => x.id == dto.propId).per;

        if(dto.propId == GlobalAttr.Crew_Grow)
            _view.AttrLabel_UILabel.text = dto.propValue.ToString();
        else if (isPercent)
            _view.AttrLabel_UILabel.text = string.Format("{0}%", Mathf.Floor(dto.propValue*100).ToString());
        else
            _view.AttrLabel_UILabel.text = Mathf.Floor(dto.propValue).ToString();

        _view.Name_UILabel.text = GlobalAttr.GetAttrName(dto.propId);
		//UIHelper.SetOtherIcon(_view.Icon_UISprite, "");
	}

    public void SetInfo(QuartzPropertyDto dto)
    {
        _view.AttrLabel_UILabel.text = dto.count.ToString();
        _view.Name_UILabel.text = string.Format("{0}:",propertyName[dto.elementId]);
        UIHelper.SetOtherIcon(_view.Icon_UISprite, "");
    }
}

public partial class AttrLabelUnited : BaseView
{
    public const string NAME = "AttrLabelUnited";
    public Transform Gird_UIGrid;

    protected override void InitElementBinding()
    {
        var root = this.gameObject;
        Gird_UIGrid = root.FindTrans("Grid");
    }
    
}

public partial class AttrLabelUnitedController : MonolessViewController<AttrLabelUnited>
{
    public void SetInfo(IEnumerable<CharacterAbility> dtoList,
        IEnumerable<CharacterPropertyDto> propertyDtos)
    {
        for (int i = 0; i < _view.Gird_UIGrid.childCount; i++)
        {
            var go = _view.Gird_UIGrid.GetChild(i).gameObject;
            if (dtoList.TryGetValue(i) != null)
            {
                go.SetActive(true);
                var item = AddController<AttrLabelController, AttrLabel>(go);
                {
                    if (propertyDtos.TryGetValue(i) != null)
                        item.SetInfo(propertyDtos.TryGetValue(i));
                    else
                    {
                        CharacterPropertyDto _dto = new CharacterPropertyDto();
                        _dto.propId = dtoList.TryGetValue(i).id;
                        _dto.propValue = 0;
                        item.SetInfo(_dto);
                    }
                }
            }
            else
                go.SetActive(false);
        }
    }

    public void SetInfo(IEnumerable<CharacterPropertyDto> dtoList, bool isPercent = false)
    {
        dtoList.ForEachI((dto, idx)=>
        {
            var go = _view.Gird_UIGrid.GetChild(idx).gameObject;
            if (dto != null)
            {
                var item = AddController<AttrLabelController, AttrLabel>(go);
                item.SetInfo(dto);
            }
            else
                go.SetActive(false);
        });
    }
}
