// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/30/2017 15:27:36
// Desc : Auto generated by MarsZ. update this if need.
// **********************************************************************

using AppDto;
using System.Collections.Generic;
using MonsterManager = BattleDataManager.MonsterManager;

/// <summary>
/// 战斗设置
/// @MarsZ in 03/30/2017 15:27:36
/// </summary>
public class BattleConfigModel : IModuleModel
{
    #region field and property

    //超时自动挂机
    private bool mAutoFightIfOutTime = false;
    //自动战斗超时时间
    private int mAutoFightTime = 30;
    //是否使用候补技能
    private bool mUseSubSkill = false;
    //主角自动技能
    private int mMainRoleAutoSkill;
    //主将自动技能
    private int mMainPetAutoSkill;
    //主角候补技能
    private int mMainRoleSubSkill;
    //主将候补技能
    private int mMainPetSubSkill;
    //自动召唤武将列表
    private List<long> mAutoSummonHeroList;
    //是否跟随集火
    private bool mAutoTarget;

    #endregion

    #region initial and dispose

    /// <summary>
    /// 如进入游戏后需要获取初始化数据，请把本方法放于 ModelManager 中。
    /// </summary>
    /// <param name="pAfterLoginDto">P after login dto.</param>
    public void Setup()
    {
    }

    /// <summary>
    /// 切换角色或帐号时，会自动调用本方法清理 Model 数据。其他时候如需要请手动调用。
    /// </summary>
    public void Dispose()
    {
    }

    #endregion

    #region 自动挂机设置

    public GeneralCharactor GetInFightPet()
    {
        MonsterController tMonsterController = MonsterManager.Instance.GetMyPet();
        if (null != tMonsterController)
        {
            return tMonsterController.GetCharacter();
        }
        GameDebuger.LogError("[TEMP]读取当前设置出战的宠物");
        return null;
    }

    public int GetRoleAutoFightSkill()
    {
        GameDebuger.LogError("[TEMP]获取当前主角的自动战斗技能");
        return BattleDataManager.DataMgr.BattleDemo.LastPlayerSkillId;
    }

    public int GetRoleSubFightSkill()
    {
        GameDebuger.LogError("[TEMP]获取当前主角的候补自动战斗技能");
        return BattleDataManager.DataMgr.BattleDemo.LastPlayerSkillId;
    }

    public int GetPetAutoFightSkill()
    {
        GameDebuger.LogError("[TEMP]获取当前主将的自动战斗技能");
        return BattleDataManager.DataMgr.BattleDemo.LastPetSkillId;
    }

    public int GetPetSubFightSkill()
    {
        GameDebuger.LogError("[TEMP]获取当前主角的候补自动战斗技能");
        return BattleDataManager.DataMgr.BattleDemo.LastPetSkillId;
    }

    //获取自动挂机时配置的武将列表
    public List<long> GetAutoHeroList()
    {
        GameDebuger.LogError("[TEMP]获取自动挂机时配置的武将列表");
        List<long> tAutoHeroList = new List<long>(){ MonsterManager.Instance.GetMyPetId() };
        return tAutoHeroList;
    }

    public List<int> GetSkillList(BattleAutoSkillConfigController.BattleConfigSkillType pBattleConfigSkillType)
    {
        List<int> tSkillList = null;
        switch (pBattleConfigSkillType)
        {
            case BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleAutoSkill:
                break;
            case BattleAutoSkillConfigController.BattleConfigSkillType.MainPetAutoSkill:
                break;
            case BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleSubSkill:
                break;
            case BattleAutoSkillConfigController.BattleConfigSkillType.MainPetSubSkill:
                break;
        }
        tSkillList = DemoSimulateHelper.SimulateSkillList(4 + (int)pBattleConfigSkillType);
        return tSkillList;
    }

    public List<long> GetHeroList()
    {
        GameDebuger.LogError("[TEMP]获取武将列表");
        List<long> tHeroList = new List<long>(){ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
        return tHeroList;
    }

    public long GetCurrentUsedHero()
    {
        GameDebuger.LogError("[TEMP]获取出战中的武将");
        return GetHeroList()[0];
    }

    public List<long> GetCurrentSelectedHero()
    {
        GameDebuger.LogError("[TEMP]获取已选中的武将列表");
        return GetHeroList().GetRange(0, 2);
    }

    #endregion

    #region 挂机设置

    public bool AutoFightIfOutTime
    {
        get{ return mAutoFightIfOutTime; }
        set
        {
            if (null != value)
            {
                mAutoFightIfOutTime = value;
                GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
            }
        }
    }

    public int AutoFightTime
    {
        get{ return mAutoFightTime; }
        set
        {
            if (mAutoFightTime != value)
            {
                mAutoFightTime = value;
                GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
            }
        }
    }

    public bool UseSubSkill
    {
        get{ return mUseSubSkill; }
        set
        {
            if (mUseSubSkill != value)
            {
                mUseSubSkill = value;
                GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
            }
        }
    }

    public int MainRoleAutoSkill
    {
        get{ return mMainRoleAutoSkill; }
        set
        { 
            if (mMainRoleAutoSkill == value)
                return;
            mMainRoleAutoSkill = value;
            GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }

    public int MainPetAutoSkill
    {
        get{ return mMainPetAutoSkill; }
        set
        {
            if (mMainPetAutoSkill == value)
                return;
            mMainPetAutoSkill = value;
            GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }

    public int MainRoleSubSkill
    {
        get{ return mMainRoleSubSkill; }
        set
        {
            if (mMainRoleSubSkill == value)
                return;
            mMainRoleSubSkill = value;
            GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }

    public int MainPetSubSkill
    {
        get{ return mMainPetSubSkill; }
        set
        {
            if (mMainPetSubSkill == value)
                return;
            mMainPetSubSkill = value;
            GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }

    public List<long> AutoSummonHeroList
    {
        get{ return mAutoSummonHeroList; }
        set
        {
            if (mAutoSummonHeroList == value)
                return;
            mAutoSummonHeroList = value;
            GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }

    public bool AutoTarget
    {
        get{ return mAutoTarget; }
        set
        {
            if (mAutoTarget == value)
                return;
            mAutoTarget = value;
            GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }

    #endregion
}

#region Enum and struct

#endregion