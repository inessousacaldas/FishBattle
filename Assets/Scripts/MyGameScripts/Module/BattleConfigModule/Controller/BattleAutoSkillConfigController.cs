// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : MarsZ
// Created : 03/30/2017 15:45:28
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using UnityEngine;
using System.Collections.Generic;
using AppDto;
using AppServices;
using System.Collections;

/// <summary>
/// This is the controller class for module BattleAutoSkillConfig, use this to control the ui or view , such as it's init , update or dispose.
/// @MarsZ in 03/30/2017 15:45:28
/// </summary>
public class BattleAutoSkillConfigController : MonoViewController<BattleAutoSkillConfigView>
{
    #region property and field

    private BattleConfigSkillType mSkillType = BattleConfigSkillType.Undefined;
    private int mCurrentSkill;
    //当前选择的技能
    private SkillButtonCellController mCurrentSkillItem;
    //列表中的当前选中的技能
    private SkillButtonCellController mCurrentSkillItemInList;

    #region const

    #endregion


    #region data

    private Dictionary<int,SkillButtonCellController> mSkillIdItemDic;

    #endregion

    #endregion

    #region interface functions

    /// <summary>
    /// 界面就绪后初始化，一个UI生命周期只会执行一次
    /// </summary>
    protected override void AfterInitView()
    {
        InitUI();
    }

    //添加事件监听 在gameeventlistener和eventlistener中添加的回调不需要自己remove，所以没有一个相应的RemoveCustomEvent函数
    protected override void RegistCustomEvent()
    {
        EventDelegate.Set(View.BtnClose_UIButton.onClick, ProxyBattleConfigModule.CloseAutoSkillConfig);
    }

    //收到界面销毁后的回收处理，比如引用置空等
    protected override void OnDispose()
    {
        mCurrentSkill = 0;
    }

    #endregion

    #region Event Handlers

    #endregion

    #region Public or open interface

    /// <summary>
    /// 更新界面的全部数据和显示
    /// </summary>
    public void Open(BattleConfigSkillType pSkillType)
    {
        mSkillType = pSkillType;
        UpdateData();
        UpdateAllUI();
    }

    private void UpdateData()
    {
        switch (mSkillType)
        {
            case BattleConfigSkillType.MainRoleAutoSkill:
                mCurrentSkill = ModelManager.BattleConfig.GetRoleAutoFightSkill();
                break;
            case BattleConfigSkillType.MainPetAutoSkill:
                mCurrentSkill = ModelManager.BattleConfig.GetPetAutoFightSkill();
                break;
            case BattleConfigSkillType.MainRoleSubSkill:
                mCurrentSkill = ModelManager.BattleConfig.GetRoleSubFightSkill();
                break;
            case BattleConfigSkillType.MainPetSubSkill:
                mCurrentSkill = ModelManager.BattleConfig.GetPetSubFightSkill();
                break;
        }
    }

    #endregion

    #region Update global UI

    private void UpdateAllUI()
    {
        UpdateSkillList();
    }

    private void InitUI()
    {
        mCurrentSkill = 0;
    }

    #endregion

    #region 当前技能

    private void UpdateCurrentSkill(Skill pSkill)
    {
        mCurrentSkill = null != pSkill ? pSkill.id : 0;
        UpdateCurrentSkillUI(pSkill);
    }

    private void UpdateCurrentSkillUI(Skill pSkill)
    {
        string tName = string.Empty;
        string tCost = string.Empty;

        string tDesc = string.Empty;
        CurrentSkill.UpdateData(pSkill);
        if (null != pSkill)
        {
            tName = pSkill.name;
//            tCost = string.Format("消耗：{0}", pSkill.actionPoint);

            GameDebuger.LogError("[TODO]重组技能动态描述");
            tDesc = pSkill.dynamicDesc;
        }
        View.LabelSkillName_UILabel.text = tName;
        View.LabelSkillCost_UILabel.text = tCost;

        View.LabelSkillDesc_UILabel.text = tDesc;
    }

    private SkillButtonCellController CurrentSkill
    {
        get
        {
            if (null == mCurrentSkillItem)
            {
                mCurrentSkillItem = CreateSkillItem(View.CurrentSkillIcon);
                mCurrentSkillItem.OnClickHandler = OnCurrentSkillClick;
            }
            return mCurrentSkillItem;
        }
    }

    private void OnCurrentSkillClick(SkillButtonCellController pSkillButtonCellController, Skill pSkill)
    {
        UpdateCurrentSkillItemInList(null);
    }

    #endregion

    #region 技能列表

    private void UpdateSkillList()
    {
        mSkillIdItemDic = new Dictionary<int, SkillButtonCellController>();
        List<int> tSkillIDList = ModelManager.BattleConfig.GetSkillList(mSkillType);
        SkillButtonCellController tSkillButtonCellController = null;
        int tSkillId;
        for (int tCounter = 0; tCounter < tSkillIDList.Count; tCounter++)
        {
            tSkillId = tSkillIDList[tCounter];
            tSkillButtonCellController = CreateSkillItem(View.GridSkillList_UIGrid.gameObject);
            tSkillButtonCellController.NameLabelVisible = true;
            tSkillButtonCellController.NamePosition = SkillButtonCellController.PivotPosition.Bottom;
            tSkillButtonCellController.UpdateData(tSkillId);
            tSkillButtonCellController.ShowSuperSkillSubscript = DemoSkillHelper.IsSuperSkill(tSkillId);
            tSkillButtonCellController.OnClickHandler = OnSkillListItemClick;
            mSkillIdItemDic.Add(tSkillId, tSkillButtonCellController);

            UpdateGray(mSkillType, tSkillButtonCellController);
            if (tSkillId == mCurrentSkill)
                CurrentSkillItemInList = tSkillButtonCellController;
        }
    }

    private SkillButtonCellController CreateSkillItem(GameObject pParent)
    {
        SkillButtonCellController tSkillButtonCellController = AddCachedChild<SkillButtonCellController,SkillButtonCell>(pParent, SkillButtonCell.NAME);
        tSkillButtonCellController.CDEnable = false;
        tSkillButtonCellController.CostEnable = false;
        tSkillButtonCellController.DragEnable = false;
        return tSkillButtonCellController;
    }

    private void UpdateGray(BattleAutoSkillConfigController.BattleConfigSkillType pBattleConfigSkillType, SkillButtonCellController pSkillButtonCellController)
    {
        bool tNeedGray = false;
//        if (pBattleConfigSkillType == BattleConfigSkillType.MainPetSubSkill || pBattleConfigSkillType == BattleConfigSkillType.MainRoleSubSkill)
//            tNeedGray = null == pSkillButtonCellController.Skill || pSkillButtonCellController.Skill.actionPoint > 1;
        pSkillButtonCellController.Gray = tNeedGray;
    }

    private void OnSkillListItemClick(SkillButtonCellController pSkillButtonCellController, Skill pSkill)
    {
        UpdateCurrentSkillItemInList(pSkillButtonCellController);
    }

    private void UpdateCurrentSkillItemInList(SkillButtonCellController pSkillButtonCellController)
    {
        CurrentSkillItemInList = pSkillButtonCellController;
        GameDebuger.LogError(string.Format("[TEMP]协议：设置自动技能，类型：{0}，技能ID：{1}", mSkillType, mCurrentSkill));
    }

    private SkillButtonCellController CurrentSkillItemInList
    {
        get{ return mCurrentSkillItemInList; }
        set
        {
            if (mCurrentSkillItemInList != value)
            {
                if (null != mCurrentSkillItemInList)
                    mCurrentSkillItemInList.Gray = false;
                mCurrentSkillItemInList = value;
                if (null != mCurrentSkillItemInList)
                {
                    mCurrentSkillItemInList.Gray = true;
                    UpdateCurrentSkill(mCurrentSkillItemInList.Skill);
                }
                else
                    UpdateCurrentSkill(null);
            }
        }
    }

    #endregion

    public enum BattleConfigSkillType
    {
        Undefined = 0,
        MainRoleAutoSkill = 1,
        MainPetAutoSkill = 2,
        MainRoleSubSkill = 3,
        MainPetSubSkill = 4
    }
}
