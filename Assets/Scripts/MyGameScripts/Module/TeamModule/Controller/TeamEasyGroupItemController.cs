// **********************************************************************
// Copyright (c) 2016 Baoyugame. All rights reserved.
// Author : CL-PC007
// Created : 7/10/2017 9:27:12 PM
// Desc	: Auto generated by MarsZ. update this if need.
// **********************************************************************

using System;
using System.Collections.Generic;
using AppDto;
using MyGameScripts.Gameplay.Player;
using UniRx;
using UnityEngine.SceneManagement;

/// <summary>
/// This is the controller class for module TeamEasyGroupItem, use this to control the ui or view , such as it's init , update or dispose.
/// @CL-PC007 in 7/10/2017 9:27:12 PM
/// </summary>
public class TeamEasyGroupItemController : MonolessViewController<TeamEasyGroupInfoItem>
{
    private IDisposable _disposable;
    
    private Subject<TeamDto> _itemClickEvent = new Subject<TeamDto>();
    public UniRx.IObservable<TeamDto> OnItemClickEvent {get { return _itemClickEvent; }}

    private TeamDto _teamDto;
    private List<UISprite> _memberList = new List<UISprite>();
    private List<UISprite> _magicList = new List<UISprite>(); 
    private List<UILabel> _lvList = new List<UILabel>(); 

    private TeamInvitationNotify _notify;

    private Subject<TeamInvitationNotify> _itemClick = new Subject<TeamInvitationNotify>();
    public UniRx.IObservable<TeamInvitationNotify> OnItemClick { get { return _itemClick; } }  

    protected override void AfterInitView ()
    {
        for (int i = 0; i < _view.memberGrid_Transform.childCount; i++)
        {
            var faction = _view.memberGrid_Transform.GetChild(i).GetComponent<UISprite>();
            _memberList.Add(faction);

            var magic = _view.MagicGrid_UIGrid.transform.GetChild(i).GetComponent<UISprite>();
            _magicList.Add(magic);

            var label = _view.LvGrid_UIGrid.transform.GetChild(i).GetComponent<UILabel>();
            _lvList.Add(label);
        }
    }

	protected override void RegistCustomEvent ()
    {
        _disposable = _view.applyBtn_UIButton.AsObservable().Subscribe(_ =>
        {
            if(_teamDto != null)
                _itemClickEvent.OnNext(_teamDto);
            else if(_notify != null)
                _itemClick.OnNext(_notify);
        });
    }

    protected override void OnDispose()
    {
        _itemClickEvent = _itemClickEvent.CloseOnceNull();
        _disposable.Dispose();
        _disposable = null;
    }
    
    public void UpdateData(TeamDto dto, int idx)
    {
        _teamDto = dto;
        var target = DataCache.getDtoByCls<TeamActionTarget>(dto.actionTargetId);
        _view.leaderName_UILabel.text = dto.leaderPlayerName;
        _view.targetName_UILabel.text = target == null ? "全部" : target.name;

        var leader = dto.members.Find(d => d.id == dto.leaderPlayerId);
        if(leader.playerDressInfo.charactor != null)
            UIHelper.SetPetIcon(_view.IconSprite_UISprite, leader.playerDressInfo.charactor.texture.ToString());

        _memberList.ForEach(sprite => sprite.spriteName = "btn_Ring");
        SetMemberList(dto.members);

        var player = dto.members.Find(d => d.id == ModelManager.Player.GetPlayerId());
        _view.applyBtn_UIButton.gameObject.SetActive(player == null);

        var scene = DataCache.getDtoByCls<SceneMap>(dto.sceneId);
        if(scene == null)
            TipManager.AddTip("Scene表找不到该场景,注意查看导表是否异常,场景id===" + dto.sceneId);
        _view.sceneLb_UILabel.text = scene == null ? "" : scene.name;
    }

    public void UpdateData(TeamInvitationNotify notify)
    {
        if (notify == null)
        {
            gameObject.SetActive(false);
            return;
        }

        _notify = notify;
        gameObject.SetActive(true);
        var target = DataCache.getDtoByCls<TeamActionTarget>(notify.teamTargetId);
        _view.targetName_UILabel.text = target == null ? "全部" : target.name;

        var inviter = notify.inviteTeamMembers.Find(d => d.id == notify.inviterPlayerId);
        _view.leaderName_UILabel.text = inviter == null ? "" : inviter.nickname;

        SetMemberList(notify.inviteTeamMembers);
        _view.BtnLb_UILabel.text = "同意";

        var secne = DataCache.getDtoByCls<SceneDto>(notify.sceneId);
        _view.sceneLb_UILabel.text = secne == null ? "特洛连" : secne.name;
    }

    private void SetMemberList(IEnumerable<TeamMemberSimpleDto> dtolist)
    {
        _memberList.ForEachI((item, idx) =>
        {
            if (dtolist.TryGetValue(idx) != null)
            {
                item.spriteName = string.Format("faction_{0}", dtolist.TryGetValue(idx).factionId);
                _magicList[idx].spriteName = GlobalAttr.GetMagicIcon(dtolist.TryGetValue(idx).slotsElementLimit);
            }
            else
            {
                item.spriteName = "";
                _magicList[idx].spriteName = "bg_team_ring";
            }
        });
    }

    private void SetMemberList(IEnumerable<TeamMemberDto> dtolist)
    {
        _memberList.ForEachI((item, idx) =>
        {
            var dto = dtolist.TryGetValue(idx);
            if (dto != null)
            {
                item.spriteName = string.Format("faction_{0}", dto.factionId);
                _magicList[idx].spriteName = GlobalAttr.GetMagicIcon(dto.slotsElementLimit);
                _lvList[idx].text = dto.grade.ToString();
            }
            else
            {
                item.spriteName = "";
                _magicList[idx].spriteName = "bg_team_ring";
                _lvList[idx].text = "";
            }
        });
    }
}
