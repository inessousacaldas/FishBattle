// Generated By Gecko,if you need to edit it,extends it!  wo diong

using scg = global::System.Collections.Generic;
using System;
using System.IO;
using System.Collections.Generic;

namespace AppProtobuf{
public class ProtobufConverterNet{
	private ProtobufConverterNet()
	{
		initFillFromActions();
		initFillIntoActions();
	}
    Dictionary<int, Action<System.Object, System.Object>> dtoFillIntoActions = new Dictionary<int, Action<System.Object, System.Object>>(506);
	Dictionary<int, Action<System.Object, System.Object>> dtoFillFromActions = new Dictionary<int, Action<System.Object, System.Object>>(506);
private static ProtobufConverterNet instance = new ProtobufConverterNet();
		public void ErrorCodeConverter_fillFrom(AppDto.ErrorCode target, ErrorCode source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.code = source.code;
			target.message = source.message;
		}

		public void ErrorCodeConverter_fillInto(AppDto.ErrorCode source, ErrorCode target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.code!=null)
				target.code = source.code;
			if(source.message!=null)
				target.message = source.message;
		}
		public void StaticConfigConverter_fillFrom(AppDto.StaticConfig target, StaticConfig source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.code = source.code;
			target.value = source.value;
			target.name = source.name;
		}

		public void StaticConfigConverter_fillInto(AppDto.StaticConfig source, StaticConfig target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.code!=null)
				target.code = source.code;
			if(source.value!=null)
				target.value = source.value;
			if(source.name!=null)
				target.name = source.name;
		}
		public void StaticStringConverter_fillFrom(AppDto.StaticString target, StaticString source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.code = source.code;
			target.message = source.message;
		}

		public void StaticStringConverter_fillInto(AppDto.StaticString source, StaticString target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.code!=null)
				target.code = source.code;
			if(source.message!=null)
				target.message = source.message;
		}
		public void TraceTypeConverter_fillFrom(AppDto.TraceType target, TraceType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.code = source.code;
			target.name = source.name;
			target.opt = source.opt;
			target.tip = source.tip;
			target.delay = source.delay;
		}

		public void TraceTypeConverter_fillInto(AppDto.TraceType source, TraceType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.code!=null)
				target.code = source.code;
			if(source.name!=null)
				target.name = source.name;
			target.opt=source.opt;
			target.tip=source.tip;
			target.delay=source.delay;
		}
		public void ErrorResponseConverter_fillFrom(AppDto.ErrorResponse target, ErrorResponse source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.serialId = source.serialId;
			target.message = source.message;
			if ( source.parentErrorResponse != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentErrorResponse);
			}
		}

		public void ErrorResponseConverter_fillInto(AppDto.ErrorResponse source, ErrorResponse target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.serialId=source.serialId;
			if(source.message!=null)
				target.message = source.message;
			if ( target.parentErrorResponse == null ) {
				target.parentErrorResponse = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentErrorResponse);
		}
		public void GeneralRequestConverter_fillFrom(AppDto.GeneralRequest target, GeneralRequest source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.serial = source.serial;
			target.sid = source.sid;
			target.action = source.action;
			if (source.xparams != null) {
				List<object> items = new List<object>();
				target.xparams = items;
				foreach (GameObjectTypedMessage item in source.xparams) {
					int message_type_id = item.message_type_id;
					System.Object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null)
						throw new IOException("parse data error");
					items.Add(result);
				}
			}else{
				List<object> items = new List<object>();
				target.xparams = items;
			}
			target.needResponse = source.needResponse;
		}

		public void GeneralRequestConverter_fillInto(AppDto.GeneralRequest source, GeneralRequest target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.serial=source.serial;
			target.sid=source.sid;
			if(source.action!=null)
				target.action = source.action;
			if (source.xparams != null){
				foreach(object item in source.xparams){
					GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(item);
					if (protobufModel == null)
						throw new IOException("pack data error");
					target.xparams.Add(protobufModel);
				}
			}
			target.needResponse=source.needResponse;
		}
		public void GeneralResponseConverter_fillFrom(AppDto.GeneralResponse target, GeneralResponse source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.serial = source.serial;
		}

		public void GeneralResponseConverter_fillInto(AppDto.GeneralResponse source, GeneralResponse target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.serial=source.serial;
		}
		public void SuccessResponseConverter_fillFrom(AppDto.SuccessResponse target, SuccessResponse source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSuccessResponse != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSuccessResponse);
			}
		}

		public void SuccessResponseConverter_fillInto(AppDto.SuccessResponse source, SuccessResponse target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSuccessResponse == null ) {
				target.parentSuccessResponse = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSuccessResponse);
		}
		public void AppErrorCodesConverter_fillFrom(AppDto.AppErrorCodes target, AppErrorCodes source){
			//no property
		}

		public void AppErrorCodesConverter_fillInto(AppDto.AppErrorCodes source, AppErrorCodes target){
			//no property
		}
		public void AppStaticConfigsConverter_fillFrom(AppDto.AppStaticConfigs target, AppStaticConfigs source){
			//no property
		}

		public void AppStaticConfigsConverter_fillInto(AppDto.AppStaticConfigs source, AppStaticConfigs target){
			//no property
		}
		public void AppStaticStringsConverter_fillFrom(AppDto.AppStaticStrings target, AppStaticStrings source){
			//no property
		}

		public void AppStaticStringsConverter_fillInto(AppDto.AppStaticStrings source, AppStaticStrings target){
			//no property
		}
		public void AppTraceTypesConverter_fillFrom(AppDto.AppTraceTypes target, AppTraceTypes source){
			//no property
		}

		public void AppTraceTypesConverter_fillInto(AppDto.AppTraceTypes source, AppTraceTypes target){
			//no property
		}
		public void DataListConverter_fillFrom(AppDto.DataList target, DataList source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null) {
				List<object> items = new List<object>();
				target.items = items;
				foreach (GameObjectTypedMessage item in source.items) {
					int message_type_id = item.message_type_id;
					System.Object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null)
						throw new IOException("parse data error");
					items.Add(result);
				}
			}else{
				List<object> items = new List<object>();
				target.items = items;
			}
			if ( source.parentDataList != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentDataList);
			}
		}

		public void DataListConverter_fillInto(AppDto.DataList source, DataList target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null){
				foreach(object item in source.items){
					GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(item);
					if (protobufModel == null)
						throw new IOException("pack data error");
					target.items.Add(protobufModel);
				}
			}
			if ( target.parentDataList == null ) {
				target.parentDataList = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentDataList);
		}
		public void DataListVersionConverter_fillFrom(AppDto.DataListVersion target, DataListVersion source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.type = source.type;
			target.ver = source.ver;
			target.service = source.service;
			target.modifyAt = source.modifyAt;
		}

		public void DataListVersionConverter_fillInto(AppDto.DataListVersion source, DataListVersion target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.type!=null)
				target.type = source.type;
			if(source.ver!=null)
				target.ver = source.ver;
			if(source.service!=null)
				target.service = source.service;
			target.modifyAt=source.modifyAt;
		}
		public void GeneralItemConverter_fillFrom(AppDto.GeneralItem target, GeneralItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.icon = source.icon;
			target.description = source.description;
		}

		public void GeneralItemConverter_fillInto(AppDto.GeneralItem source, GeneralItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.icon!=null)
				target.icon = source.icon;
			if(source.description!=null)
				target.description = source.description;
		}
		public void RealItemConverter_fillFrom(AppDto.RealItem target, RealItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemType = source.itemType;
			target.maxOverlay = source.maxOverlay;
			target.circulationType = source.circulationType;
			target.buyPrice = source.buyPrice;
			target.salePrice = source.salePrice;
			target.applyTime = source.applyTime;
			target.stallable = source.stallable;
			target.giftable = source.giftable;
			target.giftPrice = source.giftPrice;
			if ( source.parentRealItem != null ) {
				GeneralItemConverter_fillFrom(target,source.parentRealItem);
			}
		}

		public void RealItemConverter_fillInto(AppDto.RealItem source, RealItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemType=source.itemType;
			target.maxOverlay=source.maxOverlay;
			target.circulationType=source.circulationType;
			target.buyPrice=source.buyPrice;
			target.salePrice=source.salePrice;
			target.applyTime=source.applyTime;
			target.stallable=source.stallable;
			target.giftable=source.giftable;
			target.giftPrice=source.giftPrice;
			if ( target.parentRealItem == null ) {
				target.parentRealItem = new GeneralItem();
			}
			GeneralItemConverter_fillInto(source,target.parentRealItem);
		}
		public void VirtualItemConverter_fillFrom(AppDto.VirtualItem target, VirtualItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVirtualItem != null ) {
				GeneralItemConverter_fillFrom(target,source.parentVirtualItem);
			}
		}

		public void VirtualItemConverter_fillInto(AppDto.VirtualItem source, VirtualItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVirtualItem == null ) {
				target.parentVirtualItem = new GeneralItem();
			}
			GeneralItemConverter_fillInto(source,target.parentVirtualItem);
		}
		public void FactionConverter_fillFrom(AppDto.Faction target, Faction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.description = source.description;
			target.factionSceneId = source.factionSceneId;
			target.classLevel = source.classLevel;
			target.limitLevel = source.limitLevel;
			if (source.skills != null) {
				List<int> items = new List<int>();
				target.skills = items;
                foreach (int item in source.skills)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.skills = items;
			}
			if (source.specialSkills != null) {
				List<int> items = new List<int>();
				target.specialSkills = items;
                foreach (int item in source.specialSkills)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.specialSkills = items;
			}
			target.open = source.open;
			target.classType = source.classType;
			if (source.defaultAptitudeDistrubute != null) {
				List<int> items = new List<int>();
				target.defaultAptitudeDistrubute = items;
				foreach (int item in source.defaultAptitudeDistrubute)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.defaultAptitudeDistrubute = items;
			}
			if (source.newCharactorAptitudeDistrubute != null) {
				List<int> items = new List<int>();
				target.newCharactorAptitudeDistrubute = items;
				foreach (int item in source.newCharactorAptitudeDistrubute)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.newCharactorAptitudeDistrubute = items;
			}
			if (source.potentialPoints != null) {
				List<int> items = new List<int>();
				target.potentialPoints = items;
				foreach (int item in source.potentialPoints)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.potentialPoints = items;
			}
			target.potentialLimits = source.potentialLimits;
			if (source.talents != null) {
				List<int> items = new List<int>();
				target.talents = items;
				foreach (int item in source.talents)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.talents = items;
			}
			if (source.recommendTalents != null) {
				List<int> items = new List<int>();
				target.recommendTalents = items;
				foreach (int item in source.recommendTalents)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.recommendTalents = items;
			}
			target.recommendSpeciality = source.recommendSpeciality;
			if (source.crafts != null) {
				List<int> items = new List<int>();
				target.crafts = items;
                foreach (int item in source.crafts)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.crafts = items;
			}
			target.defaultSCrafts = source.defaultSCrafts;
			target.simpleSkillId = source.simpleSkillId;
			target.orbmentId = source.orbmentId;
			target.icon = source.icon;
			target.mainProperty = source.mainProperty;
			target.shortDescription = source.shortDescription;
			target.function = source.function;
			target.weaponTypeName = source.weaponTypeName;
			target.weaponModelId = source.weaponModelId;
			target.standardWeaponId = source.standardWeaponId;
		}

		public void FactionConverter_fillInto(AppDto.Faction source, Faction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.description!=null)
				target.description = source.description;
			target.factionSceneId=source.factionSceneId;
			target.classLevel=source.classLevel;
			target.limitLevel=source.limitLevel;
			if (source.skills != null){
				foreach(int skills in source.skills)
					target.skills.Add(skills);
			}
			if (source.specialSkills != null){
				foreach(int specialSkills in source.specialSkills)
					target.specialSkills.Add(specialSkills);
			}
			target.open=source.open;
			target.classType=source.classType;
			if (source.defaultAptitudeDistrubute != null){
				foreach(int defaultAptitudeDistrubute in source.defaultAptitudeDistrubute)
					target.defaultAptitudeDistrubute.Add(defaultAptitudeDistrubute);
			}
			if (source.newCharactorAptitudeDistrubute != null){
				foreach(int newCharactorAptitudeDistrubute in source.newCharactorAptitudeDistrubute)
					target.newCharactorAptitudeDistrubute.Add(newCharactorAptitudeDistrubute);
			}
			if (source.potentialPoints != null){
				foreach(int potentialPoints in source.potentialPoints)
					target.potentialPoints.Add(potentialPoints);
			}
			if(source.potentialLimits!=null)
				target.potentialLimits = source.potentialLimits;
			if (source.talents != null){
				foreach(int talents in source.talents)
					target.talents.Add(talents);
			}
			if (source.recommendTalents != null){
				foreach(int recommendTalents in source.recommendTalents)
					target.recommendTalents.Add(recommendTalents);
			}
			if(source.recommendSpeciality!=null)
				target.recommendSpeciality = source.recommendSpeciality;
			if (source.crafts != null){
				foreach(int crafts in source.crafts)
					target.crafts.Add(crafts);
			}
			target.defaultSCrafts=source.defaultSCrafts;
			target.simpleSkillId=source.simpleSkillId;
			target.orbmentId=source.orbmentId;
			if(source.icon!=null)
				target.icon = source.icon;
			target.mainProperty=source.mainProperty;
			if(source.shortDescription!=null)
				target.shortDescription = source.shortDescription;
			if(source.function!=null)
				target.function = source.function;
			if(source.weaponTypeName!=null)
				target.weaponTypeName = source.weaponTypeName;
			target.weaponModelId=source.weaponModelId;
			target.standardWeaponId=source.standardWeaponId;
		}
		public void CreatePlayerDtoConverter_fillFrom(AppDto.CreatePlayerDto target, CreatePlayerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.grade = source.grade;
			target.gameServerId = source.gameServerId;
			target.factionId = source.factionId;
			target.charactorId = source.charactorId;
		}

		public void CreatePlayerDtoConverter_fillInto(AppDto.CreatePlayerDto source, CreatePlayerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.grade=source.grade;
			target.gameServerId=source.gameServerId;
			target.factionId=source.factionId;
			target.charactorId=source.charactorId;
		}
		public void PlayerDtoConverter_fillFrom(AppDto.PlayerDto target, PlayerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerDto);
			}
			target.id = source.id;
			target.name = source.name;
			target.grade = source.grade;
			target.gameServerId = source.gameServerId;
			target.factionId = source.factionId;
			target.charactorId = source.charactorId;
			target.sceneId = source.sceneId;
			target.gameServerTime = source.gameServerTime;
						if (source.dressInfo!=null) {
				AppDto.PlayerDressInfoDto retDressInfo = new AppDto.PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillFrom(retDressInfo, source.dressInfo);
				target.dressInfo = retDressInfo;
			}
									if (source.wealth!=null) {
				AppDto.WealthNotify retWealth = new AppDto.WealthNotify();
				WealthNotifyConverter_fillFrom(retWealth, source.wealth);
				target.wealth = retWealth;
			}
						target.partyName = source.partyName;
			target.balance = source.balance;
			target.vipLevel = source.vipLevel;
			target.roleCreateTime = source.roleCreateTime;
		}

		public void PlayerDtoConverter_fillInto(AppDto.PlayerDto source, PlayerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerDto == null ) {
				target.parentPlayerDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerDto);
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.grade=source.grade;
			target.gameServerId=source.gameServerId;
			target.factionId=source.factionId;
			target.charactorId=source.charactorId;
			target.sceneId=source.sceneId;
			target.gameServerTime=source.gameServerTime;
			if(source.dressInfo!=null){
				PlayerDressInfoDto protobufModel = new PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillInto(source.dressInfo, protobufModel);
				target.dressInfo = protobufModel;
			}
			if(source.wealth!=null){
				WealthNotify protobufModel = new WealthNotify();
				WealthNotifyConverter_fillInto(source.wealth, protobufModel);
				target.wealth = protobufModel;
			}
			if(source.partyName!=null)
				target.partyName = source.partyName;
			target.balance=source.balance;
			target.vipLevel=source.vipLevel;
			target.roleCreateTime=source.roleCreateTime;
		}
		public void PlayerNameDtoConverter_fillFrom(AppDto.PlayerNameDto target, PlayerNameDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerNameDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerNameDto);
			}
			target.name = source.name;
		}

		public void PlayerNameDtoConverter_fillInto(AppDto.PlayerNameDto source, PlayerNameDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerNameDto == null ) {
				target.parentPlayerNameDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerNameDto);
			if(source.name!=null)
				target.name = source.name;
		}
		public void GeneralCharactorConverter_fillFrom(AppDto.GeneralCharactor target, GeneralCharactor source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.texture = source.texture;
			target.modelId = source.modelId;
			target.description = source.description;
			target.anim = source.anim;
			target.mutateColor = source.mutateColor;
			target.mutateTexture = source.mutateTexture;
			target.sound = source.sound;
			target.icon = source.icon;
		}

		public void GeneralCharactorConverter_fillInto(AppDto.GeneralCharactor source, GeneralCharactor target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.texture=source.texture;
			target.modelId=source.modelId;
			if(source.description!=null)
				target.description = source.description;
			if(source.anim!=null)
				target.anim = source.anim;
			if(source.mutateColor!=null)
				target.mutateColor = source.mutateColor;
			target.mutateTexture=source.mutateTexture;
			if(source.sound!=null)
				target.sound = source.sound;
			if(source.icon!=null)
				target.icon = source.icon;
		}
		public void MainCharactorConverter_fillFrom(AppDto.MainCharactor target, MainCharactor source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.gender = source.gender;
			if (source.factionIds != null) {
				List<int> items = new List<int>();
				target.factionIds = items;
				foreach (int item in source.factionIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.factionIds = items;
			}
			if ( source.parentMainCharactor != null ) {
				GeneralCharactorConverter_fillFrom(target,source.parentMainCharactor);
			}
			target.battleTest = source.battleTest;
			target.headicon = source.headicon;
			target.usable = source.usable;
		}

		public void MainCharactorConverter_fillInto(AppDto.MainCharactor source, MainCharactor target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.gender=source.gender;
			if (source.factionIds != null){
				foreach(int factionIds in source.factionIds)
					target.factionIds.Add(factionIds);
			}
			if ( target.parentMainCharactor == null ) {
				target.parentMainCharactor = new GeneralCharactor();
			}
			GeneralCharactorConverter_fillInto(source,target.parentMainCharactor);
			if(source.battleTest!=null)
				target.battleTest = source.battleTest;
			if(source.headicon!=null)
				target.headicon = source.headicon;
			target.usable=source.usable;
		}
		public void GameServerGradeConverter_fillFrom(AppDto.GameServerGrade target, GameServerGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.grade = source.grade;
			target.max = source.max;
		}

		public void GameServerGradeConverter_fillInto(AppDto.GameServerGrade source, GameServerGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.grade=source.grade;
			target.max=source.max;
		}
		public void GameServerGradeDtoConverter_fillFrom(AppDto.GameServerGradeDto target, GameServerGradeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.serverGrade = source.serverGrade;
			target.openTime = source.openTime;
			target.maxGrade = source.maxGrade;
		}

		public void GameServerGradeDtoConverter_fillInto(AppDto.GameServerGradeDto source, GameServerGradeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.serverGrade=source.serverGrade;
			target.openTime=source.openTime;
			target.maxGrade=source.maxGrade;
		}
		public void GameServerTimeDtoConverter_fillFrom(AppDto.GameServerTimeDto target, GameServerTimeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.time = source.time;
		}

		public void GameServerTimeDtoConverter_fillInto(AppDto.GameServerTimeDto source, GameServerTimeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.time=source.time;
		}
		public void SceneMapConverter_fillFrom(AppDto.SceneMap target, SceneMap source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.type = source.type;
			target.maxSize = source.maxSize;
			target.width = source.width;
			target.height = source.height;
			target.x = source.x;
			target.y = source.y;
			target.z = source.z;
			target.battleMapId = source.battleMapId;
			target.resId = source.resId;
			target.music = source.music;
			target.description = source.description;
			target.serverId = source.serverId;
			target.flyable = source.flyable;
			if (source.monsterIds != null) {
				List<int> items = new List<int>();
				target.monsterIds = items;
                foreach (int item in source.monsterIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.monsterIds = items;
			}
			target.fallItemRate = source.fallItemRate;
			target.levelLimit = source.levelLimit;
			target.temp = source.temp;
			target.capability = source.capability;
			target.defaultExistToSceneId = source.defaultExistToSceneId;
			target.enterByNpcOnly = source.enterByNpcOnly;
			target.canFlyIn = source.canFlyIn;
			target.shadowDir = source.shadowDir;
			target.fallRewardId = source.fallRewardId;
			target.forbidDuelBattle = source.forbidDuelBattle;
			target.sceneFunctionType = source.sceneFunctionType;
			target.lockedCamera = source.lockedCamera;
		}

		public void SceneMapConverter_fillInto(AppDto.SceneMap source, SceneMap target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.type=source.type;
			target.maxSize=source.maxSize;
			target.width=source.width;
			target.height=source.height;
			target.x=source.x;
			target.y=source.y;
			target.z=source.z;
			target.battleMapId=source.battleMapId;
			target.resId=source.resId;
			if(source.music!=null)
				target.music = source.music;
			if(source.description!=null)
				target.description = source.description;
			target.serverId=source.serverId;
			target.flyable=source.flyable;
			if (source.monsterIds != null){
				foreach(int monsterIds in source.monsterIds)
					target.monsterIds.Add(monsterIds);
			}
			target.fallItemRate=source.fallItemRate;
			target.levelLimit=source.levelLimit;
			target.temp=source.temp;
			target.capability=source.capability;
			target.defaultExistToSceneId=source.defaultExistToSceneId;
			target.enterByNpcOnly=source.enterByNpcOnly;
			target.canFlyIn=source.canFlyIn;
			if(source.shadowDir!=null)
				target.shadowDir = source.shadowDir;
			target.fallRewardId=source.fallRewardId;
			target.forbidDuelBattle=source.forbidDuelBattle;
			target.sceneFunctionType=source.sceneFunctionType;
			target.lockedCamera=source.lockedCamera;
		}
		public void AfterLoginDtoConverter_fillFrom(AppDto.AfterLoginDto target, AfterLoginDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAfterLoginDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAfterLoginDto);
			}
			target.sceneId = source.sceneId;
						if (source.charactor!=null) {
				AppDto.CharactorDto retCharactor = new AppDto.CharactorDto();
				CharactorDtoConverter_fillFrom(retCharactor, source.charactor);
				target.charactor = retCharactor;
			}
						target.x = source.x;
			target.z = source.z;
						if (source.gameServerGradeDto!=null) {
				AppDto.GameServerGradeDto retGameServerGradeDto = new AppDto.GameServerGradeDto();
				GameServerGradeDtoConverter_fillFrom(retGameServerGradeDto, source.gameServerGradeDto);
				target.gameServerGradeDto = retGameServerGradeDto;
			}
						target.plotId = source.plotId;
						if (source.mainCrewInfo!=null) {
				AppDto.MainCrewInfoNotify retMainCrewInfo = new AppDto.MainCrewInfoNotify();
				MainCrewInfoNotifyConverter_fillFrom(retMainCrewInfo, source.mainCrewInfo);
				target.mainCrewInfo = retMainCrewInfo;
			}
						target.currentTowerId = source.currentTowerId;
			if (source.monsterInfo != null) {
				List<int> items = new List<int>();
				target.monsterInfo = items;
                foreach (int item in source.monsterInfo)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.monsterInfo = items;
			}
			target.towerResetTimes = source.towerResetTimes;
			target.remainCrewCurrencyAddTimes = source.remainCrewCurrencyAddTimes;
			target.dailyQuestion = source.dailyQuestion;
			if (source.cancelNotify != null) {
				List<int> items = new List<int>();
				target.cancelNotify = items;
				foreach (int item in source.cancelNotify)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.cancelNotify = items;
			}
			target.partyName = source.partyName;
			target.balance = source.balance;
			target.vipLevel = source.vipLevel;
			target.roleCreateTime = source.roleCreateTime;
		}

		public void AfterLoginDtoConverter_fillInto(AppDto.AfterLoginDto source, AfterLoginDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAfterLoginDto == null ) {
				target.parentAfterLoginDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAfterLoginDto);
			target.sceneId=source.sceneId;
			if(source.charactor!=null){
				CharactorDto protobufModel = new CharactorDto();
				CharactorDtoConverter_fillInto(source.charactor, protobufModel);
				target.charactor = protobufModel;
			}
			target.x=source.x;
			target.z=source.z;
			if(source.gameServerGradeDto!=null){
				GameServerGradeDto protobufModel = new GameServerGradeDto();
				GameServerGradeDtoConverter_fillInto(source.gameServerGradeDto, protobufModel);
				target.gameServerGradeDto = protobufModel;
			}
			target.plotId=source.plotId;
			if(source.mainCrewInfo!=null){
				MainCrewInfoNotify protobufModel = new MainCrewInfoNotify();
				MainCrewInfoNotifyConverter_fillInto(source.mainCrewInfo, protobufModel);
				target.mainCrewInfo = protobufModel;
			}
			target.currentTowerId=source.currentTowerId;
			if (source.monsterInfo != null){
				foreach(int monsterInfo in source.monsterInfo)
					target.monsterInfo.Add(monsterInfo);
			}
			target.towerResetTimes=source.towerResetTimes;
			target.remainCrewCurrencyAddTimes=source.remainCrewCurrencyAddTimes;
			target.dailyQuestion=source.dailyQuestion;
			if (source.cancelNotify != null){
				foreach(int cancelNotify in source.cancelNotify)
					target.cancelNotify.Add(cancelNotify);
			}
			if(source.partyName!=null)
				target.partyName = source.partyName;
			target.balance=source.balance;
			target.vipLevel=source.vipLevel;
			target.roleCreateTime=source.roleCreateTime;
		}
		public void MonsterConverter_fillFrom(AppDto.Monster target, Monster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			if (source.activeSkillIds != null) {
				List<int> items = new List<int>();
				target.activeSkillIds = items;
                foreach (int item in source.activeSkillIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.activeSkillIds = items;
			}
			target.hp = source.hp;
			target.attack = source.attack;
			target.defense = source.defense;
			target.speed = source.speed;
			target.magicAttack = source.magicAttack;
			target.magicDefense = source.magicDefense;
			target.shortDesc = source.shortDesc;
			target.simpleSkillId = source.simpleSkillId;
			target.texture = source.texture;
			target.modelId = source.modelId;
			target.anim = source.anim;
			target.ep = source.ep;
			target.scale = source.scale;
			target.mutateColor = source.mutateColor;
			target.mutateTexture = source.mutateTexture;
			target.wpmodel = source.wpmodel;
		}

		public void MonsterConverter_fillInto(AppDto.Monster source, Monster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if (source.activeSkillIds != null){
				foreach(int activeSkillIds in source.activeSkillIds)
					target.activeSkillIds.Add(activeSkillIds);
			}
			if(source.hp!=null)
				target.hp = source.hp;
			if(source.attack!=null)
				target.attack = source.attack;
			if(source.defense!=null)
				target.defense = source.defense;
			if(source.speed!=null)
				target.speed = source.speed;
			if(source.magicAttack!=null)
				target.magicAttack = source.magicAttack;
			if(source.magicDefense!=null)
				target.magicDefense = source.magicDefense;
			if(source.shortDesc!=null)
				target.shortDesc = source.shortDesc;
			target.simpleSkillId=source.simpleSkillId;
			target.texture=source.texture;
			target.modelId=source.modelId;
			target.anim=source.anim;
			if(source.ep!=null)
				target.ep = source.ep;
			target.scale=source.scale;
			if(source.mutateColor!=null)
				target.mutateColor = source.mutateColor;
			target.mutateTexture=source.mutateTexture;
			target.wpmodel=source.wpmodel;
		}
		public void SkillConverter_fillFrom(AppDto.Skill target, Skill source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.logicId = source.logicId;
			target.hitRate = source.hitRate;
			target.skillAiId = source.skillAiId;
			target.icon = source.icon;
			target.clientEffectType = source.clientEffectType;
			target.clientSkillType = source.clientSkillType;
			target.atOnce = source.atOnce;
			target.shortDescription = source.shortDescription;
			target.targetNum = source.targetNum;
			target.skillAttackType = source.skillAttackType;
			target.singleActionPlayTime = source.singleActionPlayTime;
			target.actionReadyPlayTime = source.actionReadyPlayTime;
			target.actionEndPlayTime = source.actionEndPlayTime;
			target.targetSelectorId = source.targetSelectorId;
			target.skillType = source.skillType;
			target.dynamicDesc = source.dynamicDesc;
			target.previewId = source.previewId;
			target.skillTimeAfter = source.skillTimeAfter;
			target.skillTimeBefore = source.skillTimeBefore;
			target.elementId = source.elementId;
			target.type = source.type;
			target.skillMapId = source.skillMapId;
			target.scopeId = source.scopeId;
			target.consume = source.consume;
			target.postIndex = source.postIndex;
			target.targetSelRuleId = source.targetSelRuleId;
		}

		public void SkillConverter_fillInto(AppDto.Skill source, Skill target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.logicId=source.logicId;
			target.hitRate=source.hitRate;
			target.skillAiId=source.skillAiId;
			if(source.icon!=null)
				target.icon = source.icon;
			target.clientEffectType=source.clientEffectType;
			target.clientSkillType=source.clientSkillType;
			target.atOnce=source.atOnce;
			if(source.shortDescription!=null)
				target.shortDescription = source.shortDescription;
			target.targetNum=source.targetNum;
			target.skillAttackType=source.skillAttackType;
			target.singleActionPlayTime=source.singleActionPlayTime;
			target.actionReadyPlayTime=source.actionReadyPlayTime;
			target.actionEndPlayTime=source.actionEndPlayTime;
			target.targetSelectorId=source.targetSelectorId;
			target.skillType=source.skillType;
			if(source.dynamicDesc!=null)
				target.dynamicDesc = source.dynamicDesc;
			target.previewId=source.previewId;
			target.skillTimeAfter=source.skillTimeAfter;
			target.skillTimeBefore=source.skillTimeBefore;
			target.elementId=source.elementId;
			target.type=source.type;
			target.skillMapId=source.skillMapId;
			target.scopeId=source.scopeId;
			target.consume=source.consume;
			target.postIndex=source.postIndex;
			target.targetSelRuleId=source.targetSelRuleId;
		}
		public void PlayerDressInfoConverter_fillFrom(AppDto.PlayerDressInfo target, PlayerDressInfo source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.charactorId = source.charactorId;
			target.transformModelId = source.transformModelId;
			target.wpmodel = source.wpmodel;
			target.dressDyeId = source.dressDyeId;
			target.hairDyeId = source.hairDyeId;
			target.accoutermentDyeId = source.accoutermentDyeId;
			target.fashionId = source.fashionId;
			target.dyeCaseId = source.dyeCaseId;
			target.ornamentId = source.ornamentId;
			target.showDress = source.showDress;
			if (source.fashionDressIds != null) {
				List<int> items = new List<int>();
				target.fashionDressIds = items;
				foreach (int item in source.fashionDressIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.fashionDressIds = items;
			}
			target.weaponEffect = source.weaponEffect;
			target.petOrnamentDyeCaseId = source.petOrnamentDyeCaseId;
		}

		public void PlayerDressInfoConverter_fillInto(AppDto.PlayerDressInfo source, PlayerDressInfo target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.charactorId=source.charactorId;
			target.transformModelId=source.transformModelId;
			target.wpmodel=source.wpmodel;
			target.dressDyeId=source.dressDyeId;
			target.hairDyeId=source.hairDyeId;
			target.accoutermentDyeId=source.accoutermentDyeId;
			target.fashionId=source.fashionId;
			target.dyeCaseId=source.dyeCaseId;
			target.ornamentId=source.ornamentId;
			target.showDress=source.showDress;
			if (source.fashionDressIds != null){
				foreach(int fashionDressIds in source.fashionDressIds)
					target.fashionDressIds.Add(fashionDressIds);
			}
			target.weaponEffect=source.weaponEffect;
			target.petOrnamentDyeCaseId=source.petOrnamentDyeCaseId;
		}
		public void ModelConverter_fillFrom(AppDto.Model target, Model source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.uiPos = source.uiPos;
			target.uiScale = source.uiScale;
			target.magicSkillSound = source.magicSkillSound;
			target.phySkillSound = source.phySkillSound;
			target.hitSound = source.hitSound;
			target.scale = source.scale;
			target.faceOffsetX = source.faceOffsetX;
			target.faceOffsetY = source.faceOffsetY;
		}

		public void ModelConverter_fillInto(AppDto.Model source, Model target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.uiPos=source.uiPos;
			target.uiScale=source.uiScale;
			if(source.magicSkillSound!=null)
				target.magicSkillSound = source.magicSkillSound;
			if(source.phySkillSound!=null)
				target.phySkillSound = source.phySkillSound;
			if(source.hitSound!=null)
				target.hitSound = source.hitSound;
			target.scale=source.scale;
			target.faceOffsetX=source.faceOffsetX;
			target.faceOffsetY=source.faceOffsetY;
		}
		public void FighterReadyNotifyDtoConverter_fillFrom(AppDto.FighterReadyNotifyDto target, FighterReadyNotifyDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.skillId = source.skillId;
			target.releaseTime = source.releaseTime;
			target.battleId = source.battleId;
		}

		public void FighterReadyNotifyDtoConverter_fillInto(AppDto.FighterReadyNotifyDto source, FighterReadyNotifyDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.skillId=source.skillId;
			target.releaseTime=source.releaseTime;
			target.battleId=source.battleId;
		}
		public void SkillAiConverter_fillFrom(AppDto.SkillAi target, SkillAi source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.description = source.description;
		}

		public void SkillAiConverter_fillInto(AppDto.SkillAi source, SkillAi target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.description!=null)
				target.description = source.description;
		}
		public void MonsterGroupConverter_fillFrom(AppDto.MonsterGroup target, MonsterGroup source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			if (source.monsterIds != null) {
				List<int> items = new List<int>();
				target.monsterIds = items;
                foreach (int item in source.monsterIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.monsterIds = items;
			}
		}

		public void MonsterGroupConverter_fillInto(AppDto.MonsterGroup source, MonsterGroup target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if (source.monsterIds != null){
				foreach(int monsterIds in source.monsterIds)
					target.monsterIds.Add(monsterIds);
			}
		}
		public void SceneDtoConverter_fillFrom(AppDto.SceneDto target, SceneDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			if (source.objects != null) {
				List<AppDto.SceneObjectDto> items = new List<AppDto.SceneObjectDto>();
				target.objects = items;
				foreach (GameObjectTypedMessage item in source.objects) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.SceneObjectDto))
						throw new IOException("parse data error");
					items.Add((AppDto.SceneObjectDto)result);
				}
			}else{
				List<AppDto.SceneObjectDto> items = new List<AppDto.SceneObjectDto>();
				target.objects = items;
			}
		}

		public void SceneDtoConverter_fillInto(AppDto.SceneDto source, SceneDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if (source.objects != null){
				foreach(AppDto.SceneObjectDto objects in source.objects){
					GameObjectTypedMessage msgObjects = ProtobufUtilsNet.packInto(objects);
					if (msgObjects == null)
						throw new IOException("pack data error");
					target.objects.Add(msgObjects);
				}
			}
		}
		public void SceneObjectDtoConverter_fillFrom(AppDto.SceneObjectDto target, SceneObjectDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.x = source.x;
			target.z = source.z;
			target.sceneId = source.sceneId;
			target.objType = source.objType;
			target.moveSpeed = source.moveSpeed;
			target.battleId = source.battleId;
		}

		public void SceneObjectDtoConverter_fillInto(AppDto.SceneObjectDto source, SceneObjectDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.x=source.x;
			target.z=source.z;
			target.sceneId=source.sceneId;
			target.objType=source.objType;
			target.moveSpeed=source.moveSpeed;
			target.battleId=source.battleId;
		}
		public void ScenePlayerDtoConverter_fillFrom(AppDto.ScenePlayerDto target, ScenePlayerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentScenePlayerDto != null ) {
				SceneObjectDtoConverter_fillFrom(target,source.parentScenePlayerDto);
			}
			target.grade = source.grade;
			target.charactorId = source.charactorId;
			target.factionId = source.factionId;
			target.teamId = source.teamId;
			target.teamStatus = source.teamStatus;
			target.teamIndex = source.teamIndex;
						if (source.dressInfoDto!=null) {
				AppDto.PlayerDressInfoDto retDressInfoDto = new AppDto.PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillFrom(retDressInfoDto, source.dressInfoDto);
				target.dressInfoDto = retDressInfoDto;
			}
									if (source.guildInfoDto!=null) {
				AppDto.PlayerGuildInfoDto retGuildInfoDto = new AppDto.PlayerGuildInfoDto();
				PlayerGuildInfoDtoConverter_fillFrom(retGuildInfoDto, source.guildInfoDto);
				target.guildInfoDto = retGuildInfoDto;
			}
					}

		public void ScenePlayerDtoConverter_fillInto(AppDto.ScenePlayerDto source, ScenePlayerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentScenePlayerDto == null ) {
				target.parentScenePlayerDto = new SceneObjectDto();
			}
			SceneObjectDtoConverter_fillInto(source,target.parentScenePlayerDto);
			target.grade=source.grade;
			target.charactorId=source.charactorId;
			target.factionId=source.factionId;
			target.teamId=source.teamId;
			target.teamStatus=source.teamStatus;
			target.teamIndex=source.teamIndex;
			if(source.dressInfoDto!=null){
				PlayerDressInfoDto protobufModel = new PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillInto(source.dressInfoDto, protobufModel);
				target.dressInfoDto = protobufModel;
			}
			if(source.guildInfoDto!=null){
				PlayerGuildInfoDto protobufModel = new PlayerGuildInfoDto();
				PlayerGuildInfoDtoConverter_fillInto(source.guildInfoDto, protobufModel);
				target.guildInfoDto = protobufModel;
			}
		}
		public void DebugVideoRoundConverter_fillFrom(AppDto.DebugVideoRound target, DebugVideoRound source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentDebugVideoRound != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentDebugVideoRound);
			}
			target.round = source.round;
			if (source.readyInfo != null) {
				List<string> items = new List<string>();
				target.readyInfo = items;
				foreach (string item in source.readyInfo)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.readyInfo = items;
			}
			if (source.progressInfo != null) {
				List<string> items = new List<string>();
				target.progressInfo = items;
				foreach (string item in source.progressInfo)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.progressInfo = items;
			}
		}

		public void DebugVideoRoundConverter_fillInto(AppDto.DebugVideoRound source, DebugVideoRound target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentDebugVideoRound == null ) {
				target.parentDebugVideoRound = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentDebugVideoRound);
			target.round=source.round;
			if (source.readyInfo != null){
				foreach(string readyInfo in source.readyInfo)
					target.readyInfo.Add(readyInfo);
			}
			if (source.progressInfo != null){
				foreach(string progressInfo in source.progressInfo)
					target.progressInfo.Add(progressInfo);
			}
		}
		public void DemoVideoConverter_fillFrom(AppDto.DemoVideo target, DemoVideo source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentDemoVideo != null ) {
				VideoConverter_fillFrom(target,source.parentDemoVideo);
			}
		}

		public void DemoVideoConverter_fillInto(AppDto.DemoVideo source, DemoVideo target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentDemoVideo == null ) {
				target.parentDemoVideo = new Video();
			}
			VideoConverter_fillInto(source,target.parentDemoVideo);
		}
		public void VideoConverter_fillFrom(AppDto.Video target, Video source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideo != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentVideo);
			}
			target.winId = source.winId;
			target.mapId = source.mapId;
			target.cameraId = source.cameraId;
						if (source.ateam!=null) {
				AppDto.VideoTeam retAteam = new AppDto.VideoTeam();
				VideoTeamConverter_fillFrom(retAteam, source.ateam);
				target.ateam = retAteam;
			}
									if (source.bteam!=null) {
				AppDto.VideoTeam retBteam = new AppDto.VideoTeam();
				VideoTeamConverter_fillFrom(retBteam, source.bteam);
				target.bteam = retBteam;
			}
						target.id = source.id;
			target.currentRound = source.currentRound;
			target.needPlayerAutoBattle = source.needPlayerAutoBattle;
			if (source.startStates != null) {
				List<AppDto.VideoTargetState> items = new List<AppDto.VideoTargetState>();
				target.startStates = items;
				foreach (GameObjectTypedMessage item in source.startStates) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.VideoTargetState))
						throw new IOException("parse data error");
					items.Add((AppDto.VideoTargetState)result);
				}
			}else{
				List<AppDto.VideoTargetState> items = new List<AppDto.VideoTargetState>();
				target.startStates = items;
			}
			target.retreatable = source.retreatable;
			target.readyTime = source.readyTime;
			if (source.playerInfos != null) {
				List<AppDto.BattlePlayerInfoDto> items = new List<AppDto.BattlePlayerInfoDto>();
				target.playerInfos = items;
				foreach (BattlePlayerInfoDto item in source.playerInfos) {
					AppDto.BattlePlayerInfoDto result = new AppDto.BattlePlayerInfoDto();
					BattlePlayerInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BattlePlayerInfoDto> items = new List<AppDto.BattlePlayerInfoDto>();
				target.playerInfos = items;
			}
			target.battleTypeId = source.battleTypeId;
		}

		public void VideoConverter_fillInto(AppDto.Video source, Video target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideo == null ) {
				target.parentVideo = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentVideo);
			target.winId=source.winId;
			target.mapId=source.mapId;
			target.cameraId=source.cameraId;
			if(source.ateam!=null){
				VideoTeam protobufModel = new VideoTeam();
				VideoTeamConverter_fillInto(source.ateam, protobufModel);
				target.ateam = protobufModel;
			}
			if(source.bteam!=null){
				VideoTeam protobufModel = new VideoTeam();
				VideoTeamConverter_fillInto(source.bteam, protobufModel);
				target.bteam = protobufModel;
			}
			target.id=source.id;
			target.currentRound=source.currentRound;
			target.needPlayerAutoBattle=source.needPlayerAutoBattle;
			if (source.startStates != null){
				foreach(AppDto.VideoTargetState startStates in source.startStates){
					GameObjectTypedMessage msgStartStates = ProtobufUtilsNet.packInto(startStates);
					if (msgStartStates == null)
						throw new IOException("pack data error");
					target.startStates.Add(msgStartStates);
				}
			}
			target.retreatable=source.retreatable;
			target.readyTime=source.readyTime;
			if (source.playerInfos != null){
				foreach(AppDto.BattlePlayerInfoDto playerInfos in source.playerInfos){
					BattlePlayerInfoDto protobufModel = new BattlePlayerInfoDto();
					BattlePlayerInfoDtoConverter_fillInto(playerInfos, protobufModel);
					target.playerInfos.Add(protobufModel);
				}
			}
			target.battleTypeId=source.battleTypeId;
		}
		public void VideoActionConverter_fillFrom(AppDto.VideoAction target, VideoAction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.targetStateGroups != null) {
				List<AppDto.VideoTargetStateGroup> items = new List<AppDto.VideoTargetStateGroup>();
				target.targetStateGroups = items;
				foreach (VideoTargetStateGroup item in source.targetStateGroups) {
					AppDto.VideoTargetStateGroup result = new AppDto.VideoTargetStateGroup();
					VideoTargetStateGroupConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.VideoTargetStateGroup> items = new List<AppDto.VideoTargetStateGroup>();
				target.targetStateGroups = items;
			}
		}

		public void VideoActionConverter_fillInto(AppDto.VideoAction source, VideoAction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.targetStateGroups != null){
				foreach(AppDto.VideoTargetStateGroup targetStateGroups in source.targetStateGroups){
					VideoTargetStateGroup protobufModel = new VideoTargetStateGroup();
					VideoTargetStateGroupConverter_fillInto(targetStateGroups, protobufModel);
					target.targetStateGroups.Add(protobufModel);
				}
			}
		}
		public void VideoInsideSkillActionConverter_fillFrom(AppDto.VideoInsideSkillAction target, VideoInsideSkillAction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoInsideSkillAction != null ) {
				VideoActionConverter_fillFrom(target,source.parentVideoInsideSkillAction);
			}
		}

		public void VideoInsideSkillActionConverter_fillInto(AppDto.VideoInsideSkillAction source, VideoInsideSkillAction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoInsideSkillAction == null ) {
				target.parentVideoInsideSkillAction = new VideoAction();
			}
			VideoActionConverter_fillInto(source,target.parentVideoInsideSkillAction);
		}
		public void VideoRoundConverter_fillFrom(AppDto.VideoRound target, VideoRound source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoRound != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentVideoRound);
			}
			target.battleId = source.battleId;
			target.over = source.over;
			target.winId = source.winId;
			if (source.skillActions != null) {
				List<AppDto.VideoSkillAction> items = new List<AppDto.VideoSkillAction>();
				target.skillActions = items;
				foreach (VideoSkillAction item in source.skillActions) {
					AppDto.VideoSkillAction result = new AppDto.VideoSkillAction();
					VideoSkillActionConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.VideoSkillAction> items = new List<AppDto.VideoSkillAction>();
				target.skillActions = items;
			}
						if (source.debugInfo!=null) {
				AppDto.DebugVideoRound retDebugInfo = new AppDto.DebugVideoRound();
				DebugVideoRoundConverter_fillFrom(retDebugInfo, source.debugInfo);
				target.debugInfo = retDebugInfo;
			}
						target.playTime = source.playTime;
			target.id = source.id;
			target.name = source.name;
						if (source.actionQueue!=null) {
				AppDto.ActionQueueDto retActionQueue = new AppDto.ActionQueueDto();
				ActionQueueDtoConverter_fillFrom(retActionQueue, source.actionQueue);
				target.actionQueue = retActionQueue;
			}
						target.round = source.round;
						if (source.acReward!=null) {
				AppDto.VideoActionTimeReward retAcReward = new AppDto.VideoActionTimeReward();
				VideoActionTimeRewardConverter_fillFrom(retAcReward, source.acReward);
				target.acReward = retAcReward;
			}
					}

		public void VideoRoundConverter_fillInto(AppDto.VideoRound source, VideoRound target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoRound == null ) {
				target.parentVideoRound = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentVideoRound);
			target.battleId=source.battleId;
			target.over=source.over;
			target.winId=source.winId;
			if (source.skillActions != null){
				foreach(AppDto.VideoSkillAction skillActions in source.skillActions){
					VideoSkillAction protobufModel = new VideoSkillAction();
					VideoSkillActionConverter_fillInto(skillActions, protobufModel);
					target.skillActions.Add(protobufModel);
				}
			}
			if(source.debugInfo!=null){
				DebugVideoRound protobufModel = new DebugVideoRound();
				DebugVideoRoundConverter_fillInto(source.debugInfo, protobufModel);
				target.debugInfo = protobufModel;
			}
			target.playTime=source.playTime;
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.actionQueue!=null){
				ActionQueueDto protobufModel = new ActionQueueDto();
				ActionQueueDtoConverter_fillInto(source.actionQueue, protobufModel);
				target.actionQueue = protobufModel;
			}
			target.round=source.round;
			if(source.acReward!=null){
				VideoActionTimeReward protobufModel = new VideoActionTimeReward();
				VideoActionTimeRewardConverter_fillInto(source.acReward, protobufModel);
				target.acReward = protobufModel;
			}
		}
		public void VideoRoundActionConverter_fillFrom(AppDto.VideoRoundAction target, VideoRoundAction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoRoundAction != null ) {
				VideoActionConverter_fillFrom(target,source.parentVideoRoundAction);
			}
		}

		public void VideoRoundActionConverter_fillInto(AppDto.VideoRoundAction source, VideoRoundAction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoRoundAction == null ) {
				target.parentVideoRoundAction = new VideoAction();
			}
			VideoActionConverter_fillInto(source,target.parentVideoRoundAction);
		}
		public void VideoRoundsConverter_fillFrom(AppDto.VideoRounds target, VideoRounds source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoRounds != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentVideoRounds);
			}
			if (source.videoRounds != null) {
				List<AppDto.VideoRound> items = new List<AppDto.VideoRound>();
				target.videoRounds = items;
				foreach (VideoRound item in source.videoRounds) {
					AppDto.VideoRound result = new AppDto.VideoRound();
					VideoRoundConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.VideoRound> items = new List<AppDto.VideoRound>();
				target.videoRounds = items;
			}
		}

		public void VideoRoundsConverter_fillInto(AppDto.VideoRounds source, VideoRounds target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoRounds == null ) {
				target.parentVideoRounds = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentVideoRounds);
			if (source.videoRounds != null){
				foreach(AppDto.VideoRound videoRounds in source.videoRounds){
					VideoRound protobufModel = new VideoRound();
					VideoRoundConverter_fillInto(videoRounds, protobufModel);
					target.videoRounds.Add(protobufModel);
				}
			}
		}
		public void VideoSkillActionConverter_fillFrom(AppDto.VideoSkillAction target, VideoSkillAction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoSkillAction != null ) {
				VideoActionConverter_fillFrom(target,source.parentVideoSkillAction);
			}
			target.actionSoldierId = source.actionSoldierId;
			target.skillId = source.skillId;
			target.hpSpent = source.hpSpent;
			target.epSpent = source.epSpent;
			target.cpSpent = source.cpSpent;
			target.driving = source.driving;
			target.ignoreAttackAction = source.ignoreAttackAction;
		}

		public void VideoSkillActionConverter_fillInto(AppDto.VideoSkillAction source, VideoSkillAction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoSkillAction == null ) {
				target.parentVideoSkillAction = new VideoAction();
			}
			VideoActionConverter_fillInto(source,target.parentVideoSkillAction);
			target.actionSoldierId=source.actionSoldierId;
			target.skillId=source.skillId;
			target.hpSpent=source.hpSpent;
			target.epSpent=source.epSpent;
			target.cpSpent=source.cpSpent;
			target.driving=source.driving;
			target.ignoreAttackAction=source.ignoreAttackAction;
		}
		public void VideoSoldierConverter_fillFrom(AppDto.VideoSoldier target, VideoSoldier source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.name = source.name;
			target.charactorId = source.charactorId;
			target.monsterId = source.monsterId;
			target.position = source.position;
			target.grade = source.grade;
			target.id = source.id;
			target.playerId = source.playerId;
			target.hp = source.hp;
			target.maxHp = source.maxHp;
			target.charactorType = source.charactorType;
			target.factionId = source.factionId;
			target.leaderPlayerId = source.leaderPlayerId;
			target.monsterType = source.monsterType;
			target.defaultSkillId = source.defaultSkillId;
						if (source.playerDressInfo!=null) {
				AppDto.PlayerDressInfo retPlayerDressInfo = new AppDto.PlayerDressInfo();
				PlayerDressInfoConverter_fillFrom(retPlayerDressInfo, source.playerDressInfo);
				target.playerDressInfo = retPlayerDressInfo;
			}
						if (source.skillIds != null) {
				List<int> items = new List<int>();
				target.skillIds = items;
				foreach (int item in source.skillIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.skillIds = items;
			}
			target.cp = source.cp;
			target.maxCp = source.maxCp;
			target.ep = source.ep;
			target.maxEp = source.maxEp;
			target.actionTime = source.actionTime;
			target.defaultSCraftsId = source.defaultSCraftsId;
		}

		public void VideoSoldierConverter_fillInto(AppDto.VideoSoldier source, VideoSoldier target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.name!=null)
				target.name = source.name;
			target.charactorId=source.charactorId;
			target.monsterId=source.monsterId;
			target.position=source.position;
			target.grade=source.grade;
			target.id=source.id;
			target.playerId=source.playerId;
			target.hp=source.hp;
			target.maxHp=source.maxHp;
			target.charactorType=source.charactorType;
			target.factionId=source.factionId;
			target.leaderPlayerId=source.leaderPlayerId;
			target.monsterType=source.monsterType;
			target.defaultSkillId=source.defaultSkillId;
			if(source.playerDressInfo!=null){
				PlayerDressInfo protobufModel = new PlayerDressInfo();
				PlayerDressInfoConverter_fillInto(source.playerDressInfo, protobufModel);
				target.playerDressInfo = protobufModel;
			}
			if (source.skillIds != null){
				foreach(int skillIds in source.skillIds)
					target.skillIds.Add(skillIds);
			}
			target.cp=source.cp;
			target.maxCp=source.maxCp;
			target.ep=source.ep;
			target.maxEp=source.maxEp;
			target.actionTime=source.actionTime;
			target.defaultSCraftsId=source.defaultSCraftsId;
		}
		public void VideoTargetStateConverter_fillFrom(AppDto.VideoTargetState target, VideoTargetState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.dead = source.dead;
			target.leave = source.leave;
		}

		public void VideoTargetStateConverter_fillInto(AppDto.VideoTargetState source, VideoTargetState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.dead=source.dead;
			target.leave=source.leave;
		}
		public void VideoTargetStateGroupConverter_fillFrom(AppDto.VideoTargetStateGroup target, VideoTargetStateGroup source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.targetStates != null) {
				List<AppDto.VideoTargetState> items = new List<AppDto.VideoTargetState>();
				target.targetStates = items;
				foreach (GameObjectTypedMessage item in source.targetStates) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.VideoTargetState))
						throw new IOException("parse data error");
					items.Add((AppDto.VideoTargetState)result);
				}
			}else{
				List<AppDto.VideoTargetState> items = new List<AppDto.VideoTargetState>();
				target.targetStates = items;
			}
						if (source.strikeBackAction!=null) {
				AppDto.VideoSkillAction retStrikeBackAction = new AppDto.VideoSkillAction();
				VideoSkillActionConverter_fillFrom(retStrikeBackAction, source.strikeBackAction);
				target.strikeBackAction = retStrikeBackAction;
			}
									if (source.protectAction!=null) {
				AppDto.VideoInsideSkillAction retProtectAction = new AppDto.VideoInsideSkillAction();
				VideoInsideSkillActionConverter_fillFrom(retProtectAction, source.protectAction);
				target.protectAction = retProtectAction;
			}
						target.protectSoldierId = source.protectSoldierId;
		}

		public void VideoTargetStateGroupConverter_fillInto(AppDto.VideoTargetStateGroup source, VideoTargetStateGroup target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.targetStates != null){
				foreach(AppDto.VideoTargetState targetStates in source.targetStates){
					GameObjectTypedMessage msgTargetStates = ProtobufUtilsNet.packInto(targetStates);
					if (msgTargetStates == null)
						throw new IOException("pack data error");
					target.targetStates.Add(msgTargetStates);
				}
			}
			if(source.strikeBackAction!=null){
				VideoSkillAction protobufModel = new VideoSkillAction();
				VideoSkillActionConverter_fillInto(source.strikeBackAction, protobufModel);
				target.strikeBackAction = protobufModel;
			}
			if(source.protectAction!=null){
				VideoInsideSkillAction protobufModel = new VideoInsideSkillAction();
				VideoInsideSkillActionConverter_fillInto(source.protectAction, protobufModel);
				target.protectAction = protobufModel;
			}
			target.protectSoldierId=source.protectSoldierId;
		}
		public void VideoTeamConverter_fillFrom(AppDto.VideoTeam target, VideoTeam source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.teamSoldiers != null) {
				List<AppDto.VideoSoldier> items = new List<AppDto.VideoSoldier>();
				target.teamSoldiers = items;
				foreach (VideoSoldier item in source.teamSoldiers) {
					AppDto.VideoSoldier result = new AppDto.VideoSoldier();
					VideoSoldierConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.VideoSoldier> items = new List<AppDto.VideoSoldier>();
				target.teamSoldiers = items;
			}
			if (source.playerIds != null) {
				List<long> items = new List<long>();
				target.playerIds = items;
				foreach (long item in source.playerIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.playerIds = items;
			}
			target.formationId = source.formationId;
			target.id = source.id;
			target.formationGradeId = source.formationGradeId;
		}

		public void VideoTeamConverter_fillInto(AppDto.VideoTeam source, VideoTeam target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.teamSoldiers != null){
				foreach(AppDto.VideoSoldier teamSoldiers in source.teamSoldiers){
					VideoSoldier protobufModel = new VideoSoldier();
					VideoSoldierConverter_fillInto(teamSoldiers, protobufModel);
					target.teamSoldiers.Add(protobufModel);
				}
			}
			if (source.playerIds != null){
				foreach(long playerIds in source.playerIds)
					target.playerIds.Add(playerIds);
			}
			target.formationId=source.formationId;
			target.id=source.id;
			target.formationGradeId=source.formationGradeId;
		}
		public void VideoActionTargetStateConverter_fillFrom(AppDto.VideoActionTargetState target, VideoActionTargetState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoActionTargetState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoActionTargetState);
			}
			target.crit = source.crit;
			target.hp = source.hp;
			target.currentHp = source.currentHp;
			target.soldierStatus = source.soldierStatus;
			target.skillId = source.skillId;
			target.currentCp = source.currentCp;
			target.currentEp = source.currentEp;
			target.ep = source.ep;
			target.cp = source.cp;
		}

		public void VideoActionTargetStateConverter_fillInto(AppDto.VideoActionTargetState source, VideoActionTargetState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoActionTargetState == null ) {
				target.parentVideoActionTargetState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoActionTargetState);
			target.crit=source.crit;
			target.hp=source.hp;
			target.currentHp=source.currentHp;
			target.soldierStatus=source.soldierStatus;
			target.skillId=source.skillId;
			target.currentCp=source.currentCp;
			target.currentEp=source.currentEp;
			target.ep=source.ep;
			target.cp=source.cp;
		}
		public void VideoDodgeTargetStateConverter_fillFrom(AppDto.VideoDodgeTargetState target, VideoDodgeTargetState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoDodgeTargetState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoDodgeTargetState);
			}
		}

		public void VideoDodgeTargetStateConverter_fillInto(AppDto.VideoDodgeTargetState source, VideoDodgeTargetState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoDodgeTargetState == null ) {
				target.parentVideoDodgeTargetState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoDodgeTargetState);
		}
		public void CharactorDtoConverter_fillFrom(AppDto.CharactorDto target, CharactorDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCharactorDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCharactorDto);
			}
			target.id = source.id;
			target.playerId = source.playerId;
			target.charactorId = source.charactorId;
			target.name = source.name;
			target.exp = source.exp;
			target.level = source.level;
			target.potential = source.potential;
			target.extraPotential = source.extraPotential;
			target.hasCustomAptitude = source.hasCustomAptitude;
			target.charactorType = source.charactorType;
			target.factionId = source.factionId;
			target.pointPlan = source.pointPlan;
			target.changeTimes = source.changeTimes;
			if (source.properties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
				foreach (CharacterPropertyDto item in source.properties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
			}
			target.skillPlanId = source.skillPlanId;
			target.slotsElementLimit = source.slotsElementLimit;
			target.bracerGrade = source.bracerGrade;
		}

		public void CharactorDtoConverter_fillInto(AppDto.CharactorDto source, CharactorDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCharactorDto == null ) {
				target.parentCharactorDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCharactorDto);
			target.id=source.id;
			target.playerId=source.playerId;
			target.charactorId=source.charactorId;
			if(source.name!=null)
				target.name = source.name;
			target.exp=source.exp;
			target.level=source.level;
			target.potential=source.potential;
			target.extraPotential=source.extraPotential;
			target.hasCustomAptitude=source.hasCustomAptitude;
			target.charactorType=source.charactorType;
			target.factionId=source.factionId;
			target.pointPlan=source.pointPlan;
			target.changeTimes=source.changeTimes;
			if (source.properties != null){
				foreach(AppDto.CharacterPropertyDto properties in source.properties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(properties, protobufModel);
					target.properties.Add(protobufModel);
				}
			}
			target.skillPlanId=source.skillPlanId;
			target.slotsElementLimit=source.slotsElementLimit;
			target.bracerGrade=source.bracerGrade;
		}
		public void SimplePlayerDtoConverter_fillFrom(AppDto.SimplePlayerDto target, SimplePlayerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.nickname = source.nickname;
			target.grade = source.grade;
			target.x = source.x;
			target.z = source.z;
			target.sceneId = source.sceneId;
			target.charactorId = source.charactorId;
			target.factionId = source.factionId;
			target.guildId = source.guildId;
			target.guildName = source.guildName;
			target.teamStatus = source.teamStatus;
			target.teamUniqueId = source.teamUniqueId;
			target.vip = source.vip;
			target.titleId = source.titleId;
			target.titleName = source.titleName;
			target.online = source.online;
			target.inBattle = source.inBattle;
			target.teamIndex = source.teamIndex;
			target.scale = source.scale;
			target.transformModelId = source.transformModelId;
			target.transformExpireAt = source.transformExpireAt;
			target.scaleExpireAt = source.scaleExpireAt;
			target.fereName = source.fereName;
			target.closedLocation = source.closedLocation;
			target.locationInfo = source.locationInfo;
			target.masterName = source.masterName;
			target.masterId = source.masterId;
			target.camp = source.camp;
			target.moveSpeed = source.moveSpeed;
			target.teamPlayerCount = source.teamPlayerCount;
			target.inTeamPlayerCount = source.inTeamPlayerCount;
			target.score = source.score;
			target.petScore = source.petScore;
			if ( source.parentSimplePlayerDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSimplePlayerDto);
			}
		}

		public void SimplePlayerDtoConverter_fillInto(AppDto.SimplePlayerDto source, SimplePlayerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.grade=source.grade;
			target.x=source.x;
			target.z=source.z;
			target.sceneId=source.sceneId;
			target.charactorId=source.charactorId;
			target.factionId=source.factionId;
			target.guildId=source.guildId;
			if(source.guildName!=null)
				target.guildName = source.guildName;
			target.teamStatus=source.teamStatus;
			if(source.teamUniqueId!=null)
				target.teamUniqueId = source.teamUniqueId;
			target.vip=source.vip;
			target.titleId=source.titleId;
			if(source.titleName!=null)
				target.titleName = source.titleName;
			target.online=source.online;
			target.inBattle=source.inBattle;
			target.teamIndex=source.teamIndex;
			target.scale=source.scale;
			target.transformModelId=source.transformModelId;
			target.transformExpireAt=source.transformExpireAt;
			target.scaleExpireAt=source.scaleExpireAt;
			if(source.fereName!=null)
				target.fereName = source.fereName;
			target.closedLocation=source.closedLocation;
			if(source.locationInfo!=null)
				target.locationInfo = source.locationInfo;
			if(source.masterName!=null)
				target.masterName = source.masterName;
			target.masterId=source.masterId;
			target.camp=source.camp;
			target.moveSpeed=source.moveSpeed;
			target.teamPlayerCount=source.teamPlayerCount;
			target.inTeamPlayerCount=source.inTeamPlayerCount;
			target.score=source.score;
			target.petScore=source.petScore;
			if ( target.parentSimplePlayerDto == null ) {
				target.parentSimplePlayerDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSimplePlayerDto);
		}
		public void NpcConverter_fillFrom(AppDto.Npc target, Npc source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.nameType = source.nameType;
			target.name = source.name;
			target.sceneId = source.sceneId;
			target.x = source.x;
			target.y = source.y;
			target.z = source.z;
			target.type = source.type;
			target.modelId = source.modelId;
			target.mutateColor = source.mutateColor;
			target.diglogface = source.diglogface;
			target.rotateY = source.rotateY;
			target.mutateTexture = source.mutateTexture;
			target.scale = source.scale;
			target.ornamentId = source.ornamentId;
		}

		public void NpcConverter_fillInto(AppDto.Npc source, Npc target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.nameType=source.nameType;
			if(source.name!=null)
				target.name = source.name;
			target.sceneId=source.sceneId;
			target.x=source.x;
			target.y=source.y;
			target.z=source.z;
			target.type=source.type;
			target.modelId=source.modelId;
			if(source.mutateColor!=null)
				target.mutateColor = source.mutateColor;
			if(source.diglogface!=null)
				target.diglogface = source.diglogface;
			target.rotateY=source.rotateY;
			target.mutateTexture=source.mutateTexture;
			target.scale=source.scale;
			target.ornamentId=source.ornamentId;
		}
		public void NpcStateDtoConverter_fillFrom(AppDto.NpcStateDto target, NpcStateDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.npcId = source.npcId;
			target.x = source.x;
			target.z = source.z;
			target.battleId = source.battleId;
			target.id = source.id;
			target.guildId = source.guildId;
			target.rank = source.rank;
			target.times = source.times;
		}

		public void NpcStateDtoConverter_fillInto(AppDto.NpcStateDto source, NpcStateDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.npcId=source.npcId;
			target.x=source.x;
			target.z=source.z;
			target.battleId=source.battleId;
			target.id=source.id;
			target.guildId=source.guildId;
			target.rank=source.rank;
			target.times=source.times;
		}
		public void SceneObjectNotifyConverter_fillFrom(AppDto.SceneObjectNotify target, SceneObjectNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId = source.sceneId;
			if (source.obj!=null && source.obj is GameObjectTypedMessage) {
				GameObjectTypedMessage itemObj = source.obj;
				System.Object objObj = ProtobufUtilsNet.parseFrom(itemObj.message_type_id,itemObj.message_data);
				if (objObj == null)
					throw new IOException("parse data error");
				target.obj = (AppDto.SceneObjectDto)objObj;
			}
		}

		public void SceneObjectNotifyConverter_fillInto(AppDto.SceneObjectNotify source, SceneObjectNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId=source.sceneId;
			if(source.obj != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.obj);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.obj = protobufModel;
			}
		}
		public void SceneObjectRemoveNotifyConverter_fillFrom(AppDto.SceneObjectRemoveNotify target, SceneObjectRemoveNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId = source.sceneId;
			target.objType = source.objType;
			target.objId = source.objId;
		}

		public void SceneObjectRemoveNotifyConverter_fillInto(AppDto.SceneObjectRemoveNotify source, SceneObjectRemoveNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId=source.sceneId;
			target.objType=source.objType;
			target.objId=source.objId;
		}
		public void VideoBuffAddTargetStateConverter_fillFrom(AppDto.VideoBuffAddTargetState target, VideoBuffAddTargetState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoBuffAddTargetState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoBuffAddTargetState);
			}
			target.battleBuffId = source.battleBuffId;
			target.effectValue = source.effectValue;
			target.skillId = source.skillId;
			target.durationTime = source.durationTime;
			target.remainTimes = source.remainTimes;
		}

		public void VideoBuffAddTargetStateConverter_fillInto(AppDto.VideoBuffAddTargetState source, VideoBuffAddTargetState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoBuffAddTargetState == null ) {
				target.parentVideoBuffAddTargetState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoBuffAddTargetState);
			target.battleBuffId=source.battleBuffId;
			target.effectValue=source.effectValue;
			target.skillId=source.skillId;
			target.durationTime=source.durationTime;
			target.remainTimes=source.remainTimes;
		}
		public void VideoBuffRemoveTargetStateConverter_fillFrom(AppDto.VideoBuffRemoveTargetState target, VideoBuffRemoveTargetState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoBuffRemoveTargetState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoBuffRemoveTargetState);
			}
			if (source.buffId != null) {
				List<int> items = new List<int>();
				target.buffId = items;
				foreach (int item in source.buffId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.buffId = items;
			}
		}

		public void VideoBuffRemoveTargetStateConverter_fillInto(AppDto.VideoBuffRemoveTargetState source, VideoBuffRemoveTargetState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoBuffRemoveTargetState == null ) {
				target.parentVideoBuffRemoveTargetState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoBuffRemoveTargetState);
			if (source.buffId != null){
				foreach(int buffId in source.buffId)
					target.buffId.Add(buffId);
			}
		}
		public void SceneNpcDtoConverter_fillFrom(AppDto.SceneNpcDto target, SceneNpcDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSceneNpcDto != null ) {
				SceneObjectDtoConverter_fillFrom(target,source.parentSceneNpcDto);
			}
			target.npcId = source.npcId;
		}

		public void SceneNpcDtoConverter_fillInto(AppDto.SceneNpcDto source, SceneNpcDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSceneNpcDto == null ) {
				target.parentSceneNpcDto = new SceneObjectDto();
			}
			SceneObjectDtoConverter_fillInto(source,target.parentSceneNpcDto);
			target.npcId=source.npcId;
		}
		public void SceneObjectWalkNotifyConverter_fillFrom(AppDto.SceneObjectWalkNotify target, SceneObjectWalkNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.sceneId = source.sceneId;
			target.x = source.x;
			target.z = source.z;
			target.objType = source.objType;
		}

		public void SceneObjectWalkNotifyConverter_fillInto(AppDto.SceneObjectWalkNotify source, SceneObjectWalkNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.sceneId=source.sceneId;
			target.x=source.x;
			target.z=source.z;
			target.objType=source.objType;
		}
		public void NpcDialogConverter_fillFrom(AppDto.NpcDialog target, NpcDialog source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.dialogContent != null) {
				List<string> items = new List<string>();
				target.dialogContent = items;
				foreach (string item in source.dialogContent)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.dialogContent = items;
			}
		}

		public void NpcDialogConverter_fillInto(AppDto.NpcDialog source, NpcDialog target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.dialogContent != null){
				foreach(string dialogContent in source.dialogContent)
					target.dialogContent.Add(dialogContent);
			}
		}
		public void NpcDoubleTeleportConverter_fillFrom(AppDto.NpcDoubleTeleport target, NpcDoubleTeleport source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcDoubleTeleport != null ) {
				NpcConverter_fillFrom(target,source.parentNpcDoubleTeleport);
			}
			target.toSceneId = source.toSceneId;
			target.toX = source.toX;
			target.toY = source.toY;
			target.toZ = source.toZ;
			target.grade = source.grade;
		}

		public void NpcDoubleTeleportConverter_fillInto(AppDto.NpcDoubleTeleport source, NpcDoubleTeleport target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcDoubleTeleport == null ) {
				target.parentNpcDoubleTeleport = new Npc();
			}
			NpcConverter_fillInto(source,target.parentNpcDoubleTeleport);
			target.toSceneId=source.toSceneId;
			target.toX=source.toX;
			target.toY=source.toY;
			target.toZ=source.toZ;
			target.grade=source.grade;
		}
		public void NpcGeneralConverter_fillFrom(AppDto.NpcGeneral target, NpcGeneral source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcGeneral != null ) {
				NpcConverter_fillFrom(target,source.parentNpcGeneral);
			}
			target.needDialog = source.needDialog;
			if (source.dialogFunctionIds != null) {
				List<int> items = new List<int>();
				target.dialogFunctionIds = items;
				foreach (int item in source.dialogFunctionIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.dialogFunctionIds = items;
			}
			target.shortName = source.shortName;
			target.kind = source.kind;
			target.wpmodel = source.wpmodel;
			target.title = source.title;
			target.dialogId = source.dialogId;
			target.soundId = source.soundId;
		}

		public void NpcGeneralConverter_fillInto(AppDto.NpcGeneral source, NpcGeneral target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcGeneral == null ) {
				target.parentNpcGeneral = new Npc();
			}
			NpcConverter_fillInto(source,target.parentNpcGeneral);
			target.needDialog=source.needDialog;
			if (source.dialogFunctionIds != null){
				foreach(int dialogFunctionIds in source.dialogFunctionIds)
					target.dialogFunctionIds.Add(dialogFunctionIds);
			}
			if(source.shortName!=null)
				target.shortName = source.shortName;
			target.kind=source.kind;
			target.wpmodel=source.wpmodel;
			if(source.title!=null)
				target.title = source.title;
			target.dialogId=source.dialogId;
			target.soundId=source.soundId;
		}
		public void SceneObjectTeleportNotifyConverter_fillFrom(AppDto.SceneObjectTeleportNotify target, SceneObjectTeleportNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.sceneId = source.sceneId;
			target.x = source.x;
			target.z = source.z;
			target.objType = source.objType;
		}

		public void SceneObjectTeleportNotifyConverter_fillInto(AppDto.SceneObjectTeleportNotify source, SceneObjectTeleportNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.sceneId=source.sceneId;
			target.x=source.x;
			target.z=source.z;
			target.objType=source.objType;
		}
		public void QueueDtoConverter_fillFrom(AppDto.QueueDto target, QueueDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentQueueDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentQueueDto);
			}
			target.index = source.index;
			target.remain = source.remain;
						if (source.playerDto!=null) {
				AppDto.PlayerDto retPlayerDto = new AppDto.PlayerDto();
				PlayerDtoConverter_fillFrom(retPlayerDto, source.playerDto);
				target.playerDto = retPlayerDto;
			}
					}

		public void QueueDtoConverter_fillInto(AppDto.QueueDto source, QueueDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentQueueDto == null ) {
				target.parentQueueDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentQueueDto);
			target.index=source.index;
			target.remain=source.remain;
			if(source.playerDto!=null){
				PlayerDto protobufModel = new PlayerDto();
				PlayerDtoConverter_fillInto(source.playerDto, protobufModel);
				target.playerDto = protobufModel;
			}
		}
		public void TeamDtoConverter_fillFrom(AppDto.TeamDto target, TeamDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.leaderPlayerId = source.leaderPlayerId;
			if (source.members != null) {
				List<AppDto.TeamMemberDto> items = new List<AppDto.TeamMemberDto>();
				target.members = items;
				foreach (TeamMemberDto item in source.members) {
					AppDto.TeamMemberDto result = new AppDto.TeamMemberDto();
					TeamMemberDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamMemberDto> items = new List<AppDto.TeamMemberDto>();
				target.members = items;
			}
			target.maxMemberSize = source.maxMemberSize;
			target.commanderId = source.commanderId;
			target.formationId = source.formationId;
			target.actionTargetId = source.actionTargetId;
			target.leaderPlayerName = source.leaderPlayerName;
			target.minGrade = source.minGrade;
			target.maxGrade = source.maxGrade;
						if (source.formation!=null) {
				AppDto.FormationInfoDto retFormation = new AppDto.FormationInfoDto();
				FormationInfoDtoConverter_fillFrom(retFormation, source.formation);
				target.formation = retFormation;
			}
						target.sceneId = source.sceneId;
		}

		public void TeamDtoConverter_fillInto(AppDto.TeamDto source, TeamDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.leaderPlayerId=source.leaderPlayerId;
			if (source.members != null){
				foreach(AppDto.TeamMemberDto members in source.members){
					TeamMemberDto protobufModel = new TeamMemberDto();
					TeamMemberDtoConverter_fillInto(members, protobufModel);
					target.members.Add(protobufModel);
				}
			}
			target.maxMemberSize=source.maxMemberSize;
			target.commanderId=source.commanderId;
			target.formationId=source.formationId;
			target.actionTargetId=source.actionTargetId;
			if(source.leaderPlayerName!=null)
				target.leaderPlayerName = source.leaderPlayerName;
			target.minGrade=source.minGrade;
			target.maxGrade=source.maxGrade;
			if(source.formation!=null){
				FormationInfoDto protobufModel = new FormationInfoDto();
				FormationInfoDtoConverter_fillInto(source.formation, protobufModel);
				target.formation = protobufModel;
			}
			target.sceneId=source.sceneId;
		}
		public void TeamMemberDtoConverter_fillFrom(AppDto.TeamMemberDto target, TeamMemberDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.nickname = source.nickname;
			target.id = source.id;
			target.factionId = source.factionId;
			target.grade = source.grade;
			target.memberStatus = source.memberStatus;
			target.index = source.index;
			target.hpRate = source.hpRate;
			target.spRate = source.spRate;
						if (source.playerDressInfo!=null) {
				AppDto.PlayerDressInfo retPlayerDressInfo = new AppDto.PlayerDressInfo();
				PlayerDressInfoConverter_fillFrom(retPlayerDressInfo, source.playerDressInfo);
				target.playerDressInfo = retPlayerDressInfo;
			}
						if (source.crewPositionNotifys != null) {
				List<AppDto.CrewPositionNotify> items = new List<AppDto.CrewPositionNotify>();
				target.crewPositionNotifys = items;
				foreach (CrewPositionNotify item in source.crewPositionNotifys) {
					AppDto.CrewPositionNotify result = new AppDto.CrewPositionNotify();
					CrewPositionNotifyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewPositionNotify> items = new List<AppDto.CrewPositionNotify>();
				target.crewPositionNotifys = items;
			}
			target.position = source.position;
			target.slotsElementLimit = source.slotsElementLimit;
		}

		public void TeamMemberDtoConverter_fillInto(AppDto.TeamMemberDto source, TeamMemberDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.id=source.id;
			target.factionId=source.factionId;
			target.grade=source.grade;
			target.memberStatus=source.memberStatus;
			target.index=source.index;
			target.hpRate=source.hpRate;
			target.spRate=source.spRate;
			if(source.playerDressInfo!=null){
				PlayerDressInfo protobufModel = new PlayerDressInfo();
				PlayerDressInfoConverter_fillInto(source.playerDressInfo, protobufModel);
				target.playerDressInfo = protobufModel;
			}
			if (source.crewPositionNotifys != null){
				foreach(AppDto.CrewPositionNotify crewPositionNotifys in source.crewPositionNotifys){
					CrewPositionNotify protobufModel = new CrewPositionNotify();
					CrewPositionNotifyConverter_fillInto(crewPositionNotifys, protobufModel);
					target.crewPositionNotifys.Add(protobufModel);
				}
			}
			target.position=source.position;
			target.slotsElementLimit=source.slotsElementLimit;
		}
		public void TeamRequestNotifyConverter_fillFrom(AppDto.TeamRequestNotify target, TeamRequestNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.leaderPlayerId = source.leaderPlayerId;
			target.playerId = source.playerId;
			target.playerNickname = source.playerNickname;
			target.playerGrade = source.playerGrade;
			target.playerFactionId = source.playerFactionId;
			target.playerCharactorId = source.playerCharactorId;
			target.meta = source.meta;
			target.slotsElementLimit = source.slotsElementLimit;
		}

		public void TeamRequestNotifyConverter_fillInto(AppDto.TeamRequestNotify source, TeamRequestNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.leaderPlayerId=source.leaderPlayerId;
			target.playerId=source.playerId;
			if(source.playerNickname!=null)
				target.playerNickname = source.playerNickname;
			target.playerGrade=source.playerGrade;
			target.playerFactionId=source.playerFactionId;
			target.playerCharactorId=source.playerCharactorId;
			if(source.meta!=null)
				target.meta = source.meta;
			target.slotsElementLimit=source.slotsElementLimit;
		}
		public void TeamInvitationNotifyConverter_fillFrom(AppDto.TeamInvitationNotify target, TeamInvitationNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.targetPlayerId = source.targetPlayerId;
			target.inviterPlayerId = source.inviterPlayerId;
			target.teamTargetId = source.teamTargetId;
			target.minGrade = source.minGrade;
			target.maxGrade = source.maxGrade;
			if (source.inviteTeamMembers != null) {
				List<AppDto.TeamMemberSimpleDto> items = new List<AppDto.TeamMemberSimpleDto>();
				target.inviteTeamMembers = items;
				foreach (TeamMemberSimpleDto item in source.inviteTeamMembers) {
					AppDto.TeamMemberSimpleDto result = new AppDto.TeamMemberSimpleDto();
					TeamMemberSimpleDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamMemberSimpleDto> items = new List<AppDto.TeamMemberSimpleDto>();
				target.inviteTeamMembers = items;
			}
			target.timeout = source.timeout;
			target.sceneId = source.sceneId;
		}

		public void TeamInvitationNotifyConverter_fillInto(AppDto.TeamInvitationNotify source, TeamInvitationNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.targetPlayerId=source.targetPlayerId;
			target.inviterPlayerId=source.inviterPlayerId;
			target.teamTargetId=source.teamTargetId;
			target.minGrade=source.minGrade;
			target.maxGrade=source.maxGrade;
			if (source.inviteTeamMembers != null){
				foreach(AppDto.TeamMemberSimpleDto inviteTeamMembers in source.inviteTeamMembers){
					TeamMemberSimpleDto protobufModel = new TeamMemberSimpleDto();
					TeamMemberSimpleDtoConverter_fillInto(inviteTeamMembers, protobufModel);
					target.inviteTeamMembers.Add(protobufModel);
				}
			}
			target.timeout=source.timeout;
			target.sceneId=source.sceneId;
		}
		public void TeamMemberStatusDtoConverter_fillFrom(AppDto.TeamMemberStatusDto target, TeamMemberStatusDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			target.teamId = source.teamId;
			target.status = source.status;
			target.index = source.index;
			target.memberName = source.memberName;
		}

		public void TeamMemberStatusDtoConverter_fillInto(AppDto.TeamMemberStatusDto source, TeamMemberStatusDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			target.teamId=source.teamId;
			target.status=source.status;
			target.index=source.index;
			if(source.memberName!=null)
				target.memberName = source.memberName;
		}
		public void TeamStatusNotifyConverter_fillFrom(AppDto.TeamStatusNotify target, TeamStatusNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.memberStatusList != null) {
				List<AppDto.TeamMemberStatusDto> items = new List<AppDto.TeamMemberStatusDto>();
				target.memberStatusList = items;
				foreach (TeamMemberStatusDto item in source.memberStatusList) {
					AppDto.TeamMemberStatusDto result = new AppDto.TeamMemberStatusDto();
					TeamMemberStatusDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamMemberStatusDto> items = new List<AppDto.TeamMemberStatusDto>();
				target.memberStatusList = items;
			}
			target.teamId = source.teamId;
			target.leaderId = source.leaderId;
		}

		public void TeamStatusNotifyConverter_fillInto(AppDto.TeamStatusNotify source, TeamStatusNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.memberStatusList != null){
				foreach(AppDto.TeamMemberStatusDto memberStatusList in source.memberStatusList){
					TeamMemberStatusDto protobufModel = new TeamMemberStatusDto();
					TeamMemberStatusDtoConverter_fillInto(memberStatusList, protobufModel);
					target.memberStatusList.Add(protobufModel);
				}
			}
			target.teamId=source.teamId;
			target.leaderId=source.leaderId;
		}
		public void SkillBuffConverter_fillFrom(AppDto.SkillBuff target, SkillBuff source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.description = source.description;
			target.animationMount = source.animationMount;
			target.animation = source.animation;
			target.icon = source.icon;
			target.buffType = source.buffType;
			target.uiSurroudEffect = source.uiSurroudEffect;
			target.uiHeadEffect = source.uiHeadEffect;
			target.group = source.group;
			target.preventRelive = source.preventRelive;
			target.showTips = source.showTips;
			target.skillActionStatusCode = source.skillActionStatusCode;
			target.preventHeal = source.preventHeal;
			target.preventAutoEscape = source.preventAutoEscape;
			target.showTipsEffect = source.showTipsEffect;
		}

		public void SkillBuffConverter_fillInto(AppDto.SkillBuff source, SkillBuff target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.description!=null)
				target.description = source.description;
			if(source.animationMount!=null)
				target.animationMount = source.animationMount;
			target.animation=source.animation;
			if(source.icon!=null)
				target.icon = source.icon;
			target.buffType=source.buffType;
			if(source.uiSurroudEffect!=null)
				target.uiSurroudEffect = source.uiSurroudEffect;
			if(source.uiHeadEffect!=null)
				target.uiHeadEffect = source.uiHeadEffect;
			target.group=source.group;
			target.preventRelive=source.preventRelive;
			target.showTips=source.showTips;
			target.skillActionStatusCode=source.skillActionStatusCode;
			target.preventHeal=source.preventHeal;
			target.preventAutoEscape=source.preventAutoEscape;
			if(source.showTipsEffect!=null)
				target.showTipsEffect = source.showTipsEffect;
		}
		public void LeaveTeamNotifyConverter_fillFrom(AppDto.LeaveTeamNotify target, LeaveTeamNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			target.teamId = source.teamId;
			target.reason = source.reason;
			target.playerName = source.playerName;
		}

		public void LeaveTeamNotifyConverter_fillInto(AppDto.LeaveTeamNotify source, LeaveTeamNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			target.teamId=source.teamId;
			target.reason=source.reason;
			if(source.playerName!=null)
				target.playerName = source.playerName;
		}
		public void BagDtoConverter_fillFrom(AppDto.BagDto target, BagDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null) {
				List<AppDto.BagItemDto> items = new List<AppDto.BagItemDto>();
				target.items = items;
				foreach (BagItemDto item in source.items) {
					AppDto.BagItemDto result = new AppDto.BagItemDto();
					BagItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BagItemDto> items = new List<AppDto.BagItemDto>();
				target.items = items;
			}
			target.capability = source.capability;
			target.maxCapability = source.maxCapability;
			target.bagId = source.bagId;
			if ( source.parentBagDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBagDto);
			}
		}

		public void BagDtoConverter_fillInto(AppDto.BagDto source, BagDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null){
				foreach(AppDto.BagItemDto items in source.items){
					BagItemDto protobufModel = new BagItemDto();
					BagItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
			target.capability=source.capability;
			target.maxCapability=source.maxCapability;
			target.bagId=source.bagId;
			if ( target.parentBagDto == null ) {
				target.parentBagDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBagDto);
		}
		public void BagItemDtoConverter_fillFrom(AppDto.BagItemDto target, BagItemDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.index = source.index;
			target.count = source.count;
			target.itemId = source.itemId;
			target.circulationType = source.circulationType;
			target.uniqueId = source.uniqueId;
			if (source.extra!=null && source.extra is GameObjectTypedMessage) {			
				GameObjectTypedMessage itemExtra = source.extra;
				System.Object result = ProtobufUtilsNet.parseFrom(itemExtra.message_type_id,itemExtra.message_data);
				if (result == null)
					throw new IOException("parse data error");
				target.extra = result;
			}
			target.expireAt = source.expireAt;
			target.giftable = source.giftable;
			target.stallable = source.stallable;
			target.tradePrice = source.tradePrice;
			target.sourceOfTrade = source.sourceOfTrade;
			if ( source.parentBagItemDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBagItemDto);
			}
			target.bagId = source.bagId;
		}

		public void BagItemDtoConverter_fillInto(AppDto.BagItemDto source, BagItemDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.index=source.index;
			target.count=source.count;
			target.itemId=source.itemId;
			target.circulationType=source.circulationType;
			target.uniqueId=source.uniqueId;
			if(source.extra != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.extra);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.extra = protobufModel;
			}
			target.expireAt=source.expireAt;
			target.giftable=source.giftable;
			target.stallable=source.stallable;
			target.tradePrice=source.tradePrice;
			target.sourceOfTrade=source.sourceOfTrade;
			if ( target.parentBagItemDto == null ) {
				target.parentBagItemDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBagItemDto);
			target.bagId=source.bagId;
		}
		public void BagItemNotifyConverter_fillFrom(AppDto.BagItemNotify target, BagItemNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.updateItems != null) {
				List<AppDto.BagItemDto> items = new List<AppDto.BagItemDto>();
				target.updateItems = items;
				foreach (BagItemDto item in source.updateItems) {
					AppDto.BagItemDto result = new AppDto.BagItemDto();
					BagItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BagItemDto> items = new List<AppDto.BagItemDto>();
				target.updateItems = items;
			}
			if (source.deleteItems != null) {
				List<int> items = new List<int>();
				target.deleteItems = items;
				foreach (int item in source.deleteItems)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.deleteItems = items;
			}
			target.traceTypeId = source.traceTypeId;
			target.bagId = source.bagId;
		}

		public void BagItemNotifyConverter_fillInto(AppDto.BagItemNotify source, BagItemNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.updateItems != null){
				foreach(AppDto.BagItemDto updateItems in source.updateItems){
					BagItemDto protobufModel = new BagItemDto();
					BagItemDtoConverter_fillInto(updateItems, protobufModel);
					target.updateItems.Add(protobufModel);
				}
			}
			if (source.deleteItems != null){
				foreach(int deleteItems in source.deleteItems)
					target.deleteItems.Add(deleteItems);
			}
			target.traceTypeId=source.traceTypeId;
			target.bagId=source.bagId;
		}
		public void CharacterAbilityConverter_fillFrom(AppDto.CharacterAbility target, CharacterAbility source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.level = source.level;
			target.desc = source.desc;
			target.icon = source.icon;
			target.type = source.type;
			target.levelSort = source.levelSort;
			target.typeSort = source.typeSort;
			target.per = source.per;
			target.initVal = source.initVal;
			target.crewInitVal = source.crewInitVal;
		}

		public void CharacterAbilityConverter_fillInto(AppDto.CharacterAbility source, CharacterAbility target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.level=source.level;
			if(source.desc!=null)
				target.desc = source.desc;
			if(source.icon!=null)
				target.icon = source.icon;
			target.type=source.type;
			target.levelSort=source.levelSort;
			target.typeSort=source.typeSort;
			target.per=source.per;
			target.initVal=source.initVal;
			target.crewInitVal=source.crewInitVal;
		}
		public void CharacterPropertyDtoConverter_fillFrom(AppDto.CharacterPropertyDto target, CharacterPropertyDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.propId = source.propId;
			target.propValue = source.propValue;
			if ( source.parentCharacterPropertyDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCharacterPropertyDto);
			}
		}

		public void CharacterPropertyDtoConverter_fillInto(AppDto.CharacterPropertyDto source, CharacterPropertyDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.propId=source.propId;
			target.propValue=source.propValue;
			if ( target.parentCharacterPropertyDto == null ) {
				target.parentCharacterPropertyDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCharacterPropertyDto);
		}
		public void JoinTeamNotifyConverter_fillFrom(AppDto.JoinTeamNotify target, JoinTeamNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
						if (source.member!=null) {
				AppDto.TeamMemberDto retMember = new AppDto.TeamMemberDto();
				TeamMemberDtoConverter_fillFrom(retMember, source.member);
				target.member = retMember;
			}
					}

		public void JoinTeamNotifyConverter_fillInto(AppDto.JoinTeamNotify source, JoinTeamNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.member!=null){
				TeamMemberDto protobufModel = new TeamMemberDto();
				TeamMemberDtoConverter_fillInto(source.member, protobufModel);
				target.member = protobufModel;
			}
		}
		public void TeamSceneNotifyConverter_fillFrom(AppDto.TeamSceneNotify target, TeamSceneNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.teamId = source.teamId;
			target.leaderPlayerId = source.leaderPlayerId;
			if (source.inTeamPlayerIds != null) {
				List<long> items = new List<long>();
				target.inTeamPlayerIds = items;
				foreach (long item in source.inTeamPlayerIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.inTeamPlayerIds = items;
			}
		}

		public void TeamSceneNotifyConverter_fillInto(AppDto.TeamSceneNotify source, TeamSceneNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.teamId=source.teamId;
			target.leaderPlayerId=source.leaderPlayerId;
			if (source.inTeamPlayerIds != null){
				foreach(long inTeamPlayerIds in source.inTeamPlayerIds)
					target.inTeamPlayerIds.Add(inTeamPlayerIds);
			}
		}
		public void VideoRetreatStateConverter_fillFrom(AppDto.VideoRetreatState target, VideoRetreatState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.success = source.success;
			target.rate = source.rate;
			if (source.retreatSoldiers != null) {
				List<long> items = new List<long>();
				target.retreatSoldiers = items;
                foreach (long item in source.retreatSoldiers)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.retreatSoldiers = items;
			}
			if ( source.parentVideoRetreatState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoRetreatState);
			}
		}

		public void VideoRetreatStateConverter_fillInto(AppDto.VideoRetreatState source, VideoRetreatState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.success=source.success;
			target.rate=source.rate;
			if (source.retreatSoldiers != null){
				foreach(long retreatSoldiers in source.retreatSoldiers)
					target.retreatSoldiers.Add(retreatSoldiers);
			}
			if ( target.parentVideoRetreatState == null ) {
				target.parentVideoRetreatState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoRetreatState);
		}
		public void AptitudeTipsConverter_fillFrom(AppDto.AptitudeTips target, AptitudeTips source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.factionId = source.factionId;
			target.physique = source.physique;
			target.power = source.power;
			target.desc = source.desc;
			target.spirit = source.spirit;
			target.magic = source.magic;
		}

		public void AptitudeTipsConverter_fillInto(AppDto.AptitudeTips source, AptitudeTips target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.factionId=source.factionId;
			target.physique=source.physique;
			target.power=source.power;
			if(source.desc!=null)
				target.desc = source.desc;
			target.spirit=source.spirit;
			target.magic=source.magic;
		}
		public void BasePropertyTransformConverter_fillFrom(AppDto.BasePropertyTransform target, BasePropertyTransform source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.propertyId = source.propertyId;
			target.battleProperty = source.battleProperty;
			target.factionId = source.factionId;
		}

		public void BasePropertyTransformConverter_fillInto(AppDto.BasePropertyTransform source, BasePropertyTransform target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.propertyId=source.propertyId;
			if(source.battleProperty!=null)
				target.battleProperty = source.battleProperty;
			target.factionId=source.factionId;
		}
		public void TeamCommanderNotifyConverter_fillFrom(AppDto.TeamCommanderNotify target, TeamCommanderNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.commanderMemberId = source.commanderMemberId;
		}

		public void TeamCommanderNotifyConverter_fillInto(AppDto.TeamCommanderNotify source, TeamCommanderNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.commanderMemberId=source.commanderMemberId;
		}
		public void TeamRecallNotifyConverter_fillFrom(AppDto.TeamRecallNotify target, TeamRecallNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.teamId = source.teamId;
		}

		public void TeamRecallNotifyConverter_fillInto(AppDto.TeamRecallNotify source, TeamRecallNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.teamId=source.teamId;
		}
		public void BattlePlayerInfoDtoConverter_fillFrom(AppDto.BattlePlayerInfoDto target, BattlePlayerInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.useItemCount = source.useItemCount;
			target.playerId = source.playerId;
			if (source.allCrewSoldierIds != null) {
				List<long> items = new List<long>();
				target.allCrewSoldierIds = items;
                foreach (long item in source.allCrewSoldierIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.allCrewSoldierIds = items;
			}
			target.usableCallTime = source.usableCallTime;
		}

		public void BattlePlayerInfoDtoConverter_fillInto(AppDto.BattlePlayerInfoDto source, BattlePlayerInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.useItemCount=source.useItemCount;
			target.playerId=source.playerId;
			if (source.allCrewSoldierIds != null){
				foreach(long allCrewSoldierIds in source.allCrewSoldierIds)
					target.allCrewSoldierIds.Add(allCrewSoldierIds);
			}
			target.usableCallTime=source.usableCallTime;
		}
		public void UITipsConverter_fillFrom(AppDto.UITips target, UITips source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.clientModule = source.clientModule;
			target.tips = source.tips;
		}

		public void UITipsConverter_fillInto(AppDto.UITips source, UITips target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.clientModule!=null)
				target.clientModule = source.clientModule;
			if(source.tips!=null)
				target.tips = source.tips;
		}
		public void CommandNotifyConverter_fillFrom(AppDto.CommandNotify target, CommandNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.targetSoldierId = source.targetSoldierId;
			target.command = source.command;
			target.clearAll = source.clearAll;
			target.battleId = source.battleId;
		}

		public void CommandNotifyConverter_fillInto(AppDto.CommandNotify source, CommandNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.targetSoldierId=source.targetSoldierId;
			if(source.command!=null)
				target.command = source.command;
			target.clearAll=source.clearAll;
			target.battleId=source.battleId;
		}
		public void MailTypeConverter_fillFrom(AppDto.MailType target, MailType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.mailTypeName = source.mailTypeName;
			target.saveDate = source.saveDate;
			target.readDelete = source.readDelete;
		}

		public void MailTypeConverter_fillInto(AppDto.MailType source, MailType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.mailTypeName!=null)
				target.mailTypeName = source.mailTypeName;
			target.saveDate=source.saveDate;
			target.readDelete=source.readDelete;
		}
		public void PlayerMailDtoConverter_fillFrom(AppDto.PlayerMailDto target, PlayerMailDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.title = source.title;
			target.content = source.content;
			target.fromId = source.fromId;
			target.fromName = source.fromName;
			target.toId = source.toId;
			target.sendTime = source.sendTime;
			target.mailTypeId = source.mailTypeId;
			if (source.attachments != null) {
				List<AppDto.MailAttachmentDto> items = new List<AppDto.MailAttachmentDto>();
				target.attachments = items;
				foreach (MailAttachmentDto item in source.attachments) {
					AppDto.MailAttachmentDto result = new AppDto.MailAttachmentDto();
					MailAttachmentDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.MailAttachmentDto> items = new List<AppDto.MailAttachmentDto>();
				target.attachments = items;
			}
			target.hasAttachments = source.hasAttachments;
			target.read = source.read;
		}

		public void PlayerMailDtoConverter_fillInto(AppDto.PlayerMailDto source, PlayerMailDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.title!=null)
				target.title = source.title;
			if(source.content!=null)
				target.content = source.content;
			target.fromId=source.fromId;
			if(source.fromName!=null)
				target.fromName = source.fromName;
			target.toId=source.toId;
			target.sendTime=source.sendTime;
			target.mailTypeId=source.mailTypeId;
			if (source.attachments != null){
				foreach(AppDto.MailAttachmentDto attachments in source.attachments){
					MailAttachmentDto protobufModel = new MailAttachmentDto();
					MailAttachmentDtoConverter_fillInto(attachments, protobufModel);
					target.attachments.Add(protobufModel);
				}
			}
			target.hasAttachments=source.hasAttachments;
			target.read=source.read;
		}
		public void VideoTargetExceptionStateConverter_fillFrom(AppDto.VideoTargetExceptionState target, VideoTargetExceptionState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoTargetExceptionState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoTargetExceptionState);
			}
			target.errorCode = source.errorCode;
			target.message = source.message;
		}

		public void VideoTargetExceptionStateConverter_fillInto(AppDto.VideoTargetExceptionState source, VideoTargetExceptionState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoTargetExceptionState == null ) {
				target.parentVideoTargetExceptionState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoTargetExceptionState);
			target.errorCode=source.errorCode;
			if(source.message!=null)
				target.message = source.message;
		}
		public void SkillBuffRateConverter_fillFrom(AppDto.SkillBuffRate target, SkillBuffRate source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.buffId = source.buffId;
			target.rate = source.rate;
		}

		public void SkillBuffRateConverter_fillInto(AppDto.SkillBuffRate source, SkillBuffRate target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.buffId=source.buffId;
			target.rate=source.rate;
		}
		public void MailsDtoConverter_fillFrom(AppDto.MailsDto target, MailsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentMailsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentMailsDto);
			}
			if (source.mails != null) {
				List<AppDto.PlayerMailDto> items = new List<AppDto.PlayerMailDto>();
				target.mails = items;
				foreach (PlayerMailDto item in source.mails) {
					AppDto.PlayerMailDto result = new AppDto.PlayerMailDto();
					PlayerMailDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.PlayerMailDto> items = new List<AppDto.PlayerMailDto>();
				target.mails = items;
			}
			target.notReadCount = source.notReadCount;
		}

		public void MailsDtoConverter_fillInto(AppDto.MailsDto source, MailsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentMailsDto == null ) {
				target.parentMailsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentMailsDto);
			if (source.mails != null){
				foreach(AppDto.PlayerMailDto mails in source.mails){
					PlayerMailDto protobufModel = new PlayerMailDto();
					PlayerMailDtoConverter_fillInto(mails, protobufModel);
					target.mails.Add(protobufModel);
				}
			}
			target.notReadCount=source.notReadCount;
		}
		public void TeamMemberSimpleDtoConverter_fillFrom(AppDto.TeamMemberSimpleDto target, TeamMemberSimpleDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.nickname = source.nickname;
			target.factionId = source.factionId;
			target.grade = source.grade;
			target.charactorId = source.charactorId;
			if ( source.parentTeamMemberSimpleDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTeamMemberSimpleDto);
			}
			target.slotsElementLimit = source.slotsElementLimit;
		}

		public void TeamMemberSimpleDtoConverter_fillInto(AppDto.TeamMemberSimpleDto source, TeamMemberSimpleDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.factionId=source.factionId;
			target.grade=source.grade;
			target.charactorId=source.charactorId;
			if ( target.parentTeamMemberSimpleDto == null ) {
				target.parentTeamMemberSimpleDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTeamMemberSimpleDto);
			target.slotsElementLimit=source.slotsElementLimit;
		}
		public void MailAttachmentDtoConverter_fillFrom(AppDto.MailAttachmentDto target, MailAttachmentDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.count = source.count;
			target.itemId = source.itemId;
			target.circulationType = source.circulationType;
			target.uniqueId = source.uniqueId;
			if (source.extra!=null && source.extra is GameObjectTypedMessage) {			
				GameObjectTypedMessage itemExtra = source.extra;
				System.Object result = ProtobufUtilsNet.parseFrom(itemExtra.message_type_id,itemExtra.message_data);
				if (result == null)
					throw new IOException("parse data error");
				target.extra = result;
			}
			target.expireAt = source.expireAt;
		}

		public void MailAttachmentDtoConverter_fillInto(AppDto.MailAttachmentDto source, MailAttachmentDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.count=source.count;
			target.itemId=source.itemId;
			target.circulationType=source.circulationType;
			target.uniqueId=source.uniqueId;
			if(source.extra != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.extra);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.extra = protobufModel;
			}
			target.expireAt=source.expireAt;
		}
		public void SkillsDtoConverter_fillFrom(AppDto.SkillsDto target, SkillsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSkillsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSkillsDto);
			}
			if (source.craftsInfos != null) {
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsInfos = items;
				foreach (CraftsGradeDto item in source.craftsInfos) {
					AppDto.CraftsGradeDto result = new AppDto.CraftsGradeDto();
					CraftsGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsInfos = items;
			}
			target.defaultSCrafts = source.defaultSCrafts;
			if (source.magic != null) {
				List<int> items = new List<int>();
				target.magic = items;
				foreach (int item in source.magic)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.magic = items;
			}
		}

		public void SkillsDtoConverter_fillInto(AppDto.SkillsDto source, SkillsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSkillsDto == null ) {
				target.parentSkillsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSkillsDto);
			if (source.craftsInfos != null){
				foreach(AppDto.CraftsGradeDto craftsInfos in source.craftsInfos){
					CraftsGradeDto protobufModel = new CraftsGradeDto();
					CraftsGradeDtoConverter_fillInto(craftsInfos, protobufModel);
					target.craftsInfos.Add(protobufModel);
				}
			}
			target.defaultSCrafts=source.defaultSCrafts;
			if (source.magic != null){
				foreach(int magic in source.magic)
					target.magic.Add(magic);
			}
		}
		public void FactionMappingConverter_fillFrom(AppDto.FactionMapping target, FactionMapping source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.type = source.type;
			target.classLevel = source.classLevel;
		}

		public void FactionMappingConverter_fillInto(AppDto.FactionMapping source, FactionMapping target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.type=source.type;
			target.classLevel=source.classLevel;
		}
		public void FriendInfoDtoConverter_fillFrom(AppDto.FriendInfoDto target, FriendInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.degree = source.degree;
			target.online = source.online;
			target.createTime = source.createTime;
			target.friendId = source.friendId;
			target.name = source.name;
			target.grade = source.grade;
			target.factionId = source.factionId;
			target.countryId = source.countryId;
			if ( source.parentFriendInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFriendInfoDto);
			}
			target.offlineTime = source.offlineTime;
			target.charactorId = source.charactorId;
		}

		public void FriendInfoDtoConverter_fillInto(AppDto.FriendInfoDto source, FriendInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.degree=source.degree;
			target.online=source.online;
			target.createTime=source.createTime;
			target.friendId=source.friendId;
			if(source.name!=null)
				target.name = source.name;
			target.grade=source.grade;
			target.factionId=source.factionId;
			target.countryId=source.countryId;
			if ( target.parentFriendInfoDto == null ) {
				target.parentFriendInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFriendInfoDto);
			target.offlineTime=source.offlineTime;
			target.charactorId=source.charactorId;
		}
		public void FriendOnlineNotifyConverter_fillFrom(AppDto.FriendOnlineNotify target, FriendOnlineNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.online = source.online;
		}

		public void FriendOnlineNotifyConverter_fillInto(AppDto.FriendOnlineNotify source, FriendOnlineNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.online=source.online;
		}
		public void FriendsDtoConverter_fillFrom(AppDto.FriendsDto target, FriendsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentFriendsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFriendsDto);
			}
			if (source.friendsInfoDtos != null) {
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.friendsInfoDtos = items;
				foreach (FriendInfoDto item in source.friendsInfoDtos) {
					AppDto.FriendInfoDto result = new AppDto.FriendInfoDto();
					FriendInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.friendsInfoDtos = items;
			}
			target.refused = source.refused;
			if (source.blackList != null) {
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.blackList = items;
				foreach (FriendInfoDto item in source.blackList) {
					AppDto.FriendInfoDto result = new AppDto.FriendInfoDto();
					FriendInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.blackList = items;
			}
			target.friendsLimit = source.friendsLimit;
		}

		public void FriendsDtoConverter_fillInto(AppDto.FriendsDto source, FriendsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentFriendsDto == null ) {
				target.parentFriendsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFriendsDto);
			if (source.friendsInfoDtos != null){
				foreach(AppDto.FriendInfoDto friendsInfoDtos in source.friendsInfoDtos){
					FriendInfoDto protobufModel = new FriendInfoDto();
					FriendInfoDtoConverter_fillInto(friendsInfoDtos, protobufModel);
					target.friendsInfoDtos.Add(protobufModel);
				}
			}
			target.refused=source.refused;
			if (source.blackList != null){
				foreach(AppDto.FriendInfoDto blackList in source.blackList){
					FriendInfoDto protobufModel = new FriendInfoDto();
					FriendInfoDtoConverter_fillInto(blackList, protobufModel);
					target.blackList.Add(protobufModel);
				}
			}
			target.friendsLimit=source.friendsLimit;
		}
		public void FriendGradeNotifyConverter_fillFrom(AppDto.FriendGradeNotify target, FriendGradeNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.newLevel = source.newLevel;
		}

		public void FriendGradeNotifyConverter_fillInto(AppDto.FriendGradeNotify source, FriendGradeNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.newLevel=source.newLevel;
		}
		public void SkillPreviewInfoConverter_fillFrom(AppDto.SkillPreviewInfo target, SkillPreviewInfo source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.teamA != null) {
				List<int> items = new List<int>();
				target.teamA = items;
				foreach (int item in source.teamA)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.teamA = items;
			}
			target.formationA = source.formationA;
			if (source.teamB != null) {
				List<int> items = new List<int>();
				target.teamB = items;
				foreach (int item in source.teamB)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.teamB = items;
			}
			target.formationB = source.formationB;
			if (source.attackTargetIndex != null) {
				List<int> items = new List<int>();
				target.attackTargetIndex = items;
				foreach (int item in source.attackTargetIndex)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.attackTargetIndex = items;
			}
			target.damage = source.damage;
		}

		public void SkillPreviewInfoConverter_fillInto(AppDto.SkillPreviewInfo source, SkillPreviewInfo target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.teamA != null){
				foreach(int teamA in source.teamA)
					target.teamA.Add(teamA);
			}
			target.formationA=source.formationA;
			if (source.teamB != null){
				foreach(int teamB in source.teamB)
					target.teamB.Add(teamB);
			}
			target.formationB=source.formationB;
			if (source.attackTargetIndex != null){
				foreach(int attackTargetIndex in source.attackTargetIndex)
					target.attackTargetIndex.Add(attackTargetIndex);
			}
			target.damage=source.damage;
		}
		public void ActionQueueRemoveNotifyConverter_fillFrom(AppDto.ActionQueueRemoveNotify target, ActionQueueRemoveNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentActionQueueRemoveNotify != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentActionQueueRemoveNotify);
			}
			target.battleId = source.battleId;
			target.id = source.id;
		}

		public void ActionQueueRemoveNotifyConverter_fillInto(AppDto.ActionQueueRemoveNotify source, ActionQueueRemoveNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentActionQueueRemoveNotify == null ) {
				target.parentActionQueueRemoveNotify = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentActionQueueRemoveNotify);
			target.battleId=source.battleId;
			target.id=source.id;
		}
		public void TeamCommandConverter_fillFrom(AppDto.TeamCommand target, TeamCommand source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.command != null) {
				List<string> items = new List<string>();
				target.command = items;
				foreach (string item in source.command)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.command = items;
			}
		}

		public void TeamCommandConverter_fillInto(AppDto.TeamCommand source, TeamCommand target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.command != null){
				foreach(string command in source.command)
					target.command.Add(command);
			}
		}
		public void WealthNotifyConverter_fillFrom(AppDto.WealthNotify target, WealthNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.traceTypeId = source.traceTypeId;
			if (source.wealthItems != null) {
				List<AppDto.WealthItemNotify> items = new List<AppDto.WealthItemNotify>();
				target.wealthItems = items;
				foreach (WealthItemNotify item in source.wealthItems) {
					AppDto.WealthItemNotify result = new AppDto.WealthItemNotify();
					WealthItemNotifyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.WealthItemNotify> items = new List<AppDto.WealthItemNotify>();
				target.wealthItems = items;
			}
		}

		public void WealthNotifyConverter_fillInto(AppDto.WealthNotify source, WealthNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.traceTypeId=source.traceTypeId;
			if (source.wealthItems != null){
				foreach(AppDto.WealthItemNotify wealthItems in source.wealthItems){
					WealthItemNotify protobufModel = new WealthItemNotify();
					WealthItemNotifyConverter_fillInto(wealthItems, protobufModel);
					target.wealthItems.Add(protobufModel);
				}
			}
		}
		public void FormationConverter_fillFrom(AppDto.Formation target, Formation source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.description = source.description;
			if (source.debuffTargetIds != null) {
				List<int> items = new List<int>();
				target.debuffTargetIds = items;
				foreach (int item in source.debuffTargetIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.debuffTargetIds = items;
			}
			if (source.targetIds != null) {
				List<int> items = new List<int>();
				target.targetIds = items;
				foreach (int item in source.targetIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.targetIds = items;
			}
			if (source.materialIds != null) {
				List<int> items = new List<int>();
				target.materialIds = items;
				foreach (int item in source.materialIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.materialIds = items;
			}
			target.gradeLimit = source.gradeLimit;
			target.descMaxNum = source.descMaxNum;
		}

		public void FormationConverter_fillInto(AppDto.Formation source, Formation target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.description!=null)
				target.description = source.description;
			if (source.debuffTargetIds != null){
				foreach(int debuffTargetIds in source.debuffTargetIds)
					target.debuffTargetIds.Add(debuffTargetIds);
			}
			if (source.targetIds != null){
				foreach(int targetIds in source.targetIds)
					target.targetIds.Add(targetIds);
			}
			if (source.materialIds != null){
				foreach(int materialIds in source.materialIds)
					target.materialIds.Add(materialIds);
			}
			target.gradeLimit=source.gradeLimit;
			if(source.descMaxNum!=null)
				target.descMaxNum = source.descMaxNum;
		}
		public void FormationInfoDtoConverter_fillFrom(AppDto.FormationInfoDto target, FormationInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentFormationInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFormationInfoDto);
			}
			target.level = source.level;
			target.formationId = source.formationId;
		}

		public void FormationInfoDtoConverter_fillInto(AppDto.FormationInfoDto source, FormationInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentFormationInfoDto == null ) {
				target.parentFormationInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFormationInfoDto);
			target.level=source.level;
			target.formationId=source.formationId;
		}
		public void FriendDegreeNotifyConverter_fillFrom(AppDto.FriendDegreeNotify target, FriendDegreeNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.rule = source.rule;
			target.friendPlayerId = source.friendPlayerId;
			target.amount = source.amount;
		}

		public void FriendDegreeNotifyConverter_fillInto(AppDto.FriendDegreeNotify source, FriendDegreeNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.rule=source.rule;
			target.friendPlayerId=source.friendPlayerId;
			target.amount=source.amount;
		}
		public void WarehouseDtoConverter_fillFrom(AppDto.WarehouseDto target, WarehouseDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentWarehouseDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentWarehouseDto);
			}
			if (source.warehousePageDtos != null) {
				List<AppDto.WarehousePageNotify> items = new List<AppDto.WarehousePageNotify>();
				target.warehousePageDtos = items;
				foreach (WarehousePageNotify item in source.warehousePageDtos) {
					AppDto.WarehousePageNotify result = new AppDto.WarehousePageNotify();
					WarehousePageNotifyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.WarehousePageNotify> items = new List<AppDto.WarehousePageNotify>();
				target.warehousePageDtos = items;
			}
			if (source.bagDto!=null && source.bagDto is GameObjectTypedMessage) {
				GameObjectTypedMessage itemBagDto = source.bagDto;
				System.Object objBagDto = ProtobufUtilsNet.parseFrom(itemBagDto.message_type_id,itemBagDto.message_data);
				if (objBagDto == null)
					throw new IOException("parse data error");
				target.bagDto = (AppDto.BagDto)objBagDto;
			}
		}

		public void WarehouseDtoConverter_fillInto(AppDto.WarehouseDto source, WarehouseDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentWarehouseDto == null ) {
				target.parentWarehouseDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentWarehouseDto);
			if (source.warehousePageDtos != null){
				foreach(AppDto.WarehousePageNotify warehousePageDtos in source.warehousePageDtos){
					WarehousePageNotify protobufModel = new WarehousePageNotify();
					WarehousePageNotifyConverter_fillInto(warehousePageDtos, protobufModel);
					target.warehousePageDtos.Add(protobufModel);
				}
			}
			if(source.bagDto != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.bagDto);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.bagDto = protobufModel;
			}
		}
		public void WarehousePageNotifyConverter_fillFrom(AppDto.WarehousePageNotify target, WarehousePageNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.pageIndex = source.pageIndex;
			target.pageName = source.pageName;
		}

		public void WarehousePageNotifyConverter_fillInto(AppDto.WarehousePageNotify source, WarehousePageNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.pageIndex=source.pageIndex;
			if(source.pageName!=null)
				target.pageName = source.pageName;
		}
		public void LatestTeammateNotifyConverter_fillFrom(AppDto.LatestTeammateNotify target, LatestTeammateNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.friendInfoDtos != null) {
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.friendInfoDtos = items;
				foreach (FriendInfoDto item in source.friendInfoDtos) {
					AppDto.FriendInfoDto result = new AppDto.FriendInfoDto();
					FriendInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.friendInfoDtos = items;
			}
		}

		public void LatestTeammateNotifyConverter_fillInto(AppDto.LatestTeammateNotify source, LatestTeammateNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.friendInfoDtos != null){
				foreach(AppDto.FriendInfoDto friendInfoDtos in source.friendInfoDtos){
					FriendInfoDto protobufModel = new FriendInfoDto();
					FriendInfoDtoConverter_fillInto(friendInfoDtos, protobufModel);
					target.friendInfoDtos.Add(protobufModel);
				}
			}
		}
		public void BagCapabillityNotifyConverter_fillFrom(AppDto.BagCapabillityNotify target, BagCapabillityNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.oldCapability = source.oldCapability;
			target.newCapability = source.newCapability;
			target.bagId = source.bagId;
		}

		public void BagCapabillityNotifyConverter_fillInto(AppDto.BagCapabillityNotify source, BagCapabillityNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.oldCapability=source.oldCapability;
			target.newCapability=source.newCapability;
			target.bagId=source.bagId;
		}
		public void ChatChannelConverter_fillFrom(AppDto.ChatChannel target, ChatChannel source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.maxContentLength = source.maxContentLength;
			target.id = source.id;
			target.name = source.name;
			target.talkable = source.talkable;
			target.vigourConsume = source.vigourConsume;
			target.gradeLimit = source.gradeLimit;
			target.keepMaxSize = source.keepMaxSize;
			target.keepOfflineSize = source.keepOfflineSize;
			target.voiceable = source.voiceable;
			if (source.chatPhraseIds != null) {
				List<int> items = new List<int>();
				target.chatPhraseIds = items;
				foreach (int item in source.chatPhraseIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.chatPhraseIds = items;
			}
			target.talkInterval = source.talkInterval;
		}

		public void ChatChannelConverter_fillInto(AppDto.ChatChannel source, ChatChannel target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.maxContentLength=source.maxContentLength;
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.talkable=source.talkable;
			if(source.vigourConsume!=null)
				target.vigourConsume = source.vigourConsume;
			if(source.gradeLimit!=null)
				target.gradeLimit = source.gradeLimit;
			target.keepMaxSize=source.keepMaxSize;
			target.keepOfflineSize=source.keepOfflineSize;
			target.voiceable=source.voiceable;
			if (source.chatPhraseIds != null){
				foreach(int chatPhraseIds in source.chatPhraseIds)
					target.chatPhraseIds.Add(chatPhraseIds);
			}
			if(source.talkInterval!=null)
				target.talkInterval = source.talkInterval;
		}
		public void ChatNotifyConverter_fillFrom(AppDto.ChatNotify target, ChatNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentChatNotify != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentChatNotify);
			}
			target.channelId = source.channelId;
			target.content = source.content;
						if (source.fromPlayer!=null) {
				AppDto.ShortPlayerDto retFromPlayer = new AppDto.ShortPlayerDto();
				ShortPlayerDtoConverter_fillFrom(retFromPlayer, source.fromPlayer);
				target.fromPlayer = retFromPlayer;
			}
						target.fromTime = source.fromTime;
			target.toPlayerId = source.toPlayerId;
			target.itemId = source.itemId;
			target.lableType = source.lableType;
			target.actionType = source.actionType;
		}

		public void ChatNotifyConverter_fillInto(AppDto.ChatNotify source, ChatNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentChatNotify == null ) {
				target.parentChatNotify = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentChatNotify);
			target.channelId=source.channelId;
			if(source.content!=null)
				target.content = source.content;
			if(source.fromPlayer!=null){
				ShortPlayerDto protobufModel = new ShortPlayerDto();
				ShortPlayerDtoConverter_fillInto(source.fromPlayer, protobufModel);
				target.fromPlayer = protobufModel;
			}
			target.fromTime=source.fromTime;
			target.toPlayerId=source.toPlayerId;
			target.itemId=source.itemId;
			target.lableType=source.lableType;
			target.actionType=source.actionType;
		}
		public void ShortPlayerDtoConverter_fillFrom(AppDto.ShortPlayerDto target, ShortPlayerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentShortPlayerDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentShortPlayerDto);
			}
			target.id = source.id;
			target.nickname = source.nickname;
			target.grade = source.grade;
			target.charactorId = source.charactorId;
			target.factionId = source.factionId;
			target.guildId = source.guildId;
			target.contribute = source.contribute;
			target.gender = source.gender;
			target.positionId = source.positionId;
			target.closedLocation = source.closedLocation;
			target.locationInfo = source.locationInfo;
			target.gameServerId = source.gameServerId;
			target.fee = source.fee;
			target.vipLevel = source.vipLevel;
			target.vipBlock = source.vipBlock;
		}

		public void ShortPlayerDtoConverter_fillInto(AppDto.ShortPlayerDto source, ShortPlayerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentShortPlayerDto == null ) {
				target.parentShortPlayerDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentShortPlayerDto);
			target.id=source.id;
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.grade=source.grade;
			target.charactorId=source.charactorId;
			target.factionId=source.factionId;
			target.guildId=source.guildId;
			target.contribute=source.contribute;
			target.gender=source.gender;
			target.positionId=source.positionId;
			target.closedLocation=source.closedLocation;
			if(source.locationInfo!=null)
				target.locationInfo = source.locationInfo;
			target.gameServerId=source.gameServerId;
			target.fee=source.fee;
			target.vipLevel=source.vipLevel;
			target.vipBlock=source.vipBlock;
		}
		public void ChatPropsConsumeConverter_fillFrom(AppDto.ChatPropsConsume target, ChatPropsConsume source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.desc = source.desc;
			target.duration = source.duration;
			target.style = source.style;
		}

		public void ChatPropsConsumeConverter_fillInto(AppDto.ChatPropsConsume source, ChatPropsConsume target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.desc!=null)
				target.desc = source.desc;
			target.duration=source.duration;
			target.style=source.style;
		}
		public void ChatPhraseConverter_fillFrom(AppDto.ChatPhrase target, ChatPhrase source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.chatContent = source.chatContent;
			target.musicId = source.musicId;
		}

		public void ChatPhraseConverter_fillInto(AppDto.ChatPhrase source, ChatPhrase target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.chatContent!=null)
				target.chatContent = source.chatContent;
			if(source.musicId!=null)
				target.musicId = source.musicId;
		}
		public void PlayerBanNotifyConverter_fillFrom(AppDto.PlayerBanNotify target, PlayerBanNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.banExpieAt = source.banExpieAt;
		}

		public void PlayerBanNotifyConverter_fillInto(AppDto.PlayerBanNotify source, PlayerBanNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.banExpieAt=source.banExpieAt;
		}
		public void AppItemConverter_fillFrom(AppDto.AppItem target, AppItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAppItem != null ) {
				RealItemConverter_fillFrom(target,source.parentAppItem);
			}
			target.saleSilverPrice = source.saleSilverPrice;
			target.sort = source.sort;
			target.nimbus = source.nimbus;
			if (source.gainWayIds != null) {
				List<int> items = new List<int>();
				target.gainWayIds = items;
                foreach (int item in source.gainWayIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.gainWayIds = items;
			}
			target.mixable = source.mixable;
			target.resolveable = source.resolveable;
			target.quality = source.quality;
			target.recGainWayId = source.recGainWayId;
		}

		public void AppItemConverter_fillInto(AppDto.AppItem source, AppItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAppItem == null ) {
				target.parentAppItem = new RealItem();
			}
			RealItemConverter_fillInto(source,target.parentAppItem);
			target.saleSilverPrice=source.saleSilverPrice;
			target.sort=source.sort;
			target.nimbus=source.nimbus;
			if (source.gainWayIds != null){
				foreach(int gainWayIds in source.gainWayIds)
					target.gainWayIds.Add(gainWayIds);
			}
			target.mixable=source.mixable;
			target.resolveable=source.resolveable;
			target.quality=source.quality;
			target.recGainWayId=source.recGainWayId;
		}
		public void AppVirtualItemConverter_fillFrom(AppDto.AppVirtualItem target, AppVirtualItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAppVirtualItem != null ) {
				VirtualItemConverter_fillFrom(target,source.parentAppVirtualItem);
			}
			target.carryLimit = source.carryLimit;
			target.dailyLimit = source.dailyLimit;
			target.overToDelay = source.overToDelay;
			target.introduction = source.introduction;
			if (source.gainWayIds != null) {
				List<int> items = new List<int>();
				target.gainWayIds = items;
				foreach (int item in source.gainWayIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.gainWayIds = items;
			}
			target.itemType = source.itemType;
			target.quality = source.quality;
		}

		public void AppVirtualItemConverter_fillInto(AppDto.AppVirtualItem source, AppVirtualItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAppVirtualItem == null ) {
				target.parentAppVirtualItem = new VirtualItem();
			}
			VirtualItemConverter_fillInto(source,target.parentAppVirtualItem);
			target.carryLimit=source.carryLimit;
			target.dailyLimit=source.dailyLimit;
			target.overToDelay=source.overToDelay;
			if(source.introduction!=null)
				target.introduction = source.introduction;
			if (source.gainWayIds != null){
				foreach(int gainWayIds in source.gainWayIds)
					target.gainWayIds.Add(gainWayIds);
			}
			target.itemType=source.itemType;
			target.quality=source.quality;
		}
		public void CompositePropsConverter_fillFrom(AppDto.CompositeProps target, CompositeProps source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.consumeCount = source.consumeCount;
			target.gainId = source.gainId;
			target.gainCount = source.gainCount;
			target.successRate = source.successRate;
			target.virtualItemId = source.virtualItemId;
			target.compositePrice = source.compositePrice;
		}

		public void CompositePropsConverter_fillInto(AppDto.CompositeProps source, CompositeProps target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.consumeCount=source.consumeCount;
			target.gainId=source.gainId;
			target.gainCount=source.gainCount;
			target.successRate=source.successRate;
			target.virtualItemId=source.virtualItemId;
			target.compositePrice=source.compositePrice;
		}
		public void PropsConverter_fillFrom(AppDto.Props target, Props source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentProps != null ) {
				AppItemConverter_fillFrom(target,source.parentProps);
			}
			target.introduction = source.introduction;
			target.scopeId = source.scopeId;
			target.minGrade = source.minGrade;
			target.maxGrade = source.maxGrade;
			target.logicId = source.logicId;
			target.triggerType = source.triggerType;
			target.targetType = source.targetType;
			target.reliveTarget = source.reliveTarget;
			target.autoApply = source.autoApply;
			target.dialogFunctionId = source.dialogFunctionId;
			target.surperposition = source.surperposition;
			target.forbiddenInFighting = source.forbiddenInFighting;
			target.forbiddenToWarehouse = source.forbiddenToWarehouse;
			target.relationType = source.relationType;
			if (source.propsParam!=null && source.propsParam is GameObjectTypedMessage) {
				GameObjectTypedMessage itemPropsParam = source.propsParam;
				System.Object objPropsParam = ProtobufUtilsNet.parseFrom(itemPropsParam.message_type_id,itemPropsParam.message_data);
				if (objPropsParam == null)
					throw new IOException("parse data error");
				target.propsParam = (AppDto.PropsParam)objPropsParam;
			}
			target.grade = source.grade;
		}

		public void PropsConverter_fillInto(AppDto.Props source, Props target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentProps == null ) {
				target.parentProps = new AppItem();
			}
			AppItemConverter_fillInto(source,target.parentProps);
			if(source.introduction!=null)
				target.introduction = source.introduction;
			target.scopeId=source.scopeId;
			target.minGrade=source.minGrade;
			target.maxGrade=source.maxGrade;
			target.logicId=source.logicId;
			target.triggerType=source.triggerType;
			target.targetType=source.targetType;
			target.reliveTarget=source.reliveTarget;
			target.autoApply=source.autoApply;
			target.dialogFunctionId=source.dialogFunctionId;
			target.surperposition=source.surperposition;
			target.forbiddenInFighting=source.forbiddenInFighting;
			target.forbiddenToWarehouse=source.forbiddenToWarehouse;
			target.relationType=source.relationType;
			if(source.propsParam != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.propsParam);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.propsParam = protobufModel;
			}
			target.grade=source.grade;
		}
		public void ResolvePropsConverter_fillFrom(AppDto.ResolveProps target, ResolveProps source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.consumeName = source.consumeName;
			target.id = source.id;
			if (source.gainItems != null) {
				List<int> items = new List<int>();
				target.gainItems = items;
                foreach (int item in source.gainItems)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.gainItems = items;
			}
			target.virtualItemId = source.virtualItemId;
			target.resolvePrice = source.resolvePrice;
			target.logicId = source.logicId;
			if (source.resolveParam!=null && source.resolveParam is GameObjectTypedMessage) {
				GameObjectTypedMessage itemResolveParam = source.resolveParam;
				System.Object objResolveParam = ProtobufUtilsNet.parseFrom(itemResolveParam.message_type_id,itemResolveParam.message_data);
				if (objResolveParam == null)
					throw new IOException("parse data error");
				target.resolveParam = (AppDto.ResolveParam)objResolveParam;
			}
		}

		public void ResolvePropsConverter_fillInto(AppDto.ResolveProps source, ResolveProps target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.consumeName!=null)
				target.consumeName = source.consumeName;
			target.id=source.id;
			if (source.gainItems != null){
				foreach(int gainItems in source.gainItems)
					target.gainItems.Add(gainItems);
			}
			target.virtualItemId=source.virtualItemId;
			target.resolvePrice=source.resolvePrice;
			target.logicId=source.logicId;
			if(source.resolveParam != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.resolveParam);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.resolveParam = protobufModel;
			}
		}
		public void ResolveGainDtoConverter_fillFrom(AppDto.ResolveGainDto target, ResolveGainDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentResolveGainDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentResolveGainDto);
			}
			target.id = source.id;
			target.count = source.count;
			target.circulationTypeId = source.circulationTypeId;
		}

		public void ResolveGainDtoConverter_fillInto(AppDto.ResolveGainDto source, ResolveGainDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentResolveGainDto == null ) {
				target.parentResolveGainDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentResolveGainDto);
			target.id=source.id;
			target.count=source.count;
			target.circulationTypeId=source.circulationTypeId;
		}
		public void GeneralResolveDtoConverter_fillFrom(AppDto.GeneralResolveDto target, GeneralResolveDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.minCount = source.minCount;
			target.maxCount = source.maxCount;
			target.bind = source.bind;
		}

		public void GeneralResolveDtoConverter_fillInto(AppDto.GeneralResolveDto source, GeneralResolveDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.minCount=source.minCount;
			target.maxCount=source.maxCount;
			target.bind=source.bind;
		}
		public void ResolveParamConverter_fillFrom(AppDto.ResolveParam target, ResolveParam source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentResolveParam != null ) {
				LogicParamAdapterConverter_fillFrom(target,source.parentResolveParam);
			}
		}

		public void ResolveParamConverter_fillInto(AppDto.ResolveParam source, ResolveParam target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentResolveParam == null ) {
				target.parentResolveParam = new LogicParamAdapter();
			}
			LogicParamAdapterConverter_fillInto(source,target.parentResolveParam);
		}
		public void ResolveParam_1Converter_fillFrom(AppDto.ResolveParam_1 target, ResolveParam_1 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.generalResolveDtos != null) {
				List<AppDto.GeneralResolveDto> items = new List<AppDto.GeneralResolveDto>();
				target.generalResolveDtos = items;
				foreach (GeneralResolveDto item in source.generalResolveDtos) {
					AppDto.GeneralResolveDto result = new AppDto.GeneralResolveDto();
					GeneralResolveDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.GeneralResolveDto> items = new List<AppDto.GeneralResolveDto>();
				target.generalResolveDtos = items;
			}
			if ( source.parentResolveParam_1 != null ) {
				ResolveParamConverter_fillFrom(target,source.parentResolveParam_1);
			}
		}

		public void ResolveParam_1Converter_fillInto(AppDto.ResolveParam_1 source, ResolveParam_1 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.generalResolveDtos != null){
				foreach(AppDto.GeneralResolveDto generalResolveDtos in source.generalResolveDtos){
					GeneralResolveDto protobufModel = new GeneralResolveDto();
					GeneralResolveDtoConverter_fillInto(generalResolveDtos, protobufModel);
					target.generalResolveDtos.Add(protobufModel);
				}
			}
			if ( target.parentResolveParam_1 == null ) {
				target.parentResolveParam_1 = new ResolveParam();
			}
			ResolveParamConverter_fillInto(source,target.parentResolveParam_1);
		}
		public void LogicParamAdapterConverter_fillFrom(AppDto.LogicParamAdapter target, LogicParamAdapter source){
			//no property
		}

		public void LogicParamAdapterConverter_fillInto(AppDto.LogicParamAdapter source, LogicParamAdapter target){
			//no property
		}
		public void MailChangeIdsNotifyConverter_fillFrom(AppDto.MailChangeIdsNotify target, MailChangeIdsNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.extractmailIds != null) {
				List<long> items = new List<long>();
				target.extractmailIds = items;
				foreach (long item in source.extractmailIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.extractmailIds = items;
			}
			if (source.deletemailIds != null) {
				List<long> items = new List<long>();
				target.deletemailIds = items;
				foreach (long item in source.deletemailIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.deletemailIds = items;
			}
		}

		public void MailChangeIdsNotifyConverter_fillInto(AppDto.MailChangeIdsNotify source, MailChangeIdsNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.extractmailIds != null){
				foreach(long extractmailIds in source.extractmailIds)
					target.extractmailIds.Add(extractmailIds);
			}
			if (source.deletemailIds != null){
				foreach(long deletemailIds in source.deletemailIds)
					target.deletemailIds.Add(deletemailIds);
			}
		}
		public void ExpGradeConverter_fillFrom(AppDto.ExpGrade target, ExpGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.mainCharactorExp = source.mainCharactorExp;
			target.petExp = source.petExp;
		}

		public void ExpGradeConverter_fillInto(AppDto.ExpGrade source, ExpGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.mainCharactorExp=source.mainCharactorExp;
			target.petExp=source.petExp;
		}
		public void CharactorExpInfoNotifyConverter_fillFrom(AppDto.CharactorExpInfoNotify target, CharactorExpInfoNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.expGain = source.expGain;
			target.oldLevel = source.oldLevel;
			target.upgarded = source.upgarded;
			target.maxLevelReached = source.maxLevelReached;
			target.traceTypeId = source.traceTypeId;
			target.level = source.level;
			target.exp = source.exp;
			target.charactorType = source.charactorType;
			target.leaderExp = source.leaderExp;
			target.potential = source.potential;
		}

		public void CharactorExpInfoNotifyConverter_fillInto(AppDto.CharactorExpInfoNotify source, CharactorExpInfoNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.expGain=source.expGain;
			target.oldLevel=source.oldLevel;
			target.upgarded=source.upgarded;
			target.maxLevelReached=source.maxLevelReached;
			target.traceTypeId=source.traceTypeId;
			target.level=source.level;
			target.exp=source.exp;
			target.charactorType=source.charactorType;
			target.leaderExp=source.leaderExp;
			target.potential=source.potential;
		}
		public void FunctionOpenConverter_fillFrom(AppDto.FunctionOpen target, FunctionOpen source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.description = source.description;
			target.grade = source.grade;
			target.name = source.name;
			target.close = source.close;
			target.serverGrade = source.serverGrade;
			target.guide = source.guide;
			target.missionId = source.missionId;
			target.missionState = source.missionState;
		}

		public void FunctionOpenConverter_fillInto(AppDto.FunctionOpen source, FunctionOpen target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.description!=null)
				target.description = source.description;
			target.grade=source.grade;
			if(source.name!=null)
				target.name = source.name;
			target.close=source.close;
			target.serverGrade=source.serverGrade;
			target.guide=source.guide;
			target.missionId=source.missionId;
			target.missionState=source.missionState;
		}
		public void WealthItemNotifyConverter_fillFrom(AppDto.WealthItemNotify target, WealthItemNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.value = source.value;
			target.virtualItemId = source.virtualItemId;
		}

		public void WealthItemNotifyConverter_fillInto(AppDto.WealthItemNotify source, WealthItemNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.value=source.value;
			target.virtualItemId=source.virtualItemId;
		}
		public void TalentConverter_fillFrom(AppDto.Talent target, Talent source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.maxGrade = source.maxGrade;
			target.needPoint = source.needPoint;
			target.description = source.description;
			target.playerGradeLimit = source.playerGradeLimit;
			target.beforeTalentId = source.beforeTalentId;
			if ( source.parentTalent != null ) {
				PassiveSkillConverter_fillFrom(target,source.parentTalent);
			}
			target.talentType = source.talentType;
		}

		public void TalentConverter_fillInto(AppDto.Talent source, Talent target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.maxGrade=source.maxGrade;
			target.needPoint=source.needPoint;
			if(source.description!=null)
				target.description = source.description;
			target.playerGradeLimit=source.playerGradeLimit;
			target.beforeTalentId=source.beforeTalentId;
			if ( target.parentTalent == null ) {
				target.parentTalent = new PassiveSkill();
			}
			PassiveSkillConverter_fillInto(source,target.parentTalent);
			if(source.talentType!=null)
				target.talentType = source.talentType;
		}
		public void PotentialConverter_fillFrom(AppDto.Potential target, Potential source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.desc = source.desc;
			target.name = source.name;
			if (source.addProperties != null) {
				List<int> items = new List<int>();
				target.addProperties = items;
				foreach (int item in source.addProperties)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.addProperties = items;
			}
			if (source.maths != null) {
				List<string> items = new List<string>();
				target.maths = items;
				foreach (string item in source.maths)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.maths = items;
			}
			target.icon = source.icon;
		}

		public void PotentialConverter_fillInto(AppDto.Potential source, Potential target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.desc!=null)
				target.desc = source.desc;
			if(source.name!=null)
				target.name = source.name;
			if (source.addProperties != null){
				foreach(int addProperties in source.addProperties)
					target.addProperties.Add(addProperties);
			}
			if (source.maths != null){
				foreach(string maths in source.maths)
					target.maths.Add(maths);
			}
			if(source.icon!=null)
				target.icon = source.icon;
		}
		public void PotentialWealthConverter_fillFrom(AppDto.PotentialWealth target, PotentialWealth source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.wealth = source.wealth;
		}

		public void PotentialWealthConverter_fillInto(AppDto.PotentialWealth source, PotentialWealth target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.wealth=source.wealth;
		}
		public void PotentialDtoConverter_fillFrom(AppDto.PotentialDto target, PotentialDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPotentialDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPotentialDto);
			}
			target.time = source.time;
						if (source.potentialInfoDto!=null) {
				AppDto.PotentialInfoDto retPotentialInfoDto = new AppDto.PotentialInfoDto();
				PotentialInfoDtoConverter_fillFrom(retPotentialInfoDto, source.potentialInfoDto);
				target.potentialInfoDto = retPotentialInfoDto;
			}
						target.silver = source.silver;
		}

		public void PotentialDtoConverter_fillInto(AppDto.PotentialDto source, PotentialDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPotentialDto == null ) {
				target.parentPotentialDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPotentialDto);
			target.time=source.time;
			if(source.potentialInfoDto!=null){
				PotentialInfoDto protobufModel = new PotentialInfoDto();
				PotentialInfoDtoConverter_fillInto(source.potentialInfoDto, protobufModel);
				target.potentialInfoDto = protobufModel;
			}
			target.silver=source.silver;
		}
		public void SpecialityConverter_fillFrom(AppDto.Speciality target, Speciality source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.icon = source.icon;
			target.desc = source.desc;
			target.affactType = source.affactType;
			target.affactPropertyId = source.affactPropertyId;
			target.effect = source.effect;
			target.maxGradeLimit = source.maxGradeLimit;
			target.layer = source.layer;
		}

		public void SpecialityConverter_fillInto(AppDto.Speciality source, Speciality target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.icon=source.icon;
			if(source.desc!=null)
				target.desc = source.desc;
			target.affactType=source.affactType;
			target.affactPropertyId=source.affactPropertyId;
			target.effect=source.effect;
			target.maxGradeLimit=source.maxGradeLimit;
			target.layer=source.layer;
		}
		public void SpecialityExpGradeConverter_fillFrom(AppDto.SpecialityExpGrade target, SpecialityExpGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.specialityExp = source.specialityExp;
			target.playerGradeLimit = source.playerGradeLimit;
			target.secondGradeLimit = source.secondGradeLimit;
		}

		public void SpecialityExpGradeConverter_fillInto(AppDto.SpecialityExpGrade source, SpecialityExpGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.specialityExp=source.specialityExp;
			target.playerGradeLimit=source.playerGradeLimit;
			target.secondGradeLimit=source.secondGradeLimit;
		}
		public void FormationGradeConverter_fillFrom(AppDto.FormationGrade target, FormationGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.materials != null) {
				List<int> items = new List<int>();
				target.materials = items;
				foreach (int item in source.materials)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.materials = items;
			}
			target.effect = source.effect;
			target.id = source.id;
			target.gradeLimit = source.gradeLimit;
		}

		public void FormationGradeConverter_fillInto(AppDto.FormationGrade source, FormationGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.materials != null){
				foreach(int materials in source.materials)
					target.materials.Add(materials);
			}
			target.effect=source.effect;
			target.id=source.id;
			target.gradeLimit=source.gradeLimit;
		}
		public void PotentialInfoDtoConverter_fillFrom(AppDto.PotentialInfoDto target, PotentialInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPotentialInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPotentialInfoDto);
			}
			target.id = source.id;
			target.grade = source.grade;
		}

		public void PotentialInfoDtoConverter_fillInto(AppDto.PotentialInfoDto source, PotentialInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPotentialInfoDto == null ) {
				target.parentPotentialInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPotentialInfoDto);
			target.id=source.id;
			target.grade=source.grade;
		}
		public void SpecialityExpGradeNotifyConverter_fillFrom(AppDto.SpecialityExpGradeNotify target, SpecialityExpGradeNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.exp = source.exp;
			target.grade = source.grade;
			target.upgrade = source.upgrade;
			target.hasAddExpTime = source.hasAddExpTime;
		}

		public void SpecialityExpGradeNotifyConverter_fillInto(AppDto.SpecialityExpGradeNotify source, SpecialityExpGradeNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.exp=source.exp;
			target.grade=source.grade;
			target.upgrade=source.upgrade;
			target.hasAddExpTime=source.hasAddExpTime;
		}
		public void ActionQueueDtoConverter_fillFrom(AppDto.ActionQueueDto target, ActionQueueDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.soldierQueue != null) {
				List<long> items = new List<long>();
				target.soldierQueue = items;
				foreach (long item in source.soldierQueue)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.soldierQueue = items;
			}
			if (source.actionTimeQueue != null) {
				List<int> items = new List<int>();
				target.actionTimeQueue = items;
				foreach (int item in source.actionTimeQueue)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.actionTimeQueue = items;
			}
			if (source.rewardQueue != null) {
				List<int> items = new List<int>();
				target.rewardQueue = items;
				foreach (int item in source.rewardQueue)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.rewardQueue = items;
			}
			target.usingSCraft = source.usingSCraft;
			target.driving = source.driving;
		}

		public void ActionQueueDtoConverter_fillInto(AppDto.ActionQueueDto source, ActionQueueDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.soldierQueue != null){
				foreach(long soldierQueue in source.soldierQueue)
					target.soldierQueue.Add(soldierQueue);
			}
			if (source.actionTimeQueue != null){
				foreach(int actionTimeQueue in source.actionTimeQueue)
					target.actionTimeQueue.Add(actionTimeQueue);
			}
			if (source.rewardQueue != null){
				foreach(int rewardQueue in source.rewardQueue)
					target.rewardQueue.Add(rewardQueue);
			}
			target.usingSCraft=source.usingSCraft;
			target.driving=source.driving;
		}
		public void ActionReadyNotifyConverter_fillFrom(AppDto.ActionReadyNotify target, ActionReadyNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.battleId = source.battleId;
			target.expiredTime = source.expiredTime;
						if (source.actionQueue!=null) {
				AppDto.ActionQueueDto retActionQueue = new AppDto.ActionQueueDto();
				ActionQueueDtoConverter_fillFrom(retActionQueue, source.actionQueue);
				target.actionQueue = retActionQueue;
			}
						target.round = source.round;
		}

		public void ActionReadyNotifyConverter_fillInto(AppDto.ActionReadyNotify source, ActionReadyNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.battleId=source.battleId;
			target.expiredTime=source.expiredTime;
			if(source.actionQueue!=null){
				ActionQueueDto protobufModel = new ActionQueueDto();
				ActionQueueDtoConverter_fillInto(source.actionQueue, protobufModel);
				target.actionQueue = protobufModel;
			}
			target.round=source.round;
		}
		public void TeamNearbyDtoConverter_fillFrom(AppDto.TeamNearbyDto target, TeamNearbyDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.players != null) {
				List<AppDto.TeamPlayerDto> items = new List<AppDto.TeamPlayerDto>();
				target.players = items;
				foreach (TeamPlayerDto item in source.players) {
					AppDto.TeamPlayerDto result = new AppDto.TeamPlayerDto();
					TeamPlayerDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamPlayerDto> items = new List<AppDto.TeamPlayerDto>();
				target.players = items;
			}
			if (source.teams != null) {
				List<AppDto.TeamDto> items = new List<AppDto.TeamDto>();
				target.teams = items;
				foreach (TeamDto item in source.teams) {
					AppDto.TeamDto result = new AppDto.TeamDto();
					TeamDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamDto> items = new List<AppDto.TeamDto>();
				target.teams = items;
			}
		}

		public void TeamNearbyDtoConverter_fillInto(AppDto.TeamNearbyDto source, TeamNearbyDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.players != null){
				foreach(AppDto.TeamPlayerDto players in source.players){
					TeamPlayerDto protobufModel = new TeamPlayerDto();
					TeamPlayerDtoConverter_fillInto(players, protobufModel);
					target.players.Add(protobufModel);
				}
			}
			if (source.teams != null){
				foreach(AppDto.TeamDto teams in source.teams){
					TeamDto protobufModel = new TeamDto();
					TeamDtoConverter_fillInto(teams, protobufModel);
					target.teams.Add(protobufModel);
				}
			}
		}
		public void TeamPlayerDtoConverter_fillFrom(AppDto.TeamPlayerDto target, TeamPlayerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTeamPlayerDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTeamPlayerDto);
			}
			target.id = source.id;
			target.nickname = source.nickname;
			target.factionId = source.factionId;
			target.grade = source.grade;
						if (source.playerDressInfo!=null) {
				AppDto.PlayerDressInfo retPlayerDressInfo = new AppDto.PlayerDressInfo();
				PlayerDressInfoConverter_fillFrom(retPlayerDressInfo, source.playerDressInfo);
				target.playerDressInfo = retPlayerDressInfo;
			}
						target.slotsElementLimit = source.slotsElementLimit;
		}

		public void TeamPlayerDtoConverter_fillInto(AppDto.TeamPlayerDto source, TeamPlayerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTeamPlayerDto == null ) {
				target.parentTeamPlayerDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTeamPlayerDto);
			target.id=source.id;
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.factionId=source.factionId;
			target.grade=source.grade;
			if(source.playerDressInfo!=null){
				PlayerDressInfo protobufModel = new PlayerDressInfo();
				PlayerDressInfoConverter_fillInto(source.playerDressInfo, protobufModel);
				target.playerDressInfo = protobufModel;
			}
			target.slotsElementLimit=source.slotsElementLimit;
		}
		public void TeamsDtoConverter_fillFrom(AppDto.TeamsDto target, TeamsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.teams != null) {
				List<AppDto.TeamDto> items = new List<AppDto.TeamDto>();
				target.teams = items;
				foreach (TeamDto item in source.teams) {
					AppDto.TeamDto result = new AppDto.TeamDto();
					TeamDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamDto> items = new List<AppDto.TeamDto>();
				target.teams = items;
			}
		}

		public void TeamsDtoConverter_fillInto(AppDto.TeamsDto source, TeamsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.teams != null){
				foreach(AppDto.TeamDto teams in source.teams){
					TeamDto protobufModel = new TeamDto();
					TeamDtoConverter_fillInto(teams, protobufModel);
					target.teams.Add(protobufModel);
				}
			}
		}
		public void TalentDtoConverter_fillFrom(AppDto.TalentDto target, TalentDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTalentDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTalentDto);
			}
			if (source.talentGradeDtos != null) {
				List<AppDto.TalentGradeDto> items = new List<AppDto.TalentGradeDto>();
				target.talentGradeDtos = items;
				foreach (TalentGradeDto item in source.talentGradeDtos) {
					AppDto.TalentGradeDto result = new AppDto.TalentGradeDto();
					TalentGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TalentGradeDto> items = new List<AppDto.TalentGradeDto>();
				target.talentGradeDtos = items;
			}
		}

		public void TalentDtoConverter_fillInto(AppDto.TalentDto source, TalentDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTalentDto == null ) {
				target.parentTalentDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTalentDto);
			if (source.talentGradeDtos != null){
				foreach(AppDto.TalentGradeDto talentGradeDtos in source.talentGradeDtos){
					TalentGradeDto protobufModel = new TalentGradeDto();
					TalentGradeDtoConverter_fillInto(talentGradeDtos, protobufModel);
					target.talentGradeDtos.Add(protobufModel);
				}
			}
		}
		public void TalentGradeDtoConverter_fillFrom(AppDto.TalentGradeDto target, TalentGradeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTalentGradeDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTalentGradeDto);
			}
			target.talentId = source.talentId;
			target.grade = source.grade;
		}

		public void TalentGradeDtoConverter_fillInto(AppDto.TalentGradeDto source, TalentGradeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTalentGradeDto == null ) {
				target.parentTalentGradeDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTalentGradeDto);
			target.talentId=source.talentId;
			target.grade=source.grade;
		}
		public void TeamActionTargetConverter_fillFrom(AppDto.TeamActionTarget target, TeamActionTarget source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.parentId = source.parentId;
			target.actionDesc = source.actionDesc;
			target.skipMatchCount = source.skipMatchCount;
			target.type = source.type;
			if ( source.parentTeamActionTarget != null ) {
				TeamMainActionConverter_fillFrom(target,source.parentTeamActionTarget);
			}
			target.smartGuideId = source.smartGuideId;
		}

		public void TeamActionTargetConverter_fillInto(AppDto.TeamActionTarget source, TeamActionTarget target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.parentId=source.parentId;
			if(source.actionDesc!=null)
				target.actionDesc = source.actionDesc;
			target.skipMatchCount=source.skipMatchCount;
			target.type=source.type;
			if ( target.parentTeamActionTarget == null ) {
				target.parentTeamActionTarget = new TeamMainAction();
			}
			TeamMainActionConverter_fillInto(source,target.parentTeamActionTarget);
			target.smartGuideId=source.smartGuideId;
		}
		public void SpecialityDtoConverter_fillFrom(AppDto.SpecialityDto target, SpecialityDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSpecialityDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSpecialityDto);
			}
			target.grade = source.grade;
			target.exp = source.exp;
			if (source.specialityGradeDtos != null) {
				List<AppDto.SpecialityGradeDto> items = new List<AppDto.SpecialityGradeDto>();
				target.specialityGradeDtos = items;
				foreach (SpecialityGradeDto item in source.specialityGradeDtos) {
					AppDto.SpecialityGradeDto result = new AppDto.SpecialityGradeDto();
					SpecialityGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SpecialityGradeDto> items = new List<AppDto.SpecialityGradeDto>();
				target.specialityGradeDtos = items;
			}
			target.hasAddExpTime = source.hasAddExpTime;
		}

		public void SpecialityDtoConverter_fillInto(AppDto.SpecialityDto source, SpecialityDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSpecialityDto == null ) {
				target.parentSpecialityDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSpecialityDto);
			target.grade=source.grade;
			target.exp=source.exp;
			if (source.specialityGradeDtos != null){
				foreach(AppDto.SpecialityGradeDto specialityGradeDtos in source.specialityGradeDtos){
					SpecialityGradeDto protobufModel = new SpecialityGradeDto();
					SpecialityGradeDtoConverter_fillInto(specialityGradeDtos, protobufModel);
					target.specialityGradeDtos.Add(protobufModel);
				}
			}
			target.hasAddExpTime=source.hasAddExpTime;
		}
		public void SpecialityGradeDtoConverter_fillFrom(AppDto.SpecialityGradeDto target, SpecialityGradeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSpecialityGradeDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSpecialityGradeDto);
			}
			target.specialityId = source.specialityId;
			target.grade = source.grade;
			target.totalEffece = source.totalEffece;
		}

		public void SpecialityGradeDtoConverter_fillInto(AppDto.SpecialityGradeDto source, SpecialityGradeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSpecialityGradeDto == null ) {
				target.parentSpecialityGradeDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSpecialityGradeDto);
			target.specialityId=source.specialityId;
			target.grade=source.grade;
			target.totalEffece=source.totalEffece;
		}
		public void SpecialityAddPointDtoConverter_fillFrom(AppDto.SpecialityAddPointDto target, SpecialityAddPointDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSpecialityAddPointDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSpecialityAddPointDto);
			}
			if (source.specialityGradeDtos != null) {
				List<AppDto.SpecialityGradeDto> items = new List<AppDto.SpecialityGradeDto>();
				target.specialityGradeDtos = items;
				foreach (SpecialityGradeDto item in source.specialityGradeDtos) {
					AppDto.SpecialityGradeDto result = new AppDto.SpecialityGradeDto();
					SpecialityGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SpecialityGradeDto> items = new List<AppDto.SpecialityGradeDto>();
				target.specialityGradeDtos = items;
			}
		}

		public void SpecialityAddPointDtoConverter_fillInto(AppDto.SpecialityAddPointDto source, SpecialityAddPointDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSpecialityAddPointDto == null ) {
				target.parentSpecialityAddPointDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSpecialityAddPointDto);
			if (source.specialityGradeDtos != null){
				foreach(AppDto.SpecialityGradeDto specialityGradeDtos in source.specialityGradeDtos){
					SpecialityGradeDto protobufModel = new SpecialityGradeDto();
					SpecialityGradeDtoConverter_fillInto(specialityGradeDtos, protobufModel);
					target.specialityGradeDtos.Add(protobufModel);
				}
			}
		}
		public void RankingsConverter_fillFrom(AppDto.Rankings target, Rankings source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.group = source.group;
			target.logicId = source.logicId;
			target.maxSize = source.maxSize;
			target.name = source.name;
			target.rankColShow = source.rankColShow;
			target.rankAlertType = source.rankAlertType;
			target.parentId = source.parentId;
			target.rankSortId = source.rankSortId;
			target.rankShow = source.rankShow;
			target.rankStyle = source.rankStyle;
			target.titleStr = source.titleStr;
			target.pageShow = source.pageShow;
			target.tipId = source.tipId;
		}

		public void RankingsConverter_fillInto(AppDto.Rankings source, Rankings target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.group=source.group;
			target.logicId=source.logicId;
			target.maxSize=source.maxSize;
			if(source.name!=null)
				target.name = source.name;
			target.rankColShow=source.rankColShow;
			target.rankAlertType=source.rankAlertType;
			target.parentId=source.parentId;
			target.rankSortId=source.rankSortId;
			target.rankShow=source.rankShow;
			target.rankStyle=source.rankStyle;
			if(source.titleStr!=null)
				target.titleStr = source.titleStr;
			target.pageShow=source.pageShow;
			target.tipId=source.tipId;
		}
		public void RankInfoDtoConverter_fillFrom(AppDto.RankInfoDto target, RankInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentRankInfoDto);
			}
			if (source.list != null) {
				List<AppDto.RankItemDto> items = new List<AppDto.RankItemDto>();
				target.list = items;
				foreach (GameObjectTypedMessage item in source.list) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.RankItemDto))
						throw new IOException("parse data error");
					items.Add((AppDto.RankItemDto)result);
				}
			}else{
				List<AppDto.RankItemDto> items = new List<AppDto.RankItemDto>();
				target.list = items;
			}
			if (source.myData!=null && source.myData is GameObjectTypedMessage) {
				GameObjectTypedMessage itemMyData = source.myData;
				System.Object objMyData = ProtobufUtilsNet.parseFrom(itemMyData.message_type_id,itemMyData.message_data);
				if (objMyData == null)
					throw new IOException("parse data error");
				target.myData = (AppDto.RankItemDto)objMyData;
			}
			target.myRank = source.myRank;
		}

		public void RankInfoDtoConverter_fillInto(AppDto.RankInfoDto source, RankInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankInfoDto == null ) {
				target.parentRankInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentRankInfoDto);
			if (source.list != null){
				foreach(AppDto.RankItemDto list in source.list){
					GameObjectTypedMessage msgList = ProtobufUtilsNet.packInto(list);
					if (msgList == null)
						throw new IOException("pack data error");
					target.list.Add(msgList);
				}
			}
			if(source.myData != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.myData);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.myData = protobufModel;
			}
			target.myRank=source.myRank;
		}
		public void RankPlayerGradeDtoConverter_fillFrom(AppDto.RankPlayerGradeDto target, RankPlayerGradeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankPlayerGradeDto != null ) {
				RankItemDtoConverter_fillFrom(target,source.parentRankPlayerGradeDto);
			}
			target.grade = source.grade;
			target.exp = source.exp;
			target.factionId = source.factionId;
		}

		public void RankPlayerGradeDtoConverter_fillInto(AppDto.RankPlayerGradeDto source, RankPlayerGradeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankPlayerGradeDto == null ) {
				target.parentRankPlayerGradeDto = new RankItemDto();
			}
			RankItemDtoConverter_fillInto(source,target.parentRankPlayerGradeDto);
			target.grade=source.grade;
			target.exp=source.exp;
			target.factionId=source.factionId;
		}
		public void BattleWatchDtoConverter_fillFrom(AppDto.BattleWatchDto target, BattleWatchDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentBattleWatchDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBattleWatchDto);
			}
			if (source.video!=null && source.video is GameObjectTypedMessage) {
				GameObjectTypedMessage itemVideo = source.video;
				System.Object objVideo = ProtobufUtilsNet.parseFrom(itemVideo.message_type_id,itemVideo.message_data);
				if (objVideo == null)
					throw new IOException("parse data error");
				target.video = (AppDto.Video)objVideo;
			}
		}

		public void BattleWatchDtoConverter_fillInto(AppDto.BattleWatchDto source, BattleWatchDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentBattleWatchDto == null ) {
				target.parentBattleWatchDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBattleWatchDto);
			if(source.video != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.video);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.video = protobufModel;
			}
		}
		public void RankItemDtoConverter_fillFrom(AppDto.RankItemDto target, RankItemDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.charactorId = source.charactorId;
		}

		public void RankItemDtoConverter_fillInto(AppDto.RankItemDto source, RankItemDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.charactorId=source.charactorId;
		}
		public void CraftsConverter_fillFrom(AppDto.Crafts target, Crafts source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerGradeLimit = source.playerGradeLimit;
			target.maxGrade = source.maxGrade;
			if ( source.parentCrafts != null ) {
				SkillConverter_fillFrom(target,source.parentCrafts);
			}
			target.superCrafts = source.superCrafts;
			target.consumeBook1 = source.consumeBook1;
			target.consumeBook2 = source.consumeBook2;
			target.quality = source.quality;
			target.effectType = source.effectType;
		}

		public void CraftsConverter_fillInto(AppDto.Crafts source, Crafts target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerGradeLimit=source.playerGradeLimit;
			target.maxGrade=source.maxGrade;
			if ( target.parentCrafts == null ) {
				target.parentCrafts = new Skill();
			}
			SkillConverter_fillInto(source,target.parentCrafts);
			target.superCrafts=source.superCrafts;
			target.consumeBook1=source.consumeBook1;
			target.consumeBook2=source.consumeBook2;
			target.quality=source.quality;
			target.effectType=source.effectType;
		}
		public void MagicConverter_fillFrom(AppDto.Magic target, Magic source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentMagic != null ) {
				SkillConverter_fillFrom(target,source.parentMagic);
			}
			target.grade = source.grade;
			if (source.quartzProperties != null) {
				List<AppDto.QuartzProperty> items = new List<AppDto.QuartzProperty>();
				target.quartzProperties = items;
				foreach (QuartzProperty item in source.quartzProperties) {
					AppDto.QuartzProperty result = new AppDto.QuartzProperty();
					QuartzPropertyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.QuartzProperty> items = new List<AppDto.QuartzProperty>();
				target.quartzProperties = items;
			}
			target.effectType = source.effectType;
		}

		public void MagicConverter_fillInto(AppDto.Magic source, Magic target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentMagic == null ) {
				target.parentMagic = new Skill();
			}
			SkillConverter_fillInto(source,target.parentMagic);
			target.grade=source.grade;
			if (source.quartzProperties != null){
				foreach(AppDto.QuartzProperty quartzProperties in source.quartzProperties){
					QuartzProperty protobufModel = new QuartzProperty();
					QuartzPropertyConverter_fillInto(quartzProperties, protobufModel);
					target.quartzProperties.Add(protobufModel);
				}
			}
			target.effectType=source.effectType;
		}
		public void CraftsGradeDtoConverter_fillFrom(AppDto.CraftsGradeDto target, CraftsGradeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCraftsGradeDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCraftsGradeDto);
			}
			target.id = source.id;
			target.grade = source.grade;
			target.skillMapId = source.skillMapId;
		}

		public void CraftsGradeDtoConverter_fillInto(AppDto.CraftsGradeDto source, CraftsGradeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCraftsGradeDto == null ) {
				target.parentCraftsGradeDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCraftsGradeDto);
			target.id=source.id;
			target.grade=source.grade;
			target.skillMapId=source.skillMapId;
		}
		public void CharacterCraftsGradeConverter_fillFrom(AppDto.CharacterCraftsGrade target, CharacterCraftsGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.silver = source.silver;
			target.itemCount1 = source.itemCount1;
			target.itemCount2 = source.itemCount2;
		}

		public void CharacterCraftsGradeConverter_fillInto(AppDto.CharacterCraftsGrade source, CharacterCraftsGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.silver=source.silver;
			target.itemCount1=source.itemCount1;
			target.itemCount2=source.itemCount2;
		}
		public void CasePositionDtoConverter_fillFrom(AppDto.CasePositionDto target, CasePositionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCasePositionDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCasePositionDto);
			}
			target.position = source.position;
			target.crewId = source.crewId;
			target.crewSufaceId = source.crewSufaceId;
			target.grade = source.grade;
			target.slotsElementLimit = source.slotsElementLimit;
			target.quality = source.quality;
		}

		public void CasePositionDtoConverter_fillInto(AppDto.CasePositionDto source, CasePositionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCasePositionDto == null ) {
				target.parentCasePositionDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCasePositionDto);
			target.position=source.position;
			target.crewId=source.crewId;
			target.crewSufaceId=source.crewSufaceId;
			target.grade=source.grade;
			target.slotsElementLimit=source.slotsElementLimit;
			target.quality=source.quality;
		}
		public void FormationCaseInfoDtoConverter_fillFrom(AppDto.FormationCaseInfoDto target, FormationCaseInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentFormationCaseInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFormationCaseInfoDto);
			}
			target.caseId = source.caseId;
			if (source.casePositions != null) {
				List<AppDto.CasePositionDto> items = new List<AppDto.CasePositionDto>();
				target.casePositions = items;
				foreach (CasePositionDto item in source.casePositions) {
					AppDto.CasePositionDto result = new AppDto.CasePositionDto();
					CasePositionDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CasePositionDto> items = new List<AppDto.CasePositionDto>();
				target.casePositions = items;
			}
			target.formationGrade = source.formationGrade;
			target.formationId = source.formationId;
		}

		public void FormationCaseInfoDtoConverter_fillInto(AppDto.FormationCaseInfoDto source, FormationCaseInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentFormationCaseInfoDto == null ) {
				target.parentFormationCaseInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFormationCaseInfoDto);
			target.caseId=source.caseId;
			if (source.casePositions != null){
				foreach(AppDto.CasePositionDto casePositions in source.casePositions){
					CasePositionDto protobufModel = new CasePositionDto();
					CasePositionDtoConverter_fillInto(casePositions, protobufModel);
					target.casePositions.Add(protobufModel);
				}
			}
			target.formationGrade=source.formationGrade;
			target.formationId=source.formationId;
		}
		public void DefaultSCraftsDtoConverter_fillFrom(AppDto.DefaultSCraftsDto target, DefaultSCraftsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentDefaultSCraftsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentDefaultSCraftsDto);
			}
			target.id = source.id;
		}

		public void DefaultSCraftsDtoConverter_fillInto(AppDto.DefaultSCraftsDto source, DefaultSCraftsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentDefaultSCraftsDto == null ) {
				target.parentDefaultSCraftsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentDefaultSCraftsDto);
			target.id=source.id;
		}
		public void SkillScopeConverter_fillFrom(AppDto.SkillScope target, SkillScope source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.desc = source.desc;
			if (source.scopeIndex != null) {
				List<int> items = new List<int>();
				target.scopeIndex = items;
                foreach (int item in source.scopeIndex)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.scopeIndex = items;
			}
			target.targetType = source.targetType;
		}

		public void SkillScopeConverter_fillInto(AppDto.SkillScope source, SkillScope target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.desc!=null)
				target.desc = source.desc;
			if (source.scopeIndex != null){
				foreach(int scopeIndex in source.scopeIndex)
					target.scopeIndex.Add(scopeIndex);
			}
			target.targetType=source.targetType;
		}
		public void CrewInfoDtoConverter_fillFrom(AppDto.CrewInfoDto target, CrewInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewInfoDto);
			}
			target.id = source.id;
			target.crewId = source.crewId;
			target.grade = source.grade;
			if (source.properties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
				foreach (CharacterPropertyDto item in source.properties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
			}
			target.personality = source.personality;
			target.exp = source.exp;
			target.quality = source.quality;
			target.phase = source.phase;
			target.raise = source.raise;
						if (source.crewSkillsDto!=null) {
				AppDto.CrewSkillsDto retCrewSkillsDto = new AppDto.CrewSkillsDto();
				CrewSkillsDtoConverter_fillFrom(retCrewSkillsDto, source.crewSkillsDto);
				target.crewSkillsDto = retCrewSkillsDto;
			}
						target.extraGrow = source.extraGrow;
			if (source.fetterDto != null) {
				List<AppDto.CrewFetterDto> items = new List<AppDto.CrewFetterDto>();
				target.fetterDto = items;
				foreach (CrewFetterDto item in source.fetterDto) {
					AppDto.CrewFetterDto result = new AppDto.CrewFetterDto();
					CrewFetterDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewFetterDto> items = new List<AppDto.CrewFetterDto>();
				target.fetterDto = items;
			}
			target.extNameId = source.extNameId;
			if (source.hasExtName != null) {
				List<int> items = new List<int>();
				target.hasExtName = items;
				foreach (int item in source.hasExtName)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.hasExtName = items;
			}
			target.power = source.power;
			if (source.nextPhaseProperties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.nextPhaseProperties = items;
				foreach (CharacterPropertyDto item in source.nextPhaseProperties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.nextPhaseProperties = items;
			}
			target.nextRaisePower = source.nextRaisePower;
			if (source.nextRaiseProperties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.nextRaiseProperties = items;
				foreach (CharacterPropertyDto item in source.nextRaiseProperties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.nextRaiseProperties = items;
			}
			if (source.phaseProperties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.phaseProperties = items;
				foreach (CharacterPropertyDto item in source.phaseProperties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.phaseProperties = items;
			}
			target.slotsElementLimit = source.slotsElementLimit;
			target.battleCrewType = source.battleCrewType;
						if (source.orbmentInfoDto!=null) {
				AppDto.OrbmentInfoDto retOrbmentInfoDto = new AppDto.OrbmentInfoDto();
				OrbmentInfoDtoConverter_fillFrom(retOrbmentInfoDto, source.orbmentInfoDto);
				target.orbmentInfoDto = retOrbmentInfoDto;
			}
						target.favor = source.favor;
			target.cooperateDay = source.cooperateDay;
			target.enlistTimeInMillis = source.enlistTimeInMillis;
		}

		public void CrewInfoDtoConverter_fillInto(AppDto.CrewInfoDto source, CrewInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewInfoDto == null ) {
				target.parentCrewInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewInfoDto);
			target.id=source.id;
			target.crewId=source.crewId;
			target.grade=source.grade;
			if (source.properties != null){
				foreach(AppDto.CharacterPropertyDto properties in source.properties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(properties, protobufModel);
					target.properties.Add(protobufModel);
				}
			}
			target.personality=source.personality;
			target.exp=source.exp;
			target.quality=source.quality;
			target.phase=source.phase;
			target.raise=source.raise;
			if(source.crewSkillsDto!=null){
				CrewSkillsDto protobufModel = new CrewSkillsDto();
				CrewSkillsDtoConverter_fillInto(source.crewSkillsDto, protobufModel);
				target.crewSkillsDto = protobufModel;
			}
			target.extraGrow=source.extraGrow;
			if (source.fetterDto != null){
				foreach(AppDto.CrewFetterDto fetterDto in source.fetterDto){
					CrewFetterDto protobufModel = new CrewFetterDto();
					CrewFetterDtoConverter_fillInto(fetterDto, protobufModel);
					target.fetterDto.Add(protobufModel);
				}
			}
			target.extNameId=source.extNameId;
			if (source.hasExtName != null){
				foreach(int hasExtName in source.hasExtName)
					target.hasExtName.Add(hasExtName);
			}
			target.power=source.power;
			if (source.nextPhaseProperties != null){
				foreach(AppDto.CharacterPropertyDto nextPhaseProperties in source.nextPhaseProperties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(nextPhaseProperties, protobufModel);
					target.nextPhaseProperties.Add(protobufModel);
				}
			}
			target.nextRaisePower=source.nextRaisePower;
			if (source.nextRaiseProperties != null){
				foreach(AppDto.CharacterPropertyDto nextRaiseProperties in source.nextRaiseProperties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(nextRaiseProperties, protobufModel);
					target.nextRaiseProperties.Add(protobufModel);
				}
			}
			if (source.phaseProperties != null){
				foreach(AppDto.CharacterPropertyDto phaseProperties in source.phaseProperties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(phaseProperties, protobufModel);
					target.phaseProperties.Add(protobufModel);
				}
			}
			target.slotsElementLimit=source.slotsElementLimit;
			target.battleCrewType=source.battleCrewType;
			if(source.orbmentInfoDto!=null){
				OrbmentInfoDto protobufModel = new OrbmentInfoDto();
				OrbmentInfoDtoConverter_fillInto(source.orbmentInfoDto, protobufModel);
				target.orbmentInfoDto = protobufModel;
			}
			target.favor=source.favor;
			target.cooperateDay=source.cooperateDay;
			target.enlistTimeInMillis=source.enlistTimeInMillis;
		}
		public void CrewConverter_fillFrom(AppDto.Crew target, Crew source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.personality = source.personality;
			target.gender = source.gender;
			target.property = source.property;
			target.chipId = source.chipId;
			if (source.baseProperty != null) {
				List<int> items = new List<int>();
				target.baseProperty = items;
				foreach (int item in source.baseProperty)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.baseProperty = items;
			}
			if (source.ratioProperty != null) {
				List<int> items = new List<int>();
				target.ratioProperty = items;
				foreach (int item in source.ratioProperty)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.ratioProperty = items;
			}
			if ( source.parentCrew != null ) {
				GeneralCharactorConverter_fillFrom(target,source.parentCrew);
			}
			if (source.crafts != null) {
				List<int> items = new List<int>();
				target.crafts = items;
                foreach (int item in source.crafts)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.crafts = items;
			}
			if (source.magic != null) {
				List<int> items = new List<int>();
				target.magic = items;
                foreach (int item in source.magic)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.magic = items;
			}
			target.quality = source.quality;
			target.chipAmount = source.chipAmount;
			target.growthRate = source.growthRate;
			target.scores = source.scores;
			target.speed = source.speed;
			target.simpleSkillId = source.simpleSkillId;
			if (source.fetterIds != null) {
				List<int> items = new List<int>();
				target.fetterIds = items;
				foreach (int item in source.fetterIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.fetterIds = items;
			}
			target.orbmentId = source.orbmentId;
			target.raiseModelIds = source.raiseModelIds;
			target.typeIcon = source.typeIcon;
			target.rare = source.rare;
			target.giftIds = source.giftIds;
			target.favorPropertys = source.favorPropertys;
			if (source.delegateTypeIds != null) {
				List<int> items = new List<int>();
				target.delegateTypeIds = items;
                foreach (int item in source.delegateTypeIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.delegateTypeIds = items;
			}
			target.commonTexture = source.commonTexture;
			target.wpmodel = source.wpmodel;
		}

		public void CrewConverter_fillInto(AppDto.Crew source, Crew target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.personality=source.personality;
			target.gender=source.gender;
			target.property=source.property;
			target.chipId=source.chipId;
			if (source.baseProperty != null){
				foreach(int baseProperty in source.baseProperty)
					target.baseProperty.Add(baseProperty);
			}
			if (source.ratioProperty != null){
				foreach(int ratioProperty in source.ratioProperty)
					target.ratioProperty.Add(ratioProperty);
			}
			if ( target.parentCrew == null ) {
				target.parentCrew = new GeneralCharactor();
			}
			GeneralCharactorConverter_fillInto(source,target.parentCrew);
			if (source.crafts != null){
				foreach(int crafts in source.crafts)
					target.crafts.Add(crafts);
			}
			if (source.magic != null){
				foreach(int magic in source.magic)
					target.magic.Add(magic);
			}
			target.quality=source.quality;
			target.chipAmount=source.chipAmount;
			target.growthRate=source.growthRate;
			if(source.scores!=null)
				target.scores = source.scores;
			target.speed=source.speed;
			target.simpleSkillId=source.simpleSkillId;
			if (source.fetterIds != null){
				foreach(int fetterIds in source.fetterIds)
					target.fetterIds.Add(fetterIds);
			}
			target.orbmentId=source.orbmentId;
			if(source.raiseModelIds!=null)
				target.raiseModelIds = source.raiseModelIds;
			if(source.typeIcon!=null)
				target.typeIcon = source.typeIcon;
			target.rare=source.rare;
			if(source.giftIds!=null)
				target.giftIds = source.giftIds;
			if(source.favorPropertys!=null)
				target.favorPropertys = source.favorPropertys;
			if (source.delegateTypeIds != null){
				foreach(int delegateTypeIds in source.delegateTypeIds)
					target.delegateTypeIds.Add(delegateTypeIds);
			}
			if(source.commonTexture!=null)
				target.commonTexture = source.commonTexture;
			target.wpmodel=source.wpmodel;
		}
		public void CrewPropertyTransformConverter_fillFrom(AppDto.CrewPropertyTransform target, CrewPropertyTransform source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.battleProperty = source.battleProperty;
		}

		public void CrewPropertyTransformConverter_fillInto(AppDto.CrewPropertyTransform source, CrewPropertyTransform target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.battleProperty!=null)
				target.battleProperty = source.battleProperty;
		}
		public void CrewCraftsGradeConverter_fillFrom(AppDto.CrewCraftsGrade target, CrewCraftsGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.silver = source.silver;
			target.itemCount1 = source.itemCount1;
			target.itemCount2 = source.itemCount2;
		}

		public void CrewCraftsGradeConverter_fillInto(AppDto.CrewCraftsGrade source, CrewCraftsGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.silver=source.silver;
			target.itemCount1=source.itemCount1;
			target.itemCount2=source.itemCount2;
		}
		public void CrewPositionNotifyConverter_fillFrom(AppDto.CrewPositionNotify target, CrewPositionNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.crewId = source.crewId;
			target.position = source.position;
						if (source.crewDressInfo!=null) {
				AppDto.PlayerDressInfo retCrewDressInfo = new AppDto.PlayerDressInfo();
				PlayerDressInfoConverter_fillFrom(retCrewDressInfo, source.crewDressInfo);
				target.crewDressInfo = retCrewDressInfo;
			}
						target.grade = source.grade;
			target.slotsElementLimit = source.slotsElementLimit;
			target.quality = source.quality;
		}

		public void CrewPositionNotifyConverter_fillInto(AppDto.CrewPositionNotify source, CrewPositionNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.crewId=source.crewId;
			target.position=source.position;
			if(source.crewDressInfo!=null){
				PlayerDressInfo protobufModel = new PlayerDressInfo();
				PlayerDressInfoConverter_fillInto(source.crewDressInfo, protobufModel);
				target.crewDressInfo = protobufModel;
			}
			target.grade=source.grade;
			target.slotsElementLimit=source.slotsElementLimit;
			target.quality=source.quality;
		}
		public void CrewDtoConverter_fillFrom(AppDto.CrewDto target, CrewDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewDto);
			}
			target.followCrewId = source.followCrewId;
			if (source.crewInfos != null) {
				List<AppDto.CrewInfoDto> items = new List<AppDto.CrewInfoDto>();
				target.crewInfos = items;
				foreach (CrewInfoDto item in source.crewInfos) {
					AppDto.CrewInfoDto result = new AppDto.CrewInfoDto();
					CrewInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewInfoDto> items = new List<AppDto.CrewInfoDto>();
				target.crewInfos = items;
			}
			target.mainCrewId = source.mainCrewId;
		}

		public void CrewDtoConverter_fillInto(AppDto.CrewDto source, CrewDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewDto == null ) {
				target.parentCrewDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewDto);
			target.followCrewId=source.followCrewId;
			if (source.crewInfos != null){
				foreach(AppDto.CrewInfoDto crewInfos in source.crewInfos){
					CrewInfoDto protobufModel = new CrewInfoDto();
					CrewInfoDtoConverter_fillInto(crewInfos, protobufModel);
					target.crewInfos.Add(protobufModel);
				}
			}
			target.mainCrewId=source.mainCrewId;
		}
		public void CrewTrainingConverter_fillFrom(AppDto.CrewTraining target, CrewTraining source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.consume = source.consume;
		}

		public void CrewTrainingConverter_fillInto(AppDto.CrewTraining source, CrewTraining target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.consume=source.consume;
		}
		public void GmCodeConverter_fillFrom(AppDto.GmCode target, GmCode source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.type = source.type;
			target.label = source.label;
			target.code = source.code;
			target.parm = source.parm;
			target.tooltip = source.tooltip;
		}

		public void GmCodeConverter_fillInto(AppDto.GmCode source, GmCode target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.type!=null)
				target.type = source.type;
			if(source.label!=null)
				target.label = source.label;
			if(source.code!=null)
				target.code = source.code;
			if(source.parm!=null)
				target.parm = source.parm;
			if(source.tooltip!=null)
				target.tooltip = source.tooltip;
		}
		public void JoinTeamDtoConverter_fillFrom(AppDto.JoinTeamDto target, JoinTeamDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentJoinTeamDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentJoinTeamDto);
			}
			target.id = source.id;
			target.nickname = source.nickname;
			target.factionId = source.factionId;
			target.grade = source.grade;
			target.charactorId = source.charactorId;
			target.timeout = source.timeout;
		}

		public void JoinTeamDtoConverter_fillInto(AppDto.JoinTeamDto source, JoinTeamDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentJoinTeamDto == null ) {
				target.parentJoinTeamDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentJoinTeamDto);
			target.id=source.id;
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.factionId=source.factionId;
			target.grade=source.grade;
			target.charactorId=source.charactorId;
			target.timeout=source.timeout;
		}
		public void TeamInvitationDtoConverter_fillFrom(AppDto.TeamInvitationDto target, TeamInvitationDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTeamInvitationDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTeamInvitationDto);
			}
			target.targetPlayerId = source.targetPlayerId;
			target.inviterPlayerId = source.inviterPlayerId;
			target.teamTargetId = source.teamTargetId;
			target.minGrade = source.minGrade;
			target.maxGrade = source.maxGrade;
			if (source.inviteTeamMembers != null) {
				List<AppDto.TeamMemberSimpleDto> items = new List<AppDto.TeamMemberSimpleDto>();
				target.inviteTeamMembers = items;
				foreach (TeamMemberSimpleDto item in source.inviteTeamMembers) {
					AppDto.TeamMemberSimpleDto result = new AppDto.TeamMemberSimpleDto();
					TeamMemberSimpleDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TeamMemberSimpleDto> items = new List<AppDto.TeamMemberSimpleDto>();
				target.inviteTeamMembers = items;
			}
			target.timeout = source.timeout;
		}

		public void TeamInvitationDtoConverter_fillInto(AppDto.TeamInvitationDto source, TeamInvitationDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTeamInvitationDto == null ) {
				target.parentTeamInvitationDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTeamInvitationDto);
			target.targetPlayerId=source.targetPlayerId;
			target.inviterPlayerId=source.inviterPlayerId;
			target.teamTargetId=source.teamTargetId;
			target.minGrade=source.minGrade;
			target.maxGrade=source.maxGrade;
			if (source.inviteTeamMembers != null){
				foreach(AppDto.TeamMemberSimpleDto inviteTeamMembers in source.inviteTeamMembers){
					TeamMemberSimpleDto protobufModel = new TeamMemberSimpleDto();
					TeamMemberSimpleDtoConverter_fillInto(inviteTeamMembers, protobufModel);
					target.inviteTeamMembers.Add(protobufModel);
				}
			}
			target.timeout=source.timeout;
		}
		public void CrewPhaseConverter_fillFrom(AppDto.CrewPhase target, CrewPhase source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.itemId != null) {
				List<int> items = new List<int>();
				target.itemId = items;
				foreach (int item in source.itemId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.itemId = items;
			}
			if (source.amount != null) {
				List<int> items = new List<int>();
				target.amount = items;
				foreach (int item in source.amount)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.amount = items;
			}
			target.silver = source.silver;
			if (source.addProperties != null) {
				List<int> items = new List<int>();
				target.addProperties = items;
				foreach (int item in source.addProperties)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.addProperties = items;
			}
		}

		public void CrewPhaseConverter_fillInto(AppDto.CrewPhase source, CrewPhase target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.itemId != null){
				foreach(int itemId in source.itemId)
					target.itemId.Add(itemId);
			}
			if (source.amount != null){
				foreach(int amount in source.amount)
					target.amount.Add(amount);
			}
			target.silver=source.silver;
			if (source.addProperties != null){
				foreach(int addProperties in source.addProperties)
					target.addProperties.Add(addProperties);
			}
		}
		public void CrewRaiseConverter_fillFrom(AppDto.CrewRaise target, CrewRaise source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.chips = source.chips;
			target.id = source.id;
			target.gradeLimit = source.gradeLimit;
			target.ratio = source.ratio;
		}

		public void CrewRaiseConverter_fillInto(AppDto.CrewRaise source, CrewRaise target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.chips!=null)
				target.chips = source.chips;
			target.id=source.id;
			target.gradeLimit=source.gradeLimit;
			target.ratio=source.ratio;
		}
		public void CrewChipNotifyConverter_fillFrom(AppDto.CrewChipNotify target, CrewChipNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.crewChipItems != null) {
				List<AppDto.CrewChipDto> items = new List<AppDto.CrewChipDto>();
				target.crewChipItems = items;
				foreach (CrewChipDto item in source.crewChipItems) {
					AppDto.CrewChipDto result = new AppDto.CrewChipDto();
					CrewChipDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewChipDto> items = new List<AppDto.CrewChipDto>();
				target.crewChipItems = items;
			}
			target.traceTypeId = source.traceTypeId;
		}

		public void CrewChipNotifyConverter_fillInto(AppDto.CrewChipNotify source, CrewChipNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.crewChipItems != null){
				foreach(AppDto.CrewChipDto crewChipItems in source.crewChipItems){
					CrewChipDto protobufModel = new CrewChipDto();
					CrewChipDtoConverter_fillInto(crewChipItems, protobufModel);
					target.crewChipItems.Add(protobufModel);
				}
			}
			target.traceTypeId=source.traceTypeId;
		}
		public void UpgradeItemDtoConverter_fillFrom(AppDto.UpgradeItemDto target, UpgradeItemDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentUpgradeItemDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentUpgradeItemDto);
			}
			target.itemId = source.itemId;
			target.itemCount = source.itemCount;
		}

		public void UpgradeItemDtoConverter_fillInto(AppDto.UpgradeItemDto source, UpgradeItemDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentUpgradeItemDto == null ) {
				target.parentUpgradeItemDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentUpgradeItemDto);
			target.itemId=source.itemId;
			target.itemCount=source.itemCount;
		}
		public void ActionTimeRewardConverter_fillFrom(AppDto.ActionTimeReward target, ActionTimeReward source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.type = source.type;
			target.param = source.param;
			target.val = source.val;
			target.icon = source.icon;
			target.description = source.description;
		}

		public void ActionTimeRewardConverter_fillInto(AppDto.ActionTimeReward source, ActionTimeReward target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.type=source.type;
			target.param=source.param;
			target.val=source.val;
			if(source.icon!=null)
				target.icon = source.icon;
			if(source.description!=null)
				target.description = source.description;
		}
		public void VideoRecordConverter_fillFrom(AppDto.VideoRecord target, VideoRecord source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
						if (source.rounds!=null) {
				AppDto.VideoRounds retRounds = new AppDto.VideoRounds();
				VideoRoundsConverter_fillFrom(retRounds, source.rounds);
				target.rounds = retRounds;
			}
						if ( source.parentVideoRecord != null ) {
				VideoConverter_fillFrom(target,source.parentVideoRecord);
			}
		}

		public void VideoRecordConverter_fillInto(AppDto.VideoRecord source, VideoRecord target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.rounds!=null){
				VideoRounds protobufModel = new VideoRounds();
				VideoRoundsConverter_fillInto(source.rounds, protobufModel);
				target.rounds = protobufModel;
			}
			if ( target.parentVideoRecord == null ) {
				target.parentVideoRecord = new Video();
			}
			VideoConverter_fillInto(source,target.parentVideoRecord);
		}
		public void CraftsTrainingDtoConverter_fillFrom(AppDto.CraftsTrainingDto target, CraftsTrainingDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCraftsTrainingDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCraftsTrainingDto);
			}
			target.maxLevel = source.maxLevel;
			target.extraGrow = source.extraGrow;
			if (source.craftsGradeDtos != null) {
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsGradeDtos = items;
				foreach (CraftsGradeDto item in source.craftsGradeDtos) {
					AppDto.CraftsGradeDto result = new AppDto.CraftsGradeDto();
					CraftsGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsGradeDtos = items;
			}
		}

		public void CraftsTrainingDtoConverter_fillInto(AppDto.CraftsTrainingDto source, CraftsTrainingDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCraftsTrainingDto == null ) {
				target.parentCraftsTrainingDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCraftsTrainingDto);
			target.maxLevel=source.maxLevel;
			target.extraGrow=source.extraGrow;
			if (source.craftsGradeDtos != null){
				foreach(AppDto.CraftsGradeDto craftsGradeDtos in source.craftsGradeDtos){
					CraftsGradeDto protobufModel = new CraftsGradeDto();
					CraftsGradeDtoConverter_fillInto(craftsGradeDtos, protobufModel);
					target.craftsGradeDtos.Add(protobufModel);
				}
			}
		}
		public void CrewSkillsDtoConverter_fillFrom(AppDto.CrewSkillsDto target, CrewSkillsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewSkillsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewSkillsDto);
			}
			if (source.craftsGradeDtos != null) {
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsGradeDtos = items;
				foreach (CraftsGradeDto item in source.craftsGradeDtos) {
					AppDto.CraftsGradeDto result = new AppDto.CraftsGradeDto();
					CraftsGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsGradeDtos = items;
			}
			if (source.magic != null) {
				List<int> items = new List<int>();
				target.magic = items;
				foreach (int item in source.magic)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.magic = items;
			}
			target.maxLevel = source.maxLevel;
						if (source.craftsTrainingDto!=null) {
				AppDto.CraftsTrainingDto retCraftsTrainingDto = new AppDto.CraftsTrainingDto();
				CraftsTrainingDtoConverter_fillFrom(retCraftsTrainingDto, source.craftsTrainingDto);
				target.craftsTrainingDto = retCraftsTrainingDto;
			}
						if (source.passiveSkillDtos != null) {
				List<AppDto.PassiveSkillDto> items = new List<AppDto.PassiveSkillDto>();
				target.passiveSkillDtos = items;
				foreach (PassiveSkillDto item in source.passiveSkillDtos) {
					AppDto.PassiveSkillDto result = new AppDto.PassiveSkillDto();
					PassiveSkillDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.PassiveSkillDto> items = new List<AppDto.PassiveSkillDto>();
				target.passiveSkillDtos = items;
			}
			target.extraGrow = source.extraGrow;
		}

		public void CrewSkillsDtoConverter_fillInto(AppDto.CrewSkillsDto source, CrewSkillsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewSkillsDto == null ) {
				target.parentCrewSkillsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewSkillsDto);
			if (source.craftsGradeDtos != null){
				foreach(AppDto.CraftsGradeDto craftsGradeDtos in source.craftsGradeDtos){
					CraftsGradeDto protobufModel = new CraftsGradeDto();
					CraftsGradeDtoConverter_fillInto(craftsGradeDtos, protobufModel);
					target.craftsGradeDtos.Add(protobufModel);
				}
			}
			if (source.magic != null){
				foreach(int magic in source.magic)
					target.magic.Add(magic);
			}
			target.maxLevel=source.maxLevel;
			if(source.craftsTrainingDto!=null){
				CraftsTrainingDto protobufModel = new CraftsTrainingDto();
				CraftsTrainingDtoConverter_fillInto(source.craftsTrainingDto, protobufModel);
				target.craftsTrainingDto = protobufModel;
			}
			if (source.passiveSkillDtos != null){
				foreach(AppDto.PassiveSkillDto passiveSkillDtos in source.passiveSkillDtos){
					PassiveSkillDto protobufModel = new PassiveSkillDto();
					PassiveSkillDtoConverter_fillInto(passiveSkillDtos, protobufModel);
					target.passiveSkillDtos.Add(protobufModel);
				}
			}
			target.extraGrow=source.extraGrow;
		}
		public void CrewPassiveGradeConverter_fillFrom(AppDto.CrewPassiveGrade target, CrewPassiveGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.score = source.score;
			target.consume = source.consume;
			target.back = source.back;
		}

		public void CrewPassiveGradeConverter_fillInto(AppDto.CrewPassiveGrade source, CrewPassiveGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.score=source.score;
			target.consume=source.consume;
			target.back=source.back;
		}
		public void PassiveSkillDtoConverter_fillFrom(AppDto.PassiveSkillDto target, PassiveSkillDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPassiveSkillDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPassiveSkillDto);
			}
			target.id = source.id;
			target.grade = source.grade;
			target.exp = source.exp;
		}

		public void PassiveSkillDtoConverter_fillInto(AppDto.PassiveSkillDto source, PassiveSkillDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPassiveSkillDto == null ) {
				target.parentPassiveSkillDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPassiveSkillDto);
			target.id=source.id;
			target.grade=source.grade;
			target.exp=source.exp;
		}
		public void PassiveSkillConverter_fillFrom(AppDto.PassiveSkill target, PassiveSkill source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPassiveSkill != null ) {
				SkillConverter_fillFrom(target,source.parentPassiveSkill);
			}
		}

		public void PassiveSkillConverter_fillInto(AppDto.PassiveSkill source, PassiveSkill target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPassiveSkill == null ) {
				target.parentPassiveSkill = new Skill();
			}
			SkillConverter_fillInto(source,target.parentPassiveSkill);
		}
		public void PassiveSkillBookConverter_fillFrom(AppDto.PassiveSkillBook target, PassiveSkillBook source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPassiveSkillBook != null ) {
				AppItemConverter_fillFrom(target,source.parentPassiveSkillBook);
			}
			target.skillId = source.skillId;
			target.bookType = source.bookType;
			target.introduction = source.introduction;
		}

		public void PassiveSkillBookConverter_fillInto(AppDto.PassiveSkillBook source, PassiveSkillBook target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPassiveSkillBook == null ) {
				target.parentPassiveSkillBook = new AppItem();
			}
			AppItemConverter_fillInto(source,target.parentPassiveSkillBook);
			target.skillId=source.skillId;
			target.bookType=source.bookType;
			if(source.introduction!=null)
				target.introduction = source.introduction;
		}
		public void CraftsTrainingSaveDtoConverter_fillFrom(AppDto.CraftsTrainingSaveDto target, CraftsTrainingSaveDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCraftsTrainingSaveDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCraftsTrainingSaveDto);
			}
			if (source.craftsGradeDtos != null) {
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsGradeDtos = items;
				foreach (CraftsGradeDto item in source.craftsGradeDtos) {
					AppDto.CraftsGradeDto result = new AppDto.CraftsGradeDto();
					CraftsGradeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CraftsGradeDto> items = new List<AppDto.CraftsGradeDto>();
				target.craftsGradeDtos = items;
			}
			if (source.deleteId != null) {
				List<int> items = new List<int>();
				target.deleteId = items;
				foreach (int item in source.deleteId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.deleteId = items;
			}
			target.maxLevel = source.maxLevel;
			target.extraGrow = source.extraGrow;
						if (source.craftsTrainingDto!=null) {
				AppDto.CraftsTrainingDto retCraftsTrainingDto = new AppDto.CraftsTrainingDto();
				CraftsTrainingDtoConverter_fillFrom(retCraftsTrainingDto, source.craftsTrainingDto);
				target.craftsTrainingDto = retCraftsTrainingDto;
			}
					}

		public void CraftsTrainingSaveDtoConverter_fillInto(AppDto.CraftsTrainingSaveDto source, CraftsTrainingSaveDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCraftsTrainingSaveDto == null ) {
				target.parentCraftsTrainingSaveDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCraftsTrainingSaveDto);
			if (source.craftsGradeDtos != null){
				foreach(AppDto.CraftsGradeDto craftsGradeDtos in source.craftsGradeDtos){
					CraftsGradeDto protobufModel = new CraftsGradeDto();
					CraftsGradeDtoConverter_fillInto(craftsGradeDtos, protobufModel);
					target.craftsGradeDtos.Add(protobufModel);
				}
			}
			if (source.deleteId != null){
				foreach(int deleteId in source.deleteId)
					target.deleteId.Add(deleteId);
			}
			target.maxLevel=source.maxLevel;
			target.extraGrow=source.extraGrow;
			if(source.craftsTrainingDto!=null){
				CraftsTrainingDto protobufModel = new CraftsTrainingDto();
				CraftsTrainingDtoConverter_fillInto(source.craftsTrainingDto, protobufModel);
				target.craftsTrainingDto = protobufModel;
			}
		}
		public void CrewPassiveSkillConverter_fillFrom(AppDto.CrewPassiveSkill target, CrewPassiveSkill source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewPassiveSkill != null ) {
				PassiveSkillConverter_fillFrom(target,source.parentCrewPassiveSkill);
			}
			target.maxGrade = source.maxGrade;
			target.itemId = source.itemId;
		}

		public void CrewPassiveSkillConverter_fillInto(AppDto.CrewPassiveSkill source, CrewPassiveSkill target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewPassiveSkill == null ) {
				target.parentCrewPassiveSkill = new PassiveSkill();
			}
			PassiveSkillConverter_fillInto(source,target.parentCrewPassiveSkill);
			target.maxGrade=source.maxGrade;
			target.itemId=source.itemId;
		}
		public void AllCaseInfoDtoConverter_fillFrom(AppDto.AllCaseInfoDto target, AllCaseInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAllCaseInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAllCaseInfoDto);
			}
			if (source.caseInfoDtos != null) {
				List<AppDto.FormationCaseInfoDto> items = new List<AppDto.FormationCaseInfoDto>();
				target.caseInfoDtos = items;
				foreach (FormationCaseInfoDto item in source.caseInfoDtos) {
					AppDto.FormationCaseInfoDto result = new AppDto.FormationCaseInfoDto();
					FormationCaseInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.FormationCaseInfoDto> items = new List<AppDto.FormationCaseInfoDto>();
				target.caseInfoDtos = items;
			}
			if (source.crewInfoDtos != null) {
				List<AppDto.CrewInfoDto> items = new List<AppDto.CrewInfoDto>();
				target.crewInfoDtos = items;
				foreach (CrewInfoDto item in source.crewInfoDtos) {
					AppDto.CrewInfoDto result = new AppDto.CrewInfoDto();
					CrewInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewInfoDto> items = new List<AppDto.CrewInfoDto>();
				target.crewInfoDtos = items;
			}
			target.mainCrewId = source.mainCrewId;
			target.activeAttackFormationCaseIndex = source.activeAttackFormationCaseIndex;
		}

		public void AllCaseInfoDtoConverter_fillInto(AppDto.AllCaseInfoDto source, AllCaseInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAllCaseInfoDto == null ) {
				target.parentAllCaseInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAllCaseInfoDto);
			if (source.caseInfoDtos != null){
				foreach(AppDto.FormationCaseInfoDto caseInfoDtos in source.caseInfoDtos){
					FormationCaseInfoDto protobufModel = new FormationCaseInfoDto();
					FormationCaseInfoDtoConverter_fillInto(caseInfoDtos, protobufModel);
					target.caseInfoDtos.Add(protobufModel);
				}
			}
			if (source.crewInfoDtos != null){
				foreach(AppDto.CrewInfoDto crewInfoDtos in source.crewInfoDtos){
					CrewInfoDto protobufModel = new CrewInfoDto();
					CrewInfoDtoConverter_fillInto(crewInfoDtos, protobufModel);
					target.crewInfoDtos.Add(protobufModel);
				}
			}
			target.mainCrewId=source.mainCrewId;
			target.activeAttackFormationCaseIndex=source.activeAttackFormationCaseIndex;
		}
		public void BloodBarConverter_fillFrom(AppDto.BloodBar target, BloodBar source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.colorRes = source.colorRes;
		}

		public void BloodBarConverter_fillInto(AppDto.BloodBar source, BloodBar target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.colorRes!=null)
				target.colorRes = source.colorRes;
		}
		public void CrewPropertyCalculateConverter_fillFrom(AppDto.CrewPropertyCalculate target, CrewPropertyCalculate source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.propertyCalculateMath = source.propertyCalculateMath;
			target.basePower = source.basePower;
			target.addPowerMath = source.addPowerMath;
			target.nextPropertyMath = source.nextPropertyMath;
		}

		public void CrewPropertyCalculateConverter_fillInto(AppDto.CrewPropertyCalculate source, CrewPropertyCalculate target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.propertyCalculateMath!=null)
				target.propertyCalculateMath = source.propertyCalculateMath;
			target.basePower=source.basePower;
			if(source.addPowerMath!=null)
				target.addPowerMath = source.addPowerMath;
			if(source.nextPropertyMath!=null)
				target.nextPropertyMath = source.nextPropertyMath;
		}
		public void TeamShoutNotifyConverter_fillFrom(AppDto.TeamShoutNotify target, TeamShoutNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.channelId = source.channelId;
			target.content = source.content;
			target.teamId = source.teamId;
			target.leaderId = source.leaderId;
			target.leaderName = source.leaderName;
			target.factionId = source.factionId;
			target.grade = source.grade;
						if (source.dress!=null) {
				AppDto.PlayerDressInfo retDress = new AppDto.PlayerDressInfo();
				PlayerDressInfoConverter_fillFrom(retDress, source.dress);
				target.dress = retDress;
			}
					}

		public void TeamShoutNotifyConverter_fillInto(AppDto.TeamShoutNotify source, TeamShoutNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.channelId=source.channelId;
			if(source.content!=null)
				target.content = source.content;
			target.teamId=source.teamId;
			target.leaderId=source.leaderId;
			if(source.leaderName!=null)
				target.leaderName = source.leaderName;
			target.factionId=source.factionId;
			target.grade=source.grade;
			if(source.dress!=null){
				PlayerDressInfo protobufModel = new PlayerDressInfo();
				PlayerDressInfoConverter_fillInto(source.dress, protobufModel);
				target.dress = protobufModel;
			}
		}
		public void TextTipsConverter_fillFrom(AppDto.TextTips target, TextTips source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.content = source.content;
		}

		public void TextTipsConverter_fillInto(AppDto.TextTips source, TextTips target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.content!=null)
				target.content = source.content;
		}
		public void CallMemberNotifyConverter_fillFrom(AppDto.CallMemberNotify target, CallMemberNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.cancomeback = source.cancomeback;
		}

		public void CallMemberNotifyConverter_fillInto(AppDto.CallMemberNotify source, CallMemberNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.cancomeback=source.cancomeback;
		}
		public void AutoMatchDtoConverter_fillFrom(AppDto.AutoMatchDto target, AutoMatchDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAutoMatchDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAutoMatchDto);
			}
			target.intention = source.intention;
		}

		public void AutoMatchDtoConverter_fillInto(AppDto.AutoMatchDto source, AutoMatchDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAutoMatchDto == null ) {
				target.parentAutoMatchDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAutoMatchDto);
			target.intention=source.intention;
		}
		public void QuartzConverter_fillFrom(AppDto.Quartz target, Quartz source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentQuartz != null ) {
				AppItemConverter_fillFrom(target,source.parentQuartz);
			}
			target.elementId = source.elementId;
		}

		public void QuartzConverter_fillInto(AppDto.Quartz source, Quartz target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentQuartz == null ) {
				target.parentQuartz = new AppItem();
			}
			AppItemConverter_fillInto(source,target.parentQuartz);
			target.elementId=source.elementId;
		}
		public void QuartzStrengGradeConverter_fillFrom(AppDto.QuartzStrengGrade target, QuartzStrengGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.playerGradeLimit = source.playerGradeLimit;
			target.breakGradeLimit = source.breakGradeLimit;
			if (source.material != null) {
				List<AppDto.QuartzStrengMaterial> items = new List<AppDto.QuartzStrengMaterial>();
				target.material = items;
				foreach (QuartzStrengMaterial item in source.material) {
					AppDto.QuartzStrengMaterial result = new AppDto.QuartzStrengMaterial();
					QuartzStrengMaterialConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.QuartzStrengMaterial> items = new List<AppDto.QuartzStrengMaterial>();
				target.material = items;
			}
		}

		public void QuartzStrengGradeConverter_fillInto(AppDto.QuartzStrengGrade source, QuartzStrengGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.playerGradeLimit=source.playerGradeLimit;
			target.breakGradeLimit=source.breakGradeLimit;
			if (source.material != null){
				foreach(AppDto.QuartzStrengMaterial material in source.material){
					QuartzStrengMaterial protobufModel = new QuartzStrengMaterial();
					QuartzStrengMaterialConverter_fillInto(material, protobufModel);
					target.material.Add(protobufModel);
				}
			}
		}
		public void QuartzExtraDtoConverter_fillFrom(AppDto.QuartzExtraDto target, QuartzExtraDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentQuartzExtraDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentQuartzExtraDto);
			}
			target.elementId = source.elementId;
			if (source.baseProperties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.baseProperties = items;
				foreach (CharacterPropertyDto item in source.baseProperties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.baseProperties = items;
			}
			if (source.secondProperties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.secondProperties = items;
				foreach (CharacterPropertyDto item in source.secondProperties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.secondProperties = items;
			}
			if (source.quartzProperties != null) {
				List<AppDto.QuartzPropertyDto> items = new List<AppDto.QuartzPropertyDto>();
				target.quartzProperties = items;
				foreach (QuartzPropertyDto item in source.quartzProperties) {
					AppDto.QuartzPropertyDto result = new AppDto.QuartzPropertyDto();
					QuartzPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.QuartzPropertyDto> items = new List<AppDto.QuartzPropertyDto>();
				target.quartzProperties = items;
			}
			target.passiveSkill = source.passiveSkill;
			target.strengGrade = source.strengGrade;
			target.breakGrade = source.breakGrade;
		}

		public void QuartzExtraDtoConverter_fillInto(AppDto.QuartzExtraDto source, QuartzExtraDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentQuartzExtraDto == null ) {
				target.parentQuartzExtraDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentQuartzExtraDto);
			target.elementId=source.elementId;
			if (source.baseProperties != null){
				foreach(AppDto.CharacterPropertyDto baseProperties in source.baseProperties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(baseProperties, protobufModel);
					target.baseProperties.Add(protobufModel);
				}
			}
			if (source.secondProperties != null){
				foreach(AppDto.CharacterPropertyDto secondProperties in source.secondProperties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(secondProperties, protobufModel);
					target.secondProperties.Add(protobufModel);
				}
			}
			if (source.quartzProperties != null){
				foreach(AppDto.QuartzPropertyDto quartzProperties in source.quartzProperties){
					QuartzPropertyDto protobufModel = new QuartzPropertyDto();
					QuartzPropertyDtoConverter_fillInto(quartzProperties, protobufModel);
					target.quartzProperties.Add(protobufModel);
				}
			}
			target.passiveSkill=source.passiveSkill;
			target.strengGrade=source.strengGrade;
			target.breakGrade=source.breakGrade;
		}
		public void BracerGradeConverter_fillFrom(AppDto.BracerGrade target, BracerGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.exp = source.exp;
			target.slotsCount = source.slotsCount;
			target.quartzSmithGrade = source.quartzSmithGrade;
			target.name = source.name;
			target.newbie = source.newbie;
			if (source.attrId != null) {
				List<int> items = new List<int>();
				target.attrId = items;
				foreach (int item in source.attrId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.attrId = items;
			}
			if (source.attrAdd != null) {
				List<float> items = new List<float>();
				target.attrAdd = items;
				foreach (float item in source.attrAdd)
                    items.Add(item);
			}else{
				List<float> items = new List<float>();
				target.attrAdd = items;
			}
			target.icon = source.icon;
			target.talentPoint = source.talentPoint;
		}

		public void BracerGradeConverter_fillInto(AppDto.BracerGrade source, BracerGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.exp=source.exp;
			target.slotsCount=source.slotsCount;
			target.quartzSmithGrade=source.quartzSmithGrade;
			if(source.name!=null)
				target.name = source.name;
			target.newbie=source.newbie;
			if (source.attrId != null){
				foreach(int attrId in source.attrId)
					target.attrId.Add(attrId);
			}
			if (source.attrAdd != null){
				foreach(float attrAdd in source.attrAdd)
					target.attrAdd.Add(attrAdd);
			}
			if(source.icon!=null)
				target.icon = source.icon;
			target.talentPoint=source.talentPoint;
		}
		public void CrewFetterDtoConverter_fillFrom(AppDto.CrewFetterDto target, CrewFetterDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewFetterDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewFetterDto);
			}
			target.crewFetterId = source.crewFetterId;
			target.currentlevel = source.currentlevel;
			target.active = source.active;
		}

		public void CrewFetterDtoConverter_fillInto(AppDto.CrewFetterDto source, CrewFetterDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewFetterDto == null ) {
				target.parentCrewFetterDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewFetterDto);
			target.crewFetterId=source.crewFetterId;
			target.currentlevel=source.currentlevel;
			target.active=source.active;
		}
		public void ShopConverter_fillFrom(AppDto.Shop target, Shop source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.type = source.type;
			target.description = source.description;
			target.res = source.res;
			target.resetItemId = source.resetItemId;
			target.resetItemCount = source.resetItemCount;
			target.resetRule = source.resetRule;
			target.shopType = source.shopType;
			target.shopRes = source.shopRes;
		}

		public void ShopConverter_fillInto(AppDto.Shop source, Shop target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.type=source.type;
			if(source.description!=null)
				target.description = source.description;
			if(source.res!=null)
				target.res = source.res;
			target.resetItemId=source.resetItemId;
			target.resetItemCount=source.resetItemCount;
			target.resetRule=source.resetRule;
			target.shopType=source.shopType;
			if(source.shopRes!=null)
				target.shopRes = source.shopRes;
		}
		public void CrewFetterConverter_fillFrom(AppDto.CrewFetter target, CrewFetter source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.crewids != null) {
				List<int> items = new List<int>();
				target.crewids = items;
				foreach (int item in source.crewids)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.crewids = items;
			}
			target.color = source.color;
			if ( source.parentCrewFetter != null ) {
				PassiveSkillConverter_fillFrom(target,source.parentCrewFetter);
			}
		}

		public void CrewFetterConverter_fillInto(AppDto.CrewFetter source, CrewFetter target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.crewids != null){
				foreach(int crewids in source.crewids)
					target.crewids.Add(crewids);
			}
			target.color=source.color;
			if ( target.parentCrewFetter == null ) {
				target.parentCrewFetter = new PassiveSkill();
			}
			PassiveSkillConverter_fillInto(source,target.parentCrewFetter);
		}
		public void ActiveCaseInfoDtoConverter_fillFrom(AppDto.ActiveCaseInfoDto target, ActiveCaseInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentActiveCaseInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentActiveCaseInfoDto);
			}
			target.formationId = source.formationId;
			target.level = source.level;
			if (source.crewInfoDtos != null) {
				List<AppDto.CasePositionDto> items = new List<AppDto.CasePositionDto>();
				target.crewInfoDtos = items;
				foreach (CasePositionDto item in source.crewInfoDtos) {
					AppDto.CasePositionDto result = new AppDto.CasePositionDto();
					CasePositionDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CasePositionDto> items = new List<AppDto.CasePositionDto>();
				target.crewInfoDtos = items;
			}
			target.activeId = source.activeId;
		}

		public void ActiveCaseInfoDtoConverter_fillInto(AppDto.ActiveCaseInfoDto source, ActiveCaseInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentActiveCaseInfoDto == null ) {
				target.parentActiveCaseInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentActiveCaseInfoDto);
			target.formationId=source.formationId;
			target.level=source.level;
			if (source.crewInfoDtos != null){
				foreach(AppDto.CasePositionDto crewInfoDtos in source.crewInfoDtos){
					CasePositionDto protobufModel = new CasePositionDto();
					CasePositionDtoConverter_fillInto(crewInfoDtos, protobufModel);
					target.crewInfoDtos.Add(protobufModel);
				}
			}
			target.activeId=source.activeId;
		}
		public void OrbmentConverter_fillFrom(AppDto.Orbment target, Orbment source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.openOrder != null) {
				List<int> items = new List<int>();
				target.openOrder = items;
				foreach (int item in source.openOrder)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.openOrder = items;
			}
			if (source.slotsElementLimit != null) {
				List<AppDto.SlotsElementLimit> items = new List<AppDto.SlotsElementLimit>();
				target.slotsElementLimit = items;
				foreach (SlotsElementLimit item in source.slotsElementLimit) {
					AppDto.SlotsElementLimit result = new AppDto.SlotsElementLimit();
					SlotsElementLimitConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SlotsElementLimit> items = new List<AppDto.SlotsElementLimit>();
				target.slotsElementLimit = items;
			}
			if (source.slotsLinks != null) {
				List<AppDto.SlotsLink> items = new List<AppDto.SlotsLink>();
				target.slotsLinks = items;
				foreach (SlotsLink item in source.slotsLinks) {
					AppDto.SlotsLink result = new AppDto.SlotsLink();
					SlotsLinkConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SlotsLink> items = new List<AppDto.SlotsLink>();
				target.slotsLinks = items;
			}
						if (source.quartzProperty!=null) {
				AppDto.QuartzProperty retQuartzProperty = new AppDto.QuartzProperty();
				QuartzPropertyConverter_fillFrom(retQuartzProperty, source.quartzProperty);
				target.quartzProperty = retQuartzProperty;
			}
						if (source.links != null) {
				List<string> items = new List<string>();
				target.links = items;
				foreach (string item in source.links)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.links = items;
			}
		}

		public void OrbmentConverter_fillInto(AppDto.Orbment source, Orbment target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.openOrder != null){
				foreach(int openOrder in source.openOrder)
					target.openOrder.Add(openOrder);
			}
			if (source.slotsElementLimit != null){
				foreach(AppDto.SlotsElementLimit slotsElementLimit in source.slotsElementLimit){
					SlotsElementLimit protobufModel = new SlotsElementLimit();
					SlotsElementLimitConverter_fillInto(slotsElementLimit, protobufModel);
					target.slotsElementLimit.Add(protobufModel);
				}
			}
			if (source.slotsLinks != null){
				foreach(AppDto.SlotsLink slotsLinks in source.slotsLinks){
					SlotsLink protobufModel = new SlotsLink();
					SlotsLinkConverter_fillInto(slotsLinks, protobufModel);
					target.slotsLinks.Add(protobufModel);
				}
			}
			if(source.quartzProperty!=null){
				QuartzProperty protobufModel = new QuartzProperty();
				QuartzPropertyConverter_fillInto(source.quartzProperty, protobufModel);
				target.quartzProperty = protobufModel;
			}
			if (source.links != null){
				foreach(string links in source.links)
					target.links.Add(links);
			}
		}
		public void QuartzPropertyDtoConverter_fillFrom(AppDto.QuartzPropertyDto target, QuartzPropertyDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentQuartzPropertyDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentQuartzPropertyDto);
			}
			target.elementId = source.elementId;
			target.count = source.count;
		}

		public void QuartzPropertyDtoConverter_fillInto(AppDto.QuartzPropertyDto source, QuartzPropertyDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentQuartzPropertyDto == null ) {
				target.parentQuartzPropertyDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentQuartzPropertyDto);
			target.elementId=source.elementId;
			target.count=source.count;
		}
		public void EquipmentConverter_fillFrom(AppDto.Equipment target, Equipment source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.equipType = source.equipType;
			target.grade = source.grade;
			if (source.partType != null) {
				List<int> items = new List<int>();
				target.partType = items;
                foreach (int item in source.partType)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.partType = items;
			}
			target.smith = source.smith;
			target.smithItem = source.smithItem;
			if ( source.parentEquipment != null ) {
				AppItemConverter_fillFrom(target,source.parentEquipment);
			}
			target.smithSilver = source.smithSilver;
			if (source.factionIds != null) {
				List<int> items = new List<int>();
				target.factionIds = items;
                foreach (int item in source.factionIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.factionIds = items;
			}
			target.resetSilver = source.resetSilver;
			target.smithIronAmount = source.smithIronAmount;
			target.resetIronAmount = source.resetIronAmount;
			target.wpmodel = source.wpmodel;
		}

		public void EquipmentConverter_fillInto(AppDto.Equipment source, Equipment target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.equipType=source.equipType;
			target.grade=source.grade;
			if (source.partType != null){
				foreach(int partType in source.partType)
					target.partType.Add(partType);
			}
			target.smith=source.smith;
			if(source.smithItem!=null)
				target.smithItem = source.smithItem;
			if ( target.parentEquipment == null ) {
				target.parentEquipment = new AppItem();
			}
			AppItemConverter_fillInto(source,target.parentEquipment);
			target.smithSilver=source.smithSilver;
			if (source.factionIds != null){
				foreach(int factionIds in source.factionIds)
					target.factionIds.Add(factionIds);
			}
			target.resetSilver=source.resetSilver;
			target.smithIronAmount=source.smithIronAmount;
			target.resetIronAmount=source.resetIronAmount;
			target.wpmodel=source.wpmodel;
		}
		public void EquipmentTypeConverter_fillFrom(AppDto.EquipmentType target, EquipmentType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.math = source.math;
		}

		public void EquipmentTypeConverter_fillInto(AppDto.EquipmentType source, EquipmentType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.math!=null)
				target.math = source.math;
		}
		public void EquipmentDtoConverter_fillFrom(AppDto.EquipmentDto target, EquipmentDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEquipmentDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEquipmentDto);
			}
			target.equipUid = source.equipUid;
			target.equipId = source.equipId;
			target.partType = source.partType;
						if (source.property!=null) {
				AppDto.EquipmentExtraDto retProperty = new AppDto.EquipmentExtraDto();
				EquipmentExtraDtoConverter_fillFrom(retProperty, source.property);
				target.property = retProperty;
			}
						target.circulationType = source.circulationType;
		}

		public void EquipmentDtoConverter_fillInto(AppDto.EquipmentDto source, EquipmentDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEquipmentDto == null ) {
				target.parentEquipmentDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEquipmentDto);
			target.equipUid=source.equipUid;
			target.equipId=source.equipId;
			target.partType=source.partType;
			if(source.property!=null){
				EquipmentExtraDto protobufModel = new EquipmentExtraDto();
				EquipmentExtraDtoConverter_fillInto(source.property, protobufModel);
				target.property = protobufModel;
			}
			target.circulationType=source.circulationType;
		}
		public void EquipmentExtraDtoConverter_fillFrom(AppDto.EquipmentExtraDto target, EquipmentExtraDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEquipmentExtraDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEquipmentExtraDto);
			}
			target.power = source.power;
			target.quality = source.quality;
						if (source.medallion!=null) {
				AppDto.MedallionDto retMedallion = new AppDto.MedallionDto();
				MedallionDtoConverter_fillFrom(retMedallion, source.medallion);
				target.medallion = retMedallion;
			}
									if (source.resetProperty!=null) {
				AppDto.EquipmentPropertyDto retResetProperty = new AppDto.EquipmentPropertyDto();
				EquipmentPropertyDtoConverter_fillFrom(retResetProperty, source.resetProperty);
				target.resetProperty = retResetProperty;
			}
									if (source.currentProperty!=null) {
				AppDto.EquipmentPropertyDto retCurrentProperty = new AppDto.EquipmentPropertyDto();
				EquipmentPropertyDtoConverter_fillFrom(retCurrentProperty, source.currentProperty);
				target.currentProperty = retCurrentProperty;
			}
						target.groupId = source.groupId;
			target.effectId = source.effectId;
		}

		public void EquipmentExtraDtoConverter_fillInto(AppDto.EquipmentExtraDto source, EquipmentExtraDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEquipmentExtraDto == null ) {
				target.parentEquipmentExtraDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEquipmentExtraDto);
			target.power=source.power;
			target.quality=source.quality;
			if(source.medallion!=null){
				MedallionDto protobufModel = new MedallionDto();
				MedallionDtoConverter_fillInto(source.medallion, protobufModel);
				target.medallion = protobufModel;
			}
			if(source.resetProperty!=null){
				EquipmentPropertyDto protobufModel = new EquipmentPropertyDto();
				EquipmentPropertyDtoConverter_fillInto(source.resetProperty, protobufModel);
				target.resetProperty = protobufModel;
			}
			if(source.currentProperty!=null){
				EquipmentPropertyDto protobufModel = new EquipmentPropertyDto();
				EquipmentPropertyDtoConverter_fillInto(source.currentProperty, protobufModel);
				target.currentProperty = protobufModel;
			}
			target.groupId=source.groupId;
			target.effectId=source.effectId;
		}
		public void ShopGoodsDtoConverter_fillFrom(AppDto.ShopGoodsDto target, ShopGoodsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentShopGoodsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentShopGoodsDto);
			}
			target.goodsId = source.goodsId;
			target.limitNum = source.limitNum;
			target.buyPrice = source.buyPrice;
			target.num = source.num;
			target.discount = source.discount;
		}

		public void ShopGoodsDtoConverter_fillInto(AppDto.ShopGoodsDto source, ShopGoodsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentShopGoodsDto == null ) {
				target.parentShopGoodsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentShopGoodsDto);
			target.goodsId=source.goodsId;
			target.limitNum=source.limitNum;
			target.buyPrice=source.buyPrice;
			target.num=source.num;
			target.discount=source.discount;
		}
		public void CrewExtNameConverter_fillFrom(AppDto.CrewExtName target, CrewExtName source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
		}

		public void CrewExtNameConverter_fillInto(AppDto.CrewExtName source, CrewExtName target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
		}
		public void EquipmentEffectsConverter_fillFrom(AppDto.EquipmentEffects target, EquipmentEffects source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.desc = source.desc;
			target.functionType = source.functionType;
			target.functionKey = source.functionKey;
			target.functionVal = source.functionVal;
			if (source.equipIds != null) {
				List<int> items = new List<int>();
				target.equipIds = items;
                foreach (int item in source.equipIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.equipIds = items;
			}
			target.weightRates = source.weightRates;
		}

		public void EquipmentEffectsConverter_fillInto(AppDto.EquipmentEffects source, EquipmentEffects target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.desc!=null)
				target.desc = source.desc;
			target.functionType=source.functionType;
			target.functionKey=source.functionKey;
			if(source.functionVal!=null)
				target.functionVal = source.functionVal;
			if (source.equipIds != null){
				foreach(int equipIds in source.equipIds)
					target.equipIds.Add(equipIds);
			}
			target.weightRates=source.weightRates;
		}
		public void EquipmentPartConverter_fillFrom(AppDto.EquipmentPart target, EquipmentPart source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			if (source.extraProperty != null) {
				List<int> items = new List<int>();
				target.extraProperty = items;
                foreach (int item in source.extraProperty)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.extraProperty = items;
			}
			if (source.baseProperty != null) {
				List<int> items = new List<int>();
				target.baseProperty = items;
                foreach (int item in source.baseProperty)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.baseProperty = items;
			}
			if (source.secondProperty != null) {
				List<int> items = new List<int>();
				target.secondProperty = items;
                foreach (int item in source.secondProperty)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.secondProperty = items;
			}
		}

		public void EquipmentPartConverter_fillInto(AppDto.EquipmentPart source, EquipmentPart target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if (source.extraProperty != null){
				foreach(int extraProperty in source.extraProperty)
					target.extraProperty.Add(extraProperty);
			}
			if (source.baseProperty != null){
				foreach(int baseProperty in source.baseProperty)
					target.baseProperty.Add(baseProperty);
			}
			if (source.secondProperty != null){
				foreach(int secondProperty in source.secondProperty)
					target.secondProperty.Add(secondProperty);
			}
		}
		public void EquipmentQualityConverter_fillFrom(AppDto.EquipmentQuality target, EquipmentQuality source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			if (source.range != null) {
				List<int> items = new List<int>();
				target.range = items;
				foreach (int item in source.range)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.range = items;
			}
			target.itemId = source.itemId;
			target.extraChance = source.extraChance;
			target.effectChance = source.effectChance;
			target.groupChance = source.groupChance;
		}

		public void EquipmentQualityConverter_fillInto(AppDto.EquipmentQuality source, EquipmentQuality target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if (source.range != null){
				foreach(int range in source.range)
					target.range.Add(range);
			}
			target.itemId=source.itemId;
			target.extraChance=source.extraChance;
			target.effectChance=source.effectChance;
			target.groupChance=source.groupChance;
		}
		public void ShopGoodsConverter_fillFrom(AppDto.ShopGoods target, ShopGoods source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.originalPrice = source.originalPrice;
			target.itemId = source.itemId;
			target.shopId = source.shopId;
			target.discribe = source.discribe;
			target.lableId = source.lableId;
			target.expendItemId = source.expendItemId;
			target.limitBuyCount = source.limitBuyCount;
			target.goodsName = source.goodsName;
			if (source.discount != null) {
				List<int> items = new List<int>();
				target.discount = items;
				foreach (int item in source.discount)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.discount = items;
			}
			target.restrictId = source.restrictId;
			if (source.discountStartTime != null) {
				List<long> items = new List<long>();
				target.discountStartTime = items;
				foreach (long item in source.discountStartTime)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.discountStartTime = items;
			}
			if (source.discountEndTime != null) {
				List<long> items = new List<long>();
				target.discountEndTime = items;
				foreach (long item in source.discountEndTime)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.discountEndTime = items;
			}
			if (source.disName != null) {
				List<string> items = new List<string>();
				target.disName = items;
				foreach (string item in source.disName)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.disName = items;
			}
		}

		public void ShopGoodsConverter_fillInto(AppDto.ShopGoods source, ShopGoods target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.originalPrice=source.originalPrice;
			target.itemId=source.itemId;
			target.shopId=source.shopId;
			if(source.discribe!=null)
				target.discribe = source.discribe;
			target.lableId=source.lableId;
			target.expendItemId=source.expendItemId;
			target.limitBuyCount=source.limitBuyCount;
			if(source.goodsName!=null)
				target.goodsName = source.goodsName;
			if (source.discount != null){
				foreach(int discount in source.discount)
					target.discount.Add(discount);
			}
			target.restrictId=source.restrictId;
			if (source.discountStartTime != null){
				foreach(long discountStartTime in source.discountStartTime)
					target.discountStartTime.Add(discountStartTime);
			}
			if (source.discountEndTime != null){
				foreach(long discountEndTime in source.discountEndTime)
					target.discountEndTime.Add(discountEndTime);
			}
			if (source.disName != null){
				foreach(string disName in source.disName)
					target.disName.Add(disName);
			}
		}
		public void AllShopInfoDtoConverter_fillFrom(AppDto.AllShopInfoDto target, AllShopInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAllShopInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAllShopInfoDto);
			}
			if (source.shopInfoDtoList != null) {
				List<AppDto.ShopInfoDto> items = new List<AppDto.ShopInfoDto>();
				target.shopInfoDtoList = items;
				foreach (ShopInfoDto item in source.shopInfoDtoList) {
					AppDto.ShopInfoDto result = new AppDto.ShopInfoDto();
					ShopInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ShopInfoDto> items = new List<AppDto.ShopInfoDto>();
				target.shopInfoDtoList = items;
			}
		}

		public void AllShopInfoDtoConverter_fillInto(AppDto.AllShopInfoDto source, AllShopInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAllShopInfoDto == null ) {
				target.parentAllShopInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAllShopInfoDto);
			if (source.shopInfoDtoList != null){
				foreach(AppDto.ShopInfoDto shopInfoDtoList in source.shopInfoDtoList){
					ShopInfoDto protobufModel = new ShopInfoDto();
					ShopInfoDtoConverter_fillInto(shopInfoDtoList, protobufModel);
					target.shopInfoDtoList.Add(protobufModel);
				}
			}
		}
		public void ShopInfoDtoConverter_fillFrom(AppDto.ShopInfoDto target, ShopInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentShopInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentShopInfoDto);
			}
			if (source.shopGoodsDtoList != null) {
				List<AppDto.ShopGoodsDto> items = new List<AppDto.ShopGoodsDto>();
				target.shopGoodsDtoList = items;
				foreach (ShopGoodsDto item in source.shopGoodsDtoList) {
					AppDto.ShopGoodsDto result = new AppDto.ShopGoodsDto();
					ShopGoodsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ShopGoodsDto> items = new List<AppDto.ShopGoodsDto>();
				target.shopGoodsDtoList = items;
			}
			target.updateTime = source.updateTime;
			target.shopId = source.shopId;
		}

		public void ShopInfoDtoConverter_fillInto(AppDto.ShopInfoDto source, ShopInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentShopInfoDto == null ) {
				target.parentShopInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentShopInfoDto);
			if (source.shopGoodsDtoList != null){
				foreach(AppDto.ShopGoodsDto shopGoodsDtoList in source.shopGoodsDtoList){
					ShopGoodsDto protobufModel = new ShopGoodsDto();
					ShopGoodsDtoConverter_fillInto(shopGoodsDtoList, protobufModel);
					target.shopGoodsDtoList.Add(protobufModel);
				}
			}
			target.updateTime=source.updateTime;
			target.shopId=source.shopId;
		}
		public void QuartzBasePropertyConverter_fillFrom(AppDto.QuartzBaseProperty target, QuartzBaseProperty source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.icon = source.icon;
		}

		public void QuartzBasePropertyConverter_fillInto(AppDto.QuartzBaseProperty source, QuartzBaseProperty target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.icon!=null)
				target.icon = source.icon;
		}
		public void SlotsElementLimitConverter_fillFrom(AppDto.SlotsElementLimit target, SlotsElementLimit source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.position = source.position;
			target.elementId = source.elementId;
		}

		public void SlotsElementLimitConverter_fillInto(AppDto.SlotsElementLimit source, SlotsElementLimit target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.position=source.position;
			target.elementId=source.elementId;
		}
		public void SlotsLinkConverter_fillFrom(AppDto.SlotsLink target, SlotsLink source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.link != null) {
				List<int> items = new List<int>();
				target.link = items;
				foreach (int item in source.link)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.link = items;
			}
		}

		public void SlotsLinkConverter_fillInto(AppDto.SlotsLink source, SlotsLink target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.link != null){
				foreach(int link in source.link)
					target.link.Add(link);
			}
		}
		public void EquipmentExtraPropertyConverter_fillFrom(AppDto.EquipmentExtraProperty target, EquipmentExtraProperty source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.math = source.math;
		}

		public void EquipmentExtraPropertyConverter_fillInto(AppDto.EquipmentExtraProperty source, EquipmentExtraProperty target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.math!=null)
				target.math = source.math;
		}
		public void QuartzPropertyConverter_fillFrom(AppDto.QuartzProperty target, QuartzProperty source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.elementId = source.elementId;
			target.count = source.count;
		}

		public void QuartzPropertyConverter_fillInto(AppDto.QuartzProperty source, QuartzProperty target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.elementId=source.elementId;
			target.count=source.count;
		}
		public void EquipmentCaseDtoConverter_fillFrom(AppDto.EquipmentCaseDto target, EquipmentCaseDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEquipmentCaseDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEquipmentCaseDto);
			}
			target.caseId = source.caseId;
			if (source.caseItems != null) {
				List<AppDto.EquipmentCaseItemDto> items = new List<AppDto.EquipmentCaseItemDto>();
				target.caseItems = items;
				foreach (EquipmentCaseItemDto item in source.caseItems) {
					AppDto.EquipmentCaseItemDto result = new AppDto.EquipmentCaseItemDto();
					EquipmentCaseItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.EquipmentCaseItemDto> items = new List<AppDto.EquipmentCaseItemDto>();
				target.caseItems = items;
			}
		}

		public void EquipmentCaseDtoConverter_fillInto(AppDto.EquipmentCaseDto source, EquipmentCaseDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEquipmentCaseDto == null ) {
				target.parentEquipmentCaseDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEquipmentCaseDto);
			target.caseId=source.caseId;
			if (source.caseItems != null){
				foreach(AppDto.EquipmentCaseItemDto caseItems in source.caseItems){
					EquipmentCaseItemDto protobufModel = new EquipmentCaseItemDto();
					EquipmentCaseItemDtoConverter_fillInto(caseItems, protobufModel);
					target.caseItems.Add(protobufModel);
				}
			}
		}
		public void EquipmentInfoDtoConverter_fillFrom(AppDto.EquipmentInfoDto target, EquipmentInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEquipmentInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEquipmentInfoDto);
			}
			target.activeId = source.activeId;
			if (source.current != null) {
				List<AppDto.EquipmentDto> items = new List<AppDto.EquipmentDto>();
				target.current = items;
				foreach (EquipmentDto item in source.current) {
					AppDto.EquipmentDto result = new AppDto.EquipmentDto();
					EquipmentDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.EquipmentDto> items = new List<AppDto.EquipmentDto>();
				target.current = items;
			}
			if (source.cases != null) {
				List<AppDto.EquipmentCaseDto> items = new List<AppDto.EquipmentCaseDto>();
				target.cases = items;
				foreach (EquipmentCaseDto item in source.cases) {
					AppDto.EquipmentCaseDto result = new AppDto.EquipmentCaseDto();
					EquipmentCaseDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.EquipmentCaseDto> items = new List<AppDto.EquipmentCaseDto>();
				target.cases = items;
			}
			if (source.atrifacts != null) {
				List<AppDto.AtrifactDto> items = new List<AppDto.AtrifactDto>();
				target.atrifacts = items;
				foreach (AtrifactDto item in source.atrifacts) {
					AppDto.AtrifactDto result = new AppDto.AtrifactDto();
					AtrifactDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.AtrifactDto> items = new List<AppDto.AtrifactDto>();
				target.atrifacts = items;
			}
		}

		public void EquipmentInfoDtoConverter_fillInto(AppDto.EquipmentInfoDto source, EquipmentInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEquipmentInfoDto == null ) {
				target.parentEquipmentInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEquipmentInfoDto);
			target.activeId=source.activeId;
			if (source.current != null){
				foreach(AppDto.EquipmentDto current in source.current){
					EquipmentDto protobufModel = new EquipmentDto();
					EquipmentDtoConverter_fillInto(current, protobufModel);
					target.current.Add(protobufModel);
				}
			}
			if (source.cases != null){
				foreach(AppDto.EquipmentCaseDto cases in source.cases){
					EquipmentCaseDto protobufModel = new EquipmentCaseDto();
					EquipmentCaseDtoConverter_fillInto(cases, protobufModel);
					target.cases.Add(protobufModel);
				}
			}
			if (source.atrifacts != null){
				foreach(AppDto.AtrifactDto atrifacts in source.atrifacts){
					AtrifactDto protobufModel = new AtrifactDto();
					AtrifactDtoConverter_fillInto(atrifacts, protobufModel);
					target.atrifacts.Add(protobufModel);
				}
			}
		}
		public void GuildBuildingConverter_fillFrom(AppDto.GuildBuilding target, GuildBuilding source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.upgradeAsset = source.upgradeAsset;
			target.maintainAsset = source.maintainAsset;
			target.requireAsset = source.requireAsset;
			target.upgradeTime = source.upgradeTime;
			target.grade = source.grade;
			target.type = source.type;
		}

		public void GuildBuildingConverter_fillInto(AppDto.GuildBuilding source, GuildBuilding target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.upgradeAsset=source.upgradeAsset;
			target.maintainAsset=source.maintainAsset;
			target.requireAsset=source.requireAsset;
			target.upgradeTime=source.upgradeTime;
			target.grade=source.grade;
			target.type=source.type;
		}
		public void GuildGradeConverter_fillFrom(AppDto.GuildGrade target, GuildGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.buildingCountNeed = source.buildingCountNeed;
			if ( source.parentGuildGrade != null ) {
				GuildBuildingConverter_fillFrom(target,source.parentGuildGrade);
			}
			target.buildingGradeNeed = source.buildingGradeNeed;
			target.maxBuildingGrade = source.maxBuildingGrade;
		}

		public void GuildGradeConverter_fillInto(AppDto.GuildGrade source, GuildGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.buildingCountNeed=source.buildingCountNeed;
			if ( target.parentGuildGrade == null ) {
				target.parentGuildGrade = new GuildBuilding();
			}
			GuildBuildingConverter_fillInto(source,target.parentGuildGrade);
			target.buildingGradeNeed=source.buildingGradeNeed;
			target.maxBuildingGrade=source.maxBuildingGrade;
		}
		public void GuildPositionConverter_fillFrom(AppDto.GuildPosition target, GuildPosition source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.updateMemo = source.updateMemo;
			target.upgradeBuilding = source.upgradeBuilding;
			target.clearList = source.clearList;
			target.distributeGiftBox = source.distributeGiftBox;
			target.updateNotice = source.updateNotice;
			target.approval = source.approval;
			target.kickout = source.kickout;
			target.distributeBoss = source.distributeBoss;
			target.dismiss = source.dismiss;
			target.order = source.order;
			target.gender = source.gender;
			if (source.appoints != null) {
				List<int> items = new List<int>();
				target.appoints = items;
				foreach (int item in source.appoints)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.appoints = items;
			}
		}

		public void GuildPositionConverter_fillInto(AppDto.GuildPosition source, GuildPosition target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.updateMemo=source.updateMemo;
			target.upgradeBuilding=source.upgradeBuilding;
			target.clearList=source.clearList;
			target.distributeGiftBox=source.distributeGiftBox;
			target.updateNotice=source.updateNotice;
			target.approval=source.approval;
			target.kickout=source.kickout;
			target.distributeBoss=source.distributeBoss;
			target.dismiss=source.dismiss;
			target.order=source.order;
			target.gender=source.gender;
			if (source.appoints != null){
				foreach(int appoints in source.appoints)
					target.appoints.Add(appoints);
			}
		}
		public void GuildTreasuryConverter_fillFrom(AppDto.GuildTreasury target, GuildTreasury source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.guildAssetLimit = source.guildAssetLimit;
			if ( source.parentGuildTreasury != null ) {
				GuildBuildingConverter_fillFrom(target,source.parentGuildTreasury);
			}
		}

		public void GuildTreasuryConverter_fillInto(AppDto.GuildTreasury source, GuildTreasury target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.guildAssetLimit=source.guildAssetLimit;
			if ( target.parentGuildTreasury == null ) {
				target.parentGuildTreasury = new GuildBuilding();
			}
			GuildBuildingConverter_fillInto(source,target.parentGuildTreasury);
		}
		public void QuartzElementConverter_fillFrom(AppDto.QuartzElement target, QuartzElement source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.itemId = source.itemId;
		}

		public void QuartzElementConverter_fillInto(AppDto.QuartzElement source, QuartzElement target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.itemId=source.itemId;
		}
		public void QuartzQualityConverter_fillFrom(AppDto.QuartzQuality target, QuartzQuality source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.breakCount = source.breakCount;
			target.breakSilver = source.breakSilver;
		}

		public void QuartzQualityConverter_fillInto(AppDto.QuartzQuality source, QuartzQuality target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.breakCount=source.breakCount;
			target.breakSilver=source.breakSilver;
		}
		public void MiraConvertCountDtoConverter_fillFrom(AppDto.MiraConvertCountDto target, MiraConvertCountDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentMiraConvertCountDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentMiraConvertCountDto);
			}
			target.miraCount = source.miraCount;
		}

		public void MiraConvertCountDtoConverter_fillInto(AppDto.MiraConvertCountDto source, MiraConvertCountDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentMiraConvertCountDto == null ) {
				target.parentMiraConvertCountDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentMiraConvertCountDto);
			target.miraCount=source.miraCount;
		}
		public void OrbmentDtoConverter_fillFrom(AppDto.OrbmentDto target, OrbmentDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentOrbmentDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentOrbmentDto);
			}
			if (source.orbmentInfoDtos != null) {
				List<AppDto.OrbmentInfoDto> items = new List<AppDto.OrbmentInfoDto>();
				target.orbmentInfoDtos = items;
				foreach (OrbmentInfoDto item in source.orbmentInfoDtos) {
					AppDto.OrbmentInfoDto result = new AppDto.OrbmentInfoDto();
					OrbmentInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.OrbmentInfoDto> items = new List<AppDto.OrbmentInfoDto>();
				target.orbmentInfoDtos = items;
			}
		}

		public void OrbmentDtoConverter_fillInto(AppDto.OrbmentDto source, OrbmentDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentOrbmentDto == null ) {
				target.parentOrbmentDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentOrbmentDto);
			if (source.orbmentInfoDtos != null){
				foreach(AppDto.OrbmentInfoDto orbmentInfoDtos in source.orbmentInfoDtos){
					OrbmentInfoDto protobufModel = new OrbmentInfoDto();
					OrbmentInfoDtoConverter_fillInto(orbmentInfoDtos, protobufModel);
					target.orbmentInfoDtos.Add(protobufModel);
				}
			}
		}
		public void OrbmentInfoDtoConverter_fillFrom(AppDto.OrbmentInfoDto target, OrbmentInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentOrbmentInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentOrbmentInfoDto);
			}
			target.orbmentId = source.orbmentId;
			if (source.slotsDto != null) {
				List<AppDto.SlotsDto> items = new List<AppDto.SlotsDto>();
				target.slotsDto = items;
				foreach (SlotsDto item in source.slotsDto) {
					AppDto.SlotsDto result = new AppDto.SlotsDto();
					SlotsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SlotsDto> items = new List<AppDto.SlotsDto>();
				target.slotsDto = items;
			}
			if (source.quartzPropertyDtos != null) {
				List<AppDto.QuartzPropertyListDto> items = new List<AppDto.QuartzPropertyListDto>();
				target.quartzPropertyDtos = items;
				foreach (QuartzPropertyListDto item in source.quartzPropertyDtos) {
					AppDto.QuartzPropertyListDto result = new AppDto.QuartzPropertyListDto();
					QuartzPropertyListDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.QuartzPropertyListDto> items = new List<AppDto.QuartzPropertyListDto>();
				target.quartzPropertyDtos = items;
			}
			if (source.ownMagic != null) {
				List<int> items = new List<int>();
				target.ownMagic = items;
                foreach (int item in source.ownMagic)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.ownMagic = items;
			}
			if (source.magic != null) {
				List<int> items = new List<int>();
				target.magic = items;
                foreach (int item in source.magic)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.magic = items;
			}
			target.ownId = source.ownId;
			target.crewId = source.crewId;
			if (source.properties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
				foreach (CharacterPropertyDto item in source.properties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
			}
			target.grade = source.grade;
			target.extraGrow = source.extraGrow;
			target.phase = source.phase;
			target.quartzProprtyId = source.quartzProprtyId;
			target.battleCrewType = source.battleCrewType;
		}

		public void OrbmentInfoDtoConverter_fillInto(AppDto.OrbmentInfoDto source, OrbmentInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentOrbmentInfoDto == null ) {
				target.parentOrbmentInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentOrbmentInfoDto);
			target.orbmentId=source.orbmentId;
			if (source.slotsDto != null){
				foreach(AppDto.SlotsDto slotsDto in source.slotsDto){
					SlotsDto protobufModel = new SlotsDto();
					SlotsDtoConverter_fillInto(slotsDto, protobufModel);
					target.slotsDto.Add(protobufModel);
				}
			}
			if (source.quartzPropertyDtos != null){
				foreach(AppDto.QuartzPropertyListDto quartzPropertyDtos in source.quartzPropertyDtos){
					QuartzPropertyListDto protobufModel = new QuartzPropertyListDto();
					QuartzPropertyListDtoConverter_fillInto(quartzPropertyDtos, protobufModel);
					target.quartzPropertyDtos.Add(protobufModel);
				}
			}
			if (source.ownMagic != null){
				foreach(int ownMagic in source.ownMagic)
					target.ownMagic.Add(ownMagic);
			}
			if (source.magic != null){
				foreach(int magic in source.magic)
					target.magic.Add(magic);
			}
			target.ownId=source.ownId;
			target.crewId=source.crewId;
			if (source.properties != null){
				foreach(AppDto.CharacterPropertyDto properties in source.properties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(properties, protobufModel);
					target.properties.Add(protobufModel);
				}
			}
			target.grade=source.grade;
			target.extraGrow=source.extraGrow;
			target.phase=source.phase;
			target.quartzProprtyId=source.quartzProprtyId;
			target.battleCrewType=source.battleCrewType;
		}
		public void QuartzPropertyListDtoConverter_fillFrom(AppDto.QuartzPropertyListDto target, QuartzPropertyListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentQuartzPropertyListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentQuartzPropertyListDto);
			}
			if (source.quartzPropertyDtos != null) {
				List<AppDto.QuartzPropertyDto> items = new List<AppDto.QuartzPropertyDto>();
				target.quartzPropertyDtos = items;
				foreach (QuartzPropertyDto item in source.quartzPropertyDtos) {
					AppDto.QuartzPropertyDto result = new AppDto.QuartzPropertyDto();
					QuartzPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.QuartzPropertyDto> items = new List<AppDto.QuartzPropertyDto>();
				target.quartzPropertyDtos = items;
			}
		}

		public void QuartzPropertyListDtoConverter_fillInto(AppDto.QuartzPropertyListDto source, QuartzPropertyListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentQuartzPropertyListDto == null ) {
				target.parentQuartzPropertyListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentQuartzPropertyListDto);
			if (source.quartzPropertyDtos != null){
				foreach(AppDto.QuartzPropertyDto quartzPropertyDtos in source.quartzPropertyDtos){
					QuartzPropertyDto protobufModel = new QuartzPropertyDto();
					QuartzPropertyDtoConverter_fillInto(quartzPropertyDtos, protobufModel);
					target.quartzPropertyDtos.Add(protobufModel);
				}
			}
		}
		public void SlotsDtoConverter_fillFrom(AppDto.SlotsDto target, SlotsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSlotsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentSlotsDto);
			}
			target.position = source.position;
						if (source.bagItemDto!=null) {
				AppDto.BagItemDto retBagItemDto = new AppDto.BagItemDto();
				BagItemDtoConverter_fillFrom(retBagItemDto, source.bagItemDto);
				target.bagItemDto = retBagItemDto;
			}
					}

		public void SlotsDtoConverter_fillInto(AppDto.SlotsDto source, SlotsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSlotsDto == null ) {
				target.parentSlotsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentSlotsDto);
			target.position=source.position;
			if(source.bagItemDto!=null){
				BagItemDto protobufModel = new BagItemDto();
				BagItemDtoConverter_fillInto(source.bagItemDto, protobufModel);
				target.bagItemDto = protobufModel;
			}
		}
		public void QuartzSmithGradeConverter_fillFrom(AppDto.QuartzSmithGrade target, QuartzSmithGrade source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.normalSmith != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.normalSmith = items;
				foreach (ItemDto item in source.normalSmith) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.normalSmith = items;
			}
			if (source.strengSmith != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.strengSmith = items;
				foreach (ItemDto item in source.strengSmith) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.strengSmith = items;
			}
			target.silver = source.silver;
		}

		public void QuartzSmithGradeConverter_fillInto(AppDto.QuartzSmithGrade source, QuartzSmithGrade target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.normalSmith != null){
				foreach(AppDto.ItemDto normalSmith in source.normalSmith){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(normalSmith, protobufModel);
					target.normalSmith.Add(protobufModel);
				}
			}
			if (source.strengSmith != null){
				foreach(AppDto.ItemDto strengSmith in source.strengSmith){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(strengSmith, protobufModel);
					target.strengSmith.Add(protobufModel);
				}
			}
			target.silver=source.silver;
		}
		public void MagicChangeDtoConverter_fillFrom(AppDto.MagicChangeDto target, MagicChangeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentMagicChangeDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentMagicChangeDto);
			}
			if (source.magic != null) {
				List<int> items = new List<int>();
				target.magic = items;
                foreach (int item in source.magic)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.magic = items;
			}
		}

		public void MagicChangeDtoConverter_fillInto(AppDto.MagicChangeDto source, MagicChangeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentMagicChangeDto == null ) {
				target.parentMagicChangeDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentMagicChangeDto);
			if (source.magic != null){
				foreach(int magic in source.magic)
					target.magic.Add(magic);
			}
		}
		public void PropsParamConverter_fillFrom(AppDto.PropsParam target, PropsParam source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam != null ) {
				LogicParamAdapterConverter_fillFrom(target,source.parentPropsParam);
			}
		}

		public void PropsParamConverter_fillInto(AppDto.PropsParam source, PropsParam target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam == null ) {
				target.parentPropsParam = new LogicParamAdapter();
			}
			LogicParamAdapterConverter_fillInto(source,target.parentPropsParam);
		}
		public void HearsayNotifyConverter_fillFrom(AppDto.HearsayNotify target, HearsayNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.content = source.content;
			target.fromPlayerId = source.fromPlayerId;
		}

		public void HearsayNotifyConverter_fillInto(AppDto.HearsayNotify source, HearsayNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.content!=null)
				target.content = source.content;
			target.fromPlayerId=source.fromPlayerId;
		}
		public void TollgateConverter_fillFrom(AppDto.Tollgate target, Tollgate source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.formationId = source.formationId;
			target.battleMapId = source.battleMapId;
			target.battleCameraId = source.battleCameraId;
			target.music = source.music;
			target.playerManualBattle = source.playerManualBattle;
			target.battleBg = source.battleBg;
			target.battleBgEff = source.battleBgEff;
			target.fallRewardId = source.fallRewardId;
		}

		public void TollgateConverter_fillInto(AppDto.Tollgate source, Tollgate target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.formationId=source.formationId;
			target.battleMapId=source.battleMapId;
			target.battleCameraId=source.battleCameraId;
			if(source.music!=null)
				target.music = source.music;
			target.playerManualBattle=source.playerManualBattle;
			if(source.battleBg!=null)
				target.battleBg = source.battleBg;
			if(source.battleBgEff!=null)
				target.battleBgEff = source.battleBgEff;
			target.fallRewardId=source.fallRewardId;
		}
		public void AcceptConditionsConverter_fillFrom(AppDto.AcceptConditions target, AcceptConditions source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.acceptConditionList != null) {
				List<AppDto.AcceptCondition> items = new List<AppDto.AcceptCondition>();
				target.acceptConditionList = items;
				foreach (GameObjectTypedMessage item in source.acceptConditionList) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.AcceptCondition))
						throw new IOException("parse data error");
					items.Add((AppDto.AcceptCondition)result);
				}
			}else{
				List<AppDto.AcceptCondition> items = new List<AppDto.AcceptCondition>();
				target.acceptConditionList = items;
			}
		}

		public void AcceptConditionsConverter_fillInto(AppDto.AcceptConditions source, AcceptConditions target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.acceptConditionList != null){
				foreach(AppDto.AcceptCondition acceptConditionList in source.acceptConditionList){
					GameObjectTypedMessage msgAcceptConditionList = ProtobufUtilsNet.packInto(acceptConditionList);
					if (msgAcceptConditionList == null)
						throw new IOException("pack data error");
					target.acceptConditionList.Add(msgAcceptConditionList);
				}
			}
		}
		public void AcceptGiftsConverter_fillFrom(AppDto.AcceptGifts target, AcceptGifts source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
				foreach (ItemDto item in source.items) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
			}
		}

		public void AcceptGiftsConverter_fillInto(AppDto.AcceptGifts source, AcceptGifts target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null){
				foreach(AppDto.ItemDto items in source.items){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void MissionConverter_fillFrom(AppDto.Mission target, Mission source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.type = source.type;
			target.acceptNpcId = source.acceptNpcId;
						if (source.acceptConditions!=null) {
				AppDto.AcceptConditions retAcceptConditions = new AppDto.AcceptConditions();
				AcceptConditionsConverter_fillFrom(retAcceptConditions, source.acceptConditions);
				target.acceptConditions = retAcceptConditions;
			}
									if (source.acceptGifts!=null) {
				AppDto.AcceptGifts retAcceptGifts = new AppDto.AcceptGifts();
				AcceptGiftsConverter_fillFrom(retAcceptGifts, source.acceptGifts);
				target.acceptGifts = retAcceptGifts;
			}
						target.timeLimit = source.timeLimit;
			target.submitNpcId = source.submitNpcId;
			target.quickFindWay = source.quickFindWay;
						if (source.submitConditions!=null) {
				AppDto.SubmitConditions retSubmitConditions = new AppDto.SubmitConditions();
				SubmitConditionsConverter_fillFrom(retSubmitConditions, source.submitConditions);
				target.submitConditions = retSubmitConditions;
			}
						target.nextId = source.nextId;
			target.autoSubmit = source.autoSubmit;
			if (source.dialogOptions != null) {
				List<int> items = new List<int>();
				target.dialogOptions = items;
				foreach (int item in source.dialogOptions)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.dialogOptions = items;
			}
			target.dialogId = source.dialogId;
			target.acceptNpcStatus = source.acceptNpcStatus;
			target.submitNpcStatus = source.submitNpcStatus;
			target.clickSubmitNpcStatus = source.clickSubmitNpcStatus;
			target.clientExtStr = source.clientExtStr;
			target.tips = source.tips;
			target.battleConfirm = source.battleConfirm;
			target.submitCallPlot = source.submitCallPlot;
			target.grade = source.grade;
			if (source.rewards != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.rewards = items;
				foreach (ItemDto item in source.rewards) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.rewards = items;
			}
		}

		public void MissionConverter_fillInto(AppDto.Mission source, Mission target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.type=source.type;
			target.acceptNpcId=source.acceptNpcId;
			if(source.acceptConditions!=null){
				AcceptConditions protobufModel = new AcceptConditions();
				AcceptConditionsConverter_fillInto(source.acceptConditions, protobufModel);
				target.acceptConditions = protobufModel;
			}
			if(source.acceptGifts!=null){
				AcceptGifts protobufModel = new AcceptGifts();
				AcceptGiftsConverter_fillInto(source.acceptGifts, protobufModel);
				target.acceptGifts = protobufModel;
			}
			target.timeLimit=source.timeLimit;
			target.submitNpcId=source.submitNpcId;
			target.quickFindWay=source.quickFindWay;
			if(source.submitConditions!=null){
				SubmitConditions protobufModel = new SubmitConditions();
				SubmitConditionsConverter_fillInto(source.submitConditions, protobufModel);
				target.submitConditions = protobufModel;
			}
			target.nextId=source.nextId;
			target.autoSubmit=source.autoSubmit;
			if (source.dialogOptions != null){
				foreach(int dialogOptions in source.dialogOptions)
					target.dialogOptions.Add(dialogOptions);
			}
			target.dialogId=source.dialogId;
			if(source.acceptNpcStatus!=null)
				target.acceptNpcStatus = source.acceptNpcStatus;
			if(source.submitNpcStatus!=null)
				target.submitNpcStatus = source.submitNpcStatus;
			if(source.clickSubmitNpcStatus!=null)
				target.clickSubmitNpcStatus = source.clickSubmitNpcStatus;
			if(source.clientExtStr!=null)
				target.clientExtStr = source.clientExtStr;
			target.tips=source.tips;
			target.battleConfirm=source.battleConfirm;
			target.submitCallPlot=source.submitCallPlot;
			target.grade=source.grade;
			if (source.rewards != null){
				foreach(AppDto.ItemDto rewards in source.rewards){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(rewards, protobufModel);
					target.rewards.Add(protobufModel);
				}
			}
		}
		public void MissionDialogConverter_fillFrom(AppDto.MissionDialog target, MissionDialog source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.description = source.description;
			target.tips = source.tips;
			target.goalDesc = source.goalDesc;
			if (source.acceptDialogSequence != null) {
				List<AppDto.MissionDialogSequence> items = new List<AppDto.MissionDialogSequence>();
				target.acceptDialogSequence = items;
				foreach (MissionDialogSequence item in source.acceptDialogSequence) {
					AppDto.MissionDialogSequence result = new AppDto.MissionDialogSequence();
					MissionDialogSequenceConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.MissionDialogSequence> items = new List<AppDto.MissionDialogSequence>();
				target.acceptDialogSequence = items;
			}
			if (source.submitDialogSequence != null) {
				List<AppDto.MissionDialogSequence> items = new List<AppDto.MissionDialogSequence>();
				target.submitDialogSequence = items;
				foreach (MissionDialogSequence item in source.submitDialogSequence) {
					AppDto.MissionDialogSequence result = new AppDto.MissionDialogSequence();
					MissionDialogSequenceConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.MissionDialogSequence> items = new List<AppDto.MissionDialogSequence>();
				target.submitDialogSequence = items;
			}
			target.progressNpc = source.progressNpc;
		}

		public void MissionDialogConverter_fillInto(AppDto.MissionDialog source, MissionDialog target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.description!=null)
				target.description = source.description;
			if(source.tips!=null)
				target.tips = source.tips;
			if(source.goalDesc!=null)
				target.goalDesc = source.goalDesc;
			if (source.acceptDialogSequence != null){
				foreach(AppDto.MissionDialogSequence acceptDialogSequence in source.acceptDialogSequence){
					MissionDialogSequence protobufModel = new MissionDialogSequence();
					MissionDialogSequenceConverter_fillInto(acceptDialogSequence, protobufModel);
					target.acceptDialogSequence.Add(protobufModel);
				}
			}
			if (source.submitDialogSequence != null){
				foreach(AppDto.MissionDialogSequence submitDialogSequence in source.submitDialogSequence){
					MissionDialogSequence protobufModel = new MissionDialogSequence();
					MissionDialogSequenceConverter_fillInto(submitDialogSequence, protobufModel);
					target.submitDialogSequence.Add(protobufModel);
				}
			}
			if(source.progressNpc!=null)
				target.progressNpc = source.progressNpc;
		}
		public void MissionDialogOptionConverter_fillFrom(AppDto.MissionDialogOption target, MissionDialogOption source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.param = source.param;
			target.type = source.type;
		}

		public void MissionDialogOptionConverter_fillInto(AppDto.MissionDialogOption source, MissionDialogOption target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.param=source.param;
			target.type=source.type;
		}
		public void MissionDialogSequenceConverter_fillFrom(AppDto.MissionDialogSequence target, MissionDialogSequence source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.type = source.type;
			target.npcId = source.npcId;
			target.dialog = source.dialog;
			target.bodyPhoto = source.bodyPhoto;
			target.countenance = source.countenance;
			target.position = source.position;
		}

		public void MissionDialogSequenceConverter_fillInto(AppDto.MissionDialogSequence source, MissionDialogSequence target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.type=source.type;
			target.npcId=source.npcId;
			if(source.dialog!=null)
				target.dialog = source.dialog;
			if(source.bodyPhoto!=null)
				target.bodyPhoto = source.bodyPhoto;
			if(source.countenance!=null)
				target.countenance = source.countenance;
			target.position=source.position;
		}
		public void MissionTypeConverter_fillFrom(AppDto.MissionType target, MissionType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.functionOpenId = source.functionOpenId;
			target.acceptNpcId = source.acceptNpcId;
			target.submitConfirm = source.submitConfirm;
			target.description = source.description;
			target.appendDescription = source.appendDescription;
			target.dropable = source.dropable;
		}

		public void MissionTypeConverter_fillInto(AppDto.MissionType source, MissionType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.functionOpenId=source.functionOpenId;
			target.acceptNpcId=source.acceptNpcId;
			target.submitConfirm=source.submitConfirm;
			if(source.description!=null)
				target.description = source.description;
			if(source.appendDescription!=null)
				target.appendDescription = source.appendDescription;
			target.dropable=source.dropable;
		}
		public void SubmitConditionsConverter_fillFrom(AppDto.SubmitConditions target, SubmitConditions source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.submitConditionArray != null) {
				List<AppDto.SubmitCondition> items = new List<AppDto.SubmitCondition>();
				target.submitConditionArray = items;
				foreach (SubmitCondition item in source.submitConditionArray) {
					AppDto.SubmitCondition result = new AppDto.SubmitCondition();
					SubmitConditionConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SubmitCondition> items = new List<AppDto.SubmitCondition>();
				target.submitConditionArray = items;
			}
			if (source.clientSubmitConditions != null) {
				List<AppDto.SubmitCondition> items = new List<AppDto.SubmitCondition>();
				target.clientSubmitConditions = items;
				foreach (SubmitCondition item in source.clientSubmitConditions) {
					AppDto.SubmitCondition result = new AppDto.SubmitCondition();
					SubmitConditionConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SubmitCondition> items = new List<AppDto.SubmitCondition>();
				target.clientSubmitConditions = items;
			}
		}

		public void SubmitConditionsConverter_fillInto(AppDto.SubmitConditions source, SubmitConditions target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.submitConditionArray != null){
				foreach(AppDto.SubmitCondition submitConditionArray in source.submitConditionArray){
					SubmitCondition protobufModel = new SubmitCondition();
					SubmitConditionConverter_fillInto(submitConditionArray, protobufModel);
					target.submitConditionArray.Add(protobufModel);
				}
			}
			if (source.clientSubmitConditions != null){
				foreach(AppDto.SubmitCondition clientSubmitConditions in source.clientSubmitConditions){
					SubmitCondition protobufModel = new SubmitCondition();
					SubmitConditionConverter_fillInto(clientSubmitConditions, protobufModel);
					target.clientSubmitConditions.Add(protobufModel);
				}
			}
		}
		public void MissionSubmitStateNotifyConverter_fillFrom(AppDto.MissionSubmitStateNotify target, MissionSubmitStateNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionId = source.missionId;
			target.submitConditionId = source.submitConditionId;
			target.count = source.count;
			target.finish = source.finish;
			target.index = source.index;
		}

		public void MissionSubmitStateNotifyConverter_fillInto(AppDto.MissionSubmitStateNotify source, MissionSubmitStateNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionId=source.missionId;
			target.submitConditionId=source.submitConditionId;
			target.count=source.count;
			target.finish=source.finish;
			target.index=source.index;
		}
		public void PlayerMissionDtoConverter_fillFrom(AppDto.PlayerMissionDto target, PlayerMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerMissionDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerMissionDto);
			}
			target.missionId = source.missionId;
			target.status = source.status;
			if (source.completions != null) {
				List<AppDto.SubmitDto> items = new List<AppDto.SubmitDto>();
				target.completions = items;
				foreach (GameObjectTypedMessage item in source.completions) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.SubmitDto))
						throw new IOException("parse data error");
					items.Add((AppDto.SubmitDto)result);
				}
			}else{
				List<AppDto.SubmitDto> items = new List<AppDto.SubmitDto>();
				target.completions = items;
			}
			target.acceptTime = source.acceptTime;
		}

		public void PlayerMissionDtoConverter_fillInto(AppDto.PlayerMissionDto source, PlayerMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerMissionDto == null ) {
				target.parentPlayerMissionDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerMissionDto);
			target.missionId=source.missionId;
			target.status=source.status;
			if (source.completions != null){
				foreach(AppDto.SubmitDto completions in source.completions){
					GameObjectTypedMessage msgCompletions = ProtobufUtilsNet.packInto(completions);
					if (msgCompletions == null)
						throw new IOException("pack data error");
					target.completions.Add(msgCompletions);
				}
			}
			target.acceptTime=source.acceptTime;
		}
		public void SubmitDtoConverter_fillFrom(AppDto.SubmitDto target, SubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.dialogId = source.dialogId;
			target.auto = source.auto;
			target.confirm = source.confirm;
			target.needCount = source.needCount;
			target.count = source.count;
			target.finish = source.finish;
			target.index = source.index;
		}

		public void SubmitDtoConverter_fillInto(AppDto.SubmitDto source, SubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.dialogId=source.dialogId;
			target.auto=source.auto;
			target.confirm=source.confirm;
			target.needCount=source.needCount;
			target.count=source.count;
			target.finish=source.finish;
			target.index=source.index;
		}
		public void AcceptConditionConverter_fillFrom(AppDto.AcceptCondition target, AcceptCondition source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAcceptCondition != null ) {
				LogicParamAdapterConverter_fillFrom(target,source.parentAcceptCondition);
			}
			target.id = source.id;
		}

		public void AcceptConditionConverter_fillInto(AppDto.AcceptCondition source, AcceptCondition target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAcceptCondition == null ) {
				target.parentAcceptCondition = new LogicParamAdapter();
			}
			LogicParamAdapterConverter_fillInto(source,target.parentAcceptCondition);
			target.id=source.id;
		}
		public void AcceptionCondtion_1Converter_fillFrom(AppDto.AcceptionCondtion_1 target, AcceptionCondtion_1 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAcceptionCondtion_1 != null ) {
				AcceptConditionConverter_fillFrom(target,source.parentAcceptionCondtion_1);
			}
			target.grade = source.grade;
		}

		public void AcceptionCondtion_1Converter_fillInto(AppDto.AcceptionCondtion_1 source, AcceptionCondtion_1 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAcceptionCondtion_1 == null ) {
				target.parentAcceptionCondtion_1 = new AcceptCondition();
			}
			AcceptConditionConverter_fillInto(source,target.parentAcceptionCondtion_1);
			target.grade=source.grade;
		}
		public void AcceptionCondtion_2Converter_fillFrom(AppDto.AcceptionCondtion_2 target, AcceptionCondtion_2 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAcceptionCondtion_2 != null ) {
				AcceptConditionConverter_fillFrom(target,source.parentAcceptionCondtion_2);
			}
			target.preId = source.preId;
		}

		public void AcceptionCondtion_2Converter_fillInto(AppDto.AcceptionCondtion_2 source, AcceptionCondtion_2 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAcceptionCondtion_2 == null ) {
				target.parentAcceptionCondtion_2 = new AcceptCondition();
			}
			AcceptConditionConverter_fillInto(source,target.parentAcceptionCondtion_2);
			target.preId=source.preId;
		}
		public void SubmitConditionConverter_fillFrom(AppDto.SubmitCondition target, SubmitCondition source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentSubmitCondition != null ) {
				LogicParamAdapterConverter_fillFrom(target,source.parentSubmitCondition);
			}
			target.id = source.id;
			target.dialogId = source.dialogId;
			target.auto = source.auto;
			target.confirm = source.confirm;
		}

		public void SubmitConditionConverter_fillInto(AppDto.SubmitCondition source, SubmitCondition target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentSubmitCondition == null ) {
				target.parentSubmitCondition = new LogicParamAdapter();
			}
			LogicParamAdapterConverter_fillInto(source,target.parentSubmitCondition);
			target.id=source.id;
			target.dialogId=source.dialogId;
			target.auto=source.auto;
			target.confirm=source.confirm;
		}
		public void NpcAppearanceConverter_fillFrom(AppDto.NpcAppearance target, NpcAppearance source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.modelId = source.modelId;
			target.wpmodel = source.wpmodel;
			target.mutateColor = source.mutateColor;
			target.mutateTexture = source.mutateTexture;
			target.scale = source.scale;
			target.ornamentId = source.ornamentId;
		}

		public void NpcAppearanceConverter_fillInto(AppDto.NpcAppearance source, NpcAppearance target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.modelId=source.modelId;
			target.wpmodel=source.wpmodel;
			if(source.mutateColor!=null)
				target.mutateColor = source.mutateColor;
			target.mutateTexture=source.mutateTexture;
			target.scale=source.scale;
			target.ornamentId=source.ornamentId;
		}
		public void NpcInfoDtoConverter_fillFrom(AppDto.NpcInfoDto target, NpcInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.sceneId = source.sceneId;
			target.x = source.x;
			target.z = source.z;
			target.npcAppearanceId = source.npcAppearanceId;
						if (source.playerDressInfo!=null) {
				AppDto.PlayerDressInfo retPlayerDressInfo = new AppDto.PlayerDressInfo();
				PlayerDressInfoConverter_fillFrom(retPlayerDressInfo, source.playerDressInfo);
				target.playerDressInfo = retPlayerDressInfo;
			}
						target.index = source.index;
		}

		public void NpcInfoDtoConverter_fillInto(AppDto.NpcInfoDto source, NpcInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.sceneId=source.sceneId;
			target.x=source.x;
			target.z=source.z;
			target.npcAppearanceId=source.npcAppearanceId;
			if(source.playerDressInfo!=null){
				PlayerDressInfo protobufModel = new PlayerDressInfo();
				PlayerDressInfoConverter_fillInto(source.playerDressInfo, protobufModel);
				target.playerDressInfo = protobufModel;
			}
			target.index=source.index;
		}
		public void PlotConverter_fillFrom(AppDto.Plot target, Plot source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.skipable = source.skipable;
			target.triggerType = source.triggerType;
			target.triggerParam = source.triggerParam;
			if (source.plotEndEvent!=null && source.plotEndEvent is GameObjectTypedMessage) {
				GameObjectTypedMessage itemPlotEndEvent = source.plotEndEvent;
				System.Object objPlotEndEvent = ProtobufUtilsNet.parseFrom(itemPlotEndEvent.message_type_id,itemPlotEndEvent.message_data);
				if (objPlotEndEvent == null)
					throw new IOException("parse data error");
				target.plotEndEvent = (AppDto.PlotEndEvent)objPlotEndEvent;
			}
			target.show = source.show;
		}

		public void PlotConverter_fillInto(AppDto.Plot source, Plot target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.skipable=source.skipable;
			target.triggerType=source.triggerType;
			target.triggerParam=source.triggerParam;
			if(source.plotEndEvent != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.plotEndEvent);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.plotEndEvent = protobufModel;
			}
			target.show=source.show;
		}
		public void PlotEndAcceptMissionEventConverter_fillFrom(AppDto.PlotEndAcceptMissionEvent target, PlotEndAcceptMissionEvent source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlotEndAcceptMissionEvent != null ) {
				PlotEndEventConverter_fillFrom(target,source.parentPlotEndAcceptMissionEvent);
			}
			target.missionId = source.missionId;
		}

		public void PlotEndAcceptMissionEventConverter_fillInto(AppDto.PlotEndAcceptMissionEvent source, PlotEndAcceptMissionEvent target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlotEndAcceptMissionEvent == null ) {
				target.parentPlotEndAcceptMissionEvent = new PlotEndEvent();
			}
			PlotEndEventConverter_fillInto(source,target.parentPlotEndAcceptMissionEvent);
			target.missionId=source.missionId;
		}
		public void PlotEndBattleEventConverter_fillFrom(AppDto.PlotEndBattleEvent target, PlotEndBattleEvent source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlotEndBattleEvent != null ) {
				PlotEndEventConverter_fillFrom(target,source.parentPlotEndBattleEvent);
			}
			target.tollgateId = source.tollgateId;
		}

		public void PlotEndBattleEventConverter_fillInto(AppDto.PlotEndBattleEvent source, PlotEndBattleEvent target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlotEndBattleEvent == null ) {
				target.parentPlotEndBattleEvent = new PlotEndEvent();
			}
			PlotEndEventConverter_fillInto(source,target.parentPlotEndBattleEvent);
			target.tollgateId=source.tollgateId;
		}
		public void PlotEndEnterSceneEventConverter_fillFrom(AppDto.PlotEndEnterSceneEvent target, PlotEndEnterSceneEvent source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlotEndEnterSceneEvent != null ) {
				PlotEndEventConverter_fillFrom(target,source.parentPlotEndEnterSceneEvent);
			}
			target.sceneId = source.sceneId;
			target.x = source.x;
			target.z = source.z;
		}

		public void PlotEndEnterSceneEventConverter_fillInto(AppDto.PlotEndEnterSceneEvent source, PlotEndEnterSceneEvent target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlotEndEnterSceneEvent == null ) {
				target.parentPlotEndEnterSceneEvent = new PlotEndEvent();
			}
			PlotEndEventConverter_fillInto(source,target.parentPlotEndEnterSceneEvent);
			target.sceneId=source.sceneId;
			target.x=source.x;
			target.z=source.z;
		}
		public void PlotEndEventConverter_fillFrom(AppDto.PlotEndEvent target, PlotEndEvent source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlotEndEvent != null ) {
				LogicParamAdapterConverter_fillFrom(target,source.parentPlotEndEvent);
			}
			target.id = source.id;
		}

		public void PlotEndEventConverter_fillInto(AppDto.PlotEndEvent source, PlotEndEvent target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlotEndEvent == null ) {
				target.parentPlotEndEvent = new LogicParamAdapter();
			}
			LogicParamAdapterConverter_fillInto(source,target.parentPlotEndEvent);
			target.id=source.id;
		}
		public void PlotEndPlotEventConverter_fillFrom(AppDto.PlotEndPlotEvent target, PlotEndPlotEvent source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlotEndPlotEvent != null ) {
				PlotEndEventConverter_fillFrom(target,source.parentPlotEndPlotEvent);
			}
			target.plotId = source.plotId;
		}

		public void PlotEndPlotEventConverter_fillInto(AppDto.PlotEndPlotEvent source, PlotEndPlotEvent target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlotEndPlotEvent == null ) {
				target.parentPlotEndPlotEvent = new PlotEndEvent();
			}
			PlotEndEventConverter_fillInto(source,target.parentPlotEndPlotEvent);
			target.plotId=source.plotId;
		}
		public void TalkSubmitDtoConverter_fillFrom(AppDto.TalkSubmitDto target, TalkSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTalkSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentTalkSubmitDto);
			}
						if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
					}

		public void TalkSubmitDtoConverter_fillInto(AppDto.TalkSubmitDto source, TalkSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTalkSubmitDto == null ) {
				target.parentTalkSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentTalkSubmitDto);
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
		}
		public void ItemDtoConverter_fillFrom(AppDto.ItemDto target, ItemDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemId = source.itemId;
			target.count = source.count;
			target.circulationType = source.circulationType;
		}

		public void ItemDtoConverter_fillInto(AppDto.ItemDto source, ItemDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemId=source.itemId;
			target.count=source.count;
			target.circulationType=source.circulationType;
		}
		public void MissionCleanNotifyConverter_fillFrom(AppDto.MissionCleanNotify target, MissionCleanNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionId = source.missionId;
		}

		public void MissionCleanNotifyConverter_fillInto(AppDto.MissionCleanNotify source, MissionCleanNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionId=source.missionId;
		}
		public void PlayerBranchMissionDtoConverter_fillFrom(AppDto.PlayerBranchMissionDto target, PlayerBranchMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerBranchMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerBranchMissionDto);
			}
		}

		public void PlayerBranchMissionDtoConverter_fillInto(AppDto.PlayerBranchMissionDto source, PlayerBranchMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerBranchMissionDto == null ) {
				target.parentPlayerBranchMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerBranchMissionDto);
		}
		public void PlayerMasterMissionDtoConverter_fillFrom(AppDto.PlayerMasterMissionDto target, PlayerMasterMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerMasterMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerMasterMissionDto);
			}
		}

		public void PlayerMasterMissionDtoConverter_fillInto(AppDto.PlayerMasterMissionDto source, PlayerMasterMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerMasterMissionDto == null ) {
				target.parentPlayerMasterMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerMasterMissionDto);
		}
		public void PlayerMissionNotifyConverter_fillFrom(AppDto.PlayerMissionNotify target, PlayerMissionNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.playerMissionDto!=null && source.playerMissionDto is GameObjectTypedMessage) {
				GameObjectTypedMessage itemPlayerMissionDto = source.playerMissionDto;
				System.Object objPlayerMissionDto = ProtobufUtilsNet.parseFrom(itemPlayerMissionDto.message_type_id,itemPlayerMissionDto.message_data);
				if (objPlayerMissionDto == null)
					throw new IOException("parse data error");
				target.playerMissionDto = (AppDto.PlayerMissionDto)objPlayerMissionDto;
			}
		}

		public void PlayerMissionNotifyConverter_fillInto(AppDto.PlayerMissionNotify source, PlayerMissionNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.playerMissionDto != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.playerMissionDto);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.playerMissionDto = protobufModel;
			}
		}
		public void ShopTypeConverter_fillFrom(AppDto.ShopType target, ShopType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.description = source.description;
		}

		public void ShopTypeConverter_fillInto(AppDto.ShopType source, ShopType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.description!=null)
				target.description = source.description;
		}
		public void QuartzStrengMaterialConverter_fillFrom(AppDto.QuartzStrengMaterial target, QuartzStrengMaterial source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.quality = source.quality;
			target.count = source.count;
		}

		public void QuartzStrengMaterialConverter_fillInto(AppDto.QuartzStrengMaterial source, QuartzStrengMaterial target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.quality=source.quality;
			target.count=source.count;
		}
		public void ExchangeCurrencyConverter_fillFrom(AppDto.ExchangeCurrency target, ExchangeCurrency source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.convert != null) {
				List<AppDto.ExchangeRate> items = new List<AppDto.ExchangeRate>();
				target.convert = items;
				foreach (ExchangeRate item in source.convert) {
					AppDto.ExchangeRate result = new AppDto.ExchangeRate();
					ExchangeRateConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ExchangeRate> items = new List<AppDto.ExchangeRate>();
				target.convert = items;
			}
			target.restrictRule = source.restrictRule;
			if (source.selfChange != null) {
				List<int> items = new List<int>();
				target.selfChange = items;
				foreach (int item in source.selfChange)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.selfChange = items;
			}
		}

		public void ExchangeCurrencyConverter_fillInto(AppDto.ExchangeCurrency source, ExchangeCurrency target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.convert != null){
				foreach(AppDto.ExchangeRate convert in source.convert){
					ExchangeRate protobufModel = new ExchangeRate();
					ExchangeRateConverter_fillInto(convert, protobufModel);
					target.convert.Add(protobufModel);
				}
			}
			target.restrictRule=source.restrictRule;
			if (source.selfChange != null){
				foreach(int selfChange in source.selfChange)
					target.selfChange.Add(selfChange);
			}
		}
		public void ExchangeRateConverter_fillFrom(AppDto.ExchangeRate target, ExchangeRate source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.count = source.count;
		}

		public void ExchangeRateConverter_fillInto(AppDto.ExchangeRate source, ExchangeRate target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.count=source.count;
		}
		public void MissionStatDtoConverter_fillFrom(AppDto.MissionStatDto target, MissionStatDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionType = source.missionType;
			target.dailyAccept = source.dailyAccept;
			target.weeklyAccept = source.weeklyAccept;
			target.daily = source.daily;
			target.total = source.total;
			target.weekly = source.weekly;
		}

		public void MissionStatDtoConverter_fillInto(AppDto.MissionStatDto source, MissionStatDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionType=source.missionType;
			target.dailyAccept=source.dailyAccept;
			target.weeklyAccept=source.weeklyAccept;
			target.daily=source.daily;
			target.total=source.total;
			target.weekly=source.weekly;
		}
		public void PlayerMissionListDtoConverter_fillFrom(AppDto.PlayerMissionListDto target, PlayerMissionListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerMissionListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerMissionListDto);
			}
			if (source.bodyMissions != null) {
				List<AppDto.PlayerMissionDto> items = new List<AppDto.PlayerMissionDto>();
				target.bodyMissions = items;
				foreach (GameObjectTypedMessage item in source.bodyMissions) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.PlayerMissionDto))
						throw new IOException("parse data error");
					items.Add((AppDto.PlayerMissionDto)result);
				}
			}else{
				List<AppDto.PlayerMissionDto> items = new List<AppDto.PlayerMissionDto>();
				target.bodyMissions = items;
			}
			if (source.submitMissionIds != null) {
				List<int> items = new List<int>();
				target.submitMissionIds = items;
                foreach (int item in source.submitMissionIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.submitMissionIds = items;
			}
			if (source.missionStat != null) {
				List<AppDto.MissionStatDto> items = new List<AppDto.MissionStatDto>();
				target.missionStat = items;
				foreach (MissionStatDto item in source.missionStat) {
					AppDto.MissionStatDto result = new AppDto.MissionStatDto();
					MissionStatDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.MissionStatDto> items = new List<AppDto.MissionStatDto>();
				target.missionStat = items;
			}
			if (source.records != null) {
				List<int> items = new List<int>();
				target.records = items;
                foreach (int item in source.records)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.records = items;
			}
			target.ghostRingCount = source.ghostRingCount;
		}

		public void PlayerMissionListDtoConverter_fillInto(AppDto.PlayerMissionListDto source, PlayerMissionListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerMissionListDto == null ) {
				target.parentPlayerMissionListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerMissionListDto);
			if (source.bodyMissions != null){
				foreach(AppDto.PlayerMissionDto bodyMissions in source.bodyMissions){
					GameObjectTypedMessage msgBodyMissions = ProtobufUtilsNet.packInto(bodyMissions);
					if (msgBodyMissions == null)
						throw new IOException("pack data error");
					target.bodyMissions.Add(msgBodyMissions);
				}
			}
			if (source.submitMissionIds != null){
				foreach(int submitMissionIds in source.submitMissionIds)
					target.submitMissionIds.Add(submitMissionIds);
			}
			if (source.missionStat != null){
				foreach(AppDto.MissionStatDto missionStat in source.missionStat){
					MissionStatDto protobufModel = new MissionStatDto();
					MissionStatDtoConverter_fillInto(missionStat, protobufModel);
					target.missionStat.Add(protobufModel);
				}
			}
			if (source.records != null){
				foreach(int records in source.records)
					target.records.Add(records);
			}
			target.ghostRingCount=source.ghostRingCount;
		}
		public void ShowMonsterSubmitDtoConverter_fillFrom(AppDto.ShowMonsterSubmitDto target, ShowMonsterSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentShowMonsterSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentShowMonsterSubmitDto);
			}
						if (source.acceptNpc!=null) {
				AppDto.NpcInfoDto retAcceptNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retAcceptNpc, source.acceptNpc);
				target.acceptNpc = retAcceptNpc;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
						target.tollgateId = source.tollgateId;
		}

		public void ShowMonsterSubmitDtoConverter_fillInto(AppDto.ShowMonsterSubmitDto source, ShowMonsterSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentShowMonsterSubmitDto == null ) {
				target.parentShowMonsterSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentShowMonsterSubmitDto);
			if(source.acceptNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.acceptNpc, protobufModel);
				target.acceptNpc = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
			target.tollgateId=source.tollgateId;
		}
		public void NpcStaticGroupConverter_fillFrom(AppDto.NpcStaticGroup target, NpcStaticGroup source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.npcCondition != null) {
				List<int> items = new List<int>();
				target.npcCondition = items;
				foreach (int item in source.npcCondition)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.npcCondition = items;
			}
		}

		public void NpcStaticGroupConverter_fillInto(AppDto.NpcStaticGroup source, NpcStaticGroup target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.npcCondition != null){
				foreach(int npcCondition in source.npcCondition)
					target.npcCondition.Add(npcCondition);
			}
		}
		public void CrewChipDtoConverter_fillFrom(AppDto.CrewChipDto target, CrewChipDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewChipDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewChipDto);
			}
			target.chipId = source.chipId;
			target.chipAmount = source.chipAmount;
			target.conversion = source.conversion;
			target.rare = source.rare;
		}

		public void CrewChipDtoConverter_fillInto(AppDto.CrewChipDto source, CrewChipDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewChipDto == null ) {
				target.parentCrewChipDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewChipDto);
			target.chipId=source.chipId;
			target.chipAmount=source.chipAmount;
			target.conversion=source.conversion;
			target.rare=source.rare;
		}
		public void CollectionItemSubmitDtoConverter_fillFrom(AppDto.CollectionItemSubmitDto target, CollectionItemSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCollectionItemSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentCollectionItemSubmitDto);
			}
			target.itemId = source.itemId;
						if (source.acceptNpc!=null) {
				AppDto.NpcInfoDto retAcceptNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retAcceptNpc, source.acceptNpc);
				target.acceptNpc = retAcceptNpc;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
					}

		public void CollectionItemSubmitDtoConverter_fillInto(AppDto.CollectionItemSubmitDto source, CollectionItemSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCollectionItemSubmitDto == null ) {
				target.parentCollectionItemSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentCollectionItemSubmitDto);
			target.itemId=source.itemId;
			if(source.acceptNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.acceptNpc, protobufModel);
				target.acceptNpc = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
		}
		public void ItemNpcRelationConverter_fillFrom(AppDto.ItemNpcRelation target, ItemNpcRelation source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.npcId = source.npcId;
			target.shopCategory = source.shopCategory;
		}

		public void ItemNpcRelationConverter_fillInto(AppDto.ItemNpcRelation source, ItemNpcRelation target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.npcId=source.npcId;
			target.shopCategory=source.shopCategory;
		}
		public void ItemStaticGroupConverter_fillFrom(AppDto.ItemStaticGroup target, ItemStaticGroup source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.itemCondition != null) {
				List<AppDto.ItemStaticParam> items = new List<AppDto.ItemStaticParam>();
				target.itemCondition = items;
				foreach (ItemStaticParam item in source.itemCondition) {
					AppDto.ItemStaticParam result = new AppDto.ItemStaticParam();
					ItemStaticParamConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemStaticParam> items = new List<AppDto.ItemStaticParam>();
				target.itemCondition = items;
			}
		}

		public void ItemStaticGroupConverter_fillInto(AppDto.ItemStaticGroup source, ItemStaticGroup target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.itemCondition != null){
				foreach(AppDto.ItemStaticParam itemCondition in source.itemCondition){
					ItemStaticParam protobufModel = new ItemStaticParam();
					ItemStaticParamConverter_fillInto(itemCondition, protobufModel);
					target.itemCondition.Add(protobufModel);
				}
			}
		}
		public void ItemStaticParamConverter_fillFrom(AppDto.ItemStaticParam target, ItemStaticParam source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemId = source.itemId;
			target.minCount = source.minCount;
			target.maxCount = source.maxCount;
		}

		public void ItemStaticParamConverter_fillInto(AppDto.ItemStaticParam source, ItemStaticParam target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemId=source.itemId;
			target.minCount=source.minCount;
			target.maxCount=source.maxCount;
		}
		public void EmbedPhaseConverter_fillFrom(AppDto.EmbedPhase target, EmbedPhase source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.phase = source.phase;
			target.condition = source.condition;
			target.propertty = source.propertty;
		}

		public void EmbedPhaseConverter_fillInto(AppDto.EmbedPhase source, EmbedPhase target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.phase=source.phase;
			if(source.condition!=null)
				target.condition = source.condition;
			if(source.propertty!=null)
				target.propertty = source.propertty;
		}
		public void PropsParam_1Converter_fillFrom(AppDto.PropsParam_1 target, PropsParam_1 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.partTypes != null) {
				List<int> items = new List<int>();
				target.partTypes = items;
				foreach (int item in source.partTypes)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.partTypes = items;
			}
			target.caId = source.caId;
			target.value = source.value;
			if ( source.parentPropsParam_1 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_1);
			}
		}

		public void PropsParam_1Converter_fillInto(AppDto.PropsParam_1 source, PropsParam_1 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.partTypes != null){
				foreach(int partTypes in source.partTypes)
					target.partTypes.Add(partTypes);
			}
			target.caId=source.caId;
			target.value=source.value;
			if ( target.parentPropsParam_1 == null ) {
				target.parentPropsParam_1 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_1);
		}
		public void AssistSkillConverter_fillFrom(AppDto.AssistSkill target, AssistSkill source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.description = source.description;
			target.memo = source.memo;
			target.icon = source.icon;
			target.levelLimit = source.levelLimit;
			target.usageDesc = source.usageDesc;
			target.learnLevel = source.learnLevel;
			target.skillLevelUpperLimit = source.skillLevelUpperLimit;
			target.defeatedItemId = source.defeatedItemId;
			target.forgetPayBackRatio = source.forgetPayBackRatio;
			target.forgetConsumeItemId = source.forgetConsumeItemId;
			if (source.forgetPayBackItemId != null) {
				List<int> items = new List<int>();
				target.forgetPayBackItemId = items;
				foreach (int item in source.forgetPayBackItemId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.forgetPayBackItemId = items;
			}
		}

		public void AssistSkillConverter_fillInto(AppDto.AssistSkill source, AssistSkill target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.description!=null)
				target.description = source.description;
			if(source.memo!=null)
				target.memo = source.memo;
			if(source.icon!=null)
				target.icon = source.icon;
			target.levelLimit=source.levelLimit;
			if(source.usageDesc!=null)
				target.usageDesc = source.usageDesc;
			target.learnLevel=source.learnLevel;
			target.skillLevelUpperLimit=source.skillLevelUpperLimit;
			target.defeatedItemId=source.defeatedItemId;
			target.forgetPayBackRatio=source.forgetPayBackRatio;
			target.forgetConsumeItemId=source.forgetConsumeItemId;
			if (source.forgetPayBackItemId != null){
				foreach(int forgetPayBackItemId in source.forgetPayBackItemId)
					target.forgetPayBackItemId.Add(forgetPayBackItemId);
			}
		}
		public void PlayerDressInfoDtoConverter_fillFrom(AppDto.PlayerDressInfoDto target, PlayerDressInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.wpmodel = source.wpmodel;
			target.dressDyeId = source.dressDyeId;
			target.hairDyeId = source.hairDyeId;
			target.accoutermentDyeId = source.accoutermentDyeId;
			target.showDress = source.showDress;
			if (source.fashionDressIds != null) {
				List<int> items = new List<int>();
				target.fashionDressIds = items;
				foreach (int item in source.fashionDressIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.fashionDressIds = items;
			}
			target.weaponEffect = source.weaponEffect;
			target.hallowSpriteId = source.hallowSpriteId;
			target.wingId = source.wingId;
		}

		public void PlayerDressInfoDtoConverter_fillInto(AppDto.PlayerDressInfoDto source, PlayerDressInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.wpmodel=source.wpmodel;
			target.dressDyeId=source.dressDyeId;
			target.hairDyeId=source.hairDyeId;
			target.accoutermentDyeId=source.accoutermentDyeId;
			target.showDress=source.showDress;
			if (source.fashionDressIds != null){
				foreach(int fashionDressIds in source.fashionDressIds)
					target.fashionDressIds.Add(fashionDressIds);
			}
			target.weaponEffect=source.weaponEffect;
			target.hallowSpriteId=source.hallowSpriteId;
			target.wingId=source.wingId;
		}
		public void AppMissionItemConverter_fillFrom(AppDto.AppMissionItem target, AppMissionItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.usedTip = source.usedTip;
			target.finishTip = source.finishTip;
			target.dialogFlag = source.dialogFlag;
			if (source.finishDialog != null) {
				List<string> items = new List<string>();
				target.finishDialog = items;
				foreach (string item in source.finishDialog)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.finishDialog = items;
			}
			if ( source.parentAppMissionItem != null ) {
				VirtualItemConverter_fillFrom(target,source.parentAppMissionItem);
			}
			target.itemType = source.itemType;
			target.quality = source.quality;
		}

		public void AppMissionItemConverter_fillInto(AppDto.AppMissionItem source, AppMissionItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.usedTip!=null)
				target.usedTip = source.usedTip;
			if(source.finishTip!=null)
				target.finishTip = source.finishTip;
			target.dialogFlag=source.dialogFlag;
			if (source.finishDialog != null){
				foreach(string finishDialog in source.finishDialog)
					target.finishDialog.Add(finishDialog);
			}
			if ( target.parentAppMissionItem == null ) {
				target.parentAppMissionItem = new VirtualItem();
			}
			VirtualItemConverter_fillInto(source,target.parentAppMissionItem);
			target.itemType=source.itemType;
			target.quality=source.quality;
		}
		public void AssistSkillGradeConsumeConverter_fillFrom(AppDto.AssistSkillGradeConsume target, AssistSkillGradeConsume source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.forgetConsume = source.forgetConsume;
			if (source.orbmentTechnolgyMakeConsume != null) {
				List<int> items = new List<int>();
				target.orbmentTechnolgyMakeConsume = items;
				foreach (int item in source.orbmentTechnolgyMakeConsume)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.orbmentTechnolgyMakeConsume = items;
			}
			if (source.studyConsumeItem != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.studyConsumeItem = items;
				foreach (ItemDto item in source.studyConsumeItem) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.studyConsumeItem = items;
			}
			if (source.makeVirtualConsumeItem != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.makeVirtualConsumeItem = items;
				foreach (ItemDto item in source.makeVirtualConsumeItem) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.makeVirtualConsumeItem = items;
			}
		}

		public void AssistSkillGradeConsumeConverter_fillInto(AppDto.AssistSkillGradeConsume source, AssistSkillGradeConsume target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.forgetConsume=source.forgetConsume;
			if (source.orbmentTechnolgyMakeConsume != null){
				foreach(int orbmentTechnolgyMakeConsume in source.orbmentTechnolgyMakeConsume)
					target.orbmentTechnolgyMakeConsume.Add(orbmentTechnolgyMakeConsume);
			}
			if (source.studyConsumeItem != null){
				foreach(AppDto.ItemDto studyConsumeItem in source.studyConsumeItem){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(studyConsumeItem, protobufModel);
					target.studyConsumeItem.Add(protobufModel);
				}
			}
			if (source.makeVirtualConsumeItem != null){
				foreach(AppDto.ItemDto makeVirtualConsumeItem in source.makeVirtualConsumeItem){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(makeVirtualConsumeItem, protobufModel);
					target.makeVirtualConsumeItem.Add(protobufModel);
				}
			}
		}
		public void AssistSkillMakeConsumeConverter_fillFrom(AppDto.AssistSkillMakeConsume target, AssistSkillMakeConsume source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.skillId = source.skillId;
			target.name = source.name;
			if (source.gradeMaitchItem != null) {
				List<AppDto.AssistSkillGradeMaitchItem> items = new List<AppDto.AssistSkillGradeMaitchItem>();
				target.gradeMaitchItem = items;
				foreach (AssistSkillGradeMaitchItem item in source.gradeMaitchItem) {
					AppDto.AssistSkillGradeMaitchItem result = new AppDto.AssistSkillGradeMaitchItem();
					AssistSkillGradeMaitchItemConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.AssistSkillGradeMaitchItem> items = new List<AppDto.AssistSkillGradeMaitchItem>();
				target.gradeMaitchItem = items;
			}
			if (source.materials != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.materials = items;
				foreach (ItemDto item in source.materials) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.materials = items;
			}
			target.icon = source.icon;
		}

		public void AssistSkillMakeConsumeConverter_fillInto(AppDto.AssistSkillMakeConsume source, AssistSkillMakeConsume target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.skillId=source.skillId;
			if(source.name!=null)
				target.name = source.name;
			if (source.gradeMaitchItem != null){
				foreach(AppDto.AssistSkillGradeMaitchItem gradeMaitchItem in source.gradeMaitchItem){
					AssistSkillGradeMaitchItem protobufModel = new AssistSkillGradeMaitchItem();
					AssistSkillGradeMaitchItemConverter_fillInto(gradeMaitchItem, protobufModel);
					target.gradeMaitchItem.Add(protobufModel);
				}
			}
			if (source.materials != null){
				foreach(AppDto.ItemDto materials in source.materials){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(materials, protobufModel);
					target.materials.Add(protobufModel);
				}
			}
			if(source.icon!=null)
				target.icon = source.icon;
		}
		public void AssistSkillDtoConverter_fillFrom(AppDto.AssistSkillDto target, AssistSkillDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAssistSkillDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAssistSkillDto);
			}
			target.id = source.id;
			target.level = source.level;
			target.studyCount = source.studyCount;
		}

		public void AssistSkillDtoConverter_fillInto(AppDto.AssistSkillDto source, AssistSkillDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAssistSkillDto == null ) {
				target.parentAssistSkillDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAssistSkillDto);
			target.id=source.id;
			target.level=source.level;
			target.studyCount=source.studyCount;
		}
		public void MedallionPropsConverter_fillFrom(AppDto.MedallionProps target, MedallionProps source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentMedallionProps != null ) {
				AppItemConverter_fillFrom(target,source.parentMedallionProps);
			}
			target.capacity = source.capacity;
			target.hole = source.hole;
			target.minGrade = source.minGrade;
		}

		public void MedallionPropsConverter_fillInto(AppDto.MedallionProps source, MedallionProps target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentMedallionProps == null ) {
				target.parentMedallionProps = new AppItem();
			}
			AppItemConverter_fillInto(source,target.parentMedallionProps);
			target.capacity=source.capacity;
			target.hole=source.hole;
			target.minGrade=source.minGrade;
		}
		public void EngraveDtoConverter_fillFrom(AppDto.EngraveDto target, EngraveDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEngraveDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEngraveDto);
			}
			target.itemId = source.itemId;
			target.occupation = source.occupation;
			target.effect = source.effect;
		}

		public void EngraveDtoConverter_fillInto(AppDto.EngraveDto source, EngraveDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEngraveDto == null ) {
				target.parentEngraveDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEngraveDto);
			target.itemId=source.itemId;
			target.occupation=source.occupation;
			target.effect=source.effect;
		}
		public void MedallionDtoConverter_fillFrom(AppDto.MedallionDto target, MedallionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentMedallionDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentMedallionDto);
			}
			target.itemId = source.itemId;
			if (source.engraves != null) {
				List<AppDto.EngraveDto> items = new List<AppDto.EngraveDto>();
				target.engraves = items;
				foreach (EngraveDto item in source.engraves) {
					AppDto.EngraveDto result = new AppDto.EngraveDto();
					EngraveDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.EngraveDto> items = new List<AppDto.EngraveDto>();
				target.engraves = items;
			}
		}

		public void MedallionDtoConverter_fillInto(AppDto.MedallionDto source, MedallionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentMedallionDto == null ) {
				target.parentMedallionDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentMedallionDto);
			target.itemId=source.itemId;
			if (source.engraves != null){
				foreach(AppDto.EngraveDto engraves in source.engraves){
					EngraveDto protobufModel = new EngraveDto();
					EngraveDtoConverter_fillInto(engraves, protobufModel);
					target.engraves.Add(protobufModel);
				}
			}
		}
		public void PropsParam_3Converter_fillFrom(AppDto.PropsParam_3 target, PropsParam_3 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_3 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_3);
			}
			target.type = source.type;
			target.cpId = source.cpId;
			target.omin = source.omin;
			target.omax = source.omax;
			target.emin = source.emin;
			target.emax = source.emax;
		}

		public void PropsParam_3Converter_fillInto(AppDto.PropsParam_3 source, PropsParam_3 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_3 == null ) {
				target.parentPropsParam_3 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_3);
			target.type=source.type;
			target.cpId=source.cpId;
			target.omin=source.omin;
			target.omax=source.omax;
			target.emin=source.emin;
			target.emax=source.emax;
		}
		public void EmbedHoleDtoConverter_fillFrom(AppDto.EmbedHoleDto target, EmbedHoleDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.partId = source.partId;
			if ( source.parentEmbedHoleDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEmbedHoleDto);
			}
			if (source.apertures != null) {
				List<AppDto.EmbedApertureDto> items = new List<AppDto.EmbedApertureDto>();
				target.apertures = items;
				foreach (EmbedApertureDto item in source.apertures) {
					AppDto.EmbedApertureDto result = new AppDto.EmbedApertureDto();
					EmbedApertureDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.EmbedApertureDto> items = new List<AppDto.EmbedApertureDto>();
				target.apertures = items;
			}
		}

		public void EmbedHoleDtoConverter_fillInto(AppDto.EmbedHoleDto source, EmbedHoleDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.partId=source.partId;
			if ( target.parentEmbedHoleDto == null ) {
				target.parentEmbedHoleDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEmbedHoleDto);
			if (source.apertures != null){
				foreach(AppDto.EmbedApertureDto apertures in source.apertures){
					EmbedApertureDto protobufModel = new EmbedApertureDto();
					EmbedApertureDtoConverter_fillInto(apertures, protobufModel);
					target.apertures.Add(protobufModel);
				}
			}
		}
		public void EmbedHolesDtoConverter_fillFrom(AppDto.EmbedHolesDto target, EmbedHolesDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.ehDto != null) {
				List<AppDto.EmbedHoleDto> items = new List<AppDto.EmbedHoleDto>();
				target.ehDto = items;
				foreach (EmbedHoleDto item in source.ehDto) {
					AppDto.EmbedHoleDto result = new AppDto.EmbedHoleDto();
					EmbedHoleDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.EmbedHoleDto> items = new List<AppDto.EmbedHoleDto>();
				target.ehDto = items;
			}
			if ( source.parentEmbedHolesDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEmbedHolesDto);
			}
			target.ephaseId = source.ephaseId;
			target.curephaseId = source.curephaseId;
		}

		public void EmbedHolesDtoConverter_fillInto(AppDto.EmbedHolesDto source, EmbedHolesDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.ehDto != null){
				foreach(AppDto.EmbedHoleDto ehDto in source.ehDto){
					EmbedHoleDto protobufModel = new EmbedHoleDto();
					EmbedHoleDtoConverter_fillInto(ehDto, protobufModel);
					target.ehDto.Add(protobufModel);
				}
			}
			if ( target.parentEmbedHolesDto == null ) {
				target.parentEmbedHolesDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEmbedHolesDto);
			target.ephaseId=source.ephaseId;
			target.curephaseId=source.curephaseId;
		}
		public void AssistSkillMakeDtoConverter_fillFrom(AppDto.AssistSkillMakeDto target, AssistSkillMakeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAssistSkillMakeDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAssistSkillMakeDto);
			}
			if (source.items != null) {
				List<AppDto.AssistSkillMakeItemDto> items = new List<AppDto.AssistSkillMakeItemDto>();
				target.items = items;
				foreach (AssistSkillMakeItemDto item in source.items) {
					AppDto.AssistSkillMakeItemDto result = new AppDto.AssistSkillMakeItemDto();
					AssistSkillMakeItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.AssistSkillMakeItemDto> items = new List<AppDto.AssistSkillMakeItemDto>();
				target.items = items;
			}
		}

		public void AssistSkillMakeDtoConverter_fillInto(AppDto.AssistSkillMakeDto source, AssistSkillMakeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAssistSkillMakeDto == null ) {
				target.parentAssistSkillMakeDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAssistSkillMakeDto);
			if (source.items != null){
				foreach(AppDto.AssistSkillMakeItemDto items in source.items){
					AssistSkillMakeItemDto protobufModel = new AssistSkillMakeItemDto();
					AssistSkillMakeItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void ApplyItemSubmitDtoConverter_fillFrom(AppDto.ApplyItemSubmitDto target, ApplyItemSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentApplyItemSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentApplyItemSubmitDto);
			}
			target.acceptRadius = source.acceptRadius;
			target.itemId = source.itemId;
						if (source.acceptScene!=null) {
				AppDto.SceneInfoDto retAcceptScene = new AppDto.SceneInfoDto();
				SceneInfoDtoConverter_fillFrom(retAcceptScene, source.acceptScene);
				target.acceptScene = retAcceptScene;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
					}

		public void ApplyItemSubmitDtoConverter_fillInto(AppDto.ApplyItemSubmitDto source, ApplyItemSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentApplyItemSubmitDto == null ) {
				target.parentApplyItemSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentApplyItemSubmitDto);
			target.acceptRadius=source.acceptRadius;
			target.itemId=source.itemId;
			if(source.acceptScene!=null){
				SceneInfoDto protobufModel = new SceneInfoDto();
				SceneInfoDtoConverter_fillInto(source.acceptScene, protobufModel);
				target.acceptScene = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
		}
		public void SceneAppearanceStaticGroupConverter_fillFrom(AppDto.SceneAppearanceStaticGroup target, SceneAppearanceStaticGroup source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.sceneAppearanceIds != null) {
				List<int> items = new List<int>();
				target.sceneAppearanceIds = items;
				foreach (int item in source.sceneAppearanceIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.sceneAppearanceIds = items;
			}
		}

		public void SceneAppearanceStaticGroupConverter_fillInto(AppDto.SceneAppearanceStaticGroup source, SceneAppearanceStaticGroup target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.sceneAppearanceIds != null){
				foreach(int sceneAppearanceIds in source.sceneAppearanceIds)
					target.sceneAppearanceIds.Add(sceneAppearanceIds);
			}
		}
		public void NpcMonsterConverter_fillFrom(AppDto.NpcMonster target, NpcMonster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcMonster != null ) {
				NpcVariableConverter_fillFrom(target,source.parentNpcMonster);
			}
		}

		public void NpcMonsterConverter_fillInto(AppDto.NpcMonster source, NpcMonster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcMonster == null ) {
				target.parentNpcMonster = new NpcVariable();
			}
			NpcVariableConverter_fillInto(source,target.parentNpcMonster);
		}
		public void NpcVariableConverter_fillFrom(AppDto.NpcVariable target, NpcVariable source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcVariable != null ) {
				NpcConverter_fillFrom(target,source.parentNpcVariable);
			}
			target.refreshCycle = source.refreshCycle;
			target.lifeTime = source.lifeTime;
			target.wpmodel = source.wpmodel;
			target.announcementId = source.announcementId;
			target.tollgateId = source.tollgateId;
			target.reuse = source.reuse;
			target.title = source.title;
		}

		public void NpcVariableConverter_fillInto(AppDto.NpcVariable source, NpcVariable target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcVariable == null ) {
				target.parentNpcVariable = new Npc();
			}
			NpcConverter_fillInto(source,target.parentNpcVariable);
			target.refreshCycle=source.refreshCycle;
			target.lifeTime=source.lifeTime;
			target.wpmodel=source.wpmodel;
			target.announcementId=source.announcementId;
			target.tollgateId=source.tollgateId;
			target.reuse=source.reuse;
			if(source.title!=null)
				target.title = source.title;
		}
		public void SceneInfoDtoConverter_fillFrom(AppDto.SceneInfoDto target, SceneInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.x = source.x;
			target.z = source.z;
		}

		public void SceneInfoDtoConverter_fillInto(AppDto.SceneInfoDto source, SceneInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.x=source.x;
			target.z=source.z;
		}
		public void EmbedApertureDtoConverter_fillFrom(AppDto.EmbedApertureDto target, EmbedApertureDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.apId = source.apId;
			target.embedItemId = source.embedItemId;
			if ( source.parentEmbedApertureDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEmbedApertureDto);
			}
		}

		public void EmbedApertureDtoConverter_fillInto(AppDto.EmbedApertureDto source, EmbedApertureDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.apId=source.apId;
			target.embedItemId=source.embedItemId;
			if ( target.parentEmbedApertureDto == null ) {
				target.parentEmbedApertureDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEmbedApertureDto);
		}
		public void PickItemSubmitInfoDtoConverter_fillFrom(AppDto.PickItemSubmitInfoDto target, PickItemSubmitInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPickItemSubmitInfoDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentPickItemSubmitInfoDto);
			}
			target.itemId = source.itemId;
						if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
						if (source.pickNpcs != null) {
				List<AppDto.PickItemPointDto> items = new List<AppDto.PickItemPointDto>();
				target.pickNpcs = items;
				foreach (PickItemPointDto item in source.pickNpcs) {
					AppDto.PickItemPointDto result = new AppDto.PickItemPointDto();
					PickItemPointDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.PickItemPointDto> items = new List<AppDto.PickItemPointDto>();
				target.pickNpcs = items;
			}
		}

		public void PickItemSubmitInfoDtoConverter_fillInto(AppDto.PickItemSubmitInfoDto source, PickItemSubmitInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPickItemSubmitInfoDto == null ) {
				target.parentPickItemSubmitInfoDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentPickItemSubmitInfoDto);
			target.itemId=source.itemId;
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
			if (source.pickNpcs != null){
				foreach(AppDto.PickItemPointDto pickNpcs in source.pickNpcs){
					PickItemPointDto protobufModel = new PickItemPointDto();
					PickItemPointDtoConverter_fillInto(pickNpcs, protobufModel);
					target.pickNpcs.Add(protobufModel);
				}
			}
		}
		public void PlayerMissionFinishNotifyConverter_fillFrom(AppDto.PlayerMissionFinishNotify target, PlayerMissionFinishNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionId = source.missionId;
		}

		public void PlayerMissionFinishNotifyConverter_fillInto(AppDto.PlayerMissionFinishNotify source, PlayerMissionFinishNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionId=source.missionId;
		}
		public void UpgradeSubmitDtoConverter_fillFrom(AppDto.UpgradeSubmitDto target, UpgradeSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentUpgradeSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentUpgradeSubmitDto);
			}
			target.upgradeType = source.upgradeType;
			target.grade = source.grade;
		}

		public void UpgradeSubmitDtoConverter_fillInto(AppDto.UpgradeSubmitDto source, UpgradeSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentUpgradeSubmitDto == null ) {
				target.parentUpgradeSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentUpgradeSubmitDto);
			target.upgradeType=source.upgradeType;
			target.grade=source.grade;
		}
		public void AssistSkillInfoDtoConverter_fillFrom(AppDto.AssistSkillInfoDto target, AssistSkillInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAssistSkillInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAssistSkillInfoDto);
			}
			if (source.asmds != null) {
				List<AppDto.AssistSkillModelDto> items = new List<AppDto.AssistSkillModelDto>();
				target.asmds = items;
				foreach (AssistSkillModelDto item in source.asmds) {
					AppDto.AssistSkillModelDto result = new AppDto.AssistSkillModelDto();
					AssistSkillModelDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.AssistSkillModelDto> items = new List<AppDto.AssistSkillModelDto>();
				target.asmds = items;
			}
			target.forget = source.forget;
		}

		public void AssistSkillInfoDtoConverter_fillInto(AppDto.AssistSkillInfoDto source, AssistSkillInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAssistSkillInfoDto == null ) {
				target.parentAssistSkillInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAssistSkillInfoDto);
			if (source.asmds != null){
				foreach(AppDto.AssistSkillModelDto asmds in source.asmds){
					AssistSkillModelDto protobufModel = new AssistSkillModelDto();
					AssistSkillModelDtoConverter_fillInto(asmds, protobufModel);
					target.asmds.Add(protobufModel);
				}
			}
			target.forget=source.forget;
		}
		public void AssistSkillModelDtoConverter_fillFrom(AppDto.AssistSkillModelDto target, AssistSkillModelDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAssistSkillModelDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAssistSkillModelDto);
			}
			target.id = source.id;
			target.level = source.level;
		}

		public void AssistSkillModelDtoConverter_fillInto(AppDto.AssistSkillModelDto source, AssistSkillModelDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAssistSkillModelDto == null ) {
				target.parentAssistSkillModelDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAssistSkillModelDto);
			target.id=source.id;
			target.level=source.level;
		}
		public void EquipmentPropertyDtoConverter_fillFrom(AppDto.EquipmentPropertyDto target, EquipmentPropertyDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEquipmentPropertyDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEquipmentPropertyDto);
			}
			if (source.baseProps != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.baseProps = items;
				foreach (CharacterPropertyDto item in source.baseProps) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.baseProps = items;
			}
			if (source.secondProps != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.secondProps = items;
				foreach (CharacterPropertyDto item in source.secondProps) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.secondProps = items;
			}
			if (source.extraProps != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.extraProps = items;
				foreach (CharacterPropertyDto item in source.extraProps) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.extraProps = items;
			}
		}

		public void EquipmentPropertyDtoConverter_fillInto(AppDto.EquipmentPropertyDto source, EquipmentPropertyDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEquipmentPropertyDto == null ) {
				target.parentEquipmentPropertyDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEquipmentPropertyDto);
			if (source.baseProps != null){
				foreach(AppDto.CharacterPropertyDto baseProps in source.baseProps){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(baseProps, protobufModel);
					target.baseProps.Add(protobufModel);
				}
			}
			if (source.secondProps != null){
				foreach(AppDto.CharacterPropertyDto secondProps in source.secondProps){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(secondProps, protobufModel);
					target.secondProps.Add(protobufModel);
				}
			}
			if (source.extraProps != null){
				foreach(AppDto.CharacterPropertyDto extraProps in source.extraProps){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(extraProps, protobufModel);
					target.extraProps.Add(protobufModel);
				}
			}
		}
		public void VideoDrivingTargetStateConverter_fillFrom(AppDto.VideoDrivingTargetState target, VideoDrivingTargetState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoDrivingTargetState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoDrivingTargetState);
			}
			target.driving = source.driving;
		}

		public void VideoDrivingTargetStateConverter_fillInto(AppDto.VideoDrivingTargetState source, VideoDrivingTargetState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoDrivingTargetState == null ) {
				target.parentVideoDrivingTargetState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoDrivingTargetState);
			target.driving=source.driving;
		}
		public void PropsExtraDtoConverter_fillFrom(AppDto.PropsExtraDto target, PropsExtraDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsExtraDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPropsExtraDto);
			}
			target.rarity = source.rarity;
		}

		public void PropsExtraDtoConverter_fillInto(AppDto.PropsExtraDto source, PropsExtraDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsExtraDto == null ) {
				target.parentPropsExtraDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPropsExtraDto);
			target.rarity=source.rarity;
		}
		public void PropsParam_2Converter_fillFrom(AppDto.PropsParam_2 target, PropsParam_2 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_2 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_2);
			}
			target.propertyType = source.propertyType;
			target.formula = source.formula;
			if (source.buffIds != null) {
				List<int> items = new List<int>();
				target.buffIds = items;
                foreach (int item in source.buffIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.buffIds = items;
			}
			if (source.buffTypes != null) {
				List<int> items = new List<int>();
				target.buffTypes = items;
                foreach (int item in source.buffTypes)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.buffTypes = items;
			}
			target.gainBuffId = source.gainBuffId;
		}

		public void PropsParam_2Converter_fillInto(AppDto.PropsParam_2 source, PropsParam_2 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_2 == null ) {
				target.parentPropsParam_2 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_2);
			target.propertyType=source.propertyType;
			if(source.formula!=null)
				target.formula = source.formula;
			if (source.buffIds != null){
				foreach(int buffIds in source.buffIds)
					target.buffIds.Add(buffIds);
			}
			if (source.buffTypes != null){
				foreach(int buffTypes in source.buffTypes)
					target.buffTypes.Add(buffTypes);
			}
			target.gainBuffId=source.gainBuffId;
		}
		public void HiddenMonsterSubmitDtoConverter_fillFrom(AppDto.HiddenMonsterSubmitDto target, HiddenMonsterSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentHiddenMonsterSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentHiddenMonsterSubmitDto);
			}
						if (source.acceptScene!=null) {
				AppDto.SceneInfoDto retAcceptScene = new AppDto.SceneInfoDto();
				SceneInfoDtoConverter_fillFrom(retAcceptScene, source.acceptScene);
				target.acceptScene = retAcceptScene;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
						target.monsterId = source.monsterId;
		}

		public void HiddenMonsterSubmitDtoConverter_fillInto(AppDto.HiddenMonsterSubmitDto source, HiddenMonsterSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentHiddenMonsterSubmitDto == null ) {
				target.parentHiddenMonsterSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentHiddenMonsterSubmitDto);
			if(source.acceptScene!=null){
				SceneInfoDto protobufModel = new SceneInfoDto();
				SceneInfoDtoConverter_fillInto(source.acceptScene, protobufModel);
				target.acceptScene = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
			target.monsterId=source.monsterId;
		}
		public void MissionItemNotifyConverter_fillFrom(AppDto.MissionItemNotify target, MissionItemNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
				foreach (ItemDto item in source.items) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
			}
			target.traceTypeId = source.traceTypeId;
		}

		public void MissionItemNotifyConverter_fillInto(AppDto.MissionItemNotify source, MissionItemNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.items != null){
				foreach(AppDto.ItemDto items in source.items){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
			target.traceTypeId=source.traceTypeId;
		}
		public void PropsParam_4Converter_fillFrom(AppDto.PropsParam_4 target, PropsParam_4 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_4 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_4);
			}
			target.duration = source.duration;
			if (source.property != null) {
				List<AppDto.PropsEffectMatch> items = new List<AppDto.PropsEffectMatch>();
				target.property = items;
				foreach (PropsEffectMatch item in source.property) {
					AppDto.PropsEffectMatch result = new AppDto.PropsEffectMatch();
					PropsEffectMatchConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.PropsEffectMatch> items = new List<AppDto.PropsEffectMatch>();
				target.property = items;
			}
		}

		public void PropsParam_4Converter_fillInto(AppDto.PropsParam_4 source, PropsParam_4 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_4 == null ) {
				target.parentPropsParam_4 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_4);
			target.duration=source.duration;
			if (source.property != null){
				foreach(AppDto.PropsEffectMatch property in source.property){
					PropsEffectMatch protobufModel = new PropsEffectMatch();
					PropsEffectMatchConverter_fillInto(property, protobufModel);
					target.property.Add(protobufModel);
				}
			}
		}
		public void AssistSkillGradeMaitchItemConverter_fillFrom(AppDto.AssistSkillGradeMaitchItem target, AssistSkillGradeMaitchItem source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.level = source.level;
			if (source.itemId != null) {
				List<int> items = new List<int>();
				target.itemId = items;
				foreach (int item in source.itemId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.itemId = items;
			}
		}

		public void AssistSkillGradeMaitchItemConverter_fillInto(AppDto.AssistSkillGradeMaitchItem source, AssistSkillGradeMaitchItem target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.level=source.level;
			if (source.itemId != null){
				foreach(int itemId in source.itemId)
					target.itemId.Add(itemId);
			}
		}
		public void PropsEffectMatchConverter_fillFrom(AppDto.PropsEffectMatch target, PropsEffectMatch source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.formula = source.formula;
		}

		public void PropsEffectMatchConverter_fillInto(AppDto.PropsEffectMatch source, PropsEffectMatch target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.formula!=null)
				target.formula = source.formula;
		}
		public void PropsParam_5Converter_fillFrom(AppDto.PropsParam_5 target, PropsParam_5 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_5 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_5);
			}
			if (source.property != null) {
				List<AppDto.PropsEffectMatch> items = new List<AppDto.PropsEffectMatch>();
				target.property = items;
				foreach (PropsEffectMatch item in source.property) {
					AppDto.PropsEffectMatch result = new AppDto.PropsEffectMatch();
					PropsEffectMatchConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.PropsEffectMatch> items = new List<AppDto.PropsEffectMatch>();
				target.property = items;
			}
			if (source.buffId != null) {
				List<int> items = new List<int>();
				target.buffId = items;
				foreach (int item in source.buffId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.buffId = items;
			}
		}

		public void PropsParam_5Converter_fillInto(AppDto.PropsParam_5 source, PropsParam_5 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_5 == null ) {
				target.parentPropsParam_5 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_5);
			if (source.property != null){
				foreach(AppDto.PropsEffectMatch property in source.property){
					PropsEffectMatch protobufModel = new PropsEffectMatch();
					PropsEffectMatchConverter_fillInto(property, protobufModel);
					target.property.Add(protobufModel);
				}
			}
			if (source.buffId != null){
				foreach(int buffId in source.buffId)
					target.buffId.Add(buffId);
			}
		}
		public void FindtemSubmitInfoDtoConverter_fillFrom(AppDto.FindtemSubmitInfoDto target, FindtemSubmitInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentFindtemSubmitInfoDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentFindtemSubmitInfoDto);
			}
			target.itemId = source.itemId;
						if (source.acceptNpc!=null) {
				AppDto.NpcInfoDto retAcceptNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retAcceptNpc, source.acceptNpc);
				target.acceptNpc = retAcceptNpc;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
						target.itemCount = source.itemCount;
			target.talk = source.talk;
		}

		public void FindtemSubmitInfoDtoConverter_fillInto(AppDto.FindtemSubmitInfoDto source, FindtemSubmitInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentFindtemSubmitInfoDto == null ) {
				target.parentFindtemSubmitInfoDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentFindtemSubmitInfoDto);
			target.itemId=source.itemId;
			if(source.acceptNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.acceptNpc, protobufModel);
				target.acceptNpc = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
			target.itemCount=source.itemCount;
			target.talk=source.talk;
		}
		public void EquipmentCaseItemDtoConverter_fillFrom(AppDto.EquipmentCaseItemDto target, EquipmentCaseItemDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentEquipmentCaseItemDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentEquipmentCaseItemDto);
			}
			target.partId = source.partId;
			target.equipUid = source.equipUid;
		}

		public void EquipmentCaseItemDtoConverter_fillInto(AppDto.EquipmentCaseItemDto source, EquipmentCaseItemDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentEquipmentCaseItemDto == null ) {
				target.parentEquipmentCaseItemDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentEquipmentCaseItemDto);
			target.partId=source.partId;
			target.equipUid=source.equipUid;
		}
		public void AssistSkillForgetConsumeDtoConverter_fillFrom(AppDto.AssistSkillForgetConsumeDto target, AssistSkillForgetConsumeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAssistSkillForgetConsumeDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAssistSkillForgetConsumeDto);
			}
			if (source.payBackItem != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.payBackItem = items;
				foreach (ItemDto item in source.payBackItem) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.payBackItem = items;
			}
		}

		public void AssistSkillForgetConsumeDtoConverter_fillInto(AppDto.AssistSkillForgetConsumeDto source, AssistSkillForgetConsumeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAssistSkillForgetConsumeDto == null ) {
				target.parentAssistSkillForgetConsumeDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAssistSkillForgetConsumeDto);
			if (source.payBackItem != null){
				foreach(AppDto.ItemDto payBackItem in source.payBackItem){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(payBackItem, protobufModel);
					target.payBackItem.Add(protobufModel);
				}
			}
		}
		public void WareHouseExpandConverter_fillFrom(AppDto.WareHouseExpand target, WareHouseExpand source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.virtualId = source.virtualId;
			target.count = source.count;
		}

		public void WareHouseExpandConverter_fillInto(AppDto.WareHouseExpand source, WareHouseExpand target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.virtualId=source.virtualId;
			target.count=source.count;
		}
		public void PropsParam_6Converter_fillFrom(AppDto.PropsParam_6 target, PropsParam_6 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_6 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_6);
			}
			if (source.buffId != null) {
				List<int> items = new List<int>();
				target.buffId = items;
                foreach (int item in source.buffId)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.buffId = items;
			}
		}

		public void PropsParam_6Converter_fillInto(AppDto.PropsParam_6 source, PropsParam_6 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_6 == null ) {
				target.parentPropsParam_6 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_6);
			if (source.buffId != null){
				foreach(int buffId in source.buffId)
					target.buffId.Add(buffId);
			}
		}
		public void CharactorPropertyUpdateDtoConverter_fillFrom(AppDto.CharactorPropertyUpdateDto target, CharactorPropertyUpdateDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCharactorPropertyUpdateDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCharactorPropertyUpdateDto);
			}
			if (source.properties != null) {
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
				foreach (CharacterPropertyDto item in source.properties) {
					AppDto.CharacterPropertyDto result = new AppDto.CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CharacterPropertyDto> items = new List<AppDto.CharacterPropertyDto>();
				target.properties = items;
			}
		}

		public void CharactorPropertyUpdateDtoConverter_fillInto(AppDto.CharactorPropertyUpdateDto source, CharactorPropertyUpdateDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCharactorPropertyUpdateDto == null ) {
				target.parentCharactorPropertyUpdateDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCharactorPropertyUpdateDto);
			if (source.properties != null){
				foreach(AppDto.CharacterPropertyDto properties in source.properties){
					CharacterPropertyDto protobufModel = new CharacterPropertyDto();
					CharacterPropertyDtoConverter_fillInto(properties, protobufModel);
					target.properties.Add(protobufModel);
				}
			}
		}
		public void PrePayNotifyConverter_fillFrom(AppDto.PrePayNotify target, PrePayNotify source){
			//no property
		}

		public void PrePayNotifyConverter_fillInto(AppDto.PrePayNotify source, PrePayNotify target){
			//no property
		}
		public void FunctionOpenNotifyConverter_fillFrom(AppDto.FunctionOpenNotify target, FunctionOpenNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.ids != null) {
				List<int> items = new List<int>();
				target.ids = items;
				foreach (int item in source.ids)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.ids = items;
			}
			target.close = source.close;
		}

		public void FunctionOpenNotifyConverter_fillInto(AppDto.FunctionOpenNotify source, FunctionOpenNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.ids != null){
				foreach(int ids in source.ids)
					target.ids.Add(ids);
			}
			target.close=source.close;
		}
		public void BattleForceExitNotifyConverter_fillFrom(AppDto.BattleForceExitNotify target, BattleForceExitNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.battleId = source.battleId;
		}

		public void BattleForceExitNotifyConverter_fillInto(AppDto.BattleForceExitNotify source, BattleForceExitNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.battleId=source.battleId;
		}
		public void BattleAutoNotifyConverter_fillFrom(AppDto.BattleAutoNotify target, BattleAutoNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.auto = source.auto;
		}

		public void BattleAutoNotifyConverter_fillInto(AppDto.BattleAutoNotify source, BattleAutoNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.auto=source.auto;
		}
		public void GameEffectConstConverter_fillFrom(AppDto.GameEffectConst target, GameEffectConst source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.code = source.code;
			target.desc = source.desc;
			target.id = source.id;
		}

		public void GameEffectConstConverter_fillInto(AppDto.GameEffectConst source, GameEffectConst target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.code!=null)
				target.code = source.code;
			if(source.desc!=null)
				target.desc = source.desc;
			target.id=source.id;
		}
		public void VideoActionTimeRewardConverter_fillFrom(AppDto.VideoActionTimeReward target, VideoActionTimeReward source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.currentHp = source.currentHp;
			target.currentEp = source.currentEp;
			target.currentCp = source.currentCp;
		}

		public void VideoActionTimeRewardConverter_fillInto(AppDto.VideoActionTimeReward source, VideoActionTimeReward target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.currentHp=source.currentHp;
			target.currentEp=source.currentEp;
			target.currentCp=source.currentCp;
		}
		public void MatchBtnNotifyConverter_fillFrom(AppDto.MatchBtnNotify target, MatchBtnNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.match = source.match;
		}

		public void MatchBtnNotifyConverter_fillInto(AppDto.MatchBtnNotify source, MatchBtnNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.match=source.match;
		}
		public void TeamMainActionConverter_fillFrom(AppDto.TeamMainAction target, TeamMainAction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.minGrade = source.minGrade;
			target.maxGrade = source.maxGrade;
		}

		public void TeamMainActionConverter_fillInto(AppDto.TeamMainAction source, TeamMainAction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.minGrade=source.minGrade;
			target.maxGrade=source.maxGrade;
		}
		public void StallExpandConverter_fillFrom(AppDto.StallExpand target, StallExpand source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.virtualId = source.virtualId;
			target.count = source.count;
		}

		public void StallExpandConverter_fillInto(AppDto.StallExpand source, StallExpand target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.virtualId=source.virtualId;
			target.count=source.count;
		}
		public void StallGoodsConverter_fillFrom(AppDto.StallGoods target, StallGoods source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.tradeMenuId = source.tradeMenuId;
			target.taxRate = source.taxRate;
			target.sale = source.sale;
			target.gameServerGrade = source.gameServerGrade;
			target.basePriceFormula = source.basePriceFormula;
			target.maxSaleFactor = source.maxSaleFactor;
			target.minSaleFactor = source.minSaleFactor;
			target.sysMaxSaleFactor = source.sysMaxSaleFactor;
			target.sysMinSaleFactor = source.sysMinSaleFactor;
			target.sysSale = source.sysSale;
			target.sellTax = source.sellTax;
		}

		public void StallGoodsConverter_fillInto(AppDto.StallGoods source, StallGoods target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.tradeMenuId=source.tradeMenuId;
			target.taxRate=source.taxRate;
			target.sale=source.sale;
			target.gameServerGrade=source.gameServerGrade;
			if(source.basePriceFormula!=null)
				target.basePriceFormula = source.basePriceFormula;
			target.maxSaleFactor=source.maxSaleFactor;
			target.minSaleFactor=source.minSaleFactor;
			target.sysMaxSaleFactor=source.sysMaxSaleFactor;
			target.sysMinSaleFactor=source.sysMinSaleFactor;
			target.sysSale=source.sysSale;
			target.sellTax=source.sellTax;
		}
		public void PlayerStallGoodsDtoConverter_fillFrom(AppDto.PlayerStallGoodsDto target, PlayerStallGoodsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerStallGoodsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerStallGoodsDto);
			}
			if (source.playerStallItems != null) {
				List<AppDto.StallGoodsDto> items = new List<AppDto.StallGoodsDto>();
				target.playerStallItems = items;
				foreach (StallGoodsDto item in source.playerStallItems) {
					AppDto.StallGoodsDto result = new AppDto.StallGoodsDto();
					StallGoodsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.StallGoodsDto> items = new List<AppDto.StallGoodsDto>();
				target.playerStallItems = items;
			}
			target.refreshTime = source.refreshTime;
			target.capability = source.capability;
		}

		public void PlayerStallGoodsDtoConverter_fillInto(AppDto.PlayerStallGoodsDto source, PlayerStallGoodsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerStallGoodsDto == null ) {
				target.parentPlayerStallGoodsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerStallGoodsDto);
			if (source.playerStallItems != null){
				foreach(AppDto.StallGoodsDto playerStallItems in source.playerStallItems){
					StallGoodsDto protobufModel = new StallGoodsDto();
					StallGoodsDtoConverter_fillInto(playerStallItems, protobufModel);
					target.playerStallItems.Add(protobufModel);
				}
			}
			target.refreshTime=source.refreshTime;
			target.capability=source.capability;
		}
		public void StallCenterDtoConverter_fillFrom(AppDto.StallCenterDto target, StallCenterDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentStallCenterDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentStallCenterDto);
			}
			if (source.items != null) {
				List<AppDto.StallGoodsDto> items = new List<AppDto.StallGoodsDto>();
				target.items = items;
				foreach (StallGoodsDto item in source.items) {
					AppDto.StallGoodsDto result = new AppDto.StallGoodsDto();
					StallGoodsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.StallGoodsDto> items = new List<AppDto.StallGoodsDto>();
				target.items = items;
			}
		}

		public void StallCenterDtoConverter_fillInto(AppDto.StallCenterDto source, StallCenterDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentStallCenterDto == null ) {
				target.parentStallCenterDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentStallCenterDto);
			if (source.items != null){
				foreach(AppDto.StallGoodsDto items in source.items){
					StallGoodsDto protobufModel = new StallGoodsDto();
					StallGoodsDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void StallDrawNotifyConverter_fillFrom(AppDto.StallDrawNotify target, StallDrawNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.stallId = source.stallId;
			target.canDrawAmt = source.canDrawAmt;
			target.amount = source.amount;
			target.count = source.count;
		}

		public void StallDrawNotifyConverter_fillInto(AppDto.StallDrawNotify source, StallDrawNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.stallId=source.stallId;
			target.canDrawAmt=source.canDrawAmt;
			target.amount=source.amount;
			target.count=source.count;
		}
		public void StallGoodsDtoConverter_fillFrom(AppDto.StallGoodsDto target, StallGoodsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.price = source.price;
			target.count = source.count;
			target.amount = source.amount;
			target.stallId = source.stallId;
			target.ownerId = source.ownerId;
			target.expiredTime = source.expiredTime;
			if (source.extra!=null && source.extra is GameObjectTypedMessage) {			
				GameObjectTypedMessage itemExtra = source.extra;
				System.Object result = ProtobufUtilsNet.parseFrom(itemExtra.message_type_id,itemExtra.message_data);
				if (result == null)
					throw new IOException("parse data error");
				target.extra = result;
			}
			target.itemId = source.itemId;
		}

		public void StallGoodsDtoConverter_fillInto(AppDto.StallGoodsDto source, StallGoodsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.price=source.price;
			target.count=source.count;
			target.amount=source.amount;
			target.stallId=source.stallId;
			target.ownerId=source.ownerId;
			target.expiredTime=source.expiredTime;
			if(source.extra != null){
				GameObjectTypedMessage protobufModel = ProtobufUtilsNet.packInto(source.extra);
				if (protobufModel == null)
					throw new IOException("pack data error");
				target.extra = protobufModel;
			}
			target.itemId=source.itemId;
		}
		public void TradeGoodsConverter_fillFrom(AppDto.TradeGoods target, TradeGoods source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.tradeMenuId = source.tradeMenuId;
			target.preId = source.preId;
			target.baseAmount = source.baseAmount;
			target.basePrice = source.basePrice;
			target.taxRate = source.taxRate;
			target.sale = source.sale;
			target.gameServerGrade = source.gameServerGrade;
			target.maxGameServerGrade = source.maxGameServerGrade;
			target.factor = source.factor;
			target.riseFactor = source.riseFactor;
			target.priceLimit = source.priceLimit;
			target.maxSalePrice = source.maxSalePrice;
			target.minSalePrice = source.minSalePrice;
			target.sell = source.sell;
			target.labelId = source.labelId;
			target.labelParams = source.labelParams;
			target.dailyAmount = source.dailyAmount;
			target.baseId = source.baseId;
			target.baseCount = source.baseCount;
			target.baseItem = source.baseItem;
		}

		public void TradeGoodsConverter_fillInto(AppDto.TradeGoods source, TradeGoods target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.tradeMenuId=source.tradeMenuId;
			target.preId=source.preId;
			target.baseAmount=source.baseAmount;
			target.basePrice=source.basePrice;
			target.taxRate=source.taxRate;
			target.sale=source.sale;
			target.gameServerGrade=source.gameServerGrade;
			target.maxGameServerGrade=source.maxGameServerGrade;
			target.factor=source.factor;
			target.riseFactor=source.riseFactor;
			target.priceLimit=source.priceLimit;
			target.maxSalePrice=source.maxSalePrice;
			target.minSalePrice=source.minSalePrice;
			target.sell=source.sell;
			target.labelId=source.labelId;
			if(source.labelParams!=null)
				target.labelParams = source.labelParams;
			target.dailyAmount=source.dailyAmount;
			target.baseId=source.baseId;
			target.baseCount=source.baseCount;
			target.baseItem=source.baseItem;
		}
		public void TradeMenuConverter_fillFrom(AppDto.TradeMenu target, TradeMenu source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.parentId = source.parentId;
			target.gameServerGrade = source.gameServerGrade;
			target.type = source.type;
			target.amount = source.amount;
		}

		public void TradeMenuConverter_fillInto(AppDto.TradeMenu source, TradeMenu target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.parentId=source.parentId;
			target.gameServerGrade=source.gameServerGrade;
			target.type=source.type;
			target.amount=source.amount;
		}
		public void TradeCenterDtoConverter_fillFrom(AppDto.TradeCenterDto target, TradeCenterDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTradeCenterDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTradeCenterDto);
			}
			if (source.items != null) {
				List<AppDto.TradeGoodsDto> items = new List<AppDto.TradeGoodsDto>();
				target.items = items;
				foreach (TradeGoodsDto item in source.items) {
					AppDto.TradeGoodsDto result = new AppDto.TradeGoodsDto();
					TradeGoodsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TradeGoodsDto> items = new List<AppDto.TradeGoodsDto>();
				target.items = items;
			}
		}

		public void TradeCenterDtoConverter_fillInto(AppDto.TradeCenterDto source, TradeCenterDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTradeCenterDto == null ) {
				target.parentTradeCenterDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTradeCenterDto);
			if (source.items != null){
				foreach(AppDto.TradeGoodsDto items in source.items){
					TradeGoodsDto protobufModel = new TradeGoodsDto();
					TradeGoodsDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void TradeGoodsDtoConverter_fillFrom(AppDto.TradeGoodsDto target, TradeGoodsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.amount = source.amount;
			target.price = source.price;
			target.originalPrice = source.originalPrice;
			target.itemId = source.itemId;
		}

		public void TradeGoodsDtoConverter_fillInto(AppDto.TradeGoodsDto source, TradeGoodsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.amount=source.amount;
			target.price=source.price;
			target.originalPrice=source.originalPrice;
			target.itemId=source.itemId;
		}
		public void FindItemStateNotifyConverter_fillFrom(AppDto.FindItemStateNotify target, FindItemStateNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.talk = source.talk;
			if ( source.parentFindItemStateNotify != null ) {
				MissionSubmitStateNotifyConverter_fillFrom(target,source.parentFindItemStateNotify);
			}
		}

		public void FindItemStateNotifyConverter_fillInto(AppDto.FindItemStateNotify source, FindItemStateNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.talk=source.talk;
			if ( target.parentFindItemStateNotify == null ) {
				target.parentFindItemStateNotify = new MissionSubmitStateNotify();
			}
			MissionSubmitStateNotifyConverter_fillInto(source,target.parentFindItemStateNotify);
		}
		public void FriendListDtoConverter_fillFrom(AppDto.FriendListDto target, FriendListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentFriendListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFriendListDto);
			}
			if (source.friendsInfoDtos != null) {
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.friendsInfoDtos = items;
				foreach (FriendInfoDto item in source.friendsInfoDtos) {
					AppDto.FriendInfoDto result = new AppDto.FriendInfoDto();
					FriendInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.FriendInfoDto> items = new List<AppDto.FriendInfoDto>();
				target.friendsInfoDtos = items;
			}
		}

		public void FriendListDtoConverter_fillInto(AppDto.FriendListDto source, FriendListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentFriendListDto == null ) {
				target.parentFriendListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFriendListDto);
			if (source.friendsInfoDtos != null){
				foreach(AppDto.FriendInfoDto friendsInfoDtos in source.friendsInfoDtos){
					FriendInfoDto protobufModel = new FriendInfoDto();
					FriendInfoDtoConverter_fillInto(friendsInfoDtos, protobufModel);
					target.friendsInfoDtos.Add(protobufModel);
				}
			}
		}
		public void FriendLoadMsgDtoConverter_fillFrom(AppDto.FriendLoadMsgDto target, FriendLoadMsgDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentFriendLoadMsgDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFriendLoadMsgDto);
			}
			if (source.chatNotifies != null) {
				List<AppDto.ChatNotify> items = new List<AppDto.ChatNotify>();
				target.chatNotifies = items;
				foreach (GameObjectTypedMessage item in source.chatNotifies) {
					int message_type_id = item.message_type_id;
					object result = ProtobufUtilsNet.parseFrom(message_type_id,item.message_data);
					if (result == null && !(result is AppDto.ChatNotify))
						throw new IOException("parse data error");
					items.Add((AppDto.ChatNotify)result);
				}
			}else{
				List<AppDto.ChatNotify> items = new List<AppDto.ChatNotify>();
				target.chatNotifies = items;
			}
		}

		public void FriendLoadMsgDtoConverter_fillInto(AppDto.FriendLoadMsgDto source, FriendLoadMsgDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentFriendLoadMsgDto == null ) {
				target.parentFriendLoadMsgDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFriendLoadMsgDto);
			if (source.chatNotifies != null){
				foreach(AppDto.ChatNotify chatNotifies in source.chatNotifies){
					GameObjectTypedMessage msgChatNotifies = ProtobufUtilsNet.packInto(chatNotifies);
					if (msgChatNotifies == null)
						throw new IOException("pack data error");
					target.chatNotifies.Add(msgChatNotifies);
				}
			}
		}
		public void EquipmentGroupConverter_fillFrom(AppDto.EquipmentGroup target, EquipmentGroup source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			if (source.equipIds != null) {
				List<int> items = new List<int>();
				target.equipIds = items;
                foreach (int item in source.equipIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.equipIds = items;
			}
			if (source.function != null) {
				List<string> items = new List<string>();
				target.function = items;
				foreach (string item in source.function)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.function = items;
			}
		}

		public void EquipmentGroupConverter_fillInto(AppDto.EquipmentGroup source, EquipmentGroup target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if (source.equipIds != null){
				foreach(int equipIds in source.equipIds)
					target.equipIds.Add(equipIds);
			}
			if (source.function != null){
				foreach(string function in source.function)
					target.function.Add(function);
			}
		}
		public void PropsParam_7Converter_fillFrom(AppDto.PropsParam_7 target, PropsParam_7 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_7 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_7);
			}
			target.effectId = source.effectId;
		}

		public void PropsParam_7Converter_fillInto(AppDto.PropsParam_7 source, PropsParam_7 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_7 == null ) {
				target.parentPropsParam_7 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_7);
			target.effectId=source.effectId;
		}
		public void MissionRecordConverter_fillFrom(AppDto.MissionRecord target, MissionRecord source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.area = source.area;
			target.desc = source.desc;
			if (source.reward != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.reward = items;
				foreach (ItemDto item in source.reward) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.reward = items;
			}
			if (source.missionList != null) {
				List<int> items = new List<int>();
				target.missionList = items;
				foreach (int item in source.missionList)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.missionList = items;
			}
		}

		public void MissionRecordConverter_fillInto(AppDto.MissionRecord source, MissionRecord target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.area!=null)
				target.area = source.area;
			if(source.desc!=null)
				target.desc = source.desc;
			if (source.reward != null){
				foreach(AppDto.ItemDto reward in source.reward){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(reward, protobufModel);
					target.reward.Add(protobufModel);
				}
			}
			if (source.missionList != null){
				foreach(int missionList in source.missionList)
					target.missionList.Add(missionList);
			}
		}
		public void FriendActionNotifyConverter_fillFrom(AppDto.FriendActionNotify target, FriendActionNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.actionId = source.actionId;
		}

		public void FriendActionNotifyConverter_fillInto(AppDto.FriendActionNotify source, FriendActionNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.actionId=source.actionId;
		}
		public void FriendDynamicNotifyConverter_fillFrom(AppDto.FriendDynamicNotify target, FriendDynamicNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			target.dynamicId = source.dynamicId;
			target.dynamicParam = source.dynamicParam;
		}

		public void FriendDynamicNotifyConverter_fillInto(AppDto.FriendDynamicNotify source, FriendDynamicNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			target.dynamicId=source.dynamicId;
			target.dynamicParam=source.dynamicParam;
		}
		public void StallCashDtoConverter_fillFrom(AppDto.StallCashDto target, StallCashDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentStallCashDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentStallCashDto);
			}
			if (source.stallIds != null) {
				List<long> items = new List<long>();
				target.stallIds = items;
				foreach (long item in source.stallIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.stallIds = items;
			}
		}

		public void StallCashDtoConverter_fillInto(AppDto.StallCashDto source, StallCashDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentStallCashDto == null ) {
				target.parentStallCashDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentStallCashDto);
			if (source.stallIds != null){
				foreach(long stallIds in source.stallIds)
					target.stallIds.Add(stallIds);
			}
		}
		public void EquipmentAtrifactConverter_fillFrom(AppDto.EquipmentAtrifact target, EquipmentAtrifact source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.grade = source.grade;
			target.quality = source.quality;
			target.topval = source.topval;
			target.part = source.part;
		}

		public void EquipmentAtrifactConverter_fillInto(AppDto.EquipmentAtrifact source, EquipmentAtrifact target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.grade=source.grade;
			target.quality=source.quality;
			target.topval=source.topval;
			target.part=source.part;
		}
		public void OnSmithEquipemntDtoConverter_fillFrom(AppDto.OnSmithEquipemntDto target, OnSmithEquipemntDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentOnSmithEquipemntDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentOnSmithEquipemntDto);
			}
						if (source.edto!=null) {
				AppDto.EquipmentDto retEdto = new AppDto.EquipmentDto();
				EquipmentDtoConverter_fillFrom(retEdto, source.edto);
				target.edto = retEdto;
			}
									if (source.adto!=null) {
				AppDto.AtrifactDto retAdto = new AppDto.AtrifactDto();
				AtrifactDtoConverter_fillFrom(retAdto, source.adto);
				target.adto = retAdto;
			}
					}

		public void OnSmithEquipemntDtoConverter_fillInto(AppDto.OnSmithEquipemntDto source, OnSmithEquipemntDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentOnSmithEquipemntDto == null ) {
				target.parentOnSmithEquipemntDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentOnSmithEquipemntDto);
			if(source.edto!=null){
				EquipmentDto protobufModel = new EquipmentDto();
				EquipmentDtoConverter_fillInto(source.edto, protobufModel);
				target.edto = protobufModel;
			}
			if(source.adto!=null){
				AtrifactDto protobufModel = new AtrifactDto();
				AtrifactDtoConverter_fillInto(source.adto, protobufModel);
				target.adto = protobufModel;
			}
		}
		public void AtrifactDtoConverter_fillFrom(AppDto.AtrifactDto target, AtrifactDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.aid = source.aid;
			target.curval = source.curval;
			if ( source.parentAtrifactDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAtrifactDto);
			}
		}

		public void AtrifactDtoConverter_fillInto(AppDto.AtrifactDto source, AtrifactDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.aid=source.aid;
			target.curval=source.curval;
			if ( target.parentAtrifactDto == null ) {
				target.parentAtrifactDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAtrifactDto);
		}
		public void ItemTipConverter_fillFrom(AppDto.ItemTip target, ItemTip source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.type = source.type;
			target.tips = source.tips;
			target.title = source.title;
		}

		public void ItemTipConverter_fillInto(AppDto.ItemTip source, ItemTip target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.type=source.type;
			if(source.tips!=null)
				target.tips = source.tips;
			if(source.title!=null)
				target.title = source.title;
		}
		public void ItemTipsNotifyConverter_fillFrom(AppDto.ItemTipsNotify target, ItemTipsNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemTipsId = source.itemTipsId;
			if (source.itemDtos != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.itemDtos = items;
				foreach (ItemDto item in source.itemDtos) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.itemDtos = items;
			}
			target.traceTypeId = source.traceTypeId;
			if (source.lostItems != null) {
				List<int> items = new List<int>();
				target.lostItems = items;
				foreach (int item in source.lostItems)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.lostItems = items;
			}
		}

		public void ItemTipsNotifyConverter_fillInto(AppDto.ItemTipsNotify source, ItemTipsNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.itemTipsId=source.itemTipsId;
			if (source.itemDtos != null){
				foreach(AppDto.ItemDto itemDtos in source.itemDtos){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(itemDtos, protobufModel);
					target.itemDtos.Add(protobufModel);
				}
			}
			target.traceTypeId=source.traceTypeId;
			if (source.lostItems != null){
				foreach(int lostItems in source.lostItems)
					target.lostItems.Add(lostItems);
			}
		}
		public void EmbedPhaseNotifyConverter_fillFrom(AppDto.EmbedPhaseNotify target, EmbedPhaseNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.ephaseId = source.ephaseId;
			target.curephaseId = source.curephaseId;
		}

		public void EmbedPhaseNotifyConverter_fillInto(AppDto.EmbedPhaseNotify source, EmbedPhaseNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.ephaseId=source.ephaseId;
			target.curephaseId=source.curephaseId;
		}
		public void CrewInfosDtoConverter_fillFrom(AppDto.CrewInfosDto target, CrewInfosDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewInfosDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewInfosDto);
			}
			if (source.crewInfos != null) {
				List<AppDto.CrewInfoDto> items = new List<AppDto.CrewInfoDto>();
				target.crewInfos = items;
				foreach (CrewInfoDto item in source.crewInfos) {
					AppDto.CrewInfoDto result = new AppDto.CrewInfoDto();
					CrewInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewInfoDto> items = new List<AppDto.CrewInfoDto>();
				target.crewInfos = items;
			}
			if (source.crewChipInfos != null) {
				List<AppDto.CrewChipDto> items = new List<AppDto.CrewChipDto>();
				target.crewChipInfos = items;
				foreach (CrewChipDto item in source.crewChipInfos) {
					AppDto.CrewChipDto result = new AppDto.CrewChipDto();
					CrewChipDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewChipDto> items = new List<AppDto.CrewChipDto>();
				target.crewChipInfos = items;
			}
		}

		public void CrewInfosDtoConverter_fillInto(AppDto.CrewInfosDto source, CrewInfosDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewInfosDto == null ) {
				target.parentCrewInfosDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewInfosDto);
			if (source.crewInfos != null){
				foreach(AppDto.CrewInfoDto crewInfos in source.crewInfos){
					CrewInfoDto protobufModel = new CrewInfoDto();
					CrewInfoDtoConverter_fillInto(crewInfos, protobufModel);
					target.crewInfos.Add(protobufModel);
				}
			}
			if (source.crewChipInfos != null){
				foreach(AppDto.CrewChipDto crewChipInfos in source.crewChipInfos){
					CrewChipDto protobufModel = new CrewChipDto();
					CrewChipDtoConverter_fillInto(crewChipInfos, protobufModel);
					target.crewChipInfos.Add(protobufModel);
				}
			}
		}
		public void AssistSkillMakeItemDtoConverter_fillFrom(AppDto.AssistSkillMakeItemDto target, AssistSkillMakeItemDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAssistSkillMakeItemDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentAssistSkillMakeItemDto);
			}
			target.type = source.type;
			target.pid = source.pid;
		}

		public void AssistSkillMakeItemDtoConverter_fillInto(AppDto.AssistSkillMakeItemDto source, AssistSkillMakeItemDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAssistSkillMakeItemDto == null ) {
				target.parentAssistSkillMakeItemDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentAssistSkillMakeItemDto);
			target.type=source.type;
			target.pid=source.pid;
		}
		public void BracerExpInfoNotifyConverter_fillFrom(AppDto.BracerExpInfoNotify target, BracerExpInfoNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.exp = source.exp;
			target.expGain = source.expGain;
			target.oldGrade = source.oldGrade;
			target.grade = source.grade;
			target.upgarded = source.upgarded;
			target.maxLevelReached = source.maxLevelReached;
			target.traceTypeId = source.traceTypeId;
		}

		public void BracerExpInfoNotifyConverter_fillInto(AppDto.BracerExpInfoNotify source, BracerExpInfoNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.exp=source.exp;
			target.expGain=source.expGain;
			target.oldGrade=source.oldGrade;
			target.grade=source.grade;
			target.upgarded=source.upgarded;
			target.maxLevelReached=source.maxLevelReached;
			target.traceTypeId=source.traceTypeId;
		}
		public void ElementRelativeConverter_fillFrom(AppDto.ElementRelative target, ElementRelative source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.enhance != null) {
				List<int> items = new List<int>();
				target.enhance = items;
                foreach (int item in source.enhance)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.enhance = items;
			}
			target.enhanceVal = source.enhanceVal;
			target.enhanceDesc = source.enhanceDesc;
			if (source.reduction != null) {
				List<int> items = new List<int>();
				target.reduction = items;
                foreach (int item in source.reduction)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.reduction = items;
			}
			target.reductionVal = source.reductionVal;
			target.reductionDesc = source.reductionDesc;
		}

		public void ElementRelativeConverter_fillInto(AppDto.ElementRelative source, ElementRelative target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.enhance != null){
				foreach(int enhance in source.enhance)
					target.enhance.Add(enhance);
			}
			target.enhanceVal=source.enhanceVal;
			if(source.enhanceDesc!=null)
				target.enhanceDesc = source.enhanceDesc;
			if (source.reduction != null){
				foreach(int reduction in source.reduction)
					target.reduction.Add(reduction);
			}
			target.reductionVal=source.reductionVal;
			if(source.reductionDesc!=null)
				target.reductionDesc = source.reductionDesc;
		}
		public void CrewPersonalityConverter_fillFrom(AppDto.CrewPersonality target, CrewPersonality source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.desc = source.desc;
		}

		public void CrewPersonalityConverter_fillInto(AppDto.CrewPersonality source, CrewPersonality target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.desc!=null)
				target.desc = source.desc;
		}
		public void PropsParam_12Converter_fillFrom(AppDto.PropsParam_12 target, PropsParam_12 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_12 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_12);
			}
			target.value = source.value;
		}

		public void PropsParam_12Converter_fillInto(AppDto.PropsParam_12 source, PropsParam_12 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_12 == null ) {
				target.parentPropsParam_12 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_12);
			target.value=source.value;
		}
		public void PropsParam_11Converter_fillFrom(AppDto.PropsParam_11 target, PropsParam_11 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_11 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_11);
			}
			target.itemTipId = source.itemTipId;
			if (source.itemDtos != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.itemDtos = items;
				foreach (ItemDto item in source.itemDtos) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.itemDtos = items;
			}
		}

		public void PropsParam_11Converter_fillInto(AppDto.PropsParam_11 source, PropsParam_11 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_11 == null ) {
				target.parentPropsParam_11 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_11);
			target.itemTipId=source.itemTipId;
			if (source.itemDtos != null){
				foreach(AppDto.ItemDto itemDtos in source.itemDtos){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(itemDtos, protobufModel);
					target.itemDtos.Add(protobufModel);
				}
			}
		}
		public void PickItemPointDtoConverter_fillFrom(AppDto.PickItemPointDto target, PickItemPointDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
						if (source.npcInfoDto!=null) {
				AppDto.NpcInfoDto retNpcInfoDto = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retNpcInfoDto, source.npcInfoDto);
				target.npcInfoDto = retNpcInfoDto;
			}
						target.pick = source.pick;
			target.id = source.id;
		}

		public void PickItemPointDtoConverter_fillInto(AppDto.PickItemPointDto source, PickItemPointDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.npcInfoDto!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.npcInfoDto, protobufModel);
				target.npcInfoDto = protobufModel;
			}
			target.pick=source.pick;
			target.id=source.id;
		}
		public void PlayerFactionMissionDtoConverter_fillFrom(AppDto.PlayerFactionMissionDto target, PlayerFactionMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerFactionMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerFactionMissionDto);
			}
			target.curRings = source.curRings;
			target.dailyFinishCount = source.dailyFinishCount;
			target.ringCount = source.ringCount;
		}

		public void PlayerFactionMissionDtoConverter_fillInto(AppDto.PlayerFactionMissionDto source, PlayerFactionMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerFactionMissionDto == null ) {
				target.parentPlayerFactionMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerFactionMissionDto);
			target.curRings=source.curRings;
			target.dailyFinishCount=source.dailyFinishCount;
			target.ringCount=source.ringCount;
		}
		public void TradeGoodsListNotifyConverter_fillFrom(AppDto.TradeGoodsListNotify target, TradeGoodsListNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTradeGoodsListNotify != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTradeGoodsListNotify);
			}
			if (source.tradeGoodsDtos != null) {
				List<AppDto.TradeGoodsDto> items = new List<AppDto.TradeGoodsDto>();
				target.tradeGoodsDtos = items;
				foreach (TradeGoodsDto item in source.tradeGoodsDtos) {
					AppDto.TradeGoodsDto result = new AppDto.TradeGoodsDto();
					TradeGoodsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.TradeGoodsDto> items = new List<AppDto.TradeGoodsDto>();
				target.tradeGoodsDtos = items;
			}
		}

		public void TradeGoodsListNotifyConverter_fillInto(AppDto.TradeGoodsListNotify source, TradeGoodsListNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTradeGoodsListNotify == null ) {
				target.parentTradeGoodsListNotify = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTradeGoodsListNotify);
			if (source.tradeGoodsDtos != null){
				foreach(AppDto.TradeGoodsDto tradeGoodsDtos in source.tradeGoodsDtos){
					TradeGoodsDto protobufModel = new TradeGoodsDto();
					TradeGoodsDtoConverter_fillInto(tradeGoodsDtos, protobufModel);
					target.tradeGoodsDtos.Add(protobufModel);
				}
			}
		}
		public void DialogFunctionConverter_fillFrom(AppDto.DialogFunction target, DialogFunction source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.param = source.param;
			target.type = source.type;
			target.functionOpenId = source.functionOpenId;
			target.dialog = source.dialog;
			target.logicId = source.logicId;
		}

		public void DialogFunctionConverter_fillInto(AppDto.DialogFunction source, DialogFunction target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.param=source.param;
			target.type=source.type;
			target.functionOpenId=source.functionOpenId;
			if(source.dialog!=null)
				target.dialog = source.dialog;
			target.logicId=source.logicId;
		}
		public void BagItemListDtoConverter_fillFrom(AppDto.BagItemListDto target, BagItemListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentBagItemListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBagItemListDto);
			}
			if (source.items != null) {
				List<AppDto.BagItemDto> items = new List<AppDto.BagItemDto>();
				target.items = items;
				foreach (BagItemDto item in source.items) {
					AppDto.BagItemDto result = new AppDto.BagItemDto();
					BagItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BagItemDto> items = new List<AppDto.BagItemDto>();
				target.items = items;
			}
		}

		public void BagItemListDtoConverter_fillInto(AppDto.BagItemListDto source, BagItemListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentBagItemListDto == null ) {
				target.parentBagItemListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBagItemListDto);
			if (source.items != null){
				foreach(AppDto.BagItemDto items in source.items){
					BagItemDto protobufModel = new BagItemDto();
					BagItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void CrewShortDtoConverter_fillFrom(AppDto.CrewShortDto target, CrewShortDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewShortDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewShortDto);
			}
			target.id = source.id;
			target.crewId = source.crewId;
			target.grade = source.grade;
			target.battleCrewType = source.battleCrewType;
			target.exp = source.exp;
		}

		public void CrewShortDtoConverter_fillInto(AppDto.CrewShortDto source, CrewShortDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewShortDto == null ) {
				target.parentCrewShortDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewShortDto);
			target.id=source.id;
			target.crewId=source.crewId;
			target.grade=source.grade;
			target.battleCrewType=source.battleCrewType;
			target.exp=source.exp;
		}
		public void CrewShortListDtoConverter_fillFrom(AppDto.CrewShortListDto target, CrewShortListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCrewShortListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentCrewShortListDto);
			}
			if (source.crewShortDtos != null) {
				List<AppDto.CrewShortDto> items = new List<AppDto.CrewShortDto>();
				target.crewShortDtos = items;
				foreach (CrewShortDto item in source.crewShortDtos) {
					AppDto.CrewShortDto result = new AppDto.CrewShortDto();
					CrewShortDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.CrewShortDto> items = new List<AppDto.CrewShortDto>();
				target.crewShortDtos = items;
			}
		}

		public void CrewShortListDtoConverter_fillInto(AppDto.CrewShortListDto source, CrewShortListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCrewShortListDto == null ) {
				target.parentCrewShortListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentCrewShortListDto);
			if (source.crewShortDtos != null){
				foreach(AppDto.CrewShortDto crewShortDtos in source.crewShortDtos){
					CrewShortDto protobufModel = new CrewShortDto();
					CrewShortDtoConverter_fillInto(crewShortDtos, protobufModel);
					target.crewShortDtos.Add(protobufModel);
				}
			}
		}
		public void PickItemStateNotifyConverter_fillFrom(AppDto.PickItemStateNotify target, PickItemStateNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPickItemStateNotify != null ) {
				MissionSubmitStateNotifyConverter_fillFrom(target,source.parentPickItemStateNotify);
			}
			if (source.id != null) {
				List<long> items = new List<long>();
				target.id = items;
				foreach (long item in source.id)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.id = items;
			}
			if (source.pick != null) {
				List<bool> items = new List<bool>();
				target.pick = items;
				foreach (bool item in source.pick)
                    items.Add(item);
			}else{
				List<bool> items = new List<bool>();
				target.pick = items;
			}
		}

		public void PickItemStateNotifyConverter_fillInto(AppDto.PickItemStateNotify source, PickItemStateNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPickItemStateNotify == null ) {
				target.parentPickItemStateNotify = new MissionSubmitStateNotify();
			}
			MissionSubmitStateNotifyConverter_fillInto(source,target.parentPickItemStateNotify);
			if (source.id != null){
				foreach(long id in source.id)
					target.id.Add(id);
			}
			if (source.pick != null){
				foreach(bool pick in source.pick)
					target.pick.Add(pick);
			}
		}
		public void PlayerSceneObjectChangeNotifyConverter_fillFrom(AppDto.PlayerSceneObjectChangeNotify target, PlayerSceneObjectChangeNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.removed != null) {
				List<AppDto.SceneObjectRemoveNotify> items = new List<AppDto.SceneObjectRemoveNotify>();
				target.removed = items;
				foreach (SceneObjectRemoveNotify item in source.removed) {
					AppDto.SceneObjectRemoveNotify result = new AppDto.SceneObjectRemoveNotify();
					SceneObjectRemoveNotifyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SceneObjectRemoveNotify> items = new List<AppDto.SceneObjectRemoveNotify>();
				target.removed = items;
			}
			if (source.enters != null) {
				List<AppDto.SceneObjectNotify> items = new List<AppDto.SceneObjectNotify>();
				target.enters = items;
				foreach (SceneObjectNotify item in source.enters) {
					AppDto.SceneObjectNotify result = new AppDto.SceneObjectNotify();
					SceneObjectNotifyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.SceneObjectNotify> items = new List<AppDto.SceneObjectNotify>();
				target.enters = items;
			}
		}

		public void PlayerSceneObjectChangeNotifyConverter_fillInto(AppDto.PlayerSceneObjectChangeNotify source, PlayerSceneObjectChangeNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.removed != null){
				foreach(AppDto.SceneObjectRemoveNotify removed in source.removed){
					SceneObjectRemoveNotify protobufModel = new SceneObjectRemoveNotify();
					SceneObjectRemoveNotifyConverter_fillInto(removed, protobufModel);
					target.removed.Add(protobufModel);
				}
			}
			if (source.enters != null){
				foreach(AppDto.SceneObjectNotify enters in source.enters){
					SceneObjectNotify protobufModel = new SceneObjectNotify();
					SceneObjectNotifyConverter_fillInto(enters, protobufModel);
					target.enters.Add(protobufModel);
				}
			}
		}
		public void FactionMissionIdDtoConverter_fillFrom(AppDto.FactionMissionIdDto target, FactionMissionIdDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.factionMissionIds != null) {
				List<int> items = new List<int>();
				target.factionMissionIds = items;
				foreach (int item in source.factionMissionIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.factionMissionIds = items;
			}
			if ( source.parentFactionMissionIdDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentFactionMissionIdDto);
			}
			target.dailyFinishCount = source.dailyFinishCount;
		}

		public void FactionMissionIdDtoConverter_fillInto(AppDto.FactionMissionIdDto source, FactionMissionIdDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.factionMissionIds != null){
				foreach(int factionMissionIds in source.factionMissionIds)
					target.factionMissionIds.Add(factionMissionIds);
			}
			if ( target.parentFactionMissionIdDto == null ) {
				target.parentFactionMissionIdDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentFactionMissionIdDto);
			target.dailyFinishCount=source.dailyFinishCount;
		}
		public void CrewFavorConverter_fillFrom(AppDto.CrewFavor target, CrewFavor source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.need = source.need;
			target.icon = source.icon;
			if (source.unlockContentIds != null) {
				List<int> items = new List<int>();
				target.unlockContentIds = items;
                foreach (int item in source.unlockContentIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.unlockContentIds = items;
			}
		}

		public void CrewFavorConverter_fillInto(AppDto.CrewFavor source, CrewFavor target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.need=source.need;
			if(source.icon!=null)
				target.icon = source.icon;
			if (source.unlockContentIds != null){
				foreach(int unlockContentIds in source.unlockContentIds)
					target.unlockContentIds.Add(unlockContentIds);
			}
		}
		public void FactionMissionRateConverter_fillFrom(AppDto.FactionMissionRate target, FactionMissionRate source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.minGrade = source.minGrade;
			target.maxGrade = source.maxGrade;
			target.missionId = source.missionId;
			target.weight = source.weight;
			target.ringCount = source.ringCount;
		}

		public void FactionMissionRateConverter_fillInto(AppDto.FactionMissionRate source, FactionMissionRate target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.minGrade=source.minGrade;
			target.maxGrade=source.maxGrade;
			target.missionId=source.missionId;
			target.weight=source.weight;
			target.ringCount=source.ringCount;
		}
		public void OnIncreaseFavorDtoConverter_fillFrom(AppDto.OnIncreaseFavorDto target, OnIncreaseFavorDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentOnIncreaseFavorDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentOnIncreaseFavorDto);
			}
			target.increaseVal = source.increaseVal;
			target.favor = source.favor;
		}

		public void OnIncreaseFavorDtoConverter_fillInto(AppDto.OnIncreaseFavorDto source, OnIncreaseFavorDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentOnIncreaseFavorDto == null ) {
				target.parentOnIncreaseFavorDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentOnIncreaseFavorDto);
			target.increaseVal=source.increaseVal;
			target.favor=source.favor;
		}
		public void NpcSceneConstableMonsterConverter_fillFrom(AppDto.NpcSceneConstableMonster target, NpcSceneConstableMonster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcSceneConstableMonster != null ) {
				NpcSceneMonsterConverter_fillFrom(target,source.parentNpcSceneConstableMonster);
			}
		}

		public void NpcSceneConstableMonsterConverter_fillInto(AppDto.NpcSceneConstableMonster source, NpcSceneConstableMonster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcSceneConstableMonster == null ) {
				target.parentNpcSceneConstableMonster = new NpcSceneMonster();
			}
			NpcSceneMonsterConverter_fillInto(source,target.parentNpcSceneConstableMonster);
		}
		public void NpcSceneMonsterConverter_fillFrom(AppDto.NpcSceneMonster target, NpcSceneMonster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcSceneMonster != null ) {
				NpcVariableConverter_fillFrom(target,source.parentNpcSceneMonster);
			}
			target.sceneAppearanceStaticGroupId = source.sceneAppearanceStaticGroupId;
			target.npcAppearanceId = source.npcAppearanceId;
			target.dialogId = source.dialogId;
			if (source.dialogFunctionIdStr != null) {
				List<int> items = new List<int>();
				target.dialogFunctionIdStr = items;
				foreach (int item in source.dialogFunctionIdStr)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.dialogFunctionIdStr = items;
			}
		}

		public void NpcSceneMonsterConverter_fillInto(AppDto.NpcSceneMonster source, NpcSceneMonster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcSceneMonster == null ) {
				target.parentNpcSceneMonster = new NpcVariable();
			}
			NpcVariableConverter_fillInto(source,target.parentNpcSceneMonster);
			target.sceneAppearanceStaticGroupId=source.sceneAppearanceStaticGroupId;
			target.npcAppearanceId=source.npcAppearanceId;
			target.dialogId=source.dialogId;
			if (source.dialogFunctionIdStr != null){
				foreach(int dialogFunctionIdStr in source.dialogFunctionIdStr)
					target.dialogFunctionIdStr.Add(dialogFunctionIdStr);
			}
		}
		public void NpcBattleNotifyConverter_fillFrom(AppDto.NpcBattleNotify target, NpcBattleNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.npcUniqueId = source.npcUniqueId;
			target.battleId = source.battleId;
		}

		public void NpcBattleNotifyConverter_fillInto(AppDto.NpcBattleNotify source, NpcBattleNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.npcUniqueId=source.npcUniqueId;
			target.battleId=source.battleId;
		}
		public void BracerEnterDtoConverter_fillFrom(AppDto.BracerEnterDto target, BracerEnterDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentBracerEnterDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBracerEnterDto);
			}
			if (source.missionList != null) {
				List<AppDto.BracerMissionDto> items = new List<AppDto.BracerMissionDto>();
				target.missionList = items;
				foreach (BracerMissionDto item in source.missionList) {
					AppDto.BracerMissionDto result = new AppDto.BracerMissionDto();
					BracerMissionDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BracerMissionDto> items = new List<AppDto.BracerMissionDto>();
				target.missionList = items;
			}
			target.bracerRank = source.bracerRank;
			target.bracerExp = source.bracerExp;
		}

		public void BracerEnterDtoConverter_fillInto(AppDto.BracerEnterDto source, BracerEnterDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentBracerEnterDto == null ) {
				target.parentBracerEnterDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBracerEnterDto);
			if (source.missionList != null){
				foreach(AppDto.BracerMissionDto missionList in source.missionList){
					BracerMissionDto protobufModel = new BracerMissionDto();
					BracerMissionDtoConverter_fillInto(missionList, protobufModel);
					target.missionList.Add(protobufModel);
				}
			}
			target.bracerRank=source.bracerRank;
			target.bracerExp=source.bracerExp;
		}
		public void BracerMissionDtoConverter_fillFrom(AppDto.BracerMissionDto target, BracerMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentBracerMissionDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBracerMissionDto);
			}
			target.missionId = source.missionId;
			target.progress = source.progress;
		}

		public void BracerMissionDtoConverter_fillInto(AppDto.BracerMissionDto source, BracerMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentBracerMissionDto == null ) {
				target.parentBracerMissionDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBracerMissionDto);
			target.missionId=source.missionId;
			target.progress=source.progress;
		}
		public void BattlePositionConverter_fillFrom(AppDto.BattlePosition target, BattlePosition source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.monsterSideId = source.monsterSideId;
			target.index = source.index;
			target.position = source.position;
		}

		public void BattlePositionConverter_fillInto(AppDto.BattlePosition source, BattlePosition target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.monsterSideId=source.monsterSideId;
			target.index=source.index;
			if(source.position!=null)
				target.position = source.position;
		}
		public void BracerMissionCfgConverter_fillFrom(AppDto.BracerMissionCfg target, BracerMissionCfg source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.missionDesc = source.missionDesc;
			target.bracerRank = source.bracerRank;
			target.targetVal = source.targetVal;
			target.rewardExp = source.rewardExp;
			target.conditionId = source.conditionId;
			if (source.conditionArgs != null) {
				List<string> items = new List<string>();
				target.conditionArgs = items;
				foreach (string item in source.conditionArgs)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.conditionArgs = items;
			}
			target.id = source.id;
			target.missionGrade = source.missionGrade;
			target.playerLvMin = source.playerLvMin;
			target.playerLvMax = source.playerLvMax;
			target.weight = source.weight;
		}

		public void BracerMissionCfgConverter_fillInto(AppDto.BracerMissionCfg source, BracerMissionCfg target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.missionDesc!=null)
				target.missionDesc = source.missionDesc;
			target.bracerRank=source.bracerRank;
			target.targetVal=source.targetVal;
			target.rewardExp=source.rewardExp;
			target.conditionId=source.conditionId;
			if (source.conditionArgs != null){
				foreach(string conditionArgs in source.conditionArgs)
					target.conditionArgs.Add(conditionArgs);
			}
			target.id=source.id;
			target.missionGrade=source.missionGrade;
			target.playerLvMin=source.playerLvMin;
			target.playerLvMax=source.playerLvMax;
			target.weight=source.weight;
		}
		public void PlayerUrgentMissionDtoConverter_fillFrom(AppDto.PlayerUrgentMissionDto target, PlayerUrgentMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerUrgentMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerUrgentMissionDto);
			}
		}

		public void PlayerUrgentMissionDtoConverter_fillInto(AppDto.PlayerUrgentMissionDto source, PlayerUrgentMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerUrgentMissionDto == null ) {
				target.parentPlayerUrgentMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerUrgentMissionDto);
		}
		public void DelegateAcceptConditionsConverter_fillFrom(AppDto.DelegateAcceptConditions target, DelegateAcceptConditions source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.gradeRange != null) {
				List<int> items = new List<int>();
				target.gradeRange = items;
				foreach (int item in source.gradeRange)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.gradeRange = items;
			}
			target.param = source.param;
			target.desc = source.desc;
			target.model = source.model;
		}

		public void DelegateAcceptConditionsConverter_fillInto(AppDto.DelegateAcceptConditions source, DelegateAcceptConditions target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.gradeRange != null){
				foreach(int gradeRange in source.gradeRange)
					target.gradeRange.Add(gradeRange);
			}
			if(source.param!=null)
				target.param = source.param;
			if(source.desc!=null)
				target.desc = source.desc;
			target.model=source.model;
		}
		public void DelegateMissionConverter_fillFrom(AppDto.DelegateMission target, DelegateMission source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.content = source.content;
			target.successFormula = source.successFormula;
			target.superSuccessFormula = source.superSuccessFormula;
			target.gainItem = source.gainItem;
			target.type = source.type;
			target.assistIntegralFormula = source.assistIntegralFormula;
			target.gainItemFormula = source.gainItemFormula;
			target.icon = source.icon;
		}

		public void DelegateMissionConverter_fillInto(AppDto.DelegateMission source, DelegateMission target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.content!=null)
				target.content = source.content;
			if(source.successFormula!=null)
				target.successFormula = source.successFormula;
			if(source.superSuccessFormula!=null)
				target.superSuccessFormula = source.superSuccessFormula;
			if(source.gainItem!=null)
				target.gainItem = source.gainItem;
			target.type=source.type;
			if(source.assistIntegralFormula!=null)
				target.assistIntegralFormula = source.assistIntegralFormula;
			if(source.gainItemFormula!=null)
				target.gainItemFormula = source.gainItemFormula;
			if(source.icon!=null)
				target.icon = source.icon;
		}
		public void DelegateRandomAwardConverter_fillFrom(AppDto.DelegateRandomAward target, DelegateRandomAward source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.gradeRange != null) {
				List<int> items = new List<int>();
				target.gradeRange = items;
				foreach (int item in source.gradeRange)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.gradeRange = items;
			}
			target.itemId = source.itemId;
			if (source.numRange != null) {
				List<int> items = new List<int>();
				target.numRange = items;
				foreach (int item in source.numRange)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.numRange = items;
			}
		}

		public void DelegateRandomAwardConverter_fillInto(AppDto.DelegateRandomAward source, DelegateRandomAward target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.gradeRange != null){
				foreach(int gradeRange in source.gradeRange)
					target.gradeRange.Add(gradeRange);
			}
			target.itemId=source.itemId;
			if (source.numRange != null){
				foreach(int numRange in source.numRange)
					target.numRange.Add(numRange);
			}
		}
		public void PlayerGhostMissionDtoConverter_fillFrom(AppDto.PlayerGhostMissionDto target, PlayerGhostMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerGhostMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerGhostMissionDto);
			}
			target.curRings = source.curRings;
			target.toDayFinishCount = source.toDayFinishCount;
			target.ghostRingCount = source.ghostRingCount;
		}

		public void PlayerGhostMissionDtoConverter_fillInto(AppDto.PlayerGhostMissionDto source, PlayerGhostMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerGhostMissionDto == null ) {
				target.parentPlayerGhostMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerGhostMissionDto);
			target.curRings=source.curRings;
			target.toDayFinishCount=source.toDayFinishCount;
			target.ghostRingCount=source.ghostRingCount;
		}
		public void DelegateMissionDtoConverter_fillFrom(AppDto.DelegateMissionDto target, DelegateMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentDelegateMissionDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentDelegateMissionDto);
			}
			target.id = source.id;
			if (source.conditions != null) {
				List<int> items = new List<int>();
				target.conditions = items;
                foreach (int item in source.conditions)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.conditions = items;
			}
			target.needTime = source.needTime;
			target.finishTime = source.finishTime;
			if (source.crewIds != null) {
				List<long> items = new List<long>();
				target.crewIds = items;
                foreach (long item in source.crewIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.crewIds = items;
			}
			target.friendId = source.friendId;
			target.randomAwardId = source.randomAwardId;
		}

		public void DelegateMissionDtoConverter_fillInto(AppDto.DelegateMissionDto source, DelegateMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentDelegateMissionDto == null ) {
				target.parentDelegateMissionDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentDelegateMissionDto);
			target.id=source.id;
			if (source.conditions != null){
				foreach(int conditions in source.conditions)
					target.conditions.Add(conditions);
			}
			target.needTime=source.needTime;
			target.finishTime=source.finishTime;
			if (source.crewIds != null){
				foreach(long crewIds in source.crewIds)
					target.crewIds.Add(crewIds);
			}
			target.friendId=source.friendId;
			target.randomAwardId=source.randomAwardId;
		}
		public void DelegateMissionHoleDtoConverter_fillFrom(AppDto.DelegateMissionHoleDto target, DelegateMissionHoleDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentDelegateMissionHoleDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentDelegateMissionHoleDto);
			}
			if (source.delegateMissionDtos != null) {
				List<AppDto.DelegateMissionDto> items = new List<AppDto.DelegateMissionDto>();
				target.delegateMissionDtos = items;
				foreach (DelegateMissionDto item in source.delegateMissionDtos) {
					AppDto.DelegateMissionDto result = new AppDto.DelegateMissionDto();
					DelegateMissionDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.DelegateMissionDto> items = new List<AppDto.DelegateMissionDto>();
				target.delegateMissionDtos = items;
			}
			target.acceptNum = source.acceptNum;
			target.acceptLimit = source.acceptLimit;
			if (source.helpFriend != null) {
				List<long> items = new List<long>();
				target.helpFriend = items;
                foreach (long item in source.helpFriend)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.helpFriend = items;
			}
		}

		public void DelegateMissionHoleDtoConverter_fillInto(AppDto.DelegateMissionHoleDto source, DelegateMissionHoleDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentDelegateMissionHoleDto == null ) {
				target.parentDelegateMissionHoleDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentDelegateMissionHoleDto);
			if (source.delegateMissionDtos != null){
				foreach(AppDto.DelegateMissionDto delegateMissionDtos in source.delegateMissionDtos){
					DelegateMissionDto protobufModel = new DelegateMissionDto();
					DelegateMissionDtoConverter_fillInto(delegateMissionDtos, protobufModel);
					target.delegateMissionDtos.Add(protobufModel);
				}
			}
			target.acceptNum=source.acceptNum;
			target.acceptLimit=source.acceptLimit;
			if (source.helpFriend != null){
				foreach(long helpFriend in source.helpFriend)
					target.helpFriend.Add(helpFriend);
			}
		}
		public void DelegateMissionStateDtoConverter_fillFrom(AppDto.DelegateMissionStateDto target, DelegateMissionStateDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentDelegateMissionStateDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentDelegateMissionStateDto);
			}
			target.state = source.state;
		}

		public void DelegateMissionStateDtoConverter_fillInto(AppDto.DelegateMissionStateDto source, DelegateMissionStateDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentDelegateMissionStateDto == null ) {
				target.parentDelegateMissionStateDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentDelegateMissionStateDto);
			target.state=source.state;
		}
		public void NpcSceneAncientWarcraftMonsterConverter_fillFrom(AppDto.NpcSceneAncientWarcraftMonster target, NpcSceneAncientWarcraftMonster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcSceneAncientWarcraftMonster != null ) {
				NpcSceneMonsterConverter_fillFrom(target,source.parentNpcSceneAncientWarcraftMonster);
			}
		}

		public void NpcSceneAncientWarcraftMonsterConverter_fillInto(AppDto.NpcSceneAncientWarcraftMonster source, NpcSceneAncientWarcraftMonster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcSceneAncientWarcraftMonster == null ) {
				target.parentNpcSceneAncientWarcraftMonster = new NpcSceneMonster();
			}
			NpcSceneMonsterConverter_fillInto(source,target.parentNpcSceneAncientWarcraftMonster);
		}
		public void NpcSceneEvilSnakeMonsterConverter_fillFrom(AppDto.NpcSceneEvilSnakeMonster target, NpcSceneEvilSnakeMonster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentNpcSceneEvilSnakeMonster != null ) {
				NpcSceneMonsterConverter_fillFrom(target,source.parentNpcSceneEvilSnakeMonster);
			}
		}

		public void NpcSceneEvilSnakeMonsterConverter_fillInto(AppDto.NpcSceneEvilSnakeMonster source, NpcSceneEvilSnakeMonster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentNpcSceneEvilSnakeMonster == null ) {
				target.parentNpcSceneEvilSnakeMonster = new NpcSceneMonster();
			}
			NpcSceneMonsterConverter_fillInto(source,target.parentNpcSceneEvilSnakeMonster);
		}
		public void NpcDisappearNotifyConverter_fillFrom(AppDto.NpcDisappearNotify target, NpcDisappearNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId = source.sceneId;
			target.id = source.id;
		}

		public void NpcDisappearNotifyConverter_fillInto(AppDto.NpcDisappearNotify source, NpcDisappearNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId=source.sceneId;
			target.id=source.id;
		}
		public void PlayerTipDtoConverter_fillFrom(AppDto.PlayerTipDto target, PlayerTipDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerTipDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerTipDto);
			}
			if (source.labelInfos != null) {
				List<string> items = new List<string>();
				target.labelInfos = items;
				foreach (string item in source.labelInfos)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.labelInfos = items;
			}
			target.headId = source.headId;
			target.countryId = source.countryId;
			target.tradeUnionId = source.tradeUnionId;
			target.teamSize = source.teamSize;
		}

		public void PlayerTipDtoConverter_fillInto(AppDto.PlayerTipDto source, PlayerTipDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerTipDto == null ) {
				target.parentPlayerTipDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerTipDto);
			if (source.labelInfos != null){
				foreach(string labelInfos in source.labelInfos)
					target.labelInfos.Add(labelInfos);
			}
			target.headId=source.headId;
			target.countryId=source.countryId;
			target.tradeUnionId=source.tradeUnionId;
			target.teamSize=source.teamSize;
		}
		public void NpcDynamicMonsterConverter_fillFrom(AppDto.NpcDynamicMonster target, NpcDynamicMonster source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.sceneAppearanceStaticGroupIds != null) {
				List<int> items = new List<int>();
				target.sceneAppearanceStaticGroupIds = items;
				foreach (int item in source.sceneAppearanceStaticGroupIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.sceneAppearanceStaticGroupIds = items;
			}
			if (source.npcAppearanceIds != null) {
				List<int> items = new List<int>();
				target.npcAppearanceIds = items;
				foreach (int item in source.npcAppearanceIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.npcAppearanceIds = items;
			}
			if ( source.parentNpcDynamicMonster != null ) {
				NpcMonsterConverter_fillFrom(target,source.parentNpcDynamicMonster);
			}
		}

		public void NpcDynamicMonsterConverter_fillInto(AppDto.NpcDynamicMonster source, NpcDynamicMonster target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.sceneAppearanceStaticGroupIds != null){
				foreach(int sceneAppearanceStaticGroupIds in source.sceneAppearanceStaticGroupIds)
					target.sceneAppearanceStaticGroupIds.Add(sceneAppearanceStaticGroupIds);
			}
			if (source.npcAppearanceIds != null){
				foreach(int npcAppearanceIds in source.npcAppearanceIds)
					target.npcAppearanceIds.Add(npcAppearanceIds);
			}
			if ( target.parentNpcDynamicMonster == null ) {
				target.parentNpcDynamicMonster = new NpcMonster();
			}
			NpcMonsterConverter_fillInto(source,target.parentNpcDynamicMonster);
		}
		public void RefuseTeamInvitationNotifyConverter_fillFrom(AppDto.RefuseTeamInvitationNotify target, RefuseTeamInvitationNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.refusePlayerName = source.refusePlayerName;
		}

		public void RefuseTeamInvitationNotifyConverter_fillInto(AppDto.RefuseTeamInvitationNotify source, RefuseTeamInvitationNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.refusePlayerName!=null)
				target.refusePlayerName = source.refusePlayerName;
		}
		public void RefuseTeamRequestNotifyConverter_fillFrom(AppDto.RefuseTeamRequestNotify target, RefuseTeamRequestNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.refusePlayerName = source.refusePlayerName;
		}

		public void RefuseTeamRequestNotifyConverter_fillInto(AppDto.RefuseTeamRequestNotify source, RefuseTeamRequestNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.refusePlayerName!=null)
				target.refusePlayerName = source.refusePlayerName;
		}
		public void BracerMissionListDtoConverter_fillFrom(AppDto.BracerMissionListDto target, BracerMissionListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentBracerMissionListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBracerMissionListDto);
			}
			if (source.missionList != null) {
				List<AppDto.BracerMissionDto> items = new List<AppDto.BracerMissionDto>();
				target.missionList = items;
				foreach (BracerMissionDto item in source.missionList) {
					AppDto.BracerMissionDto result = new AppDto.BracerMissionDto();
					BracerMissionDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BracerMissionDto> items = new List<AppDto.BracerMissionDto>();
				target.missionList = items;
			}
		}

		public void BracerMissionListDtoConverter_fillInto(AppDto.BracerMissionListDto source, BracerMissionListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentBracerMissionListDto == null ) {
				target.parentBracerMissionListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBracerMissionListDto);
			if (source.missionList != null){
				foreach(AppDto.BracerMissionDto missionList in source.missionList){
					BracerMissionDto protobufModel = new BracerMissionDto();
					BracerMissionDtoConverter_fillInto(missionList, protobufModel);
					target.missionList.Add(protobufModel);
				}
			}
		}
		public void CrewRecruitTypeConverter_fillFrom(AppDto.CrewRecruitType target, CrewRecruitType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.planId = source.planId;
			target.times = source.times;
			target.virtualItemId = source.virtualItemId;
			target.virtualItemCount = source.virtualItemCount;
		}

		public void CrewRecruitTypeConverter_fillInto(AppDto.CrewRecruitType source, CrewRecruitType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.planId=source.planId;
			target.times=source.times;
			target.virtualItemId=source.virtualItemId;
			target.virtualItemCount=source.virtualItemCount;
		}
		public void CrewRecordConverter_fillFrom(AppDto.CrewRecord target, CrewRecord source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.gender = source.gender;
			target.age = source.age;
			target.birth = source.birth;
			target.occupation = source.occupation;
			target.introduction = source.introduction;
			if (source.dialogContent != null) {
				List<string> items = new List<string>();
				target.dialogContent = items;
				foreach (string item in source.dialogContent)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.dialogContent = items;
			}
		}

		public void CrewRecordConverter_fillInto(AppDto.CrewRecord source, CrewRecord target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.gender!=null)
				target.gender = source.gender;
			target.age=source.age;
			if(source.birth!=null)
				target.birth = source.birth;
			if(source.occupation!=null)
				target.occupation = source.occupation;
			if(source.introduction!=null)
				target.introduction = source.introduction;
			if (source.dialogContent != null){
				foreach(string dialogContent in source.dialogContent)
					target.dialogContent.Add(dialogContent);
			}
		}
		public void BattleDemoRequestNotifyConverter_fillFrom(AppDto.BattleDemoRequestNotify target, BattleDemoRequestNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.resquestId = source.resquestId;
			target.resquestName = source.resquestName;
		}

		public void BattleDemoRequestNotifyConverter_fillInto(AppDto.BattleDemoRequestNotify source, BattleDemoRequestNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.resquestId=source.resquestId;
			if(source.resquestName!=null)
				target.resquestName = source.resquestName;
		}
		public void RefuseBattleDemoNotifyConverter_fillFrom(AppDto.RefuseBattleDemoNotify target, RefuseBattleDemoNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.resquestId = source.resquestId;
			target.resquestName = source.resquestName;
		}

		public void RefuseBattleDemoNotifyConverter_fillInto(AppDto.RefuseBattleDemoNotify source, RefuseBattleDemoNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.resquestId=source.resquestId;
			if(source.resquestName!=null)
				target.resquestName = source.resquestName;
		}
		public void FunTooltipConverter_fillFrom(AppDto.FunTooltip target, FunTooltip source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.parentId = source.parentId;
			target.title = source.title;
			target.description = source.description;
		}

		public void FunTooltipConverter_fillInto(AppDto.FunTooltip source, FunTooltip target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.parentId=source.parentId;
			if(source.title!=null)
				target.title = source.title;
			if(source.description!=null)
				target.description = source.description;
		}
		public void MainCrewInfoNotifyConverter_fillFrom(AppDto.MainCrewInfoNotify target, MainCrewInfoNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.crewId = source.crewId;
			target.grade = source.grade;
		}

		public void MainCrewInfoNotifyConverter_fillInto(AppDto.MainCrewInfoNotify source, MainCrewInfoNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.crewId=source.crewId;
			target.grade=source.grade;
		}
		public void FunctionFrameStateConverter_fillFrom(AppDto.FunctionFrameState target, FunctionFrameState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.virtualItenEnumIds != null) {
				List<int> items = new List<int>();
				target.virtualItenEnumIds = items;
                foreach (int item in source.virtualItenEnumIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.virtualItenEnumIds = items;
			}
			target.closeTiming = source.closeTiming;
			target.name = source.name;
		}

		public void FunctionFrameStateConverter_fillInto(AppDto.FunctionFrameState source, FunctionFrameState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.virtualItenEnumIds != null){
				foreach(int virtualItenEnumIds in source.virtualItenEnumIds)
					target.virtualItenEnumIds.Add(virtualItenEnumIds);
			}
			target.closeTiming=source.closeTiming;
			if(source.name!=null)
				target.name = source.name;
		}
		public void CollectionItemCategorySubmitDtoConverter_fillFrom(AppDto.CollectionItemCategorySubmitDto target, CollectionItemCategorySubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentCollectionItemCategorySubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentCollectionItemCategorySubmitDto);
			}
			target.itemCategoryId = source.itemCategoryId;
						if (source.acceptNpc!=null) {
				AppDto.NpcInfoDto retAcceptNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retAcceptNpc, source.acceptNpc);
				target.acceptNpc = retAcceptNpc;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
					}

		public void CollectionItemCategorySubmitDtoConverter_fillInto(AppDto.CollectionItemCategorySubmitDto source, CollectionItemCategorySubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentCollectionItemCategorySubmitDto == null ) {
				target.parentCollectionItemCategorySubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentCollectionItemCategorySubmitDto);
			target.itemCategoryId=source.itemCategoryId;
			if(source.acceptNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.acceptNpc, protobufModel);
				target.acceptNpc = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
		}
		public void ItemCategoryConverter_fillFrom(AppDto.ItemCategory target, ItemCategory source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.icon = source.icon;
			target.description = source.description;
			target.introduction = source.introduction;
			if (source.itemIds != null) {
				List<int> items = new List<int>();
				target.itemIds = items;
				foreach (int item in source.itemIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.itemIds = items;
			}
		}

		public void ItemCategoryConverter_fillInto(AppDto.ItemCategory source, ItemCategory target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.icon!=null)
				target.icon = source.icon;
			if(source.description!=null)
				target.description = source.description;
			if(source.introduction!=null)
				target.introduction = source.introduction;
			if (source.itemIds != null){
				foreach(int itemIds in source.itemIds)
					target.itemIds.Add(itemIds);
			}
		}
		public void PlayerTreasuryMissionDtoConverter_fillFrom(AppDto.PlayerTreasuryMissionDto target, PlayerTreasuryMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.dailyRewardCount = source.dailyRewardCount;
			if ( source.parentPlayerTreasuryMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerTreasuryMissionDto);
			}
		}

		public void PlayerTreasuryMissionDtoConverter_fillInto(AppDto.PlayerTreasuryMissionDto source, PlayerTreasuryMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.dailyRewardCount=source.dailyRewardCount;
			if ( target.parentPlayerTreasuryMissionDto == null ) {
				target.parentPlayerTreasuryMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerTreasuryMissionDto);
		}
		public void ArenaInfoDtoConverter_fillFrom(AppDto.ArenaInfoDto target, ArenaInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentArenaInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentArenaInfoDto);
			}
			if (source.opponents != null) {
				List<AppDto.OpponentInfoDto> items = new List<AppDto.OpponentInfoDto>();
				target.opponents = items;
				foreach (OpponentInfoDto item in source.opponents) {
					AppDto.OpponentInfoDto result = new AppDto.OpponentInfoDto();
					OpponentInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.OpponentInfoDto> items = new List<AppDto.OpponentInfoDto>();
				target.opponents = items;
			}
			target.trophyCount = source.trophyCount;
			target.remainTimes = source.remainTimes;
			target.refreshCdAt = source.refreshCdAt;
						if (source.rankInfoDto!=null) {
				AppDto.RankInfoDto retRankInfoDto = new AppDto.RankInfoDto();
				RankInfoDtoConverter_fillFrom(retRankInfoDto, source.rankInfoDto);
				target.rankInfoDto = retRankInfoDto;
			}
					}

		public void ArenaInfoDtoConverter_fillInto(AppDto.ArenaInfoDto source, ArenaInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentArenaInfoDto == null ) {
				target.parentArenaInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentArenaInfoDto);
			if (source.opponents != null){
				foreach(AppDto.OpponentInfoDto opponents in source.opponents){
					OpponentInfoDto protobufModel = new OpponentInfoDto();
					OpponentInfoDtoConverter_fillInto(opponents, protobufModel);
					target.opponents.Add(protobufModel);
				}
			}
			target.trophyCount=source.trophyCount;
			target.remainTimes=source.remainTimes;
			target.refreshCdAt=source.refreshCdAt;
			if(source.rankInfoDto!=null){
				RankInfoDto protobufModel = new RankInfoDto();
				RankInfoDtoConverter_fillInto(source.rankInfoDto, protobufModel);
				target.rankInfoDto = protobufModel;
			}
		}
		public void ArenaReportDtoConverter_fillFrom(AppDto.ArenaReportDto target, ArenaReportDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentArenaReportDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentArenaReportDto);
			}
			target.id = source.id;
			target.attackId = source.attackId;
			target.attackName = source.attackName;
			target.defenseId = source.defenseId;
			target.defenseName = source.defenseName;
			target.win = source.win;
			target.attackerTrophy = source.attackerTrophy;
			target.defenseTrophy = source.defenseTrophy;
			target.type = source.type;
			target.revenge = source.revenge;
		}

		public void ArenaReportDtoConverter_fillInto(AppDto.ArenaReportDto source, ArenaReportDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentArenaReportDto == null ) {
				target.parentArenaReportDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentArenaReportDto);
			target.id=source.id;
			target.attackId=source.attackId;
			if(source.attackName!=null)
				target.attackName = source.attackName;
			target.defenseId=source.defenseId;
			if(source.defenseName!=null)
				target.defenseName = source.defenseName;
			target.win=source.win;
			target.attackerTrophy=source.attackerTrophy;
			target.defenseTrophy=source.defenseTrophy;
			target.type=source.type;
			target.revenge=source.revenge;
		}
		public void OpponentInfoDtoConverter_fillFrom(AppDto.OpponentInfoDto target, OpponentInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentOpponentInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentOpponentInfoDto);
			}
						if (source.playerInfo!=null) {
				AppDto.ShortPlayerDto retPlayerInfo = new AppDto.ShortPlayerDto();
				ShortPlayerDtoConverter_fillFrom(retPlayerInfo, source.playerInfo);
				target.playerInfo = retPlayerInfo;
			}
						target.trophyCount = source.trophyCount;
						if (source.dressInfoDto!=null) {
				AppDto.PlayerDressInfoDto retDressInfoDto = new AppDto.PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillFrom(retDressInfoDto, source.dressInfoDto);
				target.dressInfoDto = retDressInfoDto;
			}
					}

		public void OpponentInfoDtoConverter_fillInto(AppDto.OpponentInfoDto source, OpponentInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentOpponentInfoDto == null ) {
				target.parentOpponentInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentOpponentInfoDto);
			if(source.playerInfo!=null){
				ShortPlayerDto protobufModel = new ShortPlayerDto();
				ShortPlayerDtoConverter_fillInto(source.playerInfo, protobufModel);
				target.playerInfo = protobufModel;
			}
			target.trophyCount=source.trophyCount;
			if(source.dressInfoDto!=null){
				PlayerDressInfoDto protobufModel = new PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillInto(source.dressInfoDto, protobufModel);
				target.dressInfoDto = protobufModel;
			}
		}
		public void BattleTypeConverter_fillFrom(AppDto.BattleType target, BattleType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.popWin = source.popWin;
		}

		public void BattleTypeConverter_fillInto(AppDto.BattleType source, BattleType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.popWin=source.popWin;
		}
		public void VideoSoldierSwtichStateConverter_fillFrom(AppDto.VideoSoldierSwtichState target, VideoSoldierSwtichState source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentVideoSoldierSwtichState != null ) {
				VideoTargetStateConverter_fillFrom(target,source.parentVideoSoldierSwtichState);
			}
						if (source.soldier!=null) {
				AppDto.VideoSoldier retSoldier = new AppDto.VideoSoldier();
				VideoSoldierConverter_fillFrom(retSoldier, source.soldier);
				target.soldier = retSoldier;
			}
					}

		public void VideoSoldierSwtichStateConverter_fillInto(AppDto.VideoSoldierSwtichState source, VideoSoldierSwtichState target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentVideoSoldierSwtichState == null ) {
				target.parentVideoSoldierSwtichState = new VideoTargetState();
			}
			VideoTargetStateConverter_fillInto(source,target.parentVideoSoldierSwtichState);
			if(source.soldier!=null){
				VideoSoldier protobufModel = new VideoSoldier();
				VideoSoldierConverter_fillInto(source.soldier, protobufModel);
				target.soldier = protobufModel;
			}
		}
		public void PropsExtraDto_17Converter_fillFrom(AppDto.PropsExtraDto_17 target, PropsExtraDto_17 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsExtraDto_17 != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPropsExtraDto_17);
			}
			target.sceneId = source.sceneId;
			target.x = source.x;
			target.z = source.z;
		}

		public void PropsExtraDto_17Converter_fillInto(AppDto.PropsExtraDto_17 source, PropsExtraDto_17 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsExtraDto_17 == null ) {
				target.parentPropsExtraDto_17 = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPropsExtraDto_17);
			target.sceneId=source.sceneId;
			target.x=source.x;
			target.z=source.z;
		}
		public void QuestionConverter_fillFrom(AppDto.Question target, Question source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.type = source.type;
			target.description = source.description;
			if (source.answers != null) {
				List<string> items = new List<string>();
				target.answers = items;
				foreach (string item in source.answers)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.answers = items;
			}
			target.correctIndex = source.correctIndex;
		}

		public void QuestionConverter_fillInto(AppDto.Question source, Question target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.type=source.type;
			if(source.description!=null)
				target.description = source.description;
			if (source.answers != null){
				foreach(string answers in source.answers)
					target.answers.Add(answers);
			}
			target.correctIndex=source.correctIndex;
		}
		public void QuestionTypeConverter_fillFrom(AppDto.QuestionType target, QuestionType source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.amount = source.amount;
			target.show = source.show;
			target.desc = source.desc;
			target.limitTime = source.limitTime;
			target.repeatable = source.repeatable;
			target.exp = source.exp;
			target.expWrongRate = source.expWrongRate;
			target.crewExp = source.crewExp;
			target.crewExpWrongRate = source.crewExpWrongRate;
			target.wealth = source.wealth;
			target.wealthWrongRate = source.wealthWrongRate;
			target.spendTime = source.spendTime;
			target.awardItem = source.awardItem;
			target.topFallItemId = source.topFallItemId;
			target.luckFallItemid = source.luckFallItemid;
		}

		public void QuestionTypeConverter_fillInto(AppDto.QuestionType source, QuestionType target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.amount=source.amount;
			target.show=source.show;
			if(source.desc!=null)
				target.desc = source.desc;
			target.limitTime=source.limitTime;
			target.repeatable=source.repeatable;
			if(source.exp!=null)
				target.exp = source.exp;
			target.expWrongRate=source.expWrongRate;
			if(source.crewExp!=null)
				target.crewExp = source.crewExp;
			target.crewExpWrongRate=source.crewExpWrongRate;
			if(source.wealth!=null)
				target.wealth = source.wealth;
			target.wealthWrongRate=source.wealthWrongRate;
			target.spendTime=source.spendTime;
			if(source.awardItem!=null)
				target.awardItem = source.awardItem;
			target.topFallItemId=source.topFallItemId;
			target.luckFallItemid=source.luckFallItemid;
		}
		public void TowerCfgConverter_fillFrom(AppDto.TowerCfg target, TowerCfg source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.sceneId = source.sceneId;
			target.towerReward = source.towerReward;
			target.towerFallRewardId = source.towerFallRewardId;
			if (source.npcMonsterIds != null) {
				List<int> items = new List<int>();
				target.npcMonsterIds = items;
				foreach (int item in source.npcMonsterIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.npcMonsterIds = items;
			}
			target.npcGeneralId = source.npcGeneralId;
		}

		public void TowerCfgConverter_fillInto(AppDto.TowerCfg source, TowerCfg target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.sceneId=source.sceneId;
			target.towerReward=source.towerReward;
			target.towerFallRewardId=source.towerFallRewardId;
			if (source.npcMonsterIds != null){
				foreach(int npcMonsterIds in source.npcMonsterIds)
					target.npcMonsterIds.Add(npcMonsterIds);
			}
			target.npcGeneralId=source.npcGeneralId;
		}
		public void PropsTreasureRewardConverter_fillFrom(AppDto.PropsTreasureReward target, PropsTreasureReward source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.icon = source.icon;
			target.desc = source.desc;
			target.name = source.name;
			target.quality = source.quality;
		}

		public void PropsTreasureRewardConverter_fillInto(AppDto.PropsTreasureReward source, PropsTreasureReward target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.icon!=null)
				target.icon = source.icon;
			if(source.desc!=null)
				target.desc = source.desc;
			if(source.name!=null)
				target.name = source.name;
			target.quality=source.quality;
		}
		public void HighTreasuryInfoDtoConverter_fillFrom(AppDto.HighTreasuryInfoDto target, HighTreasuryInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentHighTreasuryInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentHighTreasuryInfoDto);
			}
			target.highTreasuryPosition = source.highTreasuryPosition;
			target.rewardPool = source.rewardPool;
			target.useCount = source.useCount;
			if (source.diomand != null) {
				List<int> items = new List<int>();
				target.diomand = items;
				foreach (int item in source.diomand)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.diomand = items;
			}
			if (source.name != null) {
				List<string> items = new List<string>();
				target.name = items;
				foreach (string item in source.name)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.name = items;
			}
		}

		public void HighTreasuryInfoDtoConverter_fillInto(AppDto.HighTreasuryInfoDto source, HighTreasuryInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentHighTreasuryInfoDto == null ) {
				target.parentHighTreasuryInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentHighTreasuryInfoDto);
			target.highTreasuryPosition=source.highTreasuryPosition;
			target.rewardPool=source.rewardPool;
			target.useCount=source.useCount;
			if (source.diomand != null){
				foreach(int diomand in source.diomand)
					target.diomand.Add(diomand);
			}
			if (source.name != null){
				foreach(string name in source.name)
					target.name.Add(name);
			}
		}
		public void HarvestQuestionGiftBoxDtoConverter_fillFrom(AppDto.HarvestQuestionGiftBoxDto target, HarvestQuestionGiftBoxDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentHarvestQuestionGiftBoxDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentHarvestQuestionGiftBoxDto);
			}
			target.boxId = source.boxId;
			target.giftBoxState = source.giftBoxState;
		}

		public void HarvestQuestionGiftBoxDtoConverter_fillInto(AppDto.HarvestQuestionGiftBoxDto source, HarvestQuestionGiftBoxDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentHarvestQuestionGiftBoxDto == null ) {
				target.parentHarvestQuestionGiftBoxDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentHarvestQuestionGiftBoxDto);
			target.boxId=source.boxId;
			target.giftBoxState=source.giftBoxState;
		}
		public void PlayerQuestionDtoConverter_fillFrom(AppDto.PlayerQuestionDto target, PlayerQuestionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerQuestionDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerQuestionDto);
			}
						if (source.curQuestion!=null) {
				AppDto.QuestionEntityDto retCurQuestion = new AppDto.QuestionEntityDto();
				QuestionEntityDtoConverter_fillFrom(retCurQuestion, source.curQuestion);
				target.curQuestion = retCurQuestion;
			}
						target.correctCount = source.correctCount;
			target.answerCount = source.answerCount;
			target.lastCorrect = source.lastCorrect;
			target.end = source.end;
			target.giftBoxState = source.giftBoxState;
			target.playerExpCount = source.playerExpCount;
			target.silverCount = source.silverCount;
		}

		public void PlayerQuestionDtoConverter_fillInto(AppDto.PlayerQuestionDto source, PlayerQuestionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerQuestionDto == null ) {
				target.parentPlayerQuestionDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerQuestionDto);
			if(source.curQuestion!=null){
				QuestionEntityDto protobufModel = new QuestionEntityDto();
				QuestionEntityDtoConverter_fillInto(source.curQuestion, protobufModel);
				target.curQuestion = protobufModel;
			}
			target.correctCount=source.correctCount;
			target.answerCount=source.answerCount;
			target.lastCorrect=source.lastCorrect;
			target.end=source.end;
			target.giftBoxState=source.giftBoxState;
			target.playerExpCount=source.playerExpCount;
			target.silverCount=source.silverCount;
		}
		public void QuestionClosureNotifyConverter_fillFrom(AppDto.QuestionClosureNotify target, QuestionClosureNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.questionType = source.questionType;
		}

		public void QuestionClosureNotifyConverter_fillInto(AppDto.QuestionClosureNotify source, QuestionClosureNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.questionType=source.questionType;
		}
		public void QuestionEntityDtoConverter_fillFrom(AppDto.QuestionEntityDto target, QuestionEntityDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentQuestionEntityDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentQuestionEntityDto);
			}
			target.id = source.id;
			if (source.answerIndexQueue != null) {
				List<int> items = new List<int>();
				target.answerIndexQueue = items;
				foreach (int item in source.answerIndexQueue)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.answerIndexQueue = items;
			}
			target.questionTypeId = source.questionTypeId;
		}

		public void QuestionEntityDtoConverter_fillInto(AppDto.QuestionEntityDto source, QuestionEntityDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentQuestionEntityDto == null ) {
				target.parentQuestionEntityDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentQuestionEntityDto);
			target.id=source.id;
			if (source.answerIndexQueue != null){
				foreach(int answerIndexQueue in source.answerIndexQueue)
					target.answerIndexQueue.Add(answerIndexQueue);
			}
			target.questionTypeId=source.questionTypeId;
		}
		public void QuestionOpenNotifyConverter_fillFrom(AppDto.QuestionOpenNotify target, QuestionOpenNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.questionType = source.questionType;
		}

		public void QuestionOpenNotifyConverter_fillInto(AppDto.QuestionOpenNotify source, QuestionOpenNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.questionType=source.questionType;
		}
		public void PropsParam_19Converter_fillFrom(AppDto.PropsParam_19 target, PropsParam_19 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_19 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_19);
			}
			target.crewId = source.crewId;
		}

		public void PropsParam_19Converter_fillInto(AppDto.PropsParam_19 source, PropsParam_19 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_19 == null ) {
				target.parentPropsParam_19 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_19);
			target.crewId=source.crewId;
		}
		public void TowerBattleWinNotifyConverter_fillFrom(AppDto.TowerBattleWinNotify target, TowerBattleWinNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId = source.sceneId;
			target.npcMonsterId = source.npcMonsterId;
			target.towerId = source.towerId;
		}

		public void TowerBattleWinNotifyConverter_fillInto(AppDto.TowerBattleWinNotify source, TowerBattleWinNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.sceneId=source.sceneId;
			target.npcMonsterId=source.npcMonsterId;
			target.towerId=source.towerId;
		}
		public void ArenaReportsDtoConverter_fillFrom(AppDto.ArenaReportsDto target, ArenaReportsDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentArenaReportsDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentArenaReportsDto);
			}
			if (source.reportDtos != null) {
				List<AppDto.ArenaReportDto> items = new List<AppDto.ArenaReportDto>();
				target.reportDtos = items;
				foreach (ArenaReportDto item in source.reportDtos) {
					AppDto.ArenaReportDto result = new AppDto.ArenaReportDto();
					ArenaReportDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ArenaReportDto> items = new List<AppDto.ArenaReportDto>();
				target.reportDtos = items;
			}
		}

		public void ArenaReportsDtoConverter_fillInto(AppDto.ArenaReportsDto source, ArenaReportsDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentArenaReportsDto == null ) {
				target.parentArenaReportsDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentArenaReportsDto);
			if (source.reportDtos != null){
				foreach(AppDto.ArenaReportDto reportDtos in source.reportDtos){
					ArenaReportDto protobufModel = new ArenaReportDto();
					ArenaReportDtoConverter_fillInto(reportDtos, protobufModel);
					target.reportDtos.Add(protobufModel);
				}
			}
		}
		public void QuestionEntityNotifyConverter_fillFrom(AppDto.QuestionEntityNotify target, QuestionEntityNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.answerIndexQueue != null) {
				List<int> items = new List<int>();
				target.answerIndexQueue = items;
				foreach (int item in source.answerIndexQueue)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.answerIndexQueue = items;
			}
			target.questionTypeId = source.questionTypeId;
			target.outTime = source.outTime;
		}

		public void QuestionEntityNotifyConverter_fillInto(AppDto.QuestionEntityNotify source, QuestionEntityNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.answerIndexQueue != null){
				foreach(int answerIndexQueue in source.answerIndexQueue)
					target.answerIndexQueue.Add(answerIndexQueue);
			}
			target.questionTypeId=source.questionTypeId;
			target.outTime=source.outTime;
		}
		public void RankArenaDtoConverter_fillFrom(AppDto.RankArenaDto target, RankArenaDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankArenaDto != null ) {
				RankItemDtoConverter_fillFrom(target,source.parentRankArenaDto);
			}
			target.factionId = source.factionId;
			target.grade = source.grade;
			target.trophyCount = source.trophyCount;
		}

		public void RankArenaDtoConverter_fillInto(AppDto.RankArenaDto source, RankArenaDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankArenaDto == null ) {
				target.parentRankArenaDto = new RankItemDto();
			}
			RankItemDtoConverter_fillInto(source,target.parentRankArenaDto);
			target.factionId=source.factionId;
			target.grade=source.grade;
			target.trophyCount=source.trophyCount;
		}
		public void RankTowerDtoConverter_fillFrom(AppDto.RankTowerDto target, RankTowerDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankTowerDto != null ) {
				RankItemDtoConverter_fillFrom(target,source.parentRankTowerDto);
			}
			target.factionId = source.factionId;
			target.towerId = source.towerId;
			target.useTime = source.useTime;
		}

		public void RankTowerDtoConverter_fillInto(AppDto.RankTowerDto source, RankTowerDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankTowerDto == null ) {
				target.parentRankTowerDto = new RankItemDto();
			}
			RankItemDtoConverter_fillInto(source,target.parentRankTowerDto);
			target.factionId=source.factionId;
			target.towerId=source.towerId;
			target.useTime=source.useTime;
		}
		public void GuideConverter_fillFrom(AppDto.Guide target, Guide source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.type = source.type;
			target.param = source.param;
			target.val = source.val;
			target.grade = source.grade;
			target.icon = source.icon;
			target.title = source.title;
			target.description = source.description;
			target.smartGuideId = source.smartGuideId;
			if (source.rewards != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.rewards = items;
				foreach (ItemDto item in source.rewards) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.rewards = items;
			}
			target.preId = source.preId;
		}

		public void GuideConverter_fillInto(AppDto.Guide source, Guide target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.type=source.type;
			target.param=source.param;
			target.val=source.val;
			target.grade=source.grade;
			if(source.icon!=null)
				target.icon = source.icon;
			if(source.title!=null)
				target.title = source.title;
			if(source.description!=null)
				target.description = source.description;
			target.smartGuideId=source.smartGuideId;
			if (source.rewards != null){
				foreach(AppDto.ItemDto rewards in source.rewards){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(rewards, protobufModel);
					target.rewards.Add(protobufModel);
				}
			}
			target.preId=source.preId;
		}
		public void SmartGuideConverter_fillFrom(AppDto.SmartGuide target, SmartGuide source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.type = source.type;
			target.icon = source.icon;
			target.param = source.param;
			target.selectItemId = source.selectItemId;
			target.loseGuideIcon = source.loseGuideIcon;
			target.memo = source.memo;
		}

		public void SmartGuideConverter_fillInto(AppDto.SmartGuide source, SmartGuide target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.type=source.type;
			if(source.icon!=null)
				target.icon = source.icon;
			if(source.param!=null)
				target.param = source.param;
			target.selectItemId=source.selectItemId;
			if(source.loseGuideIcon!=null)
				target.loseGuideIcon = source.loseGuideIcon;
			if(source.memo!=null)
				target.memo = source.memo;
		}
		public void GuideInfoNotifyConverter_fillFrom(AppDto.GuideInfoNotify target, GuideInfoNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.guideId = source.guideId;
			target.count = source.count;
			target.status = source.status;
		}

		public void GuideInfoNotifyConverter_fillInto(AppDto.GuideInfoNotify source, GuideInfoNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.guideId=source.guideId;
			target.count=source.count;
			target.status=source.status;
		}
		public void GuideListDtoConverter_fillFrom(AppDto.GuideListDto target, GuideListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuideListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuideListDto);
			}
			if (source.info != null) {
				List<AppDto.GuideInfoNotify> items = new List<AppDto.GuideInfoNotify>();
				target.info = items;
				foreach (GuideInfoNotify item in source.info) {
					AppDto.GuideInfoNotify result = new AppDto.GuideInfoNotify();
					GuideInfoNotifyConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.GuideInfoNotify> items = new List<AppDto.GuideInfoNotify>();
				target.info = items;
			}
		}

		public void GuideListDtoConverter_fillInto(AppDto.GuideListDto source, GuideListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuideListDto == null ) {
				target.parentGuideListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuideListDto);
			if (source.info != null){
				foreach(AppDto.GuideInfoNotify info in source.info){
					GuideInfoNotify protobufModel = new GuideInfoNotify();
					GuideInfoNotifyConverter_fillInto(info, protobufModel);
					target.info.Add(protobufModel);
				}
			}
		}
		public void AfterAnswerNotifyConverter_fillFrom(AppDto.AfterAnswerNotify target, AfterAnswerNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.questionId = source.questionId;
			target.correctIndex = source.correctIndex;
			target.end = source.end;
		}

		public void AfterAnswerNotifyConverter_fillInto(AppDto.AfterAnswerNotify source, AfterAnswerNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.questionId=source.questionId;
			target.correctIndex=source.correctIndex;
			target.end=source.end;
		}
		public void PlayerNameNotifyConverter_fillFrom(AppDto.PlayerNameNotify target, PlayerNameNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			target.name = source.name;
		}

		public void PlayerNameNotifyConverter_fillInto(AppDto.PlayerNameNotify source, PlayerNameNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			if(source.name!=null)
				target.name = source.name;
		}
		public void GuideGainWayConverter_fillFrom(AppDto.GuideGainWay target, GuideGainWay source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.smartGuideId = source.smartGuideId;
			target.functionOpenId = source.functionOpenId;
		}

		public void GuideGainWayConverter_fillInto(AppDto.GuideGainWay source, GuideGainWay target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.smartGuideId=source.smartGuideId;
			target.functionOpenId=source.functionOpenId;
		}
		public void RankCrewDtoConverter_fillFrom(AppDto.RankCrewDto target, RankCrewDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankCrewDto != null ) {
				RankItemDtoConverter_fillFrom(target,source.parentRankCrewDto);
			}
			target.playerName = source.playerName;
			target.crewGrade = source.crewGrade;
			target.crewPower = source.crewPower;
		}

		public void RankCrewDtoConverter_fillInto(AppDto.RankCrewDto source, RankCrewDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankCrewDto == null ) {
				target.parentRankCrewDto = new RankItemDto();
			}
			RankItemDtoConverter_fillInto(source,target.parentRankCrewDto);
			if(source.playerName!=null)
				target.playerName = source.playerName;
			target.crewGrade=source.crewGrade;
			target.crewPower=source.crewPower;
		}
		public void ShopGoodsListDtoConverter_fillFrom(AppDto.ShopGoodsListDto target, ShopGoodsListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentShopGoodsListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentShopGoodsListDto);
			}
			if (source.shopGoodsDtos != null) {
				List<AppDto.ShopGoodsDto> items = new List<AppDto.ShopGoodsDto>();
				target.shopGoodsDtos = items;
				foreach (ShopGoodsDto item in source.shopGoodsDtos) {
					AppDto.ShopGoodsDto result = new AppDto.ShopGoodsDto();
					ShopGoodsDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ShopGoodsDto> items = new List<AppDto.ShopGoodsDto>();
				target.shopGoodsDtos = items;
			}
		}

		public void ShopGoodsListDtoConverter_fillInto(AppDto.ShopGoodsListDto source, ShopGoodsListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentShopGoodsListDto == null ) {
				target.parentShopGoodsListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentShopGoodsListDto);
			if (source.shopGoodsDtos != null){
				foreach(AppDto.ShopGoodsDto shopGoodsDtos in source.shopGoodsDtos){
					ShopGoodsDto protobufModel = new ShopGoodsDto();
					ShopGoodsDtoConverter_fillInto(shopGoodsDtos, protobufModel);
					target.shopGoodsDtos.Add(protobufModel);
				}
			}
		}
		public void ShowMonsterItemSubmitDtoConverter_fillFrom(AppDto.ShowMonsterItemSubmitDto target, ShowMonsterItemSubmitDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
						if (source.acceptNpc!=null) {
				AppDto.NpcInfoDto retAcceptNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retAcceptNpc, source.acceptNpc);
				target.acceptNpc = retAcceptNpc;
			}
									if (source.submitNpc!=null) {
				AppDto.NpcInfoDto retSubmitNpc = new AppDto.NpcInfoDto();
				NpcInfoDtoConverter_fillFrom(retSubmitNpc, source.submitNpc);
				target.submitNpc = retSubmitNpc;
			}
						target.tollgateId = source.tollgateId;
			if ( source.parentShowMonsterItemSubmitDto != null ) {
				SubmitDtoConverter_fillFrom(target,source.parentShowMonsterItemSubmitDto);
			}
		}

		public void ShowMonsterItemSubmitDtoConverter_fillInto(AppDto.ShowMonsterItemSubmitDto source, ShowMonsterItemSubmitDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.acceptNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.acceptNpc, protobufModel);
				target.acceptNpc = protobufModel;
			}
			if(source.submitNpc!=null){
				NpcInfoDto protobufModel = new NpcInfoDto();
				NpcInfoDtoConverter_fillInto(source.submitNpc, protobufModel);
				target.submitNpc = protobufModel;
			}
			target.tollgateId=source.tollgateId;
			if ( target.parentShowMonsterItemSubmitDto == null ) {
				target.parentShowMonsterItemSubmitDto = new SubmitDto();
			}
			SubmitDtoConverter_fillInto(source,target.parentShowMonsterItemSubmitDto);
		}
		public void RankFlowersDtoConverter_fillFrom(AppDto.RankFlowersDto target, RankFlowersDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankFlowersDto != null ) {
				RankItemDtoConverter_fillFrom(target,source.parentRankFlowersDto);
			}
			target.factionId = source.factionId;
			target.flowers = source.flowers;
		}

		public void RankFlowersDtoConverter_fillInto(AppDto.RankFlowersDto source, RankFlowersDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankFlowersDto == null ) {
				target.parentRankFlowersDto = new RankItemDto();
			}
			RankItemDtoConverter_fillInto(source,target.parentRankFlowersDto);
			target.factionId=source.factionId;
			target.flowers=source.flowers;
		}
		public void PropsParam_16Converter_fillFrom(AppDto.PropsParam_16 target, PropsParam_16 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPropsParam_16 != null ) {
				PropsParamConverter_fillFrom(target,source.parentPropsParam_16);
			}
			target.degree = source.degree;
			target.rankings = source.rankings;
			target.context = source.context;
			target.clientPlay = source.clientPlay;
			target.second = source.second;
		}

		public void PropsParam_16Converter_fillInto(AppDto.PropsParam_16 source, PropsParam_16 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPropsParam_16 == null ) {
				target.parentPropsParam_16 = new PropsParam();
			}
			PropsParamConverter_fillInto(source,target.parentPropsParam_16);
			target.degree=source.degree;
			target.rankings=source.rankings;
			if(source.context!=null)
				target.context = source.context;
			if(source.clientPlay!=null)
				target.clientPlay = source.clientPlay;
			if(source.second!=null)
				target.second = source.second;
		}
		public void FriendFlowersNotifyConverter_fillFrom(AppDto.FriendFlowersNotify target, FriendFlowersNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.toId = source.toId;
			target.toName = source.toName;
			target.fromId = source.fromId;
			target.fromName = source.fromName;
			target.flowersCount = source.flowersCount;
			target.itemId = source.itemId;
			target.content = source.content;
		}

		public void FriendFlowersNotifyConverter_fillInto(AppDto.FriendFlowersNotify source, FriendFlowersNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.toId=source.toId;
			if(source.toName!=null)
				target.toName = source.toName;
			target.fromId=source.fromId;
			if(source.fromName!=null)
				target.fromName = source.fromName;
			target.flowersCount=source.flowersCount;
			target.itemId=source.itemId;
			if(source.content!=null)
				target.content = source.content;
		}
		public void GuildApprovalDtoConverter_fillFrom(AppDto.GuildApprovalDto target, GuildApprovalDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildApprovalDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildApprovalDto);
			}
			target.applyerId = source.applyerId;
			target.applyerName = source.applyerName;
			target.applyerGrade = source.applyerGrade;
			target.applyerFactionId = source.applyerFactionId;
			target.applyerGender = source.applyerGender;
			target.inviterName = source.inviterName;
			target.applyStat = source.applyStat;
		}

		public void GuildApprovalDtoConverter_fillInto(AppDto.GuildApprovalDto source, GuildApprovalDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildApprovalDto == null ) {
				target.parentGuildApprovalDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildApprovalDto);
			target.applyerId=source.applyerId;
			if(source.applyerName!=null)
				target.applyerName = source.applyerName;
			target.applyerGrade=source.applyerGrade;
			target.applyerFactionId=source.applyerFactionId;
			target.applyerGender=source.applyerGender;
			if(source.inviterName!=null)
				target.inviterName = source.inviterName;
			target.applyStat=source.applyStat;
		}
		public void GuildApprovalListDtoConverter_fillFrom(AppDto.GuildApprovalListDto target, GuildApprovalListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildApprovalListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildApprovalListDto);
			}
			target.pageIndex = source.pageIndex;
			if (source.approvals != null) {
				List<AppDto.GuildApprovalDto> items = new List<AppDto.GuildApprovalDto>();
				target.approvals = items;
				foreach (GuildApprovalDto item in source.approvals) {
					AppDto.GuildApprovalDto result = new AppDto.GuildApprovalDto();
					GuildApprovalDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.GuildApprovalDto> items = new List<AppDto.GuildApprovalDto>();
				target.approvals = items;
			}
			target.pageCount = source.pageCount;
			target.memberFull = source.memberFull;
		}

		public void GuildApprovalListDtoConverter_fillInto(AppDto.GuildApprovalListDto source, GuildApprovalListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildApprovalListDto == null ) {
				target.parentGuildApprovalListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildApprovalListDto);
			target.pageIndex=source.pageIndex;
			if (source.approvals != null){
				foreach(AppDto.GuildApprovalDto approvals in source.approvals){
					GuildApprovalDto protobufModel = new GuildApprovalDto();
					GuildApprovalDtoConverter_fillInto(approvals, protobufModel);
					target.approvals.Add(protobufModel);
				}
			}
			target.pageCount=source.pageCount;
			target.memberFull=source.memberFull;
		}
		public void GuildBaseInfoDtoConverter_fillFrom(AppDto.GuildBaseInfoDto target, GuildBaseInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildBaseInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildBaseInfoDto);
			}
			target.showId = source.showId;
			target.name = source.name;
			target.grade = source.grade;
			target.bossId = source.bossId;
			target.bossName = source.bossName;
			target.memberCount = source.memberCount;
			target.maxMemberCount = source.maxMemberCount;
			target.memo = source.memo;
			target.notice = source.notice;
		}

		public void GuildBaseInfoDtoConverter_fillInto(AppDto.GuildBaseInfoDto source, GuildBaseInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildBaseInfoDto == null ) {
				target.parentGuildBaseInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildBaseInfoDto);
			target.showId=source.showId;
			if(source.name!=null)
				target.name = source.name;
			target.grade=source.grade;
			target.bossId=source.bossId;
			if(source.bossName!=null)
				target.bossName = source.bossName;
			target.memberCount=source.memberCount;
			target.maxMemberCount=source.maxMemberCount;
			if(source.memo!=null)
				target.memo = source.memo;
			if(source.notice!=null)
				target.notice = source.notice;
		}
		public void GuildBaseInfoListDtoConverter_fillFrom(AppDto.GuildBaseInfoListDto target, GuildBaseInfoListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildBaseInfoListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildBaseInfoListDto);
			}
			target.pageIndex = source.pageIndex;
			if (source.guildList != null) {
				List<AppDto.GuildBaseInfoDto> items = new List<AppDto.GuildBaseInfoDto>();
				target.guildList = items;
				foreach (GuildBaseInfoDto item in source.guildList) {
					AppDto.GuildBaseInfoDto result = new AppDto.GuildBaseInfoDto();
					GuildBaseInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.GuildBaseInfoDto> items = new List<AppDto.GuildBaseInfoDto>();
				target.guildList = items;
			}
			target.pageCount = source.pageCount;
		}

		public void GuildBaseInfoListDtoConverter_fillInto(AppDto.GuildBaseInfoListDto source, GuildBaseInfoListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildBaseInfoListDto == null ) {
				target.parentGuildBaseInfoListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildBaseInfoListDto);
			target.pageIndex=source.pageIndex;
			if (source.guildList != null){
				foreach(AppDto.GuildBaseInfoDto guildList in source.guildList){
					GuildBaseInfoDto protobufModel = new GuildBaseInfoDto();
					GuildBaseInfoDtoConverter_fillInto(guildList, protobufModel);
					target.guildList.Add(protobufModel);
				}
			}
			target.pageCount=source.pageCount;
		}
		public void GuildBuildingDtoConverter_fillFrom(AppDto.GuildBuildingDto target, GuildBuildingDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildBuildingDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildBuildingDto);
			}
			target.barpubGrade = source.barpubGrade;
			target.treasuryGrade = source.treasuryGrade;
			target.guardTowerGrade = source.guardTowerGrade;
			target.workshopGrade = source.workshopGrade;
			target.gradeFinishTime = source.gradeFinishTime;
			target.barpubFinishTime = source.barpubFinishTime;
			target.treasuryFinishTime = source.treasuryFinishTime;
			target.guardTowerFinishTime = source.guardTowerFinishTime;
			target.workshopFinishTime = source.workshopFinishTime;
		}

		public void GuildBuildingDtoConverter_fillInto(AppDto.GuildBuildingDto source, GuildBuildingDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildBuildingDto == null ) {
				target.parentGuildBuildingDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildBuildingDto);
			target.barpubGrade=source.barpubGrade;
			target.treasuryGrade=source.treasuryGrade;
			target.guardTowerGrade=source.guardTowerGrade;
			target.workshopGrade=source.workshopGrade;
			target.gradeFinishTime=source.gradeFinishTime;
			target.barpubFinishTime=source.barpubFinishTime;
			target.treasuryFinishTime=source.treasuryFinishTime;
			target.guardTowerFinishTime=source.guardTowerFinishTime;
			target.workshopFinishTime=source.workshopFinishTime;
		}
		public void GuildDetailInfoDtoConverter_fillFrom(AppDto.GuildDetailInfoDto target, GuildDetailInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildDetailInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildDetailInfoDto);
			}
						if (source.baseInfo!=null) {
				AppDto.GuildBaseInfoDto retBaseInfo = new AppDto.GuildBaseInfoDto();
				GuildBaseInfoDtoConverter_fillFrom(retBaseInfo, source.baseInfo);
				target.baseInfo = retBaseInfo;
			}
									if (source.wealthInfo!=null) {
				AppDto.GuildWealthDto retWealthInfo = new AppDto.GuildWealthDto();
				GuildWealthDtoConverter_fillFrom(retWealthInfo, source.wealthInfo);
				target.wealthInfo = retWealthInfo;
			}
									if (source.buildingInfo!=null) {
				AppDto.GuildBuildingDto retBuildingInfo = new AppDto.GuildBuildingDto();
				GuildBuildingDtoConverter_fillFrom(retBuildingInfo, source.buildingInfo);
				target.buildingInfo = retBuildingInfo;
			}
					}

		public void GuildDetailInfoDtoConverter_fillInto(AppDto.GuildDetailInfoDto source, GuildDetailInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildDetailInfoDto == null ) {
				target.parentGuildDetailInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildDetailInfoDto);
			if(source.baseInfo!=null){
				GuildBaseInfoDto protobufModel = new GuildBaseInfoDto();
				GuildBaseInfoDtoConverter_fillInto(source.baseInfo, protobufModel);
				target.baseInfo = protobufModel;
			}
			if(source.wealthInfo!=null){
				GuildWealthDto protobufModel = new GuildWealthDto();
				GuildWealthDtoConverter_fillInto(source.wealthInfo, protobufModel);
				target.wealthInfo = protobufModel;
			}
			if(source.buildingInfo!=null){
				GuildBuildingDto protobufModel = new GuildBuildingDto();
				GuildBuildingDtoConverter_fillInto(source.buildingInfo, protobufModel);
				target.buildingInfo = protobufModel;
			}
		}
		public void GuildInvitationNotifyConverter_fillFrom(AppDto.GuildInvitationNotify target, GuildInvitationNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.inviterId = source.inviterId;
			target.inviterName = source.inviterName;
			target.showId = source.showId;
			target.guildName = source.guildName;
		}

		public void GuildInvitationNotifyConverter_fillInto(AppDto.GuildInvitationNotify source, GuildInvitationNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.inviterId=source.inviterId;
			if(source.inviterName!=null)
				target.inviterName = source.inviterName;
			target.showId=source.showId;
			if(source.guildName!=null)
				target.guildName = source.guildName;
		}
		public void GuildMemberDtoConverter_fillFrom(AppDto.GuildMemberDto target, GuildMemberDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildMemberDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildMemberDto);
			}
			target.id = source.id;
			target.name = source.name;
			target.position = source.position;
			target.grade = source.grade;
			target.online = source.online;
			target.totalCbute = source.totalCbute;
			target.circulateCbute = source.circulateCbute;
			target.joinTime = source.joinTime;
			target.gender = source.gender;
			target.factionId = source.factionId;
		}

		public void GuildMemberDtoConverter_fillInto(AppDto.GuildMemberDto source, GuildMemberDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildMemberDto == null ) {
				target.parentGuildMemberDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildMemberDto);
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.position=source.position;
			target.grade=source.grade;
			target.online=source.online;
			target.totalCbute=source.totalCbute;
			target.circulateCbute=source.circulateCbute;
			target.joinTime=source.joinTime;
			target.gender=source.gender;
			target.factionId=source.factionId;
		}
		public void GuildWealthDtoConverter_fillFrom(AppDto.GuildWealthDto target, GuildWealthDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildWealthDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildWealthDto);
			}
			target.assets = source.assets;
			target.maintainAssets = source.maintainAssets;
			target.activity = source.activity;
			target.prosperity = source.prosperity;
		}

		public void GuildWealthDtoConverter_fillInto(AppDto.GuildWealthDto source, GuildWealthDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildWealthDto == null ) {
				target.parentGuildWealthDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildWealthDto);
			target.assets=source.assets;
			target.maintainAssets=source.maintainAssets;
			target.activity=source.activity;
			target.prosperity=source.prosperity;
		}
		public void ActiveRewardConverter_fillFrom(AppDto.ActiveReward target, ActiveReward source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.active = source.active;
			if (source.items != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
				foreach (ItemDto item in source.items) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
			}
		}

		public void ActiveRewardConverter_fillInto(AppDto.ActiveReward source, ActiveReward target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.active=source.active;
			if (source.items != null){
				foreach(AppDto.ItemDto items in source.items){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void ScheduleActivityConverter_fillFrom(AppDto.ScheduleActivity target, ScheduleActivity source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.type = source.type;
			target.name = source.name;
			target.icon = source.icon;
			target.rewardCount = source.rewardCount;
			target.durationJoin = source.durationJoin;
			target.deliver = source.deliver;
			target.deliverOpen = source.deliverOpen;
			target.openWeeks = source.openWeeks;
			target.openWeeksDesc = source.openWeeksDesc;
			target.activityTime = source.activityTime;
			target.allDay = source.allDay;
			if (source.openTimes != null) {
				List<string> items = new List<string>();
				target.openTimes = items;
				foreach (string item in source.openTimes)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.openTimes = items;
			}
			target.acrossDay = source.acrossDay;
			if (source.startTime != null) {
				List<string> items = new List<string>();
				target.startTime = items;
				foreach (string item in source.startTime)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.startTime = items;
			}
			if (source.duration != null) {
				List<int> items = new List<int>();
				target.duration = items;
				foreach (int item in source.duration)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.duration = items;
			}
			target.openGradeId = source.openGradeId;
			target.joinType = source.joinType;
			target.joinDesc = source.joinDesc;
			target.desc = source.desc;
			target.activeDegree = source.activeDegree;
			target.onceGainActive = source.onceGainActive;
			target.joinNotice = source.joinNotice;
			target.pathfinding = source.pathfinding;
			target.activityTime2 = source.activityTime2;
			target.gameActivityId = source.gameActivityId;
			if (source.controlType != null) {
				List<int> items = new List<int>();
				target.controlType = items;
				foreach (int item in source.controlType)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.controlType = items;
			}
			target.rewardRegain = source.rewardRegain;
			target.regainFallRewardId = source.regainFallRewardId;
			if (source.items != null) {
				List<int> items = new List<int>();
				target.items = items;
				foreach (int item in source.items)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.items = items;
			}
			target.smartGuideId = source.smartGuideId;
		}

		public void ScheduleActivityConverter_fillInto(AppDto.ScheduleActivity source, ScheduleActivity target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.type=source.type;
			if(source.name!=null)
				target.name = source.name;
			if(source.icon!=null)
				target.icon = source.icon;
			target.rewardCount=source.rewardCount;
			target.durationJoin=source.durationJoin;
			target.deliver=source.deliver;
			target.deliverOpen=source.deliverOpen;
			if(source.openWeeks!=null)
				target.openWeeks = source.openWeeks;
			if(source.openWeeksDesc!=null)
				target.openWeeksDesc = source.openWeeksDesc;
			if(source.activityTime!=null)
				target.activityTime = source.activityTime;
			target.allDay=source.allDay;
			if (source.openTimes != null){
				foreach(string openTimes in source.openTimes)
					target.openTimes.Add(openTimes);
			}
			target.acrossDay=source.acrossDay;
			if (source.startTime != null){
				foreach(string startTime in source.startTime)
					target.startTime.Add(startTime);
			}
			if (source.duration != null){
				foreach(int duration in source.duration)
					target.duration.Add(duration);
			}
			target.openGradeId=source.openGradeId;
			if(source.joinType!=null)
				target.joinType = source.joinType;
			if(source.joinDesc!=null)
				target.joinDesc = source.joinDesc;
			if(source.desc!=null)
				target.desc = source.desc;
			target.activeDegree=source.activeDegree;
			target.onceGainActive=source.onceGainActive;
			target.joinNotice=source.joinNotice;
			target.pathfinding=source.pathfinding;
			if(source.activityTime2!=null)
				target.activityTime2 = source.activityTime2;
			target.gameActivityId=source.gameActivityId;
			if (source.controlType != null){
				foreach(int controlType in source.controlType)
					target.controlType.Add(controlType);
			}
			target.rewardRegain=source.rewardRegain;
			target.regainFallRewardId=source.regainFallRewardId;
			if (source.items != null){
				foreach(int items in source.items)
					target.items.Add(items);
			}
			target.smartGuideId=source.smartGuideId;
		}
		public void WeekCalendarConverter_fillFrom(AppDto.WeekCalendar target, WeekCalendar source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.startTime = source.startTime;
			target.mondayId = source.mondayId;
			target.tuesdayId = source.tuesdayId;
			target.wednesdayId = source.wednesdayId;
			target.thursdayId = source.thursdayId;
			target.fridayId = source.fridayId;
			target.saturdayId = source.saturdayId;
			target.sundayId = source.sundayId;
		}

		public void WeekCalendarConverter_fillInto(AppDto.WeekCalendar source, WeekCalendar target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.startTime!=null)
				target.startTime = source.startTime;
			target.mondayId=source.mondayId;
			target.tuesdayId=source.tuesdayId;
			target.wednesdayId=source.wednesdayId;
			target.thursdayId=source.thursdayId;
			target.fridayId=source.fridayId;
			target.saturdayId=source.saturdayId;
			target.sundayId=source.sundayId;
		}
		public void ActiveDtoConverter_fillFrom(AppDto.ActiveDto target, ActiveDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.count = source.count;
			target.type = source.type;
			target.open = source.open;
			target.active = source.active;
			if ( source.parentActiveDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentActiveDto);
			}
		}

		public void ActiveDtoConverter_fillInto(AppDto.ActiveDto source, ActiveDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.count=source.count;
			target.type=source.type;
			target.open=source.open;
			target.active=source.active;
			if ( target.parentActiveDto == null ) {
				target.parentActiveDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentActiveDto);
		}
		public void ActiveNotifyConverter_fillFrom(AppDto.ActiveNotify target, ActiveNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.addActive = source.addActive;
		}

		public void ActiveNotifyConverter_fillInto(AppDto.ActiveNotify source, ActiveNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.addActive=source.addActive;
		}
		public void ScheduleDtoConverter_fillFrom(AppDto.ScheduleDto target, ScheduleDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.activeList != null) {
				List<AppDto.ActiveDto> items = new List<AppDto.ActiveDto>();
				target.activeList = items;
				foreach (ActiveDto item in source.activeList) {
					AppDto.ActiveDto result = new AppDto.ActiveDto();
					ActiveDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ActiveDto> items = new List<AppDto.ActiveDto>();
				target.activeList = items;
			}
			if (source.actives != null) {
				List<int> items = new List<int>();
				target.actives = items;
				foreach (int item in source.actives)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.actives = items;
			}
			target.activeValue = source.activeValue;
			if ( source.parentScheduleDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentScheduleDto);
			}
		}

		public void ScheduleDtoConverter_fillInto(AppDto.ScheduleDto source, ScheduleDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.activeList != null){
				foreach(AppDto.ActiveDto activeList in source.activeList){
					ActiveDto protobufModel = new ActiveDto();
					ActiveDtoConverter_fillInto(activeList, protobufModel);
					target.activeList.Add(protobufModel);
				}
			}
			if (source.actives != null){
				foreach(int actives in source.actives)
					target.actives.Add(actives);
			}
			target.activeValue=source.activeValue;
			if ( target.parentScheduleDto == null ) {
				target.parentScheduleDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentScheduleDto);
		}
		public void DelegateMissionDurationConverter_fillFrom(AppDto.DelegateMissionDuration target, DelegateMissionDuration source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.hrs = source.hrs;
			target.weightRates = source.weightRates;
		}

		public void DelegateMissionDurationConverter_fillInto(AppDto.DelegateMissionDuration source, DelegateMissionDuration target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.hrs=source.hrs;
			target.weightRates=source.weightRates;
		}
		public void StallBuyDtoConverter_fillFrom(AppDto.StallBuyDto target, StallBuyDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentStallBuyDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentStallBuyDto);
			}
			target.buyStateId = source.buyStateId;
						if (source.stallGoodsDto!=null) {
				AppDto.StallGoodsDto retStallGoodsDto = new AppDto.StallGoodsDto();
				StallGoodsDtoConverter_fillFrom(retStallGoodsDto, source.stallGoodsDto);
				target.stallGoodsDto = retStallGoodsDto;
			}
					}

		public void StallBuyDtoConverter_fillInto(AppDto.StallBuyDto source, StallBuyDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentStallBuyDto == null ) {
				target.parentStallBuyDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentStallBuyDto);
			target.buyStateId=source.buyStateId;
			if(source.stallGoodsDto!=null){
				StallGoodsDto protobufModel = new StallGoodsDto();
				StallGoodsDtoConverter_fillInto(source.stallGoodsDto, protobufModel);
				target.stallGoodsDto = protobufModel;
			}
		}
		public void GuildCountDtoConverter_fillFrom(AppDto.GuildCountDto target, GuildCountDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildCountDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildCountDto);
			}
			target.count = source.count;
		}

		public void GuildCountDtoConverter_fillInto(AppDto.GuildCountDto source, GuildCountDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildCountDto == null ) {
				target.parentGuildCountDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildCountDto);
			target.count=source.count;
		}
		public void RefuseGuildInvitationConverter_fillFrom(AppDto.RefuseGuildInvitation target, RefuseGuildInvitation source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.inviterId = source.inviterId;
			target.inviterName = source.inviterName;
		}

		public void RefuseGuildInvitationConverter_fillInto(AppDto.RefuseGuildInvitation source, RefuseGuildInvitation target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.inviterId=source.inviterId;
			if(source.inviterName!=null)
				target.inviterName = source.inviterName;
		}
		public void PlayerCopyMissionDtoConverter_fillFrom(AppDto.PlayerCopyMissionDto target, PlayerCopyMissionDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentPlayerCopyMissionDto != null ) {
				PlayerMissionDtoConverter_fillFrom(target,source.parentPlayerCopyMissionDto);
			}
			target.sceneId = source.sceneId;
			target.finish = source.finish;
		}

		public void PlayerCopyMissionDtoConverter_fillInto(AppDto.PlayerCopyMissionDto source, PlayerCopyMissionDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentPlayerCopyMissionDto == null ) {
				target.parentPlayerCopyMissionDto = new PlayerMissionDto();
			}
			PlayerMissionDtoConverter_fillInto(source,target.parentPlayerCopyMissionDto);
			target.sceneId=source.sceneId;
			target.finish=source.finish;
		}
		public void CopyConverter_fillFrom(AppDto.Copy target, Copy source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.desc = source.desc;
			target.minPlayer = source.minPlayer;
			target.minGrade = source.minGrade;
			target.serverGrade = source.serverGrade;
			target.refreshId = source.refreshId;
			target.missionId = source.missionId;
			target.sceneId = source.sceneId;
			target.modelId = source.modelId;
			if (source.rewardIds != null) {
				List<int> items = new List<int>();
				target.rewardIds = items;
				foreach (int item in source.rewardIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.rewardIds = items;
			}
			target.confirm = source.confirm;
			target.count = source.count;
			target.existToSceneId = source.existToSceneId;
			target.existToX = source.existToX;
			target.existToY = source.existToY;
			target.existToZ = source.existToZ;
			target.scheduleActivity = source.scheduleActivity;
		}

		public void CopyConverter_fillInto(AppDto.Copy source, Copy target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			if(source.desc!=null)
				target.desc = source.desc;
			target.minPlayer=source.minPlayer;
			target.minGrade=source.minGrade;
			target.serverGrade=source.serverGrade;
			target.refreshId=source.refreshId;
			target.missionId=source.missionId;
			target.sceneId=source.sceneId;
			target.modelId=source.modelId;
			if (source.rewardIds != null){
				foreach(int rewardIds in source.rewardIds)
					target.rewardIds.Add(rewardIds);
			}
			target.confirm=source.confirm;
			target.count=source.count;
			target.existToSceneId=source.existToSceneId;
			target.existToX=source.existToX;
			target.existToY=source.existToY;
			target.existToZ=source.existToZ;
			target.scheduleActivity=source.scheduleActivity;
		}
		public void GuildBarPubConverter_fillFrom(AppDto.GuildBarPub target, GuildBarPub source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.memberAmount = source.memberAmount;
			if ( source.parentGuildBarPub != null ) {
				GuildBuildingConverter_fillFrom(target,source.parentGuildBarPub);
			}
			target.posAmount = source.posAmount;
		}

		public void GuildBarPubConverter_fillInto(AppDto.GuildBarPub source, GuildBarPub target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.memberAmount=source.memberAmount;
			if ( target.parentGuildBarPub == null ) {
				target.parentGuildBarPub = new GuildBuilding();
			}
			GuildBuildingConverter_fillInto(source,target.parentGuildBarPub);
			if(source.posAmount!=null)
				target.posAmount = source.posAmount;
		}
		public void GuildGuardTowerConverter_fillFrom(AppDto.GuildGuardTower target, GuildGuardTower source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildGuardTower != null ) {
				GuildBuildingConverter_fillFrom(target,source.parentGuildGuardTower);
			}
			target.bossStar = source.bossStar;
		}

		public void GuildGuardTowerConverter_fillInto(AppDto.GuildGuardTower source, GuildGuardTower target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildGuardTower == null ) {
				target.parentGuildGuardTower = new GuildBuilding();
			}
			GuildBuildingConverter_fillInto(source,target.parentGuildGuardTower);
			target.bossStar=source.bossStar;
		}
		public void GuildWorkshopConverter_fillFrom(AppDto.GuildWorkshop target, GuildWorkshop source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildWorkshop != null ) {
				GuildBuildingConverter_fillFrom(target,source.parentGuildWorkshop);
			}
			target.cbuteAddition = source.cbuteAddition;
		}

		public void GuildWorkshopConverter_fillInto(AppDto.GuildWorkshop source, GuildWorkshop target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildWorkshop == null ) {
				target.parentGuildWorkshop = new GuildBuilding();
			}
			GuildBuildingConverter_fillInto(source,target.parentGuildWorkshop);
			target.cbuteAddition=source.cbuteAddition;
		}
		public void GuildMemberListDtoConverter_fillFrom(AppDto.GuildMemberListDto target, GuildMemberListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentGuildMemberListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentGuildMemberListDto);
			}
			target.pageIndex = source.pageIndex;
			target.pageCount = source.pageCount;
			if (source.memberList != null) {
				List<AppDto.GuildMemberDto> items = new List<AppDto.GuildMemberDto>();
				target.memberList = items;
				foreach (GuildMemberDto item in source.memberList) {
					AppDto.GuildMemberDto result = new AppDto.GuildMemberDto();
					GuildMemberDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.GuildMemberDto> items = new List<AppDto.GuildMemberDto>();
				target.memberList = items;
			}
						if (source.guildBaseInfoDto!=null) {
				AppDto.GuildBaseInfoDto retGuildBaseInfoDto = new AppDto.GuildBaseInfoDto();
				GuildBaseInfoDtoConverter_fillFrom(retGuildBaseInfoDto, source.guildBaseInfoDto);
				target.guildBaseInfoDto = retGuildBaseInfoDto;
			}
					}

		public void GuildMemberListDtoConverter_fillInto(AppDto.GuildMemberListDto source, GuildMemberListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentGuildMemberListDto == null ) {
				target.parentGuildMemberListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentGuildMemberListDto);
			target.pageIndex=source.pageIndex;
			target.pageCount=source.pageCount;
			if (source.memberList != null){
				foreach(AppDto.GuildMemberDto memberList in source.memberList){
					GuildMemberDto protobufModel = new GuildMemberDto();
					GuildMemberDtoConverter_fillInto(memberList, protobufModel);
					target.memberList.Add(protobufModel);
				}
			}
			if(source.guildBaseInfoDto!=null){
				GuildBaseInfoDto protobufModel = new GuildBaseInfoDto();
				GuildBaseInfoDtoConverter_fillInto(source.guildBaseInfoDto, protobufModel);
				target.guildBaseInfoDto = protobufModel;
			}
		}
		public void ActivityConfigConverter_fillFrom(AppDto.ActivityConfig target, ActivityConfig source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.name = source.name;
			target.functionOpenId = source.functionOpenId;
			target.crossDay = source.crossDay;
			if (source.dayOfWeek != null) {
				List<int> items = new List<int>();
				target.dayOfWeek = items;
				foreach (int item in source.dayOfWeek)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.dayOfWeek = items;
			}
			target.readyAtStr = source.readyAtStr;
			target.readyAtExtraStr = source.readyAtExtraStr;
			target.readyDuration = source.readyDuration;
			target.runningDuration = source.runningDuration;
			target.endingDuration = source.endingDuration;
			target.npcId = source.npcId;
			if (source.playerImageNpcIds != null) {
				List<int> items = new List<int>();
				target.playerImageNpcIds = items;
				foreach (int item in source.playerImageNpcIds)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.playerImageNpcIds = items;
			}
			target.openAnnouncementId = source.openAnnouncementId;
			target.beginAnnouncementId = source.beginAnnouncementId;
			target.endAnnouncementId = source.endAnnouncementId;
			target.sceneId = source.sceneId;
			target.subSceneNpcId = source.subSceneNpcId;
			target.playerCountLimit = source.playerCountLimit;
			if (source.subSceneIdStr != null) {
				List<int> items = new List<int>();
				target.subSceneIdStr = items;
				foreach (int item in source.subSceneIdStr)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.subSceneIdStr = items;
			}
		}

		public void ActivityConfigConverter_fillInto(AppDto.ActivityConfig source, ActivityConfig target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if(source.name!=null)
				target.name = source.name;
			target.functionOpenId=source.functionOpenId;
			target.crossDay=source.crossDay;
			if (source.dayOfWeek != null){
				foreach(int dayOfWeek in source.dayOfWeek)
					target.dayOfWeek.Add(dayOfWeek);
			}
			if(source.readyAtStr!=null)
				target.readyAtStr = source.readyAtStr;
			if(source.readyAtExtraStr!=null)
				target.readyAtExtraStr = source.readyAtExtraStr;
			target.readyDuration=source.readyDuration;
			target.runningDuration=source.runningDuration;
			target.endingDuration=source.endingDuration;
			target.npcId=source.npcId;
			if (source.playerImageNpcIds != null){
				foreach(int playerImageNpcIds in source.playerImageNpcIds)
					target.playerImageNpcIds.Add(playerImageNpcIds);
			}
			target.openAnnouncementId=source.openAnnouncementId;
			target.beginAnnouncementId=source.beginAnnouncementId;
			target.endAnnouncementId=source.endAnnouncementId;
			target.sceneId=source.sceneId;
			target.subSceneNpcId=source.subSceneNpcId;
			target.playerCountLimit=source.playerCountLimit;
			if (source.subSceneIdStr != null){
				foreach(int subSceneIdStr in source.subSceneIdStr)
					target.subSceneIdStr.Add(subSceneIdStr);
			}
		}
		public void KungfuBeginNotifyConverter_fillFrom(AppDto.KungfuBeginNotify target, KungfuBeginNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.endAt = source.endAt;
		}

		public void KungfuBeginNotifyConverter_fillInto(AppDto.KungfuBeginNotify source, KungfuBeginNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.endAt=source.endAt;
		}
		public void SceneNpcStateDtoConverter_fillFrom(AppDto.SceneNpcStateDto target, SceneNpcStateDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			if ( source.parentSceneNpcStateDto != null ) {
				SceneNpcDtoConverter_fillFrom(target,source.parentSceneNpcStateDto);
			}
						if (source.dressInfoDto!=null) {
				AppDto.PlayerDressInfoDto retDressInfoDto = new AppDto.PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillFrom(retDressInfoDto, source.dressInfoDto);
				target.dressInfoDto = retDressInfoDto;
			}
					}

		public void SceneNpcStateDtoConverter_fillInto(AppDto.SceneNpcStateDto source, SceneNpcStateDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			if ( target.parentSceneNpcStateDto == null ) {
				target.parentSceneNpcStateDto = new SceneNpcDto();
			}
			SceneNpcDtoConverter_fillInto(source,target.parentSceneNpcStateDto);
			if(source.dressInfoDto!=null){
				PlayerDressInfoDto protobufModel = new PlayerDressInfoDto();
				PlayerDressInfoDtoConverter_fillInto(source.dressInfoDto, protobufModel);
				target.dressInfoDto = protobufModel;
			}
		}
		public void TeamChallengeConfirmNotifyConverter_fillFrom(AppDto.TeamChallengeConfirmNotify target, TeamChallengeConfirmNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.needConfirmIds != null) {
				List<long> items = new List<long>();
				target.needConfirmIds = items;
                foreach (long item in source.needConfirmIds)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.needConfirmIds = items;
			}
			target.targerText = source.targerText;
		}

		public void TeamChallengeConfirmNotifyConverter_fillInto(AppDto.TeamChallengeConfirmNotify source, TeamChallengeConfirmNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.needConfirmIds != null){
				foreach(long needConfirmIds in source.needConfirmIds)
					target.needConfirmIds.Add(needConfirmIds);
			}
			if(source.targerText!=null)
				target.targerText = source.targerText;
		}
		public void TeamMemberConfirmNotifyConverter_fillFrom(AppDto.TeamMemberConfirmNotify target, TeamMemberConfirmNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			target.accept = source.accept;
		}

		public void TeamMemberConfirmNotifyConverter_fillInto(AppDto.TeamMemberConfirmNotify source, TeamMemberConfirmNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			target.accept=source.accept;
		}
		public void TradeBuyPriceDtoConverter_fillFrom(AppDto.TradeBuyPriceDto target, TradeBuyPriceDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentTradeBuyPriceDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentTradeBuyPriceDto);
			}
			target.total = source.total;
			target.count = source.count;
		}

		public void TradeBuyPriceDtoConverter_fillInto(AppDto.TradeBuyPriceDto source, TradeBuyPriceDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentTradeBuyPriceDto == null ) {
				target.parentTradeBuyPriceDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentTradeBuyPriceDto);
			target.total=source.total;
			target.count=source.count;
		}
		public void PlayerGuildInfoDtoConverter_fillFrom(AppDto.PlayerGuildInfoDto target, PlayerGuildInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.guildShowId = source.guildShowId;
			target.guildId = source.guildId;
			target.guildName = source.guildName;
			target.positionId = source.positionId;
			target.guildGrade = source.guildGrade;
			if ( source.parentPlayerGuildInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentPlayerGuildInfoDto);
			}
		}

		public void PlayerGuildInfoDtoConverter_fillInto(AppDto.PlayerGuildInfoDto source, PlayerGuildInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.guildShowId=source.guildShowId;
			target.guildId=source.guildId;
			if(source.guildName!=null)
				target.guildName = source.guildName;
			target.positionId=source.positionId;
			target.guildGrade=source.guildGrade;
			if ( target.parentPlayerGuildInfoDto == null ) {
				target.parentPlayerGuildInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentPlayerGuildInfoDto);
		}
		public void PaySuccessNotifyConverter_fillFrom(AppDto.PaySuccessNotify target, PaySuccessNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId = source.playerId;
			target.orderId = source.orderId;
			target.cent = source.cent;
		}

		public void PaySuccessNotifyConverter_fillInto(AppDto.PaySuccessNotify source, PaySuccessNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.playerId=source.playerId;
			if(source.orderId!=null)
				target.orderId = source.orderId;
			target.cent=source.cent;
		}
		public void BattleReadyNotifyConverter_fillFrom(AppDto.BattleReadyNotify target, BattleReadyNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.teamPlayersA != null) {
				List<AppDto.BattleReadyPlayerInfoDto> items = new List<AppDto.BattleReadyPlayerInfoDto>();
				target.teamPlayersA = items;
				foreach (BattleReadyPlayerInfoDto item in source.teamPlayersA) {
					AppDto.BattleReadyPlayerInfoDto result = new AppDto.BattleReadyPlayerInfoDto();
					BattleReadyPlayerInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BattleReadyPlayerInfoDto> items = new List<AppDto.BattleReadyPlayerInfoDto>();
				target.teamPlayersA = items;
			}
			if (source.teamPlayersB != null) {
				List<AppDto.BattleReadyPlayerInfoDto> items = new List<AppDto.BattleReadyPlayerInfoDto>();
				target.teamPlayersB = items;
				foreach (BattleReadyPlayerInfoDto item in source.teamPlayersB) {
					AppDto.BattleReadyPlayerInfoDto result = new AppDto.BattleReadyPlayerInfoDto();
					BattleReadyPlayerInfoDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.BattleReadyPlayerInfoDto> items = new List<AppDto.BattleReadyPlayerInfoDto>();
				target.teamPlayersB = items;
			}
			target.title = source.title;
		}

		public void BattleReadyNotifyConverter_fillInto(AppDto.BattleReadyNotify source, BattleReadyNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if (source.teamPlayersA != null){
				foreach(AppDto.BattleReadyPlayerInfoDto teamPlayersA in source.teamPlayersA){
					BattleReadyPlayerInfoDto protobufModel = new BattleReadyPlayerInfoDto();
					BattleReadyPlayerInfoDtoConverter_fillInto(teamPlayersA, protobufModel);
					target.teamPlayersA.Add(protobufModel);
				}
			}
			if (source.teamPlayersB != null){
				foreach(AppDto.BattleReadyPlayerInfoDto teamPlayersB in source.teamPlayersB){
					BattleReadyPlayerInfoDto protobufModel = new BattleReadyPlayerInfoDto();
					BattleReadyPlayerInfoDtoConverter_fillInto(teamPlayersB, protobufModel);
					target.teamPlayersB.Add(protobufModel);
				}
			}
			if(source.title!=null)
				target.title = source.title;
		}
		public void BattleReadyPlayerInfoDtoConverter_fillFrom(AppDto.BattleReadyPlayerInfoDto target, BattleReadyPlayerInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentBattleReadyPlayerInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentBattleReadyPlayerInfoDto);
			}
			target.playerId = source.playerId;
			target.nickname = source.nickname;
			target.grade = source.grade;
			target.charactorId = source.charactorId;
			target.factionId = source.factionId;
			target.quartzPropertyId = source.quartzPropertyId;
		}

		public void BattleReadyPlayerInfoDtoConverter_fillInto(AppDto.BattleReadyPlayerInfoDto source, BattleReadyPlayerInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentBattleReadyPlayerInfoDto == null ) {
				target.parentBattleReadyPlayerInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentBattleReadyPlayerInfoDto);
			target.playerId=source.playerId;
			if(source.nickname!=null)
				target.nickname = source.nickname;
			target.grade=source.grade;
			target.charactorId=source.charactorId;
			target.factionId=source.factionId;
			target.quartzPropertyId=source.quartzPropertyId;
		}
		public void CopySyncConfirmNotifyConverter_fillFrom(AppDto.CopySyncConfirmNotify target, CopySyncConfirmNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.copyId = source.copyId;
			target.accept = source.accept;
			target.type = source.type;
			if (source.playerId != null) {
				List<long> items = new List<long>();
				target.playerId = items;
                foreach (long item in source.playerId)
                    items.Add(item);
			}else{
				List<long> items = new List<long>();
				target.playerId = items;
			}
		}

		public void CopySyncConfirmNotifyConverter_fillInto(AppDto.CopySyncConfirmNotify source, CopySyncConfirmNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.copyId=source.copyId;
			target.accept=source.accept;
			target.type=source.type;
			if (source.playerId != null){
				foreach(long playerId in source.playerId)
					target.playerId.Add(playerId);
			}
		}
		public void RankKungfuDtoConverter_fillFrom(AppDto.RankKungfuDto target, RankKungfuDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentRankKungfuDto != null ) {
				RankItemDtoConverter_fillFrom(target,source.parentRankKungfuDto);
			}
			target.winRate = source.winRate;
			target.score = source.score;
		}

		public void RankKungfuDtoConverter_fillInto(AppDto.RankKungfuDto source, RankKungfuDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentRankKungfuDto == null ) {
				target.parentRankKungfuDto = new RankItemDto();
			}
			RankItemDtoConverter_fillInto(source,target.parentRankKungfuDto);
			if(source.winRate!=null)
				target.winRate = source.winRate;
			target.score=source.score;
		}
		public void NpcPeriodConverter_fillFrom(AppDto.NpcPeriod target, NpcPeriod source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.open = source.open;
			if (source.dayOfWeek != null) {
				List<int> items = new List<int>();
				target.dayOfWeek = items;
				foreach (int item in source.dayOfWeek)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.dayOfWeek = items;
			}
			if (source.beginTime != null) {
				List<string> items = new List<string>();
				target.beginTime = items;
				foreach (string item in source.beginTime)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.beginTime = items;
			}
			if (source.endTime != null) {
				List<string> items = new List<string>();
				target.endTime = items;
				foreach (string item in source.endTime)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.endTime = items;
			}
			target.activityType = source.activityType;
			if ( source.parentNpcPeriod != null ) {
				NpcGeneralConverter_fillFrom(target,source.parentNpcPeriod);
			}
		}

		public void NpcPeriodConverter_fillInto(AppDto.NpcPeriod source, NpcPeriod target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.open=source.open;
			if (source.dayOfWeek != null){
				foreach(int dayOfWeek in source.dayOfWeek)
					target.dayOfWeek.Add(dayOfWeek);
			}
			if (source.beginTime != null){
				foreach(string beginTime in source.beginTime)
					target.beginTime.Add(beginTime);
			}
			if (source.endTime != null){
				foreach(string endTime in source.endTime)
					target.endTime.Add(endTime);
			}
			target.activityType=source.activityType;
			if ( target.parentNpcPeriod == null ) {
				target.parentNpcPeriod = new NpcGeneral();
			}
			NpcGeneralConverter_fillInto(source,target.parentNpcPeriod);
		}
		public void KungfuInfoDtoConverter_fillFrom(AppDto.KungfuInfoDto target, KungfuInfoDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentKungfuInfoDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentKungfuInfoDto);
			}
						if (source.rankInfoDto!=null) {
				AppDto.RankInfoDto retRankInfoDto = new AppDto.RankInfoDto();
				RankInfoDtoConverter_fillFrom(retRankInfoDto, source.rankInfoDto);
				target.rankInfoDto = retRankInfoDto;
			}
						target.joinBattleGiftState = source.joinBattleGiftState;
			target.battleWinGiftState = source.battleWinGiftState;
			target.matchState = source.matchState;
		}

		public void KungfuInfoDtoConverter_fillInto(AppDto.KungfuInfoDto source, KungfuInfoDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentKungfuInfoDto == null ) {
				target.parentKungfuInfoDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentKungfuInfoDto);
			if(source.rankInfoDto!=null){
				RankInfoDto protobufModel = new RankInfoDto();
				RankInfoDtoConverter_fillInto(source.rankInfoDto, protobufModel);
				target.rankInfoDto = protobufModel;
			}
			target.joinBattleGiftState=source.joinBattleGiftState;
			target.battleWinGiftState=source.battleWinGiftState;
			target.matchState=source.matchState;
		}
		public void KungfuRewardConverter_fillFrom(AppDto.KungfuReward target, KungfuReward source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.items != null) {
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
				foreach (ItemDto item in source.items) {
					AppDto.ItemDto result = new AppDto.ItemDto();
					ItemDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ItemDto> items = new List<AppDto.ItemDto>();
				target.items = items;
			}
		}

		public void KungfuRewardConverter_fillInto(AppDto.KungfuReward source, KungfuReward target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.items != null){
				foreach(AppDto.ItemDto items in source.items){
					ItemDto protobufModel = new ItemDto();
					ItemDtoConverter_fillInto(items, protobufModel);
					target.items.Add(protobufModel);
				}
			}
		}
		public void RedPointConverter_fillFrom(AppDto.RedPoint target, RedPoint source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			if (source.parent != null) {
				List<int> items = new List<int>();
				target.parent = items;
				foreach (int item in source.parent)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.parent = items;
			}
		}

		public void RedPointConverter_fillInto(AppDto.RedPoint source, RedPoint target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			if (source.parent != null){
				foreach(int parent in source.parent)
					target.parent.Add(parent);
			}
		}
		public void ShowRedPointTypeDtoConverter_fillFrom(AppDto.ShowRedPointTypeDto target, ShowRedPointTypeDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.redPointId = source.redPointId;
			target.count = source.count;
		}

		public void ShowRedPointTypeDtoConverter_fillInto(AppDto.ShowRedPointTypeDto source, ShowRedPointTypeDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.redPointId=source.redPointId;
			target.count=source.count;
		}
		public void ShowRedPointTypeListDtoConverter_fillFrom(AppDto.ShowRedPointTypeListDto target, ShowRedPointTypeListDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentShowRedPointTypeListDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentShowRedPointTypeListDto);
			}
			if (source.showRedPointTypeListDto != null) {
				List<AppDto.ShowRedPointTypeDto> items = new List<AppDto.ShowRedPointTypeDto>();
				target.showRedPointTypeListDto = items;
				foreach (ShowRedPointTypeDto item in source.showRedPointTypeListDto) {
					AppDto.ShowRedPointTypeDto result = new AppDto.ShowRedPointTypeDto();
					ShowRedPointTypeDtoConverter_fillFrom(result, item);
					items.Add(result);
				}
			}else{
				List<AppDto.ShowRedPointTypeDto> items = new List<AppDto.ShowRedPointTypeDto>();
				target.showRedPointTypeListDto = items;
			}
		}

		public void ShowRedPointTypeListDtoConverter_fillInto(AppDto.ShowRedPointTypeListDto source, ShowRedPointTypeListDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentShowRedPointTypeListDto == null ) {
				target.parentShowRedPointTypeListDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentShowRedPointTypeListDto);
			if (source.showRedPointTypeListDto != null){
				foreach(AppDto.ShowRedPointTypeDto showRedPointTypeListDto in source.showRedPointTypeListDto){
					ShowRedPointTypeDto protobufModel = new ShowRedPointTypeDto();
					ShowRedPointTypeDtoConverter_fillInto(showRedPointTypeListDto, protobufModel);
					target.showRedPointTypeListDto.Add(protobufModel);
				}
			}
		}
		public void KungfuActivityInfoConverter_fillFrom(AppDto.KungfuActivityInfo target, KungfuActivityInfo source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentKungfuActivityInfo != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentKungfuActivityInfo);
			}
			target.endAt = source.endAt;
			target.state = source.state;
		}

		public void KungfuActivityInfoConverter_fillInto(AppDto.KungfuActivityInfo source, KungfuActivityInfo target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentKungfuActivityInfo == null ) {
				target.parentKungfuActivityInfo = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentKungfuActivityInfo);
			target.endAt=source.endAt;
			target.state=source.state;
		}
		public void AcceptionCondtion_3Converter_fillFrom(AppDto.AcceptionCondtion_3 target, AcceptionCondtion_3 source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentAcceptionCondtion_3 != null ) {
				AcceptConditionConverter_fillFrom(target,source.parentAcceptionCondtion_3);
			}
			target.multi = source.multi;
		}

		public void AcceptionCondtion_3Converter_fillInto(AppDto.AcceptionCondtion_3 source, AcceptionCondtion_3 target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentAcceptionCondtion_3 == null ) {
				target.parentAcceptionCondtion_3 = new AcceptCondition();
			}
			AcceptConditionConverter_fillInto(source,target.parentAcceptionCondtion_3);
			target.multi=source.multi;
		}
		public void OnUpgradeBuildingDtoConverter_fillFrom(AppDto.OnUpgradeBuildingDto target, OnUpgradeBuildingDto source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( source.parentOnUpgradeBuildingDto != null ) {
				GeneralResponseConverter_fillFrom(target,source.parentOnUpgradeBuildingDto);
			}
			target.finishTime = source.finishTime;
			target.assets = source.assets;
		}

		public void OnUpgradeBuildingDtoConverter_fillInto(AppDto.OnUpgradeBuildingDto source, OnUpgradeBuildingDto target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if ( target.parentOnUpgradeBuildingDto == null ) {
				target.parentOnUpgradeBuildingDto = new GeneralResponse();
			}
			GeneralResponseConverter_fillInto(source,target.parentOnUpgradeBuildingDto);
			target.finishTime=source.finishTime;
			target.assets=source.assets;
		}
		public void MarqueeNoticeNotifyConverter_fillFrom(AppDto.MarqueeNoticeNotify target, MarqueeNoticeNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.title = source.title;
			target.content = source.content;
			target.noticeType = source.noticeType;
		}

		public void MarqueeNoticeNotifyConverter_fillInto(AppDto.MarqueeNoticeNotify source, MarqueeNoticeNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			if(source.title!=null)
				target.title = source.title;
			if(source.content!=null)
				target.content = source.content;
			target.noticeType=source.noticeType;
		}
		public void HighTreasueyChangeNotifyConverter_fillFrom(AppDto.HighTreasueyChangeNotify target, HighTreasueyChangeNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.diomandPool = source.diomandPool;
			if (source.diomand != null) {
				List<int> items = new List<int>();
				target.diomand = items;
				foreach (int item in source.diomand)
                    items.Add(item);
			}else{
				List<int> items = new List<int>();
				target.diomand = items;
			}
			if (source.name != null) {
				List<string> items = new List<string>();
				target.name = items;
				foreach (string item in source.name)
                    items.Add(item);
			}else{
				List<string> items = new List<string>();
				target.name = items;
			}
			target.hit = source.hit;
		}

		public void HighTreasueyChangeNotifyConverter_fillInto(AppDto.HighTreasueyChangeNotify source, HighTreasueyChangeNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.diomandPool=source.diomandPool;
			if (source.diomand != null){
				foreach(int diomand in source.diomand)
					target.diomand.Add(diomand);
			}
			if (source.name != null){
				foreach(string name in source.name)
					target.name.Add(name);
			}
			target.hit=source.hit;
		}
		public void HighTreasuryNotifyConverter_fillFrom(AppDto.HighTreasuryNotify target, HighTreasuryNotify source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.highTreasuryPosition = source.highTreasuryPosition;
			target.eventId = source.eventId;
			target.thingId = source.thingId;
			target.count = source.count;
			target.announcementId = source.announcementId;
			target.propsTreasureRewardId = source.propsTreasureRewardId;
			target.rollPoint = source.rollPoint;
		}

		public void HighTreasuryNotifyConverter_fillInto(AppDto.HighTreasuryNotify source, HighTreasuryNotify target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.highTreasuryPosition=source.highTreasuryPosition;
			target.eventId=source.eventId;
			target.thingId=source.thingId;
			target.count=source.count;
			target.announcementId=source.announcementId;
			target.propsTreasureRewardId=source.propsTreasureRewardId;
			target.rollPoint=source.rollPoint;
		}
		public void CopyMissionConfigConverter_fillFrom(AppDto.CopyMissionConfig target, CopyMissionConfig source){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id = source.id;
			target.copyId = source.copyId;
			target.num = source.num;
		}

		public void CopyMissionConfigConverter_fillInto(AppDto.CopyMissionConfig source, CopyMissionConfig target){
			if (source == null)
				throw new System.ArgumentNullException("source == null");
			if (target == null)
				throw new System.ArgumentNullException("target == null");
			target.id=source.id;
			target.copyId=source.copyId;
			target.num=source.num;
		}


    private void initFillFromActions() {
    	dtoFillFromActions.Add(101, (destObject, srcObject) => instance.ErrorCodeConverter_fillFrom(destObject as AppDto.ErrorCode, srcObject as ErrorCode));
    	dtoFillFromActions.Add(102, (destObject, srcObject) => instance.StaticConfigConverter_fillFrom(destObject as AppDto.StaticConfig, srcObject as StaticConfig));
    	dtoFillFromActions.Add(103, (destObject, srcObject) => instance.StaticStringConverter_fillFrom(destObject as AppDto.StaticString, srcObject as StaticString));
    	dtoFillFromActions.Add(104, (destObject, srcObject) => instance.TraceTypeConverter_fillFrom(destObject as AppDto.TraceType, srcObject as TraceType));
    	dtoFillFromActions.Add(105, (destObject, srcObject) => instance.ErrorResponseConverter_fillFrom(destObject as AppDto.ErrorResponse, srcObject as ErrorResponse));
    	dtoFillFromActions.Add(106, (destObject, srcObject) => instance.GeneralRequestConverter_fillFrom(destObject as AppDto.GeneralRequest, srcObject as GeneralRequest));
    	dtoFillFromActions.Add(107, (destObject, srcObject) => instance.GeneralResponseConverter_fillFrom(destObject as AppDto.GeneralResponse, srcObject as GeneralResponse));
    	dtoFillFromActions.Add(108, (destObject, srcObject) => instance.SuccessResponseConverter_fillFrom(destObject as AppDto.SuccessResponse, srcObject as SuccessResponse));
    	dtoFillFromActions.Add(109, (destObject, srcObject) => instance.AppErrorCodesConverter_fillFrom(destObject as AppDto.AppErrorCodes, srcObject as AppErrorCodes));
    	dtoFillFromActions.Add(110, (destObject, srcObject) => instance.AppStaticConfigsConverter_fillFrom(destObject as AppDto.AppStaticConfigs, srcObject as AppStaticConfigs));
    	dtoFillFromActions.Add(111, (destObject, srcObject) => instance.AppStaticStringsConverter_fillFrom(destObject as AppDto.AppStaticStrings, srcObject as AppStaticStrings));
    	dtoFillFromActions.Add(112, (destObject, srcObject) => instance.AppTraceTypesConverter_fillFrom(destObject as AppDto.AppTraceTypes, srcObject as AppTraceTypes));
    	dtoFillFromActions.Add(115, (destObject, srcObject) => instance.DataListConverter_fillFrom(destObject as AppDto.DataList, srcObject as DataList));
    	dtoFillFromActions.Add(116, (destObject, srcObject) => instance.DataListVersionConverter_fillFrom(destObject as AppDto.DataListVersion, srcObject as DataListVersion));
    	dtoFillFromActions.Add(117, (destObject, srcObject) => instance.GeneralItemConverter_fillFrom(destObject as AppDto.GeneralItem, srcObject as GeneralItem));
    	dtoFillFromActions.Add(118, (destObject, srcObject) => instance.RealItemConverter_fillFrom(destObject as AppDto.RealItem, srcObject as RealItem));
    	dtoFillFromActions.Add(119, (destObject, srcObject) => instance.VirtualItemConverter_fillFrom(destObject as AppDto.VirtualItem, srcObject as VirtualItem));
    	dtoFillFromActions.Add(123, (destObject, srcObject) => instance.FactionConverter_fillFrom(destObject as AppDto.Faction, srcObject as Faction));
    	dtoFillFromActions.Add(124, (destObject, srcObject) => instance.CreatePlayerDtoConverter_fillFrom(destObject as AppDto.CreatePlayerDto, srcObject as CreatePlayerDto));
    	dtoFillFromActions.Add(125, (destObject, srcObject) => instance.PlayerDtoConverter_fillFrom(destObject as AppDto.PlayerDto, srcObject as PlayerDto));
    	dtoFillFromActions.Add(126, (destObject, srcObject) => instance.PlayerNameDtoConverter_fillFrom(destObject as AppDto.PlayerNameDto, srcObject as PlayerNameDto));
    	dtoFillFromActions.Add(128, (destObject, srcObject) => instance.GeneralCharactorConverter_fillFrom(destObject as AppDto.GeneralCharactor, srcObject as GeneralCharactor));
    	dtoFillFromActions.Add(129, (destObject, srcObject) => instance.MainCharactorConverter_fillFrom(destObject as AppDto.MainCharactor, srcObject as MainCharactor));
    	dtoFillFromActions.Add(130, (destObject, srcObject) => instance.GameServerGradeConverter_fillFrom(destObject as AppDto.GameServerGrade, srcObject as GameServerGrade));
    	dtoFillFromActions.Add(131, (destObject, srcObject) => instance.GameServerGradeDtoConverter_fillFrom(destObject as AppDto.GameServerGradeDto, srcObject as GameServerGradeDto));
    	dtoFillFromActions.Add(132, (destObject, srcObject) => instance.GameServerTimeDtoConverter_fillFrom(destObject as AppDto.GameServerTimeDto, srcObject as GameServerTimeDto));
    	dtoFillFromActions.Add(133, (destObject, srcObject) => instance.SceneMapConverter_fillFrom(destObject as AppDto.SceneMap, srcObject as SceneMap));
    	dtoFillFromActions.Add(134, (destObject, srcObject) => instance.AfterLoginDtoConverter_fillFrom(destObject as AppDto.AfterLoginDto, srcObject as AfterLoginDto));
    	dtoFillFromActions.Add(148, (destObject, srcObject) => instance.MonsterConverter_fillFrom(destObject as AppDto.Monster, srcObject as Monster));
    	dtoFillFromActions.Add(150, (destObject, srcObject) => instance.SkillConverter_fillFrom(destObject as AppDto.Skill, srcObject as Skill));
    	dtoFillFromActions.Add(151, (destObject, srcObject) => instance.PlayerDressInfoConverter_fillFrom(destObject as AppDto.PlayerDressInfo, srcObject as PlayerDressInfo));
    	dtoFillFromActions.Add(152, (destObject, srcObject) => instance.ModelConverter_fillFrom(destObject as AppDto.Model, srcObject as Model));
    	dtoFillFromActions.Add(153, (destObject, srcObject) => instance.FighterReadyNotifyDtoConverter_fillFrom(destObject as AppDto.FighterReadyNotifyDto, srcObject as FighterReadyNotifyDto));
    	dtoFillFromActions.Add(155, (destObject, srcObject) => instance.SkillAiConverter_fillFrom(destObject as AppDto.SkillAi, srcObject as SkillAi));
    	dtoFillFromActions.Add(156, (destObject, srcObject) => instance.MonsterGroupConverter_fillFrom(destObject as AppDto.MonsterGroup, srcObject as MonsterGroup));
    	dtoFillFromActions.Add(157, (destObject, srcObject) => instance.SceneDtoConverter_fillFrom(destObject as AppDto.SceneDto, srcObject as SceneDto));
    	dtoFillFromActions.Add(158, (destObject, srcObject) => instance.SceneObjectDtoConverter_fillFrom(destObject as AppDto.SceneObjectDto, srcObject as SceneObjectDto));
    	dtoFillFromActions.Add(159, (destObject, srcObject) => instance.ScenePlayerDtoConverter_fillFrom(destObject as AppDto.ScenePlayerDto, srcObject as ScenePlayerDto));
    	dtoFillFromActions.Add(164, (destObject, srcObject) => instance.DebugVideoRoundConverter_fillFrom(destObject as AppDto.DebugVideoRound, srcObject as DebugVideoRound));
    	dtoFillFromActions.Add(165, (destObject, srcObject) => instance.DemoVideoConverter_fillFrom(destObject as AppDto.DemoVideo, srcObject as DemoVideo));
    	dtoFillFromActions.Add(166, (destObject, srcObject) => instance.VideoConverter_fillFrom(destObject as AppDto.Video, srcObject as Video));
    	dtoFillFromActions.Add(167, (destObject, srcObject) => instance.VideoActionConverter_fillFrom(destObject as AppDto.VideoAction, srcObject as VideoAction));
    	dtoFillFromActions.Add(168, (destObject, srcObject) => instance.VideoInsideSkillActionConverter_fillFrom(destObject as AppDto.VideoInsideSkillAction, srcObject as VideoInsideSkillAction));
    	dtoFillFromActions.Add(169, (destObject, srcObject) => instance.VideoRoundConverter_fillFrom(destObject as AppDto.VideoRound, srcObject as VideoRound));
    	dtoFillFromActions.Add(170, (destObject, srcObject) => instance.VideoRoundActionConverter_fillFrom(destObject as AppDto.VideoRoundAction, srcObject as VideoRoundAction));
    	dtoFillFromActions.Add(171, (destObject, srcObject) => instance.VideoRoundsConverter_fillFrom(destObject as AppDto.VideoRounds, srcObject as VideoRounds));
    	dtoFillFromActions.Add(172, (destObject, srcObject) => instance.VideoSkillActionConverter_fillFrom(destObject as AppDto.VideoSkillAction, srcObject as VideoSkillAction));
    	dtoFillFromActions.Add(173, (destObject, srcObject) => instance.VideoSoldierConverter_fillFrom(destObject as AppDto.VideoSoldier, srcObject as VideoSoldier));
    	dtoFillFromActions.Add(174, (destObject, srcObject) => instance.VideoTargetStateConverter_fillFrom(destObject as AppDto.VideoTargetState, srcObject as VideoTargetState));
    	dtoFillFromActions.Add(175, (destObject, srcObject) => instance.VideoTargetStateGroupConverter_fillFrom(destObject as AppDto.VideoTargetStateGroup, srcObject as VideoTargetStateGroup));
    	dtoFillFromActions.Add(176, (destObject, srcObject) => instance.VideoTeamConverter_fillFrom(destObject as AppDto.VideoTeam, srcObject as VideoTeam));
    	dtoFillFromActions.Add(177, (destObject, srcObject) => instance.VideoActionTargetStateConverter_fillFrom(destObject as AppDto.VideoActionTargetState, srcObject as VideoActionTargetState));
    	dtoFillFromActions.Add(178, (destObject, srcObject) => instance.VideoDodgeTargetStateConverter_fillFrom(destObject as AppDto.VideoDodgeTargetState, srcObject as VideoDodgeTargetState));
    	dtoFillFromActions.Add(179, (destObject, srcObject) => instance.CharactorDtoConverter_fillFrom(destObject as AppDto.CharactorDto, srcObject as CharactorDto));
    	dtoFillFromActions.Add(180, (destObject, srcObject) => instance.SimplePlayerDtoConverter_fillFrom(destObject as AppDto.SimplePlayerDto, srcObject as SimplePlayerDto));
    	dtoFillFromActions.Add(181, (destObject, srcObject) => instance.NpcConverter_fillFrom(destObject as AppDto.Npc, srcObject as Npc));
    	dtoFillFromActions.Add(182, (destObject, srcObject) => instance.NpcStateDtoConverter_fillFrom(destObject as AppDto.NpcStateDto, srcObject as NpcStateDto));
    	dtoFillFromActions.Add(183, (destObject, srcObject) => instance.SceneObjectNotifyConverter_fillFrom(destObject as AppDto.SceneObjectNotify, srcObject as SceneObjectNotify));
    	dtoFillFromActions.Add(184, (destObject, srcObject) => instance.SceneObjectRemoveNotifyConverter_fillFrom(destObject as AppDto.SceneObjectRemoveNotify, srcObject as SceneObjectRemoveNotify));
    	dtoFillFromActions.Add(185, (destObject, srcObject) => instance.VideoBuffAddTargetStateConverter_fillFrom(destObject as AppDto.VideoBuffAddTargetState, srcObject as VideoBuffAddTargetState));
    	dtoFillFromActions.Add(186, (destObject, srcObject) => instance.VideoBuffRemoveTargetStateConverter_fillFrom(destObject as AppDto.VideoBuffRemoveTargetState, srcObject as VideoBuffRemoveTargetState));
    	dtoFillFromActions.Add(188, (destObject, srcObject) => instance.SceneNpcDtoConverter_fillFrom(destObject as AppDto.SceneNpcDto, srcObject as SceneNpcDto));
    	dtoFillFromActions.Add(189, (destObject, srcObject) => instance.SceneObjectWalkNotifyConverter_fillFrom(destObject as AppDto.SceneObjectWalkNotify, srcObject as SceneObjectWalkNotify));
    	dtoFillFromActions.Add(190, (destObject, srcObject) => instance.NpcDialogConverter_fillFrom(destObject as AppDto.NpcDialog, srcObject as NpcDialog));
    	dtoFillFromActions.Add(191, (destObject, srcObject) => instance.NpcDoubleTeleportConverter_fillFrom(destObject as AppDto.NpcDoubleTeleport, srcObject as NpcDoubleTeleport));
    	dtoFillFromActions.Add(192, (destObject, srcObject) => instance.NpcGeneralConverter_fillFrom(destObject as AppDto.NpcGeneral, srcObject as NpcGeneral));
    	dtoFillFromActions.Add(193, (destObject, srcObject) => instance.SceneObjectTeleportNotifyConverter_fillFrom(destObject as AppDto.SceneObjectTeleportNotify, srcObject as SceneObjectTeleportNotify));
    	dtoFillFromActions.Add(195, (destObject, srcObject) => instance.QueueDtoConverter_fillFrom(destObject as AppDto.QueueDto, srcObject as QueueDto));
    	dtoFillFromActions.Add(196, (destObject, srcObject) => instance.TeamDtoConverter_fillFrom(destObject as AppDto.TeamDto, srcObject as TeamDto));
    	dtoFillFromActions.Add(197, (destObject, srcObject) => instance.TeamMemberDtoConverter_fillFrom(destObject as AppDto.TeamMemberDto, srcObject as TeamMemberDto));
    	dtoFillFromActions.Add(198, (destObject, srcObject) => instance.TeamRequestNotifyConverter_fillFrom(destObject as AppDto.TeamRequestNotify, srcObject as TeamRequestNotify));
    	dtoFillFromActions.Add(199, (destObject, srcObject) => instance.TeamInvitationNotifyConverter_fillFrom(destObject as AppDto.TeamInvitationNotify, srcObject as TeamInvitationNotify));
    	dtoFillFromActions.Add(200, (destObject, srcObject) => instance.TeamMemberStatusDtoConverter_fillFrom(destObject as AppDto.TeamMemberStatusDto, srcObject as TeamMemberStatusDto));
    	dtoFillFromActions.Add(201, (destObject, srcObject) => instance.TeamStatusNotifyConverter_fillFrom(destObject as AppDto.TeamStatusNotify, srcObject as TeamStatusNotify));
    	dtoFillFromActions.Add(202, (destObject, srcObject) => instance.SkillBuffConverter_fillFrom(destObject as AppDto.SkillBuff, srcObject as SkillBuff));
    	dtoFillFromActions.Add(203, (destObject, srcObject) => instance.LeaveTeamNotifyConverter_fillFrom(destObject as AppDto.LeaveTeamNotify, srcObject as LeaveTeamNotify));
    	dtoFillFromActions.Add(204, (destObject, srcObject) => instance.BagDtoConverter_fillFrom(destObject as AppDto.BagDto, srcObject as BagDto));
    	dtoFillFromActions.Add(205, (destObject, srcObject) => instance.BagItemDtoConverter_fillFrom(destObject as AppDto.BagItemDto, srcObject as BagItemDto));
    	dtoFillFromActions.Add(206, (destObject, srcObject) => instance.BagItemNotifyConverter_fillFrom(destObject as AppDto.BagItemNotify, srcObject as BagItemNotify));
    	dtoFillFromActions.Add(208, (destObject, srcObject) => instance.CharacterAbilityConverter_fillFrom(destObject as AppDto.CharacterAbility, srcObject as CharacterAbility));
    	dtoFillFromActions.Add(210, (destObject, srcObject) => instance.CharacterPropertyDtoConverter_fillFrom(destObject as AppDto.CharacterPropertyDto, srcObject as CharacterPropertyDto));
    	dtoFillFromActions.Add(211, (destObject, srcObject) => instance.JoinTeamNotifyConverter_fillFrom(destObject as AppDto.JoinTeamNotify, srcObject as JoinTeamNotify));
    	dtoFillFromActions.Add(212, (destObject, srcObject) => instance.TeamSceneNotifyConverter_fillFrom(destObject as AppDto.TeamSceneNotify, srcObject as TeamSceneNotify));
    	dtoFillFromActions.Add(214, (destObject, srcObject) => instance.VideoRetreatStateConverter_fillFrom(destObject as AppDto.VideoRetreatState, srcObject as VideoRetreatState));
    	dtoFillFromActions.Add(216, (destObject, srcObject) => instance.AptitudeTipsConverter_fillFrom(destObject as AppDto.AptitudeTips, srcObject as AptitudeTips));
    	dtoFillFromActions.Add(217, (destObject, srcObject) => instance.BasePropertyTransformConverter_fillFrom(destObject as AppDto.BasePropertyTransform, srcObject as BasePropertyTransform));
    	dtoFillFromActions.Add(218, (destObject, srcObject) => instance.TeamCommanderNotifyConverter_fillFrom(destObject as AppDto.TeamCommanderNotify, srcObject as TeamCommanderNotify));
    	dtoFillFromActions.Add(219, (destObject, srcObject) => instance.TeamRecallNotifyConverter_fillFrom(destObject as AppDto.TeamRecallNotify, srcObject as TeamRecallNotify));
    	dtoFillFromActions.Add(220, (destObject, srcObject) => instance.BattlePlayerInfoDtoConverter_fillFrom(destObject as AppDto.BattlePlayerInfoDto, srcObject as BattlePlayerInfoDto));
    	dtoFillFromActions.Add(221, (destObject, srcObject) => instance.UITipsConverter_fillFrom(destObject as AppDto.UITips, srcObject as UITips));
    	dtoFillFromActions.Add(222, (destObject, srcObject) => instance.CommandNotifyConverter_fillFrom(destObject as AppDto.CommandNotify, srcObject as CommandNotify));
    	dtoFillFromActions.Add(223, (destObject, srcObject) => instance.MailTypeConverter_fillFrom(destObject as AppDto.MailType, srcObject as MailType));
    	dtoFillFromActions.Add(224, (destObject, srcObject) => instance.PlayerMailDtoConverter_fillFrom(destObject as AppDto.PlayerMailDto, srcObject as PlayerMailDto));
    	dtoFillFromActions.Add(225, (destObject, srcObject) => instance.VideoTargetExceptionStateConverter_fillFrom(destObject as AppDto.VideoTargetExceptionState, srcObject as VideoTargetExceptionState));
    	dtoFillFromActions.Add(226, (destObject, srcObject) => instance.SkillBuffRateConverter_fillFrom(destObject as AppDto.SkillBuffRate, srcObject as SkillBuffRate));
    	dtoFillFromActions.Add(227, (destObject, srcObject) => instance.MailsDtoConverter_fillFrom(destObject as AppDto.MailsDto, srcObject as MailsDto));
    	dtoFillFromActions.Add(228, (destObject, srcObject) => instance.TeamMemberSimpleDtoConverter_fillFrom(destObject as AppDto.TeamMemberSimpleDto, srcObject as TeamMemberSimpleDto));
    	dtoFillFromActions.Add(229, (destObject, srcObject) => instance.MailAttachmentDtoConverter_fillFrom(destObject as AppDto.MailAttachmentDto, srcObject as MailAttachmentDto));
    	dtoFillFromActions.Add(239, (destObject, srcObject) => instance.SkillsDtoConverter_fillFrom(destObject as AppDto.SkillsDto, srcObject as SkillsDto));
    	dtoFillFromActions.Add(241, (destObject, srcObject) => instance.FactionMappingConverter_fillFrom(destObject as AppDto.FactionMapping, srcObject as FactionMapping));
    	dtoFillFromActions.Add(243, (destObject, srcObject) => instance.FriendInfoDtoConverter_fillFrom(destObject as AppDto.FriendInfoDto, srcObject as FriendInfoDto));
    	dtoFillFromActions.Add(244, (destObject, srcObject) => instance.FriendOnlineNotifyConverter_fillFrom(destObject as AppDto.FriendOnlineNotify, srcObject as FriendOnlineNotify));
    	dtoFillFromActions.Add(245, (destObject, srcObject) => instance.FriendsDtoConverter_fillFrom(destObject as AppDto.FriendsDto, srcObject as FriendsDto));
    	dtoFillFromActions.Add(247, (destObject, srcObject) => instance.FriendGradeNotifyConverter_fillFrom(destObject as AppDto.FriendGradeNotify, srcObject as FriendGradeNotify));
    	dtoFillFromActions.Add(248, (destObject, srcObject) => instance.SkillPreviewInfoConverter_fillFrom(destObject as AppDto.SkillPreviewInfo, srcObject as SkillPreviewInfo));
    	dtoFillFromActions.Add(252, (destObject, srcObject) => instance.ActionQueueRemoveNotifyConverter_fillFrom(destObject as AppDto.ActionQueueRemoveNotify, srcObject as ActionQueueRemoveNotify));
    	dtoFillFromActions.Add(253, (destObject, srcObject) => instance.TeamCommandConverter_fillFrom(destObject as AppDto.TeamCommand, srcObject as TeamCommand));
    	dtoFillFromActions.Add(256, (destObject, srcObject) => instance.WealthNotifyConverter_fillFrom(destObject as AppDto.WealthNotify, srcObject as WealthNotify));
    	dtoFillFromActions.Add(257, (destObject, srcObject) => instance.FormationConverter_fillFrom(destObject as AppDto.Formation, srcObject as Formation));
    	dtoFillFromActions.Add(258, (destObject, srcObject) => instance.FormationInfoDtoConverter_fillFrom(destObject as AppDto.FormationInfoDto, srcObject as FormationInfoDto));
    	dtoFillFromActions.Add(259, (destObject, srcObject) => instance.FriendDegreeNotifyConverter_fillFrom(destObject as AppDto.FriendDegreeNotify, srcObject as FriendDegreeNotify));
    	dtoFillFromActions.Add(262, (destObject, srcObject) => instance.WarehouseDtoConverter_fillFrom(destObject as AppDto.WarehouseDto, srcObject as WarehouseDto));
    	dtoFillFromActions.Add(263, (destObject, srcObject) => instance.WarehousePageNotifyConverter_fillFrom(destObject as AppDto.WarehousePageNotify, srcObject as WarehousePageNotify));
    	dtoFillFromActions.Add(264, (destObject, srcObject) => instance.LatestTeammateNotifyConverter_fillFrom(destObject as AppDto.LatestTeammateNotify, srcObject as LatestTeammateNotify));
    	dtoFillFromActions.Add(265, (destObject, srcObject) => instance.BagCapabillityNotifyConverter_fillFrom(destObject as AppDto.BagCapabillityNotify, srcObject as BagCapabillityNotify));
    	dtoFillFromActions.Add(266, (destObject, srcObject) => instance.ChatChannelConverter_fillFrom(destObject as AppDto.ChatChannel, srcObject as ChatChannel));
    	dtoFillFromActions.Add(267, (destObject, srcObject) => instance.ChatNotifyConverter_fillFrom(destObject as AppDto.ChatNotify, srcObject as ChatNotify));
    	dtoFillFromActions.Add(269, (destObject, srcObject) => instance.ShortPlayerDtoConverter_fillFrom(destObject as AppDto.ShortPlayerDto, srcObject as ShortPlayerDto));
    	dtoFillFromActions.Add(270, (destObject, srcObject) => instance.ChatPropsConsumeConverter_fillFrom(destObject as AppDto.ChatPropsConsume, srcObject as ChatPropsConsume));
    	dtoFillFromActions.Add(272, (destObject, srcObject) => instance.ChatPhraseConverter_fillFrom(destObject as AppDto.ChatPhrase, srcObject as ChatPhrase));
    	dtoFillFromActions.Add(273, (destObject, srcObject) => instance.PlayerBanNotifyConverter_fillFrom(destObject as AppDto.PlayerBanNotify, srcObject as PlayerBanNotify));
    	dtoFillFromActions.Add(274, (destObject, srcObject) => instance.AppItemConverter_fillFrom(destObject as AppDto.AppItem, srcObject as AppItem));
    	dtoFillFromActions.Add(275, (destObject, srcObject) => instance.AppVirtualItemConverter_fillFrom(destObject as AppDto.AppVirtualItem, srcObject as AppVirtualItem));
    	dtoFillFromActions.Add(276, (destObject, srcObject) => instance.CompositePropsConverter_fillFrom(destObject as AppDto.CompositeProps, srcObject as CompositeProps));
    	dtoFillFromActions.Add(277, (destObject, srcObject) => instance.PropsConverter_fillFrom(destObject as AppDto.Props, srcObject as Props));
    	dtoFillFromActions.Add(278, (destObject, srcObject) => instance.ResolvePropsConverter_fillFrom(destObject as AppDto.ResolveProps, srcObject as ResolveProps));
    	dtoFillFromActions.Add(279, (destObject, srcObject) => instance.ResolveGainDtoConverter_fillFrom(destObject as AppDto.ResolveGainDto, srcObject as ResolveGainDto));
    	dtoFillFromActions.Add(280, (destObject, srcObject) => instance.GeneralResolveDtoConverter_fillFrom(destObject as AppDto.GeneralResolveDto, srcObject as GeneralResolveDto));
    	dtoFillFromActions.Add(281, (destObject, srcObject) => instance.ResolveParamConverter_fillFrom(destObject as AppDto.ResolveParam, srcObject as ResolveParam));
    	dtoFillFromActions.Add(282, (destObject, srcObject) => instance.ResolveParam_1Converter_fillFrom(destObject as AppDto.ResolveParam_1, srcObject as ResolveParam_1));
    	dtoFillFromActions.Add(283, (destObject, srcObject) => instance.LogicParamAdapterConverter_fillFrom(destObject as AppDto.LogicParamAdapter, srcObject as LogicParamAdapter));
    	dtoFillFromActions.Add(284, (destObject, srcObject) => instance.MailChangeIdsNotifyConverter_fillFrom(destObject as AppDto.MailChangeIdsNotify, srcObject as MailChangeIdsNotify));
    	dtoFillFromActions.Add(285, (destObject, srcObject) => instance.ExpGradeConverter_fillFrom(destObject as AppDto.ExpGrade, srcObject as ExpGrade));
    	dtoFillFromActions.Add(286, (destObject, srcObject) => instance.CharactorExpInfoNotifyConverter_fillFrom(destObject as AppDto.CharactorExpInfoNotify, srcObject as CharactorExpInfoNotify));
    	dtoFillFromActions.Add(287, (destObject, srcObject) => instance.FunctionOpenConverter_fillFrom(destObject as AppDto.FunctionOpen, srcObject as FunctionOpen));
    	dtoFillFromActions.Add(288, (destObject, srcObject) => instance.WealthItemNotifyConverter_fillFrom(destObject as AppDto.WealthItemNotify, srcObject as WealthItemNotify));
    	dtoFillFromActions.Add(290, (destObject, srcObject) => instance.TalentConverter_fillFrom(destObject as AppDto.Talent, srcObject as Talent));
    	dtoFillFromActions.Add(295, (destObject, srcObject) => instance.PotentialConverter_fillFrom(destObject as AppDto.Potential, srcObject as Potential));
    	dtoFillFromActions.Add(296, (destObject, srcObject) => instance.PotentialWealthConverter_fillFrom(destObject as AppDto.PotentialWealth, srcObject as PotentialWealth));
    	dtoFillFromActions.Add(297, (destObject, srcObject) => instance.PotentialDtoConverter_fillFrom(destObject as AppDto.PotentialDto, srcObject as PotentialDto));
    	dtoFillFromActions.Add(298, (destObject, srcObject) => instance.SpecialityConverter_fillFrom(destObject as AppDto.Speciality, srcObject as Speciality));
    	dtoFillFromActions.Add(299, (destObject, srcObject) => instance.SpecialityExpGradeConverter_fillFrom(destObject as AppDto.SpecialityExpGrade, srcObject as SpecialityExpGrade));
    	dtoFillFromActions.Add(303, (destObject, srcObject) => instance.FormationGradeConverter_fillFrom(destObject as AppDto.FormationGrade, srcObject as FormationGrade));
    	dtoFillFromActions.Add(304, (destObject, srcObject) => instance.PotentialInfoDtoConverter_fillFrom(destObject as AppDto.PotentialInfoDto, srcObject as PotentialInfoDto));
    	dtoFillFromActions.Add(307, (destObject, srcObject) => instance.SpecialityExpGradeNotifyConverter_fillFrom(destObject as AppDto.SpecialityExpGradeNotify, srcObject as SpecialityExpGradeNotify));
    	dtoFillFromActions.Add(308, (destObject, srcObject) => instance.ActionQueueDtoConverter_fillFrom(destObject as AppDto.ActionQueueDto, srcObject as ActionQueueDto));
    	dtoFillFromActions.Add(309, (destObject, srcObject) => instance.ActionReadyNotifyConverter_fillFrom(destObject as AppDto.ActionReadyNotify, srcObject as ActionReadyNotify));
    	dtoFillFromActions.Add(310, (destObject, srcObject) => instance.TeamNearbyDtoConverter_fillFrom(destObject as AppDto.TeamNearbyDto, srcObject as TeamNearbyDto));
    	dtoFillFromActions.Add(311, (destObject, srcObject) => instance.TeamPlayerDtoConverter_fillFrom(destObject as AppDto.TeamPlayerDto, srcObject as TeamPlayerDto));
    	dtoFillFromActions.Add(312, (destObject, srcObject) => instance.TeamsDtoConverter_fillFrom(destObject as AppDto.TeamsDto, srcObject as TeamsDto));
    	dtoFillFromActions.Add(313, (destObject, srcObject) => instance.TalentDtoConverter_fillFrom(destObject as AppDto.TalentDto, srcObject as TalentDto));
    	dtoFillFromActions.Add(314, (destObject, srcObject) => instance.TalentGradeDtoConverter_fillFrom(destObject as AppDto.TalentGradeDto, srcObject as TalentGradeDto));
    	dtoFillFromActions.Add(316, (destObject, srcObject) => instance.TeamActionTargetConverter_fillFrom(destObject as AppDto.TeamActionTarget, srcObject as TeamActionTarget));
    	dtoFillFromActions.Add(320, (destObject, srcObject) => instance.SpecialityDtoConverter_fillFrom(destObject as AppDto.SpecialityDto, srcObject as SpecialityDto));
    	dtoFillFromActions.Add(321, (destObject, srcObject) => instance.SpecialityGradeDtoConverter_fillFrom(destObject as AppDto.SpecialityGradeDto, srcObject as SpecialityGradeDto));
    	dtoFillFromActions.Add(322, (destObject, srcObject) => instance.SpecialityAddPointDtoConverter_fillFrom(destObject as AppDto.SpecialityAddPointDto, srcObject as SpecialityAddPointDto));
    	dtoFillFromActions.Add(334, (destObject, srcObject) => instance.RankingsConverter_fillFrom(destObject as AppDto.Rankings, srcObject as Rankings));
    	dtoFillFromActions.Add(335, (destObject, srcObject) => instance.RankInfoDtoConverter_fillFrom(destObject as AppDto.RankInfoDto, srcObject as RankInfoDto));
    	dtoFillFromActions.Add(337, (destObject, srcObject) => instance.RankPlayerGradeDtoConverter_fillFrom(destObject as AppDto.RankPlayerGradeDto, srcObject as RankPlayerGradeDto));
    	dtoFillFromActions.Add(338, (destObject, srcObject) => instance.BattleWatchDtoConverter_fillFrom(destObject as AppDto.BattleWatchDto, srcObject as BattleWatchDto));
    	dtoFillFromActions.Add(339, (destObject, srcObject) => instance.RankItemDtoConverter_fillFrom(destObject as AppDto.RankItemDto, srcObject as RankItemDto));
    	dtoFillFromActions.Add(341, (destObject, srcObject) => instance.CraftsConverter_fillFrom(destObject as AppDto.Crafts, srcObject as Crafts));
    	dtoFillFromActions.Add(342, (destObject, srcObject) => instance.MagicConverter_fillFrom(destObject as AppDto.Magic, srcObject as Magic));
    	dtoFillFromActions.Add(344, (destObject, srcObject) => instance.CraftsGradeDtoConverter_fillFrom(destObject as AppDto.CraftsGradeDto, srcObject as CraftsGradeDto));
    	dtoFillFromActions.Add(346, (destObject, srcObject) => instance.CharacterCraftsGradeConverter_fillFrom(destObject as AppDto.CharacterCraftsGrade, srcObject as CharacterCraftsGrade));
    	dtoFillFromActions.Add(348, (destObject, srcObject) => instance.CasePositionDtoConverter_fillFrom(destObject as AppDto.CasePositionDto, srcObject as CasePositionDto));
    	dtoFillFromActions.Add(349, (destObject, srcObject) => instance.FormationCaseInfoDtoConverter_fillFrom(destObject as AppDto.FormationCaseInfoDto, srcObject as FormationCaseInfoDto));
    	dtoFillFromActions.Add(350, (destObject, srcObject) => instance.DefaultSCraftsDtoConverter_fillFrom(destObject as AppDto.DefaultSCraftsDto, srcObject as DefaultSCraftsDto));
    	dtoFillFromActions.Add(351, (destObject, srcObject) => instance.SkillScopeConverter_fillFrom(destObject as AppDto.SkillScope, srcObject as SkillScope));
    	dtoFillFromActions.Add(352, (destObject, srcObject) => instance.CrewInfoDtoConverter_fillFrom(destObject as AppDto.CrewInfoDto, srcObject as CrewInfoDto));
    	dtoFillFromActions.Add(353, (destObject, srcObject) => instance.CrewConverter_fillFrom(destObject as AppDto.Crew, srcObject as Crew));
    	dtoFillFromActions.Add(355, (destObject, srcObject) => instance.CrewPropertyTransformConverter_fillFrom(destObject as AppDto.CrewPropertyTransform, srcObject as CrewPropertyTransform));
    	dtoFillFromActions.Add(356, (destObject, srcObject) => instance.CrewCraftsGradeConverter_fillFrom(destObject as AppDto.CrewCraftsGrade, srcObject as CrewCraftsGrade));
    	dtoFillFromActions.Add(358, (destObject, srcObject) => instance.CrewPositionNotifyConverter_fillFrom(destObject as AppDto.CrewPositionNotify, srcObject as CrewPositionNotify));
    	dtoFillFromActions.Add(359, (destObject, srcObject) => instance.CrewDtoConverter_fillFrom(destObject as AppDto.CrewDto, srcObject as CrewDto));
    	dtoFillFromActions.Add(360, (destObject, srcObject) => instance.CrewTrainingConverter_fillFrom(destObject as AppDto.CrewTraining, srcObject as CrewTraining));
    	dtoFillFromActions.Add(362, (destObject, srcObject) => instance.GmCodeConverter_fillFrom(destObject as AppDto.GmCode, srcObject as GmCode));
    	dtoFillFromActions.Add(363, (destObject, srcObject) => instance.JoinTeamDtoConverter_fillFrom(destObject as AppDto.JoinTeamDto, srcObject as JoinTeamDto));
    	dtoFillFromActions.Add(364, (destObject, srcObject) => instance.TeamInvitationDtoConverter_fillFrom(destObject as AppDto.TeamInvitationDto, srcObject as TeamInvitationDto));
    	dtoFillFromActions.Add(365, (destObject, srcObject) => instance.CrewPhaseConverter_fillFrom(destObject as AppDto.CrewPhase, srcObject as CrewPhase));
    	dtoFillFromActions.Add(366, (destObject, srcObject) => instance.CrewRaiseConverter_fillFrom(destObject as AppDto.CrewRaise, srcObject as CrewRaise));
    	dtoFillFromActions.Add(367, (destObject, srcObject) => instance.CrewChipNotifyConverter_fillFrom(destObject as AppDto.CrewChipNotify, srcObject as CrewChipNotify));
    	dtoFillFromActions.Add(369, (destObject, srcObject) => instance.UpgradeItemDtoConverter_fillFrom(destObject as AppDto.UpgradeItemDto, srcObject as UpgradeItemDto));
    	dtoFillFromActions.Add(370, (destObject, srcObject) => instance.ActionTimeRewardConverter_fillFrom(destObject as AppDto.ActionTimeReward, srcObject as ActionTimeReward));
    	dtoFillFromActions.Add(371, (destObject, srcObject) => instance.VideoRecordConverter_fillFrom(destObject as AppDto.VideoRecord, srcObject as VideoRecord));
    	dtoFillFromActions.Add(372, (destObject, srcObject) => instance.CraftsTrainingDtoConverter_fillFrom(destObject as AppDto.CraftsTrainingDto, srcObject as CraftsTrainingDto));
    	dtoFillFromActions.Add(373, (destObject, srcObject) => instance.CrewSkillsDtoConverter_fillFrom(destObject as AppDto.CrewSkillsDto, srcObject as CrewSkillsDto));
    	dtoFillFromActions.Add(374, (destObject, srcObject) => instance.CrewPassiveGradeConverter_fillFrom(destObject as AppDto.CrewPassiveGrade, srcObject as CrewPassiveGrade));
    	dtoFillFromActions.Add(375, (destObject, srcObject) => instance.PassiveSkillDtoConverter_fillFrom(destObject as AppDto.PassiveSkillDto, srcObject as PassiveSkillDto));
    	dtoFillFromActions.Add(376, (destObject, srcObject) => instance.PassiveSkillConverter_fillFrom(destObject as AppDto.PassiveSkill, srcObject as PassiveSkill));
    	dtoFillFromActions.Add(377, (destObject, srcObject) => instance.PassiveSkillBookConverter_fillFrom(destObject as AppDto.PassiveSkillBook, srcObject as PassiveSkillBook));
    	dtoFillFromActions.Add(378, (destObject, srcObject) => instance.CraftsTrainingSaveDtoConverter_fillFrom(destObject as AppDto.CraftsTrainingSaveDto, srcObject as CraftsTrainingSaveDto));
    	dtoFillFromActions.Add(379, (destObject, srcObject) => instance.CrewPassiveSkillConverter_fillFrom(destObject as AppDto.CrewPassiveSkill, srcObject as CrewPassiveSkill));
    	dtoFillFromActions.Add(380, (destObject, srcObject) => instance.AllCaseInfoDtoConverter_fillFrom(destObject as AppDto.AllCaseInfoDto, srcObject as AllCaseInfoDto));
    	dtoFillFromActions.Add(381, (destObject, srcObject) => instance.BloodBarConverter_fillFrom(destObject as AppDto.BloodBar, srcObject as BloodBar));
    	dtoFillFromActions.Add(382, (destObject, srcObject) => instance.CrewPropertyCalculateConverter_fillFrom(destObject as AppDto.CrewPropertyCalculate, srcObject as CrewPropertyCalculate));
    	dtoFillFromActions.Add(384, (destObject, srcObject) => instance.TeamShoutNotifyConverter_fillFrom(destObject as AppDto.TeamShoutNotify, srcObject as TeamShoutNotify));
    	dtoFillFromActions.Add(386, (destObject, srcObject) => instance.TextTipsConverter_fillFrom(destObject as AppDto.TextTips, srcObject as TextTips));
    	dtoFillFromActions.Add(387, (destObject, srcObject) => instance.CallMemberNotifyConverter_fillFrom(destObject as AppDto.CallMemberNotify, srcObject as CallMemberNotify));
    	dtoFillFromActions.Add(388, (destObject, srcObject) => instance.AutoMatchDtoConverter_fillFrom(destObject as AppDto.AutoMatchDto, srcObject as AutoMatchDto));
    	dtoFillFromActions.Add(391, (destObject, srcObject) => instance.QuartzConverter_fillFrom(destObject as AppDto.Quartz, srcObject as Quartz));
    	dtoFillFromActions.Add(392, (destObject, srcObject) => instance.QuartzStrengGradeConverter_fillFrom(destObject as AppDto.QuartzStrengGrade, srcObject as QuartzStrengGrade));
    	dtoFillFromActions.Add(393, (destObject, srcObject) => instance.QuartzExtraDtoConverter_fillFrom(destObject as AppDto.QuartzExtraDto, srcObject as QuartzExtraDto));
    	dtoFillFromActions.Add(394, (destObject, srcObject) => instance.BracerGradeConverter_fillFrom(destObject as AppDto.BracerGrade, srcObject as BracerGrade));
    	dtoFillFromActions.Add(396, (destObject, srcObject) => instance.CrewFetterDtoConverter_fillFrom(destObject as AppDto.CrewFetterDto, srcObject as CrewFetterDto));
    	dtoFillFromActions.Add(397, (destObject, srcObject) => instance.ShopConverter_fillFrom(destObject as AppDto.Shop, srcObject as Shop));
    	dtoFillFromActions.Add(399, (destObject, srcObject) => instance.CrewFetterConverter_fillFrom(destObject as AppDto.CrewFetter, srcObject as CrewFetter));
    	dtoFillFromActions.Add(401, (destObject, srcObject) => instance.ActiveCaseInfoDtoConverter_fillFrom(destObject as AppDto.ActiveCaseInfoDto, srcObject as ActiveCaseInfoDto));
    	dtoFillFromActions.Add(403, (destObject, srcObject) => instance.OrbmentConverter_fillFrom(destObject as AppDto.Orbment, srcObject as Orbment));
    	dtoFillFromActions.Add(404, (destObject, srcObject) => instance.QuartzPropertyDtoConverter_fillFrom(destObject as AppDto.QuartzPropertyDto, srcObject as QuartzPropertyDto));
    	dtoFillFromActions.Add(405, (destObject, srcObject) => instance.EquipmentConverter_fillFrom(destObject as AppDto.Equipment, srcObject as Equipment));
    	dtoFillFromActions.Add(406, (destObject, srcObject) => instance.EquipmentTypeConverter_fillFrom(destObject as AppDto.EquipmentType, srcObject as EquipmentType));
    	dtoFillFromActions.Add(407, (destObject, srcObject) => instance.EquipmentDtoConverter_fillFrom(destObject as AppDto.EquipmentDto, srcObject as EquipmentDto));
    	dtoFillFromActions.Add(408, (destObject, srcObject) => instance.EquipmentExtraDtoConverter_fillFrom(destObject as AppDto.EquipmentExtraDto, srcObject as EquipmentExtraDto));
    	dtoFillFromActions.Add(409, (destObject, srcObject) => instance.ShopGoodsDtoConverter_fillFrom(destObject as AppDto.ShopGoodsDto, srcObject as ShopGoodsDto));
    	dtoFillFromActions.Add(410, (destObject, srcObject) => instance.CrewExtNameConverter_fillFrom(destObject as AppDto.CrewExtName, srcObject as CrewExtName));
    	dtoFillFromActions.Add(411, (destObject, srcObject) => instance.EquipmentEffectsConverter_fillFrom(destObject as AppDto.EquipmentEffects, srcObject as EquipmentEffects));
    	dtoFillFromActions.Add(412, (destObject, srcObject) => instance.EquipmentPartConverter_fillFrom(destObject as AppDto.EquipmentPart, srcObject as EquipmentPart));
    	dtoFillFromActions.Add(413, (destObject, srcObject) => instance.EquipmentQualityConverter_fillFrom(destObject as AppDto.EquipmentQuality, srcObject as EquipmentQuality));
    	dtoFillFromActions.Add(414, (destObject, srcObject) => instance.ShopGoodsConverter_fillFrom(destObject as AppDto.ShopGoods, srcObject as ShopGoods));
    	dtoFillFromActions.Add(415, (destObject, srcObject) => instance.AllShopInfoDtoConverter_fillFrom(destObject as AppDto.AllShopInfoDto, srcObject as AllShopInfoDto));
    	dtoFillFromActions.Add(416, (destObject, srcObject) => instance.ShopInfoDtoConverter_fillFrom(destObject as AppDto.ShopInfoDto, srcObject as ShopInfoDto));
    	dtoFillFromActions.Add(417, (destObject, srcObject) => instance.QuartzBasePropertyConverter_fillFrom(destObject as AppDto.QuartzBaseProperty, srcObject as QuartzBaseProperty));
    	dtoFillFromActions.Add(418, (destObject, srcObject) => instance.SlotsElementLimitConverter_fillFrom(destObject as AppDto.SlotsElementLimit, srcObject as SlotsElementLimit));
    	dtoFillFromActions.Add(419, (destObject, srcObject) => instance.SlotsLinkConverter_fillFrom(destObject as AppDto.SlotsLink, srcObject as SlotsLink));
    	dtoFillFromActions.Add(420, (destObject, srcObject) => instance.EquipmentExtraPropertyConverter_fillFrom(destObject as AppDto.EquipmentExtraProperty, srcObject as EquipmentExtraProperty));
    	dtoFillFromActions.Add(422, (destObject, srcObject) => instance.QuartzPropertyConverter_fillFrom(destObject as AppDto.QuartzProperty, srcObject as QuartzProperty));
    	dtoFillFromActions.Add(423, (destObject, srcObject) => instance.EquipmentCaseDtoConverter_fillFrom(destObject as AppDto.EquipmentCaseDto, srcObject as EquipmentCaseDto));
    	dtoFillFromActions.Add(424, (destObject, srcObject) => instance.EquipmentInfoDtoConverter_fillFrom(destObject as AppDto.EquipmentInfoDto, srcObject as EquipmentInfoDto));
    	dtoFillFromActions.Add(429, (destObject, srcObject) => instance.GuildBuildingConverter_fillFrom(destObject as AppDto.GuildBuilding, srcObject as GuildBuilding));
    	dtoFillFromActions.Add(433, (destObject, srcObject) => instance.GuildGradeConverter_fillFrom(destObject as AppDto.GuildGrade, srcObject as GuildGrade));
    	dtoFillFromActions.Add(437, (destObject, srcObject) => instance.GuildPositionConverter_fillFrom(destObject as AppDto.GuildPosition, srcObject as GuildPosition));
    	dtoFillFromActions.Add(442, (destObject, srcObject) => instance.GuildTreasuryConverter_fillFrom(destObject as AppDto.GuildTreasury, srcObject as GuildTreasury));
    	dtoFillFromActions.Add(443, (destObject, srcObject) => instance.QuartzElementConverter_fillFrom(destObject as AppDto.QuartzElement, srcObject as QuartzElement));
    	dtoFillFromActions.Add(444, (destObject, srcObject) => instance.QuartzQualityConverter_fillFrom(destObject as AppDto.QuartzQuality, srcObject as QuartzQuality));
    	dtoFillFromActions.Add(445, (destObject, srcObject) => instance.MiraConvertCountDtoConverter_fillFrom(destObject as AppDto.MiraConvertCountDto, srcObject as MiraConvertCountDto));
    	dtoFillFromActions.Add(446, (destObject, srcObject) => instance.OrbmentDtoConverter_fillFrom(destObject as AppDto.OrbmentDto, srcObject as OrbmentDto));
    	dtoFillFromActions.Add(447, (destObject, srcObject) => instance.OrbmentInfoDtoConverter_fillFrom(destObject as AppDto.OrbmentInfoDto, srcObject as OrbmentInfoDto));
    	dtoFillFromActions.Add(448, (destObject, srcObject) => instance.QuartzPropertyListDtoConverter_fillFrom(destObject as AppDto.QuartzPropertyListDto, srcObject as QuartzPropertyListDto));
    	dtoFillFromActions.Add(449, (destObject, srcObject) => instance.SlotsDtoConverter_fillFrom(destObject as AppDto.SlotsDto, srcObject as SlotsDto));
    	dtoFillFromActions.Add(450, (destObject, srcObject) => instance.QuartzSmithGradeConverter_fillFrom(destObject as AppDto.QuartzSmithGrade, srcObject as QuartzSmithGrade));
    	dtoFillFromActions.Add(451, (destObject, srcObject) => instance.MagicChangeDtoConverter_fillFrom(destObject as AppDto.MagicChangeDto, srcObject as MagicChangeDto));
    	dtoFillFromActions.Add(452, (destObject, srcObject) => instance.PropsParamConverter_fillFrom(destObject as AppDto.PropsParam, srcObject as PropsParam));
    	dtoFillFromActions.Add(453, (destObject, srcObject) => instance.HearsayNotifyConverter_fillFrom(destObject as AppDto.HearsayNotify, srcObject as HearsayNotify));
    	dtoFillFromActions.Add(454, (destObject, srcObject) => instance.TollgateConverter_fillFrom(destObject as AppDto.Tollgate, srcObject as Tollgate));
    	dtoFillFromActions.Add(455, (destObject, srcObject) => instance.AcceptConditionsConverter_fillFrom(destObject as AppDto.AcceptConditions, srcObject as AcceptConditions));
    	dtoFillFromActions.Add(456, (destObject, srcObject) => instance.AcceptGiftsConverter_fillFrom(destObject as AppDto.AcceptGifts, srcObject as AcceptGifts));
    	dtoFillFromActions.Add(457, (destObject, srcObject) => instance.MissionConverter_fillFrom(destObject as AppDto.Mission, srcObject as Mission));
    	dtoFillFromActions.Add(458, (destObject, srcObject) => instance.MissionDialogConverter_fillFrom(destObject as AppDto.MissionDialog, srcObject as MissionDialog));
    	dtoFillFromActions.Add(459, (destObject, srcObject) => instance.MissionDialogOptionConverter_fillFrom(destObject as AppDto.MissionDialogOption, srcObject as MissionDialogOption));
    	dtoFillFromActions.Add(460, (destObject, srcObject) => instance.MissionDialogSequenceConverter_fillFrom(destObject as AppDto.MissionDialogSequence, srcObject as MissionDialogSequence));
    	dtoFillFromActions.Add(461, (destObject, srcObject) => instance.MissionTypeConverter_fillFrom(destObject as AppDto.MissionType, srcObject as MissionType));
    	dtoFillFromActions.Add(462, (destObject, srcObject) => instance.SubmitConditionsConverter_fillFrom(destObject as AppDto.SubmitConditions, srcObject as SubmitConditions));
    	dtoFillFromActions.Add(463, (destObject, srcObject) => instance.MissionSubmitStateNotifyConverter_fillFrom(destObject as AppDto.MissionSubmitStateNotify, srcObject as MissionSubmitStateNotify));
    	dtoFillFromActions.Add(464, (destObject, srcObject) => instance.PlayerMissionDtoConverter_fillFrom(destObject as AppDto.PlayerMissionDto, srcObject as PlayerMissionDto));
    	dtoFillFromActions.Add(465, (destObject, srcObject) => instance.SubmitDtoConverter_fillFrom(destObject as AppDto.SubmitDto, srcObject as SubmitDto));
    	dtoFillFromActions.Add(466, (destObject, srcObject) => instance.AcceptConditionConverter_fillFrom(destObject as AppDto.AcceptCondition, srcObject as AcceptCondition));
    	dtoFillFromActions.Add(467, (destObject, srcObject) => instance.AcceptionCondtion_1Converter_fillFrom(destObject as AppDto.AcceptionCondtion_1, srcObject as AcceptionCondtion_1));
    	dtoFillFromActions.Add(468, (destObject, srcObject) => instance.AcceptionCondtion_2Converter_fillFrom(destObject as AppDto.AcceptionCondtion_2, srcObject as AcceptionCondtion_2));
    	dtoFillFromActions.Add(469, (destObject, srcObject) => instance.SubmitConditionConverter_fillFrom(destObject as AppDto.SubmitCondition, srcObject as SubmitCondition));
    	dtoFillFromActions.Add(470, (destObject, srcObject) => instance.NpcAppearanceConverter_fillFrom(destObject as AppDto.NpcAppearance, srcObject as NpcAppearance));
    	dtoFillFromActions.Add(471, (destObject, srcObject) => instance.NpcInfoDtoConverter_fillFrom(destObject as AppDto.NpcInfoDto, srcObject as NpcInfoDto));
    	dtoFillFromActions.Add(472, (destObject, srcObject) => instance.PlotConverter_fillFrom(destObject as AppDto.Plot, srcObject as Plot));
    	dtoFillFromActions.Add(473, (destObject, srcObject) => instance.PlotEndAcceptMissionEventConverter_fillFrom(destObject as AppDto.PlotEndAcceptMissionEvent, srcObject as PlotEndAcceptMissionEvent));
    	dtoFillFromActions.Add(474, (destObject, srcObject) => instance.PlotEndBattleEventConverter_fillFrom(destObject as AppDto.PlotEndBattleEvent, srcObject as PlotEndBattleEvent));
    	dtoFillFromActions.Add(476, (destObject, srcObject) => instance.PlotEndEnterSceneEventConverter_fillFrom(destObject as AppDto.PlotEndEnterSceneEvent, srcObject as PlotEndEnterSceneEvent));
    	dtoFillFromActions.Add(477, (destObject, srcObject) => instance.PlotEndEventConverter_fillFrom(destObject as AppDto.PlotEndEvent, srcObject as PlotEndEvent));
    	dtoFillFromActions.Add(478, (destObject, srcObject) => instance.PlotEndPlotEventConverter_fillFrom(destObject as AppDto.PlotEndPlotEvent, srcObject as PlotEndPlotEvent));
    	dtoFillFromActions.Add(479, (destObject, srcObject) => instance.TalkSubmitDtoConverter_fillFrom(destObject as AppDto.TalkSubmitDto, srcObject as TalkSubmitDto));
    	dtoFillFromActions.Add(480, (destObject, srcObject) => instance.ItemDtoConverter_fillFrom(destObject as AppDto.ItemDto, srcObject as ItemDto));
    	dtoFillFromActions.Add(481, (destObject, srcObject) => instance.MissionCleanNotifyConverter_fillFrom(destObject as AppDto.MissionCleanNotify, srcObject as MissionCleanNotify));
    	dtoFillFromActions.Add(482, (destObject, srcObject) => instance.PlayerBranchMissionDtoConverter_fillFrom(destObject as AppDto.PlayerBranchMissionDto, srcObject as PlayerBranchMissionDto));
    	dtoFillFromActions.Add(483, (destObject, srcObject) => instance.PlayerMasterMissionDtoConverter_fillFrom(destObject as AppDto.PlayerMasterMissionDto, srcObject as PlayerMasterMissionDto));
    	dtoFillFromActions.Add(484, (destObject, srcObject) => instance.PlayerMissionNotifyConverter_fillFrom(destObject as AppDto.PlayerMissionNotify, srcObject as PlayerMissionNotify));
    	dtoFillFromActions.Add(486, (destObject, srcObject) => instance.ShopTypeConverter_fillFrom(destObject as AppDto.ShopType, srcObject as ShopType));
    	dtoFillFromActions.Add(487, (destObject, srcObject) => instance.QuartzStrengMaterialConverter_fillFrom(destObject as AppDto.QuartzStrengMaterial, srcObject as QuartzStrengMaterial));
    	dtoFillFromActions.Add(490, (destObject, srcObject) => instance.ExchangeCurrencyConverter_fillFrom(destObject as AppDto.ExchangeCurrency, srcObject as ExchangeCurrency));
    	dtoFillFromActions.Add(491, (destObject, srcObject) => instance.ExchangeRateConverter_fillFrom(destObject as AppDto.ExchangeRate, srcObject as ExchangeRate));
    	dtoFillFromActions.Add(495, (destObject, srcObject) => instance.MissionStatDtoConverter_fillFrom(destObject as AppDto.MissionStatDto, srcObject as MissionStatDto));
    	dtoFillFromActions.Add(496, (destObject, srcObject) => instance.PlayerMissionListDtoConverter_fillFrom(destObject as AppDto.PlayerMissionListDto, srcObject as PlayerMissionListDto));
    	dtoFillFromActions.Add(498, (destObject, srcObject) => instance.ShowMonsterSubmitDtoConverter_fillFrom(destObject as AppDto.ShowMonsterSubmitDto, srcObject as ShowMonsterSubmitDto));
    	dtoFillFromActions.Add(499, (destObject, srcObject) => instance.NpcStaticGroupConverter_fillFrom(destObject as AppDto.NpcStaticGroup, srcObject as NpcStaticGroup));
    	dtoFillFromActions.Add(500, (destObject, srcObject) => instance.CrewChipDtoConverter_fillFrom(destObject as AppDto.CrewChipDto, srcObject as CrewChipDto));
    	dtoFillFromActions.Add(501, (destObject, srcObject) => instance.CollectionItemSubmitDtoConverter_fillFrom(destObject as AppDto.CollectionItemSubmitDto, srcObject as CollectionItemSubmitDto));
    	dtoFillFromActions.Add(502, (destObject, srcObject) => instance.ItemNpcRelationConverter_fillFrom(destObject as AppDto.ItemNpcRelation, srcObject as ItemNpcRelation));
    	dtoFillFromActions.Add(503, (destObject, srcObject) => instance.ItemStaticGroupConverter_fillFrom(destObject as AppDto.ItemStaticGroup, srcObject as ItemStaticGroup));
    	dtoFillFromActions.Add(504, (destObject, srcObject) => instance.ItemStaticParamConverter_fillFrom(destObject as AppDto.ItemStaticParam, srcObject as ItemStaticParam));
    	dtoFillFromActions.Add(505, (destObject, srcObject) => instance.EmbedPhaseConverter_fillFrom(destObject as AppDto.EmbedPhase, srcObject as EmbedPhase));
    	dtoFillFromActions.Add(506, (destObject, srcObject) => instance.PropsParam_1Converter_fillFrom(destObject as AppDto.PropsParam_1, srcObject as PropsParam_1));
    	dtoFillFromActions.Add(507, (destObject, srcObject) => instance.AssistSkillConverter_fillFrom(destObject as AppDto.AssistSkill, srcObject as AssistSkill));
    	dtoFillFromActions.Add(508, (destObject, srcObject) => instance.PlayerDressInfoDtoConverter_fillFrom(destObject as AppDto.PlayerDressInfoDto, srcObject as PlayerDressInfoDto));
    	dtoFillFromActions.Add(509, (destObject, srcObject) => instance.AppMissionItemConverter_fillFrom(destObject as AppDto.AppMissionItem, srcObject as AppMissionItem));
    	dtoFillFromActions.Add(510, (destObject, srcObject) => instance.AssistSkillGradeConsumeConverter_fillFrom(destObject as AppDto.AssistSkillGradeConsume, srcObject as AssistSkillGradeConsume));
    	dtoFillFromActions.Add(511, (destObject, srcObject) => instance.AssistSkillMakeConsumeConverter_fillFrom(destObject as AppDto.AssistSkillMakeConsume, srcObject as AssistSkillMakeConsume));
    	dtoFillFromActions.Add(512, (destObject, srcObject) => instance.AssistSkillDtoConverter_fillFrom(destObject as AppDto.AssistSkillDto, srcObject as AssistSkillDto));
    	dtoFillFromActions.Add(513, (destObject, srcObject) => instance.MedallionPropsConverter_fillFrom(destObject as AppDto.MedallionProps, srcObject as MedallionProps));
    	dtoFillFromActions.Add(514, (destObject, srcObject) => instance.EngraveDtoConverter_fillFrom(destObject as AppDto.EngraveDto, srcObject as EngraveDto));
    	dtoFillFromActions.Add(515, (destObject, srcObject) => instance.MedallionDtoConverter_fillFrom(destObject as AppDto.MedallionDto, srcObject as MedallionDto));
    	dtoFillFromActions.Add(516, (destObject, srcObject) => instance.PropsParam_3Converter_fillFrom(destObject as AppDto.PropsParam_3, srcObject as PropsParam_3));
    	dtoFillFromActions.Add(517, (destObject, srcObject) => instance.EmbedHoleDtoConverter_fillFrom(destObject as AppDto.EmbedHoleDto, srcObject as EmbedHoleDto));
    	dtoFillFromActions.Add(518, (destObject, srcObject) => instance.EmbedHolesDtoConverter_fillFrom(destObject as AppDto.EmbedHolesDto, srcObject as EmbedHolesDto));
    	dtoFillFromActions.Add(519, (destObject, srcObject) => instance.AssistSkillMakeDtoConverter_fillFrom(destObject as AppDto.AssistSkillMakeDto, srcObject as AssistSkillMakeDto));
    	dtoFillFromActions.Add(520, (destObject, srcObject) => instance.ApplyItemSubmitDtoConverter_fillFrom(destObject as AppDto.ApplyItemSubmitDto, srcObject as ApplyItemSubmitDto));
    	dtoFillFromActions.Add(521, (destObject, srcObject) => instance.SceneAppearanceStaticGroupConverter_fillFrom(destObject as AppDto.SceneAppearanceStaticGroup, srcObject as SceneAppearanceStaticGroup));
    	dtoFillFromActions.Add(522, (destObject, srcObject) => instance.NpcMonsterConverter_fillFrom(destObject as AppDto.NpcMonster, srcObject as NpcMonster));
    	dtoFillFromActions.Add(523, (destObject, srcObject) => instance.NpcVariableConverter_fillFrom(destObject as AppDto.NpcVariable, srcObject as NpcVariable));
    	dtoFillFromActions.Add(524, (destObject, srcObject) => instance.SceneInfoDtoConverter_fillFrom(destObject as AppDto.SceneInfoDto, srcObject as SceneInfoDto));
    	dtoFillFromActions.Add(525, (destObject, srcObject) => instance.EmbedApertureDtoConverter_fillFrom(destObject as AppDto.EmbedApertureDto, srcObject as EmbedApertureDto));
    	dtoFillFromActions.Add(526, (destObject, srcObject) => instance.PickItemSubmitInfoDtoConverter_fillFrom(destObject as AppDto.PickItemSubmitInfoDto, srcObject as PickItemSubmitInfoDto));
    	dtoFillFromActions.Add(527, (destObject, srcObject) => instance.PlayerMissionFinishNotifyConverter_fillFrom(destObject as AppDto.PlayerMissionFinishNotify, srcObject as PlayerMissionFinishNotify));
    	dtoFillFromActions.Add(528, (destObject, srcObject) => instance.UpgradeSubmitDtoConverter_fillFrom(destObject as AppDto.UpgradeSubmitDto, srcObject as UpgradeSubmitDto));
    	dtoFillFromActions.Add(529, (destObject, srcObject) => instance.AssistSkillInfoDtoConverter_fillFrom(destObject as AppDto.AssistSkillInfoDto, srcObject as AssistSkillInfoDto));
    	dtoFillFromActions.Add(530, (destObject, srcObject) => instance.AssistSkillModelDtoConverter_fillFrom(destObject as AppDto.AssistSkillModelDto, srcObject as AssistSkillModelDto));
    	dtoFillFromActions.Add(531, (destObject, srcObject) => instance.EquipmentPropertyDtoConverter_fillFrom(destObject as AppDto.EquipmentPropertyDto, srcObject as EquipmentPropertyDto));
    	dtoFillFromActions.Add(532, (destObject, srcObject) => instance.VideoDrivingTargetStateConverter_fillFrom(destObject as AppDto.VideoDrivingTargetState, srcObject as VideoDrivingTargetState));
    	dtoFillFromActions.Add(533, (destObject, srcObject) => instance.PropsExtraDtoConverter_fillFrom(destObject as AppDto.PropsExtraDto, srcObject as PropsExtraDto));
    	dtoFillFromActions.Add(534, (destObject, srcObject) => instance.PropsParam_2Converter_fillFrom(destObject as AppDto.PropsParam_2, srcObject as PropsParam_2));
    	dtoFillFromActions.Add(535, (destObject, srcObject) => instance.HiddenMonsterSubmitDtoConverter_fillFrom(destObject as AppDto.HiddenMonsterSubmitDto, srcObject as HiddenMonsterSubmitDto));
    	dtoFillFromActions.Add(536, (destObject, srcObject) => instance.MissionItemNotifyConverter_fillFrom(destObject as AppDto.MissionItemNotify, srcObject as MissionItemNotify));
    	dtoFillFromActions.Add(539, (destObject, srcObject) => instance.PropsParam_4Converter_fillFrom(destObject as AppDto.PropsParam_4, srcObject as PropsParam_4));
    	dtoFillFromActions.Add(540, (destObject, srcObject) => instance.AssistSkillGradeMaitchItemConverter_fillFrom(destObject as AppDto.AssistSkillGradeMaitchItem, srcObject as AssistSkillGradeMaitchItem));
    	dtoFillFromActions.Add(541, (destObject, srcObject) => instance.PropsEffectMatchConverter_fillFrom(destObject as AppDto.PropsEffectMatch, srcObject as PropsEffectMatch));
    	dtoFillFromActions.Add(542, (destObject, srcObject) => instance.PropsParam_5Converter_fillFrom(destObject as AppDto.PropsParam_5, srcObject as PropsParam_5));
    	dtoFillFromActions.Add(543, (destObject, srcObject) => instance.FindtemSubmitInfoDtoConverter_fillFrom(destObject as AppDto.FindtemSubmitInfoDto, srcObject as FindtemSubmitInfoDto));
    	dtoFillFromActions.Add(544, (destObject, srcObject) => instance.EquipmentCaseItemDtoConverter_fillFrom(destObject as AppDto.EquipmentCaseItemDto, srcObject as EquipmentCaseItemDto));
    	dtoFillFromActions.Add(545, (destObject, srcObject) => instance.AssistSkillForgetConsumeDtoConverter_fillFrom(destObject as AppDto.AssistSkillForgetConsumeDto, srcObject as AssistSkillForgetConsumeDto));
    	dtoFillFromActions.Add(546, (destObject, srcObject) => instance.WareHouseExpandConverter_fillFrom(destObject as AppDto.WareHouseExpand, srcObject as WareHouseExpand));
    	dtoFillFromActions.Add(548, (destObject, srcObject) => instance.PropsParam_6Converter_fillFrom(destObject as AppDto.PropsParam_6, srcObject as PropsParam_6));
    	dtoFillFromActions.Add(549, (destObject, srcObject) => instance.CharactorPropertyUpdateDtoConverter_fillFrom(destObject as AppDto.CharactorPropertyUpdateDto, srcObject as CharactorPropertyUpdateDto));
    	dtoFillFromActions.Add(550, (destObject, srcObject) => instance.PrePayNotifyConverter_fillFrom(destObject as AppDto.PrePayNotify, srcObject as PrePayNotify));
    	dtoFillFromActions.Add(551, (destObject, srcObject) => instance.FunctionOpenNotifyConverter_fillFrom(destObject as AppDto.FunctionOpenNotify, srcObject as FunctionOpenNotify));
    	dtoFillFromActions.Add(552, (destObject, srcObject) => instance.BattleForceExitNotifyConverter_fillFrom(destObject as AppDto.BattleForceExitNotify, srcObject as BattleForceExitNotify));
    	dtoFillFromActions.Add(553, (destObject, srcObject) => instance.BattleAutoNotifyConverter_fillFrom(destObject as AppDto.BattleAutoNotify, srcObject as BattleAutoNotify));
    	dtoFillFromActions.Add(555, (destObject, srcObject) => instance.GameEffectConstConverter_fillFrom(destObject as AppDto.GameEffectConst, srcObject as GameEffectConst));
    	dtoFillFromActions.Add(556, (destObject, srcObject) => instance.VideoActionTimeRewardConverter_fillFrom(destObject as AppDto.VideoActionTimeReward, srcObject as VideoActionTimeReward));
    	dtoFillFromActions.Add(557, (destObject, srcObject) => instance.MatchBtnNotifyConverter_fillFrom(destObject as AppDto.MatchBtnNotify, srcObject as MatchBtnNotify));
    	dtoFillFromActions.Add(558, (destObject, srcObject) => instance.TeamMainActionConverter_fillFrom(destObject as AppDto.TeamMainAction, srcObject as TeamMainAction));
    	dtoFillFromActions.Add(559, (destObject, srcObject) => instance.StallExpandConverter_fillFrom(destObject as AppDto.StallExpand, srcObject as StallExpand));
    	dtoFillFromActions.Add(560, (destObject, srcObject) => instance.StallGoodsConverter_fillFrom(destObject as AppDto.StallGoods, srcObject as StallGoods));
    	dtoFillFromActions.Add(561, (destObject, srcObject) => instance.PlayerStallGoodsDtoConverter_fillFrom(destObject as AppDto.PlayerStallGoodsDto, srcObject as PlayerStallGoodsDto));
    	dtoFillFromActions.Add(562, (destObject, srcObject) => instance.StallCenterDtoConverter_fillFrom(destObject as AppDto.StallCenterDto, srcObject as StallCenterDto));
    	dtoFillFromActions.Add(563, (destObject, srcObject) => instance.StallDrawNotifyConverter_fillFrom(destObject as AppDto.StallDrawNotify, srcObject as StallDrawNotify));
    	dtoFillFromActions.Add(564, (destObject, srcObject) => instance.StallGoodsDtoConverter_fillFrom(destObject as AppDto.StallGoodsDto, srcObject as StallGoodsDto));
    	dtoFillFromActions.Add(566, (destObject, srcObject) => instance.TradeGoodsConverter_fillFrom(destObject as AppDto.TradeGoods, srcObject as TradeGoods));
    	dtoFillFromActions.Add(567, (destObject, srcObject) => instance.TradeMenuConverter_fillFrom(destObject as AppDto.TradeMenu, srcObject as TradeMenu));
    	dtoFillFromActions.Add(568, (destObject, srcObject) => instance.TradeCenterDtoConverter_fillFrom(destObject as AppDto.TradeCenterDto, srcObject as TradeCenterDto));
    	dtoFillFromActions.Add(569, (destObject, srcObject) => instance.TradeGoodsDtoConverter_fillFrom(destObject as AppDto.TradeGoodsDto, srcObject as TradeGoodsDto));
    	dtoFillFromActions.Add(571, (destObject, srcObject) => instance.FindItemStateNotifyConverter_fillFrom(destObject as AppDto.FindItemStateNotify, srcObject as FindItemStateNotify));
    	dtoFillFromActions.Add(572, (destObject, srcObject) => instance.FriendListDtoConverter_fillFrom(destObject as AppDto.FriendListDto, srcObject as FriendListDto));
    	dtoFillFromActions.Add(573, (destObject, srcObject) => instance.FriendLoadMsgDtoConverter_fillFrom(destObject as AppDto.FriendLoadMsgDto, srcObject as FriendLoadMsgDto));
    	dtoFillFromActions.Add(574, (destObject, srcObject) => instance.EquipmentGroupConverter_fillFrom(destObject as AppDto.EquipmentGroup, srcObject as EquipmentGroup));
    	dtoFillFromActions.Add(575, (destObject, srcObject) => instance.PropsParam_7Converter_fillFrom(destObject as AppDto.PropsParam_7, srcObject as PropsParam_7));
    	dtoFillFromActions.Add(576, (destObject, srcObject) => instance.MissionRecordConverter_fillFrom(destObject as AppDto.MissionRecord, srcObject as MissionRecord));
    	dtoFillFromActions.Add(577, (destObject, srcObject) => instance.FriendActionNotifyConverter_fillFrom(destObject as AppDto.FriendActionNotify, srcObject as FriendActionNotify));
    	dtoFillFromActions.Add(578, (destObject, srcObject) => instance.FriendDynamicNotifyConverter_fillFrom(destObject as AppDto.FriendDynamicNotify, srcObject as FriendDynamicNotify));
    	dtoFillFromActions.Add(579, (destObject, srcObject) => instance.StallCashDtoConverter_fillFrom(destObject as AppDto.StallCashDto, srcObject as StallCashDto));
    	dtoFillFromActions.Add(581, (destObject, srcObject) => instance.EquipmentAtrifactConverter_fillFrom(destObject as AppDto.EquipmentAtrifact, srcObject as EquipmentAtrifact));
    	dtoFillFromActions.Add(582, (destObject, srcObject) => instance.OnSmithEquipemntDtoConverter_fillFrom(destObject as AppDto.OnSmithEquipemntDto, srcObject as OnSmithEquipemntDto));
    	dtoFillFromActions.Add(583, (destObject, srcObject) => instance.AtrifactDtoConverter_fillFrom(destObject as AppDto.AtrifactDto, srcObject as AtrifactDto));
    	dtoFillFromActions.Add(584, (destObject, srcObject) => instance.ItemTipConverter_fillFrom(destObject as AppDto.ItemTip, srcObject as ItemTip));
    	dtoFillFromActions.Add(585, (destObject, srcObject) => instance.ItemTipsNotifyConverter_fillFrom(destObject as AppDto.ItemTipsNotify, srcObject as ItemTipsNotify));
    	dtoFillFromActions.Add(586, (destObject, srcObject) => instance.EmbedPhaseNotifyConverter_fillFrom(destObject as AppDto.EmbedPhaseNotify, srcObject as EmbedPhaseNotify));
    	dtoFillFromActions.Add(588, (destObject, srcObject) => instance.CrewInfosDtoConverter_fillFrom(destObject as AppDto.CrewInfosDto, srcObject as CrewInfosDto));
    	dtoFillFromActions.Add(589, (destObject, srcObject) => instance.AssistSkillMakeItemDtoConverter_fillFrom(destObject as AppDto.AssistSkillMakeItemDto, srcObject as AssistSkillMakeItemDto));
    	dtoFillFromActions.Add(590, (destObject, srcObject) => instance.BracerExpInfoNotifyConverter_fillFrom(destObject as AppDto.BracerExpInfoNotify, srcObject as BracerExpInfoNotify));
    	dtoFillFromActions.Add(592, (destObject, srcObject) => instance.ElementRelativeConverter_fillFrom(destObject as AppDto.ElementRelative, srcObject as ElementRelative));
    	dtoFillFromActions.Add(593, (destObject, srcObject) => instance.CrewPersonalityConverter_fillFrom(destObject as AppDto.CrewPersonality, srcObject as CrewPersonality));
    	dtoFillFromActions.Add(595, (destObject, srcObject) => instance.PropsParam_12Converter_fillFrom(destObject as AppDto.PropsParam_12, srcObject as PropsParam_12));
    	dtoFillFromActions.Add(596, (destObject, srcObject) => instance.PropsParam_11Converter_fillFrom(destObject as AppDto.PropsParam_11, srcObject as PropsParam_11));
    	dtoFillFromActions.Add(597, (destObject, srcObject) => instance.PickItemPointDtoConverter_fillFrom(destObject as AppDto.PickItemPointDto, srcObject as PickItemPointDto));
    	dtoFillFromActions.Add(598, (destObject, srcObject) => instance.PlayerFactionMissionDtoConverter_fillFrom(destObject as AppDto.PlayerFactionMissionDto, srcObject as PlayerFactionMissionDto));
    	dtoFillFromActions.Add(599, (destObject, srcObject) => instance.TradeGoodsListNotifyConverter_fillFrom(destObject as AppDto.TradeGoodsListNotify, srcObject as TradeGoodsListNotify));
    	dtoFillFromActions.Add(600, (destObject, srcObject) => instance.DialogFunctionConverter_fillFrom(destObject as AppDto.DialogFunction, srcObject as DialogFunction));
    	dtoFillFromActions.Add(601, (destObject, srcObject) => instance.BagItemListDtoConverter_fillFrom(destObject as AppDto.BagItemListDto, srcObject as BagItemListDto));
    	dtoFillFromActions.Add(602, (destObject, srcObject) => instance.CrewShortDtoConverter_fillFrom(destObject as AppDto.CrewShortDto, srcObject as CrewShortDto));
    	dtoFillFromActions.Add(603, (destObject, srcObject) => instance.CrewShortListDtoConverter_fillFrom(destObject as AppDto.CrewShortListDto, srcObject as CrewShortListDto));
    	dtoFillFromActions.Add(604, (destObject, srcObject) => instance.PickItemStateNotifyConverter_fillFrom(destObject as AppDto.PickItemStateNotify, srcObject as PickItemStateNotify));
    	dtoFillFromActions.Add(605, (destObject, srcObject) => instance.PlayerSceneObjectChangeNotifyConverter_fillFrom(destObject as AppDto.PlayerSceneObjectChangeNotify, srcObject as PlayerSceneObjectChangeNotify));
    	dtoFillFromActions.Add(606, (destObject, srcObject) => instance.FactionMissionIdDtoConverter_fillFrom(destObject as AppDto.FactionMissionIdDto, srcObject as FactionMissionIdDto));
    	dtoFillFromActions.Add(607, (destObject, srcObject) => instance.CrewFavorConverter_fillFrom(destObject as AppDto.CrewFavor, srcObject as CrewFavor));
    	dtoFillFromActions.Add(608, (destObject, srcObject) => instance.FactionMissionRateConverter_fillFrom(destObject as AppDto.FactionMissionRate, srcObject as FactionMissionRate));
    	dtoFillFromActions.Add(609, (destObject, srcObject) => instance.OnIncreaseFavorDtoConverter_fillFrom(destObject as AppDto.OnIncreaseFavorDto, srcObject as OnIncreaseFavorDto));
    	dtoFillFromActions.Add(610, (destObject, srcObject) => instance.NpcSceneConstableMonsterConverter_fillFrom(destObject as AppDto.NpcSceneConstableMonster, srcObject as NpcSceneConstableMonster));
    	dtoFillFromActions.Add(611, (destObject, srcObject) => instance.NpcSceneMonsterConverter_fillFrom(destObject as AppDto.NpcSceneMonster, srcObject as NpcSceneMonster));
    	dtoFillFromActions.Add(612, (destObject, srcObject) => instance.NpcBattleNotifyConverter_fillFrom(destObject as AppDto.NpcBattleNotify, srcObject as NpcBattleNotify));
    	dtoFillFromActions.Add(613, (destObject, srcObject) => instance.BracerEnterDtoConverter_fillFrom(destObject as AppDto.BracerEnterDto, srcObject as BracerEnterDto));
    	dtoFillFromActions.Add(614, (destObject, srcObject) => instance.BracerMissionDtoConverter_fillFrom(destObject as AppDto.BracerMissionDto, srcObject as BracerMissionDto));
    	dtoFillFromActions.Add(615, (destObject, srcObject) => instance.BattlePositionConverter_fillFrom(destObject as AppDto.BattlePosition, srcObject as BattlePosition));
    	dtoFillFromActions.Add(616, (destObject, srcObject) => instance.BracerMissionCfgConverter_fillFrom(destObject as AppDto.BracerMissionCfg, srcObject as BracerMissionCfg));
    	dtoFillFromActions.Add(617, (destObject, srcObject) => instance.PlayerUrgentMissionDtoConverter_fillFrom(destObject as AppDto.PlayerUrgentMissionDto, srcObject as PlayerUrgentMissionDto));
    	dtoFillFromActions.Add(618, (destObject, srcObject) => instance.DelegateAcceptConditionsConverter_fillFrom(destObject as AppDto.DelegateAcceptConditions, srcObject as DelegateAcceptConditions));
    	dtoFillFromActions.Add(619, (destObject, srcObject) => instance.DelegateMissionConverter_fillFrom(destObject as AppDto.DelegateMission, srcObject as DelegateMission));
    	dtoFillFromActions.Add(620, (destObject, srcObject) => instance.DelegateRandomAwardConverter_fillFrom(destObject as AppDto.DelegateRandomAward, srcObject as DelegateRandomAward));
    	dtoFillFromActions.Add(621, (destObject, srcObject) => instance.PlayerGhostMissionDtoConverter_fillFrom(destObject as AppDto.PlayerGhostMissionDto, srcObject as PlayerGhostMissionDto));
    	dtoFillFromActions.Add(622, (destObject, srcObject) => instance.DelegateMissionDtoConverter_fillFrom(destObject as AppDto.DelegateMissionDto, srcObject as DelegateMissionDto));
    	dtoFillFromActions.Add(623, (destObject, srcObject) => instance.DelegateMissionHoleDtoConverter_fillFrom(destObject as AppDto.DelegateMissionHoleDto, srcObject as DelegateMissionHoleDto));
    	dtoFillFromActions.Add(624, (destObject, srcObject) => instance.DelegateMissionStateDtoConverter_fillFrom(destObject as AppDto.DelegateMissionStateDto, srcObject as DelegateMissionStateDto));
    	dtoFillFromActions.Add(625, (destObject, srcObject) => instance.NpcSceneAncientWarcraftMonsterConverter_fillFrom(destObject as AppDto.NpcSceneAncientWarcraftMonster, srcObject as NpcSceneAncientWarcraftMonster));
    	dtoFillFromActions.Add(626, (destObject, srcObject) => instance.NpcSceneEvilSnakeMonsterConverter_fillFrom(destObject as AppDto.NpcSceneEvilSnakeMonster, srcObject as NpcSceneEvilSnakeMonster));
    	dtoFillFromActions.Add(627, (destObject, srcObject) => instance.NpcDisappearNotifyConverter_fillFrom(destObject as AppDto.NpcDisappearNotify, srcObject as NpcDisappearNotify));
    	dtoFillFromActions.Add(628, (destObject, srcObject) => instance.PlayerTipDtoConverter_fillFrom(destObject as AppDto.PlayerTipDto, srcObject as PlayerTipDto));
    	dtoFillFromActions.Add(629, (destObject, srcObject) => instance.NpcDynamicMonsterConverter_fillFrom(destObject as AppDto.NpcDynamicMonster, srcObject as NpcDynamicMonster));
    	dtoFillFromActions.Add(630, (destObject, srcObject) => instance.RefuseTeamInvitationNotifyConverter_fillFrom(destObject as AppDto.RefuseTeamInvitationNotify, srcObject as RefuseTeamInvitationNotify));
    	dtoFillFromActions.Add(631, (destObject, srcObject) => instance.RefuseTeamRequestNotifyConverter_fillFrom(destObject as AppDto.RefuseTeamRequestNotify, srcObject as RefuseTeamRequestNotify));
    	dtoFillFromActions.Add(632, (destObject, srcObject) => instance.BracerMissionListDtoConverter_fillFrom(destObject as AppDto.BracerMissionListDto, srcObject as BracerMissionListDto));
    	dtoFillFromActions.Add(633, (destObject, srcObject) => instance.CrewRecruitTypeConverter_fillFrom(destObject as AppDto.CrewRecruitType, srcObject as CrewRecruitType));
    	dtoFillFromActions.Add(634, (destObject, srcObject) => instance.CrewRecordConverter_fillFrom(destObject as AppDto.CrewRecord, srcObject as CrewRecord));
    	dtoFillFromActions.Add(635, (destObject, srcObject) => instance.BattleDemoRequestNotifyConverter_fillFrom(destObject as AppDto.BattleDemoRequestNotify, srcObject as BattleDemoRequestNotify));
    	dtoFillFromActions.Add(636, (destObject, srcObject) => instance.RefuseBattleDemoNotifyConverter_fillFrom(destObject as AppDto.RefuseBattleDemoNotify, srcObject as RefuseBattleDemoNotify));
    	dtoFillFromActions.Add(637, (destObject, srcObject) => instance.FunTooltipConverter_fillFrom(destObject as AppDto.FunTooltip, srcObject as FunTooltip));
    	dtoFillFromActions.Add(638, (destObject, srcObject) => instance.MainCrewInfoNotifyConverter_fillFrom(destObject as AppDto.MainCrewInfoNotify, srcObject as MainCrewInfoNotify));
    	dtoFillFromActions.Add(639, (destObject, srcObject) => instance.FunctionFrameStateConverter_fillFrom(destObject as AppDto.FunctionFrameState, srcObject as FunctionFrameState));
    	dtoFillFromActions.Add(640, (destObject, srcObject) => instance.CollectionItemCategorySubmitDtoConverter_fillFrom(destObject as AppDto.CollectionItemCategorySubmitDto, srcObject as CollectionItemCategorySubmitDto));
    	dtoFillFromActions.Add(641, (destObject, srcObject) => instance.ItemCategoryConverter_fillFrom(destObject as AppDto.ItemCategory, srcObject as ItemCategory));
    	dtoFillFromActions.Add(642, (destObject, srcObject) => instance.PlayerTreasuryMissionDtoConverter_fillFrom(destObject as AppDto.PlayerTreasuryMissionDto, srcObject as PlayerTreasuryMissionDto));
    	dtoFillFromActions.Add(643, (destObject, srcObject) => instance.ArenaInfoDtoConverter_fillFrom(destObject as AppDto.ArenaInfoDto, srcObject as ArenaInfoDto));
    	dtoFillFromActions.Add(644, (destObject, srcObject) => instance.ArenaReportDtoConverter_fillFrom(destObject as AppDto.ArenaReportDto, srcObject as ArenaReportDto));
    	dtoFillFromActions.Add(645, (destObject, srcObject) => instance.OpponentInfoDtoConverter_fillFrom(destObject as AppDto.OpponentInfoDto, srcObject as OpponentInfoDto));
    	dtoFillFromActions.Add(648, (destObject, srcObject) => instance.BattleTypeConverter_fillFrom(destObject as AppDto.BattleType, srcObject as BattleType));
    	dtoFillFromActions.Add(649, (destObject, srcObject) => instance.VideoSoldierSwtichStateConverter_fillFrom(destObject as AppDto.VideoSoldierSwtichState, srcObject as VideoSoldierSwtichState));
    	dtoFillFromActions.Add(650, (destObject, srcObject) => instance.PropsExtraDto_17Converter_fillFrom(destObject as AppDto.PropsExtraDto_17, srcObject as PropsExtraDto_17));
    	dtoFillFromActions.Add(651, (destObject, srcObject) => instance.QuestionConverter_fillFrom(destObject as AppDto.Question, srcObject as Question));
    	dtoFillFromActions.Add(652, (destObject, srcObject) => instance.QuestionTypeConverter_fillFrom(destObject as AppDto.QuestionType, srcObject as QuestionType));
    	dtoFillFromActions.Add(653, (destObject, srcObject) => instance.TowerCfgConverter_fillFrom(destObject as AppDto.TowerCfg, srcObject as TowerCfg));
    	dtoFillFromActions.Add(654, (destObject, srcObject) => instance.PropsTreasureRewardConverter_fillFrom(destObject as AppDto.PropsTreasureReward, srcObject as PropsTreasureReward));
    	dtoFillFromActions.Add(655, (destObject, srcObject) => instance.HighTreasuryInfoDtoConverter_fillFrom(destObject as AppDto.HighTreasuryInfoDto, srcObject as HighTreasuryInfoDto));
    	dtoFillFromActions.Add(657, (destObject, srcObject) => instance.HarvestQuestionGiftBoxDtoConverter_fillFrom(destObject as AppDto.HarvestQuestionGiftBoxDto, srcObject as HarvestQuestionGiftBoxDto));
    	dtoFillFromActions.Add(658, (destObject, srcObject) => instance.PlayerQuestionDtoConverter_fillFrom(destObject as AppDto.PlayerQuestionDto, srcObject as PlayerQuestionDto));
    	dtoFillFromActions.Add(659, (destObject, srcObject) => instance.QuestionClosureNotifyConverter_fillFrom(destObject as AppDto.QuestionClosureNotify, srcObject as QuestionClosureNotify));
    	dtoFillFromActions.Add(660, (destObject, srcObject) => instance.QuestionEntityDtoConverter_fillFrom(destObject as AppDto.QuestionEntityDto, srcObject as QuestionEntityDto));
    	dtoFillFromActions.Add(661, (destObject, srcObject) => instance.QuestionOpenNotifyConverter_fillFrom(destObject as AppDto.QuestionOpenNotify, srcObject as QuestionOpenNotify));
    	dtoFillFromActions.Add(662, (destObject, srcObject) => instance.PropsParam_19Converter_fillFrom(destObject as AppDto.PropsParam_19, srcObject as PropsParam_19));
    	dtoFillFromActions.Add(663, (destObject, srcObject) => instance.TowerBattleWinNotifyConverter_fillFrom(destObject as AppDto.TowerBattleWinNotify, srcObject as TowerBattleWinNotify));
    	dtoFillFromActions.Add(664, (destObject, srcObject) => instance.ArenaReportsDtoConverter_fillFrom(destObject as AppDto.ArenaReportsDto, srcObject as ArenaReportsDto));
    	dtoFillFromActions.Add(665, (destObject, srcObject) => instance.QuestionEntityNotifyConverter_fillFrom(destObject as AppDto.QuestionEntityNotify, srcObject as QuestionEntityNotify));
    	dtoFillFromActions.Add(666, (destObject, srcObject) => instance.RankArenaDtoConverter_fillFrom(destObject as AppDto.RankArenaDto, srcObject as RankArenaDto));
    	dtoFillFromActions.Add(667, (destObject, srcObject) => instance.RankTowerDtoConverter_fillFrom(destObject as AppDto.RankTowerDto, srcObject as RankTowerDto));
    	dtoFillFromActions.Add(668, (destObject, srcObject) => instance.GuideConverter_fillFrom(destObject as AppDto.Guide, srcObject as Guide));
    	dtoFillFromActions.Add(669, (destObject, srcObject) => instance.SmartGuideConverter_fillFrom(destObject as AppDto.SmartGuide, srcObject as SmartGuide));
    	dtoFillFromActions.Add(670, (destObject, srcObject) => instance.GuideInfoNotifyConverter_fillFrom(destObject as AppDto.GuideInfoNotify, srcObject as GuideInfoNotify));
    	dtoFillFromActions.Add(671, (destObject, srcObject) => instance.GuideListDtoConverter_fillFrom(destObject as AppDto.GuideListDto, srcObject as GuideListDto));
    	dtoFillFromActions.Add(672, (destObject, srcObject) => instance.AfterAnswerNotifyConverter_fillFrom(destObject as AppDto.AfterAnswerNotify, srcObject as AfterAnswerNotify));
    	dtoFillFromActions.Add(673, (destObject, srcObject) => instance.PlayerNameNotifyConverter_fillFrom(destObject as AppDto.PlayerNameNotify, srcObject as PlayerNameNotify));
    	dtoFillFromActions.Add(674, (destObject, srcObject) => instance.GuideGainWayConverter_fillFrom(destObject as AppDto.GuideGainWay, srcObject as GuideGainWay));
    	dtoFillFromActions.Add(675, (destObject, srcObject) => instance.RankCrewDtoConverter_fillFrom(destObject as AppDto.RankCrewDto, srcObject as RankCrewDto));
    	dtoFillFromActions.Add(676, (destObject, srcObject) => instance.ShopGoodsListDtoConverter_fillFrom(destObject as AppDto.ShopGoodsListDto, srcObject as ShopGoodsListDto));
    	dtoFillFromActions.Add(677, (destObject, srcObject) => instance.ShowMonsterItemSubmitDtoConverter_fillFrom(destObject as AppDto.ShowMonsterItemSubmitDto, srcObject as ShowMonsterItemSubmitDto));
    	dtoFillFromActions.Add(678, (destObject, srcObject) => instance.RankFlowersDtoConverter_fillFrom(destObject as AppDto.RankFlowersDto, srcObject as RankFlowersDto));
    	dtoFillFromActions.Add(679, (destObject, srcObject) => instance.PropsParam_16Converter_fillFrom(destObject as AppDto.PropsParam_16, srcObject as PropsParam_16));
    	dtoFillFromActions.Add(680, (destObject, srcObject) => instance.FriendFlowersNotifyConverter_fillFrom(destObject as AppDto.FriendFlowersNotify, srcObject as FriendFlowersNotify));
    	dtoFillFromActions.Add(681, (destObject, srcObject) => instance.GuildApprovalDtoConverter_fillFrom(destObject as AppDto.GuildApprovalDto, srcObject as GuildApprovalDto));
    	dtoFillFromActions.Add(682, (destObject, srcObject) => instance.GuildApprovalListDtoConverter_fillFrom(destObject as AppDto.GuildApprovalListDto, srcObject as GuildApprovalListDto));
    	dtoFillFromActions.Add(683, (destObject, srcObject) => instance.GuildBaseInfoDtoConverter_fillFrom(destObject as AppDto.GuildBaseInfoDto, srcObject as GuildBaseInfoDto));
    	dtoFillFromActions.Add(684, (destObject, srcObject) => instance.GuildBaseInfoListDtoConverter_fillFrom(destObject as AppDto.GuildBaseInfoListDto, srcObject as GuildBaseInfoListDto));
    	dtoFillFromActions.Add(685, (destObject, srcObject) => instance.GuildBuildingDtoConverter_fillFrom(destObject as AppDto.GuildBuildingDto, srcObject as GuildBuildingDto));
    	dtoFillFromActions.Add(686, (destObject, srcObject) => instance.GuildDetailInfoDtoConverter_fillFrom(destObject as AppDto.GuildDetailInfoDto, srcObject as GuildDetailInfoDto));
    	dtoFillFromActions.Add(687, (destObject, srcObject) => instance.GuildInvitationNotifyConverter_fillFrom(destObject as AppDto.GuildInvitationNotify, srcObject as GuildInvitationNotify));
    	dtoFillFromActions.Add(688, (destObject, srcObject) => instance.GuildMemberDtoConverter_fillFrom(destObject as AppDto.GuildMemberDto, srcObject as GuildMemberDto));
    	dtoFillFromActions.Add(689, (destObject, srcObject) => instance.GuildWealthDtoConverter_fillFrom(destObject as AppDto.GuildWealthDto, srcObject as GuildWealthDto));
    	dtoFillFromActions.Add(690, (destObject, srcObject) => instance.ActiveRewardConverter_fillFrom(destObject as AppDto.ActiveReward, srcObject as ActiveReward));
    	dtoFillFromActions.Add(691, (destObject, srcObject) => instance.ScheduleActivityConverter_fillFrom(destObject as AppDto.ScheduleActivity, srcObject as ScheduleActivity));
    	dtoFillFromActions.Add(692, (destObject, srcObject) => instance.WeekCalendarConverter_fillFrom(destObject as AppDto.WeekCalendar, srcObject as WeekCalendar));
    	dtoFillFromActions.Add(693, (destObject, srcObject) => instance.ActiveDtoConverter_fillFrom(destObject as AppDto.ActiveDto, srcObject as ActiveDto));
    	dtoFillFromActions.Add(694, (destObject, srcObject) => instance.ActiveNotifyConverter_fillFrom(destObject as AppDto.ActiveNotify, srcObject as ActiveNotify));
    	dtoFillFromActions.Add(695, (destObject, srcObject) => instance.ScheduleDtoConverter_fillFrom(destObject as AppDto.ScheduleDto, srcObject as ScheduleDto));
    	dtoFillFromActions.Add(696, (destObject, srcObject) => instance.DelegateMissionDurationConverter_fillFrom(destObject as AppDto.DelegateMissionDuration, srcObject as DelegateMissionDuration));
    	dtoFillFromActions.Add(697, (destObject, srcObject) => instance.StallBuyDtoConverter_fillFrom(destObject as AppDto.StallBuyDto, srcObject as StallBuyDto));
    	dtoFillFromActions.Add(698, (destObject, srcObject) => instance.GuildCountDtoConverter_fillFrom(destObject as AppDto.GuildCountDto, srcObject as GuildCountDto));
    	dtoFillFromActions.Add(699, (destObject, srcObject) => instance.RefuseGuildInvitationConverter_fillFrom(destObject as AppDto.RefuseGuildInvitation, srcObject as RefuseGuildInvitation));
    	dtoFillFromActions.Add(700, (destObject, srcObject) => instance.PlayerCopyMissionDtoConverter_fillFrom(destObject as AppDto.PlayerCopyMissionDto, srcObject as PlayerCopyMissionDto));
    	dtoFillFromActions.Add(701, (destObject, srcObject) => instance.CopyConverter_fillFrom(destObject as AppDto.Copy, srcObject as Copy));
    	dtoFillFromActions.Add(702, (destObject, srcObject) => instance.GuildBarPubConverter_fillFrom(destObject as AppDto.GuildBarPub, srcObject as GuildBarPub));
    	dtoFillFromActions.Add(703, (destObject, srcObject) => instance.GuildGuardTowerConverter_fillFrom(destObject as AppDto.GuildGuardTower, srcObject as GuildGuardTower));
    	dtoFillFromActions.Add(704, (destObject, srcObject) => instance.GuildWorkshopConverter_fillFrom(destObject as AppDto.GuildWorkshop, srcObject as GuildWorkshop));
    	dtoFillFromActions.Add(705, (destObject, srcObject) => instance.GuildMemberListDtoConverter_fillFrom(destObject as AppDto.GuildMemberListDto, srcObject as GuildMemberListDto));
    	dtoFillFromActions.Add(706, (destObject, srcObject) => instance.ActivityConfigConverter_fillFrom(destObject as AppDto.ActivityConfig, srcObject as ActivityConfig));
    	dtoFillFromActions.Add(707, (destObject, srcObject) => instance.KungfuBeginNotifyConverter_fillFrom(destObject as AppDto.KungfuBeginNotify, srcObject as KungfuBeginNotify));
    	dtoFillFromActions.Add(708, (destObject, srcObject) => instance.SceneNpcStateDtoConverter_fillFrom(destObject as AppDto.SceneNpcStateDto, srcObject as SceneNpcStateDto));
    	dtoFillFromActions.Add(710, (destObject, srcObject) => instance.TeamChallengeConfirmNotifyConverter_fillFrom(destObject as AppDto.TeamChallengeConfirmNotify, srcObject as TeamChallengeConfirmNotify));
    	dtoFillFromActions.Add(711, (destObject, srcObject) => instance.TeamMemberConfirmNotifyConverter_fillFrom(destObject as AppDto.TeamMemberConfirmNotify, srcObject as TeamMemberConfirmNotify));
    	dtoFillFromActions.Add(712, (destObject, srcObject) => instance.TradeBuyPriceDtoConverter_fillFrom(destObject as AppDto.TradeBuyPriceDto, srcObject as TradeBuyPriceDto));
    	dtoFillFromActions.Add(713, (destObject, srcObject) => instance.PlayerGuildInfoDtoConverter_fillFrom(destObject as AppDto.PlayerGuildInfoDto, srcObject as PlayerGuildInfoDto));
    	dtoFillFromActions.Add(715, (destObject, srcObject) => instance.PaySuccessNotifyConverter_fillFrom(destObject as AppDto.PaySuccessNotify, srcObject as PaySuccessNotify));
    	dtoFillFromActions.Add(716, (destObject, srcObject) => instance.BattleReadyNotifyConverter_fillFrom(destObject as AppDto.BattleReadyNotify, srcObject as BattleReadyNotify));
    	dtoFillFromActions.Add(717, (destObject, srcObject) => instance.BattleReadyPlayerInfoDtoConverter_fillFrom(destObject as AppDto.BattleReadyPlayerInfoDto, srcObject as BattleReadyPlayerInfoDto));
    	dtoFillFromActions.Add(718, (destObject, srcObject) => instance.CopySyncConfirmNotifyConverter_fillFrom(destObject as AppDto.CopySyncConfirmNotify, srcObject as CopySyncConfirmNotify));
    	dtoFillFromActions.Add(719, (destObject, srcObject) => instance.RankKungfuDtoConverter_fillFrom(destObject as AppDto.RankKungfuDto, srcObject as RankKungfuDto));
    	dtoFillFromActions.Add(720, (destObject, srcObject) => instance.NpcPeriodConverter_fillFrom(destObject as AppDto.NpcPeriod, srcObject as NpcPeriod));
    	dtoFillFromActions.Add(721, (destObject, srcObject) => instance.KungfuInfoDtoConverter_fillFrom(destObject as AppDto.KungfuInfoDto, srcObject as KungfuInfoDto));
    	dtoFillFromActions.Add(722, (destObject, srcObject) => instance.KungfuRewardConverter_fillFrom(destObject as AppDto.KungfuReward, srcObject as KungfuReward));
    	dtoFillFromActions.Add(723, (destObject, srcObject) => instance.RedPointConverter_fillFrom(destObject as AppDto.RedPoint, srcObject as RedPoint));
    	dtoFillFromActions.Add(724, (destObject, srcObject) => instance.ShowRedPointTypeDtoConverter_fillFrom(destObject as AppDto.ShowRedPointTypeDto, srcObject as ShowRedPointTypeDto));
    	dtoFillFromActions.Add(725, (destObject, srcObject) => instance.ShowRedPointTypeListDtoConverter_fillFrom(destObject as AppDto.ShowRedPointTypeListDto, srcObject as ShowRedPointTypeListDto));
    	dtoFillFromActions.Add(727, (destObject, srcObject) => instance.KungfuActivityInfoConverter_fillFrom(destObject as AppDto.KungfuActivityInfo, srcObject as KungfuActivityInfo));
    	dtoFillFromActions.Add(728, (destObject, srcObject) => instance.AcceptionCondtion_3Converter_fillFrom(destObject as AppDto.AcceptionCondtion_3, srcObject as AcceptionCondtion_3));
    	dtoFillFromActions.Add(729, (destObject, srcObject) => instance.OnUpgradeBuildingDtoConverter_fillFrom(destObject as AppDto.OnUpgradeBuildingDto, srcObject as OnUpgradeBuildingDto));
    	dtoFillFromActions.Add(730, (destObject, srcObject) => instance.MarqueeNoticeNotifyConverter_fillFrom(destObject as AppDto.MarqueeNoticeNotify, srcObject as MarqueeNoticeNotify));
    	dtoFillFromActions.Add(731, (destObject, srcObject) => instance.HighTreasueyChangeNotifyConverter_fillFrom(destObject as AppDto.HighTreasueyChangeNotify, srcObject as HighTreasueyChangeNotify));
    	dtoFillFromActions.Add(732, (destObject, srcObject) => instance.HighTreasuryNotifyConverter_fillFrom(destObject as AppDto.HighTreasuryNotify, srcObject as HighTreasuryNotify));
    	dtoFillFromActions.Add(733, (destObject, srcObject) => instance.CopyMissionConfigConverter_fillFrom(destObject as AppDto.CopyMissionConfig, srcObject as CopyMissionConfig));
    }

    private void initFillIntoActions() {
        dtoFillIntoActions.Add(101, (srcObject, destObject) => instance.ErrorCodeConverter_fillInto(srcObject as AppDto.ErrorCode, destObject as ErrorCode));
        dtoFillIntoActions.Add(102, (srcObject, destObject) => instance.StaticConfigConverter_fillInto(srcObject as AppDto.StaticConfig, destObject as StaticConfig));
        dtoFillIntoActions.Add(103, (srcObject, destObject) => instance.StaticStringConverter_fillInto(srcObject as AppDto.StaticString, destObject as StaticString));
        dtoFillIntoActions.Add(104, (srcObject, destObject) => instance.TraceTypeConverter_fillInto(srcObject as AppDto.TraceType, destObject as TraceType));
        dtoFillIntoActions.Add(105, (srcObject, destObject) => instance.ErrorResponseConverter_fillInto(srcObject as AppDto.ErrorResponse, destObject as ErrorResponse));
        dtoFillIntoActions.Add(106, (srcObject, destObject) => instance.GeneralRequestConverter_fillInto(srcObject as AppDto.GeneralRequest, destObject as GeneralRequest));
        dtoFillIntoActions.Add(107, (srcObject, destObject) => instance.GeneralResponseConverter_fillInto(srcObject as AppDto.GeneralResponse, destObject as GeneralResponse));
        dtoFillIntoActions.Add(108, (srcObject, destObject) => instance.SuccessResponseConverter_fillInto(srcObject as AppDto.SuccessResponse, destObject as SuccessResponse));
        dtoFillIntoActions.Add(109, (srcObject, destObject) => instance.AppErrorCodesConverter_fillInto(srcObject as AppDto.AppErrorCodes, destObject as AppErrorCodes));
        dtoFillIntoActions.Add(110, (srcObject, destObject) => instance.AppStaticConfigsConverter_fillInto(srcObject as AppDto.AppStaticConfigs, destObject as AppStaticConfigs));
        dtoFillIntoActions.Add(111, (srcObject, destObject) => instance.AppStaticStringsConverter_fillInto(srcObject as AppDto.AppStaticStrings, destObject as AppStaticStrings));
        dtoFillIntoActions.Add(112, (srcObject, destObject) => instance.AppTraceTypesConverter_fillInto(srcObject as AppDto.AppTraceTypes, destObject as AppTraceTypes));
        dtoFillIntoActions.Add(115, (srcObject, destObject) => instance.DataListConverter_fillInto(srcObject as AppDto.DataList, destObject as DataList));
        dtoFillIntoActions.Add(116, (srcObject, destObject) => instance.DataListVersionConverter_fillInto(srcObject as AppDto.DataListVersion, destObject as DataListVersion));
        dtoFillIntoActions.Add(117, (srcObject, destObject) => instance.GeneralItemConverter_fillInto(srcObject as AppDto.GeneralItem, destObject as GeneralItem));
        dtoFillIntoActions.Add(118, (srcObject, destObject) => instance.RealItemConverter_fillInto(srcObject as AppDto.RealItem, destObject as RealItem));
        dtoFillIntoActions.Add(119, (srcObject, destObject) => instance.VirtualItemConverter_fillInto(srcObject as AppDto.VirtualItem, destObject as VirtualItem));
        dtoFillIntoActions.Add(123, (srcObject, destObject) => instance.FactionConverter_fillInto(srcObject as AppDto.Faction, destObject as Faction));
        dtoFillIntoActions.Add(124, (srcObject, destObject) => instance.CreatePlayerDtoConverter_fillInto(srcObject as AppDto.CreatePlayerDto, destObject as CreatePlayerDto));
        dtoFillIntoActions.Add(125, (srcObject, destObject) => instance.PlayerDtoConverter_fillInto(srcObject as AppDto.PlayerDto, destObject as PlayerDto));
        dtoFillIntoActions.Add(126, (srcObject, destObject) => instance.PlayerNameDtoConverter_fillInto(srcObject as AppDto.PlayerNameDto, destObject as PlayerNameDto));
        dtoFillIntoActions.Add(128, (srcObject, destObject) => instance.GeneralCharactorConverter_fillInto(srcObject as AppDto.GeneralCharactor, destObject as GeneralCharactor));
        dtoFillIntoActions.Add(129, (srcObject, destObject) => instance.MainCharactorConverter_fillInto(srcObject as AppDto.MainCharactor, destObject as MainCharactor));
        dtoFillIntoActions.Add(130, (srcObject, destObject) => instance.GameServerGradeConverter_fillInto(srcObject as AppDto.GameServerGrade, destObject as GameServerGrade));
        dtoFillIntoActions.Add(131, (srcObject, destObject) => instance.GameServerGradeDtoConverter_fillInto(srcObject as AppDto.GameServerGradeDto, destObject as GameServerGradeDto));
        dtoFillIntoActions.Add(132, (srcObject, destObject) => instance.GameServerTimeDtoConverter_fillInto(srcObject as AppDto.GameServerTimeDto, destObject as GameServerTimeDto));
        dtoFillIntoActions.Add(133, (srcObject, destObject) => instance.SceneMapConverter_fillInto(srcObject as AppDto.SceneMap, destObject as SceneMap));
        dtoFillIntoActions.Add(134, (srcObject, destObject) => instance.AfterLoginDtoConverter_fillInto(srcObject as AppDto.AfterLoginDto, destObject as AfterLoginDto));
        dtoFillIntoActions.Add(148, (srcObject, destObject) => instance.MonsterConverter_fillInto(srcObject as AppDto.Monster, destObject as Monster));
        dtoFillIntoActions.Add(150, (srcObject, destObject) => instance.SkillConverter_fillInto(srcObject as AppDto.Skill, destObject as Skill));
        dtoFillIntoActions.Add(151, (srcObject, destObject) => instance.PlayerDressInfoConverter_fillInto(srcObject as AppDto.PlayerDressInfo, destObject as PlayerDressInfo));
        dtoFillIntoActions.Add(152, (srcObject, destObject) => instance.ModelConverter_fillInto(srcObject as AppDto.Model, destObject as Model));
        dtoFillIntoActions.Add(153, (srcObject, destObject) => instance.FighterReadyNotifyDtoConverter_fillInto(srcObject as AppDto.FighterReadyNotifyDto, destObject as FighterReadyNotifyDto));
        dtoFillIntoActions.Add(155, (srcObject, destObject) => instance.SkillAiConverter_fillInto(srcObject as AppDto.SkillAi, destObject as SkillAi));
        dtoFillIntoActions.Add(156, (srcObject, destObject) => instance.MonsterGroupConverter_fillInto(srcObject as AppDto.MonsterGroup, destObject as MonsterGroup));
        dtoFillIntoActions.Add(157, (srcObject, destObject) => instance.SceneDtoConverter_fillInto(srcObject as AppDto.SceneDto, destObject as SceneDto));
        dtoFillIntoActions.Add(158, (srcObject, destObject) => instance.SceneObjectDtoConverter_fillInto(srcObject as AppDto.SceneObjectDto, destObject as SceneObjectDto));
        dtoFillIntoActions.Add(159, (srcObject, destObject) => instance.ScenePlayerDtoConverter_fillInto(srcObject as AppDto.ScenePlayerDto, destObject as ScenePlayerDto));
        dtoFillIntoActions.Add(164, (srcObject, destObject) => instance.DebugVideoRoundConverter_fillInto(srcObject as AppDto.DebugVideoRound, destObject as DebugVideoRound));
        dtoFillIntoActions.Add(165, (srcObject, destObject) => instance.DemoVideoConverter_fillInto(srcObject as AppDto.DemoVideo, destObject as DemoVideo));
        dtoFillIntoActions.Add(166, (srcObject, destObject) => instance.VideoConverter_fillInto(srcObject as AppDto.Video, destObject as Video));
        dtoFillIntoActions.Add(167, (srcObject, destObject) => instance.VideoActionConverter_fillInto(srcObject as AppDto.VideoAction, destObject as VideoAction));
        dtoFillIntoActions.Add(168, (srcObject, destObject) => instance.VideoInsideSkillActionConverter_fillInto(srcObject as AppDto.VideoInsideSkillAction, destObject as VideoInsideSkillAction));
        dtoFillIntoActions.Add(169, (srcObject, destObject) => instance.VideoRoundConverter_fillInto(srcObject as AppDto.VideoRound, destObject as VideoRound));
        dtoFillIntoActions.Add(170, (srcObject, destObject) => instance.VideoRoundActionConverter_fillInto(srcObject as AppDto.VideoRoundAction, destObject as VideoRoundAction));
        dtoFillIntoActions.Add(171, (srcObject, destObject) => instance.VideoRoundsConverter_fillInto(srcObject as AppDto.VideoRounds, destObject as VideoRounds));
        dtoFillIntoActions.Add(172, (srcObject, destObject) => instance.VideoSkillActionConverter_fillInto(srcObject as AppDto.VideoSkillAction, destObject as VideoSkillAction));
        dtoFillIntoActions.Add(173, (srcObject, destObject) => instance.VideoSoldierConverter_fillInto(srcObject as AppDto.VideoSoldier, destObject as VideoSoldier));
        dtoFillIntoActions.Add(174, (srcObject, destObject) => instance.VideoTargetStateConverter_fillInto(srcObject as AppDto.VideoTargetState, destObject as VideoTargetState));
        dtoFillIntoActions.Add(175, (srcObject, destObject) => instance.VideoTargetStateGroupConverter_fillInto(srcObject as AppDto.VideoTargetStateGroup, destObject as VideoTargetStateGroup));
        dtoFillIntoActions.Add(176, (srcObject, destObject) => instance.VideoTeamConverter_fillInto(srcObject as AppDto.VideoTeam, destObject as VideoTeam));
        dtoFillIntoActions.Add(177, (srcObject, destObject) => instance.VideoActionTargetStateConverter_fillInto(srcObject as AppDto.VideoActionTargetState, destObject as VideoActionTargetState));
        dtoFillIntoActions.Add(178, (srcObject, destObject) => instance.VideoDodgeTargetStateConverter_fillInto(srcObject as AppDto.VideoDodgeTargetState, destObject as VideoDodgeTargetState));
        dtoFillIntoActions.Add(179, (srcObject, destObject) => instance.CharactorDtoConverter_fillInto(srcObject as AppDto.CharactorDto, destObject as CharactorDto));
        dtoFillIntoActions.Add(180, (srcObject, destObject) => instance.SimplePlayerDtoConverter_fillInto(srcObject as AppDto.SimplePlayerDto, destObject as SimplePlayerDto));
        dtoFillIntoActions.Add(181, (srcObject, destObject) => instance.NpcConverter_fillInto(srcObject as AppDto.Npc, destObject as Npc));
        dtoFillIntoActions.Add(182, (srcObject, destObject) => instance.NpcStateDtoConverter_fillInto(srcObject as AppDto.NpcStateDto, destObject as NpcStateDto));
        dtoFillIntoActions.Add(183, (srcObject, destObject) => instance.SceneObjectNotifyConverter_fillInto(srcObject as AppDto.SceneObjectNotify, destObject as SceneObjectNotify));
        dtoFillIntoActions.Add(184, (srcObject, destObject) => instance.SceneObjectRemoveNotifyConverter_fillInto(srcObject as AppDto.SceneObjectRemoveNotify, destObject as SceneObjectRemoveNotify));
        dtoFillIntoActions.Add(185, (srcObject, destObject) => instance.VideoBuffAddTargetStateConverter_fillInto(srcObject as AppDto.VideoBuffAddTargetState, destObject as VideoBuffAddTargetState));
        dtoFillIntoActions.Add(186, (srcObject, destObject) => instance.VideoBuffRemoveTargetStateConverter_fillInto(srcObject as AppDto.VideoBuffRemoveTargetState, destObject as VideoBuffRemoveTargetState));
        dtoFillIntoActions.Add(188, (srcObject, destObject) => instance.SceneNpcDtoConverter_fillInto(srcObject as AppDto.SceneNpcDto, destObject as SceneNpcDto));
        dtoFillIntoActions.Add(189, (srcObject, destObject) => instance.SceneObjectWalkNotifyConverter_fillInto(srcObject as AppDto.SceneObjectWalkNotify, destObject as SceneObjectWalkNotify));
        dtoFillIntoActions.Add(190, (srcObject, destObject) => instance.NpcDialogConverter_fillInto(srcObject as AppDto.NpcDialog, destObject as NpcDialog));
        dtoFillIntoActions.Add(191, (srcObject, destObject) => instance.NpcDoubleTeleportConverter_fillInto(srcObject as AppDto.NpcDoubleTeleport, destObject as NpcDoubleTeleport));
        dtoFillIntoActions.Add(192, (srcObject, destObject) => instance.NpcGeneralConverter_fillInto(srcObject as AppDto.NpcGeneral, destObject as NpcGeneral));
        dtoFillIntoActions.Add(193, (srcObject, destObject) => instance.SceneObjectTeleportNotifyConverter_fillInto(srcObject as AppDto.SceneObjectTeleportNotify, destObject as SceneObjectTeleportNotify));
        dtoFillIntoActions.Add(195, (srcObject, destObject) => instance.QueueDtoConverter_fillInto(srcObject as AppDto.QueueDto, destObject as QueueDto));
        dtoFillIntoActions.Add(196, (srcObject, destObject) => instance.TeamDtoConverter_fillInto(srcObject as AppDto.TeamDto, destObject as TeamDto));
        dtoFillIntoActions.Add(197, (srcObject, destObject) => instance.TeamMemberDtoConverter_fillInto(srcObject as AppDto.TeamMemberDto, destObject as TeamMemberDto));
        dtoFillIntoActions.Add(198, (srcObject, destObject) => instance.TeamRequestNotifyConverter_fillInto(srcObject as AppDto.TeamRequestNotify, destObject as TeamRequestNotify));
        dtoFillIntoActions.Add(199, (srcObject, destObject) => instance.TeamInvitationNotifyConverter_fillInto(srcObject as AppDto.TeamInvitationNotify, destObject as TeamInvitationNotify));
        dtoFillIntoActions.Add(200, (srcObject, destObject) => instance.TeamMemberStatusDtoConverter_fillInto(srcObject as AppDto.TeamMemberStatusDto, destObject as TeamMemberStatusDto));
        dtoFillIntoActions.Add(201, (srcObject, destObject) => instance.TeamStatusNotifyConverter_fillInto(srcObject as AppDto.TeamStatusNotify, destObject as TeamStatusNotify));
        dtoFillIntoActions.Add(202, (srcObject, destObject) => instance.SkillBuffConverter_fillInto(srcObject as AppDto.SkillBuff, destObject as SkillBuff));
        dtoFillIntoActions.Add(203, (srcObject, destObject) => instance.LeaveTeamNotifyConverter_fillInto(srcObject as AppDto.LeaveTeamNotify, destObject as LeaveTeamNotify));
        dtoFillIntoActions.Add(204, (srcObject, destObject) => instance.BagDtoConverter_fillInto(srcObject as AppDto.BagDto, destObject as BagDto));
        dtoFillIntoActions.Add(205, (srcObject, destObject) => instance.BagItemDtoConverter_fillInto(srcObject as AppDto.BagItemDto, destObject as BagItemDto));
        dtoFillIntoActions.Add(206, (srcObject, destObject) => instance.BagItemNotifyConverter_fillInto(srcObject as AppDto.BagItemNotify, destObject as BagItemNotify));
        dtoFillIntoActions.Add(208, (srcObject, destObject) => instance.CharacterAbilityConverter_fillInto(srcObject as AppDto.CharacterAbility, destObject as CharacterAbility));
        dtoFillIntoActions.Add(210, (srcObject, destObject) => instance.CharacterPropertyDtoConverter_fillInto(srcObject as AppDto.CharacterPropertyDto, destObject as CharacterPropertyDto));
        dtoFillIntoActions.Add(211, (srcObject, destObject) => instance.JoinTeamNotifyConverter_fillInto(srcObject as AppDto.JoinTeamNotify, destObject as JoinTeamNotify));
        dtoFillIntoActions.Add(212, (srcObject, destObject) => instance.TeamSceneNotifyConverter_fillInto(srcObject as AppDto.TeamSceneNotify, destObject as TeamSceneNotify));
        dtoFillIntoActions.Add(214, (srcObject, destObject) => instance.VideoRetreatStateConverter_fillInto(srcObject as AppDto.VideoRetreatState, destObject as VideoRetreatState));
        dtoFillIntoActions.Add(216, (srcObject, destObject) => instance.AptitudeTipsConverter_fillInto(srcObject as AppDto.AptitudeTips, destObject as AptitudeTips));
        dtoFillIntoActions.Add(217, (srcObject, destObject) => instance.BasePropertyTransformConverter_fillInto(srcObject as AppDto.BasePropertyTransform, destObject as BasePropertyTransform));
        dtoFillIntoActions.Add(218, (srcObject, destObject) => instance.TeamCommanderNotifyConverter_fillInto(srcObject as AppDto.TeamCommanderNotify, destObject as TeamCommanderNotify));
        dtoFillIntoActions.Add(219, (srcObject, destObject) => instance.TeamRecallNotifyConverter_fillInto(srcObject as AppDto.TeamRecallNotify, destObject as TeamRecallNotify));
        dtoFillIntoActions.Add(220, (srcObject, destObject) => instance.BattlePlayerInfoDtoConverter_fillInto(srcObject as AppDto.BattlePlayerInfoDto, destObject as BattlePlayerInfoDto));
        dtoFillIntoActions.Add(221, (srcObject, destObject) => instance.UITipsConverter_fillInto(srcObject as AppDto.UITips, destObject as UITips));
        dtoFillIntoActions.Add(222, (srcObject, destObject) => instance.CommandNotifyConverter_fillInto(srcObject as AppDto.CommandNotify, destObject as CommandNotify));
        dtoFillIntoActions.Add(223, (srcObject, destObject) => instance.MailTypeConverter_fillInto(srcObject as AppDto.MailType, destObject as MailType));
        dtoFillIntoActions.Add(224, (srcObject, destObject) => instance.PlayerMailDtoConverter_fillInto(srcObject as AppDto.PlayerMailDto, destObject as PlayerMailDto));
        dtoFillIntoActions.Add(225, (srcObject, destObject) => instance.VideoTargetExceptionStateConverter_fillInto(srcObject as AppDto.VideoTargetExceptionState, destObject as VideoTargetExceptionState));
        dtoFillIntoActions.Add(226, (srcObject, destObject) => instance.SkillBuffRateConverter_fillInto(srcObject as AppDto.SkillBuffRate, destObject as SkillBuffRate));
        dtoFillIntoActions.Add(227, (srcObject, destObject) => instance.MailsDtoConverter_fillInto(srcObject as AppDto.MailsDto, destObject as MailsDto));
        dtoFillIntoActions.Add(228, (srcObject, destObject) => instance.TeamMemberSimpleDtoConverter_fillInto(srcObject as AppDto.TeamMemberSimpleDto, destObject as TeamMemberSimpleDto));
        dtoFillIntoActions.Add(229, (srcObject, destObject) => instance.MailAttachmentDtoConverter_fillInto(srcObject as AppDto.MailAttachmentDto, destObject as MailAttachmentDto));
        dtoFillIntoActions.Add(239, (srcObject, destObject) => instance.SkillsDtoConverter_fillInto(srcObject as AppDto.SkillsDto, destObject as SkillsDto));
        dtoFillIntoActions.Add(241, (srcObject, destObject) => instance.FactionMappingConverter_fillInto(srcObject as AppDto.FactionMapping, destObject as FactionMapping));
        dtoFillIntoActions.Add(243, (srcObject, destObject) => instance.FriendInfoDtoConverter_fillInto(srcObject as AppDto.FriendInfoDto, destObject as FriendInfoDto));
        dtoFillIntoActions.Add(244, (srcObject, destObject) => instance.FriendOnlineNotifyConverter_fillInto(srcObject as AppDto.FriendOnlineNotify, destObject as FriendOnlineNotify));
        dtoFillIntoActions.Add(245, (srcObject, destObject) => instance.FriendsDtoConverter_fillInto(srcObject as AppDto.FriendsDto, destObject as FriendsDto));
        dtoFillIntoActions.Add(247, (srcObject, destObject) => instance.FriendGradeNotifyConverter_fillInto(srcObject as AppDto.FriendGradeNotify, destObject as FriendGradeNotify));
        dtoFillIntoActions.Add(248, (srcObject, destObject) => instance.SkillPreviewInfoConverter_fillInto(srcObject as AppDto.SkillPreviewInfo, destObject as SkillPreviewInfo));
        dtoFillIntoActions.Add(252, (srcObject, destObject) => instance.ActionQueueRemoveNotifyConverter_fillInto(srcObject as AppDto.ActionQueueRemoveNotify, destObject as ActionQueueRemoveNotify));
        dtoFillIntoActions.Add(253, (srcObject, destObject) => instance.TeamCommandConverter_fillInto(srcObject as AppDto.TeamCommand, destObject as TeamCommand));
        dtoFillIntoActions.Add(256, (srcObject, destObject) => instance.WealthNotifyConverter_fillInto(srcObject as AppDto.WealthNotify, destObject as WealthNotify));
        dtoFillIntoActions.Add(257, (srcObject, destObject) => instance.FormationConverter_fillInto(srcObject as AppDto.Formation, destObject as Formation));
        dtoFillIntoActions.Add(258, (srcObject, destObject) => instance.FormationInfoDtoConverter_fillInto(srcObject as AppDto.FormationInfoDto, destObject as FormationInfoDto));
        dtoFillIntoActions.Add(259, (srcObject, destObject) => instance.FriendDegreeNotifyConverter_fillInto(srcObject as AppDto.FriendDegreeNotify, destObject as FriendDegreeNotify));
        dtoFillIntoActions.Add(262, (srcObject, destObject) => instance.WarehouseDtoConverter_fillInto(srcObject as AppDto.WarehouseDto, destObject as WarehouseDto));
        dtoFillIntoActions.Add(263, (srcObject, destObject) => instance.WarehousePageNotifyConverter_fillInto(srcObject as AppDto.WarehousePageNotify, destObject as WarehousePageNotify));
        dtoFillIntoActions.Add(264, (srcObject, destObject) => instance.LatestTeammateNotifyConverter_fillInto(srcObject as AppDto.LatestTeammateNotify, destObject as LatestTeammateNotify));
        dtoFillIntoActions.Add(265, (srcObject, destObject) => instance.BagCapabillityNotifyConverter_fillInto(srcObject as AppDto.BagCapabillityNotify, destObject as BagCapabillityNotify));
        dtoFillIntoActions.Add(266, (srcObject, destObject) => instance.ChatChannelConverter_fillInto(srcObject as AppDto.ChatChannel, destObject as ChatChannel));
        dtoFillIntoActions.Add(267, (srcObject, destObject) => instance.ChatNotifyConverter_fillInto(srcObject as AppDto.ChatNotify, destObject as ChatNotify));
        dtoFillIntoActions.Add(269, (srcObject, destObject) => instance.ShortPlayerDtoConverter_fillInto(srcObject as AppDto.ShortPlayerDto, destObject as ShortPlayerDto));
        dtoFillIntoActions.Add(270, (srcObject, destObject) => instance.ChatPropsConsumeConverter_fillInto(srcObject as AppDto.ChatPropsConsume, destObject as ChatPropsConsume));
        dtoFillIntoActions.Add(272, (srcObject, destObject) => instance.ChatPhraseConverter_fillInto(srcObject as AppDto.ChatPhrase, destObject as ChatPhrase));
        dtoFillIntoActions.Add(273, (srcObject, destObject) => instance.PlayerBanNotifyConverter_fillInto(srcObject as AppDto.PlayerBanNotify, destObject as PlayerBanNotify));
        dtoFillIntoActions.Add(274, (srcObject, destObject) => instance.AppItemConverter_fillInto(srcObject as AppDto.AppItem, destObject as AppItem));
        dtoFillIntoActions.Add(275, (srcObject, destObject) => instance.AppVirtualItemConverter_fillInto(srcObject as AppDto.AppVirtualItem, destObject as AppVirtualItem));
        dtoFillIntoActions.Add(276, (srcObject, destObject) => instance.CompositePropsConverter_fillInto(srcObject as AppDto.CompositeProps, destObject as CompositeProps));
        dtoFillIntoActions.Add(277, (srcObject, destObject) => instance.PropsConverter_fillInto(srcObject as AppDto.Props, destObject as Props));
        dtoFillIntoActions.Add(278, (srcObject, destObject) => instance.ResolvePropsConverter_fillInto(srcObject as AppDto.ResolveProps, destObject as ResolveProps));
        dtoFillIntoActions.Add(279, (srcObject, destObject) => instance.ResolveGainDtoConverter_fillInto(srcObject as AppDto.ResolveGainDto, destObject as ResolveGainDto));
        dtoFillIntoActions.Add(280, (srcObject, destObject) => instance.GeneralResolveDtoConverter_fillInto(srcObject as AppDto.GeneralResolveDto, destObject as GeneralResolveDto));
        dtoFillIntoActions.Add(281, (srcObject, destObject) => instance.ResolveParamConverter_fillInto(srcObject as AppDto.ResolveParam, destObject as ResolveParam));
        dtoFillIntoActions.Add(282, (srcObject, destObject) => instance.ResolveParam_1Converter_fillInto(srcObject as AppDto.ResolveParam_1, destObject as ResolveParam_1));
        dtoFillIntoActions.Add(283, (srcObject, destObject) => instance.LogicParamAdapterConverter_fillInto(srcObject as AppDto.LogicParamAdapter, destObject as LogicParamAdapter));
        dtoFillIntoActions.Add(284, (srcObject, destObject) => instance.MailChangeIdsNotifyConverter_fillInto(srcObject as AppDto.MailChangeIdsNotify, destObject as MailChangeIdsNotify));
        dtoFillIntoActions.Add(285, (srcObject, destObject) => instance.ExpGradeConverter_fillInto(srcObject as AppDto.ExpGrade, destObject as ExpGrade));
        dtoFillIntoActions.Add(286, (srcObject, destObject) => instance.CharactorExpInfoNotifyConverter_fillInto(srcObject as AppDto.CharactorExpInfoNotify, destObject as CharactorExpInfoNotify));
        dtoFillIntoActions.Add(287, (srcObject, destObject) => instance.FunctionOpenConverter_fillInto(srcObject as AppDto.FunctionOpen, destObject as FunctionOpen));
        dtoFillIntoActions.Add(288, (srcObject, destObject) => instance.WealthItemNotifyConverter_fillInto(srcObject as AppDto.WealthItemNotify, destObject as WealthItemNotify));
        dtoFillIntoActions.Add(290, (srcObject, destObject) => instance.TalentConverter_fillInto(srcObject as AppDto.Talent, destObject as Talent));
        dtoFillIntoActions.Add(295, (srcObject, destObject) => instance.PotentialConverter_fillInto(srcObject as AppDto.Potential, destObject as Potential));
        dtoFillIntoActions.Add(296, (srcObject, destObject) => instance.PotentialWealthConverter_fillInto(srcObject as AppDto.PotentialWealth, destObject as PotentialWealth));
        dtoFillIntoActions.Add(297, (srcObject, destObject) => instance.PotentialDtoConverter_fillInto(srcObject as AppDto.PotentialDto, destObject as PotentialDto));
        dtoFillIntoActions.Add(298, (srcObject, destObject) => instance.SpecialityConverter_fillInto(srcObject as AppDto.Speciality, destObject as Speciality));
        dtoFillIntoActions.Add(299, (srcObject, destObject) => instance.SpecialityExpGradeConverter_fillInto(srcObject as AppDto.SpecialityExpGrade, destObject as SpecialityExpGrade));
        dtoFillIntoActions.Add(303, (srcObject, destObject) => instance.FormationGradeConverter_fillInto(srcObject as AppDto.FormationGrade, destObject as FormationGrade));
        dtoFillIntoActions.Add(304, (srcObject, destObject) => instance.PotentialInfoDtoConverter_fillInto(srcObject as AppDto.PotentialInfoDto, destObject as PotentialInfoDto));
        dtoFillIntoActions.Add(307, (srcObject, destObject) => instance.SpecialityExpGradeNotifyConverter_fillInto(srcObject as AppDto.SpecialityExpGradeNotify, destObject as SpecialityExpGradeNotify));
        dtoFillIntoActions.Add(308, (srcObject, destObject) => instance.ActionQueueDtoConverter_fillInto(srcObject as AppDto.ActionQueueDto, destObject as ActionQueueDto));
        dtoFillIntoActions.Add(309, (srcObject, destObject) => instance.ActionReadyNotifyConverter_fillInto(srcObject as AppDto.ActionReadyNotify, destObject as ActionReadyNotify));
        dtoFillIntoActions.Add(310, (srcObject, destObject) => instance.TeamNearbyDtoConverter_fillInto(srcObject as AppDto.TeamNearbyDto, destObject as TeamNearbyDto));
        dtoFillIntoActions.Add(311, (srcObject, destObject) => instance.TeamPlayerDtoConverter_fillInto(srcObject as AppDto.TeamPlayerDto, destObject as TeamPlayerDto));
        dtoFillIntoActions.Add(312, (srcObject, destObject) => instance.TeamsDtoConverter_fillInto(srcObject as AppDto.TeamsDto, destObject as TeamsDto));
        dtoFillIntoActions.Add(313, (srcObject, destObject) => instance.TalentDtoConverter_fillInto(srcObject as AppDto.TalentDto, destObject as TalentDto));
        dtoFillIntoActions.Add(314, (srcObject, destObject) => instance.TalentGradeDtoConverter_fillInto(srcObject as AppDto.TalentGradeDto, destObject as TalentGradeDto));
        dtoFillIntoActions.Add(316, (srcObject, destObject) => instance.TeamActionTargetConverter_fillInto(srcObject as AppDto.TeamActionTarget, destObject as TeamActionTarget));
        dtoFillIntoActions.Add(320, (srcObject, destObject) => instance.SpecialityDtoConverter_fillInto(srcObject as AppDto.SpecialityDto, destObject as SpecialityDto));
        dtoFillIntoActions.Add(321, (srcObject, destObject) => instance.SpecialityGradeDtoConverter_fillInto(srcObject as AppDto.SpecialityGradeDto, destObject as SpecialityGradeDto));
        dtoFillIntoActions.Add(322, (srcObject, destObject) => instance.SpecialityAddPointDtoConverter_fillInto(srcObject as AppDto.SpecialityAddPointDto, destObject as SpecialityAddPointDto));
        dtoFillIntoActions.Add(334, (srcObject, destObject) => instance.RankingsConverter_fillInto(srcObject as AppDto.Rankings, destObject as Rankings));
        dtoFillIntoActions.Add(335, (srcObject, destObject) => instance.RankInfoDtoConverter_fillInto(srcObject as AppDto.RankInfoDto, destObject as RankInfoDto));
        dtoFillIntoActions.Add(337, (srcObject, destObject) => instance.RankPlayerGradeDtoConverter_fillInto(srcObject as AppDto.RankPlayerGradeDto, destObject as RankPlayerGradeDto));
        dtoFillIntoActions.Add(338, (srcObject, destObject) => instance.BattleWatchDtoConverter_fillInto(srcObject as AppDto.BattleWatchDto, destObject as BattleWatchDto));
        dtoFillIntoActions.Add(339, (srcObject, destObject) => instance.RankItemDtoConverter_fillInto(srcObject as AppDto.RankItemDto, destObject as RankItemDto));
        dtoFillIntoActions.Add(341, (srcObject, destObject) => instance.CraftsConverter_fillInto(srcObject as AppDto.Crafts, destObject as Crafts));
        dtoFillIntoActions.Add(342, (srcObject, destObject) => instance.MagicConverter_fillInto(srcObject as AppDto.Magic, destObject as Magic));
        dtoFillIntoActions.Add(344, (srcObject, destObject) => instance.CraftsGradeDtoConverter_fillInto(srcObject as AppDto.CraftsGradeDto, destObject as CraftsGradeDto));
        dtoFillIntoActions.Add(346, (srcObject, destObject) => instance.CharacterCraftsGradeConverter_fillInto(srcObject as AppDto.CharacterCraftsGrade, destObject as CharacterCraftsGrade));
        dtoFillIntoActions.Add(348, (srcObject, destObject) => instance.CasePositionDtoConverter_fillInto(srcObject as AppDto.CasePositionDto, destObject as CasePositionDto));
        dtoFillIntoActions.Add(349, (srcObject, destObject) => instance.FormationCaseInfoDtoConverter_fillInto(srcObject as AppDto.FormationCaseInfoDto, destObject as FormationCaseInfoDto));
        dtoFillIntoActions.Add(350, (srcObject, destObject) => instance.DefaultSCraftsDtoConverter_fillInto(srcObject as AppDto.DefaultSCraftsDto, destObject as DefaultSCraftsDto));
        dtoFillIntoActions.Add(351, (srcObject, destObject) => instance.SkillScopeConverter_fillInto(srcObject as AppDto.SkillScope, destObject as SkillScope));
        dtoFillIntoActions.Add(352, (srcObject, destObject) => instance.CrewInfoDtoConverter_fillInto(srcObject as AppDto.CrewInfoDto, destObject as CrewInfoDto));
        dtoFillIntoActions.Add(353, (srcObject, destObject) => instance.CrewConverter_fillInto(srcObject as AppDto.Crew, destObject as Crew));
        dtoFillIntoActions.Add(355, (srcObject, destObject) => instance.CrewPropertyTransformConverter_fillInto(srcObject as AppDto.CrewPropertyTransform, destObject as CrewPropertyTransform));
        dtoFillIntoActions.Add(356, (srcObject, destObject) => instance.CrewCraftsGradeConverter_fillInto(srcObject as AppDto.CrewCraftsGrade, destObject as CrewCraftsGrade));
        dtoFillIntoActions.Add(358, (srcObject, destObject) => instance.CrewPositionNotifyConverter_fillInto(srcObject as AppDto.CrewPositionNotify, destObject as CrewPositionNotify));
        dtoFillIntoActions.Add(359, (srcObject, destObject) => instance.CrewDtoConverter_fillInto(srcObject as AppDto.CrewDto, destObject as CrewDto));
        dtoFillIntoActions.Add(360, (srcObject, destObject) => instance.CrewTrainingConverter_fillInto(srcObject as AppDto.CrewTraining, destObject as CrewTraining));
        dtoFillIntoActions.Add(362, (srcObject, destObject) => instance.GmCodeConverter_fillInto(srcObject as AppDto.GmCode, destObject as GmCode));
        dtoFillIntoActions.Add(363, (srcObject, destObject) => instance.JoinTeamDtoConverter_fillInto(srcObject as AppDto.JoinTeamDto, destObject as JoinTeamDto));
        dtoFillIntoActions.Add(364, (srcObject, destObject) => instance.TeamInvitationDtoConverter_fillInto(srcObject as AppDto.TeamInvitationDto, destObject as TeamInvitationDto));
        dtoFillIntoActions.Add(365, (srcObject, destObject) => instance.CrewPhaseConverter_fillInto(srcObject as AppDto.CrewPhase, destObject as CrewPhase));
        dtoFillIntoActions.Add(366, (srcObject, destObject) => instance.CrewRaiseConverter_fillInto(srcObject as AppDto.CrewRaise, destObject as CrewRaise));
        dtoFillIntoActions.Add(367, (srcObject, destObject) => instance.CrewChipNotifyConverter_fillInto(srcObject as AppDto.CrewChipNotify, destObject as CrewChipNotify));
        dtoFillIntoActions.Add(369, (srcObject, destObject) => instance.UpgradeItemDtoConverter_fillInto(srcObject as AppDto.UpgradeItemDto, destObject as UpgradeItemDto));
        dtoFillIntoActions.Add(370, (srcObject, destObject) => instance.ActionTimeRewardConverter_fillInto(srcObject as AppDto.ActionTimeReward, destObject as ActionTimeReward));
        dtoFillIntoActions.Add(371, (srcObject, destObject) => instance.VideoRecordConverter_fillInto(srcObject as AppDto.VideoRecord, destObject as VideoRecord));
        dtoFillIntoActions.Add(372, (srcObject, destObject) => instance.CraftsTrainingDtoConverter_fillInto(srcObject as AppDto.CraftsTrainingDto, destObject as CraftsTrainingDto));
        dtoFillIntoActions.Add(373, (srcObject, destObject) => instance.CrewSkillsDtoConverter_fillInto(srcObject as AppDto.CrewSkillsDto, destObject as CrewSkillsDto));
        dtoFillIntoActions.Add(374, (srcObject, destObject) => instance.CrewPassiveGradeConverter_fillInto(srcObject as AppDto.CrewPassiveGrade, destObject as CrewPassiveGrade));
        dtoFillIntoActions.Add(375, (srcObject, destObject) => instance.PassiveSkillDtoConverter_fillInto(srcObject as AppDto.PassiveSkillDto, destObject as PassiveSkillDto));
        dtoFillIntoActions.Add(376, (srcObject, destObject) => instance.PassiveSkillConverter_fillInto(srcObject as AppDto.PassiveSkill, destObject as PassiveSkill));
        dtoFillIntoActions.Add(377, (srcObject, destObject) => instance.PassiveSkillBookConverter_fillInto(srcObject as AppDto.PassiveSkillBook, destObject as PassiveSkillBook));
        dtoFillIntoActions.Add(378, (srcObject, destObject) => instance.CraftsTrainingSaveDtoConverter_fillInto(srcObject as AppDto.CraftsTrainingSaveDto, destObject as CraftsTrainingSaveDto));
        dtoFillIntoActions.Add(379, (srcObject, destObject) => instance.CrewPassiveSkillConverter_fillInto(srcObject as AppDto.CrewPassiveSkill, destObject as CrewPassiveSkill));
        dtoFillIntoActions.Add(380, (srcObject, destObject) => instance.AllCaseInfoDtoConverter_fillInto(srcObject as AppDto.AllCaseInfoDto, destObject as AllCaseInfoDto));
        dtoFillIntoActions.Add(381, (srcObject, destObject) => instance.BloodBarConverter_fillInto(srcObject as AppDto.BloodBar, destObject as BloodBar));
        dtoFillIntoActions.Add(382, (srcObject, destObject) => instance.CrewPropertyCalculateConverter_fillInto(srcObject as AppDto.CrewPropertyCalculate, destObject as CrewPropertyCalculate));
        dtoFillIntoActions.Add(384, (srcObject, destObject) => instance.TeamShoutNotifyConverter_fillInto(srcObject as AppDto.TeamShoutNotify, destObject as TeamShoutNotify));
        dtoFillIntoActions.Add(386, (srcObject, destObject) => instance.TextTipsConverter_fillInto(srcObject as AppDto.TextTips, destObject as TextTips));
        dtoFillIntoActions.Add(387, (srcObject, destObject) => instance.CallMemberNotifyConverter_fillInto(srcObject as AppDto.CallMemberNotify, destObject as CallMemberNotify));
        dtoFillIntoActions.Add(388, (srcObject, destObject) => instance.AutoMatchDtoConverter_fillInto(srcObject as AppDto.AutoMatchDto, destObject as AutoMatchDto));
        dtoFillIntoActions.Add(391, (srcObject, destObject) => instance.QuartzConverter_fillInto(srcObject as AppDto.Quartz, destObject as Quartz));
        dtoFillIntoActions.Add(392, (srcObject, destObject) => instance.QuartzStrengGradeConverter_fillInto(srcObject as AppDto.QuartzStrengGrade, destObject as QuartzStrengGrade));
        dtoFillIntoActions.Add(393, (srcObject, destObject) => instance.QuartzExtraDtoConverter_fillInto(srcObject as AppDto.QuartzExtraDto, destObject as QuartzExtraDto));
        dtoFillIntoActions.Add(394, (srcObject, destObject) => instance.BracerGradeConverter_fillInto(srcObject as AppDto.BracerGrade, destObject as BracerGrade));
        dtoFillIntoActions.Add(396, (srcObject, destObject) => instance.CrewFetterDtoConverter_fillInto(srcObject as AppDto.CrewFetterDto, destObject as CrewFetterDto));
        dtoFillIntoActions.Add(397, (srcObject, destObject) => instance.ShopConverter_fillInto(srcObject as AppDto.Shop, destObject as Shop));
        dtoFillIntoActions.Add(399, (srcObject, destObject) => instance.CrewFetterConverter_fillInto(srcObject as AppDto.CrewFetter, destObject as CrewFetter));
        dtoFillIntoActions.Add(401, (srcObject, destObject) => instance.ActiveCaseInfoDtoConverter_fillInto(srcObject as AppDto.ActiveCaseInfoDto, destObject as ActiveCaseInfoDto));
        dtoFillIntoActions.Add(403, (srcObject, destObject) => instance.OrbmentConverter_fillInto(srcObject as AppDto.Orbment, destObject as Orbment));
        dtoFillIntoActions.Add(404, (srcObject, destObject) => instance.QuartzPropertyDtoConverter_fillInto(srcObject as AppDto.QuartzPropertyDto, destObject as QuartzPropertyDto));
        dtoFillIntoActions.Add(405, (srcObject, destObject) => instance.EquipmentConverter_fillInto(srcObject as AppDto.Equipment, destObject as Equipment));
        dtoFillIntoActions.Add(406, (srcObject, destObject) => instance.EquipmentTypeConverter_fillInto(srcObject as AppDto.EquipmentType, destObject as EquipmentType));
        dtoFillIntoActions.Add(407, (srcObject, destObject) => instance.EquipmentDtoConverter_fillInto(srcObject as AppDto.EquipmentDto, destObject as EquipmentDto));
        dtoFillIntoActions.Add(408, (srcObject, destObject) => instance.EquipmentExtraDtoConverter_fillInto(srcObject as AppDto.EquipmentExtraDto, destObject as EquipmentExtraDto));
        dtoFillIntoActions.Add(409, (srcObject, destObject) => instance.ShopGoodsDtoConverter_fillInto(srcObject as AppDto.ShopGoodsDto, destObject as ShopGoodsDto));
        dtoFillIntoActions.Add(410, (srcObject, destObject) => instance.CrewExtNameConverter_fillInto(srcObject as AppDto.CrewExtName, destObject as CrewExtName));
        dtoFillIntoActions.Add(411, (srcObject, destObject) => instance.EquipmentEffectsConverter_fillInto(srcObject as AppDto.EquipmentEffects, destObject as EquipmentEffects));
        dtoFillIntoActions.Add(412, (srcObject, destObject) => instance.EquipmentPartConverter_fillInto(srcObject as AppDto.EquipmentPart, destObject as EquipmentPart));
        dtoFillIntoActions.Add(413, (srcObject, destObject) => instance.EquipmentQualityConverter_fillInto(srcObject as AppDto.EquipmentQuality, destObject as EquipmentQuality));
        dtoFillIntoActions.Add(414, (srcObject, destObject) => instance.ShopGoodsConverter_fillInto(srcObject as AppDto.ShopGoods, destObject as ShopGoods));
        dtoFillIntoActions.Add(415, (srcObject, destObject) => instance.AllShopInfoDtoConverter_fillInto(srcObject as AppDto.AllShopInfoDto, destObject as AllShopInfoDto));
        dtoFillIntoActions.Add(416, (srcObject, destObject) => instance.ShopInfoDtoConverter_fillInto(srcObject as AppDto.ShopInfoDto, destObject as ShopInfoDto));
        dtoFillIntoActions.Add(417, (srcObject, destObject) => instance.QuartzBasePropertyConverter_fillInto(srcObject as AppDto.QuartzBaseProperty, destObject as QuartzBaseProperty));
        dtoFillIntoActions.Add(418, (srcObject, destObject) => instance.SlotsElementLimitConverter_fillInto(srcObject as AppDto.SlotsElementLimit, destObject as SlotsElementLimit));
        dtoFillIntoActions.Add(419, (srcObject, destObject) => instance.SlotsLinkConverter_fillInto(srcObject as AppDto.SlotsLink, destObject as SlotsLink));
        dtoFillIntoActions.Add(420, (srcObject, destObject) => instance.EquipmentExtraPropertyConverter_fillInto(srcObject as AppDto.EquipmentExtraProperty, destObject as EquipmentExtraProperty));
        dtoFillIntoActions.Add(422, (srcObject, destObject) => instance.QuartzPropertyConverter_fillInto(srcObject as AppDto.QuartzProperty, destObject as QuartzProperty));
        dtoFillIntoActions.Add(423, (srcObject, destObject) => instance.EquipmentCaseDtoConverter_fillInto(srcObject as AppDto.EquipmentCaseDto, destObject as EquipmentCaseDto));
        dtoFillIntoActions.Add(424, (srcObject, destObject) => instance.EquipmentInfoDtoConverter_fillInto(srcObject as AppDto.EquipmentInfoDto, destObject as EquipmentInfoDto));
        dtoFillIntoActions.Add(429, (srcObject, destObject) => instance.GuildBuildingConverter_fillInto(srcObject as AppDto.GuildBuilding, destObject as GuildBuilding));
        dtoFillIntoActions.Add(433, (srcObject, destObject) => instance.GuildGradeConverter_fillInto(srcObject as AppDto.GuildGrade, destObject as GuildGrade));
        dtoFillIntoActions.Add(437, (srcObject, destObject) => instance.GuildPositionConverter_fillInto(srcObject as AppDto.GuildPosition, destObject as GuildPosition));
        dtoFillIntoActions.Add(442, (srcObject, destObject) => instance.GuildTreasuryConverter_fillInto(srcObject as AppDto.GuildTreasury, destObject as GuildTreasury));
        dtoFillIntoActions.Add(443, (srcObject, destObject) => instance.QuartzElementConverter_fillInto(srcObject as AppDto.QuartzElement, destObject as QuartzElement));
        dtoFillIntoActions.Add(444, (srcObject, destObject) => instance.QuartzQualityConverter_fillInto(srcObject as AppDto.QuartzQuality, destObject as QuartzQuality));
        dtoFillIntoActions.Add(445, (srcObject, destObject) => instance.MiraConvertCountDtoConverter_fillInto(srcObject as AppDto.MiraConvertCountDto, destObject as MiraConvertCountDto));
        dtoFillIntoActions.Add(446, (srcObject, destObject) => instance.OrbmentDtoConverter_fillInto(srcObject as AppDto.OrbmentDto, destObject as OrbmentDto));
        dtoFillIntoActions.Add(447, (srcObject, destObject) => instance.OrbmentInfoDtoConverter_fillInto(srcObject as AppDto.OrbmentInfoDto, destObject as OrbmentInfoDto));
        dtoFillIntoActions.Add(448, (srcObject, destObject) => instance.QuartzPropertyListDtoConverter_fillInto(srcObject as AppDto.QuartzPropertyListDto, destObject as QuartzPropertyListDto));
        dtoFillIntoActions.Add(449, (srcObject, destObject) => instance.SlotsDtoConverter_fillInto(srcObject as AppDto.SlotsDto, destObject as SlotsDto));
        dtoFillIntoActions.Add(450, (srcObject, destObject) => instance.QuartzSmithGradeConverter_fillInto(srcObject as AppDto.QuartzSmithGrade, destObject as QuartzSmithGrade));
        dtoFillIntoActions.Add(451, (srcObject, destObject) => instance.MagicChangeDtoConverter_fillInto(srcObject as AppDto.MagicChangeDto, destObject as MagicChangeDto));
        dtoFillIntoActions.Add(452, (srcObject, destObject) => instance.PropsParamConverter_fillInto(srcObject as AppDto.PropsParam, destObject as PropsParam));
        dtoFillIntoActions.Add(453, (srcObject, destObject) => instance.HearsayNotifyConverter_fillInto(srcObject as AppDto.HearsayNotify, destObject as HearsayNotify));
        dtoFillIntoActions.Add(454, (srcObject, destObject) => instance.TollgateConverter_fillInto(srcObject as AppDto.Tollgate, destObject as Tollgate));
        dtoFillIntoActions.Add(455, (srcObject, destObject) => instance.AcceptConditionsConverter_fillInto(srcObject as AppDto.AcceptConditions, destObject as AcceptConditions));
        dtoFillIntoActions.Add(456, (srcObject, destObject) => instance.AcceptGiftsConverter_fillInto(srcObject as AppDto.AcceptGifts, destObject as AcceptGifts));
        dtoFillIntoActions.Add(457, (srcObject, destObject) => instance.MissionConverter_fillInto(srcObject as AppDto.Mission, destObject as Mission));
        dtoFillIntoActions.Add(458, (srcObject, destObject) => instance.MissionDialogConverter_fillInto(srcObject as AppDto.MissionDialog, destObject as MissionDialog));
        dtoFillIntoActions.Add(459, (srcObject, destObject) => instance.MissionDialogOptionConverter_fillInto(srcObject as AppDto.MissionDialogOption, destObject as MissionDialogOption));
        dtoFillIntoActions.Add(460, (srcObject, destObject) => instance.MissionDialogSequenceConverter_fillInto(srcObject as AppDto.MissionDialogSequence, destObject as MissionDialogSequence));
        dtoFillIntoActions.Add(461, (srcObject, destObject) => instance.MissionTypeConverter_fillInto(srcObject as AppDto.MissionType, destObject as MissionType));
        dtoFillIntoActions.Add(462, (srcObject, destObject) => instance.SubmitConditionsConverter_fillInto(srcObject as AppDto.SubmitConditions, destObject as SubmitConditions));
        dtoFillIntoActions.Add(463, (srcObject, destObject) => instance.MissionSubmitStateNotifyConverter_fillInto(srcObject as AppDto.MissionSubmitStateNotify, destObject as MissionSubmitStateNotify));
        dtoFillIntoActions.Add(464, (srcObject, destObject) => instance.PlayerMissionDtoConverter_fillInto(srcObject as AppDto.PlayerMissionDto, destObject as PlayerMissionDto));
        dtoFillIntoActions.Add(465, (srcObject, destObject) => instance.SubmitDtoConverter_fillInto(srcObject as AppDto.SubmitDto, destObject as SubmitDto));
        dtoFillIntoActions.Add(466, (srcObject, destObject) => instance.AcceptConditionConverter_fillInto(srcObject as AppDto.AcceptCondition, destObject as AcceptCondition));
        dtoFillIntoActions.Add(467, (srcObject, destObject) => instance.AcceptionCondtion_1Converter_fillInto(srcObject as AppDto.AcceptionCondtion_1, destObject as AcceptionCondtion_1));
        dtoFillIntoActions.Add(468, (srcObject, destObject) => instance.AcceptionCondtion_2Converter_fillInto(srcObject as AppDto.AcceptionCondtion_2, destObject as AcceptionCondtion_2));
        dtoFillIntoActions.Add(469, (srcObject, destObject) => instance.SubmitConditionConverter_fillInto(srcObject as AppDto.SubmitCondition, destObject as SubmitCondition));
        dtoFillIntoActions.Add(470, (srcObject, destObject) => instance.NpcAppearanceConverter_fillInto(srcObject as AppDto.NpcAppearance, destObject as NpcAppearance));
        dtoFillIntoActions.Add(471, (srcObject, destObject) => instance.NpcInfoDtoConverter_fillInto(srcObject as AppDto.NpcInfoDto, destObject as NpcInfoDto));
        dtoFillIntoActions.Add(472, (srcObject, destObject) => instance.PlotConverter_fillInto(srcObject as AppDto.Plot, destObject as Plot));
        dtoFillIntoActions.Add(473, (srcObject, destObject) => instance.PlotEndAcceptMissionEventConverter_fillInto(srcObject as AppDto.PlotEndAcceptMissionEvent, destObject as PlotEndAcceptMissionEvent));
        dtoFillIntoActions.Add(474, (srcObject, destObject) => instance.PlotEndBattleEventConverter_fillInto(srcObject as AppDto.PlotEndBattleEvent, destObject as PlotEndBattleEvent));
        dtoFillIntoActions.Add(476, (srcObject, destObject) => instance.PlotEndEnterSceneEventConverter_fillInto(srcObject as AppDto.PlotEndEnterSceneEvent, destObject as PlotEndEnterSceneEvent));
        dtoFillIntoActions.Add(477, (srcObject, destObject) => instance.PlotEndEventConverter_fillInto(srcObject as AppDto.PlotEndEvent, destObject as PlotEndEvent));
        dtoFillIntoActions.Add(478, (srcObject, destObject) => instance.PlotEndPlotEventConverter_fillInto(srcObject as AppDto.PlotEndPlotEvent, destObject as PlotEndPlotEvent));
        dtoFillIntoActions.Add(479, (srcObject, destObject) => instance.TalkSubmitDtoConverter_fillInto(srcObject as AppDto.TalkSubmitDto, destObject as TalkSubmitDto));
        dtoFillIntoActions.Add(480, (srcObject, destObject) => instance.ItemDtoConverter_fillInto(srcObject as AppDto.ItemDto, destObject as ItemDto));
        dtoFillIntoActions.Add(481, (srcObject, destObject) => instance.MissionCleanNotifyConverter_fillInto(srcObject as AppDto.MissionCleanNotify, destObject as MissionCleanNotify));
        dtoFillIntoActions.Add(482, (srcObject, destObject) => instance.PlayerBranchMissionDtoConverter_fillInto(srcObject as AppDto.PlayerBranchMissionDto, destObject as PlayerBranchMissionDto));
        dtoFillIntoActions.Add(483, (srcObject, destObject) => instance.PlayerMasterMissionDtoConverter_fillInto(srcObject as AppDto.PlayerMasterMissionDto, destObject as PlayerMasterMissionDto));
        dtoFillIntoActions.Add(484, (srcObject, destObject) => instance.PlayerMissionNotifyConverter_fillInto(srcObject as AppDto.PlayerMissionNotify, destObject as PlayerMissionNotify));
        dtoFillIntoActions.Add(486, (srcObject, destObject) => instance.ShopTypeConverter_fillInto(srcObject as AppDto.ShopType, destObject as ShopType));
        dtoFillIntoActions.Add(487, (srcObject, destObject) => instance.QuartzStrengMaterialConverter_fillInto(srcObject as AppDto.QuartzStrengMaterial, destObject as QuartzStrengMaterial));
        dtoFillIntoActions.Add(490, (srcObject, destObject) => instance.ExchangeCurrencyConverter_fillInto(srcObject as AppDto.ExchangeCurrency, destObject as ExchangeCurrency));
        dtoFillIntoActions.Add(491, (srcObject, destObject) => instance.ExchangeRateConverter_fillInto(srcObject as AppDto.ExchangeRate, destObject as ExchangeRate));
        dtoFillIntoActions.Add(495, (srcObject, destObject) => instance.MissionStatDtoConverter_fillInto(srcObject as AppDto.MissionStatDto, destObject as MissionStatDto));
        dtoFillIntoActions.Add(496, (srcObject, destObject) => instance.PlayerMissionListDtoConverter_fillInto(srcObject as AppDto.PlayerMissionListDto, destObject as PlayerMissionListDto));
        dtoFillIntoActions.Add(498, (srcObject, destObject) => instance.ShowMonsterSubmitDtoConverter_fillInto(srcObject as AppDto.ShowMonsterSubmitDto, destObject as ShowMonsterSubmitDto));
        dtoFillIntoActions.Add(499, (srcObject, destObject) => instance.NpcStaticGroupConverter_fillInto(srcObject as AppDto.NpcStaticGroup, destObject as NpcStaticGroup));
        dtoFillIntoActions.Add(500, (srcObject, destObject) => instance.CrewChipDtoConverter_fillInto(srcObject as AppDto.CrewChipDto, destObject as CrewChipDto));
        dtoFillIntoActions.Add(501, (srcObject, destObject) => instance.CollectionItemSubmitDtoConverter_fillInto(srcObject as AppDto.CollectionItemSubmitDto, destObject as CollectionItemSubmitDto));
        dtoFillIntoActions.Add(502, (srcObject, destObject) => instance.ItemNpcRelationConverter_fillInto(srcObject as AppDto.ItemNpcRelation, destObject as ItemNpcRelation));
        dtoFillIntoActions.Add(503, (srcObject, destObject) => instance.ItemStaticGroupConverter_fillInto(srcObject as AppDto.ItemStaticGroup, destObject as ItemStaticGroup));
        dtoFillIntoActions.Add(504, (srcObject, destObject) => instance.ItemStaticParamConverter_fillInto(srcObject as AppDto.ItemStaticParam, destObject as ItemStaticParam));
        dtoFillIntoActions.Add(505, (srcObject, destObject) => instance.EmbedPhaseConverter_fillInto(srcObject as AppDto.EmbedPhase, destObject as EmbedPhase));
        dtoFillIntoActions.Add(506, (srcObject, destObject) => instance.PropsParam_1Converter_fillInto(srcObject as AppDto.PropsParam_1, destObject as PropsParam_1));
        dtoFillIntoActions.Add(507, (srcObject, destObject) => instance.AssistSkillConverter_fillInto(srcObject as AppDto.AssistSkill, destObject as AssistSkill));
        dtoFillIntoActions.Add(508, (srcObject, destObject) => instance.PlayerDressInfoDtoConverter_fillInto(srcObject as AppDto.PlayerDressInfoDto, destObject as PlayerDressInfoDto));
        dtoFillIntoActions.Add(509, (srcObject, destObject) => instance.AppMissionItemConverter_fillInto(srcObject as AppDto.AppMissionItem, destObject as AppMissionItem));
        dtoFillIntoActions.Add(510, (srcObject, destObject) => instance.AssistSkillGradeConsumeConverter_fillInto(srcObject as AppDto.AssistSkillGradeConsume, destObject as AssistSkillGradeConsume));
        dtoFillIntoActions.Add(511, (srcObject, destObject) => instance.AssistSkillMakeConsumeConverter_fillInto(srcObject as AppDto.AssistSkillMakeConsume, destObject as AssistSkillMakeConsume));
        dtoFillIntoActions.Add(512, (srcObject, destObject) => instance.AssistSkillDtoConverter_fillInto(srcObject as AppDto.AssistSkillDto, destObject as AssistSkillDto));
        dtoFillIntoActions.Add(513, (srcObject, destObject) => instance.MedallionPropsConverter_fillInto(srcObject as AppDto.MedallionProps, destObject as MedallionProps));
        dtoFillIntoActions.Add(514, (srcObject, destObject) => instance.EngraveDtoConverter_fillInto(srcObject as AppDto.EngraveDto, destObject as EngraveDto));
        dtoFillIntoActions.Add(515, (srcObject, destObject) => instance.MedallionDtoConverter_fillInto(srcObject as AppDto.MedallionDto, destObject as MedallionDto));
        dtoFillIntoActions.Add(516, (srcObject, destObject) => instance.PropsParam_3Converter_fillInto(srcObject as AppDto.PropsParam_3, destObject as PropsParam_3));
        dtoFillIntoActions.Add(517, (srcObject, destObject) => instance.EmbedHoleDtoConverter_fillInto(srcObject as AppDto.EmbedHoleDto, destObject as EmbedHoleDto));
        dtoFillIntoActions.Add(518, (srcObject, destObject) => instance.EmbedHolesDtoConverter_fillInto(srcObject as AppDto.EmbedHolesDto, destObject as EmbedHolesDto));
        dtoFillIntoActions.Add(519, (srcObject, destObject) => instance.AssistSkillMakeDtoConverter_fillInto(srcObject as AppDto.AssistSkillMakeDto, destObject as AssistSkillMakeDto));
        dtoFillIntoActions.Add(520, (srcObject, destObject) => instance.ApplyItemSubmitDtoConverter_fillInto(srcObject as AppDto.ApplyItemSubmitDto, destObject as ApplyItemSubmitDto));
        dtoFillIntoActions.Add(521, (srcObject, destObject) => instance.SceneAppearanceStaticGroupConverter_fillInto(srcObject as AppDto.SceneAppearanceStaticGroup, destObject as SceneAppearanceStaticGroup));
        dtoFillIntoActions.Add(522, (srcObject, destObject) => instance.NpcMonsterConverter_fillInto(srcObject as AppDto.NpcMonster, destObject as NpcMonster));
        dtoFillIntoActions.Add(523, (srcObject, destObject) => instance.NpcVariableConverter_fillInto(srcObject as AppDto.NpcVariable, destObject as NpcVariable));
        dtoFillIntoActions.Add(524, (srcObject, destObject) => instance.SceneInfoDtoConverter_fillInto(srcObject as AppDto.SceneInfoDto, destObject as SceneInfoDto));
        dtoFillIntoActions.Add(525, (srcObject, destObject) => instance.EmbedApertureDtoConverter_fillInto(srcObject as AppDto.EmbedApertureDto, destObject as EmbedApertureDto));
        dtoFillIntoActions.Add(526, (srcObject, destObject) => instance.PickItemSubmitInfoDtoConverter_fillInto(srcObject as AppDto.PickItemSubmitInfoDto, destObject as PickItemSubmitInfoDto));
        dtoFillIntoActions.Add(527, (srcObject, destObject) => instance.PlayerMissionFinishNotifyConverter_fillInto(srcObject as AppDto.PlayerMissionFinishNotify, destObject as PlayerMissionFinishNotify));
        dtoFillIntoActions.Add(528, (srcObject, destObject) => instance.UpgradeSubmitDtoConverter_fillInto(srcObject as AppDto.UpgradeSubmitDto, destObject as UpgradeSubmitDto));
        dtoFillIntoActions.Add(529, (srcObject, destObject) => instance.AssistSkillInfoDtoConverter_fillInto(srcObject as AppDto.AssistSkillInfoDto, destObject as AssistSkillInfoDto));
        dtoFillIntoActions.Add(530, (srcObject, destObject) => instance.AssistSkillModelDtoConverter_fillInto(srcObject as AppDto.AssistSkillModelDto, destObject as AssistSkillModelDto));
        dtoFillIntoActions.Add(531, (srcObject, destObject) => instance.EquipmentPropertyDtoConverter_fillInto(srcObject as AppDto.EquipmentPropertyDto, destObject as EquipmentPropertyDto));
        dtoFillIntoActions.Add(532, (srcObject, destObject) => instance.VideoDrivingTargetStateConverter_fillInto(srcObject as AppDto.VideoDrivingTargetState, destObject as VideoDrivingTargetState));
        dtoFillIntoActions.Add(533, (srcObject, destObject) => instance.PropsExtraDtoConverter_fillInto(srcObject as AppDto.PropsExtraDto, destObject as PropsExtraDto));
        dtoFillIntoActions.Add(534, (srcObject, destObject) => instance.PropsParam_2Converter_fillInto(srcObject as AppDto.PropsParam_2, destObject as PropsParam_2));
        dtoFillIntoActions.Add(535, (srcObject, destObject) => instance.HiddenMonsterSubmitDtoConverter_fillInto(srcObject as AppDto.HiddenMonsterSubmitDto, destObject as HiddenMonsterSubmitDto));
        dtoFillIntoActions.Add(536, (srcObject, destObject) => instance.MissionItemNotifyConverter_fillInto(srcObject as AppDto.MissionItemNotify, destObject as MissionItemNotify));
        dtoFillIntoActions.Add(539, (srcObject, destObject) => instance.PropsParam_4Converter_fillInto(srcObject as AppDto.PropsParam_4, destObject as PropsParam_4));
        dtoFillIntoActions.Add(540, (srcObject, destObject) => instance.AssistSkillGradeMaitchItemConverter_fillInto(srcObject as AppDto.AssistSkillGradeMaitchItem, destObject as AssistSkillGradeMaitchItem));
        dtoFillIntoActions.Add(541, (srcObject, destObject) => instance.PropsEffectMatchConverter_fillInto(srcObject as AppDto.PropsEffectMatch, destObject as PropsEffectMatch));
        dtoFillIntoActions.Add(542, (srcObject, destObject) => instance.PropsParam_5Converter_fillInto(srcObject as AppDto.PropsParam_5, destObject as PropsParam_5));
        dtoFillIntoActions.Add(543, (srcObject, destObject) => instance.FindtemSubmitInfoDtoConverter_fillInto(srcObject as AppDto.FindtemSubmitInfoDto, destObject as FindtemSubmitInfoDto));
        dtoFillIntoActions.Add(544, (srcObject, destObject) => instance.EquipmentCaseItemDtoConverter_fillInto(srcObject as AppDto.EquipmentCaseItemDto, destObject as EquipmentCaseItemDto));
        dtoFillIntoActions.Add(545, (srcObject, destObject) => instance.AssistSkillForgetConsumeDtoConverter_fillInto(srcObject as AppDto.AssistSkillForgetConsumeDto, destObject as AssistSkillForgetConsumeDto));
        dtoFillIntoActions.Add(546, (srcObject, destObject) => instance.WareHouseExpandConverter_fillInto(srcObject as AppDto.WareHouseExpand, destObject as WareHouseExpand));
        dtoFillIntoActions.Add(548, (srcObject, destObject) => instance.PropsParam_6Converter_fillInto(srcObject as AppDto.PropsParam_6, destObject as PropsParam_6));
        dtoFillIntoActions.Add(549, (srcObject, destObject) => instance.CharactorPropertyUpdateDtoConverter_fillInto(srcObject as AppDto.CharactorPropertyUpdateDto, destObject as CharactorPropertyUpdateDto));
        dtoFillIntoActions.Add(550, (srcObject, destObject) => instance.PrePayNotifyConverter_fillInto(srcObject as AppDto.PrePayNotify, destObject as PrePayNotify));
        dtoFillIntoActions.Add(551, (srcObject, destObject) => instance.FunctionOpenNotifyConverter_fillInto(srcObject as AppDto.FunctionOpenNotify, destObject as FunctionOpenNotify));
        dtoFillIntoActions.Add(552, (srcObject, destObject) => instance.BattleForceExitNotifyConverter_fillInto(srcObject as AppDto.BattleForceExitNotify, destObject as BattleForceExitNotify));
        dtoFillIntoActions.Add(553, (srcObject, destObject) => instance.BattleAutoNotifyConverter_fillInto(srcObject as AppDto.BattleAutoNotify, destObject as BattleAutoNotify));
        dtoFillIntoActions.Add(555, (srcObject, destObject) => instance.GameEffectConstConverter_fillInto(srcObject as AppDto.GameEffectConst, destObject as GameEffectConst));
        dtoFillIntoActions.Add(556, (srcObject, destObject) => instance.VideoActionTimeRewardConverter_fillInto(srcObject as AppDto.VideoActionTimeReward, destObject as VideoActionTimeReward));
        dtoFillIntoActions.Add(557, (srcObject, destObject) => instance.MatchBtnNotifyConverter_fillInto(srcObject as AppDto.MatchBtnNotify, destObject as MatchBtnNotify));
        dtoFillIntoActions.Add(558, (srcObject, destObject) => instance.TeamMainActionConverter_fillInto(srcObject as AppDto.TeamMainAction, destObject as TeamMainAction));
        dtoFillIntoActions.Add(559, (srcObject, destObject) => instance.StallExpandConverter_fillInto(srcObject as AppDto.StallExpand, destObject as StallExpand));
        dtoFillIntoActions.Add(560, (srcObject, destObject) => instance.StallGoodsConverter_fillInto(srcObject as AppDto.StallGoods, destObject as StallGoods));
        dtoFillIntoActions.Add(561, (srcObject, destObject) => instance.PlayerStallGoodsDtoConverter_fillInto(srcObject as AppDto.PlayerStallGoodsDto, destObject as PlayerStallGoodsDto));
        dtoFillIntoActions.Add(562, (srcObject, destObject) => instance.StallCenterDtoConverter_fillInto(srcObject as AppDto.StallCenterDto, destObject as StallCenterDto));
        dtoFillIntoActions.Add(563, (srcObject, destObject) => instance.StallDrawNotifyConverter_fillInto(srcObject as AppDto.StallDrawNotify, destObject as StallDrawNotify));
        dtoFillIntoActions.Add(564, (srcObject, destObject) => instance.StallGoodsDtoConverter_fillInto(srcObject as AppDto.StallGoodsDto, destObject as StallGoodsDto));
        dtoFillIntoActions.Add(566, (srcObject, destObject) => instance.TradeGoodsConverter_fillInto(srcObject as AppDto.TradeGoods, destObject as TradeGoods));
        dtoFillIntoActions.Add(567, (srcObject, destObject) => instance.TradeMenuConverter_fillInto(srcObject as AppDto.TradeMenu, destObject as TradeMenu));
        dtoFillIntoActions.Add(568, (srcObject, destObject) => instance.TradeCenterDtoConverter_fillInto(srcObject as AppDto.TradeCenterDto, destObject as TradeCenterDto));
        dtoFillIntoActions.Add(569, (srcObject, destObject) => instance.TradeGoodsDtoConverter_fillInto(srcObject as AppDto.TradeGoodsDto, destObject as TradeGoodsDto));
        dtoFillIntoActions.Add(571, (srcObject, destObject) => instance.FindItemStateNotifyConverter_fillInto(srcObject as AppDto.FindItemStateNotify, destObject as FindItemStateNotify));
        dtoFillIntoActions.Add(572, (srcObject, destObject) => instance.FriendListDtoConverter_fillInto(srcObject as AppDto.FriendListDto, destObject as FriendListDto));
        dtoFillIntoActions.Add(573, (srcObject, destObject) => instance.FriendLoadMsgDtoConverter_fillInto(srcObject as AppDto.FriendLoadMsgDto, destObject as FriendLoadMsgDto));
        dtoFillIntoActions.Add(574, (srcObject, destObject) => instance.EquipmentGroupConverter_fillInto(srcObject as AppDto.EquipmentGroup, destObject as EquipmentGroup));
        dtoFillIntoActions.Add(575, (srcObject, destObject) => instance.PropsParam_7Converter_fillInto(srcObject as AppDto.PropsParam_7, destObject as PropsParam_7));
        dtoFillIntoActions.Add(576, (srcObject, destObject) => instance.MissionRecordConverter_fillInto(srcObject as AppDto.MissionRecord, destObject as MissionRecord));
        dtoFillIntoActions.Add(577, (srcObject, destObject) => instance.FriendActionNotifyConverter_fillInto(srcObject as AppDto.FriendActionNotify, destObject as FriendActionNotify));
        dtoFillIntoActions.Add(578, (srcObject, destObject) => instance.FriendDynamicNotifyConverter_fillInto(srcObject as AppDto.FriendDynamicNotify, destObject as FriendDynamicNotify));
        dtoFillIntoActions.Add(579, (srcObject, destObject) => instance.StallCashDtoConverter_fillInto(srcObject as AppDto.StallCashDto, destObject as StallCashDto));
        dtoFillIntoActions.Add(581, (srcObject, destObject) => instance.EquipmentAtrifactConverter_fillInto(srcObject as AppDto.EquipmentAtrifact, destObject as EquipmentAtrifact));
        dtoFillIntoActions.Add(582, (srcObject, destObject) => instance.OnSmithEquipemntDtoConverter_fillInto(srcObject as AppDto.OnSmithEquipemntDto, destObject as OnSmithEquipemntDto));
        dtoFillIntoActions.Add(583, (srcObject, destObject) => instance.AtrifactDtoConverter_fillInto(srcObject as AppDto.AtrifactDto, destObject as AtrifactDto));
        dtoFillIntoActions.Add(584, (srcObject, destObject) => instance.ItemTipConverter_fillInto(srcObject as AppDto.ItemTip, destObject as ItemTip));
        dtoFillIntoActions.Add(585, (srcObject, destObject) => instance.ItemTipsNotifyConverter_fillInto(srcObject as AppDto.ItemTipsNotify, destObject as ItemTipsNotify));
        dtoFillIntoActions.Add(586, (srcObject, destObject) => instance.EmbedPhaseNotifyConverter_fillInto(srcObject as AppDto.EmbedPhaseNotify, destObject as EmbedPhaseNotify));
        dtoFillIntoActions.Add(588, (srcObject, destObject) => instance.CrewInfosDtoConverter_fillInto(srcObject as AppDto.CrewInfosDto, destObject as CrewInfosDto));
        dtoFillIntoActions.Add(589, (srcObject, destObject) => instance.AssistSkillMakeItemDtoConverter_fillInto(srcObject as AppDto.AssistSkillMakeItemDto, destObject as AssistSkillMakeItemDto));
        dtoFillIntoActions.Add(590, (srcObject, destObject) => instance.BracerExpInfoNotifyConverter_fillInto(srcObject as AppDto.BracerExpInfoNotify, destObject as BracerExpInfoNotify));
        dtoFillIntoActions.Add(592, (srcObject, destObject) => instance.ElementRelativeConverter_fillInto(srcObject as AppDto.ElementRelative, destObject as ElementRelative));
        dtoFillIntoActions.Add(593, (srcObject, destObject) => instance.CrewPersonalityConverter_fillInto(srcObject as AppDto.CrewPersonality, destObject as CrewPersonality));
        dtoFillIntoActions.Add(595, (srcObject, destObject) => instance.PropsParam_12Converter_fillInto(srcObject as AppDto.PropsParam_12, destObject as PropsParam_12));
        dtoFillIntoActions.Add(596, (srcObject, destObject) => instance.PropsParam_11Converter_fillInto(srcObject as AppDto.PropsParam_11, destObject as PropsParam_11));
        dtoFillIntoActions.Add(597, (srcObject, destObject) => instance.PickItemPointDtoConverter_fillInto(srcObject as AppDto.PickItemPointDto, destObject as PickItemPointDto));
        dtoFillIntoActions.Add(598, (srcObject, destObject) => instance.PlayerFactionMissionDtoConverter_fillInto(srcObject as AppDto.PlayerFactionMissionDto, destObject as PlayerFactionMissionDto));
        dtoFillIntoActions.Add(599, (srcObject, destObject) => instance.TradeGoodsListNotifyConverter_fillInto(srcObject as AppDto.TradeGoodsListNotify, destObject as TradeGoodsListNotify));
        dtoFillIntoActions.Add(600, (srcObject, destObject) => instance.DialogFunctionConverter_fillInto(srcObject as AppDto.DialogFunction, destObject as DialogFunction));
        dtoFillIntoActions.Add(601, (srcObject, destObject) => instance.BagItemListDtoConverter_fillInto(srcObject as AppDto.BagItemListDto, destObject as BagItemListDto));
        dtoFillIntoActions.Add(602, (srcObject, destObject) => instance.CrewShortDtoConverter_fillInto(srcObject as AppDto.CrewShortDto, destObject as CrewShortDto));
        dtoFillIntoActions.Add(603, (srcObject, destObject) => instance.CrewShortListDtoConverter_fillInto(srcObject as AppDto.CrewShortListDto, destObject as CrewShortListDto));
        dtoFillIntoActions.Add(604, (srcObject, destObject) => instance.PickItemStateNotifyConverter_fillInto(srcObject as AppDto.PickItemStateNotify, destObject as PickItemStateNotify));
        dtoFillIntoActions.Add(605, (srcObject, destObject) => instance.PlayerSceneObjectChangeNotifyConverter_fillInto(srcObject as AppDto.PlayerSceneObjectChangeNotify, destObject as PlayerSceneObjectChangeNotify));
        dtoFillIntoActions.Add(606, (srcObject, destObject) => instance.FactionMissionIdDtoConverter_fillInto(srcObject as AppDto.FactionMissionIdDto, destObject as FactionMissionIdDto));
        dtoFillIntoActions.Add(607, (srcObject, destObject) => instance.CrewFavorConverter_fillInto(srcObject as AppDto.CrewFavor, destObject as CrewFavor));
        dtoFillIntoActions.Add(608, (srcObject, destObject) => instance.FactionMissionRateConverter_fillInto(srcObject as AppDto.FactionMissionRate, destObject as FactionMissionRate));
        dtoFillIntoActions.Add(609, (srcObject, destObject) => instance.OnIncreaseFavorDtoConverter_fillInto(srcObject as AppDto.OnIncreaseFavorDto, destObject as OnIncreaseFavorDto));
        dtoFillIntoActions.Add(610, (srcObject, destObject) => instance.NpcSceneConstableMonsterConverter_fillInto(srcObject as AppDto.NpcSceneConstableMonster, destObject as NpcSceneConstableMonster));
        dtoFillIntoActions.Add(611, (srcObject, destObject) => instance.NpcSceneMonsterConverter_fillInto(srcObject as AppDto.NpcSceneMonster, destObject as NpcSceneMonster));
        dtoFillIntoActions.Add(612, (srcObject, destObject) => instance.NpcBattleNotifyConverter_fillInto(srcObject as AppDto.NpcBattleNotify, destObject as NpcBattleNotify));
        dtoFillIntoActions.Add(613, (srcObject, destObject) => instance.BracerEnterDtoConverter_fillInto(srcObject as AppDto.BracerEnterDto, destObject as BracerEnterDto));
        dtoFillIntoActions.Add(614, (srcObject, destObject) => instance.BracerMissionDtoConverter_fillInto(srcObject as AppDto.BracerMissionDto, destObject as BracerMissionDto));
        dtoFillIntoActions.Add(615, (srcObject, destObject) => instance.BattlePositionConverter_fillInto(srcObject as AppDto.BattlePosition, destObject as BattlePosition));
        dtoFillIntoActions.Add(616, (srcObject, destObject) => instance.BracerMissionCfgConverter_fillInto(srcObject as AppDto.BracerMissionCfg, destObject as BracerMissionCfg));
        dtoFillIntoActions.Add(617, (srcObject, destObject) => instance.PlayerUrgentMissionDtoConverter_fillInto(srcObject as AppDto.PlayerUrgentMissionDto, destObject as PlayerUrgentMissionDto));
        dtoFillIntoActions.Add(618, (srcObject, destObject) => instance.DelegateAcceptConditionsConverter_fillInto(srcObject as AppDto.DelegateAcceptConditions, destObject as DelegateAcceptConditions));
        dtoFillIntoActions.Add(619, (srcObject, destObject) => instance.DelegateMissionConverter_fillInto(srcObject as AppDto.DelegateMission, destObject as DelegateMission));
        dtoFillIntoActions.Add(620, (srcObject, destObject) => instance.DelegateRandomAwardConverter_fillInto(srcObject as AppDto.DelegateRandomAward, destObject as DelegateRandomAward));
        dtoFillIntoActions.Add(621, (srcObject, destObject) => instance.PlayerGhostMissionDtoConverter_fillInto(srcObject as AppDto.PlayerGhostMissionDto, destObject as PlayerGhostMissionDto));
        dtoFillIntoActions.Add(622, (srcObject, destObject) => instance.DelegateMissionDtoConverter_fillInto(srcObject as AppDto.DelegateMissionDto, destObject as DelegateMissionDto));
        dtoFillIntoActions.Add(623, (srcObject, destObject) => instance.DelegateMissionHoleDtoConverter_fillInto(srcObject as AppDto.DelegateMissionHoleDto, destObject as DelegateMissionHoleDto));
        dtoFillIntoActions.Add(624, (srcObject, destObject) => instance.DelegateMissionStateDtoConverter_fillInto(srcObject as AppDto.DelegateMissionStateDto, destObject as DelegateMissionStateDto));
        dtoFillIntoActions.Add(625, (srcObject, destObject) => instance.NpcSceneAncientWarcraftMonsterConverter_fillInto(srcObject as AppDto.NpcSceneAncientWarcraftMonster, destObject as NpcSceneAncientWarcraftMonster));
        dtoFillIntoActions.Add(626, (srcObject, destObject) => instance.NpcSceneEvilSnakeMonsterConverter_fillInto(srcObject as AppDto.NpcSceneEvilSnakeMonster, destObject as NpcSceneEvilSnakeMonster));
        dtoFillIntoActions.Add(627, (srcObject, destObject) => instance.NpcDisappearNotifyConverter_fillInto(srcObject as AppDto.NpcDisappearNotify, destObject as NpcDisappearNotify));
        dtoFillIntoActions.Add(628, (srcObject, destObject) => instance.PlayerTipDtoConverter_fillInto(srcObject as AppDto.PlayerTipDto, destObject as PlayerTipDto));
        dtoFillIntoActions.Add(629, (srcObject, destObject) => instance.NpcDynamicMonsterConverter_fillInto(srcObject as AppDto.NpcDynamicMonster, destObject as NpcDynamicMonster));
        dtoFillIntoActions.Add(630, (srcObject, destObject) => instance.RefuseTeamInvitationNotifyConverter_fillInto(srcObject as AppDto.RefuseTeamInvitationNotify, destObject as RefuseTeamInvitationNotify));
        dtoFillIntoActions.Add(631, (srcObject, destObject) => instance.RefuseTeamRequestNotifyConverter_fillInto(srcObject as AppDto.RefuseTeamRequestNotify, destObject as RefuseTeamRequestNotify));
        dtoFillIntoActions.Add(632, (srcObject, destObject) => instance.BracerMissionListDtoConverter_fillInto(srcObject as AppDto.BracerMissionListDto, destObject as BracerMissionListDto));
        dtoFillIntoActions.Add(633, (srcObject, destObject) => instance.CrewRecruitTypeConverter_fillInto(srcObject as AppDto.CrewRecruitType, destObject as CrewRecruitType));
        dtoFillIntoActions.Add(634, (srcObject, destObject) => instance.CrewRecordConverter_fillInto(srcObject as AppDto.CrewRecord, destObject as CrewRecord));
        dtoFillIntoActions.Add(635, (srcObject, destObject) => instance.BattleDemoRequestNotifyConverter_fillInto(srcObject as AppDto.BattleDemoRequestNotify, destObject as BattleDemoRequestNotify));
        dtoFillIntoActions.Add(636, (srcObject, destObject) => instance.RefuseBattleDemoNotifyConverter_fillInto(srcObject as AppDto.RefuseBattleDemoNotify, destObject as RefuseBattleDemoNotify));
        dtoFillIntoActions.Add(637, (srcObject, destObject) => instance.FunTooltipConverter_fillInto(srcObject as AppDto.FunTooltip, destObject as FunTooltip));
        dtoFillIntoActions.Add(638, (srcObject, destObject) => instance.MainCrewInfoNotifyConverter_fillInto(srcObject as AppDto.MainCrewInfoNotify, destObject as MainCrewInfoNotify));
        dtoFillIntoActions.Add(639, (srcObject, destObject) => instance.FunctionFrameStateConverter_fillInto(srcObject as AppDto.FunctionFrameState, destObject as FunctionFrameState));
        dtoFillIntoActions.Add(640, (srcObject, destObject) => instance.CollectionItemCategorySubmitDtoConverter_fillInto(srcObject as AppDto.CollectionItemCategorySubmitDto, destObject as CollectionItemCategorySubmitDto));
        dtoFillIntoActions.Add(641, (srcObject, destObject) => instance.ItemCategoryConverter_fillInto(srcObject as AppDto.ItemCategory, destObject as ItemCategory));
        dtoFillIntoActions.Add(642, (srcObject, destObject) => instance.PlayerTreasuryMissionDtoConverter_fillInto(srcObject as AppDto.PlayerTreasuryMissionDto, destObject as PlayerTreasuryMissionDto));
        dtoFillIntoActions.Add(643, (srcObject, destObject) => instance.ArenaInfoDtoConverter_fillInto(srcObject as AppDto.ArenaInfoDto, destObject as ArenaInfoDto));
        dtoFillIntoActions.Add(644, (srcObject, destObject) => instance.ArenaReportDtoConverter_fillInto(srcObject as AppDto.ArenaReportDto, destObject as ArenaReportDto));
        dtoFillIntoActions.Add(645, (srcObject, destObject) => instance.OpponentInfoDtoConverter_fillInto(srcObject as AppDto.OpponentInfoDto, destObject as OpponentInfoDto));
        dtoFillIntoActions.Add(648, (srcObject, destObject) => instance.BattleTypeConverter_fillInto(srcObject as AppDto.BattleType, destObject as BattleType));
        dtoFillIntoActions.Add(649, (srcObject, destObject) => instance.VideoSoldierSwtichStateConverter_fillInto(srcObject as AppDto.VideoSoldierSwtichState, destObject as VideoSoldierSwtichState));
        dtoFillIntoActions.Add(650, (srcObject, destObject) => instance.PropsExtraDto_17Converter_fillInto(srcObject as AppDto.PropsExtraDto_17, destObject as PropsExtraDto_17));
        dtoFillIntoActions.Add(651, (srcObject, destObject) => instance.QuestionConverter_fillInto(srcObject as AppDto.Question, destObject as Question));
        dtoFillIntoActions.Add(652, (srcObject, destObject) => instance.QuestionTypeConverter_fillInto(srcObject as AppDto.QuestionType, destObject as QuestionType));
        dtoFillIntoActions.Add(653, (srcObject, destObject) => instance.TowerCfgConverter_fillInto(srcObject as AppDto.TowerCfg, destObject as TowerCfg));
        dtoFillIntoActions.Add(654, (srcObject, destObject) => instance.PropsTreasureRewardConverter_fillInto(srcObject as AppDto.PropsTreasureReward, destObject as PropsTreasureReward));
        dtoFillIntoActions.Add(655, (srcObject, destObject) => instance.HighTreasuryInfoDtoConverter_fillInto(srcObject as AppDto.HighTreasuryInfoDto, destObject as HighTreasuryInfoDto));
        dtoFillIntoActions.Add(657, (srcObject, destObject) => instance.HarvestQuestionGiftBoxDtoConverter_fillInto(srcObject as AppDto.HarvestQuestionGiftBoxDto, destObject as HarvestQuestionGiftBoxDto));
        dtoFillIntoActions.Add(658, (srcObject, destObject) => instance.PlayerQuestionDtoConverter_fillInto(srcObject as AppDto.PlayerQuestionDto, destObject as PlayerQuestionDto));
        dtoFillIntoActions.Add(659, (srcObject, destObject) => instance.QuestionClosureNotifyConverter_fillInto(srcObject as AppDto.QuestionClosureNotify, destObject as QuestionClosureNotify));
        dtoFillIntoActions.Add(660, (srcObject, destObject) => instance.QuestionEntityDtoConverter_fillInto(srcObject as AppDto.QuestionEntityDto, destObject as QuestionEntityDto));
        dtoFillIntoActions.Add(661, (srcObject, destObject) => instance.QuestionOpenNotifyConverter_fillInto(srcObject as AppDto.QuestionOpenNotify, destObject as QuestionOpenNotify));
        dtoFillIntoActions.Add(662, (srcObject, destObject) => instance.PropsParam_19Converter_fillInto(srcObject as AppDto.PropsParam_19, destObject as PropsParam_19));
        dtoFillIntoActions.Add(663, (srcObject, destObject) => instance.TowerBattleWinNotifyConverter_fillInto(srcObject as AppDto.TowerBattleWinNotify, destObject as TowerBattleWinNotify));
        dtoFillIntoActions.Add(664, (srcObject, destObject) => instance.ArenaReportsDtoConverter_fillInto(srcObject as AppDto.ArenaReportsDto, destObject as ArenaReportsDto));
        dtoFillIntoActions.Add(665, (srcObject, destObject) => instance.QuestionEntityNotifyConverter_fillInto(srcObject as AppDto.QuestionEntityNotify, destObject as QuestionEntityNotify));
        dtoFillIntoActions.Add(666, (srcObject, destObject) => instance.RankArenaDtoConverter_fillInto(srcObject as AppDto.RankArenaDto, destObject as RankArenaDto));
        dtoFillIntoActions.Add(667, (srcObject, destObject) => instance.RankTowerDtoConverter_fillInto(srcObject as AppDto.RankTowerDto, destObject as RankTowerDto));
        dtoFillIntoActions.Add(668, (srcObject, destObject) => instance.GuideConverter_fillInto(srcObject as AppDto.Guide, destObject as Guide));
        dtoFillIntoActions.Add(669, (srcObject, destObject) => instance.SmartGuideConverter_fillInto(srcObject as AppDto.SmartGuide, destObject as SmartGuide));
        dtoFillIntoActions.Add(670, (srcObject, destObject) => instance.GuideInfoNotifyConverter_fillInto(srcObject as AppDto.GuideInfoNotify, destObject as GuideInfoNotify));
        dtoFillIntoActions.Add(671, (srcObject, destObject) => instance.GuideListDtoConverter_fillInto(srcObject as AppDto.GuideListDto, destObject as GuideListDto));
        dtoFillIntoActions.Add(672, (srcObject, destObject) => instance.AfterAnswerNotifyConverter_fillInto(srcObject as AppDto.AfterAnswerNotify, destObject as AfterAnswerNotify));
        dtoFillIntoActions.Add(673, (srcObject, destObject) => instance.PlayerNameNotifyConverter_fillInto(srcObject as AppDto.PlayerNameNotify, destObject as PlayerNameNotify));
        dtoFillIntoActions.Add(674, (srcObject, destObject) => instance.GuideGainWayConverter_fillInto(srcObject as AppDto.GuideGainWay, destObject as GuideGainWay));
        dtoFillIntoActions.Add(675, (srcObject, destObject) => instance.RankCrewDtoConverter_fillInto(srcObject as AppDto.RankCrewDto, destObject as RankCrewDto));
        dtoFillIntoActions.Add(676, (srcObject, destObject) => instance.ShopGoodsListDtoConverter_fillInto(srcObject as AppDto.ShopGoodsListDto, destObject as ShopGoodsListDto));
        dtoFillIntoActions.Add(677, (srcObject, destObject) => instance.ShowMonsterItemSubmitDtoConverter_fillInto(srcObject as AppDto.ShowMonsterItemSubmitDto, destObject as ShowMonsterItemSubmitDto));
        dtoFillIntoActions.Add(678, (srcObject, destObject) => instance.RankFlowersDtoConverter_fillInto(srcObject as AppDto.RankFlowersDto, destObject as RankFlowersDto));
        dtoFillIntoActions.Add(679, (srcObject, destObject) => instance.PropsParam_16Converter_fillInto(srcObject as AppDto.PropsParam_16, destObject as PropsParam_16));
        dtoFillIntoActions.Add(680, (srcObject, destObject) => instance.FriendFlowersNotifyConverter_fillInto(srcObject as AppDto.FriendFlowersNotify, destObject as FriendFlowersNotify));
        dtoFillIntoActions.Add(681, (srcObject, destObject) => instance.GuildApprovalDtoConverter_fillInto(srcObject as AppDto.GuildApprovalDto, destObject as GuildApprovalDto));
        dtoFillIntoActions.Add(682, (srcObject, destObject) => instance.GuildApprovalListDtoConverter_fillInto(srcObject as AppDto.GuildApprovalListDto, destObject as GuildApprovalListDto));
        dtoFillIntoActions.Add(683, (srcObject, destObject) => instance.GuildBaseInfoDtoConverter_fillInto(srcObject as AppDto.GuildBaseInfoDto, destObject as GuildBaseInfoDto));
        dtoFillIntoActions.Add(684, (srcObject, destObject) => instance.GuildBaseInfoListDtoConverter_fillInto(srcObject as AppDto.GuildBaseInfoListDto, destObject as GuildBaseInfoListDto));
        dtoFillIntoActions.Add(685, (srcObject, destObject) => instance.GuildBuildingDtoConverter_fillInto(srcObject as AppDto.GuildBuildingDto, destObject as GuildBuildingDto));
        dtoFillIntoActions.Add(686, (srcObject, destObject) => instance.GuildDetailInfoDtoConverter_fillInto(srcObject as AppDto.GuildDetailInfoDto, destObject as GuildDetailInfoDto));
        dtoFillIntoActions.Add(687, (srcObject, destObject) => instance.GuildInvitationNotifyConverter_fillInto(srcObject as AppDto.GuildInvitationNotify, destObject as GuildInvitationNotify));
        dtoFillIntoActions.Add(688, (srcObject, destObject) => instance.GuildMemberDtoConverter_fillInto(srcObject as AppDto.GuildMemberDto, destObject as GuildMemberDto));
        dtoFillIntoActions.Add(689, (srcObject, destObject) => instance.GuildWealthDtoConverter_fillInto(srcObject as AppDto.GuildWealthDto, destObject as GuildWealthDto));
        dtoFillIntoActions.Add(690, (srcObject, destObject) => instance.ActiveRewardConverter_fillInto(srcObject as AppDto.ActiveReward, destObject as ActiveReward));
        dtoFillIntoActions.Add(691, (srcObject, destObject) => instance.ScheduleActivityConverter_fillInto(srcObject as AppDto.ScheduleActivity, destObject as ScheduleActivity));
        dtoFillIntoActions.Add(692, (srcObject, destObject) => instance.WeekCalendarConverter_fillInto(srcObject as AppDto.WeekCalendar, destObject as WeekCalendar));
        dtoFillIntoActions.Add(693, (srcObject, destObject) => instance.ActiveDtoConverter_fillInto(srcObject as AppDto.ActiveDto, destObject as ActiveDto));
        dtoFillIntoActions.Add(694, (srcObject, destObject) => instance.ActiveNotifyConverter_fillInto(srcObject as AppDto.ActiveNotify, destObject as ActiveNotify));
        dtoFillIntoActions.Add(695, (srcObject, destObject) => instance.ScheduleDtoConverter_fillInto(srcObject as AppDto.ScheduleDto, destObject as ScheduleDto));
        dtoFillIntoActions.Add(696, (srcObject, destObject) => instance.DelegateMissionDurationConverter_fillInto(srcObject as AppDto.DelegateMissionDuration, destObject as DelegateMissionDuration));
        dtoFillIntoActions.Add(697, (srcObject, destObject) => instance.StallBuyDtoConverter_fillInto(srcObject as AppDto.StallBuyDto, destObject as StallBuyDto));
        dtoFillIntoActions.Add(698, (srcObject, destObject) => instance.GuildCountDtoConverter_fillInto(srcObject as AppDto.GuildCountDto, destObject as GuildCountDto));
        dtoFillIntoActions.Add(699, (srcObject, destObject) => instance.RefuseGuildInvitationConverter_fillInto(srcObject as AppDto.RefuseGuildInvitation, destObject as RefuseGuildInvitation));
        dtoFillIntoActions.Add(700, (srcObject, destObject) => instance.PlayerCopyMissionDtoConverter_fillInto(srcObject as AppDto.PlayerCopyMissionDto, destObject as PlayerCopyMissionDto));
        dtoFillIntoActions.Add(701, (srcObject, destObject) => instance.CopyConverter_fillInto(srcObject as AppDto.Copy, destObject as Copy));
        dtoFillIntoActions.Add(702, (srcObject, destObject) => instance.GuildBarPubConverter_fillInto(srcObject as AppDto.GuildBarPub, destObject as GuildBarPub));
        dtoFillIntoActions.Add(703, (srcObject, destObject) => instance.GuildGuardTowerConverter_fillInto(srcObject as AppDto.GuildGuardTower, destObject as GuildGuardTower));
        dtoFillIntoActions.Add(704, (srcObject, destObject) => instance.GuildWorkshopConverter_fillInto(srcObject as AppDto.GuildWorkshop, destObject as GuildWorkshop));
        dtoFillIntoActions.Add(705, (srcObject, destObject) => instance.GuildMemberListDtoConverter_fillInto(srcObject as AppDto.GuildMemberListDto, destObject as GuildMemberListDto));
        dtoFillIntoActions.Add(706, (srcObject, destObject) => instance.ActivityConfigConverter_fillInto(srcObject as AppDto.ActivityConfig, destObject as ActivityConfig));
        dtoFillIntoActions.Add(707, (srcObject, destObject) => instance.KungfuBeginNotifyConverter_fillInto(srcObject as AppDto.KungfuBeginNotify, destObject as KungfuBeginNotify));
        dtoFillIntoActions.Add(708, (srcObject, destObject) => instance.SceneNpcStateDtoConverter_fillInto(srcObject as AppDto.SceneNpcStateDto, destObject as SceneNpcStateDto));
        dtoFillIntoActions.Add(710, (srcObject, destObject) => instance.TeamChallengeConfirmNotifyConverter_fillInto(srcObject as AppDto.TeamChallengeConfirmNotify, destObject as TeamChallengeConfirmNotify));
        dtoFillIntoActions.Add(711, (srcObject, destObject) => instance.TeamMemberConfirmNotifyConverter_fillInto(srcObject as AppDto.TeamMemberConfirmNotify, destObject as TeamMemberConfirmNotify));
        dtoFillIntoActions.Add(712, (srcObject, destObject) => instance.TradeBuyPriceDtoConverter_fillInto(srcObject as AppDto.TradeBuyPriceDto, destObject as TradeBuyPriceDto));
        dtoFillIntoActions.Add(713, (srcObject, destObject) => instance.PlayerGuildInfoDtoConverter_fillInto(srcObject as AppDto.PlayerGuildInfoDto, destObject as PlayerGuildInfoDto));
        dtoFillIntoActions.Add(715, (srcObject, destObject) => instance.PaySuccessNotifyConverter_fillInto(srcObject as AppDto.PaySuccessNotify, destObject as PaySuccessNotify));
        dtoFillIntoActions.Add(716, (srcObject, destObject) => instance.BattleReadyNotifyConverter_fillInto(srcObject as AppDto.BattleReadyNotify, destObject as BattleReadyNotify));
        dtoFillIntoActions.Add(717, (srcObject, destObject) => instance.BattleReadyPlayerInfoDtoConverter_fillInto(srcObject as AppDto.BattleReadyPlayerInfoDto, destObject as BattleReadyPlayerInfoDto));
        dtoFillIntoActions.Add(718, (srcObject, destObject) => instance.CopySyncConfirmNotifyConverter_fillInto(srcObject as AppDto.CopySyncConfirmNotify, destObject as CopySyncConfirmNotify));
        dtoFillIntoActions.Add(719, (srcObject, destObject) => instance.RankKungfuDtoConverter_fillInto(srcObject as AppDto.RankKungfuDto, destObject as RankKungfuDto));
        dtoFillIntoActions.Add(720, (srcObject, destObject) => instance.NpcPeriodConverter_fillInto(srcObject as AppDto.NpcPeriod, destObject as NpcPeriod));
        dtoFillIntoActions.Add(721, (srcObject, destObject) => instance.KungfuInfoDtoConverter_fillInto(srcObject as AppDto.KungfuInfoDto, destObject as KungfuInfoDto));
        dtoFillIntoActions.Add(722, (srcObject, destObject) => instance.KungfuRewardConverter_fillInto(srcObject as AppDto.KungfuReward, destObject as KungfuReward));
        dtoFillIntoActions.Add(723, (srcObject, destObject) => instance.RedPointConverter_fillInto(srcObject as AppDto.RedPoint, destObject as RedPoint));
        dtoFillIntoActions.Add(724, (srcObject, destObject) => instance.ShowRedPointTypeDtoConverter_fillInto(srcObject as AppDto.ShowRedPointTypeDto, destObject as ShowRedPointTypeDto));
        dtoFillIntoActions.Add(725, (srcObject, destObject) => instance.ShowRedPointTypeListDtoConverter_fillInto(srcObject as AppDto.ShowRedPointTypeListDto, destObject as ShowRedPointTypeListDto));
        dtoFillIntoActions.Add(727, (srcObject, destObject) => instance.KungfuActivityInfoConverter_fillInto(srcObject as AppDto.KungfuActivityInfo, destObject as KungfuActivityInfo));
        dtoFillIntoActions.Add(728, (srcObject, destObject) => instance.AcceptionCondtion_3Converter_fillInto(srcObject as AppDto.AcceptionCondtion_3, destObject as AcceptionCondtion_3));
        dtoFillIntoActions.Add(729, (srcObject, destObject) => instance.OnUpgradeBuildingDtoConverter_fillInto(srcObject as AppDto.OnUpgradeBuildingDto, destObject as OnUpgradeBuildingDto));
        dtoFillIntoActions.Add(730, (srcObject, destObject) => instance.MarqueeNoticeNotifyConverter_fillInto(srcObject as AppDto.MarqueeNoticeNotify, destObject as MarqueeNoticeNotify));
        dtoFillIntoActions.Add(731, (srcObject, destObject) => instance.HighTreasueyChangeNotifyConverter_fillInto(srcObject as AppDto.HighTreasueyChangeNotify, destObject as HighTreasueyChangeNotify));
        dtoFillIntoActions.Add(732, (srcObject, destObject) => instance.HighTreasuryNotifyConverter_fillInto(srcObject as AppDto.HighTreasuryNotify, destObject as HighTreasuryNotify));
        dtoFillIntoActions.Add(733, (srcObject, destObject) => instance.CopyMissionConfigConverter_fillInto(srcObject as AppDto.CopyMissionConfig, destObject as CopyMissionConfig));
    }

    public static void fillFrom(int message_type_id, System.Object destObject,System.Object srcObject){
		try {
			instance.dtoFillFromActions[message_type_id](destObject, srcObject);
		} catch(Exception ex){
			UnityEngine.Debug.LogException(ex);
		}
    }

    public static void fillInto(int message_type_id, System.Object srcObject, System.Object destObject) {
		try{
			instance.dtoFillIntoActions[message_type_id](srcObject, destObject);
		} catch(Exception ex){
			UnityEngine.Debug.LogException(ex);
		}
    }
}
}
