if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var DataCache = {
    fullname: "DataCache",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            DataCache._rawBytesDic = null;
            DataCache._staticDataMap = null;
        },
        Setup: function (staticDataBytes){
            UnityEngine.Debug.Log$$Object("Start DataCache Setup");
            DataCache._rawBytesDic = staticDataBytes;
            if (DataCache._staticDataMap == null){
                DataCache._staticDataMap = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Object.ctor);
            }
        },
        getDtoByCls$1: function (T, key){
            if (DataCache._staticDataMap == null)
                return Default(T);
            var type = Typeof(T);
            var result = DataCache.CachedToMap$2(T, DataCache.DataCollection$1.ctor, type, false);
            if (result != null && result.map.ContainsKey(key)){
                return result.map.get_Item$$TKey(key);
            }
            return Default(T);
        },
        getDicByCls$1: function (T){
            if (DataCache._staticDataMap == null)
                return null;
            var type = Typeof(T);
            var result = DataCache.CachedToMap$2(T, DataCache.DataCollection$1.ctor, type, false);
            return result != null ? result.map : null;
        },
        getArrayByCls$1: function (T){
            if (DataCache._staticDataMap == null)
                return null;
            var type = Typeof(T);
            var result = DataCache.CachedToMap$2(T, DataCache.DataCollection$1.ctor, type, false);
            return result != null ? result.list : null;
        },
        getSimpleList$1: function (T, type){
            if (DataCache._staticDataMap == null)
                return null;
            var result = DataCache.CachedToMap$2(T, System.Collections.Generic.List$1.ctor, type, true);
            return result;
        },
        CachedToMap$2: function (T, TResult, type, simpleDataType){
            var ba;
            if ((function (){
                var $1 = $Ref(null, ba);
                var $res = DataCache._rawBytesDic.TryGetValue(type, $1);
                ba = $1.Value;
                return $res;
            }).call(this)){
                if (ba != null && ba.get_Length() > 0){
                    var dataList = JsHelper.ParseJsz(AppDto.DataList.ctor, ba, true);
                    if (dataList != null){
                        if (simpleDataType){
                            var list = new System.Collections.Generic.List$1.ctor$$Int32(T, dataList.items.get_Count());
                            for (var i = 0,count = dataList.items.get_Count(); i < count; i++){
                                var val = Cast(dataList.items.get_Item$$Int32(i), T);
                                list.Add(val);
                            }
                            DataCache._staticDataMap.set_Item$$TKey(type, list);
                        }
                        else {
                            var collection = new DataCache.DataCollection$1.ctor(T, dataList.items.get_Count());
                            for (var i = 0,count = dataList.items.get_Count(); i < count; i++){
                                var obj = Cast(dataList.items.get_Item$$Int32(i), T);
                                var key = JsHelper.GetDataObjectKey(obj);
                                collection.AddMap(key, obj);
                                collection.AddList(obj);
                            }
                            DataCache._staticDataMap.set_Item$$TKey(type, collection);
                        }
                    }
                }
                DataCache._rawBytesDic.Remove(type);
            }
            return DataCache._staticDataMap.ContainsKey(type) ? Cast(DataCache._staticDataMap.get_Item$$TKey(type), TResult) : Default(TResult);
        },
        Dispose: function (){
            DataCache._rawBytesDic = null;
            DataCache._staticDataMap = null;
        },
        GetStaticConfigValue: function (key, defaultValue){
            var data = DataCache.getDtoByCls$1(AppDto.StaticConfig.ctor, key);
            return data != null && !System.String.IsNullOrEmpty(data.value) ? System.Int32.Parse$$String(data.value) : defaultValue;
        },
        GetStaticConfigValues: function (key, defaultValue){
            var data = DataCache.getDtoByCls$1(AppDto.StaticConfig.ctor, key);
            return data != null ? data.value : defaultValue;
        },
        GetStaticConfigValuef: function (key, defaultValue){
            var data = DataCache.getDtoByCls$1(AppDto.StaticConfig.ctor, key);
            return data != null ? System.Single.Parse$$String(data.value) : defaultValue;
        },
        GetStaticStringValue: function (key, defaultValue){
            var data = DataCache.getDtoByCls$1(AppDto.StaticString.ctor, key);
            return data != null ? data.message : defaultValue;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DataCache);
var AppDto$ActionPointNotifyDto = {
    fullname: "AppDto.ActionPointNotifyDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.id = 0;
            this.actionPoint = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$ActionPointNotifyDto);
var AppDto$ActionPointSpeedNotifyDto = {
    fullname: "AppDto.ActionPointSpeedNotifyDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.playerId = 0;
            this.time = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$ActionPointSpeedNotifyDto);
var AppDto$ActionQueueAddNotifyDto = {
    fullname: "AppDto.ActionQueueAddNotifyDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.id = 0;
            this.name = null;
            this.time = 0;
            this.durationTime = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$ActionQueueAddNotifyDto);
var AppDto$ActionQueueRemoveNotifyDto = {
    fullname: "AppDto.ActionQueueRemoveNotifyDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.id = 0;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$ActionQueueRemoveNotifyDto);
var AppDto$AfterLoginDto = {
    fullname: "AppDto.AfterLoginDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.sceneId = 0;
            this.x = 0;
            this.z = 0;
            this.charactor = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AfterLoginDto);
var AppDto$AppErrorCodes = {
    fullname: "AppDto.AppErrorCodes",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.AppErrorCodes.DATA_ERROR = 200;
            AppDto.AppErrorCodes.DATA_VERIFY_FAIL = 201;
            AppDto.AppErrorCodes.GM_COMMAND_NOT_SUPPORT = 202;
            AppDto.AppErrorCodes.ONLINE_IS_FULL = 203;
            AppDto.AppErrorCodes.QUEUE_IS_FULL = 204;
            AppDto.AppErrorCodes.NO_SUCH_SEX_TYPE = 205;
            AppDto.AppErrorCodes.FUNCTION_TEMP_CLOSE = 206;
            AppDto.AppErrorCodes.FUNCTION_OPEN_GRADE_LIMIT = 207;
            AppDto.AppErrorCodes.FUNCTION_OPEN_SERVER_GRADE_LIMIT = 208;
            AppDto.AppErrorCodes.FUNCTION_OPEN_NOT_FIND = 209;
            AppDto.AppErrorCodes.FUNCTION_OPEN_OTHER_GRADE_NOT_ENOUGH = 210;
            AppDto.AppErrorCodes.SHAREPLAYER_NOT_FOUND = 211;
            AppDto.AppErrorCodes.SCENE_ENTER_BY_NPC_ONLY = 212;
            AppDto.AppErrorCodes.DATA_NOT_FOUND = 213;
            AppDto.AppErrorCodes.CANNOT_JUMP_SCENE_IN_BATTLE = 214;
            AppDto.AppErrorCodes.REPORT_PLAYER_GRADE_NEED = 215;
            AppDto.AppErrorCodes.REPORT_DAILY_MAX = 216;
            AppDto.AppErrorCodes.REPORT_NOT_SUPPORT = 217;
            AppDto.AppErrorCodes.ACTIVE_CLOSED = 230;
            AppDto.AppErrorCodes.ACTIVITY_END = 231;
            AppDto.AppErrorCodes.ACTIVITY_END_MAIL_REWARD = 232;
            AppDto.AppErrorCodes.WEALTH_NEGATIVE = 300;
            AppDto.AppErrorCodes.INGOT_NOT_ENOUGH = 301;
            AppDto.AppErrorCodes.COPPER_NOT_ENOUGH = 302;
            AppDto.AppErrorCodes.SILVER_NOT_ENOUGH = 303;
            AppDto.AppErrorCodes.SCORE_NOT_ENOUGH = 304;
            AppDto.AppErrorCodes.CONTRIBUTE_NOT_ENOUGH = 305;
            AppDto.AppErrorCodes.VIGOUR_NOT_ENOUGH = 306;
            AppDto.AppErrorCodes.NIMBUS_NOT_ENOUGH = 307;
            AppDto.AppErrorCodes.SATIATION_NOT_ENOUGH = 308;
            AppDto.AppErrorCodes.SCENARIO_POINT_NOT_ENOUGH = 309;
            AppDto.AppErrorCodes.FASHION_DRESS_PIECE_NOT_ENOUGH = 310;
            AppDto.AppErrorCodes.PET_SOUL_NOT_ENOUGH = 311;
            AppDto.AppErrorCodes.WEALTH_LIMIT = 319;
            AppDto.AppErrorCodes.OPEN_DOUBLE_EXP_POINT_UPPER = 320;
            AppDto.AppErrorCodes.OPEN_DOUBLE_EXP_POINT_FREEZE = 321;
            AppDto.AppErrorCodes.OUT_OF_MAX_VIGOUR = 322;
            AppDto.AppErrorCodes.EXP_CURRENCY_NOT_ENOUGH = 323;
            AppDto.AppErrorCodes.AUCTION_WEALTH_NOT_ENOUGH = 324;
            AppDto.AppErrorCodes.NO_SCENE_ID = 400;
            AppDto.AppErrorCodes.NO_SCENE_TELEPORT_ID = 403;
            AppDto.AppErrorCodes.SCENE_TELEPORT_NEED_GRADE = 404;
            AppDto.AppErrorCodes.CHARACTOR_TYPE_MAIN_INVALID = 405;
            AppDto.AppErrorCodes.PLAYER_NOT_ONLINE = 406;
            AppDto.AppErrorCodes.CHARACTOR_TYPE_PET_INVALID = 407;
            AppDto.AppErrorCodes.CHARACTOR_TYPE_PET_NOT_DROP = 408;
            AppDto.AppErrorCodes.CHARACTOR_TYPE_PET_IN_BATTLE_NOT_DROP = 409;
            AppDto.AppErrorCodes.CHARACTOR_TYPE_PET_IN_BATTLE_NOT_MOVE = 410;
            AppDto.AppErrorCodes.PLAYER_NOT_EXIST = 411;
            AppDto.AppErrorCodes.NPC_MONSTER_DISAPPEAR = 420;
            AppDto.AppErrorCodes.NPC_BUSY_NOW = 421;
            AppDto.AppErrorCodes.SCENE_FORBID_FLY = 422;
            AppDto.AppErrorCodes.ENTER_NEED_JOIN_GUILD = 423;
            AppDto.AppErrorCodes.NPC_MONSTER_MEMBER_FORBID_BATTLE = 424;
            AppDto.AppErrorCodes.SCENE_MONSTER_PLOUGH_PLAYER_MIN_SIZE = 430;
            AppDto.AppErrorCodes.SCENE_MONSTER_BATTLE_MIN_GRADE = 431;
            AppDto.AppErrorCodes.SCENE_MONSTER_BATTLE_ARRIVE_MAX_COUNT = 432;
            AppDto.AppErrorCodes.SCENE_BABY_MONSTER_ADOPT = 433;
            AppDto.AppErrorCodes.SCENE_MONSTER_ROBBER_PLAYER_MIN_SIZE = 434;
            AppDto.AppErrorCodes.SCENE_MONSTER_ROBBER_IS_CLOSE = 435;
            AppDto.AppErrorCodes.SCENE_MONSTER_STAR_PLAYER_MIN_SIZE = 436;
            AppDto.AppErrorCodes.SCENE_MONSTER_STAR_LEADER_PLAYER_MIN_GRADE = 437;
            AppDto.AppErrorCodes.SCENE_MONSTER_STAR_PLAYER_MIN_GRADE_COUNT = 438;
            AppDto.AppErrorCodes.SCENE_MONSTER_KING_PLAYER_MIN_SIZE = 439;
            AppDto.AppErrorCodes.NPC_BOX_DISAPPEAR = 440;
            AppDto.AppErrorCodes.NPC_GOLD_BOX_DISAPPEAR = 441;
            AppDto.AppErrorCodes.OPEN_GOLD_BOX_COUNT_NOT_ENOUGH = 442;
            AppDto.AppErrorCodes.NPC_GOLD_BOX_PICK_BY_OTHER = 443;
            AppDto.AppErrorCodes.NPC_GOLD_BOX_PICKUP_LONG_DISTANCE = 444;
            AppDto.AppErrorCodes.NPC_BOX_PICKING = 445;
            AppDto.AppErrorCodes.ITEM_NOT_ENOUGH = 500;
            AppDto.AppErrorCodes.ITEM_GRADE_NOT_ENOUGH = 501;
            AppDto.AppErrorCodes.ITEM_GRADE_OVER = 502;
            AppDto.AppErrorCodes.PACK_ITEM_ID_NOT_EXIST = 503;
            AppDto.AppErrorCodes.PACK_ITEM_APPLY_EXPRIED = 504;
            AppDto.AppErrorCodes.PLAYER_APTITUDE_FREE_RESET_EXIST = 505;
            AppDto.AppErrorCodes.REFINE_UNABLE = 507;
            AppDto.AppErrorCodes.ITEM_RESUME_UNABLE = 508;
            AppDto.AppErrorCodes.SATIATION_UPPER = 509;
            AppDto.AppErrorCodes.CANNOT_USE_IN_BATTLE = 510;
            AppDto.AppErrorCodes.USER_TYPE_NOT_SUIT = 511;
            AppDto.AppErrorCodes.ITEM_NOT_SCENE_RANGE = 512;
            AppDto.AppErrorCodes.ITEM_APPLY_MAPSURFACE_ERROR = 513;
            AppDto.AppErrorCodes.ITEM_APPLY_SCENE_ERROR = 514;
            AppDto.AppErrorCodes.LEVEL_NOT_ENOUGH_EQUIP = 515;
            AppDto.AppErrorCodes.REFINE_EXPAND_COUNT_OUT = 516;
            AppDto.AppErrorCodes.REFINE_EXPAND_NOT_EXIST = 517;
            AppDto.AppErrorCodes.REFINE_NOT_FINISH = 518;
            AppDto.AppErrorCodes.REFINE_USE = 519;
            AppDto.AppErrorCodes.SAME_MODEL_SCALE_STATE = 520;
            AppDto.AppErrorCodes.TRANSFORM_CARD_SKILL_LEVEL_NEED = 521;
            AppDto.AppErrorCodes.ITEM_NOT_ADD_SPELL_EXP = 522;
            AppDto.AppErrorCodes.SPELL_ID_NOT_EXIST = 523;
            AppDto.AppErrorCodes.NOT_JEWEL_BAG = 524;
            AppDto.AppErrorCodes.JEWEL_BAG_NOT_CONTAIN = 525;
            AppDto.AppErrorCodes.JEWEL_NOT_EXIST = 526;
            AppDto.AppErrorCodes.PROPS_FORBIDDEN_IN_FIGHTING = 527;
            AppDto.AppErrorCodes.PACK_FULL = 528;
            AppDto.AppErrorCodes.PIECE_PROPS_NOT_ENOUGH = 529;
            AppDto.AppErrorCodes.PIECE_PROPS_BACKPACK_NOT_ENOUGH = 530;
            AppDto.AppErrorCodes.USE_BATTLE_TYPE_NOT_SUIT = 531;
            AppDto.AppErrorCodes.CANNOT_USE_SELF_LUCKY_KONT = 532;
            AppDto.AppErrorCodes.CAN_USE_LUCKY_KONT_ONLY_ONE = 533;
            AppDto.AppErrorCodes.MOONLIGHT_BOX_LES_MIN_USER_GRADE = 534;
            AppDto.AppErrorCodes.MOONLIGHT_BOX_OVER_MAX_USER_GRADE = 535;
            AppDto.AppErrorCodes.MOONLIGHT_BOX_TODAY_USED = 536;
            AppDto.AppErrorCodes.MOONLIGHT_BOX_OVER_MAX_TIMES = 537;
            AppDto.AppErrorCodes.EMBED_COUNT_CHANGE = 538;
            AppDto.AppErrorCodes.HAVE_NOT_EMBED_CHANGE = 539;
            AppDto.AppErrorCodes.STATE_BAR_NOT_EXSIT = 540;
            AppDto.AppErrorCodes.REFINE_MATERIAL_NOT_SUIT = 541;
            AppDto.AppErrorCodes.SHOP_ITEM_NOT_FOUND = 600;
            AppDto.AppErrorCodes.SHOP_ITEM_NOT_SALE = 601;
            AppDto.AppErrorCodes.SHOP_ITEM_PLAYER_GRADE_NOT_ENOUGH = 602;
            AppDto.AppErrorCodes.SHOP_ITEM_BUY_RESTRICT = 603;
            AppDto.AppErrorCodes.SHOP_ITEM_BUY_SETUP_LIMIT = 604;
            AppDto.AppErrorCodes.SHOP_ITEM_PLAYER_GRADE_OVER = 605;
            AppDto.AppErrorCodes.LOW_STOCKS = 606;
            AppDto.AppErrorCodes.STALL_ITEM_UNUP = 607;
            AppDto.AppErrorCodes.STALL_ITEM_BUY_EXPIRED = 608;
            AppDto.AppErrorCodes.TRADE_ITEM_BIND_NOT_SELL = 609;
            AppDto.AppErrorCodes.TRADE_ITEM_STOP_SELL = 610;
            AppDto.AppErrorCodes.TRADE_ITEM_SOLD_OUT = 611;
            AppDto.AppErrorCodes.TRADE_ITEM_NOT_FOUND = 612;
            AppDto.AppErrorCodes.STALL_CAPABILITY_UPPER = 613;
            AppDto.AppErrorCodes.STALL_ITEM_UP_COUNT_NEGATIVE = 614;
            AppDto.AppErrorCodes.STALL_ITEM_UP_BIND = 615;
            AppDto.AppErrorCodes.STALL_ITEM_UP_UNABLE = 616;
            AppDto.AppErrorCodes.STALL_CAPABILITY_NOT_ENOUGH = 617;
            AppDto.AppErrorCodes.STALL_ITEM_NOT_FOUND = 618;
            AppDto.AppErrorCodes.STALL_ITEM_NO_DATA = 619;
            AppDto.AppErrorCodes.STALL_ITEM_BUY_NOT_FOUND = 620;
            AppDto.AppErrorCodes.STALL_ITEM_SOLD_OUT = 621;
            AppDto.AppErrorCodes.STALL_ITEM_PRICE = 622;
            AppDto.AppErrorCodes.TRADE_PET_ITEM_STOP_SELL = 623;
            AppDto.AppErrorCodes.TRADE_PET_ITEM_SOLD_OUT = 624;
            AppDto.AppErrorCodes.TRADE_PET_ITEM_NOT_FOUND = 625;
            AppDto.AppErrorCodes.TRADE_PET_DAILY_SELL_OVER = 626;
            AppDto.AppErrorCodes.CHARACTOR_TYPE_PET_IN_BATTLE_NOT_SELL = 627;
            AppDto.AppErrorCodes.TRADE_PET_SELL_OVER = 628;
            AppDto.AppErrorCodes.TRADE_PET_NOT_ALLOWED = 629;
            AppDto.AppErrorCodes.AUCTION_DATA_ERROR = 630;
            AppDto.AppErrorCodes.AUCTION_DATA_CHANGE_TRADE_FAIL = 631;
            AppDto.AppErrorCodes.AUCTION_CAPABILITY_NOT_ENOUGH = 632;
            AppDto.AppErrorCodes.AUCTION_CAPABILITY_UPPER = 633;
            AppDto.AppErrorCodes.AUCTION_ITEM_UP_COUNT_NEGATIVE = 634;
            AppDto.AppErrorCodes.AUCTION_ITEM_UP_BIND = 635;
            AppDto.AppErrorCodes.AUCTION_ITEM_UP_UNABLE = 636;
            AppDto.AppErrorCodes.AUCTION_PET_UP_UNABLE = 637;
            AppDto.AppErrorCodes.AUCTION_ITEM_SELF_UP_CANNOT_BID = 638;
            AppDto.AppErrorCodes.AUCTION_ITEM_NO_DATA = 639;
            AppDto.AppErrorCodes.AUCTION_ITEM_HAS_BID_CANNOT_DOWN = 640;
            AppDto.AppErrorCodes.AUCTION_ITEM_AUCTION_PRICE = 641;
            AppDto.AppErrorCodes.AUCTION_ITEM_FIXED_PRICE = 642;
            AppDto.AppErrorCodes.AUCTION_ITEM_OWNER_ERROR = 643;
            AppDto.AppErrorCodes.AUCTION_ITEM_EXPIRED_ERROR = 644;
            AppDto.AppErrorCodes.STALL_PLAYER_ITEM_BUY_IS_DOWN = 645;
            AppDto.AppErrorCodes.TRADE_NOT_ALLOW = 646;
            AppDto.AppErrorCodes.TRADE_PET_HAS_SOLD = 647;
            AppDto.AppErrorCodes.STALL_ITEM_SOLD_SELL = 648;
            AppDto.AppErrorCodes.AUCTION_BIDDING_SALER_DRAW_ERROR = 649;
            AppDto.AppErrorCodes.AUCTION_BIDDING_SALER_EXTRACT_ERROR = 650;
            AppDto.AppErrorCodes.AUCTION_NOTNEED_BIDDING_ERROR = 651;
            AppDto.AppErrorCodes.AUCTION_CANNOT_OVER_FIXEDPRICE_ERROR = 652;
            AppDto.AppErrorCodes.AUCTION_NOTBIDDEN_SALER_DRAW_ERROR = 653;
            AppDto.AppErrorCodes.AUCTION_DRAW_ERROR = 654;
            AppDto.AppErrorCodes.AUCTION_NO_DRAW_DATA_ERROR = 655;
            AppDto.AppErrorCodes.AUCTION_EXTRACT_ERROR = 656;
            AppDto.AppErrorCodes.AUCTION_BIDDING_BUYER_EXTRACT_ERROR = 657;
            AppDto.AppErrorCodes.AUCTION_BUYER_EXTRACT_ERROR = 658;
            AppDto.AppErrorCodes.AUCTION_UP_DURATION_ERROR = 659;
            AppDto.AppErrorCodes.STALL_ITEM_FREE_DOWN_AFTER_CASH = 660;
            AppDto.AppErrorCodes.AUCTION_ITEM_PUBLICITY_CANNOT_BID = 661;
            AppDto.AppErrorCodes.AUCTION_BIDDING_LESS_LAST_TIME = 662;
            AppDto.AppErrorCodes.AUCTION_BIDDING_LIMIT_ERROR = 663;
            AppDto.AppErrorCodes.AUCTION_ITEM_SALE_IS_CLOSED = 664;
            AppDto.AppErrorCodes.SHOP_BUY_AMOUNT_RESTRICE = 665;
            AppDto.AppErrorCodes.SHOP_AMOUNT_ERR = 666;
            AppDto.AppErrorCodes.TRADE_PET_DAILY_SELL_LIMIT = 667;
            AppDto.AppErrorCodes.AUCTION_ITEM_UP_STALL = 668;
            AppDto.AppErrorCodes.NEED_ACTIVE_BUY_GOOD = 669;
            AppDto.AppErrorCodes.MAIL_ATTACHMENT_NULL = 700;
            AppDto.AppErrorCodes.MAIL_NULL = 701;
            AppDto.AppErrorCodes.MAIL_EXPIRED = 702;
            AppDto.AppErrorCodes.MAIL_GIFT_COUNT_OVER = 703;
            AppDto.AppErrorCodes.MAIL_GIFT_PRICE_OVER = 704;
            AppDto.AppErrorCodes.MAIL_GIFT_SELF = 705;
            AppDto.AppErrorCodes.MAIL_ATTACHMENT_ITEMCOUNT_NOT_ZERO = 706;
            AppDto.AppErrorCodes.MAIL_FASHION_COUNT_OVER = 707;
            AppDto.AppErrorCodes.MAIL_CANDIES_COUNT_MAX = 708;
            AppDto.AppErrorCodes.CHATCHANNEL_NOT_FOUND = 800;
            AppDto.AppErrorCodes.CHATCHANNEL_VIGOUR_NOT_ENOUGH = 801;
            AppDto.AppErrorCodes.CHATCHANNEL_GRADE_NOT_ENOUGH = 802;
            AppDto.AppErrorCodes.CHATCHANNEL_NOT_ALLOWED_TALK = 803;
            AppDto.AppErrorCodes.CHATCHANNEL_INTERVAL_LIMIT = 804;
            AppDto.AppErrorCodes.CHATCHANNEL_EXT_TALK_INVALID = 805;
            AppDto.AppErrorCodes.CHATCHANNEL_NOT_JOINT_NOT_ALLOWED_TALK = 806;
            AppDto.AppErrorCodes.GUILD_BAN_TALK = 807;
            AppDto.AppErrorCodes.CHATCHANNEL_SHAREPLAYER_NOT_FOUND = 808;
            AppDto.AppErrorCodes.CHATCHANNEL_CONTENT_OVER_LENGTH = 809;
            AppDto.AppErrorCodes.CHATCHANNEL_BAN_TALK = 810;
            AppDto.AppErrorCodes.BAN_TIPS = 811;
            AppDto.AppErrorCodes.TARGET_IN_BAN = 812;
            AppDto.AppErrorCodes.CHATCHANNEL_NOT_ALLOWED_VOICE_TALK = 813;
            AppDto.AppErrorCodes.TARGET_IN_BAN_CANNOT_JOIN_TEAM = 814;
            AppDto.AppErrorCodes.THE_LINK_FAILED = 815;
            AppDto.AppErrorCodes.GUILD_UNBAN_TALK = 816;
            AppDto.AppErrorCodes.BARRAGE_CONTENT_NOT_NULL = 817;
            AppDto.AppErrorCodes.BARRAGE_LENGTH_OVER = 818;
            AppDto.AppErrorCodes.BARRAGE_IN_COLDING = 819;
            AppDto.AppErrorCodes.GM_ADD_MISSION_NOT_SUPPORT = 850;
            AppDto.AppErrorCodes.ONCE_MISSION_HAS_ACCEPT = 900;
            AppDto.AppErrorCodes.ONCE_MISSION_HAS_SUBMIT = 901;
            AppDto.AppErrorCodes.MISSION_FINISH_ALL = 902;
            AppDto.AppErrorCodes.MISSION_NOT_FOUND = 903;
            AppDto.AppErrorCodes.PLAYER_MISSION_NO_ACCEPT_NO_SUBMIT = 904;
            AppDto.AppErrorCodes.MISSION_NO_FINISH_NO_SUBMIT = 905;
            AppDto.AppErrorCodes.PLAYER_DAILY_MISSION_HAS_ACCEPT = 906;
            AppDto.AppErrorCodes.PLAYER_DAILY_MISSION_HAS_SUBMIT = 907;
            AppDto.AppErrorCodes.PLAYER_MISSION_HAS_SUBMIT_NO_DROP = 908;
            AppDto.AppErrorCodes.PLAYER_MISSION_NO_ACCEPT_NO_DROP = 909;
            AppDto.AppErrorCodes.MISSION_ACCEPT_GRADE_NOT_ENOUGH = 910;
            AppDto.AppErrorCodes.MISSION_ACCEPT_PREID_NOT_ENOUGH = 911;
            AppDto.AppErrorCodes.PLAYER_FACTION_MISSION_RATE_ERROR = 912;
            AppDto.AppErrorCodes.PLAYER_FACTION_MISSION_HAS_ACCEPT = 913;
            AppDto.AppErrorCodes.PLAYER_FACTION_MISSION_DROP_NOT_ACCEPT = 914;
            AppDto.AppErrorCodes.PLAYER_GHOST_MISSION_HAS_ACCEPT = 915;
            AppDto.AppErrorCodes.PLAYER_MISSION_MUST_LEADER_ACCEPT = 916;
            AppDto.AppErrorCodes.PLAYER_MISSION_MIN_GRADE_ACCEPT = 917;
            AppDto.AppErrorCodes.PLAYER_MISSION_MIN_SIZE_ACCEPT = 918;
            AppDto.AppErrorCodes.PLAYER_GHOST_MISSION_LEADER_OVER_LIMIT_ACCEPT = 919;
            AppDto.AppErrorCodes.PLAYER_GHOST_MISSION_MUST_LEADER_SUBMIT = 920;
            AppDto.AppErrorCodes.PLAYER_MISSION_CANNOT_DROPABLE = 921;
            AppDto.AppErrorCodes.PLAYER_TREASURY_MISSION_CONFIG_ERROR = 922;
            AppDto.AppErrorCodes.PLAYER_TREASURY_MISSION_DROP_NOT_ACCEPT = 923;
            AppDto.AppErrorCodes.PLAYER_TREASURY_MISSION_HAS_ACCEPT = 924;
            AppDto.AppErrorCodes.PLAYER_TREASURY_MISSION_OVER_LIMIT_ACCEPT = 925;
            AppDto.AppErrorCodes.PLAYER_GHOST_MISSION_MUST_LEADER_DROP = 926;
            AppDto.AppErrorCodes.PLAYER_APPLYITEM_MISSION_MAPSURFACE_ERROR = 927;
            AppDto.AppErrorCodes.PLAYER_APPLYITEM_MISSION_SCENE_ERROR = 928;
            AppDto.AppErrorCodes.MISSION_STATIC_DATA_ID_NOT_FOUND = 929;
            AppDto.AppErrorCodes.PLAYER_MISSION_SCENE_ERROR = 930;
            AppDto.AppErrorCodes.PLAYER_MISSION_SCENE_LOAD_ERROR = 931;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_MIN_GRADE_ACCEPT = 932;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_FINISH_BOX_SIZE_CAN_OPEN_HELP = 933;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_NOT_ACCEPT = 934;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_FINISHED = 935;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_REWARDED = 936;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_BOX_CLOSE = 937;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_BOX_CLOSE_BYFRIEND = 938;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_PROGRESS = 939;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_BOX_NOT_FOUND = 940;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_BOX_NOT_SEND_HELP = 941;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_TODAY_FINISHED = 942;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_GUILD_NOT_JOIN_YET = 943;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_SELECT_FRIENTS_FOR_HELP = 944;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_LIMIT_FRIENTS_FOR_HELP = 945;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_FRIENT_HAS_SEND_FOR_HELP = 946;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_HAS_SEND_FOR_HELP = 947;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_HAS_SEND_GUILD_HELP = 948;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_HAS_SEND_FRIEND_HELP = 949;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_SEND_HELP_TO_LIMIT = 950;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_NOT_SAME_GUILD = 951;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_NOT_SENDTO_FRIEND = 952;
            AppDto.AppErrorCodes.PLAYER_SILKROAD_MISSION_HELP_OTHER_TO_LIMIT = 953;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_HAS_ACCEPT = 954;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_COPPER_NOT_ENOUGH = 955;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_CONFIG_ERROR = 956;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_NOT_DROP_DATA = 957;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_WEEKLY_FULL = 958;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_SKIPBATTLE_ERROR = 959;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_WEEKLY_DROP = 960;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_GUILD_NOT_JOIN_YET = 961;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_GUILD_NOT_BATTLE_YET = 962;
            AppDto.AppErrorCodes.PLAYER_CHAIN_MISSION_GUILD_NOT_LEADER_YET = 963;
            AppDto.AppErrorCodes.GUILD_RENAME_NEED_BOSS = 964;
            AppDto.AppErrorCodes.PLAYER_UPGRADE_SUBMIT_NOT_ENOUGH = 971;
            AppDto.AppErrorCodes.MISSION_SUBMIT_AND_NEED_MUST_THE_SAME = 972;
            AppDto.AppErrorCodes.MISSION_SUBMIT_AND_NEED_AMOUNT_MUST_THE_SAME = 973;
            AppDto.AppErrorCodes.MISSION_SUBMIT_IS_EMPTY = 974;
            AppDto.AppErrorCodes.MISSION_FACTION_TRIAL_NOT_START = 975;
            AppDto.AppErrorCodes.MISSION_FACTION_TRIAL_END = 976;
            AppDto.AppErrorCodes.MISSION_FACTION_TRIAL_TIME_SET_ERROR = 977;
            AppDto.AppErrorCodes.PLAYER_MISSION_OVERTIME = 978;
            AppDto.AppErrorCodes.MISSION_SUBMIT_PET_AND_NEED_AMOUNT_MUST_THE_SAME = 979;
            AppDto.AppErrorCodes.MISSION_GUIDE_NEEDCOUNT_NOT_ENOUGH = 980;
            AppDto.AppErrorCodes.TRIAL_MISSION_GRADE_NOT_ENOUGH = 981;
            AppDto.AppErrorCodes.TRIAL_MISSION_ACTIVE_NOT_ENOUGH = 982;
            AppDto.AppErrorCodes.TRIAL_MISSION_HAS_FINISHED = 983;
            AppDto.AppErrorCodes.TRIAL_MISSION_CANT_INVITE = 984;
            AppDto.AppErrorCodes.TRIAL_MISSION_OVER_TEAM_LIMIT = 985;
            AppDto.AppErrorCodes.TRIAL_MISSION_MEMBER_GRADE_LIMIT = 986;
            AppDto.AppErrorCodes.TRIAL_MISSION_MEMBER_MUST_ONLINE = 987;
            AppDto.AppErrorCodes.TRIAL_MISSION_MEMBER_HAS_FINISHED = 988;
            AppDto.AppErrorCodes.TRIAL_MISSION_MUST_LEADER_INVITE = 989;
            AppDto.AppErrorCodes.TRIAL_MISSION_MEMBER_ACTIVE_LIMIT = 990;
            AppDto.AppErrorCodes.TRIAL_MISSION_MEMBER_PROGRESSING = 991;
            AppDto.AppErrorCodes.MISSION_ACCEPT_GRADE_OVER_MAXSERVERGRADE = 992;
            AppDto.AppErrorCodes.TRIAL_MISSION_MATCHING = 993;
            AppDto.AppErrorCodes.PLOT_NO_PROGRESS = 995;
            AppDto.AppErrorCodes.PLOT_NO_MATCH = 996;
            AppDto.AppErrorCodes.PLAYER_STOP_UPGRADE_DISABLE = 997;
            AppDto.AppErrorCodes.PLAYER_STOP_UPGRADE_OUTOF_SERVER_GRADE = 998;
            AppDto.AppErrorCodes.REWARD_UPGRADE_NOF_FOUND = 1000;
            AppDto.AppErrorCodes.REWARD_UPGRADE_RECEIVED = 1001;
            AppDto.AppErrorCodes.REWARD_UPGRADE_NOT_ENOUGH = 1002;
            AppDto.AppErrorCodes.REWARD_NOVICE_NOF_FOUND = 1020;
            AppDto.AppErrorCodes.REWARD_NOVICE_RECEIVED = 1021;
            AppDto.AppErrorCodes.REWARD_NOVICE_NOT_ENOUGH = 1022;
            AppDto.AppErrorCodes.REWARD_SEVENDAYS_NOF_FOUND = 1040;
            AppDto.AppErrorCodes.REWARD_SEVENDAYS_RECEIVED = 1041;
            AppDto.AppErrorCodes.REWARD_SEVENDAYS_NOT_ENOUGH = 1042;
            AppDto.AppErrorCodes.PLAYER_NO_FIRST_DEPOSIT = 1043;
            AppDto.AppErrorCodes.PLAYER_FIRST_DEPOSIT_RECEIVED = 1044;
            AppDto.AppErrorCodes.REWARD_DEPOSIT_REBATE_NOF_FOUND = 1045;
            AppDto.AppErrorCodes.REWARD_DEPOSIT_REBATE_RECEIVED = 1046;
            AppDto.AppErrorCodes.REWARD_DEPOSIT_REBATE_NOT_ENOUGH = 1047;
            AppDto.AppErrorCodes.DRAW_RECEIVE = 1050;
            AppDto.AppErrorCodes.PLUS_CHECK_IN_ACTIVE_NOT_ENOUGH = 1051;
            AppDto.AppErrorCodes.PLUS_CHECK_IN_ALREADY = 1052;
            AppDto.AppErrorCodes.NOT_IS_FESTIVAL = 1060;
            AppDto.AppErrorCodes.FESTIVAL_REWARD_RECEIVE = 1061;
            AppDto.AppErrorCodes.ACTIVE_REWARD_RECEIVE = 1070;
            AppDto.AppErrorCodes.ACTIVE_REWARD_NOT_EXIST = 1071;
            AppDto.AppErrorCodes.ACTIVE_NOT_ENOUGH = 1072;
            AppDto.AppErrorCodes.GAM_REWARD_NOT_RECEIVE = 1080;
            AppDto.AppErrorCodes.GAM_REWARD_NOT_EXIST = 1081;
            AppDto.AppErrorCodes.GAM_REWARD_RECEIVE = 1082;
            AppDto.AppErrorCodes.REWARD_CHARGE_NO_RIGHT = 1083;
            AppDto.AppErrorCodes.REWARD_CHARGE_NOT_ENOUGH = 1084;
            AppDto.AppErrorCodes.REWARD_CONDITION_LIMIT = 1085;
            AppDto.AppErrorCodes.REWARD_RECEIVED = 1086;
            AppDto.AppErrorCodes.REWARD_RECEIVED_FAILED = 1087;
            AppDto.AppErrorCodes.REWARD_LEVEL_RECEIVED = 1090;
            AppDto.AppErrorCodes.REWARD_LEVEL_NOT_FOUND = 1091;
            AppDto.AppErrorCodes.REWARD_LEVEL_NOT_ENOUGH = 1092;
            AppDto.AppErrorCodes.NO_QUESTION_TIME = 1100;
            AppDto.AppErrorCodes.QUESTION_TIME_EXPIRED = 1101;
            AppDto.AppErrorCodes.QUESTION_TIME_IS_NULL = 1102;
            AppDto.AppErrorCodes.QUESTION_IS_CLOSE = 1103;
            AppDto.AppErrorCodes.QUESTION_HELP_KJ = 1104;
            AppDto.AppErrorCodes.QUESTION_ANSWER = 1105;
            AppDto.AppErrorCodes.QUESTION_HELP_NEED_JION_GUILD = 1106;
            AppDto.AppErrorCodes.QUESTION_HELP_MAX_TIMES = 1107;
            AppDto.AppErrorCodes.QUESTION_HELP_OTHER_NEED_JION_GUILD = 1108;
            AppDto.AppErrorCodes.QUESTION_HELP_OVER = 1109;
            AppDto.AppErrorCodes.QUESTION_HELP_ANSWER_ERROR = 1110;
            AppDto.AppErrorCodes.QUESTION_HELP_ANSWER_ORDER_ERROR = 1111;
            AppDto.AppErrorCodes.QUESTION_HELP_NOT_FOUND = 1112;
            AppDto.AppErrorCodes.QUESTION_ANSWER_DS = 1113;
            AppDto.AppErrorCodes.QUESTION_NOT_ANSWER_DS = 1114;
            AppDto.AppErrorCodes.GROWTH_MISSION_NOT_FOUND = 1120;
            AppDto.AppErrorCodes.GROWTH_BONUS_RECEIVED = 1121;
            AppDto.AppErrorCodes.GROWTH_BONUS_NOT_AVAILABLE = 1122;
            AppDto.AppErrorCodes.ACHIEVEMENT_NO_REWARD = 1200;
            AppDto.AppErrorCodes.ACHIEVEMENT_NO_FINISH = 1201;
            AppDto.AppErrorCodes.ACHIEVEMENT_HAS_REWARD = 1202;
            AppDto.AppErrorCodes.ACHIEVEMENT_STAGE_NOT_EXIST = 1203;
            AppDto.AppErrorCodes.GUILD_TRAINEE_MISSION_HAS_ACCEPT = 1300;
            AppDto.AppErrorCodes.GUILD_TRAINEE_MISSION_REWARD_LIMIT = 1301;
            AppDto.AppErrorCodes.GUILD_TRAINEE_MISSION_POSITION_LIMIT = 1302;
            AppDto.AppErrorCodes.GUILD_TRAINEE_MISSION_MUST_LIMIT = 1303;
            AppDto.AppErrorCodes.GUILD_TRAINEE_MISSION_LAST_POSITION_LIMIT = 1304;
            AppDto.AppErrorCodes.GOOD_MISSION_HAS_ACCEPT = 1350;
            AppDto.AppErrorCodes.GOOD_MISSION_REWARD_LIMIT = 1351;
            AppDto.AppErrorCodes.GOOD_MISSION_DROP_LIMIT = 1352;
            AppDto.AppErrorCodes.GOOD_MISSION_NOT_IN_OPEN_TIME = 1353;
            AppDto.AppErrorCodes.CONSIGNMENT_NOT_FOUND = 1400;
            AppDto.AppErrorCodes.CONSIGNMENT_ORDER_AMOUNT_GREAT_ZERO = 1401;
            AppDto.AppErrorCodes.CONSIGNMENT_OVER_DAILY = 1402;
            AppDto.AppErrorCodes.CONSIGNMENT_OVER_TOTAL = 1403;
            AppDto.AppErrorCodes.CONSIGNMENT_ORDER_NOT_FOUND = 1404;
            AppDto.AppErrorCodes.CONSIGNMENT_ORDER_NOT_ENOUGH = 1405;
            AppDto.AppErrorCodes.CONSIGNMENT_SYSTEM_BUSY = 1406;
            AppDto.AppErrorCodes.CONSIGNMENT_ORDER_EXPIRED = 1407;
            AppDto.AppErrorCodes.MANA_NOT_ENOUGH = 2000;
            AppDto.AppErrorCodes.BATTLE_ID_NOT_FOUND = 2001;
            AppDto.AppErrorCodes.BATTLE_NOT_JOIN = 2002;
            AppDto.AppErrorCodes.BATTLE_COMMAND_ROUND_NO_MATCH = 2003;
            AppDto.AppErrorCodes.BATTLE_OPTIME_EXPIRED = 2004;
            AppDto.AppErrorCodes.BATTLE_COMMAND_ERROR = 2005;
            AppDto.AppErrorCodes.MONSTER_BATTLE_GROUP_NOT_EXIST = 2006;
            AppDto.AppErrorCodes.BATTLE_SKILL_NOT_EXIST = 2007;
            AppDto.AppErrorCodes.BATTLE_SKILL_TRAGET_INVALID = 2008;
            AppDto.AppErrorCodes.BATTLE_SKILL_COMMAND_EXIST = 2009;
            AppDto.AppErrorCodes.BATTLE_SOLDIER_NOT_EXIST = 2010;
            AppDto.AppErrorCodes.TARGET_BAN = 2012;
            AppDto.AppErrorCodes.OUT_OF_USE_ITEM_COUNT = 2013;
            AppDto.AppErrorCodes.SKILL_NOT_ALLOW = 2014;
            AppDto.AppErrorCodes.CANNOT_ORDER = 2015;
            AppDto.AppErrorCodes.BATTLE_WATCH_IN_BATTLE = 2016;
            AppDto.AppErrorCodes.SKILL_FOR_FERE_ONLY = 2017;
            AppDto.AppErrorCodes.CANNOT_RELIVE_TARGET = 2018;
            AppDto.AppErrorCodes.CANNOT_HEAL_TARGET = 2019;
            AppDto.AppErrorCodes.CHALLENE_TIMES_OUT = 2100;
            AppDto.AppErrorCodes.CREW_NOT_ENOUGH_TO_CHALLENGE = 2101;
            AppDto.AppErrorCodes.CREW_NOT_ENOUGH_TO_REVENGE = 2102;
            AppDto.AppErrorCodes.CANNOT_CHALLENGE_WHEN_IN_TEAM = 2103;
            AppDto.AppErrorCodes.IN_TEMP_SCENE_CANNOT_CHALLENGE = 2104;
            AppDto.AppErrorCodes.IN_BATTLE_CANNOT_CHALLENGE = 2105;
            AppDto.AppErrorCodes.CHALLENGE_REFRESH_IN_CD = 2106;
            AppDto.AppErrorCodes.CHALLENGE_BATTLE_BAN_LIMIT = 2107;
            AppDto.AppErrorCodes.PRESET_ONUPGRADE_APTITUDE_POINT_EXCEEDED = 3000;
            AppDto.AppErrorCodes.LEVEL_NOT_ALLOW_DISPOSABLE_APTITUDE = 3001;
            AppDto.AppErrorCodes.FACTION_SKILL_NOT_EXIST = 3003;
            AppDto.AppErrorCodes.FACTION_SKILL_REACHED_MAX_LEVEL = 3004;
            AppDto.AppErrorCodes.INIT_ONUPGRADE_APTITUDE_NOT_ALLOWED = 3005;
            AppDto.AppErrorCodes.POTENTIAL_NOT_ENOUGH = 3006;
            AppDto.AppErrorCodes.INCREASE_APTITUDE_MUST_GREATER_THAN_ZERO = 3007;
            AppDto.AppErrorCodes.APTITUDE_NOT_EXIST = 3008;
            AppDto.AppErrorCodes.NOT_PET_SKILL_BOOK = 3009;
            AppDto.AppErrorCodes.PLAYER_EXP_BOOK_NOT_ALLOWED_TODAY = 3010;
            AppDto.AppErrorCodes.EXP_GAIN_NOT_ALLOWED = 3011;
            AppDto.AppErrorCodes.PET_LIFEPOINT_FOREVER_NOT_ALLOWED = 3012;
            AppDto.AppErrorCodes.PET_LIFEPOINT_UPPER = 3013;
            AppDto.AppErrorCodes.LEVEL_NOT_ALLOW_DISPOSABLE_POINT_PLAN = 3014;
            AppDto.AppErrorCodes.NOT_POINT_PLAN = 3015;
            AppDto.AppErrorCodes.NOT_PET_EXP_PROPS = 3016;
            AppDto.AppErrorCodes.PLAYER_EXP_BOOK_NOT_ALLOWED_TODAY_LIMIT = 3017;
            AppDto.AppErrorCodes.NOT_PET_GROWTH_PROPS = 3018;
            AppDto.AppErrorCodes.PET_GROWTH_PROPS_MAX_COUNT = 3019;
            AppDto.AppErrorCodes.PET_GROWTH_PROPS_NOT_USE_WILD = 3020;
            AppDto.AppErrorCodes.PET_GROWTH_PROPS_NOT_USE_MYTH = 3021;
            AppDto.AppErrorCodes.PET_GROWTH_PROPS_NOT_USE_PRECIOUS = 3022;
            AppDto.AppErrorCodes.PET_LIFE_NOT_ENOUGH_TO_FIGHT = 3023;
            AppDto.AppErrorCodes.NOT_PET_POTENTIAL_ITEM = 3024;
            AppDto.AppErrorCodes.PET_CERTIFICATION_SKILL = 3025;
            AppDto.AppErrorCodes.TEAM_NOT_EXIST = 4000;
            AppDto.AppErrorCodes.PLAYER_ALREADY_HAS_TEAM = 4001;
            AppDto.AppErrorCodes.TEAM_IS_FULL = 4002;
            AppDto.AppErrorCodes.ALREADY_AWAY_TEAM = 4003;
            AppDto.AppErrorCodes.IS_IN_TEAM = 4004;
            AppDto.AppErrorCodes.NOT_IN_SAME_TEAM = 4005;
            AppDto.AppErrorCodes.LEADER_AWAY_NOT_ALLOW = 4006;
            AppDto.AppErrorCodes.PLAYER_NOT_LEADER = 4007;
            AppDto.AppErrorCodes.TEAM_TYPE_NOT_VALID = 4008;
            AppDto.AppErrorCodes.TEAM_LEVEL_SCOPE_NOT_VALID = 4009;
            AppDto.AppErrorCodes.TEAM_IS_FULL_PUBLISH_NOT_ALLOW = 4010;
            AppDto.AppErrorCodes.TEAM_REQUEST_EXPIRED = 4011;
            AppDto.AppErrorCodes.TARGET_PLAYER_ALREADY_HAS_TEAM = 4012;
            AppDto.AppErrorCodes.TARGET_TEAM_IS_FULL = 4013;
            AppDto.AppErrorCodes.TEAM_ALREADY_PUBLISHED = 4014;
            AppDto.AppErrorCodes.NOT_BATTLABLE = 4015;
            AppDto.AppErrorCodes.IN_BATTLE_LEAVE_TEAM_NOT_ALLOWED = 4016;
            AppDto.AppErrorCodes.IN_BATTLE_BACK_TEAM_NOT_ALLOWED = 4017;
            AppDto.AppErrorCodes.SCENE_NOT_FLYABLE_BACK_TEAM_NOT_ALLOWED = 4018;
            AppDto.AppErrorCodes.ASSIGN_TARGET_TO_LEADER_NOT_ALLOWED = 4019;
            AppDto.AppErrorCodes.NO_AWAY_TEAM_MEMBERS = 4020;
            AppDto.AppErrorCodes.MEMBER_NOT_AWAY_BACK_TEAM_NOT_ALLOWED = 4021;
            AppDto.AppErrorCodes.MEMBER_NOT_EXIST = 4022;
            AppDto.AppErrorCodes.MEMBER_CHANGE_SCENE_NOT_ALLOWED = 4023;
            AppDto.AppErrorCodes.TEAM_INVITE_PLAYER_SELF = 4024;
            AppDto.AppErrorCodes.TEAM_NEED = 4025;
            AppDto.AppErrorCodes.TEAM_ACTION_LEVEL_LIMIT = 4026;
            AppDto.AppErrorCodes.TEAM_BACK_IN_PLOT = 4027;
            AppDto.AppErrorCodes.TEAM_REQUEST_NOT_ALLOWED_IN_TRIAL = 4028;
            AppDto.AppErrorCodes.TEAM_INVITE_NOT_ALLOWED_IN_TRIAL = 4029;
            AppDto.AppErrorCodes.TEAM_CHANGE_LEADER_NOT_ALLOWED_IN_TRIAL = 4030;
            AppDto.AppErrorCodes.TEAM_BACKTEAM_NOT_ALLOWED_IN_TRIAL = 4031;
            AppDto.AppErrorCodes.TEAM_SUMMONAWAY_NOT_ALLOWED_IN_TRIAL = 4032;
            AppDto.AppErrorCodes.NO_AWAY_TEAM_MEMBER = 4033;
            AppDto.AppErrorCodes.TEAM_MEMBER_NOT_ENOUGH = 4034;
            AppDto.AppErrorCodes.TEAM_MEMBER_NOT_ALL_IN_TEAM = 4035;
            AppDto.AppErrorCodes.PET_NOT_EXIST = 5000;
            AppDto.AppErrorCodes.CREW_NOT_EXIST = 5001;
            AppDto.AppErrorCodes.BATTLE_PET_NOT_EXIST = 5002;
            AppDto.AppErrorCodes.PET_SKILL_ALREADY_EXIST = 5003;
            AppDto.AppErrorCodes.PET_RESET_NOT_ALLOWED = 5004;
            AppDto.AppErrorCodes.NOT_ENOUGH_PET_COMPANY_VACANCY = 5005;
            AppDto.AppErrorCodes.PET_BASE_APTITUDE_INCREASE_NOT_ALLOWED = 5006;
            AppDto.AppErrorCodes.PET_BASE_APTITUDE_NOT_EXIST = 5007;
            AppDto.AppErrorCodes.PET_NAME_CANNOT_BE_BLANK = 5008;
            AppDto.AppErrorCodes.PET_TYPE_NOT_REGULAR_CANNOT_MUTATE = 5009;
            AppDto.AppErrorCodes.CREW_CHARACTOR_ALREADY_EXIST = 5010;
            AppDto.AppErrorCodes.FORMATION_NOT_EXIST = 5011;
            AppDto.AppErrorCodes.CREW_ALREADY_JOIN_BATTLE = 5012;
            AppDto.AppErrorCodes.CREW_ALREADY_OFF_BATTLE = 5013;
            AppDto.AppErrorCodes.APTITUDE_DECREASE_LIMIT = 5015;
            AppDto.AppErrorCodes.FORMATION_HAD_EXIST = 5016;
            AppDto.AppErrorCodes.PET_RESUME_NOT_EXIST = 5017;
            AppDto.AppErrorCodes.NOT_ENOUGH_PET_WAREHOUSE_VACANCY = 5018;
            AppDto.AppErrorCodes.PET_NOT_EXCHANGE = 5019;
            AppDto.AppErrorCodes.PET_NOT_MYTH_PRECIOUS = 5020;
            AppDto.AppErrorCodes.TITLE_IS_NOT_FOUND = 5021;
            AppDto.AppErrorCodes.TITLE_IS_EXPIRED = 5022;
            AppDto.AppErrorCodes.CREW_EQUIPMENT_NOT_FOUND = 5023;
            AppDto.AppErrorCodes.CREW_EQUIPMENT_LEVEL_NOT_ENOUGH = 5024;
            AppDto.AppErrorCodes.RECRUIT_LIMIT = 5025;
            AppDto.AppErrorCodes.JOIN_BATTLE_PET_GRADE = 5026;
            AppDto.AppErrorCodes.PET_MIX_LEVEL_LIMIT = 5027;
            AppDto.AppErrorCodes.PET_MIX_WILD_LIMIT = 5028;
            AppDto.AppErrorCodes.PET_MIX_MUTATE_LIMIT = 5029;
            AppDto.AppErrorCodes.PET_MIX_REGULAR_LIMIT = 5030;
            AppDto.AppErrorCodes.PET_MIX_BATTLE_LIMIT = 5031;
            AppDto.AppErrorCodes.PET_MIX_SIZE_LIMIT = 5032;
            AppDto.AppErrorCodes.PET_IN_BATTLE_CANNOT_DEVOUR = 5033;
            AppDto.AppErrorCodes.PET_CANNOT_DEVOUR_MYTH = 5034;
            AppDto.AppErrorCodes.PET_CANNOT_DEVOUR = 5035;
            AppDto.AppErrorCodes.PET_MAIN_NOT_BABY = 5036;
            AppDto.AppErrorCodes.PET_DEVOUR_LEVEL_NOT_SUIT = 5037;
            AppDto.AppErrorCodes.PET_DEVOUR_FULL = 5038;
            AppDto.AppErrorCodes.PET_DEVOUR_FAIL = 5039;
            AppDto.AppErrorCodes.PET_DEVOUR_LEVEL_NOT_ENOUGH = 5040;
            AppDto.AppErrorCodes.SKILL_CANNOT_BE_CERTIFICATED = 5041;
            AppDto.AppErrorCodes.CERTIFICATE_ONE_SKILL = 5042;
            AppDto.AppErrorCodes.NO_CERTIFICATED_SKILL = 5043;
            AppDto.AppErrorCodes.CANNOT_REPLACE_CERTIFICATE = 5044;
            AppDto.AppErrorCodes.CERTIFICATED_PET_CANNOT_MIX = 5045;
            AppDto.AppErrorCodes.PET_TYPE_CANNOT_EVOLVE = 5046;
            AppDto.AppErrorCodes.OUT_OF_MAX_EVOLVE_TIMES = 5047;
            AppDto.AppErrorCodes.PET_CANNOT_EVOLVE = 5048;
            AppDto.AppErrorCodes.PET_LEVEL_NOT_ENOUGH_EVOLVE = 5049;
            AppDto.AppErrorCodes.PET_GOT_ALL_SKILLS = 5050;
            AppDto.AppErrorCodes.CANNOT_FIGHT_BOOK_IN_BATTLE = 5051;
            AppDto.AppErrorCodes.CANNOT_DO_THIS_IN_BATTLE = 5052;
            AppDto.AppErrorCodes.PLAYER_APTITUDE_IS_RESET = 5053;
            AppDto.AppErrorCodes.PET_APTITUDE_IS_RESET = 5054;
            AppDto.AppErrorCodes.IN_BATTLE_CANNOT_RESET_APTITUDE = 5055;
            AppDto.AppErrorCodes.PET_CANNOT_DYE = 5056;
            AppDto.AppErrorCodes.PET_HAD_ORNAMENT = 5057;
            AppDto.AppErrorCodes.BIND_PET_CAN_DECORATE = 5058;
            AppDto.AppErrorCodes.PET_ORNAMENT_NOT_SUIT = 5059;
            AppDto.AppErrorCodes.PET_CANNOT_ORNAMENT_DYE = 5060;
            AppDto.AppErrorCodes.PET_SKILL_CANNOT_BUY = 5061;
            AppDto.AppErrorCodes.BIND_PET_USE = 5062;
            AppDto.AppErrorCodes.PET_POTENTIAL_USE_LIMIT = 5063;
            AppDto.AppErrorCodes.PET_REFRESH_FAILURE = 5064;
            AppDto.AppErrorCodes.PET_REFRESH_IMMORITAL_NOT_OPEN = 5065;
            AppDto.AppErrorCodes.PET_EVOLVE_FAILURE = 5066;
            AppDto.AppErrorCodes.SHOUT_NOT_CHANGE = 5067;
            AppDto.AppErrorCodes.PET_ORNAMENT_MIN_GRADE = 5068;
            AppDto.AppErrorCodes.NEED_RESET_PET = 5069;
            AppDto.AppErrorCodes.CREW_OUT_OF_MAX_STAR = 5070;
            AppDto.AppErrorCodes.CREW_TRAIN_PROP_NOT_ENOUGH = 5071;
            AppDto.AppErrorCodes.CREW_CANNOT_TRAIN = 5072;
            AppDto.AppErrorCodes.OUT_OF_DAILY_RESET_PET_TL = 5073;
            AppDto.AppErrorCodes.PET_DECOLATE_CLOSE = 5074;
            AppDto.AppErrorCodes.PET_DYE_CLOSE = 5075;
            AppDto.AppErrorCodes.FRIEND_ADD_SELF_NOT_SUPPORT = 6000;
            AppDto.AppErrorCodes.HAS_YOUR_FRIEND = 6001;
            AppDto.AppErrorCodes.FRIEND_INVITE_EXPIRED = 6003;
            AppDto.AppErrorCodes.FRIEND_LIMIT_OVER = 6004;
            AppDto.AppErrorCodes.DEST_FRIEND_LIMIT_OVER = 6005;
            AppDto.AppErrorCodes.FRIEND_INVITE_LIMIT_OVER = 6006;
            AppDto.AppErrorCodes.FRIEND_SEARCH_NOT_EXIST = 6007;
            AppDto.AppErrorCodes.FRIEND_REFUSED_STRANGER_MESSAGE = 6008;
            AppDto.AppErrorCodes.FRIEND_OFFLINE_CANT_GIFTFLOWERS = 6009;
            AppDto.AppErrorCodes.FRIEND_GIFT_SELF = 6010;
            AppDto.AppErrorCodes.FRIEND_STRANGE_CANT_GIFTFLOWERS = 6011;
            AppDto.AppErrorCodes.FRIEND_SHOW_MISSION_NOT_FOUND = 6012;
            AppDto.AppErrorCodes.FRIEND_GIFT_MUST_DOUBLE = 6013;
            AppDto.AppErrorCodes.FRIEND_PLAYER_NOT_EXIST = 6014;
            AppDto.AppErrorCodes.FACTION_NOT_EXIST = 7000;
            AppDto.AppErrorCodes.GUILD_ASSET_NOT_ENOUGH = 7100;
            AppDto.AppErrorCodes.GUILD_JOIN_ALREADY = 7101;
            AppDto.AppErrorCodes.GUILD_NOT_EXIST = 7102;
            AppDto.AppErrorCodes.GUILD_NAME_LENGTH_ILLEGAL = 7103;
            AppDto.AppErrorCodes.GUILD_MEMO_LENGTH_ILLEGAL = 7104;
            AppDto.AppErrorCodes.GUILD_CREATE_SAMENAME_ERROR = 7105;
            AppDto.AppErrorCodes.GUILD_NOT_JOIN_YET = 7106;
            AppDto.AppErrorCodes.GUILD_NO_PERMISSION = 7107;
            AppDto.AppErrorCodes.GUILD_NO_EXIST_APPROVALPLAYER = 7108;
            AppDto.AppErrorCodes.GUILD_PLAYER_JOIN_OTHER = 7109;
            AppDto.AppErrorCodes.GUILD_OPERATE_SELF_ERROR = 7110;
            AppDto.AppErrorCodes.GUILD_PLAYERS_NO_EXIST = 7111;
            AppDto.AppErrorCodes.GUILD_UPDATE_POSITION_ERROR = 7112;
            AppDto.AppErrorCodes.GUILD_BOSS_NOT_LEAVE = 7113;
            AppDto.AppErrorCodes.GUILD_CANNOT_EXPEL_SELF = 7114;
            AppDto.AppErrorCodes.GUILD_CANNOT_EXPEL = 7115;
            AppDto.AppErrorCodes.GUILD_POSITION_PLAYERS_ENOUGH = 7116;
            AppDto.AppErrorCodes.GUILD_PLAYER_FULL = 7117;
            AppDto.AppErrorCodes.GUILD_JOIN_LEVEL_NOT_ENOUGH = 7118;
            AppDto.AppErrorCodes.GUILD_MULIT_JOIN_ERROR = 7119;
            AppDto.AppErrorCodes.GUILD_CANNOT_SELF_RECOMMEND = 7120;
            AppDto.AppErrorCodes.GUILD_NOTICE_LENGTH_ILLEGAL = 7121;
            AppDto.AppErrorCodes.GUILD_CANNOT_UPDATE_NOTICE = 7122;
            AppDto.AppErrorCodes.GUILD_APPOINT_SAME_POSITION = 7123;
            AppDto.AppErrorCodes.GUILD_BUILDING_GRADE_IS_MAX = 7124;
            AppDto.AppErrorCodes.GUILD_BUILDING_MAKING = 7125;
            AppDto.AppErrorCodes.GUILD_BUILDING_NOT_EXIST = 7126;
            AppDto.AppErrorCodes.GUILD_GRADE_NOT_ALLOWED_DEGRADE = 7127;
            AppDto.AppErrorCodes.DEGRADE_NOT_ALLOWED_UPGRADE = 7128;
            AppDto.AppErrorCodes.GUILD_BUILDING_GRADE_IS_MIN = 7129;
            AppDto.AppErrorCodes.UPGRADE_NOT_ALLOWED_DEGRADE = 7130;
            AppDto.AppErrorCodes.UPGRADE_GUILD_NEEED_BUILDING_AMOUNT_GRADE = 7131;
            AppDto.AppErrorCodes.UPGRADE_BUILDING_NOT_ALLOWED = 7132;
            AppDto.AppErrorCodes.UPGRADE_BUILDING_FINISHED = 7133;
            AppDto.AppErrorCodes.DEGRADE_BUILDING_FINISHING = 7134;
            AppDto.AppErrorCodes.GUILD_BENEFITS_NEED_JOIN_DAYS = 7135;
            AppDto.AppErrorCodes.GUILD_BENEFITS_IS_RECEIVE = 7136;
            AppDto.AppErrorCodes.GUILD_BENEFITS_NEED_GRADE = 7137;
            AppDto.AppErrorCodes.GUILD_BENEFITS_POSITION_NOT_RECEIVE = 7138;
            AppDto.AppErrorCodes.GUILD_BENEFITS_NOT_ENOUGH = 7139;
            AppDto.AppErrorCodes.GUILD_BENEFITS_POSITION_NOT_GIVE_GIFG_BOX = 7140;
            AppDto.AppErrorCodes.GUILD_BENEFITS_POSITION_NOT_RECEIVE_GIVE_GIFG_BOX = 7141;
            AppDto.AppErrorCodes.GUILD_PLAYER_NOT_EXIST_NAME = 7142;
            AppDto.AppErrorCodes.GUILD_GIFG_BOX_NEED_JOIN_DAYS = 7143;
            AppDto.AppErrorCodes.GUILD_GIFG_BOX_NEED_GRADE = 7144;
            AppDto.AppErrorCodes.GUILD_GIFG_BOX_IS_GIVE = 7145;
            AppDto.AppErrorCodes.GUILD_GIFG_BOX_NOT_ENOUGH = 7146;
            AppDto.AppErrorCodes.LEVEL_NOT_ENOUGH_GUILD_PROPS = 7147;
            AppDto.AppErrorCodes.NOT_JOIN_GUILD = 7148;
            AppDto.AppErrorCodes.GUILD_BUILDING_NOT_MAKING = 7149;
            AppDto.AppErrorCodes.GUILD_GIFT_BOX_NOT_ENOUGH = 7150;
            AppDto.AppErrorCodes.GUILD_AGAINST_TIME_EXPIRE = 7151;
            AppDto.AppErrorCodes.GUILD_BENEFITS_NOT_RECEIVE = 7152;
            AppDto.AppErrorCodes.GUILD_CONVERT_CONTRIBUTE_NOT_ENOUGH = 7154;
            AppDto.AppErrorCodes.GUILD_CONVERT_CONTRIBUTE_MAX = 7155;
            AppDto.AppErrorCodes.GUILD_AD_NOT_END = 7156;
            AppDto.AppErrorCodes.GUILD_BAN_TALK_NOT_SELF = 7157;
            AppDto.AppErrorCodes.GUILD_BAN_TALK_NO_PERMISSION = 7158;
            AppDto.AppErrorCodes.GUILD_BAN_TALK_PLAYER_NOT_ONLINE = 7159;
            AppDto.AppErrorCodes.GUILD_POSITION_NOT_BUY = 7160;
            AppDto.AppErrorCodes.GUILD_MASSES_MIN_LEVEL = 7161;
            AppDto.AppErrorCodes.GUILD_MASSES_MAX_LEVEL = 7162;
            AppDto.AppErrorCodes.GUILD_NOTICE_LENGTH_NOT_NULL = 7163;
            AppDto.AppErrorCodes.GUILD_MEMBER_FULL = 7164;
            AppDto.AppErrorCodes.GUILD_PLAYER_NOT_EXIST = 7165;
            AppDto.AppErrorCodes.GUILD_MISSION_NOT_FINISH_YET = 7166;
            AppDto.AppErrorCodes.GUILD_BUILDING_CANCEL_NOT_MAKING = 7167;
            AppDto.AppErrorCodes.GUILD_BUILDING_IN_MAKING = 7168;
            AppDto.AppErrorCodes.FACTION_CHANGE_WITH_EQUIPMENT = 7169;
            AppDto.AppErrorCodes.FACTION_CHANGE_GENDER_CHANGE_IN_MARRIAGE = 7170;
            AppDto.AppErrorCodes.SAME_FACTION_CHARACTOR = 7171;
            AppDto.AppErrorCodes.FACTION_CHARACTOR_LOWER_THAN_MIN_GRADE = 7172;
            AppDto.AppErrorCodes.FACTION_CHARACTOR_NOT_MATCH = 7173;
            AppDto.AppErrorCodes.FACTION_CHANGE_TOO_QUICK = 7174;
            AppDto.AppErrorCodes.FACTION_CHARACTOR_CHANGE_IN_TEAM = 7175;
            AppDto.AppErrorCodes.EMBED_CHANGE_OVERDUE = 7176;
            AppDto.AppErrorCodes.CANNOT_EMBED_CHANGE = 7177;
            AppDto.AppErrorCodes.GUILD_COMP_NOT_JOIN = 7200;
            AppDto.AppErrorCodes.GUILD_COMP_PLAYER_GRADE_NOT_ENOUGH = 7201;
            AppDto.AppErrorCodes.GUILD_COMP_DAYS_NOT_ENOUGH = 7202;
            AppDto.AppErrorCodes.GUILD_COMP_ENTER_EXPIRED = 7203;
            AppDto.AppErrorCodes.GUILD_CAMP_ESCAPED = 7204;
            AppDto.AppErrorCodes.GUILD_CAMP_NOT_IN_TIME = 7205;
            AppDto.AppErrorCodes.GUILD_CAMP_IN_WITHOUT_TEAM = 7206;
            AppDto.AppErrorCodes.GUILD_COMP_TARGET_IN_PROTECT = 7207;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_EXPEL = 7208;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_LEAVE = 7209;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_JOIN_TEAM = 7210;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_INVITE = 7211;
            AppDto.AppErrorCodes.GUILD_COMP_INVITE_SAME_GUILD = 7212;
            AppDto.AppErrorCodes.GUILD_COMP_JOIN_SAME_GUILD = 7213;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_BACK_TEAM = 7214;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_CHALLENGE = 7215;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_SIEGE = 7216;
            AppDto.AppErrorCodes.GUILD_COMP_ACTION_POINT_EMPTY = 7217;
            AppDto.AppErrorCodes.GUILD_COMP_AP_NOT_ENOUGH_TO_FIGHT = 7218;
            AppDto.AppErrorCodes.GUILD_COMP_TEAM_AP_NOT_ENOUGH = 7219;
            AppDto.AppErrorCodes.GUILD_COMP_NOT_BATTLE_TIME = 7220;
            AppDto.AppErrorCodes.GUILD_COMP_ONLY_LEADER_CHALLENGE = 7221;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_OPEN_BOX_MORE = 7222;
            AppDto.AppErrorCodes.GUILD_COMP_CANNOT_AUTO_MATCH_TEAM = 7223;
            AppDto.AppErrorCodes.GUILD_COMP_ACTION_POINT_OUT = 7224;
            AppDto.AppErrorCodes.GUILD_COMP_MEMBER_DIFF_GUILD = 7225;
            AppDto.AppErrorCodes.GUILD_COMP_MEMBER_GRADE_NOT_ENOUGH = 7226;
            AppDto.AppErrorCodes.GUILD_COMP_MEMBER_DAYS_NOT_ENOUGH = 7227;
            AppDto.AppErrorCodes.GUILD_COMP_MEMBER_ACTION_POINT_OUT = 7228;
            AppDto.AppErrorCodes.GUILD_COMP_MEMBER_ESCAPE = 7229;
            AppDto.AppErrorCodes.GUILD_COMP_IN_SCENE = 7230;
            AppDto.AppErrorCodes.MAZE_NEED_TEAM = 7240;
            AppDto.AppErrorCodes.MAZE_ONLY_LEADER_OPEN = 7241;
            AppDto.AppErrorCodes.MAZE_TEAM_SIZE_NOT_SUIT = 7242;
            AppDto.AppErrorCodes.MAZE_NEED_MEMBER_IN_TEAM = 7243;
            AppDto.AppErrorCodes.MAZE_NEED_PROP = 7244;
            AppDto.AppErrorCodes.MAZE_MEMBER_GRADE_NOT_SUIT = 7245;
            AppDto.AppErrorCodes.OPEN_BOX_CD = 7246;
            AppDto.AppErrorCodes.TARGET_GRADE_NOT_ENOUGH = 7247;
            AppDto.AppErrorCodes.MAZE_CANNOT_BACK_TEAM = 7248;
            AppDto.AppErrorCodes.MAZE_OPEN_BOX_TIMES_OUT = 7749;
            AppDto.AppErrorCodes.MAZE_OPEN_BOX_ONLY_FIRST = 7750;
            AppDto.AppErrorCodes.CANNOT_OPEN_BOX_WITHOUT_MISSION = 7751;
            AppDto.AppErrorCodes.EQUIPMENT_NOT_EXIST = 8000;
            AppDto.AppErrorCodes.EQUIPMENT_SMITH_NOT_ALLOWED = 8001;
            AppDto.AppErrorCodes.EQUIPMENT_ALREADY_EQUIPPED = 8002;
            AppDto.AppErrorCodes.LEVEL_NOT_ENOUGH_EQUIP_NOT_ALLOWED = 8003;
            AppDto.AppErrorCodes.EQUIPMENT_ALREADY_TOOKOFF = 8004;
            AppDto.AppErrorCodes.EQUIP_PART_TYPE_INVALID = 8005;
            AppDto.AppErrorCodes.EQUIPMENT_NOT_IDENTIFIED_YET = 8006;
            AppDto.AppErrorCodes.EQUIPMENT_EMBED_LEVEL_EXCEEDED = 8007;
            AppDto.AppErrorCodes.EQUIPMENT_EMBED_ITEM_INVALID = 8008;
            AppDto.AppErrorCodes.EQUIPMENT_EMBED_TRANSFER_NOT_ALLOWED = 8009;
            AppDto.AppErrorCodes.EQUIPMENT_APTITUDE_NOT_EXIST = 8010;
            AppDto.AppErrorCodes.EQUIPMENT_APTITUDE_TRANSFER_NOT_ALLOWED = 8011;
            AppDto.AppErrorCodes.PET_EQUIPMENT_COMBINE_NOT_ALLOWED = 8012;
            AppDto.AppErrorCodes.PET_EQUIPMENT_COMBINE_VALID_AMOUNT = 8013;
            AppDto.AppErrorCodes.PET_EQUIPMENT_COMBINE_MUST_BE_THE_SAME = 8014;
            AppDto.AppErrorCodes.PET_EQUIPMENT_NOT_MATCH_CHARACTOR = 8017;
            AppDto.AppErrorCodes.PET_EQUIPMENT_NOT_MATCH_GENDER = 8018;
            AppDto.AppErrorCodes.ITEM_IDENTIFY_NOT_MATCH = 8019;
            AppDto.AppErrorCodes.EQUIPMENT_IDENTIFIED_YET = 8020;
            AppDto.AppErrorCodes.EQUIPMENT_REPAIRE_UNABLE = 8021;
            AppDto.AppErrorCodes.EQUIPMENT_IN_RECYCLE = 8022;
            AppDto.AppErrorCodes.ITEM_EXIST_IN_INDEX = 8023;
            AppDto.AppErrorCodes.EQUIPMENT_AMULET_NOT_EXIST = 8024;
            AppDto.AppErrorCodes.AMULET_RESET_PROPS_NOT_EXIST = 8025;
            AppDto.AppErrorCodes.EQUIPMENT_RESET_LEVEL_NOT_MATCH = 8026;
            AppDto.AppErrorCodes.EQUIPMENT_RESET_SKILL_NOT_MATCH = 8027;
            AppDto.AppErrorCodes.EQUIPMENT_UNEMBED_NOT_ENOUGH_SPACE = 8028;
            AppDto.AppErrorCodes.EQUIPMENT_CANNOT_RESET = 8029;
            AppDto.AppErrorCodes.EQUIPMENT_WEAPON_NOT_EXIST = 8030;
            AppDto.AppErrorCodes.EQUIPMENT_WEAPON_NOT_ZERO = 8031;
            AppDto.AppErrorCodes.EQUIPMENT_WEAPON_GRADE_NOT_SAME = 8032;
            AppDto.AppErrorCodes.EQUIPMENT_WEAPON_USE_PLAN_SAME = 8033;
            AppDto.AppErrorCodes.EQUIPMENT_UNABLE_RECAST_FOR_STALL = 8034;
            AppDto.AppErrorCodes.CURRENT_EQUIPMENT_CANNOT_CHANGE = 8035;
            AppDto.AppErrorCodes.EQUIPMENT_NOT_BIND = 8036;
            AppDto.AppErrorCodes.EQUIPMENT_MATCH_CHARACTOR = 8037;
            AppDto.AppErrorCodes.TARGET_EQUIPMENT_NOT_EXIST = 8038;
            AppDto.AppErrorCodes.EQUIPMENT_CHANGE_LOWER_THAN_MIN_GRADE = 8039;
            AppDto.AppErrorCodes.EQUIPMENT_CHANGE_LOWER_THAN_MIN_SCORE = 8040;
            AppDto.AppErrorCodes.EQUIPMENT_PLAN_SWITCH_LOWER_THAN_MIN_GRADE = 8041;
            AppDto.AppErrorCodes.TARGET_EQUIPMENT_NOT_THE_SAME = 8042;
            AppDto.AppErrorCodes.EQUIPMENT_PLAN_THE_SAME_AS_CURRENT_PLAN = 8043;
            AppDto.AppErrorCodes.EQUIPMENT_PLAN_IS_NOT_EXIST = 8044;
            AppDto.AppErrorCodes.EQUIPMENT_CERTIFICATE_USE_SELF = 8045;
            AppDto.AppErrorCodes.CANNOT_CERTIFICATE_EQUIPMENT = 8046;
            AppDto.AppErrorCodes.EQUIPMENT_CERTIFIED = 8047;
            AppDto.AppErrorCodes.EQUIPMENT_CERTIFICATE_MIN_GRADE = 8048;
            AppDto.AppErrorCodes.EQUIPMENT_CERTIFICATE_NEED_IDENTIFIED = 8049;
            AppDto.AppErrorCodes.EQUIPMENT_CERTIFICATE_COST_CHANGE = 8050;
            AppDto.AppErrorCodes.NOT_USE_EQUIPMENT_CANNOT_OPERATION = 8051;
            AppDto.AppErrorCodes.OUT_OF_DAILY_EQ_SKILL_RESET_TL = 8052;
            AppDto.AppErrorCodes.OUT_OF_DAILY_EQ_PROPERTY_RESET_TL = 8053;
            AppDto.AppErrorCodes.OUT_OF_DAILY_EQ_APTITUDE_REFRESH_TL = 8054;
            AppDto.AppErrorCodes.EQUIPMENT_EMBED_SLOT_NOT_ENOUGH = 8055;
            AppDto.AppErrorCodes.EQUIPMENT_EMBED_LEVEL_NOT_ENOUGH = 8056;
            AppDto.AppErrorCodes.EQUIPMENT_NOT_HALLOW = 8801;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_NEED_BREAK = 8802;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_NEED_NOT_BREAK = 8803;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_EXP_PROPS_NOT_ENOUGH = 8804;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_SPRITE_AWAKE_ALREADY = 8805;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_NOT_SPRITE_AWAKE = 8806;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_WEARING = 8807;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_DECOMPOSE_GRADE_LIMIT = 8808;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_GRADE_GREATER_THAN_PLAYER = 8809;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_SPRITE_AWAKE_GRADE_LIMIT = 8810;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_SPRITE_EVOLVE_GRADE_LIMIT = 8811;
            AppDto.AppErrorCodes.EQUIPMENT_HALLOW_DECOMPOSE_EMBED_LIMIT = 8812;
            AppDto.AppErrorCodes.MONEY_TREE_FREE_WAIT_NEXT = 8900;
            AppDto.AppErrorCodes.MONEY_TREE_FINISH_MAX_COUNT = 8901;
            AppDto.AppErrorCodes.MONEY_TREE_ACTIVE_NOT_ENOUGH = 8902;
            AppDto.AppErrorCodes.SPELL_OUT_OFF_LEVEL = 9000;
            AppDto.AppErrorCodes.ASSIST_SKILL_OUT_OF_LEVEL = 9001;
            AppDto.AppErrorCodes.ASSIST_SKILL_LEVEL_NOT_ENOUGH = 9002;
            AppDto.AppErrorCodes.ASSIST_SKILL_NOT_STUDY = 9003;
            AppDto.AppErrorCodes.ASSIST_SKILL_PROP_NOT_FOUND = 9004;
            AppDto.AppErrorCodes.SPELL_PROPS_APPLY_LIMIT = 9005;
            AppDto.AppErrorCodes.NO_EXTRA_PROPERTY = 9006;
            AppDto.AppErrorCodes.SCENARIO_SKILL_OUT_OF_MAX_LEVEL = 9007;
            AppDto.AppErrorCodes.SCENERIO_SKILL_PLAYER_LEVEL_NEED = 9008;
            AppDto.AppErrorCodes.SPELL_PROPS_APPLY_LIMIT_AMOUNT = 9009;
            AppDto.AppErrorCodes.DOUBLE_POINT_PROPS_APPLY_LIMIT = 9010;
            AppDto.AppErrorCodes.DOUBLE_POINT_PROPS_APPLY_LIMIT_AMOUNT = 9011;
            AppDto.AppErrorCodes.DOUBLE_POINT_PROPS_APPLY_LIMIT_MAX = 9012;
            AppDto.AppErrorCodes.LEARN_THIS_SKILL_NEED_LEVEL = 9013;
            AppDto.AppErrorCodes.MAKE_LUCKY_KONT_NEED_LEVEL = 9014;
            AppDto.AppErrorCodes.LEVEL_NOT_SUIT = 9101;
            AppDto.AppErrorCodes.PLAYER_IN_BATTLE = 9102;
            AppDto.AppErrorCodes.SAME_TEAM_CANNOT_FIGHT = 9103;
            AppDto.AppErrorCodes.SELF_IN_BATTLE = 9104;
            AppDto.AppErrorCodes.SIEGE_BATTLE_NOT_START = 9201;
            AppDto.AppErrorCodes.ATTACK_TIEMS_OUT = 9202;
            AppDto.AppErrorCodes.TOWN_DATA_ERROR = 9203;
            AppDto.AppErrorCodes.SIEGE_TOWN_UNDER_ATTACK = 9204;
            AppDto.AppErrorCodes.SIEGE_TOWN_IS_DOWN = 9205;
            AppDto.AppErrorCodes.IN_TEAM_CANNOT_ATTACK = 9206;
            AppDto.AppErrorCodes.IN_BATTLE_CANNOT_ATTACK = 9207;
            AppDto.AppErrorCodes.SIEGE_GUILD_LOST = 9208;
            AppDto.AppErrorCodes.SIEGE_TARGET_ERROR = 9209;
            AppDto.AppErrorCodes.SIEGE_GUILD_PASS = 9210;
            AppDto.AppErrorCodes.SIEGE_GUILD_GRADE_NOT_SUIT = 9211;
            AppDto.AppErrorCodes.SIEGE_NEED_GUILD = 9212;
            AppDto.AppErrorCodes.PLAYER_IN_BATTLE_GENERAL = 9213;
            AppDto.AppErrorCodes.MYSTERY_AREA_NOT_FOUND = 9300;
            AppDto.AppErrorCodes.MYSTERY_TOLLGATE_NOT_FOUND = 9301;
            AppDto.AppErrorCodes.MYSTERY_PLAYER_LEVEL_NOT_SUIT = 9302;
            AppDto.AppErrorCodes.MYSTERY_NOT_OPEN = 9303;
            AppDto.AppErrorCodes.MYSTERY_MUST_SAME = 9304;
            AppDto.AppErrorCodes.MYSTERY_CHALLENGE_TIMES_OUT = 9305;
            AppDto.AppErrorCodes.MYSTERY_PRE_TOLLGATE_NOT_PASS = 9306;
            AppDto.AppErrorCodes.MYSTERY_UPDATED = 9307;
            AppDto.AppErrorCodes.WEEKEND_GIFT_NOT_EXIST = 9350;
            AppDto.AppErrorCodes.WEEKEND_GIFT_IS_RECEIVE = 9351;
            AppDto.AppErrorCodes.WEEKEND_GIFT_NOT_ARRIVE_TIME = 9352;
            AppDto.AppErrorCodes.TOURNAMENT_IN_TEAM_LEADER_ONLY = 9400;
            AppDto.AppErrorCodes.TOURNAMENT_PLAYER_LEVEL_NOT_SUIT = 9401;
            AppDto.AppErrorCodes.TOURNAMENT_FAILURE_TIMES_OUT = 9402;
            AppDto.AppErrorCodes.TOURNAMENT_MEMBER_LEVEL_NOT_SUIT = 9403;
            AppDto.AppErrorCodes.TOURNAMENT_MEMBER_TIMES_OUT = 9404;
            AppDto.AppErrorCodes.TOURNAMENT_CLOSE = 9405;
            AppDto.AppErrorCodes.FIRST_TOURNAMENT_PLAYER_LEVEL_NOT_SUIT = 9501;
            AppDto.AppErrorCodes.PLAYER_IMAGE_NPC_LOST = 9502;
            AppDto.AppErrorCodes.PLAYER_NPC_NOT_SUIT = 9503;
            AppDto.AppErrorCodes.OUT_OF_TEAM_MEMBER_COUNT = 9504;
            AppDto.AppErrorCodes.COPY_NEED_TEAM = 9600;
            AppDto.AppErrorCodes.COPY_NEED_LEAER = 9601;
            AppDto.AppErrorCodes.COPY_TEAM_SIZE_NOT_SUIT = 9602;
            AppDto.AppErrorCodes.COPY_TEAM_MEMBER_AWAY = 9603;
            AppDto.AppErrorCodes.COPY_NOT_FOUND = 9604;
            AppDto.AppErrorCodes.COPY_NO_MISSION = 9605;
            AppDto.AppErrorCodes.COPY_MISSION_UN_SYNC = 9606;
            AppDto.AppErrorCodes.COPY_MISSION_TYPE_ILLEGAL = 9607;
            AppDto.AppErrorCodes.COPY_MEMBER_LEVEL_NOT_SUIT = 9608;
            AppDto.AppErrorCodes.COPY_PASSED_CANNOT_ENTER = 9609;
            AppDto.AppErrorCodes.COPY_MEMBER_REFUSE = 9610;
            AppDto.AppErrorCodes.COPY_MISSION_PLAYER_NOT_ENOUGH = 9611;
            AppDto.AppErrorCodes.COPY_CANNOT_BACK_TEAM = 9612;
            AppDto.AppErrorCodes.COPY_CANNOT_JOIN_TEAM = 9613;
            AppDto.AppErrorCodes.COPY_CANNOT_DROP_MISSION = 9614;
            AppDto.AppErrorCodes.LOGIN_FAILED_NETWORK = 9700;
            AppDto.AppErrorCodes.LOGIN_SERVER_IS_FULL = 9701;
            AppDto.AppErrorCodes.GIFT_BAG_FAILED = 9800;
            AppDto.AppErrorCodes.TRIAL_PLAYER_LEVEL_NOT_SUIT = 9801;
            AppDto.AppErrorCodes.TRIAL_SINGLE_PLAYER_ONLY = 9802;
            AppDto.AppErrorCodes.TRIAL_CANNOT_TEAM = 9803;
            AppDto.AppErrorCodes.MYTH_LAND_PLAYER_LEVEL_NOT_SUIT = 9810;
            AppDto.AppErrorCodes.MYTH_LAND_TEAM_SIZE = 9811;
            AppDto.AppErrorCodes.MYTH_LAND_NOT_START = 9812;
            AppDto.AppErrorCodes.MYTH_LAND_BOX_OPENED = 9813;
            AppDto.AppErrorCodes.MYTH_LAND_OPEN_BOX_PLAYER_NOT_ENOUGH = 9814;
            AppDto.AppErrorCodes.MYTH_LAND_OPEN_BOX_NEED_KEY = 9815;
            AppDto.AppErrorCodes.MYTH_LAND_LAST_LAYER = 9816;
            AppDto.AppErrorCodes.MYTH_LAND_FIRST_LAYER = 9817;
            AppDto.AppErrorCodes.MYTH_LAND_CANNOT_USE_ITEM = 9818;
            AppDto.AppErrorCodes.MYTH_LAND_USE_ITEM_NEED_LEADER = 9819;
            AppDto.AppErrorCodes.BATTLE_DEALER_NPC_ONLY_LEADER_OPEN = 9820;
            AppDto.AppErrorCodes.BATTLE_DEALER_NPC_NEED_TEAM = 9821;
            AppDto.AppErrorCodes.MYTH_LAND_BEGGER_NPC_NOT_EXIST = 9822;
            AppDto.AppErrorCodes.MYTH_LAND_NO_KEY = 9823;
            AppDto.AppErrorCodes.NPC_DISAPPEAR = 9824;
            AppDto.AppErrorCodes.NPC_WITH_NAME_DISAPPEAR = 9825;
            AppDto.AppErrorCodes.WORLD_BOSS_PLAYER_LEVEL_NOT_SUIT = 9830;
            AppDto.AppErrorCodes.WORLD_BOSS_PLAYER_NOT_ENOUGH = 9831;
            AppDto.AppErrorCodes.WORLD_BOSS_BOX_IN_CD = 9832;
            AppDto.AppErrorCodes.WORLD_BOSS_IN_BATTLE = 9833;
            AppDto.AppErrorCodes.WEARED_REFINE_UNABLE = 9850;
            AppDto.AppErrorCodes.FASHION_DRESS_BUY_AMOUNT = 9851;
            AppDto.AppErrorCodes.FASHION_DRESS_NOT_EXIST = 9852;
            AppDto.AppErrorCodes.FASHION_DRESS_HAVE_CONFLICTS = 9853;
            AppDto.AppErrorCodes.FASHION_DRESS_IS_SAME_PART = 9854;
            AppDto.AppErrorCodes.FASHION_DRESS_EXPIRED = 9855;
            AppDto.AppErrorCodes.FASHION_DRESS_PACK_FULL = 9856;
            AppDto.AppErrorCodes.FASHION_PROGRAM_NOT_EXIST = 9857;
            AppDto.AppErrorCodes.FASHION_DRESS_NOT_BIND_GIFT = 9858;
            AppDto.AppErrorCodes.FASHION_DRESS_MATCH_CHARACTOR = 9859;
            AppDto.AppErrorCodes.TARGET_FASHION_DRESS_NOT_EXIST = 9860;
            AppDto.AppErrorCodes.TARGET_FASHION_DRESS_NOT_MATCH_CHARACTOR = 9861;
            AppDto.AppErrorCodes.TARGET_FASHION_DRESS_CURRENT_FASHION_DRESS_NOT_THE_SAME_TYPE = 9862;
            AppDto.AppErrorCodes.TARGET_FASHION_DRESS_NOT_THE_SAME = 9863;
            AppDto.AppErrorCodes.FASHION_DRESS_NOT_EXPIRED = 9864;
            AppDto.AppErrorCodes.MARRIAGE_TWO_NEED = 9900;
            AppDto.AppErrorCodes.MARRIAGE_ALREADY = 9901;
            AppDto.AppErrorCodes.MARRIAGE_DIFF_SEX_NEED = 9902;
            AppDto.AppErrorCodes.MARRIAGE_LVL_LIMIT = 9903;
            AppDto.AppErrorCodes.MARRIAGE_FRIEND_DEGREE_NEED = 9904;
            AppDto.AppErrorCodes.MARRIAGE_MOON_OLD_WORKING = 9905;
            AppDto.AppErrorCodes.MARRIAGE_IN_WEDDING = 9906;
            AppDto.AppErrorCodes.MARRIAGE_MONEY_NEED = 9907;
            AppDto.AppErrorCodes.MARRIAGE_IDO_TIMEOUT = 9908;
            AppDto.AppErrorCodes.MARRIAGE_PAY_TIMEOUT = 9909;
            AppDto.AppErrorCodes.MARRIAGE_MOVE_FORBIDEN = 9910;
            AppDto.AppErrorCodes.MARRIAGE_JUMP_FORBIDEN = 9911;
            AppDto.AppErrorCodes.MARRIAGE_NOT_ALLOW_IN = 9912;
            AppDto.AppErrorCodes.MARRIAGE_GET_OUT = 9913;
            AppDto.AppErrorCodes.MARRIAGE_COUPLE_PICK_FORBIDEN = 9914;
            AppDto.AppErrorCodes.MARRIAGE_PICK_SLOW = 9915;
            AppDto.AppErrorCodes.MARRIAGE_SWEET_PICK_LIMIT = 9916;
            AppDto.AppErrorCodes.MARRIAGE_SWEET_GET_LIMIT = 9917;
            AppDto.AppErrorCodes.MARRIAGE_DIV_TWO_NEED = 9918;
            AppDto.AppErrorCodes.MARRIAGE_DIV_FREQ_ALREADY = 9919;
            AppDto.AppErrorCodes.MARRIAGE_DIV_TIME_LIMIT = 9920;
            AppDto.AppErrorCodes.MARRIAGE_FDIV_BYREQ_ALREADY = 9921;
            AppDto.AppErrorCodes.MARRIAGE_FDIV_MONEY_NEED = 9922;
            AppDto.AppErrorCodes.MARRIAGE_FDIV_REQ_NOTYET = 9923;
            AppDto.AppErrorCodes.MARRIAGE_ROAD_NEED_MARRY = 9924;
            AppDto.AppErrorCodes.MARRIAGE_PLAYER_LVL_LIMIT = 9925;
            AppDto.AppErrorCodes.MARRIAGE_PLAYER_HAS_MARRIED = 9926;
            AppDto.AppErrorCodes.MARRIAGE_PLAYER_WEDDING = 9927;
            AppDto.AppErrorCodes.MARRIAGE_FDIV_REQ_LIMIT = 9928;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_VALUE_NOT_ENOUGH = 9929;
            AppDto.AppErrorCodes.MARRIAGE_CANNOT_DEL_FRIEND = 9930;
            AppDto.AppErrorCodes.MARRIAGE_REQUEST_NEED_LEADER = 9931;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_HARVEST_NEED = 9932;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_REWARD_NEED = 9933;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_FRERE_FIGHT = 9934;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_NOT_MOSTER = 9935;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_NEED_WIN = 9936;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_FIGHT_WIN = 9937;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_WATER_CD = 9938;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_WATER_END = 9939;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_BUYTIMES_LIMIT = 9940;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_HARVEST_NOTYET = 9941;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_HARVEST_MONSTER = 9942;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_REWARD_HAS = 9943;
            AppDto.AppErrorCodes.MARRIAGE_LOVE_TREE_LVL_MAX = 9944;
            AppDto.AppErrorCodes.FASHION_NOT_EXIST = 9945;
            AppDto.AppErrorCodes.SWEET_PACK_FULL = 9946;
            AppDto.AppErrorCodes.PLAYER_NOT_MARRY = 9947;
            AppDto.AppErrorCodes.PLAYER_GRADE_NOT_ENOUGH = 9948;
            AppDto.AppErrorCodes.PLAYER_ISNOT_MARRIED_YET = 9949;
            AppDto.AppErrorCodes.WEDDING_CANDIES_PROPS_APPLY_LIMIT = 9990;
            AppDto.AppErrorCodes.WEDDING_CANDIES_PROPS_APPLY_USE = 9991;
            AppDto.AppErrorCodes.MONEYPACK_NOT_EXIST = 10000;
            AppDto.AppErrorCodes.MONEYPACK_HAS_GET = 10001;
            AppDto.AppErrorCodes.MONEYPACK_SO_SLOW = 10002;
            AppDto.AppErrorCodes.MONEYPACK_LVL_LIMIT = 10003;
            AppDto.AppErrorCodes.MONEYPACK_CHARGE_LIMIT = 10004;
            AppDto.AppErrorCodes.MONEYPACK_REFRESH_LIMIT = 10005;
            AppDto.AppErrorCodes.MONEYPACK_PAYOUT_LIMIT = 10006;
            AppDto.AppErrorCodes.MONERYPACK_IN_BAN = 10007;
            AppDto.AppErrorCodes.COOKING_PAN_NOT_EXIST = 10020;
            AppDto.AppErrorCodes.MARRIAGE_NOT_EXIST_FOR_COOKING = 10021;
            AppDto.AppErrorCodes.COOKING_PAN_IS_EXIST = 10022;
            AppDto.AppErrorCodes.COOKING_FOOD_NOT_CHANGE_PAN = 10023;
            AppDto.AppErrorCodes.COOKING_PAN_EXIST_FOOD = 10024;
            AppDto.AppErrorCodes.COOKING_FOOD_NOT_EXIST = 10025;
            AppDto.AppErrorCodes.COOKING_FOOD_BUSY = 10026;
            AppDto.AppErrorCodes.COOKING_FOOD_IN_PAN = 10027;
            AppDto.AppErrorCodes.COOKING_FOOD_NOT_ENOUGH_VIGOUR = 10028;
            AppDto.AppErrorCodes.NOT_COOKING_FOOD = 10029;
            AppDto.AppErrorCodes.COOKING_FOOD_NOT_FINISH = 10030;
            AppDto.AppErrorCodes.COOKING_FOOD_NOT_MARRY_EAT = 10031;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_NEED_TEAM = 10050;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_NEED_COUPLE_COUNT = 10051;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_NEED_COUPLE = 10052;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_NEED_WAIT_DAY = 10053;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_APPLY = 10054;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_WAITE_TIME = 10055;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_TIME_EXPIRE = 10056;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_INFO_NOT_EXIST = 10057;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_PAY_NOT_EXIST = 10058;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_PAY_TIME_EXPIRE = 10059;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_PAY_INGOT_AGREE = 10061;
            AppDto.AppErrorCodes.NOT_BRIDAL_SEDAN = 10062;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_POKE_NOT_START = 10063;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_POKE_END = 10064;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_CANDIES_NOT_START = 10065;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_CANDIES_END = 10066;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_BOX_IS_OPEN = 10067;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_PET_BOX_IS_OPEN = 10068;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_PET_TAKES_NOT_START = 10069;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_PET_TAKES_END = 10070;
            AppDto.AppErrorCodes.BRIDAL_SEDAN_CANDIES_BUY_COUNT_FINISH = 10071;
            AppDto.AppErrorCodes.EVERDAY_GAME_NOT_RECEIVE = 10100;
            AppDto.AppErrorCodes.EVERDAY_GAME_TODAY_RECEIVE = 10101;
            AppDto.AppErrorCodes.EVERDAY_GAME_INDEX_NOT_EXIST = 10102;
            AppDto.AppErrorCodes.EVERDAY_GAME_DATA_ERROR = 10103;
            AppDto.AppErrorCodes.INDENTURE_MASTER_GRADE_MIN = 10900;
            AppDto.AppErrorCodes.INDENTURE_MASTER_HAS_APPRENTICE_LIMIT = 10901;
            AppDto.AppErrorCodes.INDENTURE_MASTER_WEEKLY_HAS_APPRENTICE_LIMIT = 10902;
            AppDto.AppErrorCodes.INDENTURE_APPRENTICE_GRADE_MIN = 10903;
            AppDto.AppErrorCodes.INDENTURE_APPRENTICE_GRADE_MAX = 10904;
            AppDto.AppErrorCodes.INDENTURE_CONSUMEVIGOUR = 10905;
            AppDto.AppErrorCodes.INDENTURE_NOT_EXIST = 10906;
            AppDto.AppErrorCodes.INDENTURE_DAILY_MISSION_UNFINISHED = 10907;
            AppDto.AppErrorCodes.INDENTURE_DAILY_MISSION_REWARD = 10908;
            AppDto.AppErrorCodes.INDENTURE_ACHIEVEMENT_UNFINISHED = 10909;
            AppDto.AppErrorCodes.INDENTURE_ACHIEVEMENT_REWARD = 10910;
            AppDto.AppErrorCodes.INDENTURE_ACHIEVEMENT_NOT_FIND = 10911;
            AppDto.AppErrorCodes.INDENTURE_HAS_MASTER = 10912;
            AppDto.AppErrorCodes.INDENTURE_MASTER_NEXTACCEPT_LIMIT = 10913;
            AppDto.AppErrorCodes.INDENTURE_APPRENTICE_NEXTACCEPT_LIMIT = 10914;
            AppDto.AppErrorCodes.INDENTURE_HAS_APPRAISE = 10915;
            AppDto.AppErrorCodes.INDENTURE_FORCE_APPLYA_NOT_ENOUGH = 10916;
            AppDto.AppErrorCodes.INDENTURE_FORCE_APPLY_GRADE_LIMIT = 10917;
            AppDto.AppErrorCodes.INDENTURE_FORCE_FINISH_WAIT_PERIOD = 10918;
            AppDto.AppErrorCodes.INDENTURE_FORCE_FINISH_MUST_APPLY = 10919;
            AppDto.AppErrorCodes.INDENTURE_FINISH_GRADE_MIN = 10920;
            AppDto.AppErrorCodes.INDENTURE_CANNOT_DEL_FRIEND = 10921;
            AppDto.AppErrorCodes.INDENTURE_DAILY_MISSION_PUBLISHED = 10922;
            AppDto.AppErrorCodes.UNENOUGH_BE_MASTER = 10923;
            AppDto.AppErrorCodes.WEEKLY_KEY_NOT_ENOUGH = 11000;
            AppDto.AppErrorCodes.FIREWORK_ACTIVITY_NOT_OPEN = 12000;
            AppDto.AppErrorCodes.CONSUMPTION_ACTIVITY_NOT_OPEN = 13000;
            AppDto.AppErrorCodes.HAPPYGRID_ACTIVITY_NOT_OPEN = 13100;
            AppDto.AppErrorCodes.HAPPYGRID_ACTIVITY_NOT_ENOUGH = 13101;
            AppDto.AppErrorCodes.HAPPYGRID_ACTIVITY_DAILY_FINISHED = 13102;
            AppDto.AppErrorCodes.HAPPYGRID_ACTIVITY_REWARDED = 13103;
            AppDto.AppErrorCodes.HAPPYGRID_ACTIVITY_NOT_FINISHED = 13104;
            AppDto.AppErrorCodes.CAMPWAR_NOT_OPEN = 14000;
            AppDto.AppErrorCodes.CAMPWAR_PLAYER_LEVEL_NOT_SUIT = 14001;
            AppDto.AppErrorCodes.CAMPWAR_FAILURE_TIMES_OUT = 14002;
            AppDto.AppErrorCodes.CAMPWAR_MEMBER_LEVEL_NOT_SUIT = 14003;
            AppDto.AppErrorCodes.CAMPWAR_MEMBER_TIMES_OUT = 14004;
            AppDto.AppErrorCodes.CAMPWAR_MEMBER_COUNT_NOT_SUIT = 14005;
            AppDto.AppErrorCodes.CAMPWAR_PEACH_SCORE_LIMIT = 14006;
            AppDto.AppErrorCodes.CAMPWAR_PEACH_PICK_BY_OTHER = 14007;
            AppDto.AppErrorCodes.CAMPWAR_RECRUIT_OTHER_CAMP = 14008;
            AppDto.AppErrorCodes.CAMPWAR_RECRUIT_CAMP_SCORE_NOT_ENOUGH = 14009;
            AppDto.AppErrorCodes.CAMPWAR_IN_PROTECT = 14010;
            AppDto.AppErrorCodes.CAMPWAR_TARGET_IN_PROTECT = 14011;
            AppDto.AppErrorCodes.CAMPWAR_NOT_BATTLE_TIME = 14012;
            AppDto.AppErrorCodes.CAMPWAR_IN_SAME_CAMP = 14013;
            AppDto.AppErrorCodes.CAMPWAR_PEACH_PICKUP_ALREADY = 14014;
            AppDto.AppErrorCodes.CAMPWAR_PEACH_PICKUP_LONG_DISTANCE = 14015;
            AppDto.AppErrorCodes.CAMPWAR_PEACH_PICKING = 14016;
            AppDto.AppErrorCodes.CAMPWAR_CANNOT_JOIN_TEAM = 14017;
            AppDto.AppErrorCodes.CAMPWAR_CANNOT_INVITE = 14018;
            AppDto.AppErrorCodes.CAMPWAR_INVITE_SAME_CAMP = 14019;
            AppDto.AppErrorCodes.CAMPWAR_JOIN_SAME_CAMP = 14020;
            AppDto.AppErrorCodes.CAMPWAR_CANNOT_BACK_TEAM = 14021;
            AppDto.AppErrorCodes.CAMPWAR_CANNOT_AUTO_MATCH_TEAM = 14022;
            AppDto.AppErrorCodes.CAMPWAR_MEMBER_DIFF_CAMP = 14023;
            AppDto.AppErrorCodes.CAMPWAR_MEMBER_OUT_TEAM = 14024;
            AppDto.AppErrorCodes.CAMPWAR_MEMBER_NOT_IN_TEAM = 14025;
            AppDto.AppErrorCodes.CAMPWAR_TARGET_ALREADY_KILL = 14026;
            AppDto.AppErrorCodes.UNKNOWN = 15000;
            AppDto.AppErrorCodes.DONS_FAIL = 15001;
            AppDto.AppErrorCodes.DONS_COUNT_OVER_LIMIT = 15002;
            AppDto.AppErrorCodes.DATA_NOT_EXIST = 15003;
            AppDto.AppErrorCodes.GRADE_NOT_ENOUGH = 15004;
            AppDto.AppErrorCodes.RIDE_PLAYER_STATUS_CLOSE = 16000;
            AppDto.AppErrorCodes.RIDE_GRADE_EXP_DAILY_LIMIT = 16001;
            AppDto.AppErrorCodes.RIDE_MOUNT_HAS_EXITS = 16002;
            AppDto.AppErrorCodes.RIDE_LAND_MOUNT_OVER_LIMIT = 16003;
            AppDto.AppErrorCodes.RIDE_FLY_MOUNT_OVER_LIMIT = 16004;
            AppDto.AppErrorCodes.RIDE_MOUNT_EXCHANGE_PROPS_COUNT_NOT_ENOUGH = 16005;
            AppDto.AppErrorCodes.RIDE_GRADE_NOT_EXITS = 16006;
            AppDto.AppErrorCodes.RIDE_GRADE_NOT_ENOUGH = 16007;
            AppDto.AppErrorCodes.RIDE_MOUNT_APTITUDE_PROPS_COUNT_NOT_ENOUGH = 16008;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_NOT_EXITS = 16009;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_HAS_LEARNED = 16010;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_POINT_NOT_ENOUGH = 16011;
            AppDto.AppErrorCodes.RIDE_FACTION_MAX_ASSIGNABLE_POINT = 16012;
            AppDto.AppErrorCodes.RIDE_PASSIVE_MAX_ASSIGNABLE_POINT = 16013;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_HAS_NOT_LEARNED = 16014;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_PRE_SKILL_NOT_EXITS = 16015;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_LOCKED = 16016;
            AppDto.AppErrorCodes.RIDE_MOUNT_SKILL_CLOSED = 16017;
            AppDto.AppErrorCodes.RIDE_PASSIVE_EXP_NOT_ENOUGH = 16018;
            AppDto.AppErrorCodes.RIDE_PASSIVE_MUST_UPGRADE = 16019;
            AppDto.AppErrorCodes.RIDE_PASSIVE_LEVEL_LIMIT = 16020;
            AppDto.AppErrorCodes.RIDE_PASSIVE_CANNOT_RESET_EXTRA = 16021;
            AppDto.AppErrorCodes.RIDE_CHANGEFACE_ERROR = 16022;
            AppDto.AppErrorCodes.RIDE_CHANGEFACE_PROPS_COUNT_NOT_ENOUGH = 16023;
            AppDto.AppErrorCodes.RIDE_ORNAMENT_PROPS_COUNT_NOT_ENOUGH = 16024;
            AppDto.AppErrorCodes.RIDE_DYE_PROPS_COUNT_NOT_ENOUGH = 16025;
            AppDto.AppErrorCodes.RIDE_DYEORNAMENT_PROPS_COUNT_NOT_ENOUGH = 16026;
            AppDto.AppErrorCodes.RIDE_PLAYER_STATUS_ERROR = 16027;
            AppDto.AppErrorCodes.RIDE_FACTION_SKILL_NOT_MATCH = 16028;
            AppDto.AppErrorCodes.RIDE_DYE_NOT_MATCH = 16029;
            AppDto.AppErrorCodes.RIDE_CASETYPE_NOT_MATCH = 16030;
            AppDto.AppErrorCodes.RIDE_SHOW_MOUNT_ERROR = 16031;
            AppDto.AppErrorCodes.RIDE_MOUNT_NOT_EXITS = 16032;
            AppDto.AppErrorCodes.RIDE_MOUNT_EXCHANGEEXP_NOT_SUPPORT = 16033;
            AppDto.AppErrorCodes.SHIPMENT_NOT_OPEN = 16500;
            AppDto.AppErrorCodes.SHIPMENT_PLAYER_LEVEL_NOT_SUIT = 16501;
            AppDto.AppErrorCodes.SHIPMENT_MEMBER_SIZE_OVER = 16502;
            AppDto.AppErrorCodes.SHIPMENT_CANNOT_JOIN_TEAM = 16503;
            AppDto.AppErrorCodes.SHIPMENT_CANNOT_INVITE = 16504;
            AppDto.AppErrorCodes.SHIPMENT_CANNOT_BACK_TEAM = 16505;
            AppDto.AppErrorCodes.SHIPMENT_CANNOT_AUTO_MATCH_TEAM = 16506;
            AppDto.AppErrorCodes.SHIPMENT_TARGET_IN_PROTECT = 16507;
            AppDto.AppErrorCodes.SHIPMENT_NOT_BATTLE_TIME = 16508;
            AppDto.AppErrorCodes.SHIPMENT_MEMBER_OUT_TEAM = 16509;
            AppDto.AppErrorCodes.SHIPMENT_MEMBER_LEVEL_NOT_SUIT = 16510;
            AppDto.AppErrorCodes.SHIPMENT_NOT_RACING_TIME = 16511;
            AppDto.AppErrorCodes.SHIPMENT_ACCEPT_MEMBER_OUT_TEAM = 16512;
            AppDto.AppErrorCodes.SHIPMENT_ACCEPT_LEADER = 16513;
            AppDto.AppErrorCodes.SHIPMENT_ACCEPT_OVER_SHIPMENT_LIMIT = 16514;
            AppDto.AppErrorCodes.SHIPMENT_NO_FOUND_PLAYER_INFO = 16515;
            AppDto.AppErrorCodes.SHIPMENT_NOT_MATCH_TASKTYPE = 16516;
            AppDto.AppErrorCodes.SHIPMENT_NOT_MATCH_SUBMITNPC = 16517;
            AppDto.AppErrorCodes.SHIPMENT_FINISH_LEADER = 16518;
            AppDto.AppErrorCodes.SHIPMENT_NOT_MISSION = 16519;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_PLAYER_GRADE_LIMIT = 16520;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_PLAYER_PROTECT_RANGE = 16521;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_PLAYER_IN_SHIPMENT = 16522;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_PLAYER_NO_SHIPMENT = 16523;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_PLAYER_SELF_SHIPMENT = 16524;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_SELF_BATTLE_CD = 16525;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_TARGET_BATTLE_CD = 16526;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_TARGET_BATTLE_BUFF = 16527;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_TARGET_MUST_IN_SCREENDISTANCE = 16528;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_TARGET_BATTLE_FULL = 16529;
            AppDto.AppErrorCodes.SHIPMENT_ATTACK_SELF_BATTLE_FULL = 16530;
            AppDto.AppErrorCodes.SHIPMENT_CLOSED = 16531;
            AppDto.AppErrorCodes.SHIPMENT_MEMBER_HAS_MISSION = 16532;
            AppDto.AppErrorCodes.DUEL_TARGETER_NO_EXIST = 16600;
            AppDto.AppErrorCodes.DUEL_EXIST_SENDER = 16601;
            AppDto.AppErrorCodes.DUEL_EXIST_RECEIVER = 16602;
            AppDto.AppErrorCodes.DUEL_BATTLE_SENDER = 16603;
            AppDto.AppErrorCodes.DUEL_BATTLE_RECEIVER = 16604;
            AppDto.AppErrorCodes.DUEL_GRADE_LIMIT_RECEIVER = 16605;
            AppDto.AppErrorCodes.DUEL_TEAM_MUST_LEADER = 16606;
            AppDto.AppErrorCodes.DUEL_NO_EXIST = 16607;
            AppDto.AppErrorCodes.DUEL_SENDER_OFFLINE = 16608;
            AppDto.AppErrorCodes.DUEL_SENDER_INBATTLE = 16609;
            AppDto.AppErrorCodes.DUEL_SELF_START_CHECK = 16610;
            AppDto.AppErrorCodes.DUEL_TEAM_START_CHECK = 16611;
            AppDto.AppErrorCodes.DUEL_TEAM_ERROR = 16612;
            AppDto.AppErrorCodes.DUEL_TEAM_WAITING_CONFIRM = 16613;
            AppDto.AppErrorCodes.DUEL_CANT_BATTLE_SCENE = 16614;
            AppDto.AppErrorCodes.TALENT_SHOW_NOT_JOIN = 16700;
            AppDto.AppErrorCodes.TALENT_SHOW_DISMISS = 16701;
            AppDto.AppErrorCodes.TALENT_SHOW_DISMISS_PLAYER = 16702;
            AppDto.AppErrorCodes.TALENT_SHOW_GRADE_NOT_ENOUGH = 16703;
            AppDto.AppErrorCodes.TALENT_SHOW_ACTIVE_NOT_ENOUGH = 16704;
            AppDto.AppErrorCodes.TALENT_SHOW_FREE_VOTE_OUT = 16705;
            AppDto.AppErrorCodes.TALENT_SHOW_HAS_REG = 16706;
            AppDto.AppErrorCodes.TALENT_SHOW_NOT_REG = 16707;
            AppDto.AppErrorCodes.TALENT_SHOW_NOT_ENOUGH_CELL = 16708;
            AppDto.AppErrorCodes.TALENT_SHOW_OVER = 16709;
            AppDto.AppErrorCodes.TALENT_SHOW_VOTE_START = 16710;
            AppDto.AppErrorCodes.TALENT_SHOW_FEMALE_ONLY = 16711;
            AppDto.AppErrorCodes.TALENT_SHOW_VOTE_OUT = 16712;
            AppDto.AppErrorCodes.TALENT_SHOW_VOTE_LIMIT = 16713;
            AppDto.AppErrorCodes.TALENT_SHOW_UPDATE_CD_LIMIT = 16714;
            AppDto.AppErrorCodes.TALENT_SHOW_POST_CD_LIMIT = 16715;
            AppDto.AppErrorCodes.TALENT_SHOW_CHANGE_CHARACTOR_LIMIT = 16716;
            AppDto.AppErrorCodes.TALENT_SHOW_LINK_ERROR = 16717;
            AppDto.AppErrorCodes.EVERDAY_BLESSING_NOT_RECEIVE = 17000;
            AppDto.AppErrorCodes.EVERDAY_BLESSING_TODAY_RECEIVE = 17001;
            AppDto.AppErrorCodes.EVERDAY_BLESSING_INDEX_NOT_EXIST = 17002;
            AppDto.AppErrorCodes.EVERDAY_BLESSING_DATA_ERROR = 17003;
            AppDto.AppErrorCodes.SWORN_TEAM_MEMBER_AWAY = 18000;
            AppDto.AppErrorCodes.SWORN_GRADE_NOT_ENOUGH = 18001;
            AppDto.AppErrorCodes.SWORN_ON_MARRIAGE = 18002;
            AppDto.AppErrorCodes.SWORN_ON_MASTER_AND_APPRENTICE = 18003;
            AppDto.AppErrorCodes.SWORN_ON_OTHER = 18004;
            AppDto.AppErrorCodes.SWORN_MUST_REQUEST_BY_LEADER = 18005;
            AppDto.AppErrorCodes.SWORN_WITH_OTHERS_ALREADY = 18006;
            AppDto.AppErrorCodes.SWORN_NOT_FOUND = 18007;
            AppDto.AppErrorCodes.SWORN_KICK_MY_SELF = 18008;
            AppDto.AppErrorCodes.SWORN_NOT_MY_BRO = 18009;
            AppDto.AppErrorCodes.SWORN_HAD_KICK_INFO = 18010;
            AppDto.AppErrorCodes.SWORN_KICK_INFO_EXPIRED = 18011;
            AppDto.AppErrorCodes.SWORN_KICK_CANCEL_MY_SELF = 18012;
            AppDto.AppErrorCodes.SWORN_BRO_NOT_IN_TEAM = 18013;
            AppDto.AppErrorCodes.SWORN_LATIN_SYMBOL_LIMIT = 18014;
            AppDto.AppErrorCodes.SWORN_CANNOT_DEL_FRIEND = 18015;
            AppDto.AppErrorCodes.HUNDRED_NOT_TEAM = 18020;
            AppDto.AppErrorCodes.PLAYER_GRADE_NOT_SUIT = 18021;
            AppDto.AppErrorCodes.NOT_THIS_GUILD_MEMBER = 18022;
            AppDto.AppErrorCodes.HUNDRED_TIMES_OUT = 18023;
            AppDto.AppErrorCodes.INTERACT_IN_CD = 18024;
            AppDto.AppErrorCodes.NPC_DISAPPEAR_1 = 18025;
            AppDto.AppErrorCodes.WORLD_GHOST_LEVEL_NOT_SUIT = 18030;
            AppDto.AppErrorCodes.WORLD_GHOST_MEMBER_LEVEL_NOT_SUIT = 18031;
            AppDto.AppErrorCodes.WORLD_GHOST_NOT_BATTLE_TIME = 18032;
            AppDto.AppErrorCodes.WORLD_GHOST_KILLED = 18033;
            AppDto.AppErrorCodes.WORLD_GHOST_CD = 18034;
            AppDto.AppErrorCodes.CANNOT_INVITE_OUT_SCENE_TARGET = 18035;
            AppDto.AppErrorCodes.CANNOT_JOIN_TEAM_OUT_SCENE = 18036;
            AppDto.AppErrorCodes.CANNOT_BACK_TEAM_OUT_SCENE = 18037;
            AppDto.AppErrorCodes.VIOLATION_THESAURUS_MATCH = 18100;
            AppDto.AppErrorCodes.VIOLATION_THESAURUS_TALK_MATCH = 18101;
            AppDto.AppErrorCodes.GUILD_VIOLATION_THESAURUS_MATCH = 18102;
            AppDto.AppErrorCodes.UNIVERSAL_WELFARE_GRADE_ENOUGH = 19000;
            AppDto.AppErrorCodes.UNIVERSAL_WELFARE_ACTIVE_NOT_ENOUGH = 19001;
            AppDto.AppErrorCodes.UNIVERSAL_WELFARE_DATA_ERROR = 19002;
            AppDto.AppErrorCodes.UNIVERSAL_WELFARE_DAILY_HAS_RECEIVED = 19003;
            AppDto.AppErrorCodes.UNIVERSAL_WELFARE_MONTHLY_HAS_RECEIVED = 19004;
            AppDto.AppErrorCodes.UNIVERSAL_WELFARE_RANK_NOT_EXIT = 19005;
            AppDto.AppErrorCodes.MAGIC_COMPOSE_NOT_ENOUGH = 19100;
            AppDto.AppErrorCodes.MAGIC_EQUIPMENT_NOT_EXIST = 19101;
            AppDto.AppErrorCodes.EQUIPMENT_NOT_MAGIC = 19102;
            AppDto.AppErrorCodes.MAGIC_EQUIPMENT_CANNT_DECOMPOSE = 19103;
            AppDto.AppErrorCodes.MAGIC_OVER_MAX_WEAR_COUNT2 = 19104;
            AppDto.AppErrorCodes.MAGIC_OVER_MAX_WEAR_COUNT3 = 19105;
            AppDto.AppErrorCodes.MAGIC_OVER_MAX_GRADE = 19106;
            AppDto.AppErrorCodes.MAGIC_PASSIVE_SKILL_TYPE_NOT_EXIST = 19107;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_NOT_OPEN = 19500;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_NEED_TEAM = 19501;
            AppDto.AppErrorCodes.LEADER_NOT_IN_DATANG_MATCHLESS_SCENE = 19502;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_TEAM_SIZE_NOT_SUIT = 19503;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_MEMBER_OUT_TEAM_ENTRY = 19504;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_MEMBER_LEVEL_NOT_SUIT = 19505;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_MEMBER_OUT_TEAM_BATTLE = 19506;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_IS_NOT_LEAER = 19507;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_GRADE_NOT_ENOUGH = 19508;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_GRADE_NOT_ENOUGH_TO_ENTER = 19509;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_CANNOT_AUTO_MATCH_TEAM = 19510;
            AppDto.AppErrorCodes.DATANG_MATCHLESS_GRADE_NOT_ENOUGH_TO_BACKTEAM = 19511;
            AppDto.AppErrorCodes.CSPK_LEVEL_NOT_ENOUGH = 20000;
            AppDto.AppErrorCodes.CSPK_GROUP_NOT_MATCH = 20001;
            AppDto.AppErrorCodes.CSPK_COST_NOT_ENOUGH = 20002;
            AppDto.AppErrorCodes.CSPK_APPLICATION_EXPIRED = 20003;
            AppDto.AppErrorCodes.CSPK_NOT_ROUND3_REWARD_PLAYER = 20004;
            AppDto.AppErrorCodes.CSPK_NOT_ROUND3_REWARD_PLAYER_ME = 20005;
            AppDto.AppErrorCodes.CSPK_WATCH_NOT_ALLOW = 20006;
            AppDto.AppErrorCodes.CSPK_WATCH_HAS_TEAM = 20007;
            AppDto.AppErrorCodes.CSPK_SERVER_REWARD_NOT_FOUND = 20008;
            AppDto.AppErrorCodes.CSPK_SERVER_REWARD_GOT = 20009;
            AppDto.AppErrorCodes.CSPK_NOT_OPEN = 20010;
            AppDto.AppErrorCodes.CSPK_PROPS = 20011;
            AppDto.AppErrorCodes.CSPK_WATCHER_NOT_ALLOW_TEAM = 20012;
            AppDto.AppErrorCodes.CSPK_OPEN_OTHER_ACTIVITY = 20013;
            AppDto.AppErrorCodes.CSPK_INVITE_CHECK = 20014;
            AppDto.AppErrorCodes.CSPK_NOT_IN_SCENE = 20015;
            AppDto.AppErrorCodes.CSPK_TEAM_GROUP_NOT_MATCH = 20016;
            AppDto.AppErrorCodes.CHILD_GRADE_NOT_ENOUGH = 20020;
            AppDto.AppErrorCodes.CHILD_SINGLE_NOT_MORE_CHILD = 20021;
            AppDto.AppErrorCodes.CHILD_COUPLE_GRADE_NOT_ENOUGH = 20022;
            AppDto.AppErrorCodes.CHILD_COUPLE_FRIENDLY_NOT_ENOUGH = 20023;
            AppDto.AppErrorCodes.CHILD_COUPLE_NOT_MORE_CHILD = 20024;
            AppDto.AppErrorCodes.CHILD_NOT_FOUND = 20025;
            AppDto.AppErrorCodes.CHILD_JOIN_FACTION_ALREADY = 20026;
            AppDto.AppErrorCodes.CHILD_IN_BUSY = 20027;
            AppDto.AppErrorCodes.CHILD_IN_TRAINING = 20028;
            AppDto.AppErrorCodes.CHILD_OUT_OF_MAX_TRAIN = 20029;
            AppDto.AppErrorCodes.CHILD_ADULT_ALREADY = 20030;
            AppDto.AppErrorCodes.CHILD_TRAIN_TIME_NOT_ENOUGH = 20031;
            AppDto.AppErrorCodes.CHILD_IN_BATTLE_CANNOT_DROP = 20032;
            AppDto.AppErrorCodes.CHILD_FIRE_BY_PARENT_ONLY = 20033;
            AppDto.AppErrorCodes.CHILD_JOIN_BATTLE_ALREADY = 20034;
            AppDto.AppErrorCodes.CHILD_POWER_UP_IN_BATTLE = 20035;
            AppDto.AppErrorCodes.CHILD_COUPLE_RESUME_NO_MORE = 20036;
            AppDto.AppErrorCodes.CHILD_SINGLE_RESUME_NO_MORE = 20037;
            AppDto.AppErrorCodes.CHILD_CANNOT_RESUME = 20038;
            AppDto.AppErrorCodes.CHILD_CANNOT_FIRST_RESUME = 20039;
            AppDto.AppErrorCodes.CHILD_BACK_WHEN_DIVORCE = 20040;
            AppDto.AppErrorCodes.CHILD_CANNOT_JOIN_BATTLE = 20041;
            AppDto.AppErrorCodes.CHILD_CANNOT_OPT = 20042;
            AppDto.AppErrorCodes.CHILD_HAD_ORNAMENT = 20043;
            AppDto.AppErrorCodes.MONKEY_PLAY_TIMES_OUT = 20050;
            AppDto.AppErrorCodes.MONKEY_PLAY_NO_TEAM = 20051;
            AppDto.AppErrorCodes.MONKEY_PLAY_COPPER_NOT_ENOUGH = 20052;
            AppDto.AppErrorCodes.KITTY_GONE = 20060;
            AppDto.AppErrorCodes.KITTY_QUESTION_ANSWERED = 20061;
            AppDto.AppErrorCodes.MILITARY_MISSION_UN_AVAILABLE = 20065;
            AppDto.AppErrorCodes.MILITARY_OUT_OF_DAILY_TIMES = 20066;
            AppDto.AppErrorCodes.BATTLE_PLAYER_NOT_EXIST = 30000;
            AppDto.AppErrorCodes.SKILL_IN_CD_TIME = 30001;
            AppDto.AppErrorCodes.BATTLE_NOT_EXIST = 30002;
            AppDto.AppErrorCodes.SKILL_NOT_EXIST = 30003;
            AppDto.AppErrorCodes.BATTLE_PLAYER_DEAD = 30004;
            AppDto.AppErrorCodes.PLAYER_NOT_IN_BATTLE = 30005;
            AppDto.AppErrorCodes.IS_NOT_PLAYER_SKILL = 30006;
            AppDto.AppErrorCodes.FACTION_NOT_MATCH = 30007;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AppErrorCodes);
var AppDto$AppItem = {
    fullname: "AppDto.AppItem",
    baseTypeName: "AppDto.RealItem",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.saleSilverPrice = 0;
            this.sort = 0;
            this.nimbus = 0;
            this.gainWayIds = null;
            AppDto.RealItem.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AppItem);
var AppDto$AppStaticConfigs = {
    fullname: "AppDto.AppStaticConfigs",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.AppStaticConfigs.RENAME_ITEM_ID = 200;
            AppDto.AppStaticConfigs.RENAME_FACTOR1 = 201;
            AppDto.AppStaticConfigs.RENAME_FACTOR2 = 202;
            AppDto.AppStaticConfigs.RENAME_FACTOR3 = 203;
            AppDto.AppStaticConfigs.PLAYER_BORN_POINT_X = 204;
            AppDto.AppStaticConfigs.PLAYER_BORN_POINT_Z = 205;
            AppDto.AppStaticConfigs.PLAYER_BORN_RADIUS = 206;
            AppDto.AppStaticConfigs.NETWORK_DELAY_TIME = 207;
            AppDto.AppStaticConfigs.PLAYER_WALK_ADJUST_TIME_DIFF = 208;
            AppDto.AppStaticConfigs.PLAYER_WALK_ADJUST_TIMES = 209;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_TIME_CONDITION = 210;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_MAX_TIME = 211;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_FACTOR1 = 212;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_FACTOR2 = 213;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_FACTOR3 = 214;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_FACTOR4 = 215;
            AppDto.AppStaticConfigs.PLAYER_RESERVE_EXP_GRADE_CONDITION = 216;
            AppDto.AppStaticConfigs.PERPETUAL_RENAME_ITEM_ID = 217;
            AppDto.AppStaticConfigs.SPECIAL_SKILL_CONFIG = 218;
            AppDto.AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR1 = 220;
            AppDto.AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR2 = 221;
            AppDto.AppStaticConfigs.INGOT_CONVERT_SILVER = 222;
            AppDto.AppStaticConfigs.INGOT_EXCHANGE_RENMINBI = 223;
            AppDto.AppStaticConfigs.VIP_MAX_TIME = 230;
            AppDto.AppStaticConfigs.VIP_MONTH_DAILY_BONUS = 231;
            AppDto.AppStaticConfigs.MAX_DOUBLE_EXP_POINT = 240;
            AppDto.AppStaticConfigs.WEEK_POINT_FOR_LESS_SERVERGRADE = 241;
            AppDto.AppStaticConfigs.WEEK_POINT_FOR_EQUIL_OR_GRATE_SERVERGRADE = 242;
            AppDto.AppStaticConfigs.OPEN_MAX_DOUBLE_EXP_POINT = 243;
            AppDto.AppStaticConfigs.PER_OPEN_DOUBLE_EXP_POINT = 244;
            AppDto.AppStaticConfigs.MAX_SATIATION = 245;
            AppDto.AppStaticConfigs.PLAYER_AUTO_SALE_EQUIPLEVEL_LIMIT = 246;
            AppDto.AppStaticConfigs.SPEC_TOLLGATE_ID = 247;
            AppDto.AppStaticConfigs.SPEC_TOLLGATE_MONSTER_ID = 248;
            AppDto.AppStaticConfigs.PLAYER_STOP_UPGRADE_LIMIT_LEVEL = 249;
            AppDto.AppStaticConfigs.BUY_VIGOUR_PROP_ID = 250;
            AppDto.AppStaticConfigs.DAILY_GIVE_DOUBLE_EXP_POINT = 251;
            AppDto.AppStaticConfigs.DAILY_GIVE_DOUBLE_EXP_POINT_MAX = 252;
            AppDto.AppStaticConfigs.DAILY_RESET_PET_TIMES_LIMIT = 253;
            AppDto.AppStaticConfigs.DAILY_RESET_EQUIPMENT_SKILL_TIMES_LIMIT = 254;
            AppDto.AppStaticConfigs.REPORT_DAILY_MAX = 255;
            AppDto.AppStaticConfigs.REPORT_GRADE_DIFF = 256;
            AppDto.AppStaticConfigs.MOONLIGHT_BOX_DAY_USE_TIMES = 257;
            AppDto.AppStaticConfigs.LUCURY_CHECKIN_GIFT_PHASE_ID = 258;
            AppDto.AppStaticConfigs.LUCURY_GIFT_CHECKIN_PHASE_ID = 259;
            AppDto.AppStaticConfigs.DAILY_RESET_EQUIPMENT_PROPERTY_TIMES_LIMIT = 260;
            AppDto.AppStaticConfigs.DAILY_REFRESH_EQ_APTITUDE_TIMES_LIMIT = 261;
            AppDto.AppStaticConfigs.QUEUE_START_MUN = 300;
            AppDto.AppStaticConfigs.MAX_LOGINED_PLAYER_SIZE = 301;
            AppDto.AppStaticConfigs.QUEUE_REFLASH_PERIOD = 302;
            AppDto.AppStaticConfigs.QUEUE_KEEP_TIME_OUT = 303;
            AppDto.AppStaticConfigs.QUEUE_MAX_SIZE = 304;
            AppDto.AppStaticConfigs.SCENE_MONSTER_STAR_SIZE = 400;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PLOUGH_SIZE = 401;
            AppDto.AppStaticConfigs.SCENE_MONSTER_FOR_GENERAL = 402;
            AppDto.AppStaticConfigs.SCENE_MONSTER_FOR_BABY = 403;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PROPS_GENERAL_MAX_COUNT = 404;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PROPS_GENERAL_MIN_SIZE = 405;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PROPS_GENERAL_MAX_SIZE = 406;
            AppDto.AppStaticConfigs.SCENE_MONSTER_SYS_GENERAL_MAX_COUNT = 407;
            AppDto.AppStaticConfigs.SCENE_MONSTER_SYS_GENERAL_MIN_SIZE = 408;
            AppDto.AppStaticConfigs.SCENE_MONSTER_SYS_GENERAL_MAX_SIZE = 409;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PROPS_BABY_MAX_COUNT = 410;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PROPS_BABY_MIN_SIZE = 411;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PROPS_BABY_MAX_SIZE = 412;
            AppDto.AppStaticConfigs.SCENE_MONSTER_SYS_BABY_MAX_COUNT = 413;
            AppDto.AppStaticConfigs.SCENE_MONSTER_SYS_BABY_MIN_SIZE = 414;
            AppDto.AppStaticConfigs.SCENE_MONSTER_SYS_BABY_MAX_SIZE = 415;
            AppDto.AppStaticConfigs.SCENE_MONSTER_BABY_PERCENT = 416;
            AppDto.AppStaticConfigs.SCENE_MONSTER_PLOUGH_PLAYER_MIN_SIZE = 420;
            AppDto.AppStaticConfigs.SCENE_MONSTER_STAR_PLAYER_MIN_SIZE = 421;
            AppDto.AppStaticConfigs.SCENE_MONSTER_STAR_LEADER_PLAYER_MIN_GRADE = 422;
            AppDto.AppStaticConfigs.SCENE_MONSTER_STAR_REWARD_MAX = 423;
            AppDto.AppStaticConfigs.SCENE_MONSTER_ROBBER_GUILD_MEMBER_MIN_SIZE = 424;
            AppDto.AppStaticConfigs.SCENE_MONSTER_ROBBER_CHECK_PERIOD = 425;
            AppDto.AppStaticConfigs.SCENE_MONSTER_ROBBER_LIMIT_EXTRA_REWARD = 426;
            AppDto.AppStaticConfigs.SCENE_PRECIOUD_BOX_SIZE = 427;
            AppDto.AppStaticConfigs.SCENE_PRECIOUS_BOX = 428;
            AppDto.AppStaticConfigs.SCENE_PRECIOUS_BOX_FALL_ITEM = 429;
            AppDto.AppStaticConfigs.SCENE_PRECIOUS_BOX_CONSUME_COPPER = 430;
            AppDto.AppStaticConfigs.QUESTION_FIRST_PLAYER_NPC_ID = 431;
            AppDto.AppStaticConfigs.BAN_SCENE_ID = 432;
            AppDto.AppStaticConfigs.SCENE_NPC_WALK_DISTANCE = 433;
            AppDto.AppStaticConfigs.SCENE_NPC_WALK_INTERVAL_MIN = 434;
            AppDto.AppStaticConfigs.SCENE_NPC_WALK_INTERVAL_MAX = 435;
            AppDto.AppStaticConfigs.SCENE_NPC_WALK_ENABLE = 436;
            AppDto.AppStaticConfigs.PACK_EXPAND_SIZE = 500;
            AppDto.AppStaticConfigs.BACKPACK_EXPAND_CONSUME_ITEM_ID = 501;
            AppDto.AppStaticConfigs.WAREHOUSE_EXPAND_CONSUME_COPPER = 502;
            AppDto.AppStaticConfigs.REFINE_TO_BIND_NIMBUS_FACTOR = 503;
            AppDto.AppStaticConfigs.BACK_RECYCLE_MAX_CAPACITY = 504;
            AppDto.AppStaticConfigs.FALLITEM_GAIN_FLOAT_RANGE = 505;
            AppDto.AppStaticConfigs.COPPER_ID = 506;
            AppDto.AppStaticConfigs.INGOT_CONVERT_NIMBUS_FACTOR = 507;
            AppDto.AppStaticConfigs.CONVERT_NIMBUS_CONSUME_INGOT = 508;
            AppDto.AppStaticConfigs.PROPS_DOUBLE_EXP_POINT_ID = 509;
            AppDto.AppStaticConfigs.PROPS_EXP_FRUIT_ID = 510;
            AppDto.AppStaticConfigs.PET_USE_FIGHT_BOOK_KEEP = 511;
            AppDto.AppStaticConfigs.ATTACK_STONE_ID = 512;
            AppDto.AppStaticConfigs.MAGIC_STONE_ID = 513;
            AppDto.AppStaticConfigs.PROPS_DOUBLE_EXP_POINT_SPEC_ID = 514;
            AppDto.AppStaticConfigs.PET_WAREHOUSE_EXPAND_SIZE = 550;
            AppDto.AppStaticConfigs.PET_WAREHOUSE_EXPAND_CONSUME_COPPER = 551;
            AppDto.AppStaticConfigs.PET_WAREHOUSE_MAX_CAPACITY = 552;
            AppDto.AppStaticConfigs.PET_DISCUSS_MARK = 553;
            AppDto.AppStaticConfigs.PET_ORNAMENT_MIN_GRADE = 554;
            AppDto.AppStaticConfigs.TRADE_BUY_FACTOR = 600;
            AppDto.AppStaticConfigs.TRADE_SELL_FACTOR = 601;
            AppDto.AppStaticConfigs.TRADE_RESET_FACTOR = 602;
            AppDto.AppStaticConfigs.TRADE_NEW_FACTOR = 603;
            AppDto.AppStaticConfigs.STALL_INIT_CAPABILITY = 604;
            AppDto.AppStaticConfigs.STALL_MAX_CAPABILITY = 605;
            AppDto.AppStaticConfigs.STALL_CAPABILITY_FACTOR1 = 606;
            AppDto.AppStaticConfigs.STALL_CAPABILITY_FACTOR2 = 607;
            AppDto.AppStaticConfigs.STALL_CAPABILITY_FACTOR3 = 608;
            AppDto.AppStaticConfigs.STALL_ITEM_UP_VALID_TIME = 609;
            AppDto.AppStaticConfigs.STALL_ITEM_REFRESH_TIME = 610;
            AppDto.AppStaticConfigs.STALL_ITEM_PAGE_SIZE = 611;
            AppDto.AppStaticConfigs.STALL_ITEM_TOTAL_COUNT = 612;
            AppDto.AppStaticConfigs.STALL_ITEM_SYSTEM_MAX_SIZE = 613;
            AppDto.AppStaticConfigs.STALL_ITEM_REFRESH = 614;
            AppDto.AppStaticConfigs.TRADE_PET_DAILY_SELL_MAX_SIZE = 615;
            AppDto.AppStaticConfigs.TRADE_PET_SUPPLY_PERIOD = 616;
            AppDto.AppStaticConfigs.TRADE_PET_DAILY_SELL_LIMIT = 617;
            AppDto.AppStaticConfigs.STALL_ITEM_EQUIPMENT_TYPE_ID = 620;
            AppDto.AppStaticConfigs.STALL_ITEM_EQUIPMENT_TYPE_POOL_COUNT = 621;
            AppDto.AppStaticConfigs.STALL_ITEM_EQUIPMENT_TYPE_SHOW_COUNT = 622;
            AppDto.AppStaticConfigs.STALL_ITEM_SPECIAL_MEDICIAL_LEVEL_MIX = 623;
            AppDto.AppStaticConfigs.STALL_ITEM_SPECIAL_MEDICIAL_LEVEL_MAX = 624;
            AppDto.AppStaticConfigs.STALL_ITEM_ENCHANTING_LEVEL_MIN = 625;
            AppDto.AppStaticConfigs.STALL_ITEM_ENCHANTING_LEVEL_MAX = 626;
            AppDto.AppStaticConfigs.SHOP_BUY_SPECIFIC_MEDICINE = 630;
            AppDto.AppStaticConfigs.AUCTION_MAX_SELLING = 631;
            AppDto.AppStaticConfigs.AUCTION_SYSTEM_SELLING = 632;
            AppDto.AppStaticConfigs.AUCTION_PUBLICITY_DURATION = 633;
            AppDto.AppStaticConfigs.AUCTION_VALID_DURATION = 634;
            AppDto.AppStaticConfigs.AUCTION_DEFAULT_DURATION = 635;
            AppDto.AppStaticConfigs.AUCTION_PRICE_CHANGE_RATE = 636;
            AppDto.AppStaticConfigs.AUCTION_FORBID_RATE = 637;
            AppDto.AppStaticConfigs.MAIL_DAILY_GIFT_COUNT = 700;
            AppDto.AppStaticConfigs.MAIL_DAILY_GIFT_PRICE = 701;
            AppDto.AppStaticConfigs.MAIL_DAILY_FASION_DRESS_COUNT = 702;
            AppDto.AppStaticConfigs.MAIL_DAILY_CANDIES_COUNT = 703;
            AppDto.AppStaticConfigs.MOONLIGHT_BOX_ITEM_ID = 704;
            AppDto.AppStaticConfigs.CHATCHANNEL_TALKINTERVAL = 800;
            AppDto.AppStaticConfigs.CHATCHANNEL_WORLD_MIN_TALKINTERVAL = 801;
            AppDto.AppStaticConfigs.CHATCHANNEL_WORLD_MAX_TALKINTERVAL = 802;
            AppDto.AppStaticConfigs.CHATCHANNEL_CLEAR_TALKINTERVAL = 803;
            AppDto.AppStaticConfigs.CHATCHANNEL_EXT_TALKINTERVAL = 804;
            AppDto.AppStaticConfigs.CHATCHANNEL_WORLD_TALKINTERVAL = 805;
            AppDto.AppStaticConfigs.CHATCHANNEL_CHECK_SENSITIVE_WORD = 806;
            AppDto.AppStaticConfigs.FACTION_MISSION_DROP_WAIT_TIME = 900;
            AppDto.AppStaticConfigs.FACTION_MISSION_ONE_ROUND_RINGS_COUNT = 901;
            AppDto.AppStaticConfigs.FACTION_MISSION_DAILY_FINISH_REWARD_PARAM = 902;
            AppDto.AppStaticConfigs.FACTION_MISSION_WEEKLY_FINISH_REWARD_PARAM = 903;
            AppDto.AppStaticConfigs.GHOST_MISSION_ONE_ROUND_RINGS_COUNT = 904;
            AppDto.AppStaticConfigs.GHOST_MISSION_MAX_FINISH_COUNT = 905;
            AppDto.AppStaticConfigs.GHOST_MISSION_PLAYER_MIN_SIZE_CONDITION = 907;
            AppDto.AppStaticConfigs.GHOST_MISSION_LEADER_MAX_FINISH_COUNT = 908;
            AppDto.AppStaticConfigs.TREASURY_MISSION_REWARD_MAX_COUNT = 909;
            AppDto.AppStaticConfigs.TREASURY_MISSION_DROP_WAIT_TIME = 910;
            AppDto.AppStaticConfigs.GHOST_MISSION_TIMEOUT_AUTO_DROP = 912;
            AppDto.AppStaticConfigs.TREASURY_MISSION_TIMEOUT_AUTO_DROP = 913;
            AppDto.AppStaticConfigs.ONCE_MISSION_FIRSTID = 914;
            AppDto.AppStaticConfigs.GHOST_MISSION_GHOST_DEFAULT_MISSIONID = 915;
            AppDto.AppStaticConfigs.GHOST_MISSION_BOSS_REWARD_LIMIT = 916;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_BOX_SIZE = 920;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_CAN_HELPED_COUNT = 922;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_FINISH_BOX_SIZE_CAN_OPEN_HELP = 923;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_FINISH_TIME_LIMIT = 924;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_REFLUSH_TIME = 925;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_ONE_BOX_FRIEND_MAX_HELP_TIME = 926;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_ONE_DAY_HELP_OTHER_MAX_TIME = 927;
            AppDto.AppStaticConfigs.SILKROAD_MISSION_GUILD_HELP_TIME_INTERVAL = 928;
            AppDto.AppStaticConfigs.CHAIN_MISSION_ONE_ROUND_RINGS_COUNT = 930;
            AppDto.AppStaticConfigs.CHAIN_MISSION_FOLLOW_RINGS_NEED_INGOT_COUNT = 931;
            AppDto.AppStaticConfigs.CHAIN_MISSION_SLIP_BATTLE_NEED_INGOT_COUNT = 932;
            AppDto.AppStaticConfigs.CHAIN_MISSION_LEGENDTIME_LIMIT = 933;
            AppDto.AppStaticConfigs.MISSION_PLAYER_MIN_SIZE_IN_TEAM = 934;
            AppDto.AppStaticConfigs.CHAIN_MISSION_GUILD_HELP_PERIOD = 935;
            AppDto.AppStaticConfigs.FACTIONTRIAL_MISSION_ONE_ROUND_RINGS_COUNT = 936;
            AppDto.AppStaticConfigs.ONCE_MISSION_HELPER_REWARDS_FACTOR_ONE = 937;
            AppDto.AppStaticConfigs.ONCE_MISSION_CONFIRM_BATTLE_WAIT_TIME = 938;
            AppDto.AppStaticConfigs.ONCE_MISSION_CONFIRM_BATTLE_MEMBER_GRADE = 939;
            AppDto.AppStaticConfigs.TRIAL_MISSION_TODAY_ACTIVE_LIMIT = 940;
            AppDto.AppStaticConfigs.TRIAL_MISSION_DAILY_RING_LIMIT = 941;
            AppDto.AppStaticConfigs.TRIAL_MISSION_ACCEPT_WAIT_TIME = 942;
            AppDto.AppStaticConfigs.TRIAL_MISSION_NEXT_WAIT_TIME = 943;
            AppDto.AppStaticConfigs.TRIAL_MISSION_TEAM_MAX_MEMBER = 944;
            AppDto.AppStaticConfigs.TRIAL_MISSION_CHECK_LOGIN_TIME = 945;
            AppDto.AppStaticConfigs.TRIAL_MISSION_CHECK_REJECT_TIME = 946;
            AppDto.AppStaticConfigs.ONCE_MISSION_HELPER_REWARDS_FACTOR_TWO = 947;
            AppDto.AppStaticConfigs.ONCE_MISSION_HELPER_REWARDS_FACTOR_EXP_LIMIIT = 948;
            AppDto.AppStaticConfigs.ONCE_MISSION_HELPER_REWARDS_FACTOR_COPPER_LIMIIT = 949;
            AppDto.AppStaticConfigs.ONCE_MISSION_HELPER_REWARDS_FACTOR_DECREASE_FACTOR = 950;
            AppDto.AppStaticConfigs.GOOD_MISSION_ONE_ROUND_RINGS_COUNT = 951;
            AppDto.AppStaticConfigs.GOOD_MISSION_DROP_WAIT_TIME = 952;
            AppDto.AppStaticConfigs.GOOD_MISSION_HELPER_DAILY_LIMIT = 953;
            AppDto.AppStaticConfigs.PERSIST_DATA_MINUTE = 1000;
            AppDto.AppStaticConfigs.BATTLE_CACHE_TIME = 1001;
            AppDto.AppStaticConfigs.PLAYER_TOKEN_UPDATE_TIME = 1002;
            AppDto.AppStaticConfigs.LOGIN_QUEUE_AT_ONLINE_COUNT = 1003;
            AppDto.AppStaticConfigs.LOGIN_QUEUE_PLAYER_ENTER_PER_SECOND = 1004;
            AppDto.AppStaticConfigs.DEFAULT_FACTION_SKILL_LEVEL = 1005;
            AppDto.AppStaticConfigs.DEFAULT_SCENE_ID = 1006;
            AppDto.AppStaticConfigs.DEFAULT_PET_ID = 1007;
            AppDto.AppStaticConfigs.DEFAULT_FORMATION_ID = 1008;
            AppDto.AppStaticConfigs.DEFAULT_SCENE_X = 1009;
            AppDto.AppStaticConfigs.DEFAULT_SCENE_Z = 1010;
            AppDto.AppStaticConfigs.VIGOUR_FACTOR_1 = 1011;
            AppDto.AppStaticConfigs.VIGOUR_FACTOR_2 = 1012;
            AppDto.AppStaticConfigs.SATIATION_FILL_FACTOR = 1013;
            AppDto.AppStaticConfigs.MAX_RAGE_LIMIT = 1014;
            AppDto.AppStaticConfigs.MIN_RAGE = 1015;
            AppDto.AppStaticConfigs.MAX_RAGE = 1016;
            AppDto.AppStaticConfigs.MAX_USE_ITEM_COUNT = 1017;
            AppDto.AppStaticConfigs.VIGOUR_ACTIVE_FACTOR = 1018;
            AppDto.AppStaticConfigs.TEST_INGOT_BONUS = 1019;
            AppDto.AppStaticConfigs.TEST_LOGIN_BONUS_OPEN = 1020;
            AppDto.AppStaticConfigs.RAGE_INIT_VALUE = 1021;
            AppDto.AppStaticConfigs.OLD_SERVER_DISCOUNTRATE = 1022;
            AppDto.AppStaticConfigs.OLD_SERVER_DISCOUNT_BEGIN_DAY = 1023;
            AppDto.AppStaticConfigs.RETURN_REWARD_OFFLINEMIN = 1024;
            AppDto.AppStaticConfigs.RESET_RETURN_REWARD_MIN = 1025;
            AppDto.AppStaticConfigs.ACTIVE_GIFT_TO_INGOT = 1026;
            AppDto.AppStaticConfigs.OLD_SERVER_DISCOUNT_TIME = 1027;
            AppDto.AppStaticConfigs.PLUS_CHECK_IN_ACTIVE = 1028;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_MIN_MEET = 1100;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_MAX_MEET = 1101;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_NEED_BATTLE_TIME = 1102;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_BABY_VARIATION_RATE = 1103;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_WALK_INTERVAL_TIME_COMPATIBLE = 1104;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_WALK_ADD_TIME = 1105;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_MIN_LEVEL = 1106;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_MAX_LEVEL = 1107;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_BE_BAOBAO_RATE = 1108;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_1 = 1109;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_2 = 1110;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_3 = 1111;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_4 = 1112;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_11 = 1113;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_12 = 1114;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_21 = 1115;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_22 = 1116;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_31 = 1117;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_32 = 1118;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_41 = 1119;
            AppDto.AppStaticConfigs.HIDDEN_MONSTER_CAPTURE_FACTOR_42 = 1120;
            AppDto.AppStaticConfigs.HIDDEN_RARE_MONSTER_RATE = 1121;
            AppDto.AppStaticConfigs.HIDDEN_RARE_MONSTER_SCENE_ID = 1122;
            AppDto.AppStaticConfigs.HIDDEN_RARE_MONSTER_IDS = 1123;
            AppDto.AppStaticConfigs.HIDEEN_MONSTER_SATIATION_IGNORE = 1124;
            AppDto.AppStaticConfigs.ACHIEVEMENT_FURTHER_WEST = 1200;
            AppDto.AppStaticConfigs.ACHIEVEMENT_TREASURE_PROP_ID_GENERAL = 1201;
            AppDto.AppStaticConfigs.ACHIEVEMENT_TREASURE_PROP_ID_HIGHT = 1202;
            AppDto.AppStaticConfigs.ACHIEVEMENT_167_STREAK_END_COUNT = 1204;
            AppDto.AppStaticConfigs.ACHIEVEMENT_188_GRADE_GAP = 1207;
            AppDto.AppStaticConfigs.ACHIEVEMENT_175_NEED_TITLE = 1208;
            AppDto.AppStaticConfigs.ACHIEVEMENT_206_FAILURE_COUNT = 1209;
            AppDto.AppStaticConfigs.ACHIEVEMENT_209_TEAM_PLAYERS = 1210;
            AppDto.AppStaticConfigs.ACHIEVEMENT_176_WIN_STREAK = 1211;
            AppDto.AppStaticConfigs.ACHIEVEMENT_177_WIN_STREAK = 1212;
            AppDto.AppStaticConfigs.ACHIEVEMENT_178_STOP_WIN_STREAK = 1213;
            AppDto.AppStaticConfigs.ACHIEVEMENT_179_STOP_WIN_STREAK = 1214;
            AppDto.AppStaticConfigs.ACHIEVEMENT_189_WIN_STREAK = 1215;
            AppDto.AppStaticConfigs.ACHIEVEMENT_190_WIN_STREAK = 1216;
            AppDto.AppStaticConfigs.ACHIEVEMENT_191_STOP_WIN_STREAK = 1217;
            AppDto.AppStaticConfigs.ACHIEVEMENT_187_BATTLE_ROUND = 1218;
            AppDto.AppStaticConfigs.ACHIEVEMENT_210_STOP_WIN_STREAK = 1219;
            AppDto.AppStaticConfigs.ACHIEVEMENT_211_STOP_WIN_STREAK = 1220;
            AppDto.AppStaticConfigs.ACHIEVEMENT_212_WIN_STREAK = 1221;
            AppDto.AppStaticConfigs.ACHIEVEMENT_213_WIN_STREAK = 1222;
            AppDto.AppStaticConfigs.ACHIEVEMENT_205_BEAT_MANY_PLAYER_TEAM = 1223;
            AppDto.AppStaticConfigs.ACHIEVEMENT_192_WIN_COUNT = 1224;
            AppDto.AppStaticConfigs.ACHIEVEMENT_199_WIN_STREAK = 1225;
            AppDto.AppStaticConfigs.ACHIEVEMENT_200_WIN_STREAK = 1226;
            AppDto.AppStaticConfigs.ACHIEVEMENT_201_WIN_STREAK = 1227;
            AppDto.AppStaticConfigs.ACHIEVEMENT_202_STOP_FIVE_WIN_STREAK_COUNT = 1228;
            AppDto.AppStaticConfigs.ACHIEVEMENT_203_STOP_TEN_WIN_STREAK_COUNT = 1229;
            AppDto.AppStaticConfigs.ACHIEVEMENT_204_BEAT_SINGLE_TEAM_COUNT = 1230;
            AppDto.AppStaticConfigs.ACHIEVEMENT_180_FAILURE_COUNT = 1231;
            AppDto.AppStaticConfigs.ACHIEVEMENT_193_NEED_RANK = 1232;
            AppDto.AppStaticConfigs.ACHIEVEMENT_195_MIN_OPEN_PEACH = 1233;
            AppDto.AppStaticConfigs.ACHIEVEMENT_196_NEED_OPEN_PEACH = 1234;
            AppDto.AppStaticConfigs.ACHIEVEMENT_181_BATTLE_PASS_MINUTE = 1235;
            AppDto.AppStaticConfigs.ACHIEVEMENT_214_BATTLE_ROUND = 1236;
            AppDto.AppStaticConfigs.CONSIGNMENT_RANDOM_MIN_MINUTE = 1300;
            AppDto.AppStaticConfigs.CONSIGNMENT_RANDOM_MAX_MINUTE = 1301;
            AppDto.AppStaticConfigs.CONSIGNMENT_HISTORY_LIFE = 1302;
            AppDto.AppStaticConfigs.DEFAULT_MAX_ROUND = 2000;
            AppDto.AppStaticConfigs.DEFAULT_ACTIVE_SKILL_ID = 2001;
            AppDto.AppStaticConfigs.BATTLE_COMMAND_OPT_SEC = 2002;
            AppDto.AppStaticConfigs.ABNORMAL_STATUS_MAX_BUFF = 2003;
            AppDto.AppStaticConfigs.ASSIST_STATUS_MAX_BUFF = 2004;
            AppDto.AppStaticConfigs.TEMPORARY_STATUS_MAX_BUFF = 2005;
            AppDto.AppStaticConfigs.BATTLE_ROUND_START_CANCEL_AUTO_SEC = 2006;
            AppDto.AppStaticConfigs.BATTLE_ROUND_PLAY_TIME_FAULT_TOLERANT_SEC = 2007;
            AppDto.AppStaticConfigs.BATTLE_INIT_NON_NPC_MIN_SPEED_RANGE = 2008;
            AppDto.AppStaticConfigs.BATTLE_INIT_NON_NPC_MAX_SPEED_RANGE = 2009;
            AppDto.AppStaticConfigs.BATTLE_MIN_HIT_RATE = 2010;
            AppDto.AppStaticConfigs.BATTLE_MIN_MAGIC_DODGE_RATE = 2011;
            AppDto.AppStaticConfigs.BATTLE_MIN_ATTACK_FLOAT_RANGE = 2012;
            AppDto.AppStaticConfigs.BATTLE_MAX_ATTACK_FLOAT_RANGE = 2013;
            AppDto.AppStaticConfigs.BATTLE_BASE_STRIKE_RATE = 2014;
            AppDto.AppStaticConfigs.BATTLE_STRIKE_VARY_RATE = 2015;
            AppDto.AppStaticConfigs.BATTLE_MAX_STRIKE_RATE = 2016;
            AppDto.AppStaticConfigs.BATTLE_STRIKE_RATE_REDUCE_PER_ROUND = 2017;
            AppDto.AppStaticConfigs.BATTLE_STRIKE_RATE_REDUCE_RATE_PER_ROUND = 2018;
            AppDto.AppStaticConfigs.BATTLE_EXTRA_CHARACTOR_ATTACK = 2019;
            AppDto.AppStaticConfigs.BATTLE_MAIN_CHARACTOR_DODGE_RATE = 2020;
            AppDto.AppStaticConfigs.BATTLE_CHARACTOR_DODGE_RATE = 2021;
            AppDto.AppStaticConfigs.BATTLE_MIN_MAGIC_ATTACK_FLOAT_RANGE = 2022;
            AppDto.AppStaticConfigs.BATTLE_MAX_MAGIC_ATTACK_FLOAT_RANGE = 2023;
            AppDto.AppStaticConfigs.BATTLE_CRIT_RATE = 2024;
            AppDto.AppStaticConfigs.BATTLE_ACTION_IDLE_TIME = 2025;
            AppDto.AppStaticConfigs.BATTLE_SKILL_SHOW_TIME = 2026;
            AppDto.AppStaticConfigs.BATTLE_SKILL_HP_SPENT_SHOW_TIME = 2027;
            AppDto.AppStaticConfigs.BATTLE_DEFENSE_DAMAGE_VARY_RATE = 2028;
            AppDto.AppStaticConfigs.DEFAULT_DEFENSE_SKILL_ID = 2029;
            AppDto.AppStaticConfigs.PRACTICE_EXTRA_RATE = 2030;
            AppDto.AppStaticConfigs.PRACTICE_EXTRA_VALUE = 2031;
            AppDto.AppStaticConfigs.PRACTICE_COPPER_PER_COST = 2032;
            AppDto.AppStaticConfigs.PRACTICE_COPPER_PER_GAIN = 2033;
            AppDto.AppStaticConfigs.BATTLE_CHARACTOR_CRIT_RATE = 2034;
            AppDto.AppStaticConfigs.BATTLE_MAGIC_HIT_RATE = 2035;
            AppDto.AppStaticConfigs.MP_FACTOR_1 = 2036;
            AppDto.AppStaticConfigs.MP_FACTOR_2 = 2037;
            AppDto.AppStaticConfigs.BATTLE_ACTIVE_PROTECT_DAMAGE_RATE = 2038;
            AppDto.AppStaticConfigs.BATTLE_PASSIVE_PROTECT_DAMAGE_RATE = 2039;
            AppDto.AppStaticConfigs.DEFAULT_RETREAT_SKILL_ID = 2043;
            AppDto.AppStaticConfigs.PVE_RETREAT_SUCCESS_RATE = 2044;
            AppDto.AppStaticConfigs.PVP_RETREAT_SUCCESS_RATE = 2045;
            AppDto.AppStaticConfigs.MAX_RETREAT_SUCCESS_RATE = 2046;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_INIT_ATTACK = 2047;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_INIT_HP = 2048;
            AppDto.AppStaticConfigs.BATTLE_FORMAT_MAX_POSITION = 2050;
            AppDto.AppStaticConfigs.BATTLE_FORMAT_MAX_UNIT = 2051;
            AppDto.AppStaticConfigs.BATTLE_MAX_CALL_MONSTER = 2052;
            AppDto.AppStaticConfigs.MAX_PET_COUNT = 2053;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_BATTLE_MAX_COUNT = 2054;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_BATTLE_DOUBLE_REWARD_RATE = 2055;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_BATTLE_REWARD_RATE = 2056;
            AppDto.AppStaticConfigs.NIGHT_DEBUFF_EFFECT = 2057;
            AppDto.AppStaticConfigs.ANTI_NIGHT_DEBUFF_SKILLS = 2058;
            AppDto.AppStaticConfigs.PET_ESCAPE_HP_RATE_1 = 2059;
            AppDto.AppStaticConfigs.PET_ESCAPE_HP_RATE_2 = 2060;
            AppDto.AppStaticConfigs.PET_ESCAPE_RATE_1 = 2061;
            AppDto.AppStaticConfigs.PET_ESCAPE_RATE_2 = 2062;
            AppDto.AppStaticConfigs.PET_ESCAPE_PLUS_RATE = 2063;
            AppDto.AppStaticConfigs.MULTI_TARGET_MOVE_TIME = 2064;
            AppDto.AppStaticConfigs.SINGLE_TIME_FIX = 2065;
            AppDto.AppStaticConfigs.ROUND_TIME_FIX = 2066;
            AppDto.AppStaticConfigs.MIN_RETREAT_SUCCESS_RATE = 2067;
            AppDto.AppStaticConfigs.LEADER_RATE = 2068;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_BATTLE_REWARD_TIMES = 2069;
            AppDto.AppStaticConfigs.PET_AUTO_ESCAPE_SUCCESS_RATE = 2070;
            AppDto.AppStaticConfigs.CERTIFICATED_SKILL_EFFECT_RATE = 2071;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_BATTLE_GAIN_DOUBLE_MAX_COUNT = 2072;
            AppDto.AppStaticConfigs.GHOST_BATTLE_DELAY = 2073;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_DAILY_REWARD_ITEM = 2074;
            AppDto.AppStaticConfigs.GOD_PUNISH_TIME_SEC = 2075;
            AppDto.AppStaticConfigs.PS_FACTION_PASSIVE_SKILL_ID = 2076;
            AppDto.AppStaticConfigs.FRIEND_PROTECT_HP_RATE = 2077;
            AppDto.AppStaticConfigs.FRIEND_PROTECT_DEGREE_LIMIT = 2078;
            AppDto.AppStaticConfigs.FRIEND_PROTECT_RATE_FORMULA = 2079;
            AppDto.AppStaticConfigs.FRIEND_PROTECT_RATE_PLUS_1 = 2080;
            AppDto.AppStaticConfigs.FRIEND_PROTECT_RATE_PLUS_2 = 2081;
            AppDto.AppStaticConfigs.FRIEND_PROTECT_RATE_PLUS_3 = 2082;
            AppDto.AppStaticConfigs.DRUG_RESISTANT_BUFF_ID = 2083;
            AppDto.AppStaticConfigs.DRUG_RESISTANT_MIN_VALUE = 2085;
            AppDto.AppStaticConfigs.DRUG_RESISTANT_MAX_VALUE = 2086;
            AppDto.AppStaticConfigs.BATTLE_ROUND_TIME_FIX_FACTOR = 2087;
            AppDto.AppStaticConfigs.BATTLE_ROUND_READY_TOLERENT = 2088;
            AppDto.AppStaticConfigs.ARENA_PLAYER_GRADE_DIFF = 2100;
            AppDto.AppStaticConfigs.ARENA_RETREAT_SUCCESS_RATE = 2101;
            AppDto.AppStaticConfigs.CHALLENGE_DAILY_TIMES = 2200;
            AppDto.AppStaticConfigs.DEFAULT_TROPHY_COUNT = 2201;
            AppDto.AppStaticConfigs.TROPHY_FACTOR = 2202;
            AppDto.AppStaticConfigs.TROPHY_FACTOR_M = 2203;
            AppDto.AppStaticConfigs.TROPHY_FACTOR_N = 2204;
            AppDto.AppStaticConfigs.CHALLENGE_WIN_EXP_FORMULA = 2205;
            AppDto.AppStaticConfigs.CHALLENGE_LOST_EXP_FORMULA = 2206;
            AppDto.AppStaticConfigs.CHALLENGE_WIN_PET_EXP_FORMULA = 2207;
            AppDto.AppStaticConfigs.CHALLENGE_WIN_COPPER_FORMULA = 2208;
            AppDto.AppStaticConfigs.CHALLENGE_LOST_COPPER_FORMULA = 2209;
            AppDto.AppStaticConfigs.CHALLENGE_WIN_TROPHY_FORMULA = 2210;
            AppDto.AppStaticConfigs.BE_CHALLENGE_LOST_TROPHY_FORMULA = 2211;
            AppDto.AppStaticConfigs.CHALLENGE_MAX_TROPHY = 2212;
            AppDto.AppStaticConfigs.CHALLENGE_WIN_SCORE = 2213;
            AppDto.AppStaticConfigs.CHALLENGE_LOST_SCORE = 2214;
            AppDto.AppStaticConfigs.CHALLENGE_MAX_RECORD = 2215;
            AppDto.AppStaticConfigs.MIN_REVENGE_LEVEL_LIMIT = 2216;
            AppDto.AppStaticConfigs.CHALLENGE_DAILY_REWARD_FORMULA = 2217;
            AppDto.AppStaticConfigs.CHALLENGE_RANK_BONUS_FACTOR = 2218;
            AppDto.AppStaticConfigs.CHALLENGE_CREW_COUNT_LIMIT = 2219;
            AppDto.AppStaticConfigs.CHALLENGE_MAX_ROUND = 2220;
            AppDto.AppStaticConfigs.CHALLENGE_WIN_STREAK = 2221;
            AppDto.AppStaticConfigs.CHALLENGE_HIDDEN_MODEL_RANK = 2222;
            AppDto.AppStaticConfigs.CHALLENGE_SUPPORT_FACTION_MP_CONSUME_RATE = 2223;
            AppDto.AppStaticConfigs.CHALLENGE_BAN_SOLDIER_LIMIT = 2224;
            AppDto.AppStaticConfigs.CHALLENGE_GROUP_START_SERVER_GRADE = 2225;
            AppDto.AppStaticConfigs.CHALLENGE_GROUP_GRADES = 2226;
            AppDto.AppStaticConfigs.CHALLENGE_ROBOT_GRADES = 2227;
            AppDto.AppStaticConfigs.CHALLENGE_GROUP_SEASON_REWARDS = 2228;
            AppDto.AppStaticConfigs.CHALLENGE_GROUP_RANK_LIMIT = 2229;
            AppDto.AppStaticConfigs.CHALLENGE_GROUP_RANK_REWARD_LIMIT = 2230;
            AppDto.AppStaticConfigs.CHALLENGE_ROBOT_TOLLGATE_IDS = 2231;
            AppDto.AppStaticConfigs.MAX_CALL_MONSTER_COUNT = 2300;
            AppDto.AppStaticConfigs.MIN_CALL_MONSTER_ID = 2301;
            AppDto.AppStaticConfigs.MAX_CALL_MONSTER_ID = 2302;
            AppDto.AppStaticConfigs.MAX_CALL_COUNT = 2303;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POTENTIAL_MIN_LEVEL = 3000;
            AppDto.AppStaticConfigs.PRESET_ONUPGRADE_POTENTIAL_TOTAL_POINT = 3001;
            AppDto.AppStaticConfigs.DISPOSABLE_POTENTIAL_POINT_GAIN_PER_UPGRADE = 3002;
            AppDto.AppStaticConfigs.PET_UPGRADABLE_EXTRA_LEVEL_COMPARE_MAIN_CHARACTOR_LEVEL = 3003;
            AppDto.AppStaticConfigs.FACTION_SKILL_MAX_LEVEL_DIFF_AGAINST_MAIN_CHARACTOR_LEVEL = 3004;
            AppDto.AppStaticConfigs.UPGRADE_FACTION_SKILL_EXCEED_SERVER_GRADE_COST_MULTIPLIER = 3005;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_RESET_APTITUDE_ITEM_ID = 3006;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_RESET_PER_APTITUDE = 3007;
            AppDto.AppStaticConfigs.MIN_APTITUDE_RESET_POINT = 3008;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_MAX_EXP_BOOK_PER_DAY = 3009;
            AppDto.AppStaticConfigs.UPGRADE_FACTION_SKILL_LESS_SERVER_GRADE_COST_MULTIPLIER = 3010;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_TWO_LEVEL = 3011;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_THREE_LEVEL = 3012;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_COUNT = 3013;
            AppDto.AppStaticConfigs.POINT_PLAN_CONSUME_MULTIPLE = 3014;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_POINT_PLAN_BASE = 3015;
            AppDto.AppStaticConfigs.INCREASE_MAIN_CHARACTOR_VALUE = 3016;
            AppDto.AppStaticConfigs.INCREASE_MAIN_CHARACTOR_VALUE_BORN = 3017;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_ATTRIBUTE = 3018;
            AppDto.AppStaticConfigs.MAIN_CHARACTOR_RESET_ALL_ITEM_ID = 3019;
            AppDto.AppStaticConfigs.PET_RESET_ALL_ITEM_ID = 3020;
            AppDto.AppStaticConfigs.MAX_TEAM_MEMBER_SIZE = 4000;
            AppDto.AppStaticConfigs.TEAM_LEVEL_SCOPE_MP_1 = 4001;
            AppDto.AppStaticConfigs.TEAM_LEVEL_SCOPE_MP_2 = 4002;
            AppDto.AppStaticConfigs.TEAM_MAX_REQUEST = 4003;
            AppDto.AppStaticConfigs.AUTO_MATCH_VALID_SEC = 4004;
            AppDto.AppStaticConfigs.PET_IMMORTAL_LIEF_POINT = 5000;
            AppDto.AppStaticConfigs.PET_LIEF_POINT_MIN_RANGE = 5001;
            AppDto.AppStaticConfigs.PET_LIEF_POINT_MAX_RANGE = 5002;
            AppDto.AppStaticConfigs.PET_LIEF_POINT_FACTOR = 5003;
            AppDto.AppStaticConfigs.PET_GROWTH_MIN_RANGE = 5004;
            AppDto.AppStaticConfigs.PET_GROWTH_MAX_RANGE = 5005;
            AppDto.AppStaticConfigs.PET_MUTATE_RATE = 5006;
            AppDto.AppStaticConfigs.PET_MAX_BASE_APTITUDE_BASE_FACTOR1 = 5007;
            AppDto.AppStaticConfigs.PET_MAX_BASE_APTITUDE_FLOATING_FACTOR1 = 5008;
            AppDto.AppStaticConfigs.PET_MAX_BASE_APTITUDE_BASE_FACTOR2 = 5009;
            AppDto.AppStaticConfigs.PET_MAX_BASE_APTITUDE_FLOATING_FACTOR2 = 5010;
            AppDto.AppStaticConfigs.PET_MAX_BASE_APTITUDE_BASE_FACTOR3 = 5011;
            AppDto.AppStaticConfigs.PET_MAX_BASE_APTITUDE_FLOATING_FACTOR3 = 5012;
            AppDto.AppStaticConfigs.PET_BASE_APTITUDE_BASE_FACTOR1 = 5013;
            AppDto.AppStaticConfigs.PET_BASE_APTITUDE_FLOATING_FACTOR1 = 5014;
            AppDto.AppStaticConfigs.PET_BASE_APTITUDE_BASE_FACTOR2 = 5015;
            AppDto.AppStaticConfigs.PET_BASE_APTITUDE_FLOATING_FACTOR2 = 5016;
            AppDto.AppStaticConfigs.PET_BASE_APTITUDE_BASE_FACTOR3 = 5017;
            AppDto.AppStaticConfigs.PET_BASE_APTITUDE_FLOATING_FACTOR3 = 5018;
            AppDto.AppStaticConfigs.PET_GEN_APTITUDE_COMPANY_LEVEL = 5019;
            AppDto.AppStaticConfigs.PET_NON_BAOBAO_PBB_SKILL_ACQUIRE_RATE = 5020;
            AppDto.AppStaticConfigs.PET_BAOBAO_PBB_SKILL_ACQUIRE_RATE = 5021;
            AppDto.AppStaticConfigs.PET_GEN_AVERAGE_APTITUDE = 5022;
            AppDto.AppStaticConfigs.PET_GEN_APTITUDE_FACTOR1 = 5023;
            AppDto.AppStaticConfigs.PET_GEN_APTITUDE_FACTOR2 = 5024;
            AppDto.AppStaticConfigs.PET_GEN_APTITUDE_FACTOR3 = 5025;
            AppDto.AppStaticConfigs.PET_GEN_APTITUDE_FACTOR4 = 5026;
            AppDto.AppStaticConfigs.PET_MUTATE_SKILL_RATE = 5027;
            AppDto.AppStaticConfigs.PET_LEVEL_RESET_LIMIT = 5028;
            AppDto.AppStaticConfigs.PET_RESET_GEN_SPECIAL_PET_COMPANY_LEVEL_LIMIT = 5029;
            AppDto.AppStaticConfigs.PET_RESET_GEN_SPECIAL_PET_RATE = 5030;
            AppDto.AppStaticConfigs.PET_RESET_GEN_SPECIAL_PET_IDS = 5031;
            AppDto.AppStaticConfigs.PET_INIT_CARRY_CAPACITY = 5032;
            AppDto.AppStaticConfigs.PET_MAX_COMPANY_AMOUNT = 5033;
            AppDto.AppStaticConfigs.PET_COMPANY_VACANCY_EXPAND_ITEM_ID = 5034;
            AppDto.AppStaticConfigs.PET_EXPAND_COMPANY_VACANCY_INIT_ITEM_AMOUNT = 5035;
            AppDto.AppStaticConfigs.PET_RESET_ITEM_ID = 5036;
            AppDto.AppStaticConfigs.PET_RESET_APTITUDE_ITEM_ID = 5037;
            AppDto.AppStaticConfigs.PET_RESET_PER_APTITUDE = 5038;
            AppDto.AppStaticConfigs.PET_EXP_BOOK_ITEM_ID = 5039;
            AppDto.AppStaticConfigs.CREW_HP_FACTOR = 5040;
            AppDto.AppStaticConfigs.CREW_MP_FACTOR = 5041;
            AppDto.AppStaticConfigs.CREW_ATTACK_FACTOR = 5042;
            AppDto.AppStaticConfigs.CREW_DEFENSE_FACTOR = 5043;
            AppDto.AppStaticConfigs.CREW_SPEED_FACTOR = 5044;
            AppDto.AppStaticConfigs.CREW_MAGIC_FACTOR = 5045;
            AppDto.AppStaticConfigs.PET_DISPOSABLE_POTENTIAL_MIN_LEVEL = 5046;
            AppDto.AppStaticConfigs.FORMATION_MAX_ATTACK_CASE = 5047;
            AppDto.AppStaticConfigs.PET_INCREASE_BASE_APTITUDE_ITEM_ID = 5048;
            AppDto.AppStaticConfigs.PET_LIFE_POINT_CONSUME = 5049;
            AppDto.AppStaticConfigs.PET_MAX_LIFE = 5050;
            AppDto.AppStaticConfigs.FORMATION_DEFAULT_CAPACITY = 5051;
            AppDto.AppStaticConfigs.FORMATION_OVER_DEFAULT_CAPACITY = 5052;
            AppDto.AppStaticConfigs.PET_INIT_WAREHOUSE_CAPACITY = 5053;
            AppDto.AppStaticConfigs.PET_INIT_RECYCLE_CAPACITY = 5054;
            AppDto.AppStaticConfigs.PET_DEAD_LIFE_POINT_CONSUME = 5055;
            AppDto.AppStaticConfigs.PET_SHOP_NPC_ID = 5056;
            AppDto.AppStaticConfigs.PET_EXCHANGE_PRECIOUS_PROP_ID = 5057;
            AppDto.AppStaticConfigs.PET_EXCHANGE_MYTH_PROP_ID = 5058;
            AppDto.AppStaticConfigs.PET_EXCHANGE_COUNT = 5059;
            AppDto.AppStaticConfigs.PET_EXCHANGE_PRECIOUS_GOLD = 5060;
            AppDto.AppStaticConfigs.PET_EXCHANGE_MYTH_GOLD = 5061;
            AppDto.AppStaticConfigs.MERITS_GAIN_MULTIPLE = 5062;
            AppDto.AppStaticConfigs.PROPS_ID_ONE = 5063;
            AppDto.AppStaticConfigs.PROPS_ID_TWO = 5064;
            AppDto.AppStaticConfigs.CREW_EQUIPMENT_MAX_LEVEL = 5065;
            AppDto.AppStaticConfigs.PET_EXP_FRUIT_ITEM_ID = 5066;
            AppDto.AppStaticConfigs.PLAYER_SCORE_BASE_FACTOR = 5067;
            AppDto.AppStaticConfigs.PLAYER_SCORE_FACTOR = 5068;
            AppDto.AppStaticConfigs.PLAYER_SCORE_FACTION_SKILL_FACTOR = 5069;
            AppDto.AppStaticConfigs.PET_REFRESH_COUNT = 5070;
            AppDto.AppStaticConfigs.PET_REFRESH_USE_ITEM = 5071;
            AppDto.AppStaticConfigs.MAX_BLESS_VALUE = 5072;
            AppDto.AppStaticConfigs.PER_BLESS_VALUE = 5073;
            AppDto.AppStaticConfigs.MUTATE_RATE_IN_BLESSING = 5074;
            AppDto.AppStaticConfigs.PET_GROWTH_PROP_ID = 5075;
            AppDto.AppStaticConfigs.PET_GROWTH_PROP_MAX_COUNT = 5076;
            AppDto.AppStaticConfigs.PET_GROWTH_PROP_ADD_VALUE = 5077;
            AppDto.AppStaticConfigs.PET_MAX_DEVOUR_GROWTH = 5078;
            AppDto.AppStaticConfigs.PET_DEVOUR_ADD_GROWTH = 5079;
            AppDto.AppStaticConfigs.PET_DEVOUR_LEVEL_DIFF = 5080;
            AppDto.AppStaticConfigs.EXORCISM_GAIN_MAX_TIME = 5081;
            AppDto.AppStaticConfigs.PET_ORNAMENT_ADD_APTITUDE = 5082;
            AppDto.AppStaticConfigs.PET_MUTATE_RESET_ITEM_ID = 5083;
            AppDto.AppStaticConfigs.PET_MUTATE_RESET_ITEM_COUNT = 5084;
            AppDto.AppStaticConfigs.PET_JOIN_BATTLE_MIN_LIFE = 5085;
            AppDto.AppStaticConfigs.PET_INCREASE_POTENTIAL_ITEM_ID = 5086;
            AppDto.AppStaticConfigs.PET_POTENTIAL_ITEM_USELV = 5087;
            AppDto.AppStaticConfigs.PET_EXCHANGE_IMMORITAL_PROP_ID = 5088;
            AppDto.AppStaticConfigs.PET_TRAIN_GUIDE_SKILLS = 5089;
            AppDto.AppStaticConfigs.CREW_TRAIN_PROP_ID = 5090;
            AppDto.AppStaticConfigs.CREW_MAX_STAR = 5091;
            AppDto.AppStaticConfigs.CREW_TRAIN_PROP_INTIMACY = 5092;
            AppDto.AppStaticConfigs.FORMATION_SAME_BOOK_EXP = 5093;
            AppDto.AppStaticConfigs.FORMATION_DIFF_BOOK_EXP = 5094;
            AppDto.AppStaticConfigs.FRIEND_MAX_SIZE = 6000;
            AppDto.AppStaticConfigs.FRIEND_MAX_INVITE = 6001;
            AppDto.AppStaticConfigs.FRIEND_MAX_OFFLINEMESSAGE_SIZE = 6002;
            AppDto.AppStaticConfigs.FRIEND_MAX_RECOMMEND_SIZE = 6003;
            AppDto.AppStaticConfigs.FRIEND_RECOMMEND_GRADE = 6004;
            AppDto.AppStaticConfigs.FRIEND_DEGREE_MAX_LIMIT = 6005;
            AppDto.AppStaticConfigs.FRIEND_PARTWAY_DEGREE_MAX_LIMIT = 6006;
            AppDto.AppStaticConfigs.FRIEND_DEGREE_TOGETHER_AMOUNT = 6007;
            AppDto.AppStaticConfigs.FRIEND_DEGREE_PVE_AMOUNT = 6008;
            AppDto.AppStaticConfigs.FRIEND_DEGREE_GIFTINGITEM_AMOUNT = 6009;
            AppDto.AppStaticConfigs.FRIEND_DEGREE_GIFTINGFLOWER_AMOUNT = 6010;
            AppDto.AppStaticConfigs.STRANGER_MAX_OFFLINEMESSAGE_SIZE = 6011;
            AppDto.AppStaticConfigs.GIFTINGFLOWER_TRIGGER_MARQUESS_LEAST = 6012;
            AppDto.AppStaticConfigs.GIFTINGFLOWER_GET_EXP_DAILY_LIMIT_COUNT = 6013;
            AppDto.AppStaticConfigs.GIFTINGFLOWER_GET_EXP_FORMULA = 6014;
            AppDto.AppStaticConfigs.FRIEND_DEGREE_PVP_AMOUNT = 6015;
            AppDto.AppStaticConfigs.GIFTINGFLOWER_RECORD_MAX = 6016;
            AppDto.AppStaticConfigs.FACTION_CHANGE_MIN_TIME = 7000;
            AppDto.AppStaticConfigs.FACTION_CHARACTOR_CHANGE_MIN_GRADE = 7001;
            AppDto.AppStaticConfigs.FACTION_CHANGE_CONSUME_INGOT = 7002;
            AppDto.AppStaticConfigs.CHARACTOR_CHANGE_CONSUME_INGOT = 7003;
            AppDto.AppStaticConfigs.MALE_CHANGE_FEMALE_CONSUME_INGOT = 7004;
            AppDto.AppStaticConfigs.FEMALE_CHANGE_MALE_CONSUME_INGOT = 7005;
            AppDto.AppStaticConfigs.FACTION_CHARACTOR_CHANGE_MIN_GAME_GRADE = 7006;
            AppDto.AppStaticConfigs.GUILD_CREATE_FEE = 7100;
            AppDto.AppStaticConfigs.GUILD_NAME_LENGTH_lOWER = 7101;
            AppDto.AppStaticConfigs.GUILD_NAME_LENGTH_UPPER = 7102;
            AppDto.AppStaticConfigs.GUILD_MEMO_LENGTH_LOWER = 7103;
            AppDto.AppStaticConfigs.GUILD_MEMO_LENGTH_UPPER = 7104;
            AppDto.AppStaticConfigs.GUILD_APPLY_LIMIT = 7105;
            AppDto.AppStaticConfigs.GUILD_ALL_APPLY_COUNT = 7106;
            AppDto.AppStaticConfigs.GUILD_KEEP_CONTRIBUTE_TIME = 7107;
            AppDto.AppStaticConfigs.GUILD_MASSES_MIN_LEVEL = 7108;
            AppDto.AppStaticConfigs.GUILD_SELF_RECOMMEND_FEE = 7109;
            AppDto.AppStaticConfigs.GUILD_SELF_RECOMMEND_TIME = 7110;
            AppDto.AppStaticConfigs.GUILD_DEFAULT_ASSET = 7111;
            AppDto.AppStaticConfigs.GUILD_MEMO_UPDATE_FEE = 7112;
            AppDto.AppStaticConfigs.GUILD_NOTICE_LENGTH_UPPER = 7114;
            AppDto.AppStaticConfigs.GUILD_UPDATE_NOTICE_FEE = 7115;
            AppDto.AppStaticConfigs.CANCEL_GUILD_UPGRADE_RETURN = 7116;
            AppDto.AppStaticConfigs.GUILD_JOIN_DAYS = 7117;
            AppDto.AppStaticConfigs.GUILD_BENEFITS_RECEIVE_GRADE = 7118;
            AppDto.AppStaticConfigs.GUILD_GIFG_BOX_RECEIVE_GRADE = 7119;
            AppDto.AppStaticConfigs.GUILD_BENEFIT_RECEIVE_LOST = 7120;
            AppDto.AppStaticConfigs.GUILD_GIFG_BOX_ID = 7121;
            AppDto.AppStaticConfigs.GUILD_ADD_COPPER_FACTOR = 7122;
            AppDto.AppStaticConfigs.GUILD_CONVERT_COPPER_FACTOR = 7123;
            AppDto.AppStaticConfigs.GUILD_MEDICINE_SHOP_ID = 7124;
            AppDto.AppStaticConfigs.GUILD_HEALTH_FEE_HOUR = 7126;
            AppDto.AppStaticConfigs.GUILD_NO_BENEFIT_FEE_HOUR = 7127;
            AppDto.AppStaticConfigs.GUILD_HEALTH_MAX = 7128;
            AppDto.AppStaticConfigs.GUILD_SERVICE_HEALTH = 7129;
            AppDto.AppStaticConfigs.CONVERT_CONTRIBUTE_MAX = 7130;
            AppDto.AppStaticConfigs.ONCE_GUILD_AD_INGOT = 7131;
            AppDto.AppStaticConfigs.ONCE_GUILD_AD_TIME = 7132;
            AppDto.AppStaticConfigs.GUILD_BAN_TALK_TIME = 7133;
            AppDto.AppStaticConfigs.GUILD_BAN_TALK_VIGOUR = 7134;
            AppDto.AppStaticConfigs.GUILD_SCENE_ID = 7135;
            AppDto.AppStaticConfigs.GUILD_USE_PROPS_APPRENTICE_FACTOR = 7136;
            AppDto.AppStaticConfigs.GUILD_NOT_LOGIN_TO_PREPARE = 7137;
            AppDto.AppStaticConfigs.GUILD_HEALTH_INIT = 7138;
            AppDto.AppStaticConfigs.GUILD_DAILY_DECREASE_HEALTH = 7139;
            AppDto.AppStaticConfigs.GUILD_RENAME_ITEM_ID = 7140;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_MAX_SCORE = 7200;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_WIN_CONTRIBUTE = 7201;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_LOST_CONTRIBUTE = 7202;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_ITEM_STAR_1 = 7203;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_ITEM_STAR_2 = 7204;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_ITEM_STAR_3 = 7205;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_LOST_ITEM = 7206;
            AppDto.AppStaticConfigs.SIEGE_WIN_GUILD_ASSET = 7207;
            AppDto.AppStaticConfigs.SIEGE_LOST_GUILD_ASSET = 7208;
            AppDto.AppStaticConfigs.SIEGE_DRAW_GUILD_ASSET = 7209;
            AppDto.AppStaticConfigs.SIEGE_WIN_ITEM_COUNT = 7210;
            AppDto.AppStaticConfigs.SIEGE_LOST_ITEM_COUNT = 7211;
            AppDto.AppStaticConfigs.SIEGE_DRAW_ITEM_COUNT = 7212;
            AppDto.AppStaticConfigs.SIEGE_DIFFICULTY_PLUS_2 = 7213;
            AppDto.AppStaticConfigs.SIEGE_DIFFICULTY_PLUS_3 = 7214;
            AppDto.AppStaticConfigs.SIEGE_SERVER_GRADE_LIMIT = 7215;
            AppDto.AppStaticConfigs.SIEGE_GUILD_GRADE_LIMIT = 7216;
            AppDto.AppStaticConfigs.SIEGE_GUILD_MEMBER_COUNT_LIMIT = 7217;
            AppDto.AppStaticConfigs.SIEGE_PLAYER_ATTACK_TIMES = 7218;
            AppDto.AppStaticConfigs.SIEGE_BATTLE_MAX_ROUND = 7219;
            AppDto.AppStaticConfigs.SIEGE_EMPTY_TOWN_TOLLGATE_ID = 7220;
            AppDto.AppStaticConfigs.SIEGE_WIN_GUILD_SALARY = 7221;
            AppDto.AppStaticConfigs.SIEGE_LOST_GUILD_SALARY = 7222;
            AppDto.AppStaticConfigs.SIEGE_DRAW_GUILD_SALARY = 7223;
            AppDto.AppStaticConfigs.TOURNAMENT_PLAYER_LEVEL_LIMIT = 7300;
            AppDto.AppStaticConfigs.TOURNAMENT_MAX_FAILURE_TIMES = 7301;
            AppDto.AppStaticConfigs.TOURNAMENT_TIME_BONUS = 7302;
            AppDto.AppStaticConfigs.TOURNAMENT_WIN_BONUS = 7303;
            AppDto.AppStaticConfigs.TOURNAMENT_LOSE_BONUS = 7304;
            AppDto.AppStaticConfigs.TOURNAMENT_PASS_BONUS = 7305;
            AppDto.AppStaticConfigs.TOURNAMENT_SCENE_ID = 7306;
            AppDto.AppStaticConfigs.TOURNAMENT_MAX_ROUND = 7307;
            AppDto.AppStaticConfigs.TOURNAMENT_WIN_STREAK_CONFIG = 7308;
            AppDto.AppStaticConfigs.TOURNAMENT_STOP_ENEMY_WIN_CONFIG = 7309;
            AppDto.AppStaticConfigs.TOURNAMENT_MAX_SHOW_RANK = 7310;
            AppDto.AppStaticConfigs.TOURNAMENT_MAX_WIN_TIMES = 7311;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_SCENE_ID = 7400;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_PLAYER_LEVEL_LIMIT = 7401;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_MAX_FAILURE_TIMES = 7402;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_MAX_ROUND = 7403;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_TIME_BONUS = 7404;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_WIN_BONUS = 7405;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_LOSE_BONUS = 7406;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_PASS_BONUS = 7407;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_DRAW_BONUS = 7408;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_MATCH_PLAYER_SIZE = 7409;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_MATCH_PERIOD = 7410;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_LAST_BEGIN_PASS = 7411;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_LAST_END_PASS = 7412;
            AppDto.AppStaticConfigs.COPY_MIN_TEAM_SIZE = 7500;
            AppDto.AppStaticConfigs.COPY_EXIT_COUNT_DOWN = 7502;
            AppDto.AppStaticConfigs.NEW_GUY_SCORE_BONUS = 7503;
            AppDto.AppStaticConfigs.COPY_MAX_DAILY_SCORE = 7504;
            AppDto.AppStaticConfigs.COPY_ASSIST_SCORE_BONUS = 7505;
            AppDto.AppStaticConfigs.COPY_EXTRA_MISSIONS = 7506;
            AppDto.AppStaticConfigs.TRIAL_PLAYER_LEVEL_LIMIT = 7600;
            AppDto.AppStaticConfigs.TRIAL_MAX_FAILURE_TIMES = 7601;
            AppDto.AppStaticConfigs.TRIAL_SCENE_ID = 7602;
            AppDto.AppStaticConfigs.TRIAL_MAX_ROUND = 7603;
            AppDto.AppStaticConfigs.TRIAL_TIME_BONUS = 7604;
            AppDto.AppStaticConfigs.TRIAL_WIN_BONUS = 7605;
            AppDto.AppStaticConfigs.TRIAL_LOSE_BONUS = 7606;
            AppDto.AppStaticConfigs.TRIAL_PASS_BONUS = 7607;
            AppDto.AppStaticConfigs.TRIAL_DRAW_BONUS = 7608;
            AppDto.AppStaticConfigs.TRIAL_WIN_STREAK_CONFIG = 7609;
            AppDto.AppStaticConfigs.TRIAL_STOP_ENEMY_WIN_CONFIG = 7610;
            AppDto.AppStaticConfigs.TRIAL_MAX_SHOW_RANK = 7611;
            AppDto.AppStaticConfigs.TRIAL_MAX_TEAM_MEMBER_SIZE = 7612;
            AppDto.AppStaticConfigs.TRIAL_MAX_WIN_TIMES = 7613;
            AppDto.AppStaticConfigs.MYTH_LAND_INIT_MONSTER_COUNT = 7620;
            AppDto.AppStaticConfigs.MYTH_LAND_MIN_MONSTER_COUNT = 7621;
            AppDto.AppStaticConfigs.MYTH_LAND_MAX_MONSTER_COUNT = 7622;
            AppDto.AppStaticConfigs.MYTH_MAX_FAIL_TIMES = 7623;
            AppDto.AppStaticConfigs.MYTH_LAND_OPEN_BOX_MIN_PLAYER_COUNT = 7624;
            AppDto.AppStaticConfigs.MYTH_LAND_OPEN_BOX_RATE_FORMULA = 7625;
            AppDto.AppStaticConfigs.MYTH_LAND_REFRESH_MONSTER_PERIOD = 7626;
            AppDto.AppStaticConfigs.MYTH_LAND_REFRESH_BOX_PERIOD = 7627;
            AppDto.AppStaticConfigs.MYTH_LAND_UI_ITEM_COUNT = 7628;
            AppDto.AppStaticConfigs.MYTH_LAND_PRE_ENDING_ANNOUNCEMENT_ID = 7629;
            AppDto.AppStaticConfigs.MYTH_LAND_PRE_ENDING_MINUTES = 7630;
            AppDto.AppStaticConfigs.MYTH_LAND_PRE_ENDING_PERIOD = 7631;
            AppDto.AppStaticConfigs.MYTH_LAND_GOLDEN_BOX = 7632;
            AppDto.AppStaticConfigs.MYTH_LAND_OPEN_BOX_ANNOUCEMENT_ID = 7633;
            AppDto.AppStaticConfigs.MYTH_LAND_REWARD_LAYER = 7634;
            AppDto.AppStaticConfigs.MYTH_LAND_PASS_REWARD_FALL_REWARD = 7635;
            AppDto.AppStaticConfigs.MYTH_LAND_PASS_REWARD_ANNOUCEMENT_ID = 7636;
            AppDto.AppStaticConfigs.MYTH_LAND_RANDOM_NPC_PERIOD = 7637;
            AppDto.AppStaticConfigs.MYTH_LAND_REFRESH_NPC_COUNT = 7638;
            AppDto.AppStaticConfigs.MYTH_LAND_REFRESH_EXPLORER_NPC_ID = 7639;
            AppDto.AppStaticConfigs.MYTH_LAND_REFRESH_BEGGER_NPC_ID = 7640;
            AppDto.AppStaticConfigs.MYTH_LAND_REFRESH_DEALER_NPC_ID = 7641;
            AppDto.AppStaticConfigs.MYTH_LAND_BEGGER_NPC_REFRESH_GOLD_BOX = 7642;
            AppDto.AppStaticConfigs.MYTH_LAND_PASS_TITLE = 7643;
            AppDto.AppStaticConfigs.MYTH_LAND_MAX_RANDOM_NPC_COUNT = 7644;
            AppDto.AppStaticConfigs.MYTH_LAND_RANDOM_MIN_LAYER = 7645;
            AppDto.AppStaticConfigs.MYTH_LAND_RANDOM_MAX_LAYER = 7646;
            AppDto.AppStaticConfigs.GUILD_COMP_JOIN_DAYS = 7700;
            AppDto.AppStaticConfigs.GUILD_COMP_DELAY_ENTER_MINTUES = 7701;
            AppDto.AppStaticConfigs.GUILD_COMP_TIME_BONUS = 7702;
            AppDto.AppStaticConfigs.GUILD_COMP_DEFALT_ACTION_POINT = 7703;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_CD = 7704;
            AppDto.AppStaticConfigs.GUILD_COMP_LOST_CD = 7705;
            AppDto.AppStaticConfigs.GUILD_COMP_PERSONAL_LOST_ACTION_POINT = 7706;
            AppDto.AppStaticConfigs.GUILD_COMP_TOTAL_LOST_ACTION_POINT = 7707;
            AppDto.AppStaticConfigs.GUILD_COMP_LOSER_SCORE = 7708;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_STREAK_CONFIG = 7709;
            AppDto.AppStaticConfigs.GUILD_COMP_STOP_ENEMY_WIN_CONFIG = 7710;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_CONTRIBUTE_BONUS = 7711;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_PLAYER_EXP_FORMULA = 7712;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_PET_EXP_FORMULA = 7713;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_ASSETS_BONUS = 7714;
            AppDto.AppStaticConfigs.GUILD_COMP_LOST_ASSETS_BONUS = 7715;
            AppDto.AppStaticConfigs.GUILD_COMP_ACTION_POINT_FOR_BATTLE = 7716;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_GUILD_SCORE_FACTOR = 7717;
            AppDto.AppStaticConfigs.GUILD_COMP_LOST_GUILD_SCORE_FACTOR = 7718;
            AppDto.AppStaticConfigs.GUILD_COMP_KICK_OUT_BONUS = 7719;
            AppDto.AppStaticConfigs.GUILD_COMP_KICK_OUT_BONUS_RATE = 7720;
            AppDto.AppStaticConfigs.GUILD_COMP_BOX_NPC_ID = 7721;
            AppDto.AppStaticConfigs.GUILD_COMP_BATTLE_WIN_BONUS = 7722;
            AppDto.AppStaticConfigs.GUILD_COMP_BATTLE_LOST_BONUS = 7723;
            AppDto.AppStaticConfigs.GUILD_COMP_LEVEL_LIMIT = 7724;
            AppDto.AppStaticConfigs.GUILD_COMP_HEALTH_LIMIT = 7725;
            AppDto.AppStaticConfigs.GUILD_COMP_MIN_COUNT = 7726;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_GIFT_BOX_COUNT = 7727;
            AppDto.AppStaticConfigs.GUILD_COMP_LOST_GIFT_BOX_COUNT = 7728;
            AppDto.AppStaticConfigs.GUILD_COMP_MAX_ITEM_BONUS_TIMES = 7729;
            AppDto.AppStaticConfigs.GUILD_COMP_MAX_OPEN_BOX_COUNT = 7730;
            AppDto.AppStaticConfigs.GUILD_COMP_MODEL_SCALE = 7731;
            AppDto.AppStaticConfigs.GUILD_COMP_WIN_SALARY_BONUS = 7732;
            AppDto.AppStaticConfigs.GUILD_COMP_LOST_SALARY_BONUS = 7733;
            AppDto.AppStaticConfigs.MAZE_PROP_ID = 7750;
            AppDto.AppStaticConfigs.MAZE_DURATION_TIME = 7751;
            AppDto.AppStaticConfigs.MAZE_PROP_OPEN_ANNOUCEMENT_ID = 7752;
            AppDto.AppStaticConfigs.MAZE_NEW_GUY_SCORE_BONUS = 7753;
            AppDto.AppStaticConfigs.MAZE_MAX_DAILY_SCORE = 7754;
            AppDto.AppStaticConfigs.MAZE_ASSIST_SCORE_BONUS = 7755;
            AppDto.AppStaticConfigs.MAZE_PROP_FALL_RATE = 7756;
            AppDto.AppStaticConfigs.MAZE_BOSS_FALL_ITEM_ID = 7757;
            AppDto.AppStaticConfigs.MAZE_OPEN_BOX_CD = 7758;
            AppDto.AppStaticConfigs.MAZE_BOSS_BOX_R = 7759;
            AppDto.AppStaticConfigs.MAZE_MAX_OPEN_BOX_COUNT = 7760;
            AppDto.AppStaticConfigs.EQUIPMENT_MIN_APTITUDE_GEN_LEVEL = 8000;
            AppDto.AppStaticConfigs.EQUIPMENT_EMBED_TRANSFER_MAX_LEVEL_DIFF = 8001;
            AppDto.AppStaticConfigs.EQUIPMENT_EMBED_TRANSFER_MIN_EMBED_LEVEL = 8002;
            AppDto.AppStaticConfigs.EQUIPMENT_EMBED_TRANSFER_COST = 8003;
            AppDto.AppStaticConfigs.EQUIPMENT_APTITUDE_TRANSFER_MIN_LEVEL = 8004;
            AppDto.AppStaticConfigs.PET_EQUIPMENT_SKILLS_MUTEX = 8005;
            AppDto.AppStaticConfigs.PET_EQUIPMENT_BASE_PROPERTY_RULE = 8006;
            AppDto.AppStaticConfigs.EQUIPMENT_DURATION_DEDUCT_POINT_RATE = 8007;
            AppDto.AppStaticConfigs.EQUIPMENT_DURATION_FACTOR1 = 8008;
            AppDto.AppStaticConfigs.EQUIPMENT_DURATION_FACTOR2 = 8009;
            AppDto.AppStaticConfigs.EQUIPMENT_SKILL_PLUS_RATE_FORMULA = 8010;
            AppDto.AppStaticConfigs.EQUIPMENT_SKILL_MAX_PLUS_RATE = 8011;
            AppDto.AppStaticConfigs.EQUIPMENT_DURATION_FOREVER = 8012;
            AppDto.AppStaticConfigs.ATTACK_REDUCE_DURATION = 8013;
            AppDto.AppStaticConfigs.BE_ATTACK_REDUCE_DURATION = 8014;
            AppDto.AppStaticConfigs.EQUIPMENT_RESET_LEVEL_LIMIT = 8015;
            AppDto.AppStaticConfigs.EQUIPMENT_RESET_ACTIVE_SKILL_COUNT = 8016;
            AppDto.AppStaticConfigs.PET_EQUIPMENT_COMBINE_SINGLE_RATE = 8017;
            AppDto.AppStaticConfigs.PET_EQUIPMENT_COMBINE_SINGLE_DOUBLE_RATE = 8018;
            AppDto.AppStaticConfigs.PET_EQUIPMENT_COMBINE_DOUBLE_RATE = 8019;
            AppDto.AppStaticConfigs.WEAPON_EFFECT_EXCHANGE_ITEM = 8020;
            AppDto.AppStaticConfigs.EQUIPMENT_GENERAL_EQUIPSEXTYPE = 8021;
            AppDto.AppStaticConfigs.EQUIPMENT_GENERAL_CHARACTOR = 8022;
            AppDto.AppStaticConfigs.EQUIPMENT_CHANGE_MIN_SCORE = 8023;
            AppDto.AppStaticConfigs.EQUIPMENT_CHANGE_MIN_GRADE = 8024;
            AppDto.AppStaticConfigs.EQUIPMENT_CHANGE_CONSUME_INGOT = 8025;
            AppDto.AppStaticConfigs.EQUIPMENT_DEFAULT_WEAPON_EFFECT_ID = 8026;
            AppDto.AppStaticConfigs.EQUIPMENT_PLAN_SWITCH_MIN_GRADE = 8027;
            AppDto.AppStaticConfigs.EQUIPMENT_CERTIFICATE_COST_COPPER = 8028;
            AppDto.AppStaticConfigs.EQUIPMENT_CERTIFICATE_MIN_GRADE = 8029;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_PROPS_ID = 8800;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_PROPS_EXP = 8801;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_BREAK_GRADES = 8802;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_BREAK_PROPS_ID = 8803;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_SPRITE_PROPS_ID = 8804;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_SPRITE_TRANSFORM_PROPS_ID = 8805;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_SPRITE_TRANSFORM_PROPS_COUNTS = 8806;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_DECOMPOSE_PROPS = 8807;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_BREAK_PROPERTY_ENABLE_GRADE = 8808;
            AppDto.AppStaticConfigs.EQUIPMENT_HALLOW_SPRITE_AWAKE_GRADE = 8809;
            AppDto.AppStaticConfigs.SPELL_MAX_LEVEL = 9000;
            AppDto.AppStaticConfigs.SPELL_STUDY_FEE = 9001;
            AppDto.AppStaticConfigs.SPELL_STUDY_ADD_EXP = 9002;
            AppDto.AppStaticConfigs.SPELL_EXP_BUFF_RATE = 9003;
            AppDto.AppStaticConfigs.SPELL_DIFF_GAME_SERVER_GRADE = 9004;
            AppDto.AppStaticConfigs.SPELL_DIFF_LESS_EQUAL_GAME_SERVER_GRADE = 9005;
            AppDto.AppStaticConfigs.SPELL_DIFF_GREATE_GAME_SERVER_GRADE = 9006;
            AppDto.AppStaticConfigs.MERITS_GAIN_EXP_FACTOR = 9007;
            AppDto.AppStaticConfigs.MERITS_GAIN_EXP_MAX = 9008;
            AppDto.AppStaticConfigs.MERITS_GAIN_FLOAT_RANGE = 9009;
            AppDto.AppStaticConfigs.PRECIOUS_BOX_SPELL_EXP_BUFF_RATE = 9010;
            AppDto.AppStaticConfigs.SCENE_PRECIOUS_BOX_EXP_BUFF_RATE = 9011;
            AppDto.AppStaticConfigs.ASSIST_SKILL_CONTRIBUTE_TO_COPPER = 9100;
            AppDto.AppStaticConfigs.ASSIST_SKILL_MAX_LEVEL = 9101;
            AppDto.AppStaticConfigs.ASSIST_SKILL_LEVEL_FLAG = 9102;
            AppDto.AppStaticConfigs.ASSIST_SKILL_LEVEL_DIFF = 9103;
            AppDto.AppStaticConfigs.ASSIST_SKILL_CONVERT_LOST = 9104;
            AppDto.AppStaticConfigs.ASSIST_SKILL_CONVERT_GAIN = 9105;
            AppDto.AppStaticConfigs.LEARN_ASSIST_SKILL_NUM = 9106;
            AppDto.AppStaticConfigs.LEARN_ASSIST_SKILL_Change = 9107;
            AppDto.AppStaticConfigs.ASSIST_SKILL_SOCRE_FACTOR = 9108;
            AppDto.AppStaticConfigs.ASSIST_SKILL_CONVERT_LUCKY_KONT_LOST = 9109;
            AppDto.AppStaticConfigs.ASSIST_SKILL_CONVERT_LUCKY_KONT_GAIN = 9110;
            AppDto.AppStaticConfigs.LUCKY_KONT_ID = 9111;
            AppDto.AppStaticConfigs.MAKE_LUKCY_KONT_NEED_LEVEL = 9112;
            AppDto.AppStaticConfigs.MONSTER_ANNOUNCEMENT_ID = 9200;
            AppDto.AppStaticConfigs.BABY_ANNOUNCEMENT_ID = 9201;
            AppDto.AppStaticConfigs.PROPS_PUTIAN_ANNOUNCEMENT_ID = 9202;
            AppDto.AppStaticConfigs.PROPS_HUANTONG_ANNOUNCEMENT_ID = 9203;
            AppDto.AppStaticConfigs.PROPS_PRECIOUS_ANNOUNCEMENT_ID = 9204;
            AppDto.AppStaticConfigs.PROPS_MYTH_ANNOUNCEMENT_ID = 9205;
            AppDto.AppStaticConfigs.EQUIP_SMITH_ANNOUNCEMENT_ID = 9206;
            AppDto.AppStaticConfigs.PET_REGULAR_ANNOUNCEMENT_ID = 9207;
            AppDto.AppStaticConfigs.PET_SS_ANNOUNCEMENT_ID = 9209;
            AppDto.AppStaticConfigs.STAR_ANNOUNCEMENT_ID = 9210;
            AppDto.AppStaticConfigs.PLOUGH_ANNOUNCEMENT_ID = 9211;
            AppDto.AppStaticConfigs.MONEY_TREE_ANNOUNCEMENT_ID = 9212;
            AppDto.AppStaticConfigs.WORLD_BOSS_ANNOUNCEMENT_ID = 9213;
            AppDto.AppStaticConfigs.WORLD_BOSS_LEAVE_ANNOUNCEMENT_ID = 9214;
            AppDto.AppStaticConfigs.WORLD_BOSS_COPY_ANNOUNCEMENT_ID = 9215;
            AppDto.AppStaticConfigs.WORLD_BOSS_KILL_BOX_ANNOUNCEMENT_ID = 9216;
            AppDto.AppStaticConfigs.PROPS_MUTATE_ANNOUNCEMENT_ID = 9217;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_ANNOUNCEMENT_ID = 9218;
            AppDto.AppStaticConfigs.MUTATE_GENERAL_KING_APPEAR_ANNOUNCEMENT_ID = 9219;
            AppDto.AppStaticConfigs.GENERAL_KING_APPEAR_ANNOUNCEMENT_ID = 9220;
            AppDto.AppStaticConfigs.PROPS_IMMORITAL_ANNOUNCEMENT_ID = 9221;
            AppDto.AppStaticConfigs.PET_SSS_ANNOUNCEMENT_ID = 9222;
            AppDto.AppStaticConfigs.GOLD_ANNOUNCEMENT_ID = 9223;
            AppDto.AppStaticConfigs.WORLD_BOSS_PLAYER_LIMIT = 9300;
            AppDto.AppStaticConfigs.WORLD_BOSS_PLUS_MONSTER_RANK = 9301;
            AppDto.AppStaticConfigs.WORLD_BOSS_BOX_SCENE_GROUP_ID = 9302;
            AppDto.AppStaticConfigs.WORLD_BOSS_BOX_COUNT = 9303;
            AppDto.AppStaticConfigs.WORLD_BOSS_REWARD_MAX = 9304;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_HP = 9450;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_MP = 9451;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_ATTACK = 9452;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_DEFENSE = 9453;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_MAGIC = 9454;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_SPEED = 9455;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_SKILLS_ONE = 9456;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_SKILLS_TWO = 9457;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_SKILLS_THREE = 9458;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_QUALITY = 9459;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_QUALITY_ORANGE = 9460;
            AppDto.AppStaticConfigs.PET_SS_GRADE_FIGHTING_CAPACITY = 9462;
            AppDto.AppStaticConfigs.PET_S_GRADE_FIGHTING_CAPACITY = 9463;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_QUALITY_PURPLE = 9464;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_QUALITY_RED = 9465;
            AppDto.AppStaticConfigs.EQUIPMENT_SCORE_FACTOR = 9466;
            AppDto.AppStaticConfigs.PET_SSS_GRADE_FIGHTING_CAPACITY = 9467;
            AppDto.AppStaticConfigs.RANK_QUESTION_PLAYER = 9500;
            AppDto.AppStaticConfigs.RANK_GUILD_COUNT = 9501;
            AppDto.AppStaticConfigs.RANK_PLAYER_COUNT = 9502;
            AppDto.AppStaticConfigs.RANK_SPELL_COUNT = 9503;
            AppDto.AppStaticConfigs.RANK_PET_COUNT = 9504;
            AppDto.AppStaticConfigs.RANK_CHALLENGE_COUNT = 9505;
            AppDto.AppStaticConfigs.RANK_CHALLENGE_REWARD = 9506;
            AppDto.AppStaticConfigs.RANK_TOURNAMENT_COUNT = 9507;
            AppDto.AppStaticConfigs.RANK_TOURNAMENT_ZHUANGYUAN_TITLE = 9508;
            AppDto.AppStaticConfigs.RANK_MERRITS_COUNT = 9509;
            AppDto.AppStaticConfigs.RANK_MERRITS_TITLE = 9510;
            AppDto.AppStaticConfigs.RANK_CHARM_COUNT = 9511;
            AppDto.AppStaticConfigs.RANK_CHARM_TITLE = 9512;
            AppDto.AppStaticConfigs.RANK_FACTION_TRIAL_COUNT = 9513;
            AppDto.AppStaticConfigs.RANK_FACTION_TRIAL_TITLE = 9514;
            AppDto.AppStaticConfigs.RANK_STRENGTH_COUNT = 9515;
            AppDto.AppStaticConfigs.RANK_TOURNAMENT_BANGYAN_TITLE = 9516;
            AppDto.AppStaticConfigs.RANK_TOURNAMENT_TANHUA_TITLE = 9517;
            AppDto.AppStaticConfigs.RANK_TOURNAMENT_JINSHI_TITLE = 9518;
            AppDto.AppStaticConfigs.RANK_HERO_COUNT = 9519;
            AppDto.AppStaticConfigs.RANK_HERO_TITLE_COUNT = 9520;
            AppDto.AppStaticConfigs.RANK_HERO_TITLE_ID = 9521;
            AppDto.AppStaticConfigs.WORLD_BOSS_RANK_COUNT = 9522;
            AppDto.AppStaticConfigs.RANK_ACHIEVEMENT_COUNT = 9524;
            AppDto.AppStaticConfigs.RANK_ACHIEVEMENT_SHOW_COUNT = 9525;
            AppDto.AppStaticConfigs.RANK_LOVEING_COUNT = 9530;
            AppDto.AppStaticConfigs.RANK_TITLE_MAX_COUNT = 9531;
            AppDto.AppStaticConfigs.RANK_FIRST_TITLE_ID = 9532;
            AppDto.AppStaticConfigs.RANK_OTHER_TITLE_ID = 9533;
            AppDto.AppStaticConfigs.RANK_PRESTIGE_COUNT = 9534;
            AppDto.AppStaticConfigs.RANK_DATANG_MATCHLESS_TITLE_COUNT = 9535;
            AppDto.AppStaticConfigs.RANK_DATANG_MATCHLESS_TITLE_ID = 9536;
            AppDto.AppStaticConfigs.TALENT_SHOW_RANK_COUNT = 9537;
            AppDto.AppStaticConfigs.MONEY_TREE_FREE_WAIT_MINUTE = 9600;
            AppDto.AppStaticConfigs.MONEY_TREE_SIX_MULTIPLE = 9601;
            AppDto.AppStaticConfigs.MONEY_TREE_MULTIPLE = 9602;
            AppDto.AppStaticConfigs.MONEY_TREE_CAN_GET_REWARD = 9603;
            AppDto.AppStaticConfigs.AWARDACTIVE_REWARD_PROPS = 9620;
            AppDto.AppStaticConfigs.FASHION_DRESS_PLAN_AMOUNT = 9650;
            AppDto.AppStaticConfigs.FASHIONDRESS_CHANGE_CONSUME_INGOT = 9651;
            AppDto.AppStaticConfigs.QUESTION_ONE = 10000;
            AppDto.AppStaticConfigs.QUESTION_TWO = 10001;
            AppDto.AppStaticConfigs.QUESTION_THREE = 10002;
            AppDto.AppStaticConfigs.QUESTION_DISCIPLE = 10003;
            AppDto.AppStaticConfigs.GUILD_POSITION_BOSS = 10004;
            AppDto.AppStaticConfigs.GUILD_POSITION_VICEBOSS = 10005;
            AppDto.AppStaticConfigs.GUILD_POSITION_ELDER = 10006;
            AppDto.AppStaticConfigs.GUILD_POSITION_MASTER_TANG = 10007;
            AppDto.AppStaticConfigs.GUILD_POSITION_MASTER_XIANG = 10008;
            AppDto.AppStaticConfigs.GUILD_POSITION_ELITE = 10009;
            AppDto.AppStaticConfigs.GUILD_POSITION_MASSES = 10010;
            AppDto.AppStaticConfigs.GUILD_POSITION_APPRENTICE = 10011;
            AppDto.AppStaticConfigs.QUESTION_RANK_GAIN_TITLE = 10012;
            AppDto.AppStaticConfigs.TOURNAMENT_GAIN_ZHUANGYUAN_TITLE = 10013;
            AppDto.AppStaticConfigs.MERRITS_GAIN_TITLE = 10014;
            AppDto.AppStaticConfigs.CHARM_GAIN_TITLE = 10015;
            AppDto.AppStaticConfigs.FACTION_TRIAL_GAIN_TITLE = 10016;
            AppDto.AppStaticConfigs.FIRST_TOURNAMENT_GAIN_TITLE = 10017;
            AppDto.AppStaticConfigs.TOURNAMENT_GAIN_BANGYAN_TITLE = 10018;
            AppDto.AppStaticConfigs.TOURNAMENT_GAIN_TANHUA_TITLE = 10019;
            AppDto.AppStaticConfigs.TOURNAMENT_GAIN_JINSHI_TITLE = 10020;
            AppDto.AppStaticConfigs.STRENGTH_FACTION_FRIST_RANK_GAIN_TITLE = 10021;
            AppDto.AppStaticConfigs.STRENGTH_FRIST_RANK_GAIN_TITLE = 10022;
            AppDto.AppStaticConfigs.QUESTION_HELP_TIMES = 10023;
            AppDto.AppStaticConfigs.QUESTION_ANSWER_DS_RANK = 10024;
            AppDto.AppStaticConfigs.PUNISH_RESERVE_COPPER_AMOUNT = 10100;
            AppDto.AppStaticConfigs.COMPENSATE_GRADELIMIT = 10101;
            AppDto.AppStaticConfigs.COMPENSATE_PLAYER_EXP_FORMULA = 10102;
            AppDto.AppStaticConfigs.COMPENSATE_COPPER_FORMULA = 10103;
            AppDto.AppStaticConfigs.COMPENSATE_SILVER_FORMULA = 10104;
            AppDto.AppStaticConfigs.USE_ITEM_SHOW_COUNT_SPELL = 10200;
            AppDto.AppStaticConfigs.SCENE_MONSTER_FOR_GENERAL_KING = 10250;
            AppDto.AppStaticConfigs.SCENE_MONSTER_FOR_GENERAL_KING_COUNT = 10251;
            AppDto.AppStaticConfigs.SCENE_MONSTER_KING_PLAYER_MIN_SIZE = 10252;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_BATTLE_REWARD_TIMES = 10253;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_HIGH_TREASURE = 10254;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_GENERAL_COUNT = 10255;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_GENERAL_COUNT_MIN = 10256;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_GENERAL_COUNT_MAX = 10257;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_GENERAL_MUTATE = 10258;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_GENERAL_START_TIME = 10259;
            AppDto.AppStaticConfigs.GENERAL_MONSTER_KING_GENERAL_END_TIME = 10260;
            AppDto.AppStaticConfigs.PROMOTION_SHARE_SCORE = 10400;
            AppDto.AppStaticConfigs.PROMOTION_UPGRADE_ON_GRADE = 10401;
            AppDto.AppStaticConfigs.PROMOTION_UPGRADE_SCORE = 10402;
            AppDto.AppStaticConfigs.PROMOTION_SCORE_DAILY_LIMIT = 10403;
            AppDto.AppStaticConfigs.MARRIAGE_SWEET_DROP_NUM = 10500;
            AppDto.AppStaticConfigs.MARRIAGE_WEDDING_SCENE = 10501;
            AppDto.AppStaticConfigs.MARRIAGE_LOVEVALUE_DAILY = 10502;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_SCENE = 10503;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_BOX_CLEAR_TIME = 10504;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_PET_TAKES_RANDOM_PET_COUNT = 10505;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_MANAGER_GIFT_SCORE_LIMIT = 10506;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_PET_TAKES_SCORE_LIMIT = 10507;
            AppDto.AppStaticConfigs.BRIDAL_SEDAN_GAIN_LOVE_VALUE_LIMIT = 10508;
            AppDto.AppStaticConfigs.EAT_MUTATE_LOVEVALUE = 10550;
            AppDto.AppStaticConfigs.ICEBOX_PACK_EXPAND_SIZE = 10551;
            AppDto.AppStaticConfigs.ICEBOX_PACK_EXPAND_INGOT = 10552;
            AppDto.AppStaticConfigs.WEDDING_CANDIES_PROPS_APPLY_LIMIT = 10590;
            AppDto.AppStaticConfigs.WEDDING_CANDIES_PROPS_APPLY_MAX_ITME = 10591;
            AppDto.AppStaticConfigs.WEDDING_CANDIES_PROPS_ADD_EXP = 10592;
            AppDto.AppStaticConfigs.MONEY_PACK_CHARGE_LIMIT = 10601;
            AppDto.AppStaticConfigs.MONEY_PACK_REFRESH_LIMIT = 10602;
            AppDto.AppStaticConfigs.MONEY_PACK_CHARGE_OPEN_LIMIT = 10603;
            AppDto.AppStaticConfigs.MONEY_PACK_TIMEOUT = 10604;
            AppDto.AppStaticConfigs.MONEY_PACK_PAY_NUM_LIMIT = 10605;
            AppDto.AppStaticConfigs.CHARGE_REWARD_GROW_MINLIMIT = 10620;
            AppDto.AppStaticConfigs.CHARGE_REWARD_TIMES = 10621;
            AppDto.AppStaticConfigs.EVERDAY_GAME_RECHARGE_MONEY = 10650;
            AppDto.AppStaticConfigs.WEEKLY_BOX_REFRESH_ITEM = 10700;
            AppDto.AppStaticConfigs.WEEKLY_BOX_REFRESH_ITEM_COUNT = 10701;
            AppDto.AppStaticConfigs.CONSUMPTION_MAX_RANK = 10800;
            AppDto.AppStaticConfigs.CONSUMPTION_IGNORE_TRACE_TYPES = 10801;
            AppDto.AppStaticConfigs.PAYMENT_RETURN_SPLIT_CENT = 10802;
            AppDto.AppStaticConfigs.INDENTURE_MASTER_GRADE_MIN = 10900;
            AppDto.AppStaticConfigs.INDENTURE_MASTER_HAS_APPRENTICE_LIMIT = 10901;
            AppDto.AppStaticConfigs.INDENTURE_MASTER_WEEKLY_HAS_APPRENTICE_LIMIT = 10902;
            AppDto.AppStaticConfigs.INDENTURE_APPRENTICE_GRADE_MIN = 10903;
            AppDto.AppStaticConfigs.INDENTURE_APPRENTICE_GRADE_MAX = 10904;
            AppDto.AppStaticConfigs.INDENTURE_CONSUMEVIGOUR = 10905;
            AppDto.AppStaticConfigs.INDENTURE_FORCE_FINISH_WAIT_PERIOD = 10906;
            AppDto.AppStaticConfigs.INDENTURE_FINISH_GRADE_MIN = 10907;
            AppDto.AppStaticConfigs.INDENTURE_FINISH_GRADE_MAX = 10908;
            AppDto.AppStaticConfigs.INDENTURE_DAILY_MISSION_MAX = 10909;
            AppDto.AppStaticConfigs.INDENTURE_RECOMMEND_SIZE = 10910;
            AppDto.AppStaticConfigs.INDENTURE_FORCE_APPLY_WAIT_PERIOD = 10911;
            AppDto.AppStaticConfigs.INDENTURE_MASTER_DROP_WAIT_PERIOD = 10912;
            AppDto.AppStaticConfigs.INDENTURE_APPRENTICE_DROP_WAIT_PERIOD = 10913;
            AppDto.AppStaticConfigs.INDENTURE_FORCE_APPLY_GRADE_LIMIT = 10914;
            AppDto.AppStaticConfigs.GUILD_TRAINEE_MISSION_GRADE_LIMIT = 10920;
            AppDto.AppStaticConfigs.GUILD_TRAINEE_PLAYER_GRADE_LIMIT = 10921;
            AppDto.AppStaticConfigs.GUILD_TRAINEE_WEEKLY_GRANT_BOX_LIMIT = 10922;
            AppDto.AppStaticConfigs.HAPPY_GRID_ACTIVE_MULTIPLE = 10930;
            AppDto.AppStaticConfigs.CAMPWAR_PLAYER_LEVEL_LIMIT = 11000;
            AppDto.AppStaticConfigs.CAMPWAR_MAX_FAILURE_TIMES = 11001;
            AppDto.AppStaticConfigs.CAMPWAR_TIME_BONUS = 11002;
            AppDto.AppStaticConfigs.CAMPWAR_SCENE_ID = 11006;
            AppDto.AppStaticConfigs.CAMPWAR_MAX_ROUND = 11007;
            AppDto.AppStaticConfigs.CAMPWAR_TEAM_MEMBER_COUNT_LIMIT = 11008;
            AppDto.AppStaticConfigs.CAMPWAR_PRE_ASSIGN_STRENGTH_RANK = 11009;
            AppDto.AppStaticConfigs.CAMPWAR_NPC_PEACH_REFRESH_INFO = 11010;
            AppDto.AppStaticConfigs.CAMPWAR_PICKUP_CD = 11011;
            AppDto.AppStaticConfigs.CAMPWAR_WIN_CD = 11012;
            AppDto.AppStaticConfigs.CAMPWAR_LOST_CD = 11013;
            AppDto.AppStaticConfigs.CAMPWAR_MAX_ITEM_BONUS_TIMES = 11014;
            AppDto.AppStaticConfigs.CAMPWAR_BATTLE_WIN_BONUS = 11015;
            AppDto.AppStaticConfigs.CAMPWAR_BATTLE_LOST_BONUS = 11016;
            AppDto.AppStaticConfigs.CAMPWAR_WIN_STREAK_CONFIG = 11017;
            AppDto.AppStaticConfigs.CAMPWAR_STOP_ENEMY_WIN_CONFIG = 11018;
            AppDto.AppStaticConfigs.CAMPWAR_MAX_SHOW_RANK = 11019;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_POINT0 = 11020;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_POINT1 = 11021;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_NPC_IDS_0 = 11022;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_NPC_IDS_1 = 11023;
            AppDto.AppStaticConfigs.CAMPWAR_MAX_RANK_COUNT = 11024;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_WIN_BONUS = 11025;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_LOST_BONUS = 11026;
            AppDto.AppStaticConfigs.CAMPWAR_CAMP_DRAW_BONUS = 11027;
            AppDto.AppStaticConfigs.CAMPWAR_NPC_END_REMIND_REFRESH_INFO = 11028;
            AppDto.AppStaticConfigs.CAMPWAR_PEACH_REFRESH_COUNT_FORMULA = 11029;
            AppDto.AppStaticConfigs.SCENE_GOLD_BOX = 12000;
            AppDto.AppStaticConfigs.SCENE_GOLD_BOX_SIZE = 12001;
            AppDto.AppStaticConfigs.USER_GET_GOLD_BOX_COUNT = 12002;
            AppDto.AppStaticConfigs.SCENE_GOLD_BOX_CONSUME_COPPER = 12003;
            AppDto.AppStaticConfigs.GOLD_BOX_REFRESH_COUNT = 12004;
            AppDto.AppStaticConfigs.SCENE_GOLD_BOX_COST_KEY = 12006;
            AppDto.AppStaticConfigs.SCENE_GOLD_BOX_PICKUP_CD = 12007;
            AppDto.AppStaticConfigs.MAX_OFFICAL = 13000;
            AppDto.AppStaticConfigs.MIN_LV = 13001;
            AppDto.AppStaticConfigs.DISTRIBUTE_OFFICIAL_SALARY_ACTIVE = 13002;
            AppDto.AppStaticConfigs.DISTRIBUTE_OFFICIAL_SALARY_OFFICIAL_POSITION = 13003;
            AppDto.AppStaticConfigs.MAX_TEMP_PRESTIGE = 13100;
            AppDto.AppStaticConfigs.MAX_GRADE_OFFEST = 13101;
            AppDto.AppStaticConfigs.MIN_SERVER_GRADE = 13102;
            AppDto.AppStaticConfigs.TEMP_PRESTIGE_SOE = 13103;
            AppDto.AppStaticConfigs.BONUS_OFFEST = 13104;
            AppDto.AppStaticConfigs.BONUS_RATE = 13105;
            AppDto.AppStaticConfigs.FLY_MISSION = 13200;
            AppDto.AppStaticConfigs.FLY_MISSION_MIN_GRADE = 13201;
            AppDto.AppStaticConfigs.RIDE_MOUNT_TYPE_MAX_SIZE = 14001;
            AppDto.AppStaticConfigs.RIDE_MOUNT_EXCHANGE_LAND_PROP_ID = 14002;
            AppDto.AppStaticConfigs.RIDE_MOUNT_EXCHANGE_FLY_PROP_ID = 14003;
            AppDto.AppStaticConfigs.RIDE_MOUNT_OPEN_APTITUDE_PROP_ID = 14004;
            AppDto.AppStaticConfigs.RIDE_GRADE_EXP_PROP_ID = 14005;
            AppDto.AppStaticConfigs.RIDE_MOUNT_ORNAMENT_PROP_ID = 14006;
            AppDto.AppStaticConfigs.RIDE_MOUNT_EXCHANGE_NPC_ID = 14007;
            AppDto.AppStaticConfigs.RIDE_MOUNT_EXCHANGE_COUNT = 14010;
            AppDto.AppStaticConfigs.RIDE_SHOW_EFFECT_GRADE_LIMIT = 14011;
            AppDto.AppStaticConfigs.RIDE_UPGRADE_GAIN_SKILL_POINT = 14012;
            AppDto.AppStaticConfigs.RIDE_FACTION_MAX_ASSIGNABLE_POINT = 14013;
            AppDto.AppStaticConfigs.RIDE_PASSIVE_MAX_ASSIGNABLE_POINT = 14014;
            AppDto.AppStaticConfigs.RIDE_GRADE_EXP_DAILY_LIMIT = 14015;
            AppDto.AppStaticConfigs.RIDE_FACTION_RESET_CONSUME_AMT = 14016;
            AppDto.AppStaticConfigs.RIDE_PASSIVE_RESET_CONSUME_AMT = 14017;
            AppDto.AppStaticConfigs.RIDE_PASSIVE_MAX_UPGRADE_LEVEL = 14018;
            AppDto.AppStaticConfigs.RIDE_MAX_GRADE = 14019;
            AppDto.AppStaticConfigs.RIDE_PASSIVE_MAX_EXTRA_LEVEL = 14020;
            AppDto.AppStaticConfigs.RIDE_PASSIVE_ADDEXP_CONSUME_COPPER_AMT = 14021;
            AppDto.AppStaticConfigs.RIDE_MOUNT_PASSIVE_CAN_LEARNED = 14022;
            AppDto.AppStaticConfigs.EVERDAY_BLESSING_RECHARGE_MIN_MONEY = 15001;
            AppDto.AppStaticConfigs.MERGE_PLAYER_RENAME_PROPS_ID = 16001;
            AppDto.AppStaticConfigs.MERGE_GUILD_RENAME_PROPS_ID = 16002;
            AppDto.AppStaticConfigs.MERGE_COMPENSATION_OLD_SERVER = 16003;
            AppDto.AppStaticConfigs.MERGE_COMPENSATION_NEW_SERVER = 16004;
            AppDto.AppStaticConfigs.MERGE_COMPENSATION_GRADE = 16005;
            AppDto.AppStaticConfigs.SHIPMENT_MAX_ROUND = 16500;
            AppDto.AppStaticConfigs.SHIPMENT_MAX_MEMBER_SIZE = 16501;
            AppDto.AppStaticConfigs.SHIPMENT_ACCEPT_NPC_ID = 16502;
            AppDto.AppStaticConfigs.SHIPMENT_FIRST_NPC_ID = 16503;
            AppDto.AppStaticConfigs.SHIPMENT_SECOND_NPC_ID = 16504;
            AppDto.AppStaticConfigs.SHIPMENT_FINISH_NPC_ID = 16505;
            AppDto.AppStaticConfigs.SHIPMENT_SUBMIT_NPC_SEQ = 16506;
            AppDto.AppStaticConfigs.SHIPMENT_MAX_TIMES = 16507;
            AppDto.AppStaticConfigs.SHIPMENT_MAX_FAILURE_TIMES = 16508;
            AppDto.AppStaticConfigs.SHIPMENT_MISSION_DURATION = 16509;
            AppDto.AppStaticConfigs.SHIPMENT_ATTACK_PLAYER_GRADE_LIMIT = 16510;
            AppDto.AppStaticConfigs.SHIPMENT_PROTECT_RADIUS = 16511;
            AppDto.AppStaticConfigs.SHIPMENT_MAX_WIN_TIMES = 16512;
            AppDto.AppStaticConfigs.SHIPMENT_POP_TIMEOUT = 16513;
            AppDto.AppStaticConfigs.SHIPMENT_RANDOM_BATTLE_DURATION = 16514;
            AppDto.AppStaticConfigs.SHIPMENT_RANDOM_BATTLE_RATE = 16515;
            AppDto.AppStaticConfigs.SHIPMENT_RANDOM_BATTLE_CONFIG = 16516;
            AppDto.AppStaticConfigs.SHIPMENT_PLAYER_SPEED_RATE = 16517;
            AppDto.AppStaticConfigs.SHIPMENT_RANDOM_BATTLE_PROTECT_BUFF = 16518;
            AppDto.AppStaticConfigs.SHIPMENT_BATTLE_CD_DURATION = 16519;
            AppDto.AppStaticConfigs.DUEL_MAX_ROUND = 16600;
            AppDto.AppStaticConfigs.DUEL_FEE_FORMULA = 16601;
            AppDto.AppStaticConfigs.DUEL_DEDUCT_EXP_FORMULA = 16602;
            AppDto.AppStaticConfigs.DUEL_DEDUCT_EQUIPMENT_RATE = 16603;
            AppDto.AppStaticConfigs.DUEL_NPC = 16604;
            AppDto.AppStaticConfigs.DUEL_DURATION = 16605;
            AppDto.AppStaticConfigs.DUEL_WATHC_BATTLE_SCENE_ID = 16606;
            AppDto.AppStaticConfigs.TALENT_SHOW_VOTER_GRADE = 16700;
            AppDto.AppStaticConfigs.TALENT_SHOW_VOTER_ACTIVE = 16701;
            AppDto.AppStaticConfigs.TALENT_SHOW_CONSUME = 16702;
            AppDto.AppStaticConfigs.TALENT_SHOW_VOTER_ADD_POINT_FORMULA = 16703;
            AppDto.AppStaticConfigs.TALENT_SHOW_VOTES_HEARSAY = 16704;
            AppDto.AppStaticConfigs.TALENT_SHOW_GIVE_FLOWER = 16705;
            AppDto.AppStaticConfigs.TALENT_SHOW_PUBLICIZE = 16706;
            AppDto.AppStaticConfigs.TALENT_SHOW_PUBLICIZE_CONSUME = 16707;
            AppDto.AppStaticConfigs.TALENT_SHOW_GIVE_FLOWER_HEARSAY = 16708;
            AppDto.AppStaticConfigs.TALENT_SHOW_NPC = 16709;
            AppDto.AppStaticConfigs.TALENT_SHOW_SCHEDULE_WOM = 16710;
            AppDto.AppStaticConfigs.TALENT_SHOW_SCHEDULE_DOW = 16711;
            AppDto.AppStaticConfigs.TALENT_SHOW_SCHEDULE_START = 16712;
            AppDto.AppStaticConfigs.TALENT_SHOW_SCHEDULE_DURATION = 16713;
            AppDto.AppStaticConfigs.TALENT_SHOW_SCHEDULE_VOTE_DELAY = 16714;
            AppDto.AppStaticConfigs.TALENT_SHOW_SCHEDULE_PER_END = 16715;
            AppDto.AppStaticConfigs.TALENT_SHOW_OPEN_PROPS_ID = 16716;
            AppDto.AppStaticConfigs.TALENT_SHOW_FIRST_FASHIONDRESS_ID = 16717;
            AppDto.AppStaticConfigs.TALENT_SHOW_GET_TOP_SIZE = 16718;
            AppDto.AppStaticConfigs.TALENT_SHOW_PAGE_SIZE = 16719;
            AppDto.AppStaticConfigs.TALENT_SHOW_DAILY_FREE_VOTER = 16720;
            AppDto.AppStaticConfigs.TALENT_SHOW_DAILY_VOTER_ENABLE = 16721;
            AppDto.AppStaticConfigs.TALENT_SHOW_UPDATE_CD = 16722;
            AppDto.AppStaticConfigs.TALENT_SHOW_POST_CD = 16723;
            AppDto.AppStaticConfigs.SWORN_GRADE_LIMIT = 17000;
            AppDto.AppStaticConfigs.SWORN_SILVER_CONSUME = 17001;
            AppDto.AppStaticConfigs.SWORN_KEY_NAMES = 17002;
            AppDto.AppStaticConfigs.SWORN_TITLE_ID = 17003;
            AppDto.AppStaticConfigs.SWORN_KICK_EXPIRED_MINUTES = 17004;
            AppDto.AppStaticConfigs.HUNDRED_GRASS_TIME_BONUS_PERIOD = 17020;
            AppDto.AppStaticConfigs.HUNDRED_GRASS_TIME_BONUS_FALL = 17021;
            AppDto.AppStaticConfigs.HUNDRED_MAX_INTERACT_TIMES = 17022;
            AppDto.AppStaticConfigs.HUNDRED_BATTLE_RATE = 17023;
            AppDto.AppStaticConfigs.HUNDRED_WATER_TOLLGATE_ID = 17024;
            AppDto.AppStaticConfigs.HUNDRED_FETILIZE_TOLLGATE_ID = 17025;
            AppDto.AppStaticConfigs.HUNDRED_DISINSECT_TOLLGATE_ID = 17026;
            AppDto.AppStaticConfigs.HUNDRED_INTERACT_NOTIFY_RATE = 17027;
            AppDto.AppStaticConfigs.HUNDRED_BATTLE_NOTIFY_RATE = 17028;
            AppDto.AppStaticConfigs.HUNDRED_DECREASE_TIMES = 17029;
            AppDto.AppStaticConfigs.HUNDRED_REFRESH_GRASS_COUNT_DOWN = 17030;
            AppDto.AppStaticConfigs.WORLD_GHOST_HP_FORMULA = 17040;
            AppDto.AppStaticConfigs.WORLD_GHOST_COPY_HP_FORMULA = 17041;
            AppDto.AppStaticConfigs.WORLD_GHOST_PLUS_HP = 17042;
            AppDto.AppStaticConfigs.WORLD_GHOST_UNKILL_HP_RATE = 17043;
            AppDto.AppStaticConfigs.WORLD_GHOST_TOLLGATE_CONFIG = 17044;
            AppDto.AppStaticConfigs.WORLD_GHOST_BOSS_LOSE_HP_NOTIFY = 17045;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_LOSE_BONUS = 17046;
            AppDto.AppStaticConfigs.WORLD_GHOST_KILL_BONUS = 17047;
            AppDto.AppStaticConfigs.WORLD_GHOST_RETREAT_CD_RATE = 17048;
            AppDto.AppStaticConfigs.WORLD_GHOST_RETREAT_CD = 17049;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_LOSE_CD_RATE = 17050;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_LOSE_CD = 17051;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_WIN_CD_RATE = 17052;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_WIN_CD = 17053;
            AppDto.AppStaticConfigs.WORLD_GHOST_NOT_KILL_BONUS = 17054;
            AppDto.AppStaticConfigs.WORLD_GHOST_MAX_OPEN_BOX_COUNT = 17055;
            AppDto.AppStaticConfigs.WORLD_GHOST_BOX_NPC_ID = 17056;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_WIN_BONUS = 17057;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_TIMES_1 = 17058;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_TIMES_2 = 17059;
            AppDto.AppStaticConfigs.WORLD_GHOST_PROP_ID = 17060;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_WIN_PROP_RATE = 17061;
            AppDto.AppStaticConfigs.WORLD_GHOST_BATTLE_LOSE_PROP_RATE = 17062;
            AppDto.AppStaticConfigs.WORLD_GHOST_BOSS_HP_STATE = 17063;
            AppDto.AppStaticConfigs.WORLD_GHOST_BOSS_STATE_BUFF = 17064;
            AppDto.AppStaticConfigs.WORLD_GHOST_BOSS_FURY_MODEL = 17065;
            AppDto.AppStaticConfigs.WORLD_GHOST_BOSS_MONSTER_ID = 17066;
            AppDto.AppStaticConfigs.CHEAT_THESAURUS_BAN_TALK_MAX_GRADE = 17600;
            AppDto.AppStaticConfigs.HERBS_NEED_TIP_ENTRY = 18000;
            AppDto.AppStaticConfigs.IGNOT_EXCHANGE_ACTIVE = 19000;
            AppDto.AppStaticConfigs.RANKING_LIST_WELFARE_LIMIT = 19001;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_FRAGMENT_ID = 19101;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_COMPOSE_COUNT = 19102;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_PROPS_EXP = 19103;
            AppDto.AppStaticConfigs.MAGIC_COMPOSE_ANNOUNCEMENT_ID = 19104;
            AppDto.AppStaticConfigs.MAX_WEAR_MAGIC_EQUIPMENT = 19105;
            AppDto.AppStaticConfigs.MAX_WEAR_MAGIC_COUNT_LEVEL = 19106;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_UPGRADE_ONCE_COPPER = 19107;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_SCORE_FORMULA = 19108;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_MAX_POWER = 19109;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_START_POWER = 19110;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_UNDER_MAX_LEVEL_WEARS = 19111;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_ROUND_ADD_POWER = 19112;
            AppDto.AppStaticConfigs.MAGIC_EQUIPMENT_PROPS = 19113;
            AppDto.AppStaticConfigs.DATANG_MATCHLESS_MIN_TEAM_SIZE = 19500;
            AppDto.AppStaticConfigs.DATANG_ANNOUNCEMENT_START = 19501;
            AppDto.AppStaticConfigs.DATANG_ANNOUNCEMENT_END = 19502;
            AppDto.AppStaticConfigs.DATANG_ANNOUNCEMENT_LEAD_TEAM = 19503;
            AppDto.AppStaticConfigs.DATANG_ANNOUNCEMENT_BEST_TEAM = 19504;
            AppDto.AppStaticConfigs.DATANG_ANNOUNCEMENT_RARE_PROP = 19505;
            AppDto.AppStaticConfigs.DATANG_MATCHLESS_RANK_COUNT = 19506;
            AppDto.AppStaticConfigs.DATANG_MATCHLESS_ACHIEVEMENT_COUNT = 19507;
            AppDto.AppStaticConfigs.DATANG_MATCHLESS_ACHIEVEMENT_CONSUMETIME_3 = 19508;
            AppDto.AppStaticConfigs.DATANG_MATCHLESS_ACHIEVEMENT_CONSUMETIME_2 = 19509;
            AppDto.AppStaticConfigs.DATANG_MATCHLESS_ACHIEVEMENT_CONSUMETIME_1 = 19510;
            AppDto.AppStaticConfigs.CSPK_ENTER_COST = 20000;
            AppDto.AppStaticConfigs.CSPK_GROUP_GRADES = 20001;
            AppDto.AppStaticConfigs.CSPK_ALLOWED_FUNCTION_IDS = 20002;
            AppDto.AppStaticConfigs.CSPK_GROUP_MAX_RANKING = 20003;
            AppDto.AppStaticConfigs.CSPK_ROUND_INFO = 20004;
            AppDto.AppStaticConfigs.CSPK_ENTER_NPC_ID = 20005;
            AppDto.AppStaticConfigs.CSPK_BATTLE_WIN_FALLREWARD_ID = 20006;
            AppDto.AppStaticConfigs.CSPK_BATTLE_LOST_FALLREWARD_ID = 20007;
            AppDto.AppStaticConfigs.CSPK_BYE_FALLREWARD_ID = 20008;
            AppDto.AppStaticConfigs.CSPK_BATTLE_FALLREWARD_TIMES = 20009;
            AppDto.AppStaticConfigs.CSPK_BYE_FALLREWARD_TIMES = 20010;
            AppDto.AppStaticConfigs.CSPK_BATTLE_MAX_ROUND = 20011;
            AppDto.AppStaticConfigs.CSPK_WIN_STREAK_CONFIG = 20012;
            AppDto.AppStaticConfigs.CSPK_STOP_ENEMY_WIN_CONFIG = 20013;
            AppDto.AppStaticConfigs.CSPK_ALL_FALLREWARD_ID = 20014;
            AppDto.AppStaticConfigs.CSPK_MATCH_DURATION = 20015;
            AppDto.AppStaticConfigs.CSPK_MATCH_BATTLE_DELAY = 20016;
            AppDto.AppStaticConfigs.CSPK_SERVER_MAX_GRADE = 20017;
            AppDto.AppStaticConfigs.CSPK_LAST_ROUND_MAX_COUNT = 20018;
            AppDto.AppStaticConfigs.CSPK_GROUP_RANK_TITLES = 20019;
            AppDto.AppStaticConfigs.CSPK_GROUP_ACHIEVEMENT_LOGIC_ID = 20020;
            AppDto.AppStaticConfigs.CSPK_WATCHER_COUNT_NOTIFY_DURATION = 20021;
            AppDto.AppStaticConfigs.CHILDHOOD_MAX_TRAIN_TIMES = 20100;
            AppDto.AppStaticConfigs.CHILD_PER_MAX_TIMES = 20101;
            AppDto.AppStaticConfigs.CHILD_COUPLE_FRIENDLY_NEED = 20102;
            AppDto.AppStaticConfigs.CHILD_BORN_PROP_ID = 20103;
            AppDto.AppStaticConfigs.CHILD_BORN_FEE_1 = 20104;
            AppDto.AppStaticConfigs.CHILD_BORN_FEE_2 = 20105;
            AppDto.AppStaticConfigs.CHILD_APTITUDE_FACTOR_1 = 20106;
            AppDto.AppStaticConfigs.CHILD_APTITUDE_FACTOR_2 = 20107;
            AppDto.AppStaticConfigs.CHILD_PRESET_POTENTIAL = 20108;
            AppDto.AppStaticConfigs.CHILD_RESET_APTITUDE_FEE = 20109;
            AppDto.AppStaticConfigs.CHILD_RESET_BASE_APTITUDE_PROP = 20110;
            AppDto.AppStaticConfigs.CHILD_RESUME_FEE = 20111;
            AppDto.AppStaticConfigs.CHILD_FIRST_RESUME_TIME = 20112;
            AppDto.AppStaticConfigs.MONKEY_REFRESH_COUNT_FACTOR_1 = 20200;
            AppDto.AppStaticConfigs.MONKEY_REFRESH_COUNT_FACTOR_2 = 20201;
            AppDto.AppStaticConfigs.MONKEY_REFRESH_COUNT_FACTOR_3 = 20202;
            AppDto.AppStaticConfigs.MONKEY_BATTLE_MAX_ROUND = 20203;
            AppDto.AppStaticConfigs.MONKEY_BATTLE_COPPER_NEED = 20204;
            AppDto.AppStaticConfigs.MONKEY_BATTLE_BONUS = 20205;
            AppDto.AppStaticConfigs.MONKEY_PLAY_TIMES_LIMIT = 20206;
            AppDto.AppStaticConfigs.MONKEY_MIN_COPPER = 20207;
            AppDto.AppStaticConfigs.MONKEY_NOTICE_COPPER_LIMIT = 20208;
            AppDto.AppStaticConfigs.KITTY_QUESTION_RATE_1 = 20220;
            AppDto.AppStaticConfigs.KITTY_DAILY_TIMES = 20221;
            AppDto.AppStaticConfigs.KITTY_RANDOM_SKILL_BOOK = 20222;
            AppDto.AppStaticConfigs.MILITARY_MISSION_MAX_DAILY_COUNT = 20230;
            AppDto.AppStaticConfigs.MILITARY_MISSION_RATE_INFO = 20231;
            AppDto.AppStaticConfigs.SKILL_CD_TIME = 21000;
            AppDto.AppStaticConfigs.FIRST_COMMAND_DELAY_TIME = 21001;
            AppDto.AppStaticConfigs.BATTLE_CONFIG = 21002;
            AppDto.AppStaticConfigs.MAIN_ROLE_PROPERTIES = 21003;
            AppDto.AppStaticConfigs.USE_ITEM_SKILL_ID = 21004;
            AppDto.AppStaticConfigs.ESCAPE_SKILL_ID = 21005;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AppStaticConfigs);
var AppDto$AppStaticStrings = {
    fullname: "AppDto.AppStaticStrings",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.AppStaticStrings.CHAT_SENSITIVE_WORD_REPLACER = 1;
            AppDto.AppStaticStrings.ACHIEVEMENT_STAGE_FINISH = 100;
            AppDto.AppStaticStrings.PLAYER_FORCE_RENAME = 101;
            AppDto.AppStaticStrings.SILKROAD_FRIEND_HELP_NOTIFY = 900;
            AppDto.AppStaticStrings.SILKROAD_GUILD_HELP_NOTIFY = 901;
            AppDto.AppStaticStrings.SILKROAD_FRIEND_HELP_NOTIFY_FINISH = 902;
            AppDto.AppStaticStrings.SILKROAD_GUILD_HELP_NOTIFY_FINISH = 903;
            AppDto.AppStaticStrings.CHAIN_MISSION_GUILD_HELP_NOTIFY = 904;
            AppDto.AppStaticStrings.PLAYER_RENAME_HEARSAY_NOTIFY = 905;
            AppDto.AppStaticStrings.PLAYER_ADDING_FRIEND_SYSTEM_NOTIFY = 906;
            AppDto.AppStaticStrings.PLAYER_ADDED_FRIEND_SYSTEM_NOTIFY = 907;
            AppDto.AppStaticStrings.ONCE_MISSION_CONFIRM_BATTLE_LEADER_MSG = 908;
            AppDto.AppStaticStrings.ONCE_MISSION_CONFIRM_BATTLE_MEMBER_MSG = 909;
            AppDto.AppStaticStrings.ONCE_MISSION_CONFIRM_BATTLE_REJECT_TEAM_MSG = 910;
            AppDto.AppStaticStrings.ONCE_MISSION_CONFIRM_BATTLE_ACCEPT_TEAM_MSG = 911;
            AppDto.AppStaticStrings.ONCE_MISSION_GUILD_HELP_NOTIFY = 912;
            AppDto.AppStaticStrings.MYTH_LAND_KICK_OUT_TEAM_NOTIFY = 913;
            AppDto.AppStaticStrings.MYTH_LAND_MAX_FAIL_TIMES_NOTIFY = 914;
            AppDto.AppStaticStrings.MYTH_LAND_LEADER_GAIN_ITEM_NOTIFY = 915;
            AppDto.AppStaticStrings.MYTH_LAND_LEADER_USE_ITEM_NOTIFY_1 = 916;
            AppDto.AppStaticStrings.MYTH_LAND_LEADER_USE_ITEM_NOTIFY_2 = 917;
            AppDto.AppStaticStrings.MYTH_LAND_LEADER_USE_ITEM_NOTIFY_3 = 919;
            AppDto.AppStaticStrings.MYTH_LAND_LEADER_USE_ITEM_NOTIFY_4 = 920;
            AppDto.AppStaticStrings.MYTH_LAND_LEADER_USE_ITEM_NOTIFY_5 = 921;
            AppDto.AppStaticStrings.MYTH_LAND_TRANSFER_NOTIFY = 922;
            AppDto.AppStaticStrings.MYTH_LAND_PASS_NOTIFY = 923;
            AppDto.AppStaticStrings.MYTH_LAND_ACCEPT_DEALER_BATTLE_NOTIFY = 924;
            AppDto.AppStaticStrings.MYTH_LAND_REFUSE_DEALER_BATTLE_NOTIFY = 925;
            AppDto.AppStaticStrings.JOIN_TEAM_SUCCESS = 926;
            AppDto.AppStaticStrings.GUILD_TRAINEE_MISSION_GUILD_HELP_NOTIFY = 930;
            AppDto.AppStaticStrings.GUILD_TRAINEE_FINISH_NOTIFY = 931;
            AppDto.AppStaticStrings.GOOD_MISSION_GUILD_HELP_NOTIFY = 932;
            AppDto.AppStaticStrings.GHOST_BOSS_REWARD_LIMIT_NOTIFY = 2000;
            AppDto.AppStaticStrings.JOIN_GUILD_NOTIFY = 3000;
            AppDto.AppStaticStrings.GUILD_POSITION_CHANGE = 3001;
            AppDto.AppStaticStrings.GUILD_BOSS_CHANGE = 3002;
            AppDto.AppStaticStrings.GUILD_BUILDING_UPGRADE = 3003;
            AppDto.AppStaticStrings.CHALLENGE_WIN_NOTIFY = 3004;
            AppDto.AppStaticStrings.CHALLENGE_LOST_NOTIFY = 3005;
            AppDto.AppStaticStrings.GUILD_USE_PROPS_TIME = 3006;
            AppDto.AppStaticStrings.GUILD_USE_PROPS = 3007;
            AppDto.AppStaticStrings.GUILD_SELF_AGAINST = 3008;
            AppDto.AppStaticStrings.GUILD_SELF_SUCCESS = 3009;
            AppDto.AppStaticStrings.GUILD_BUILDING_UPGRADE_SUCCESS = 3010;
            AppDto.AppStaticStrings.GUILD_BUILDING_DEGRADE = 3011;
            AppDto.AppStaticStrings.GUILD_BENEFIT_FEE_ENOUGH = 3012;
            AppDto.AppStaticStrings.GUILD_BENEFIT_FEE_NOT_ENOUGH = 3013;
            AppDto.AppStaticStrings.GUILD_BAN_TALK = 3014;
            AppDto.AppStaticStrings.GUILD_CHANNEL_BAN_TALK = 3015;
            AppDto.AppStaticStrings.GUILD_SELF_RECOMMEND = 3016;
            AppDto.AppStaticStrings.GUILD_CREATE_NOTIFY = 3017;
            AppDto.AppStaticStrings.GUILD_PLAYER_LEAVE_NOTIFY = 3018;
            AppDto.AppStaticStrings.GUILD_PLAYER_EXPELL_NOTIFY = 3019;
            AppDto.AppStaticStrings.GUILD_PLAYER_SPEED_BUILDING = 3150;
            AppDto.AppStaticStrings.GUILD_UNBAN_TALK = 3151;
            AppDto.AppStaticStrings.GUILD_ROBBER_APPEAR_NOTIFY = 3020;
            AppDto.AppStaticStrings.GUILD_ROBBER_CHECK_NOTIFY = 3021;
            AppDto.AppStaticStrings.GUILD_ROBBER_SUCCESS_NOTIFY = 3022;
            AppDto.AppStaticStrings.GUILD_ROBBER_FAIL_NOTIFY = 3023;
            AppDto.AppStaticStrings.GUILD_ROBBER_BATTLE_WIN_NOTIFY = 3024;
            AppDto.AppStaticStrings.GUILD_MISSION_FINISH_NOTIFY = 3025;
            AppDto.AppStaticStrings.CHALLENGE_WIN_STREAK_NOTIFY = 3030;
            AppDto.AppStaticStrings.PROPS_APPLY_LIMIT_AMOUNT_DAY = 3040;
            AppDto.AppStaticStrings.PROPS_APPLY_LIMIT_AMOUNT_WEEK = 3041;
            AppDto.AppStaticStrings.GENERAL_MONSTER_BATTLE_REWARD_PROMPT = 3042;
            AppDto.AppStaticStrings.GENERAL_MONSTER_KING_BATTLE_REWARD_PROMPT = 3043;
            AppDto.AppStaticStrings.TEAM_HELP_NOTIFY = 3100;
            AppDto.AppStaticStrings.SIEGE_BATTLE_WIN_NOTIFY = 3200;
            AppDto.AppStaticStrings.SIEGE_BATTLE_PASS_NOTIFY = 3201;
            AppDto.AppStaticStrings.SIEGE_BATTLE_DRAW_NOTIFY = 3202;
            AppDto.AppStaticStrings.SIEGE_BATTLE_LOST_NOTIFY = 3203;
            AppDto.AppStaticStrings.GUILD_AD_NOTIFY = 3204;
            AppDto.AppStaticStrings.WORLD_BOSS_FIRST_KILL = 3205;
            AppDto.AppStaticStrings.WORLD_BOSS_FAIL_NOTIFY = 3206;
            AppDto.AppStaticStrings.RUSH_RANK_ACTIVITY = 3210;
            AppDto.AppStaticStrings.RUSH_RANK_ACTIVITY_SPLIT = 3211;
            AppDto.AppStaticStrings.RUSH_RANK_ACTIVITY_REWARD = 3212;
            AppDto.AppStaticStrings.STAR_REWARD_OVER_LIMIT_NOTIFY = 3213;
            AppDto.AppStaticStrings.FASHION_DRESS_PLAN_NAME = 3250;
            AppDto.AppStaticStrings.MONEYPACK_GUILD_CHANNEL = 3260;
            AppDto.AppStaticStrings.MONEYPACK_GET_50PERCENT = 3261;
            AppDto.AppStaticStrings.MONEYPACK_GET_250PERCENT = 3262;
            AppDto.AppStaticStrings.MONEYPACK_GET_2PERCENT = 3263;
            AppDto.AppStaticStrings.MONEYPACK_GET_EMPTY = 3264;
            AppDto.AppStaticStrings.MONEYPACK_PAYOUT_TIP = 3265;
            AppDto.AppStaticStrings.MONEYPACK_TIME_HOUR = 3266;
            AppDto.AppStaticStrings.MONEYPACK_TIME_MINUTE = 3267;
            AppDto.AppStaticStrings.MONEYPACK_TIME_SECOND = 3268;
            AppDto.AppStaticStrings.MYTH_LAND_SCENE_NAMES = 3270;
            AppDto.AppStaticStrings.DAILY_GIVE_DOUBLE_EXP_POINT_PROMPT = 3280;
            AppDto.AppStaticStrings.MARRIAGE_CONDITION_DESC = 3290;
            AppDto.AppStaticStrings.MARRIAGE_DIV_DESC = 3291;
            AppDto.AppStaticStrings.MARRIAGE_TV_TEXT = 3292;
            AppDto.AppStaticStrings.MAIL_CANDIES_COUNT_MAX = 3293;
            AppDto.AppStaticStrings.MAIL_CANDIES_COUNT_NOT_MAX = 3294;
            AppDto.AppStaticStrings.BRIDAL_SEDAN_NPC_DIALOG = 3295;
            AppDto.AppStaticStrings.GUILD_QUESTION_HELP = 3300;
            AppDto.AppStaticStrings.GUILD_QUESTION_HELP_ANSWER = 3302;
            AppDto.AppStaticStrings.GUILD_COMP_WIN_NOTIFY = 3400;
            AppDto.AppStaticStrings.GUILD_COMP_LOST_NOTIFY = 3401;
            AppDto.AppStaticStrings.GUILD_COMP_DRAW_NOTIFY = 3402;
            AppDto.AppStaticStrings.GUILD_COMP_ENEMY_WIN_STREAK_NOTIFY_1 = 3403;
            AppDto.AppStaticStrings.GUILD_COMP_ENEMY_WIN_STREAK_NOTIFY_2 = 3404;
            AppDto.AppStaticStrings.GUILD_COMP_ENEMY_WIN_STREAK_NOTIFY_3 = 3405;
            AppDto.AppStaticStrings.GUILD_COMP_MY_WIN_STREAK_NOTIFY_1 = 3406;
            AppDto.AppStaticStrings.GUILD_COMP_MY_WIN_STREAK_NOTIFY_2 = 3407;
            AppDto.AppStaticStrings.GUILD_COMP_MY_WIN_STREAK_NOTIFY_3 = 3408;
            AppDto.AppStaticStrings.GUILD_COMP_STOP_WIN_STREAK_NOTIFY = 3409;
            AppDto.AppStaticStrings.GUILD_COMP_IN_GOOD_SITUATION = 3410;
            AppDto.AppStaticStrings.GUILD_COMP_IN_BAD_SITUATION = 3411;
            AppDto.AppStaticStrings.MAZE_TELEPORT_APPEAR_NOTIFY = 3420;
            AppDto.AppStaticStrings.MAZE_REWARD_OUT_OF_LIMIT = 3421;
            AppDto.AppStaticStrings.MAZE_KICK_OUT_NOTIFY = 3422;
            AppDto.AppStaticStrings.INDENTURE_APPRENTICE_POP_REGISTER = 3500;
            AppDto.AppStaticStrings.GENERAL_MONSTER_KING_GENERAL_NOTIFY = 3550;
            AppDto.AppStaticStrings.GENERAL_MONSTER_MEMBER_ACCEPT_NOTIFY = 3551;
            AppDto.AppStaticStrings.CAMPWAR_WINSTREAK_NOTIFY_1 = 3600;
            AppDto.AppStaticStrings.CAMPWAR_WINSTREAK_NOTIFY_2 = 3601;
            AppDto.AppStaticStrings.CAMPWAR_WINSTREAK_NOTIFY_3 = 3602;
            AppDto.AppStaticStrings.CAMPWAR_STOP_WINSTREAK_NOTIFY_1 = 3603;
            AppDto.AppStaticStrings.CAMPWAR_STOP_WINSTREAK_NOTIFY_2 = 3604;
            AppDto.AppStaticStrings.CAMPWAR_STOP_WINSTREAK_NOTIFY_3 = 3605;
            AppDto.AppStaticStrings.CAMPWAR_FOR_LEADER = 3606;
            AppDto.AppStaticStrings.CAMPWAR_PLAYER_DEAD = 3607;
            AppDto.AppStaticStrings.CAMPWAR_MARQUEE_TITLE = 3608;
            AppDto.AppStaticStrings.CAMPWAR_MARQUEE_END_WIN = 3609;
            AppDto.AppStaticStrings.CAMPWAR_MARQUEE_END_DRAW = 3610;
            AppDto.AppStaticStrings.CAMPWAR_MARQUEE_CREW_UNLOCK = 3611;
            AppDto.AppStaticStrings.CAMPWAR_MARQUEE_PEACH_REFRESH = 3612;
            AppDto.AppStaticStrings.CAMPWAR_MARQUEE_BEFORE_ENDING = 3613;
            AppDto.AppStaticStrings.CAMPWAR_FAILURE_MAX_TIMES = 3614;
            AppDto.AppStaticStrings.CAMPWAR_LEADER_FAILURE_MAX_TIMES = 3615;
            AppDto.AppStaticStrings.CAMPWAR_MEMBER_FAILURE_MAX_TIMES = 3616;
            AppDto.AppStaticStrings.TOURNAMENT_WINSTREAK_NOTIFY_1 = 3700;
            AppDto.AppStaticStrings.TOURNAMENT_WINSTREAK_NOTIFY_2 = 3701;
            AppDto.AppStaticStrings.TOURNAMENT_WINSTREAK_NOTIFY_3 = 3702;
            AppDto.AppStaticStrings.TOURNAMENT_STOP_WINSTREAK_NOTIFY_1 = 3703;
            AppDto.AppStaticStrings.TOURNAMENT_STOP_WINSTREAK_NOTIFY_2 = 3704;
            AppDto.AppStaticStrings.TOURNAMENT_STOP_WINSTREAK_NOTIFY_3 = 3705;
            AppDto.AppStaticStrings.TOURNAMENT_FOR_LEADER = 3706;
            AppDto.AppStaticStrings.TRIAL_WINSTREAK_NOTIFY_1 = 3750;
            AppDto.AppStaticStrings.TRIAL_WINSTREAK_NOTIFY_2 = 3751;
            AppDto.AppStaticStrings.TRIAL_WINSTREAK_NOTIFY_3 = 3752;
            AppDto.AppStaticStrings.TRIAL_STOP_WINSTREAK_NOTIFY_1 = 3753;
            AppDto.AppStaticStrings.TRIAL_STOP_WINSTREAK_NOTIFY_2 = 3754;
            AppDto.AppStaticStrings.TRIAL_STOP_WINSTREAK_NOTIFY_3 = 3755;
            AppDto.AppStaticStrings.TRIAL_FOR_LEADER = 3756;
            AppDto.AppStaticStrings.SCORE_REWARD_OUT_OF_LIMIT = 3800;
            AppDto.AppStaticStrings.COMPLETED_ACTIVITY_TIPS_1 = 3900;
            AppDto.AppStaticStrings.COMPLETED_ACTIVITY_TIPS_2 = 3901;
            AppDto.AppStaticStrings.WORLD_BOSS_REWARD_OVER_LIMIT_NOTIFY = 3902;
            AppDto.AppStaticStrings.MOONLIGHT_BOX_GAIN_EXP = 3903;
            AppDto.AppStaticStrings.PUNISH_BAN_TALK = 4001;
            AppDto.AppStaticStrings.PUNISH_BAN = 4002;
            AppDto.AppStaticStrings.PUNISH_INGOT = 4003;
            AppDto.AppStaticStrings.SHIPMENT_FOR_LEADER = 4500;
            AppDto.AppStaticStrings.SHIPMENT_SELECT_POP_TEAM = 4501;
            AppDto.AppStaticStrings.SHIPMENT_UNSELECT_POP_TEAM = 4502;
            AppDto.AppStaticStrings.SHIPMENT_DEDUCT_FAIL = 4503;
            AppDto.AppStaticStrings.SHIPMENT_DEDUCT_SUCCESS = 4504;
            AppDto.AppStaticStrings.SHIPMENT_UNSUBMIT = 4505;
            AppDto.AppStaticStrings.SHIPMENT_PROTECT_BUFF = 4506;
            AppDto.AppStaticStrings.SHIPMENT_WINTIMES_OVER = 4507;
            AppDto.AppStaticStrings.SHIPMENT_LOSE_PLAYER = 4508;
            AppDto.AppStaticStrings.SHIPMENT_WIN_SUCCESS = 4509;
            AppDto.AppStaticStrings.DUEL_START = 4600;
            AppDto.AppStaticStrings.DUEL_OVER = 4601;
            AppDto.AppStaticStrings.DUEL_WATCH = 4602;
            AppDto.AppStaticStrings.DUEL_MEMBER_AGREE = 4603;
            AppDto.AppStaticStrings.DUEL_MEMBER_REJECT = 4604;
            AppDto.AppStaticStrings.DUEL_REJECT = 4605;
            AppDto.AppStaticStrings.DUEL_FINISH = 4606;
            AppDto.AppStaticStrings.TALENT_SHOW_POST = 4700;
            AppDto.AppStaticStrings.TALENT_SHOW_HEARSAY = 4701;
            AppDto.AppStaticStrings.TALENT_SHOW_START = 4702;
            AppDto.AppStaticStrings.TALENT_SHOW_START_VOTD = 4703;
            AppDto.AppStaticStrings.TALENT_SHOW_PER_END = 4704;
            AppDto.AppStaticStrings.TALENT_SHOW_END = 4705;
            AppDto.AppStaticStrings.TALENT_SHOW_TOP_PLAYER = 4706;
            AppDto.AppStaticStrings.TALENT_SHOW_TOP_FIRST = 4707;
            AppDto.AppStaticStrings.TALENT_SHOW_TOP_SECOND = 4708;
            AppDto.AppStaticStrings.TALENT_SHOW_TOP_THIRD = 4709;
            AppDto.AppStaticStrings.SWORN_WEALTH_NOT_ENOUGH = 5000;
            AppDto.AppStaticStrings.SWORN_MEMBER_ACCEPT = 5001;
            AppDto.AppStaticStrings.SWORN_MEMBER_REJECT = 5002;
            AppDto.AppStaticStrings.SWORN_SUCCESS = 5003;
            AppDto.AppStaticStrings.SWORN_NEWBIE_MEMBER_ACCEPT = 5004;
            AppDto.AppStaticStrings.SWORN_NEWBIE_MEMBER_REJECT = 5005;
            AppDto.AppStaticStrings.SWORN_NEWBIE_SUCCESS = 5006;
            AppDto.AppStaticStrings.SWORN_NEWBIE_SUCCESS_FOR_OLDER = 5007;
            AppDto.AppStaticStrings.HUNDRED_GRASS_VALLEY_OPEN = 5030;
            AppDto.AppStaticStrings.HUNDRED_GRASS_VALLEY_CLOSE = 5031;
            AppDto.AppStaticStrings.HUNDRED_GRASS_NO_INTERACT_NOTIFY = 5032;
            AppDto.AppStaticStrings.HUNDRED_GRASS_INTERACT_BONUS_NOTIFY = 5033;
            AppDto.AppStaticStrings.HUNDRED_GRASS_COUNT_DOWN_NOTIFY = 5034;
            AppDto.AppStaticStrings.HUNDRED_REFRESH_GRASS_NOTIFY = 5035;
            AppDto.AppStaticStrings.HUNDRED_REFRESH_GRASS_PERSONAL_NOTIFY = 5036;
            AppDto.AppStaticStrings.HUNDRED_GRASS_EASY_WATER = 5037;
            AppDto.AppStaticStrings.HUNDRED_GRASS_EASY_FERTILIZE = 5038;
            AppDto.AppStaticStrings.HUNDRED_GRASS_EASY_DISINSECT = 5039;
            AppDto.AppStaticStrings.HUNDRED_GRASS_BATTLE_WATER = 5040;
            AppDto.AppStaticStrings.HUNDRED_GRASS_BATTLE_FERTILIZE = 5041;
            AppDto.AppStaticStrings.HUNDRED_GRASS_BATTLE_DISINSECT = 5042;
            AppDto.AppStaticStrings.WORLD_GHOST_COPY_KILL_NOTIFY = 5050;
            AppDto.AppStaticStrings.WORLD_GHOST_KILL_NOTIFY = 5051;
            AppDto.AppStaticStrings.WORLD_GHOST_LEAVE_NOTIFY = 5052;
            AppDto.AppStaticStrings.WORLD_GHOST_IGNORE_NOTIFY = 5053;
            AppDto.AppStaticStrings.CSPK_MEMBER_ACCEPT = 6000;
            AppDto.AppStaticStrings.CSPK_MEMBER_REJECT = 6001;
            AppDto.AppStaticStrings.CSPK_WINSTREAK_NOTIFY_1 = 6002;
            AppDto.AppStaticStrings.CSPK_WINSTREAK_NOTIFY_2 = 6003;
            AppDto.AppStaticStrings.CSPK_STOP_WINSTREAK_NOTIFY_1 = 6004;
            AppDto.AppStaticStrings.CSPK_STOP_WINSTREAK_NOTIFY_2 = 6005;
            AppDto.AppStaticStrings.CSPK_FOR_LEADER = 6006;
            AppDto.AppStaticStrings.CSPK_ROUND_END_NOTIFY = 6007;
            AppDto.AppStaticStrings.CSPK_END_NOTIFY = 6008;
            AppDto.AppStaticStrings.CSPK_GROUP_NAME_1 = 6009;
            AppDto.AppStaticStrings.CSPK_GROUP_NAME_2 = 6010;
            AppDto.AppStaticStrings.CSPK_GROUP_NAME_3 = 6011;
            AppDto.AppStaticStrings.CSPK_ROUND_START_NOTIFY = 6012;
            AppDto.AppStaticStrings.CSPK_LAST_ROUND_START_NOTIFY = 6013;
            AppDto.AppStaticStrings.CSPK_MAX_BATTLE_TIMES_NOTIFY = 6014;
            AppDto.AppStaticStrings.CSPK_WATCHER_COUNT_NOTIFY = 6015;
            AppDto.AppStaticStrings.MONKEY_BATTLE_FINISH_NOTIFY = 6016;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AppStaticStrings);
var AppDto$AppTraceTypes = {
    fullname: "AppDto.AppTraceTypes",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.AppTraceTypes.GM_COMMAND_GAIN = 200;
            AppDto.AppTraceTypes.FIRST_LOGIN_GAIN = 202;
            AppDto.AppTraceTypes.DEPOSIT_GAIN = 203;
            AppDto.AppTraceTypes.UPGRADE_GAIN = 204;
            AppDto.AppTraceTypes.CREATE_PLAYER_GAIN = 205;
            AppDto.AppTraceTypes.PLAYER_RENAME_LOST = 206;
            AppDto.AppTraceTypes.PLAYER_RENAME_EXPIRED_LOST = 207;
            AppDto.AppTraceTypes.GM_COMMAND_LOST = 208;
            AppDto.AppTraceTypes.NOVICE_COMPENSATION_GAIN = 209;
            AppDto.AppTraceTypes.WEEK_DOUBLE_EXP_POINT_GAIN = 210;
            AppDto.AppTraceTypes.DOUBLE_EXP_POINT_RECEIVE_GAIN = 211;
            AppDto.AppTraceTypes.DOUBLE_EXP_POINT_RECEIVE_LOST = 212;
            AppDto.AppTraceTypes.DOUBLE_EXP_POINT_FREEZE_GAIN = 213;
            AppDto.AppTraceTypes.DOUBLE_EXP_POINT_FREEZE_LOST = 214;
            AppDto.AppTraceTypes.DOUBLE_EXP_POINT_LOGIN_GAIN = 215;
            AppDto.AppTraceTypes.REPORT_LOST = 216;
            AppDto.AppTraceTypes.REPORT_GAIN = 217;
            AppDto.AppTraceTypes.DAILY_DELAY_WEALTH = 300;
            AppDto.AppTraceTypes.SCENE_PRECIOUS_BOX_LOST = 301;
            AppDto.AppTraceTypes.BACKPACK_DROP_ITEM = 400;
            AppDto.AppTraceTypes.WAREHOUSE_DROP_ITEM = 401;
            AppDto.AppTraceTypes.BACKPACK_MOVE = 402;
            AppDto.AppTraceTypes.WAREHOUSE_MOVE = 403;
            AppDto.AppTraceTypes.BACKPACK_SPLIT = 404;
            AppDto.AppTraceTypes.WAREHOUSE_SPLIT = 405;
            AppDto.AppTraceTypes.BACKPACK_MOVETO_WAREHOUSE = 410;
            AppDto.AppTraceTypes.WAREHOUSE_MOVETO_BACKPACK = 411;
            AppDto.AppTraceTypes.BACKPACK_APPLY_GAIN = 412;
            AppDto.AppTraceTypes.BACKPACK_APPLY_LOST = 413;
            AppDto.AppTraceTypes.BACKPACK_EXPAND_LOST = 414;
            AppDto.AppTraceTypes.WAREHOUSE_EXPAND_LOST = 415;
            AppDto.AppTraceTypes.REFINE_LOST = 416;
            AppDto.AppTraceTypes.REFINE_GAIN = 417;
            AppDto.AppTraceTypes.ITEM_RESUME_LOST = 418;
            AppDto.AppTraceTypes.ITEM_RESUME_GAIN = 419;
            AppDto.AppTraceTypes.SATIATION_FILL_GAIN = 420;
            AppDto.AppTraceTypes.SATIATION_FILL_LOST = 421;
            AppDto.AppTraceTypes.TREASURE_APPLY_LOST = 422;
            AppDto.AppTraceTypes.TREASURE_APPLY_GAIN = 423;
            AppDto.AppTraceTypes.GIFTS_APPLY_LOST = 424;
            AppDto.AppTraceTypes.GIFTS_APPLY_GAIN = 425;
            AppDto.AppTraceTypes.JEWEL_APPLY_LOST = 426;
            AppDto.AppTraceTypes.JEWEL_APPLY_GAIN = 427;
            AppDto.AppTraceTypes.EQUIPMENT_APPLY_LOST = 428;
            AppDto.AppTraceTypes.EQUIPMENT_APPLY_GAIN = 429;
            AppDto.AppTraceTypes.CONVERT_NIMBUS_LOST = 430;
            AppDto.AppTraceTypes.CONVERT_NIMBUS_GAIN = 431;
            AppDto.AppTraceTypes.REFINE_EXPAND_LOST = 432;
            AppDto.AppTraceTypes.COLLECT_REFINE_GAIN = 433;
            AppDto.AppTraceTypes.REFINE_ITEM_LOST = 434;
            AppDto.AppTraceTypes.GUILD_PROPS_APPLY_GAIN = 435;
            AppDto.AppTraceTypes.GUILD_PROPS_APPLY_LOST = 436;
            AppDto.AppTraceTypes.EXP_FRUIT_APPLY_GAIN = 437;
            AppDto.AppTraceTypes.COLLECT_REFINE_GAIN_NO_SHOW = 438;
            AppDto.AppTraceTypes.GIFT_BOX_APPLY_GAIN = 439;
            AppDto.AppTraceTypes.GIFT_BOX_APPLY_LOST = 440;
            AppDto.AppTraceTypes.GIFT_APPLY_GAIN = 441;
            AppDto.AppTraceTypes.GIFT_APPLY_LOST = 442;
            AppDto.AppTraceTypes.ADD_SPELL_EXP_APPLY_LOST = 443;
            AppDto.AppTraceTypes.FAST_BUY_VIGOUR_GAIN = 444;
            AppDto.AppTraceTypes.FAST_BUY_VIGOUR_LOST = 445;
            AppDto.AppTraceTypes.CANCEL_EXORCISM_STATE_LOST = 446;
            AppDto.AppTraceTypes.WEDDING_CANDIES_PROPS_APPLY_GAIN = 447;
            AppDto.AppTraceTypes.WEDDING_CANDIES_PROPS_APPLY_LOST = 448;
            AppDto.AppTraceTypes.PIECE_APPLY_LOST = 449;
            AppDto.AppTraceTypes.PIECE_APPLY_GAIN = 450;
            AppDto.AppTraceTypes.WEAPON_EFFECT_EXCHANGE_LOST = 451;
            AppDto.AppTraceTypes.LUCKY_KONT_APPLY_GAIN = 452;
            AppDto.AppTraceTypes.MOONLIGHT_BOX_GAIN = 453;
            AppDto.AppTraceTypes.EMBED_CHANGE_GAIN = 454;
            AppDto.AppTraceTypes.EMBED_CHANGE_LOST = 455;
            AppDto.AppTraceTypes.FASHION_DRESS_EXPIRED_LOST = 456;
            AppDto.AppTraceTypes.SHOP_BUY_GAIN = 600;
            AppDto.AppTraceTypes.SHOP_BUY_LOST = 601;
            AppDto.AppTraceTypes.TRADE_BUY_LOST = 602;
            AppDto.AppTraceTypes.TRADE_BUY_GAIN = 603;
            AppDto.AppTraceTypes.TRADE_SELL_LOST = 604;
            AppDto.AppTraceTypes.TRADE_SELL_GAIN = 605;
            AppDto.AppTraceTypes.STALL_CAPABILITY_EXPAND_LOST = 606;
            AppDto.AppTraceTypes.STALL_ITEM_UP_LOST = 607;
            AppDto.AppTraceTypes.STALL_ITEM_DOWN_GAIN = 608;
            AppDto.AppTraceTypes.STALL_ITEM_REFRESH_LOST = 609;
            AppDto.AppTraceTypes.STALL_ITEM_BUY_LOST = 610;
            AppDto.AppTraceTypes.STALL_ITEM_BUY_GAIN = 611;
            AppDto.AppTraceTypes.STALL_ITEM_CASH_GAIN = 612;
            AppDto.AppTraceTypes.STALL_ITEM_UP_ROLLBACK_GAIN = 613;
            AppDto.AppTraceTypes.STALL_ITEM_REUP_LOST = 614;
            AppDto.AppTraceTypes.TRADE_PET_BUY_LOST = 622;
            AppDto.AppTraceTypes.TRADE_PET_BUY_GAIN = 623;
            AppDto.AppTraceTypes.TRADE_PET_SELL_LOST = 624;
            AppDto.AppTraceTypes.TRADE_PET_SELL_GAIN = 625;
            AppDto.AppTraceTypes.AUCTION_ITEM_BUY_LOST = 626;
            AppDto.AppTraceTypes.AUCTION_ITEM_BUY_GAIN = 627;
            AppDto.AppTraceTypes.AUCTION_ITEM_SALE_LOST = 628;
            AppDto.AppTraceTypes.AUCTION_ITEM_SALE_GAIN = 629;
            AppDto.AppTraceTypes.AUCTION_ITEM_DOWN_GAIN = 630;
            AppDto.AppTraceTypes.AUCTION_ITEM_BUY_BACK_GAIN = 631;
            AppDto.AppTraceTypes.AUCTION_ITEM_SALE_BACK_GAIN = 632;
            AppDto.AppTraceTypes.AUCTION_ITEM_UP_LOST = 633;
            AppDto.AppTraceTypes.AUCTION_ITEM_UP_ROLLBACK_GAIN = 634;
            AppDto.AppTraceTypes.MAIL_ATTACHMENT_LOST = 700;
            AppDto.AppTraceTypes.MAIL_ATTACHMENT_GAIN = 701;
            AppDto.AppTraceTypes.MAIL_ATTACHMENT_ROLLBACK_GAIN = 702;
            AppDto.AppTraceTypes.CHAT_TALK_LOST = 750;
            AppDto.AppTraceTypes.BARRAGE_COST = 751;
            AppDto.AppTraceTypes.MISSION_ONCE_SUBMIT_GAIN = 800;
            AppDto.AppTraceTypes.MISSION_ACCEPT_GAIN = 801;
            AppDto.AppTraceTypes.MISSION_SUBMIT_GAIN = 802;
            AppDto.AppTraceTypes.MISSION_SUBMIT_LOST = 803;
            AppDto.AppTraceTypes.MISSION_FINISH_LOST = 804;
            AppDto.AppTraceTypes.MISSION_DROP_LOST = 805;
            AppDto.AppTraceTypes.MISSION_SILKROAD_SUBMIT_GAIN = 806;
            AppDto.AppTraceTypes.MISSION_SILKROAD_SUBMIT_LOST = 807;
            AppDto.AppTraceTypes.MISSION_SILKROAD_FINISH_GAIN = 808;
            AppDto.AppTraceTypes.MISSION_SILKROAD_FINISH_LOST = 809;
            AppDto.AppTraceTypes.MISSION_CHAIN_ACCEPT_LOST = 810;
            AppDto.AppTraceTypes.MISSION_CHAIN_SKIPBATTLE_LOST = 811;
            AppDto.AppTraceTypes.MISSION_GHOST_SUBMIT_GAIN = 812;
            AppDto.AppTraceTypes.MISSION_CHAIN_SUBMIT_GAIN = 813;
            AppDto.AppTraceTypes.MISSION_COPY_SUBMIT_GAIN = 814;
            AppDto.AppTraceTypes.MISSION_FACTION_SUBMIT_GAIN = 815;
            AppDto.AppTraceTypes.MISSION_FACTION_TRIAL_SUBMIT_GAIN = 816;
            AppDto.AppTraceTypes.MISSION_GUILD_TRAINEE_SUBMIT_GAIN = 817;
            AppDto.AppTraceTypes.MISSION_GUILD_TRAINEE_HELPER_GAIN = 818;
            AppDto.AppTraceTypes.GUILD_TRAINEE_FINISH_GAIN = 819;
            AppDto.AppTraceTypes.MISSION_FACTION_SUBMIT_DAILY_EXTRA_GAIN = 850;
            AppDto.AppTraceTypes.MISSION_FACTION_SUBMIT_WEEKLY_EXTRA_GAIN = 851;
            AppDto.AppTraceTypes.MISSION_TREASURY_SUBMIT_GAIN = 852;
            AppDto.AppTraceTypes.MISSION_GHOST_LEADEREXTRA_SUBMIT_GAIN = 853;
            AppDto.AppTraceTypes.MISSION_CHAIN_HELP_OTHER_FINISH_GAIN = 854;
            AppDto.AppTraceTypes.MISSION_CHAIN_HUNDRED_SUBMIT_GAIN = 855;
            AppDto.AppTraceTypes.MISSION_SILKROAD_HELPOTHER_FINISH_GAIN = 856;
            AppDto.AppTraceTypes.MISSION_CHAIN_LEGENDFALL_GAIN = 857;
            AppDto.AppTraceTypes.MISSION_GUIDE_SUBMIT_GAIN = 858;
            AppDto.AppTraceTypes.MISSION_ONCE_HELPER_SUBMIT_GAIN = 859;
            AppDto.AppTraceTypes.MISSION_GUILD_FINISH_GAIN = 860;
            AppDto.AppTraceTypes.MISSION_TRIAL_FINISH_GAIN = 861;
            AppDto.AppTraceTypes.MISSION_GHOST_BOSS_SUBMIT_GAIN = 862;
            AppDto.AppTraceTypes.MISSION_GOOD_SUBMIT_GAIN = 863;
            AppDto.AppTraceTypes.MISSION_GOOD_BATTLE_GAIN = 864;
            AppDto.AppTraceTypes.MISSION_GOOD_HELP_OTHER_FINISH_GAIN = 865;
            AppDto.AppTraceTypes.EXCHANGE_LOST = 900;
            AppDto.AppTraceTypes.EXCHANGE_GAIN = 901;
            AppDto.AppTraceTypes.REWARD_UPGRADE_RECEIVE_GAIN = 1000;
            AppDto.AppTraceTypes.REWARD_NOVICE_RECEIVE_GAIN = 1020;
            AppDto.AppTraceTypes.REWARD_SEVENDAYS_RECEIVE_GAIN = 1040;
            AppDto.AppTraceTypes.REWARD_FIRST_DESPOST_RECEIVE_GAIN = 1050;
            AppDto.AppTraceTypes.REWARD_FIRST_DESPOST_GROW_GAIN = 1051;
            AppDto.AppTraceTypes.REWARD_CHARGE_THREE_REWARD_GAIN = 1052;
            AppDto.AppTraceTypes.REWARD_DESPOST_REBATE_RECEIVE_GAIN = 1060;
            AppDto.AppTraceTypes.OLD_SERVER_DICOUNT_GAIN = 1061;
            AppDto.AppTraceTypes.BUY_OLD_SERVER_DICOUNT_GAIN = 1062;
            AppDto.AppTraceTypes.BUY_OLD_SERVER_DICOUNT_LOST = 1063;
            AppDto.AppTraceTypes.RETURN_REWARD_GAIN = 1064;
            AppDto.AppTraceTypes.SEVEN_BOX_GAIN = 1065;
            AppDto.AppTraceTypes.RECHARGE_PREFERENTIAL_GAIN = 1066;
            AppDto.AppTraceTypes.ACTIVE_GIFT_GAIN = 1067;
            AppDto.AppTraceTypes.BUY_ACTIVE_GIFT_LOST = 1068;
            AppDto.AppTraceTypes.SINGLE_RECHARGE_GAIN = 1069;
            AppDto.AppTraceTypes.REWARD_LEVEL_RECEIVED_GAIN = 1070;
            AppDto.AppTraceTypes.LUCURY_CHECKIN_GAIN = 1071;
            AppDto.AppTraceTypes.ACHIEVEMENT_REWARD = 1110;
            AppDto.AppTraceTypes.CONSIGNMENT_ORDRE_LOST = 1200;
            AppDto.AppTraceTypes.CONSIGNMENT_ORDRE_MANUAL_GAIN = 1201;
            AppDto.AppTraceTypes.CONSIGNMENT_ORDRE_AUTO_GAIN = 1202;
            AppDto.AppTraceTypes.CONSIGNMENT_ORDRE_TRADE_GAIN = 1203;
            AppDto.AppTraceTypes.MINE_BATTLE_GAIN = 2000;
            AppDto.AppTraceTypes.MINE_BATTLE_LOST = 2001;
            AppDto.AppTraceTypes.SATIATION_CONSUME_IN_BATTLE = 2002;
            AppDto.AppTraceTypes.SCENE_MONSTER_BATTLE_GAIN = 2003;
            AppDto.AppTraceTypes.SCENE_STAR_MONSTER_BATTLE_GAIN = 2004;
            AppDto.AppTraceTypes.SCENE_PLOUGH_MONSTER_BATTLE_GAIN = 2005;
            AppDto.AppTraceTypes.SCENE_ROBBER_MONSTER_BATTLE_GAIN = 2006;
            AppDto.AppTraceTypes.SCENE_ROBBER_MONSTER_BATTLE_EXTRA_GAIN = 2007;
            AppDto.AppTraceTypes.SCENE_ROBBER_MONSTER_KILLED_ALL_GAIN = 2008;
            AppDto.AppTraceTypes.SCENE_ROBBER_MONSTER_NOT_KILLED_ALL_LOST = 2009;
            AppDto.AppTraceTypes.WORLD_BOSS_WIN_GAIN = 2010;
            AppDto.AppTraceTypes.WORLD_BOSS_BOX_GAIN = 2011;
            AppDto.AppTraceTypes.MYTH_LAND_WIN_GAIN = 2012;
            AppDto.AppTraceTypes.MYTH_LAND_OPEN_BOX__LOST = 2013;
            AppDto.AppTraceTypes.MYTH_LAND_OPEN_BOX_GAIN = 2014;
            AppDto.AppTraceTypes.MYTH_LAND_SYS_CLEAR = 2015;
            AppDto.AppTraceTypes.SCENE_MONSTER_KING_BATTLE_GAIN = 2016;
            AppDto.AppTraceTypes.GENERAL_MONSTER_DAILY_FINISH_GAIN = 2017;
            AppDto.AppTraceTypes.MYTH_LAND_PASS_REWARD = 2018;
            AppDto.AppTraceTypes.CHALLENGE_BONUS = 2100;
            AppDto.AppTraceTypes.CHALLENGE_GROUP_SEASON_BONUS = 2101;
            AppDto.AppTraceTypes.SIEGE_BATTLE_WIN_BONUS = 2200;
            AppDto.AppTraceTypes.SIEGE_BATTLE_LOST_BONUS = 2201;
            AppDto.AppTraceTypes.SIEGE_GUILD_WIN_BONUS = 2202;
            AppDto.AppTraceTypes.SIEGE_GUILD_LOST_BONUS = 2203;
            AppDto.AppTraceTypes.SIEGE_GUILD_DRAW_BONUS = 2204;
            AppDto.AppTraceTypes.MYSTERY_TOLLGATE_BONUS = 2301;
            AppDto.AppTraceTypes.MYSTERY_TOLLGATE_EXTRA_BONUS = 2302;
            AppDto.AppTraceTypes.MYSTERY_BOSS_TOLLGATE_BONUS = 2303;
            AppDto.AppTraceTypes.TOURNAMENT_PERIOD_BONUS = 2400;
            AppDto.AppTraceTypes.TOURNAMENT_WIN_BONUS = 2401;
            AppDto.AppTraceTypes.TOURNAMENT_LOST_BONUS = 2402;
            AppDto.AppTraceTypes.TOURNAMENT_PASS_BONUS = 2403;
            AppDto.AppTraceTypes.FIRST_TOURNAMENT_PERIOD_BONUS = 2500;
            AppDto.AppTraceTypes.FIRST_TOURNAMENT_WIN_BONUS = 2501;
            AppDto.AppTraceTypes.FIRST_TOURNAMENT_LOST_BONUS = 2502;
            AppDto.AppTraceTypes.FIRST_TOURNAMENT_PASS_BONUS = 2503;
            AppDto.AppTraceTypes.FIRST_TOURNAMENT_DRAW_BONUS = 2504;
            AppDto.AppTraceTypes.TRIAL_PERIOD_BONUS = 2600;
            AppDto.AppTraceTypes.TRIAL_WIN_BONUS = 2601;
            AppDto.AppTraceTypes.TRIAL_LOST_BONUS = 2602;
            AppDto.AppTraceTypes.TRIAL_PASS_BONUS = 2603;
            AppDto.AppTraceTypes.TRIAL_DRAW_BONUS = 2604;
            AppDto.AppTraceTypes.UPGRADE_FACTION_SKILL_LOST = 3000;
            AppDto.AppTraceTypes.MAIN_CHARACTOR_RESET_PER_APTITUDE_LOST = 3001;
            AppDto.AppTraceTypes.PET_FIGHT_BOOK_LOST = 3002;
            AppDto.AppTraceTypes.MAIN_CHARACTOR_EXP_BOOK_GAIN = 3003;
            AppDto.AppTraceTypes.MAIN_CHARACTOR_EXP_BOOK_LOST = 3004;
            AppDto.AppTraceTypes.PET_ADD_LIFEPOINT_LOST = 3005;
            AppDto.AppTraceTypes.EXPAND_PET_COMPANY_VACANY_LOST = 5000;
            AppDto.AppTraceTypes.PET_RESET_LOST = 5001;
            AppDto.AppTraceTypes.PET_RESET_PER_APTITUDE_LOST = 5002;
            AppDto.AppTraceTypes.PET_EXP_PROPS_GAIN = 5003;
            AppDto.AppTraceTypes.PET_EXP_PROPS_LOST = 5004;
            AppDto.AppTraceTypes.RECRUIT_LOST = 5005;
            AppDto.AppTraceTypes.PET_INCREASE_BASE_APTITUDE_LOST = 5006;
            AppDto.AppTraceTypes.FORMATION_LEARN_LOST = 5007;
            AppDto.AppTraceTypes.PET_RESUME_LOST = 5008;
            AppDto.AppTraceTypes.PET_EXCHANGE_LOST = 5009;
            AppDto.AppTraceTypes.PET_EXCHANGE_GAIN = 5010;
            AppDto.AppTraceTypes.PET_EXCHANGE_TYPE_LOST = 5011;
            AppDto.AppTraceTypes.PET_EXCHANGE_TYPE_GAIN = 5012;
            AppDto.AppTraceTypes.DYE_LOST = 5013;
            AppDto.AppTraceTypes.PLAYER_CHANGE_LOST = 5014;
            AppDto.AppTraceTypes.CREW_EQUIPMENT_UPGRADE_LOST = 5015;
            AppDto.AppTraceTypes.CREW_EQUIPMENT_RESET_LOST = 5016;
            AppDto.AppTraceTypes.CREW_EQUIPMENT_WEAR_LOST = 5017;
            AppDto.AppTraceTypes.CREW_EQUIPMENT_EMBED_LOST = 5018;
            AppDto.AppTraceTypes.PET_REFRESH_LOST = 5019;
            AppDto.AppTraceTypes.PET_GROWTH_PROPS_LOST = 5020;
            AppDto.AppTraceTypes.PET_DEVOUR_GAIN = 5021;
            AppDto.AppTraceTypes.SKILL_CERTIFICATE_LOST = 5022;
            AppDto.AppTraceTypes.REPLACE_CERTIFICATE_LOST = 5023;
            AppDto.AppTraceTypes.PET_EVOLUTION_LOST = 5024;
            AppDto.AppTraceTypes.PET_DYE_LOST = 5025;
            AppDto.AppTraceTypes.PET_DECORATE_LOST = 5026;
            AppDto.AppTraceTypes.PET_POTENTIAL_ITEM_LOST = 5027;
            AppDto.AppTraceTypes.PET_RESET_GAIN = 5028;
            AppDto.AppTraceTypes.PET_DEVOUR_LOST = 5030;
            AppDto.AppTraceTypes.PET_MISSION_SUBMIT_LOST = 5031;
            AppDto.AppTraceTypes.PET_DROP_LOST = 5032;
            AppDto.AppTraceTypes.PET_MIX_LOST = 5033;
            AppDto.AppTraceTypes.PET_MIX_GAIN = 5034;
            AppDto.AppTraceTypes.PET_ORNAMENT_DYE_LOST = 5035;
            AppDto.AppTraceTypes.PET_DROP_GAIN = 5036;
            AppDto.AppTraceTypes.CREW_TRAIN_LOST = 5040;
            AppDto.AppTraceTypes.FORMATION_UPGRADE_LOST = 5041;
            AppDto.AppTraceTypes.FRIEND_BONUS = 6000;
            AppDto.AppTraceTypes.FACTION_CHARACTOR_CHANGE_LOST = 7000;
            AppDto.AppTraceTypes.FACTION_CHARACTOR_CHANGE_GAIN = 7001;
            AppDto.AppTraceTypes.EQUIPMENT_CHANGE_LOST = 7002;
            AppDto.AppTraceTypes.FASHIONDRESS_CHANGE_LOST = 7003;
            AppDto.AppTraceTypes.CREATE_GUILD_CONSUME = 7100;
            AppDto.AppTraceTypes.KEEP_CONTRIBUTE = 7101;
            AppDto.AppTraceTypes.LEAVE_GUILD_CLEAR_CONTRIBUTE = 7102;
            AppDto.AppTraceTypes.SELF_RECOMMEND_CONSUME = 7103;
            AppDto.AppTraceTypes.UPDATE_MEMO_CONSUME = 7104;
            AppDto.AppTraceTypes.ADD_NOTICE_CONSUME = 7105;
            AppDto.AppTraceTypes.UPGRADE_GUILD_GRADE = 7106;
            AppDto.AppTraceTypes.CANCEL_UPGRADE_GUILD_GRADE = 7107;
            AppDto.AppTraceTypes.UPGRADE_GUILD_TREASURY = 7108;
            AppDto.AppTraceTypes.CANCEL_UPGRADE_GUILD_TREASURY = 7109;
            AppDto.AppTraceTypes.UPGRADE_GUILD_MEDICINE = 7110;
            AppDto.AppTraceTypes.CANCEL_UPGRADE_GUILD_MEDICINE = 7111;
            AppDto.AppTraceTypes.UPGRADE_GUILD_ROOM = 7112;
            AppDto.AppTraceTypes.CANCEL_UPGRADE_GUILD_ROOM = 7113;
            AppDto.AppTraceTypes.UPGRADE_GUILD_GRANARY = 7114;
            AppDto.AppTraceTypes.CANCEL_UPGRADE_GUILD_GRANARY = 7115;
            AppDto.AppTraceTypes.UPGRADE_GUILD_BUILDING_LOST = 7116;
            AppDto.AppTraceTypes.GAIN_GUILD_BENEFIT_LOST = 7117;
            AppDto.AppTraceTypes.GUILD_BENEFIT_GAIN = 7118;
            AppDto.AppTraceTypes.GUILD_SERVICE_CONSUME = 7119;
            AppDto.AppTraceTypes.GUILD_GIFT_BOX_CONSUME = 7120;
            AppDto.AppTraceTypes.UPGRADE_GUILD_BUILDING_GAIN = 7121;
            AppDto.AppTraceTypes.CONVERT_CONTRIBUTE_LOST = 7122;
            AppDto.AppTraceTypes.CONVERT_CONTRIBUTE_GAIN = 7123;
            AppDto.AppTraceTypes.GUILD_AD_CONSUME = 7124;
            AppDto.AppTraceTypes.GUILD_BAN_TALK_CONSUME = 7125;
            AppDto.AppTraceTypes.GUILD_DAILY_DECREASE_HEALTH = 7126;
            AppDto.AppTraceTypes.GUILD_PLAYER_ACTIVE_INCREASE_HEALTH = 7127;
            AppDto.AppTraceTypes.GUILD_PLAYER_DAILY_FIRST_LOGIN_INCREASE_HEALTH = 7128;
            AppDto.AppTraceTypes.GUILD_RENAME_LOST = 7129;
            AppDto.AppTraceTypes.GUILD_BUILDING_ASSET_RESET_GAIN = 7130;
            AppDto.AppTraceTypes.GUILD_BUILDING_ASSET_RESET_LOST = 7131;
            AppDto.AppTraceTypes.GUILD_COMP_TIME_BONUS = 7200;
            AppDto.AppTraceTypes.GUILD_COMP_WIN_BONUS = 7201;
            AppDto.AppTraceTypes.GUILD_COMP_LOST_BONUS = 7202;
            AppDto.AppTraceTypes.GUILD_COMP_KICK_OUT_BONUS = 7203;
            AppDto.AppTraceTypes.GUILD_COMP_OPEN_BOX_GAIN = 7204;
            AppDto.AppTraceTypes.GUILD_COMP_BATTLE_WIN_BONUS = 7205;
            AppDto.AppTraceTypes.GUILD_COMP_BATTLE_LOST_BONUS = 7206;
            AppDto.AppTraceTypes.MAZE_OPEN_LOST = 7210;
            AppDto.AppTraceTypes.MAZE_COPY_SUBMIT_GAIN = 7211;
            AppDto.AppTraceTypes.MAZE_OPEN_BOX_GAIN = 7212;
            AppDto.AppTraceTypes.EQUIPMENT_WEAR_LOST = 8000;
            AppDto.AppTraceTypes.EQUIPMENT_TAKEOFF_GAIN = 8001;
            AppDto.AppTraceTypes.EQUIPMENT_SMITH_LOST = 8002;
            AppDto.AppTraceTypes.EQUIPMENT_SMITH_GAIN = 8003;
            AppDto.AppTraceTypes.EQUIPMENT_EMBED_GAIN = 8004;
            AppDto.AppTraceTypes.EQUIPMENT_EMBED_LOST = 8005;
            AppDto.AppTraceTypes.EQUIPMENT_EMBED_TRANSFER_LOST = 8006;
            AppDto.AppTraceTypes.EQUIPMENT_APTITUDE_TRANSFER_LOST = 8007;
            AppDto.AppTraceTypes.EQUIPMENT_IDENTIFY_LOST = 8008;
            AppDto.AppTraceTypes.PET_EQUIPMENT_WEAR_LOST = 8009;
            AppDto.AppTraceTypes.PET_EQUIPMENT_COMBINE_GAIN = 8010;
            AppDto.AppTraceTypes.PET_EQUIPMENT_COMBINE_LOST = 8011;
            AppDto.AppTraceTypes.EQUIPMENT_TAKEOFF_AUTO_SALE_GAIN = 8012;
            AppDto.AppTraceTypes.PET_EQUIPMENT_AMULET_RESET_LOST = 8013;
            AppDto.AppTraceTypes.EQUIPMENT_RESET_PROPERTIES_LOST = 8014;
            AppDto.AppTraceTypes.EQUIPMENT_RESET_SKILL_LOST = 8015;
            AppDto.AppTraceTypes.EQUIPMENT_UNEMBED_GAIN = 8016;
            AppDto.AppTraceTypes.EQUIPMENT_CERTIFICATE_LOST = 8017;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_UPGRADE_LOST = 8800;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_BREAK_LOST = 8801;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_SPRITE_AWAKE_LOST = 8802;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_SPRITE_TRANSFORM_LOST = 8803;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_DECOMPOSE_LOST = 8804;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_DECOMPOSE_GAIN = 8805;
            AppDto.AppTraceTypes.EQUIPMENT_HALLOW_SPRITE_EVOLVE_LOST = 8806;
            AppDto.AppTraceTypes.SPELL_STUDY_LOST = 9000;
            AppDto.AppTraceTypes.ASSIST_SKILL_STUDY_LOST = 9100;
            AppDto.AppTraceTypes.ASSIST_SKILL_PRODUCT_LOST = 9101;
            AppDto.AppTraceTypes.ASSIST_SKILL_PRODUCT_GAIN = 9102;
            AppDto.AppTraceTypes.ASSIST_SKILL_CONVERT_LOST = 9103;
            AppDto.AppTraceTypes.ASSIST_SKILL_CONVERT_GAIN = 9104;
            AppDto.AppTraceTypes.ASSIST_SKILL_ACTIVE_GAIN = 9105;
            AppDto.AppTraceTypes.SCENARIO_SKILL_STUDY_LOST = 9106;
            AppDto.AppTraceTypes.SCENARIO_SKILL_DOWN_GRADE_LOST = 9107;
            AppDto.AppTraceTypes.SCENARIO_SKILL_DOWN_GRADE_RETURN = 9108;
            AppDto.AppTraceTypes.SCENARIO_SKILL_PET_PROTECT_LOST = 9109;
            AppDto.AppTraceTypes.ASSIST_SKILL_CONVERT_LUCKY_KONT_LOST = 9110;
            AppDto.AppTraceTypes.ASSIST_SKILL_CONVERT_LUCKY_KONT_GAIN = 9111;
            AppDto.AppTraceTypes.MONEY_TREE_GAIN = 9980;
            AppDto.AppTraceTypes.AWARD_MISSION_GAIN = 9981;
            AppDto.AppTraceTypes.WEEKEND_GIFT_LOST = 9990;
            AppDto.AppTraceTypes.WEEKEND_GIFT_GAIN = 9991;
            AppDto.AppTraceTypes.QUESTION_GAIN = 10000;
            AppDto.AppTraceTypes.HAPPY_GRID_GAIN = 10100;
            AppDto.AppTraceTypes.CHECKIN_GAIN = 10500;
            AppDto.AppTraceTypes.CHECKIN_GAIN_NO_SHOW = 10501;
            AppDto.AppTraceTypes.FESTIVAL_GAIN = 10550;
            AppDto.AppTraceTypes.ACTIVE_GAIN = 10551;
            AppDto.AppTraceTypes.FESTIVAL_GAIN_NO_SHOW = 10552;
            AppDto.AppTraceTypes.GAM_GAIN = 10560;
            AppDto.AppTraceTypes.GAM_GAIN_NO_SHOW = 10561;
            AppDto.AppTraceTypes.WEEKLY_BOX_GAIN = 10570;
            AppDto.AppTraceTypes.WEEKLY_BOX_PICKUP = 10571;
            AppDto.AppTraceTypes.WEEKLY_QUEST_FINISH_GAIN = 10572;
            AppDto.AppTraceTypes.PAY_DEBT_LOST = 10600;
            AppDto.AppTraceTypes.COMPENSATE_GAIN = 10601;
            AppDto.AppTraceTypes.GIFTBAG_GAIN = 10602;
            AppDto.AppTraceTypes.RESEARCH_GAIN = 10603;
            AppDto.AppTraceTypes.TIMED_MAIL_GAIN = 10604;
            AppDto.AppTraceTypes.WORD_GIFTBAG_GAIN = 10605;
            AppDto.AppTraceTypes.PROMOTION_SHARE_SUCCESS = 10701;
            AppDto.AppTraceTypes.PROMOTION_INVITEE_UPGRADE = 10702;
            AppDto.AppTraceTypes.MARRIAGE_PAY_FOR = 10800;
            AppDto.AppTraceTypes.MARRIAGE_DIV_PAY = 10801;
            AppDto.AppTraceTypes.MARRIAGE_SWEET_BOX_OPEN = 10802;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_TREE_HARVEST = 10803;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_TREE_TOUCH = 10804;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_TREE_BUY_TIMES = 10805;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_TREE_LVL_REWARD = 10806;
            AppDto.AppTraceTypes.FASHION_PIECE_COMPOSE_GAIN = 10807;
            AppDto.AppTraceTypes.FASHION_PIECE_COMPOSE_LOST = 10808;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_TREE_TOUCH_GAIN = 10809;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_TREE_WATERING_GAIN = 10810;
            AppDto.AppTraceTypes.MARRIAGE_LOVE_LOCK_LOST = 10811;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_PAY_LOST = 10812;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_CANDIES_PAY_LOST = 10813;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_CANDIES_OPEN = 10814;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_BOX_OPEN = 10815;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_PET_BOX_OPEN = 10816;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_MANAGER_GIFT_GAIN_LOVE_VALUE = 10817;
            AppDto.AppTraceTypes.BRIDAL_SEDAN_PET_TAKES_GAIN_LOVE_VALUE = 10818;
            AppDto.AppTraceTypes.BUY_COOKING_PAN_LOST = 10850;
            AppDto.AppTraceTypes.COOKING_FOOD_LOST = 10851;
            AppDto.AppTraceTypes.COOKING_FOOD_COLLECT = 10852;
            AppDto.AppTraceTypes.COOKING_FOOD_BACKPACK_USE_GAIN = 10853;
            AppDto.AppTraceTypes.COOKING_FOOD_ICEBOX_USE_GAIN = 10854;
            AppDto.AppTraceTypes.ICEBOX_EXPAND_LOST = 10855;
            AppDto.AppTraceTypes.ICEBOX_USE_LOST = 10856;
            AppDto.AppTraceTypes.INIT_ICEBOX_LOST = 10857;
            AppDto.AppTraceTypes.COOKING_FOOD_BACKPACK_USE_LOST = 10858;
            AppDto.AppTraceTypes.MONEY_PACK_RECYCLE = 10900;
            AppDto.AppTraceTypes.MONEY_PACK_PAYOUT = 10901;
            AppDto.AppTraceTypes.MONEY_PACK_OPEN = 10902;
            AppDto.AppTraceTypes.FIREWORK_GIFT_LOST = 11000;
            AppDto.AppTraceTypes.FIREWORK_GIFT_GAIN = 11001;
            AppDto.AppTraceTypes.GROWTH_MISSION_BONUS = 11021;
            AppDto.AppTraceTypes.EVERDAY_GAME_GAIN = 11050;
            AppDto.AppTraceTypes.EVERDAY_BLESSING_GAIN = 11060;
            AppDto.AppTraceTypes.CONSUMPTION_AMOUNT_REWARD = 12000;
            AppDto.AppTraceTypes.CONSUMPTION_RANK_REWARD = 12001;
            AppDto.AppTraceTypes.INDENTURE_ACHIEVEMENT_GAIN = 13000;
            AppDto.AppTraceTypes.INDENTURE_PUBLISH_LOST = 13001;
            AppDto.AppTraceTypes.INDENTURE_FINISH_GAIN = 13002;
            AppDto.AppTraceTypes.INDENTURE_DAILY_GAIN = 13003;
            AppDto.AppTraceTypes.CAMPWAR_PERIOD_BONUS = 14000;
            AppDto.AppTraceTypes.CAMPWAR_PEACH_PICK_BONUS = 14004;
            AppDto.AppTraceTypes.CAMPWAR_BATTLE_WIN_BONUS = 14005;
            AppDto.AppTraceTypes.CAMPWAR_BATTLE_LOST_BONUS = 14006;
            AppDto.AppTraceTypes.CAMPWAR_CAMP_BONUS = 14007;
            AppDto.AppTraceTypes.SCENE_GOLD_BOX_LOST = 15000;
            AppDto.AppTraceTypes.OPEN_GOLD_BOX = 15001;
            AppDto.AppTraceTypes.OFFICAL_DONATION = 15100;
            AppDto.AppTraceTypes.MOUNT_EXCHANGE_LOST = 16000;
            AppDto.AppTraceTypes.MOUNT_EXCHANGE_GAIN = 16001;
            AppDto.AppTraceTypes.MOUNT_APTITUDE_OPEN_LOST = 16002;
            AppDto.AppTraceTypes.MOUNT_APTITUDE_OPEN_GAIN = 16003;
            AppDto.AppTraceTypes.MOUNT_PASSIVE_LOST = 16004;
            AppDto.AppTraceTypes.MOUNT_PASSIVE_GAIN = 16005;
            AppDto.AppTraceTypes.MOUNT_CHANGE_FACE_LOST = 16006;
            AppDto.AppTraceTypes.MOUNT_CHANGE_FACE_GAIN = 16007;
            AppDto.AppTraceTypes.MOUNT_ORNAMENT_LOST = 16008;
            AppDto.AppTraceTypes.MOUNT_ORNAMENT_GAIN = 16009;
            AppDto.AppTraceTypes.SHIPMENT_ACCEPT_LOST = 16100;
            AppDto.AppTraceTypes.SHIPMENT_ACCEPT_GAIN = 16101;
            AppDto.AppTraceTypes.SHIPMENT_FINISH_GAIN = 16102;
            AppDto.AppTraceTypes.SHIPMENT_WIN_GAIN = 16103;
            AppDto.AppTraceTypes.SHIPMENT_SUBMIT_GAIN = 16104;
            AppDto.AppTraceTypes.SHIPMENT_RANDOM_BATTLE_GAIN = 16105;
            AppDto.AppTraceTypes.DUEL_CREATE_LOST = 16200;
            AppDto.AppTraceTypes.DUEL_DEFEAT_LOST = 16201;
            AppDto.AppTraceTypes.TALENT_SHOW_REG_LOST = 16300;
            AppDto.AppTraceTypes.TALENT_SHOW_POST_LOST = 16301;
            AppDto.AppTraceTypes.TALENT_SHOW_GIVE_FLOWER_LOST = 16302;
            AppDto.AppTraceTypes.TALENT_SHOW_BONUS = 16303;
            AppDto.AppTraceTypes.TALENT_SHOW_REMOVE_PROPS_LOST = 16304;
            AppDto.AppTraceTypes.TALENT_SHOW_FIRST_BONUS = 16305;
            AppDto.AppTraceTypes.TALENT_SHOW_CLEAR_NEXT_TIME = 16306;
            AppDto.AppTraceTypes.SWORN_CONSUME = 17000;
            AppDto.AppTraceTypes.SWORN_NEWBIE_CONSUME = 17001;
            AppDto.AppTraceTypes.HUNDRER_GRASS_TIME_BONUS = 17010;
            AppDto.AppTraceTypes.HUNDRED_GRASS_END_BONUS = 17011;
            AppDto.AppTraceTypes.HUNDERD_GRASS_INTERACT_BONUS = 17012;
            AppDto.AppTraceTypes.HUNDRED_GRASS_COLLECT_BONUS = 17013;
            AppDto.AppTraceTypes.RANKING_WELFARE_GAIN = 18000;
            AppDto.AppTraceTypes.EVERYDAY_WELFARE_GAIN = 18001;
            AppDto.AppTraceTypes.MONTHLY_WELFARE_GAIN = 18002;
            AppDto.AppTraceTypes.EVERYDAY_WELFARE_CONSUME = 18003;
            AppDto.AppTraceTypes.MONTHLY_WELFARE_CONSUME = 18004;
            AppDto.AppTraceTypes.MAGIC_EQUIPMENT_COMPOSE_LOST = 18100;
            AppDto.AppTraceTypes.MAGIC_EQUIPMENT_COMPOSE_GAIN = 18101;
            AppDto.AppTraceTypes.MAGIC_PEARL_EXCHANGE_LOST = 18102;
            AppDto.AppTraceTypes.MAGIC_PEARL_EXCHANGE_GAIN = 18104;
            AppDto.AppTraceTypes.DECOMPOSE_MAGIC_EQUIPMENT_LOST = 18105;
            AppDto.AppTraceTypes.DECOMPOSE_MAGIC_EQUIPMENT_GAIN = 18106;
            AppDto.AppTraceTypes.MAGIC_EQUIPMENT_WEAR_LOST = 18107;
            AppDto.AppTraceTypes.MAGIC_EQUIPMENT_UPGRADE_LOST = 18108;
            AppDto.AppTraceTypes.MAGIC_EQUIPMENT_RESET_LOST = 18109;
            AppDto.AppTraceTypes.WORLD_GHOST_BATTLE_WIN_BONUS = 18120;
            AppDto.AppTraceTypes.WORLD_GHOST_BATTLE_LOSE_BONUS = 18121;
            AppDto.AppTraceTypes.WORLD_GHOST_KILL_BONUS = 18122;
            AppDto.AppTraceTypes.WORLD_GHOST_OPEN_BOX_GAIN = 18123;
            AppDto.AppTraceTypes.WORLD_GHOST_SYS_CLEAR = 18124;
            AppDto.AppTraceTypes.CSPK_APPLY_LOST = 19000;
            AppDto.AppTraceTypes.CSPK_BYE_REWARD = 19001;
            AppDto.AppTraceTypes.CSPK_ROUND_REWARD = 19002;
            AppDto.AppTraceTypes.CSPK_SERVER_REWARD = 19003;
            AppDto.AppTraceTypes.DATANG_MATCHLESS_BATTLE_WIN_BONUS = 19500;
            AppDto.AppTraceTypes.CHILD_BORN_LOST = 19510;
            AppDto.AppTraceTypes.CHILD_TRAIN_LOST = 19511;
            AppDto.AppTraceTypes.CHILD_RESET_APTITUDE_LOST = 19512;
            AppDto.AppTraceTypes.CHILD_RESET_BASE_APTITUDE_LOST = 19513;
            AppDto.AppTraceTypes.CHILD_LEAN_SKILL_LOST = 19514;
            AppDto.AppTraceTypes.CHILD_EQUIPMENT_WEAR_LOST = 19515;
            AppDto.AppTraceTypes.CHILD_DECORATE_LOST = 19516;
            AppDto.AppTraceTypes.CHILD_RESUME_LOST = 19517;
            AppDto.AppTraceTypes.MONKEY_STEAL_LOST = 19530;
            AppDto.AppTraceTypes.MONKEY_BATTLE_BONUS = 19531;
            AppDto.AppTraceTypes.KITTY_QUESTION_GAIN = 19535;
            AppDto.AppTraceTypes.MISSION_MILITARY_SUBMIT_LOST = 19540;
            AppDto.AppTraceTypes.MISSION_MILITARY_BONUS = 19541;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AppTraceTypes);
var AppDto$AppVirtualItem = {
    fullname: "AppDto.AppVirtualItem",
    baseTypeName: "AppDto.VirtualItem",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.carryLimit = 0;
            this.dailyLimit = 0;
            this.overToDelay = 0;
            this.introduction = null;
            this.gainWayIds = null;
            AppDto.VirtualItem.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$AppVirtualItem);
var AppDto$AptitudeTips = {
    fullname: "AppDto.AptitudeTips",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.factionId = 0;
            this.physique = 0;
            this.power = 0;
            this.intellect = 0;
            this.technique = 0;
            this.agility = 0;
            this.desc = null;
            this._faction = null;
            System.Object.ctor.call(this);
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        }
    }
};
JsTypes.push(AppDto$AptitudeTips);
var AppDto$BagDto = {
    fullname: "AppDto.BagDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.bagId = 0;
            this.capability = 0;
            this.maxCapability = 0;
            this.items = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$BagDto);
var AppDto$BagItemDto = {
    fullname: "AppDto.BagItemDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.packId = 0;
            this.index = 0;
            this.count = 0;
            this.itemId = 0;
            this.circulationType = 0;
            this.giftable = false;
            this.stallable = false;
            this.tradePrice = 0;
            this.uniqueId = 0;
            this.extra = null;
            this.expireAt = 0;
            this.sourceOfTrade = 0;
            this._item = null;
            AppDto.GeneralResponse.ctor.call(this);
        },
        item$$: "AppDto.AppItem",
        get_item: function (){
            if (this._item != null){
                return this._item;
            }
            else {
                var _value = DataCache.getDtoByCls$1(AppDto.GeneralItem.ctor, this.itemId);
                if (_value == null)
                    this._item = null;
                else if (Is(_value, AppDto.AppItem.ctor))
                    this._item = (As(_value, AppDto.AppItem.ctor));
                return this._item;
            }
        },
        set_item: function (value){
            this._item = value;
        }
    }
};
JsTypes.push(AppDto$BagItemDto);
var AppDto$BagItemNotify = {
    fullname: "AppDto.BagItemNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.traceTypeId = 0;
            this.bagId = 0;
            this.updateItems = null;
            this.deleteItems = null;
            this._traceType = null;
            System.Object.ctor.call(this);
        },
        traceType$$: "AppDto.TraceType",
        get_traceType: function (){
            if (this._traceType != null){
                return this._traceType;
            }
            else {
                this._traceType = DataCache.getDtoByCls$1(AppDto.TraceType.ctor, this.traceTypeId);
                return this._traceType;
            }
        },
        set_traceType: function (value){
            this._traceType = value;
        }
    }
};
JsTypes.push(AppDto$BagItemNotify);
var AppDto$BasePropertyTransform = {
    fullname: "AppDto.BasePropertyTransform",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.jobId = 0;
            this.propertyId = 0;
            this.battleProperty = null;
            this.transformRate = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$BasePropertyTransform);
var AppDto$BattlePlayerInfoDto = {
    fullname: "AppDto.BattlePlayerInfoDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.playerId = 0;
            this.useItemCount = 0;
            this.allPetSoldierIds = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$BattlePlayerInfoDto);
var AppDto$CharacterAbility = {
    fullname: "AppDto.CharacterAbility",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.level = 0;
            this.icon = null;
            this.type = 0;
            this.desc = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$CharacterAbility);
var AppDto$CharacterPropertyDto = {
    fullname: "AppDto.CharacterPropertyDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.propId = 0;
            this.propValue = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$CharacterPropertyDto);
var AppDto$CharactorDto = {
    fullname: "AppDto.CharactorDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.playerId = 0;
            this.charactorId = 0;
            this.name = null;
            this.exp = 0;
            this.level = 0;
            this.potential = 0;
            this.extraPotential = 0;
            this.pointPlan = 0;
            this.changeTimes = 0;
            this.hasCustomAptitude = false;
            this.charactorType = 0;
            this.factionId = 0;
            this.properties = null;
            this._charactor = null;
            this._faction = null;
            AppDto.GeneralResponse.ctor.call(this);
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        }
    }
};
JsTypes.push(AppDto$CharactorDto);
var AppDto$CommandNotify = {
    fullname: "AppDto.CommandNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.targetSoldierId = 0;
            this.command = null;
            this.clearAll = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$CommandNotify);
var AppDto$CommonSkillDto = {
    fullname: "AppDto.CommonSkillDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.skillId = 0;
            this.level = 0;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$CommonSkillDto);
var AppDto$CommonSkillsDto = {
    fullname: "AppDto.CommonSkillsDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.commonSkillDtos = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$CommonSkillsDto);
var AppDto$CreatePlayerDto = {
    fullname: "AppDto.CreatePlayerDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.grade = 0;
            this.gameServerId = 0;
            this.factionId = 0;
            this.charactorId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$CreatePlayerDto);
var AppDto$DataCacheMap = {
    fullname: "AppDto.DataCacheMap",
    baseTypeName: "System.Object",
    staticDefinition: {
        serviceList: function (){
            var serviceArr = new System.Collections.Generic.List$1.ctor(System.Type.ctor);
            serviceArr.Add(Typeof(AppDto.AptitudeTips.ctor));
            serviceArr.Add(Typeof(AppDto.BasePropertyTransform.ctor));
            serviceArr.Add(Typeof(AppDto.CharacterAbility.ctor));
            serviceArr.Add(Typeof(AppDto.DataListVersion.ctor));
            serviceArr.Add(Typeof(AppDto.ErrorCode.ctor));
            serviceArr.Add(Typeof(AppDto.Faction.ctor));
            serviceArr.Add(Typeof(AppDto.Formation.ctor));
            serviceArr.Add(Typeof(AppDto.GeneralCharactor.ctor));
            serviceArr.Add(Typeof(AppDto.GeneralItem.ctor));
            serviceArr.Add(Typeof(AppDto.MailType.ctor));
            serviceArr.Add(Typeof(AppDto.Model.ctor));
            serviceArr.Add(Typeof(AppDto.Monster.ctor));
            serviceArr.Add(Typeof(AppDto.MonsterGroup.ctor));
            serviceArr.Add(Typeof(AppDto.Npc.ctor));
            serviceArr.Add(Typeof(AppDto.NpcDialog.ctor));
            serviceArr.Add(Typeof(AppDto.Pet.ctor));
            serviceArr.Add(Typeof(AppDto.SceneMap.ctor));
            serviceArr.Add(Typeof(AppDto.Skill.ctor));
            serviceArr.Add(Typeof(AppDto.SkillAi.ctor));
            serviceArr.Add(Typeof(AppDto.SkillBuff.ctor));
            serviceArr.Add(Typeof(AppDto.SkillLevelUpCopperCost.ctor));
            serviceArr.Add(Typeof(AppDto.SkillLevelUpItemCost.ctor));
            serviceArr.Add(Typeof(AppDto.SkillPlan.ctor));
            serviceArr.Add(Typeof(AppDto.SkillUnLock.ctor));
            serviceArr.Add(Typeof(AppDto.StaticConfig.ctor));
            serviceArr.Add(Typeof(AppDto.StaticString.ctor));
            serviceArr.Add(Typeof(AppDto.TeamCommand.ctor));
            serviceArr.Add(Typeof(AppDto.TraceType.ctor));
            serviceArr.Add(Typeof(AppDto.UITips.ctor));
            return serviceArr;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$DataCacheMap);
var AppDto$DataList = {
    fullname: "AppDto.DataList",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.items = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$DataList);
var AppDto$DataListVersion = {
    fullname: "AppDto.DataListVersion",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.type = null;
            this.service = null;
            this.ver = null;
            this.modifyAt = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$DataListVersion);
var AppDto$DebugVideoRound = {
    fullname: "AppDto.DebugVideoRound",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.round = 0;
            this.readyInfo = null;
            this.progressInfo = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$DebugVideoRound);
var AppDto$DemoVideo = {
    fullname: "AppDto.DemoVideo",
    baseTypeName: "AppDto.Video",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.Video.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$DemoVideo);
var AppDto$ErrorCode = {
    fullname: "AppDto.ErrorCode",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.code = null;
            this.message = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$ErrorCode);
var AppDto$ErrorResponse = {
    fullname: "AppDto.ErrorResponse",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.serialId = 0;
            this.message = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$ErrorResponse);
var AppDto$Faction = {
    fullname: "AppDto.Faction",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.Faction.DEFAULT_FACTION_ID = 1;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.classLevel = 0;
            this.limitLevel = 0;
            this.open = false;
            this.weaponTypes = null;
            this.skills = null;
            this.specialSkills = null;
            this.name = null;
            this.shortName = null;
            this.description = null;
            this.factionSceneId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$Faction);
var AppDto$FactionSkillDto = {
    fullname: "AppDto.FactionSkillDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.skillId = 0;
            this.level = 0;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$FactionSkillDto);
var AppDto$FactionSkillsDto = {
    fullname: "AppDto.FactionSkillsDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.factionSkillDtos = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$FactionSkillsDto);
var AppDto$FighterReadyNotifyDto = {
    fullname: "AppDto.FighterReadyNotifyDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.id = 0;
            this.skillId = 0;
            this.releaseTime = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$FighterReadyNotifyDto);
var AppDto$Formation = {
    fullname: "AppDto.Formation",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.Formation.PET_FORMATION_EFFECT_ID = 14;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.description = null;
            this.playerPosition = null;
            this.monsterPosition = null;
            this.effectsStr = null;
            this.debuffTargetsStr = null;
            this.debuffTargets = null;
            this.messageBox = null;
            this.posEffectStr = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$Formation);
var AppDto$GameServerGrade = {
    fullname: "AppDto.GameServerGrade",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.grade = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$GameServerGrade);
var AppDto$GameServerGradeDto = {
    fullname: "AppDto.GameServerGradeDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.serverGrade = 0;
            this.openTime = 0;
            this.gameServerIds = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$GameServerGradeDto);
var AppDto$GameServerTimeDto = {
    fullname: "AppDto.GameServerTimeDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.time = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$GameServerTimeDto);
var AppDto$GeneralCharactor = {
    fullname: "AppDto.GeneralCharactor",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.description = null;
            this.texture = 0;
            this.modelId = 0;
            this.anim = 0;
            this.mutateColor = null;
            this.mutateTexture = 0;
            this._model = null;
            System.Object.ctor.call(this);
        },
        model$$: "AppDto.Model",
        get_model: function (){
            if (this._model != null){
                return this._model;
            }
            else {
                this._model = DataCache.getDtoByCls$1(AppDto.Model.ctor, this.modelId);
                return this._model;
            }
        },
        set_model: function (value){
            this._model = value;
        }
    }
};
JsTypes.push(AppDto$GeneralCharactor);
var AppDto$GeneralItem = {
    fullname: "AppDto.GeneralItem",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.icon = null;
            this.description = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$GeneralItem);
var AppDto$GeneralRequest = {
    fullname: "AppDto.GeneralRequest",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.serial = 0;
            this.sid = 0;
            this.action = null;
            this.needResponse = false;
            this.xparams = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$GeneralRequest);
var AppDto$GeneralResponse = {
    fullname: "AppDto.GeneralResponse",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.serial = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$GeneralResponse);
var AppDto$JoinTeamNotify = {
    fullname: "AppDto.JoinTeamNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.member = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$JoinTeamNotify);
var AppDto$LeaveTeamNotify = {
    fullname: "AppDto.LeaveTeamNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.playerId = 0;
            this.teamId = 0;
            this.reason = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$LeaveTeamNotify);
var AppDto$MailAttachmentDto = {
    fullname: "AppDto.MailAttachmentDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.attachment = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$MailAttachmentDto);
var AppDto$MailsDto = {
    fullname: "AppDto.MailsDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mails = null;
            this.notReadCount = 0;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$MailsDto);
var AppDto$MailType = {
    fullname: "AppDto.MailType",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.mailTypeName = null;
            this.saveDate = 0;
            this.readDelete = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$MailType);
var AppDto$MainCharactor = {
    fullname: "AppDto.MainCharactor",
    baseTypeName: "AppDto.GeneralCharactor",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.gender = 0;
            this.sound = null;
            this.phyle = 0;
            this.factionIds = null;
            this.multiColumns = null;
            this.icon = null;
            AppDto.GeneralCharactor.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$MainCharactor);
var AppDto$Model = {
    fullname: "AppDto.Model",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.uiPos = 0;
            this.uiScale = 0;
            this.magicSkillSound = null;
            this.phySkillSound = null;
            this.hitSound = null;
            this.scale = 0;
            this.attackType = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$Model);
var AppDto$Monster = {
    fullname: "AppDto.Monster",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.hp = null;
            this.attack = null;
            this.defense = null;
            this.magicAttack = null;
            this.magicDefense = null;
            this.speed = null;
            this.maxSp = 0;
            this.shortDesc = null;
            this.activeSkillIds = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$Monster);
var AppDto$MonsterGroup = {
    fullname: "AppDto.MonsterGroup",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.monsterIds = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$MonsterGroup);
var AppDto$Npc = {
    fullname: "AppDto.Npc",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.nameType = 0;
            this.type = 0;
            this.diglogface = null;
            this.modelId = 0;
            this.sceneId = 0;
            this.x = 0;
            this.y = 0;
            this.z = 0;
            this.rotateY = 0;
            this.mutateColor = null;
            this.mutateTexture = 0;
            this.scale = 0;
            this.ornamentId = 0;
            this._model = null;
            System.Object.ctor.call(this);
        },
        model$$: "AppDto.Model",
        get_model: function (){
            if (this._model != null){
                return this._model;
            }
            else {
                this._model = DataCache.getDtoByCls$1(AppDto.Model.ctor, this.modelId);
                return this._model;
            }
        },
        set_model: function (value){
            this._model = value;
        }
    }
};
JsTypes.push(AppDto$Npc);
var AppDto$NpcDialog = {
    fullname: "AppDto.NpcDialog",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.dialogContent = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$NpcDialog);
var AppDto$NpcDoubleTeleport = {
    fullname: "AppDto.NpcDoubleTeleport",
    baseTypeName: "AppDto.Npc",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.toSceneId = 0;
            this.toX = 0;
            this.toY = 0;
            this.toZ = 0;
            this.grade = 0;
            this._sceneMap = null;
            AppDto.Npc.ctor.call(this);
        },
        sceneMap$$: "AppDto.SceneMap",
        get_sceneMap: function (){
            if (this._sceneMap != null){
                return this._sceneMap;
            }
            else {
                this._sceneMap = DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, this.id);
                return this._sceneMap;
            }
        },
        set_sceneMap: function (value){
            this._sceneMap = value;
        }
    }
};
JsTypes.push(AppDto$NpcDoubleTeleport);
var AppDto$NpcGeneral = {
    fullname: "AppDto.NpcGeneral",
    baseTypeName: "AppDto.Npc",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.title = null;
            this.shortName = null;
            this.kind = 0;
            this.needDialog = false;
            this.dialogFunctionIds = null;
            this.dialogId = 0;
            this.wpmodel = 0;
            this.soundId = 0;
            this._dialog = null;
            AppDto.Npc.ctor.call(this);
        },
        dialog$$: "AppDto.NpcDialog",
        get_dialog: function (){
            if (this._dialog != null){
                return this._dialog;
            }
            else {
                this._dialog = DataCache.getDtoByCls$1(AppDto.NpcDialog.ctor, this.dialogId);
                return this._dialog;
            }
        },
        set_dialog: function (value){
            this._dialog = value;
        }
    }
};
JsTypes.push(AppDto$NpcGeneral);
var AppDto$NpcStateDto = {
    fullname: "AppDto.NpcStateDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.npcId = 0;
            this.x = 0;
            this.z = 0;
            this.battleId = 0;
            this.guildId = 0;
            this.rank = 0;
            this.times = 0;
            this._npc = null;
            System.Object.ctor.call(this);
        },
        npc$$: "AppDto.Npc",
        get_npc: function (){
            if (this._npc != null){
                return this._npc;
            }
            else {
                this._npc = DataCache.getDtoByCls$1(AppDto.Npc.ctor, this.npcId);
                return this._npc;
            }
        },
        set_npc: function (value){
            this._npc = value;
        }
    }
};
JsTypes.push(AppDto$NpcStateDto);
var AppDto$Pet = {
    fullname: "AppDto.Pet",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.skillIds = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$Pet);
var AppDto$PlayerDressInfo = {
    fullname: "AppDto.PlayerDressInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.charactorId = 0;
            this.transformModelId = 0;
            this.wpmodel = 0;
            this.dressDyeId = 0;
            this.hairDyeId = 0;
            this.accoutermentDyeId = 0;
            this.fashionId = 0;
            this.dyeCaseId = 0;
            this.ornamentId = 0;
            this.showDress = false;
            this.fashionDressIds = null;
            this.weaponEffect = 0;
            this.petOrnamentDyeCaseId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$PlayerDressInfo);
var AppDto$PlayerDto = {
    fullname: "AppDto.PlayerDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.grade = 0;
            this.gameServerId = 0;
            this.factionId = 0;
            this.charactorId = 0;
            this.sceneId = 0;
            this.gameServerTime = 0;
            this.dressInfo = null;
            this._faction = null;
            this._charactor = null;
            AppDto.GeneralResponse.ctor.call(this);
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        }
    }
};
JsTypes.push(AppDto$PlayerDto);
var AppDto$PlayerMailDto = {
    fullname: "AppDto.PlayerMailDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.title = null;
            this.content = null;
            this.fromId = 0;
            this.fromName = null;
            this.toId = 0;
            this.mailTypeId = 0;
            this.hasAttachments = false;
            this.attachments = null;
            this.sendTime = 0;
            this.read = false;
            this._mailType = null;
            System.Object.ctor.call(this);
        },
        mailType$$: "AppDto.MailType",
        get_mailType: function (){
            if (this._mailType != null){
                return this._mailType;
            }
            else {
                this._mailType = DataCache.getDtoByCls$1(AppDto.MailType.ctor, this.mailTypeId);
                return this._mailType;
            }
        },
        set_mailType: function (value){
            this._mailType = value;
        }
    }
};
JsTypes.push(AppDto$PlayerMailDto);
var AppDto$PlayerNameDto = {
    fullname: "AppDto.PlayerNameDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$PlayerNameDto);
var AppDto$PlayerSimpleDressInfoDto = {
    fullname: "AppDto.PlayerSimpleDressInfoDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.wpmodel = 0;
            this.dressDyeId = 0;
            this.hairDyeId = 0;
            this.accoutermentDyeId = 0;
            this.showDress = false;
            this.fashionDressIds = null;
            this.weaponEffect = 0;
            this.hallowSpriteId = 0;
            this.wingId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$PlayerSimpleDressInfoDto);
var AppDto$QueueDto = {
    fullname: "AppDto.QueueDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.index = 0;
            this.remain = 0;
            this.playerDto = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$QueueDto);
var AppDto$RealItem = {
    fullname: "AppDto.RealItem",
    baseTypeName: "AppDto.GeneralItem",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.itemType = 0;
            this.maxOverlay = 0;
            this.circulationType = 0;
            this.buyPrice = 0;
            this.salePrice = 0;
            this.applyTime = 0;
            this.stallable = false;
            this.giftable = false;
            this.giftPrice = 0;
            AppDto.GeneralItem.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$RealItem);
var AppDto$SceneDto = {
    fullname: "AppDto.SceneDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.objects = null;
            this._sceneMap = null;
            System.Object.ctor.call(this);
        },
        sceneMap$$: "AppDto.SceneMap",
        get_sceneMap: function (){
            if (this._sceneMap != null){
                return this._sceneMap;
            }
            else {
                this._sceneMap = DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, this.id);
                return this._sceneMap;
            }
        },
        set_sceneMap: function (value){
            this._sceneMap = value;
        }
    }
};
JsTypes.push(AppDto$SceneDto);
var AppDto$SceneMap = {
    fullname: "AppDto.SceneMap",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.description = null;
            this.serverId = 0;
            this.type = 0;
            this.flyable = false;
            this.canFlyIn = false;
            this.maxSize = 0;
            this.width = 0;
            this.height = 0;
            this.x = 0;
            this.y = 0;
            this.z = 0;
            this.battleMapId = 0;
            this.resId = 0;
            this.music = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SceneMap);
var AppDto$SceneNpcDto = {
    fullname: "AppDto.SceneNpcDto",
    baseTypeName: "AppDto.SceneObjectDto",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.npcId = 0;
            this.battleId = 0;
            this._npc = null;
            AppDto.SceneObjectDto.ctor.call(this);
        },
        npc$$: "AppDto.Npc",
        get_npc: function (){
            if (this._npc != null){
                return this._npc;
            }
            else {
                this._npc = DataCache.getDtoByCls$1(AppDto.Npc.ctor, this.npcId);
                return this._npc;
            }
        },
        set_npc: function (value){
            this._npc = value;
        }
    }
};
JsTypes.push(AppDto$SceneNpcDto);
var AppDto$SceneObjectDto = {
    fullname: "AppDto.SceneObjectDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.x = 0;
            this.z = 0;
            this.objType = 0;
            this.moveSpeed = 0;
            this.sceneId = 0;
            this._scene = null;
            System.Object.ctor.call(this);
        },
        scene$$: "AppDto.SceneMap",
        get_scene: function (){
            if (this._scene != null){
                return this._scene;
            }
            else {
                this._scene = DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, this.sceneId);
                return this._scene;
            }
        },
        set_scene: function (value){
            this._scene = value;
        }
    }
};
JsTypes.push(AppDto$SceneObjectDto);
var AppDto$SceneObjectNotify = {
    fullname: "AppDto.SceneObjectNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.sceneId = 0;
            this.obj = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SceneObjectNotify);
var AppDto$SceneObjectRemoveNotify = {
    fullname: "AppDto.SceneObjectRemoveNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.sceneId = 0;
            this.objType = 0;
            this.objId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SceneObjectRemoveNotify);
var AppDto$SceneObjectTeleportNotify = {
    fullname: "AppDto.SceneObjectTeleportNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.sceneId = 0;
            this.x = 0;
            this.z = 0;
            this.objType = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SceneObjectTeleportNotify);
var AppDto$SceneObjectWalkNotify = {
    fullname: "AppDto.SceneObjectWalkNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.sceneId = 0;
            this.x = 0;
            this.z = 0;
            this.objType = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SceneObjectWalkNotify);
var AppDto$ScenePlayerDto = {
    fullname: "AppDto.ScenePlayerDto",
    baseTypeName: "AppDto.SceneObjectDto",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.grade = 0;
            this.charactorId = 0;
            this.factionId = 0;
            this.teamId = 0;
            this.teamStatus = 0;
            this.teamIndex = 0;
            this._charactor = null;
            this._faction = null;
            AppDto.SceneObjectDto.ctor.call(this);
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        }
    }
};
JsTypes.push(AppDto$ScenePlayerDto);
var AppDto$SimplePlayerDto = {
    fullname: "AppDto.SimplePlayerDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.nickname = null;
            this.grade = 0;
            this.sceneId = 0;
            this.x = 0;
            this.z = 0;
            this.guildId = 0;
            this.guildName = null;
            this.teamStatus = 0;
            this.teamUniqueId = null;
            this.teamIndex = 0;
            this.teamPlayerCount = 0;
            this.inTeamPlayerCount = 0;
            this.charactorId = 0;
            this.factionId = 0;
            this.vip = false;
            this.titleId = 0;
            this.titleName = null;
            this.online = false;
            this.inBattle = false;
            this.scale = 0;
            this.scaleExpireAt = 0;
            this.transformModelId = 0;
            this.transformExpireAt = 0;
            this.fereName = null;
            this.closedLocation = false;
            this.locationInfo = null;
            this.masterName = null;
            this.masterId = 0;
            this.camp = 0;
            this.score = 0;
            this.petScore = 0;
            this.moveSpeed = 0;
            this._scene = null;
            this._charactor = null;
            this._faction = null;
            this._transformModel = null;
            AppDto.GeneralResponse.ctor.call(this);
        },
        scene$$: "AppDto.SceneMap",
        get_scene: function (){
            if (this._scene != null){
                return this._scene;
            }
            else {
                this._scene = DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, this.sceneId);
                return this._scene;
            }
        },
        set_scene: function (value){
            this._scene = value;
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        },
        transformModel$$: "AppDto.Model",
        get_transformModel: function (){
            if (this._transformModel != null){
                return this._transformModel;
            }
            else {
                this._transformModel = DataCache.getDtoByCls$1(AppDto.Model.ctor, this.transformModelId);
                return this._transformModel;
            }
        },
        set_transformModel: function (value){
            this._transformModel = value;
        }
    }
};
JsTypes.push(AppDto$SimplePlayerDto);
var AppDto$Skill = {
    fullname: "AppDto.Skill",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppDto.Skill.COMMON_ATTACK_ID = 1;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.actionPoint = 0;
            this.sp = 0;
            this.logicId = 0;
            this.skillAiId = 0;
            this.targetSelectorId = 0;
            this.hitRate = 0;
            this.playTime = 0;
            this.releaseTime = 0;
            this.fixReleaseTime = 0;
            this.singleActionPlayTime = 0;
            this.actionReadyPlayTime = 0;
            this.actionEndPlayTime = 0;
            this.skillType = 0;
            this.minPlayerLevel = 0;
            this.maxLevel = 0;
            this.factionId = 0;
            this.weaponIds = null;
            this.skillPoint = 0;
            this.levelUpLogicId = 0;
            this.itemId = 0;
            this.ownerType = 0;
            this.targetAddBuffs = null;
            this.targetRemoveBuffs = null;
            this.selfRemoveBuffs = null;
            this.damage = null;
            this.targetNum = 0;
            this.common = false;
            this.buffIds = null;
            this.skillAttackType = 0;
            this.spendSpFormula = null;
            this.icon = null;
            this.clientEffectType = 0;
            this.clientSkillType = 0;
            this.atOnce = false;
            this.shortDescription = null;
            this.dynamicDesc = null;
            this._faction = null;
            System.Object.ctor.call(this);
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        }
    }
};
JsTypes.push(AppDto$Skill);
var AppDto$SkillAi = {
    fullname: "AppDto.SkillAi",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.description = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillAi);
var AppDto$SkillBuff = {
    fullname: "AppDto.SkillBuff",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            this.buffType = 0;
            this.group = 0;
            this.durationTime = 0;
            this.periodTime = null;
            this.triggerTimes = 0;
            this.removeable = false;
            this.coverable = false;
            this.overlapTimes = 0;
            this.logicId = 0;
            this.logicParam = null;
            this.propertyIds = null;
            this.triggerStages = null;
            this.deadRemoveBuffs = null;
            this.uiHeadEffect = null;
            this.description = null;
            this.animation = 0;
            this.animationMount = null;
            this.icon = null;
            this.uiSurroudEffect = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillBuff);
var AppDto$SkillBuffRate = {
    fullname: "AppDto.SkillBuffRate",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.buffId = 0;
            this.rate = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillBuffRate);
var AppDto$SkillDto = {
    fullname: "AppDto.SkillDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.skillId = 0;
            this.level = 0;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillDto);
var AppDto$SkillLevelUpCopperCost = {
    fullname: "AppDto.SkillLevelUpCopperCost",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.copper = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillLevelUpCopperCost);
var AppDto$SkillLevelUpItemCost = {
    fullname: "AppDto.SkillLevelUpItemCost",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.copper = null;
            this.itemCount = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillLevelUpItemCost);
var AppDto$SkillPlan = {
    fullname: "AppDto.SkillPlan",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillPlan);
var AppDto$SkillsDto = {
    fullname: "AppDto.SkillsDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.skillDtos = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SkillsDto);
var AppDto$SkillUnLock = {
    fullname: "AppDto.SkillUnLock",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.factionId = 0;
            this.level = 0;
            this.skillIds = null;
            this._faction = null;
            System.Object.ctor.call(this);
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        }
    }
};
JsTypes.push(AppDto$SkillUnLock);
var AppDto$StaticConfig = {
    fullname: "AppDto.StaticConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.code = null;
            this.value = null;
            this.name = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$StaticConfig);
var AppDto$StaticString = {
    fullname: "AppDto.StaticString",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.code = null;
            this.message = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$StaticString);
var AppDto$SuccessResponse = {
    fullname: "AppDto.SuccessResponse",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$SuccessResponse);
var AppDto$TeamCommand = {
    fullname: "AppDto.TeamCommand",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.command = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamCommand);
var AppDto$TeamCommanderNotify = {
    fullname: "AppDto.TeamCommanderNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.commanderMemberId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamCommanderNotify);
var AppDto$TeamDto = {
    fullname: "AppDto.TeamDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.leaderPlayerId = 0;
            this.members = null;
            this.maxMemberSize = 0;
            this.commanderId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamDto);
var AppDto$TeamInvitationNotify = {
    fullname: "AppDto.TeamInvitationNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.targetPlayerId = 0;
            this.inviterPlayerId = 0;
            this.teamTargetId = 0;
            this.minGrade = 0;
            this.maxGrade = 0;
            this.inviteTeamMembers = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamInvitationNotify);
var AppDto$TeamMemberDto = {
    fullname: "AppDto.TeamMemberDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.nickname = null;
            this.factionId = 0;
            this.grade = 0;
            this.charactorId = 0;
            this.memberStatus = 0;
            this.index = 0;
            this.hpRate = 0;
            this.spRate = 0;
            this._faction = null;
            this._charactor = null;
            System.Object.ctor.call(this);
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        }
    }
};
JsTypes.push(AppDto$TeamMemberDto);
var AppDto$TeamMemberSimpleDto = {
    fullname: "AppDto.TeamMemberSimpleDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.nickname = null;
            this.factionId = 0;
            this.grade = 0;
            this.charactorId = 0;
            this._faction = null;
            this._charactor = null;
            System.Object.ctor.call(this);
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        }
    }
};
JsTypes.push(AppDto$TeamMemberSimpleDto);
var AppDto$TeamMemberStatusDto = {
    fullname: "AppDto.TeamMemberStatusDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.playerId = 0;
            this.teamId = 0;
            this.status = 0;
            this.index = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamMemberStatusDto);
var AppDto$TeamRecallNotify = {
    fullname: "AppDto.TeamRecallNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.teamId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamRecallNotify);
var AppDto$TeamRequestNotify = {
    fullname: "AppDto.TeamRequestNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.leaderPlayerId = 0;
            this.playerId = 0;
            this.playerNickname = null;
            this.playerGrade = 0;
            this.playerFactionId = 0;
            this.playerCharactorId = 0;
            this.meta = null;
            this._playerFaction = null;
            this._playerCharactor = null;
            System.Object.ctor.call(this);
        },
        playerFaction$$: "AppDto.Faction",
        get_playerFaction: function (){
            if (this._playerFaction != null){
                return this._playerFaction;
            }
            else {
                this._playerFaction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.playerFactionId);
                return this._playerFaction;
            }
        },
        set_playerFaction: function (value){
            this._playerFaction = value;
        },
        playerCharactor$$: "AppDto.MainCharactor",
        get_playerCharactor: function (){
            if (this._playerCharactor != null){
                return this._playerCharactor;
            }
            else {
                this._playerCharactor = DataCache.getDtoByCls$1(AppDto.MainCharactor.ctor, this.playerCharactorId);
                return this._playerCharactor;
            }
        },
        set_playerCharactor: function (value){
            this._playerCharactor = value;
        }
    }
};
JsTypes.push(AppDto$TeamRequestNotify);
var AppDto$TeamSceneNotify = {
    fullname: "AppDto.TeamSceneNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.teamId = 0;
            this.leaderPlayerId = 0;
            this.inTeamPlayerIds = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamSceneNotify);
var AppDto$TeamStatusNotify = {
    fullname: "AppDto.TeamStatusNotify",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.teamId = 0;
            this.memberStatusList = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TeamStatusNotify);
var AppDto$TraceType = {
    fullname: "AppDto.TraceType",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.code = null;
            this.name = null;
            this.opt = 0;
            this.tip = false;
            this.delay = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$TraceType);
var AppDto$UITips = {
    fullname: "AppDto.UITips",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.clientModule = null;
            this.tips = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$UITips);
var AppDto$Video = {
    fullname: "AppDto.Video",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.winId = 0;
            this.mapId = 0;
            this.cameraId = 0;
            this.readyTime = 0;
            this.ateam = null;
            this.bteam = null;
            this.rounds = null;
            this.currentRound = 0;
            this.needPlayerAutoBattle = false;
            this.startStates = null;
            this.playerInfos = null;
            this.retreatable = false;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$Video);
var AppDto$VideoAction = {
    fullname: "AppDto.VideoAction",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.targetStateGroups = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoAction);
var AppDto$VideoActionTargetState = {
    fullname: "AppDto.VideoActionTargetState",
    baseTypeName: "AppDto.VideoTargetState",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.crit = false;
            this.hp = 0;
            this.sp = 0;
            this.currentHp = 0;
            this.soldierStatus = 0;
            this.currentSp = 0;
            this.skillId = 0;
            AppDto.VideoTargetState.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoActionTargetState);
var AppDto$VideoBuffAddTargetState = {
    fullname: "AppDto.VideoBuffAddTargetState",
    baseTypeName: "AppDto.VideoTargetState",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleBuffId = 0;
            this.effectValue = 0;
            this.isHit = false;
            this.skillId = 0;
            this.durationTime = 0;
            this.remainTimes = 0;
            this._battleBuff = null;
            AppDto.VideoTargetState.ctor.call(this);
        },
        battleBuff$$: "AppDto.SkillBuff",
        get_battleBuff: function (){
            if (this._battleBuff != null){
                return this._battleBuff;
            }
            else {
                this._battleBuff = DataCache.getDtoByCls$1(AppDto.SkillBuff.ctor, this.battleBuffId);
                return this._battleBuff;
            }
        },
        set_battleBuff: function (value){
            this._battleBuff = value;
        }
    }
};
JsTypes.push(AppDto$VideoBuffAddTargetState);
var AppDto$VideoBuffRemoveTargetState = {
    fullname: "AppDto.VideoBuffRemoveTargetState",
    baseTypeName: "AppDto.VideoTargetState",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.buffId = null;
            AppDto.VideoTargetState.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoBuffRemoveTargetState);
var AppDto$VideoDodgeTargetState = {
    fullname: "AppDto.VideoDodgeTargetState",
    baseTypeName: "AppDto.VideoTargetState",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.VideoTargetState.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoDodgeTargetState);
var AppDto$VideoInsideSkillAction = {
    fullname: "AppDto.VideoInsideSkillAction",
    baseTypeName: "AppDto.VideoAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.VideoAction.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoInsideSkillAction);
var AppDto$VideoRetreatState = {
    fullname: "AppDto.VideoRetreatState",
    baseTypeName: "AppDto.VideoTargetState",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.success = false;
            this.rate = 0;
            this.retreatSoldiers = null;
            AppDto.VideoTargetState.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoRetreatState);
var AppDto$VideoRound = {
    fullname: "AppDto.VideoRound",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.battleId = 0;
            this.over = false;
            this.winId = 0;
            this.id = 0;
            this.name = null;
            this.playTime = 0;
            this.skillActions = null;
            this.debugInfo = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoRound);
var AppDto$VideoRoundAction = {
    fullname: "AppDto.VideoRoundAction",
    baseTypeName: "AppDto.VideoAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.VideoAction.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoRoundAction);
var AppDto$VideoRounds = {
    fullname: "AppDto.VideoRounds",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.videoRounds = null;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoRounds);
var AppDto$VideoSkillAction = {
    fullname: "AppDto.VideoSkillAction",
    baseTypeName: "AppDto.VideoAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.actionSoldierId = 0;
            this.hpSpent = 0;
            this.spSpent = 0;
            this.skillId = 0;
            this._skill = null;
            AppDto.VideoAction.ctor.call(this);
        },
        skill$$: "AppDto.Skill",
        get_skill: function (){
            if (this._skill != null){
                return this._skill;
            }
            else {
                this._skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, this.skillId);
                return this._skill;
            }
        },
        set_skill: function (value){
            this._skill = value;
        }
    }
};
JsTypes.push(AppDto$VideoSkillAction);
var AppDto$VideoSoldier = {
    fullname: "AppDto.VideoSoldier",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.leaderPlayerId = 0;
            this.playerId = 0;
            this.name = null;
            this.charactorId = 0;
            this.grade = 0;
            this.monsterId = 0;
            this.monsterType = 0;
            this.hp = 0;
            this.maxHp = 0;
            this.position = 0;
            this.charactorType = 0;
            this.factionId = 0;
            this.isMutate = false;
            this.defaultSkillId = 0;
            this.actionPoint = 0;
            this.sp = 0;
            this.maxSp = 0;
            this.time = 0;
            this.spendSpDiscountRate = 0;
            this.playerDressInfo = null;
            this.buffs = null;
            this.skillIds = null;
            this._charactor = null;
            this._monster = null;
            this._faction = null;
            System.Object.ctor.call(this);
        },
        charactor$$: "AppDto.GeneralCharactor",
        get_charactor: function (){
            if (this._charactor != null){
                return this._charactor;
            }
            else {
                this._charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.charactorId);
                return this._charactor;
            }
        },
        set_charactor: function (value){
            this._charactor = value;
        },
        monster$$: "AppDto.Monster",
        get_monster: function (){
            if (this._monster != null){
                return this._monster;
            }
            else {
                this._monster = DataCache.getDtoByCls$1(AppDto.Monster.ctor, this.monsterId);
                return this._monster;
            }
        },
        set_monster: function (value){
            this._monster = value;
        },
        faction$$: "AppDto.Faction",
        get_faction: function (){
            if (this._faction != null){
                return this._faction;
            }
            else {
                this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, this.factionId);
                return this._faction;
            }
        },
        set_faction: function (value){
            this._faction = value;
        }
    }
};
JsTypes.push(AppDto$VideoSoldier);
var AppDto$VideoTargetExceptionState = {
    fullname: "AppDto.VideoTargetExceptionState",
    baseTypeName: "AppDto.VideoTargetState",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.errorCode = 0;
            this.message = null;
            AppDto.VideoTargetState.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoTargetExceptionState);
var AppDto$VideoTargetState = {
    fullname: "AppDto.VideoTargetState",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.dead = false;
            this.leave = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoTargetState);
var AppDto$VideoTargetStateGroup = {
    fullname: "AppDto.VideoTargetStateGroup",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.targetStates = null;
            this.strikeBackAction = null;
            this.protectAction = null;
            this.protectSoldierId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VideoTargetStateGroup);
var AppDto$VideoTeam = {
    fullname: "AppDto.VideoTeam",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.playerIds = null;
            this.teamSoldiers = null;
            this.originalPlayerIds = null;
            this.originalSoldiers = null;
            this.formationId = 0;
            this._formation = null;
            System.Object.ctor.call(this);
        },
        formation$$: "AppDto.Formation",
        get_formation: function (){
            if (this._formation != null){
                return this._formation;
            }
            else {
                this._formation = DataCache.getDtoByCls$1(AppDto.Formation.ctor, this.formationId);
                return this._formation;
            }
        },
        set_formation: function (value){
            this._formation = value;
        }
    }
};
JsTypes.push(AppDto$VideoTeam);
var AppDto$VirtualItem = {
    fullname: "AppDto.VirtualItem",
    baseTypeName: "AppDto.GeneralItem",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.GeneralItem.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$VirtualItem);
var AppProtobuf$ProtobufMap = {
    fullname: "AppProtobuf.ProtobufMap",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppProtobuf.ProtobufMap.typeMap = AppProtobuf.ProtobufMap.initTypeMap();
            AppProtobuf.ProtobufMap.classMap = AppProtobuf.ProtobufMap.initClassMap();
        },
        getClass: function (type){
            if (!AppProtobuf.ProtobufMap.typeMap.ContainsKey(type))
                return null;
            return AppProtobuf.ProtobufMap.typeMap.get_Item$$TKey(type);
        },
        getType: function (clazz){
            if (!AppProtobuf.ProtobufMap.classMap.ContainsKey(clazz))
                return 0;
            return AppProtobuf.ProtobufMap.classMap.get_Item$$TKey(clazz);
        },
        initTypeMap: function (){
            var typeMap = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Type.ctor);
            typeMap.Add(101, Typeof(AppDto.ErrorCode.ctor));
            typeMap.Add(102, Typeof(AppDto.StaticConfig.ctor));
            typeMap.Add(103, Typeof(AppDto.StaticString.ctor));
            typeMap.Add(104, Typeof(AppDto.TraceType.ctor));
            typeMap.Add(105, Typeof(AppDto.ErrorResponse.ctor));
            typeMap.Add(106, Typeof(AppDto.GeneralRequest.ctor));
            typeMap.Add(107, Typeof(AppDto.GeneralResponse.ctor));
            typeMap.Add(108, Typeof(AppDto.SuccessResponse.ctor));
            typeMap.Add(109, Typeof(AppDto.AppErrorCodes.ctor));
            typeMap.Add(110, Typeof(AppDto.AppStaticConfigs.ctor));
            typeMap.Add(111, Typeof(AppDto.AppStaticStrings.ctor));
            typeMap.Add(112, Typeof(AppDto.AppTraceTypes.ctor));
            typeMap.Add(113, Typeof(AppDto.AppItem.ctor));
            typeMap.Add(114, Typeof(AppDto.AppVirtualItem.ctor));
            typeMap.Add(115, Typeof(AppDto.DataList.ctor));
            typeMap.Add(116, Typeof(AppDto.DataListVersion.ctor));
            typeMap.Add(117, Typeof(AppDto.GeneralItem.ctor));
            typeMap.Add(118, Typeof(AppDto.RealItem.ctor));
            typeMap.Add(119, Typeof(AppDto.VirtualItem.ctor));
            typeMap.Add(123, Typeof(AppDto.Faction.ctor));
            typeMap.Add(124, Typeof(AppDto.CreatePlayerDto.ctor));
            typeMap.Add(125, Typeof(AppDto.PlayerDto.ctor));
            typeMap.Add(126, Typeof(AppDto.PlayerNameDto.ctor));
            typeMap.Add(128, Typeof(AppDto.GeneralCharactor.ctor));
            typeMap.Add(129, Typeof(AppDto.MainCharactor.ctor));
            typeMap.Add(130, Typeof(AppDto.GameServerGrade.ctor));
            typeMap.Add(131, Typeof(AppDto.GameServerGradeDto.ctor));
            typeMap.Add(132, Typeof(AppDto.GameServerTimeDto.ctor));
            typeMap.Add(133, Typeof(AppDto.SceneMap.ctor));
            typeMap.Add(134, Typeof(AppDto.AfterLoginDto.ctor));
            typeMap.Add(135, Typeof(AppDto.Formation.ctor));
            typeMap.Add(137, Typeof(AppDto.ActionQueueAddNotifyDto.ctor));
            typeMap.Add(148, Typeof(AppDto.Monster.ctor));
            typeMap.Add(149, Typeof(AppDto.Pet.ctor));
            typeMap.Add(150, Typeof(AppDto.Skill.ctor));
            typeMap.Add(151, Typeof(AppDto.PlayerDressInfo.ctor));
            typeMap.Add(152, Typeof(AppDto.Model.ctor));
            typeMap.Add(153, Typeof(AppDto.FighterReadyNotifyDto.ctor));
            typeMap.Add(154, Typeof(AppDto.ActionQueueRemoveNotifyDto.ctor));
            typeMap.Add(155, Typeof(AppDto.SkillAi.ctor));
            typeMap.Add(156, Typeof(AppDto.MonsterGroup.ctor));
            typeMap.Add(157, Typeof(AppDto.SceneDto.ctor));
            typeMap.Add(158, Typeof(AppDto.SceneObjectDto.ctor));
            typeMap.Add(159, Typeof(AppDto.ScenePlayerDto.ctor));
            typeMap.Add(160, Typeof(AppDto.ActionPointNotifyDto.ctor));
            typeMap.Add(161, Typeof(AppDto.ActionPointSpeedNotifyDto.ctor));
            typeMap.Add(164, Typeof(AppDto.DebugVideoRound.ctor));
            typeMap.Add(165, Typeof(AppDto.DemoVideo.ctor));
            typeMap.Add(166, Typeof(AppDto.Video.ctor));
            typeMap.Add(167, Typeof(AppDto.VideoAction.ctor));
            typeMap.Add(168, Typeof(AppDto.VideoInsideSkillAction.ctor));
            typeMap.Add(169, Typeof(AppDto.VideoRound.ctor));
            typeMap.Add(170, Typeof(AppDto.VideoRoundAction.ctor));
            typeMap.Add(171, Typeof(AppDto.VideoRounds.ctor));
            typeMap.Add(172, Typeof(AppDto.VideoSkillAction.ctor));
            typeMap.Add(173, Typeof(AppDto.VideoSoldier.ctor));
            typeMap.Add(174, Typeof(AppDto.VideoTargetState.ctor));
            typeMap.Add(175, Typeof(AppDto.VideoTargetStateGroup.ctor));
            typeMap.Add(176, Typeof(AppDto.VideoTeam.ctor));
            typeMap.Add(177, Typeof(AppDto.VideoActionTargetState.ctor));
            typeMap.Add(178, Typeof(AppDto.VideoDodgeTargetState.ctor));
            typeMap.Add(179, Typeof(AppDto.CharactorDto.ctor));
            typeMap.Add(180, Typeof(AppDto.SimplePlayerDto.ctor));
            typeMap.Add(181, Typeof(AppDto.Npc.ctor));
            typeMap.Add(182, Typeof(AppDto.NpcStateDto.ctor));
            typeMap.Add(183, Typeof(AppDto.SceneObjectNotify.ctor));
            typeMap.Add(184, Typeof(AppDto.SceneObjectRemoveNotify.ctor));
            typeMap.Add(185, Typeof(AppDto.VideoBuffAddTargetState.ctor));
            typeMap.Add(186, Typeof(AppDto.VideoBuffRemoveTargetState.ctor));
            typeMap.Add(188, Typeof(AppDto.SceneNpcDto.ctor));
            typeMap.Add(189, Typeof(AppDto.SceneObjectWalkNotify.ctor));
            typeMap.Add(190, Typeof(AppDto.NpcDialog.ctor));
            typeMap.Add(191, Typeof(AppDto.NpcDoubleTeleport.ctor));
            typeMap.Add(192, Typeof(AppDto.NpcGeneral.ctor));
            typeMap.Add(193, Typeof(AppDto.SceneObjectTeleportNotify.ctor));
            typeMap.Add(195, Typeof(AppDto.QueueDto.ctor));
            typeMap.Add(196, Typeof(AppDto.TeamDto.ctor));
            typeMap.Add(197, Typeof(AppDto.TeamMemberDto.ctor));
            typeMap.Add(198, Typeof(AppDto.TeamRequestNotify.ctor));
            typeMap.Add(199, Typeof(AppDto.TeamInvitationNotify.ctor));
            typeMap.Add(200, Typeof(AppDto.TeamMemberStatusDto.ctor));
            typeMap.Add(201, Typeof(AppDto.TeamStatusNotify.ctor));
            typeMap.Add(202, Typeof(AppDto.SkillBuff.ctor));
            typeMap.Add(203, Typeof(AppDto.LeaveTeamNotify.ctor));
            typeMap.Add(204, Typeof(AppDto.BagDto.ctor));
            typeMap.Add(205, Typeof(AppDto.BagItemDto.ctor));
            typeMap.Add(206, Typeof(AppDto.BagItemNotify.ctor));
            typeMap.Add(207, Typeof(AppDto.PlayerSimpleDressInfoDto.ctor));
            typeMap.Add(208, Typeof(AppDto.CharacterAbility.ctor));
            typeMap.Add(210, Typeof(AppDto.CharacterPropertyDto.ctor));
            typeMap.Add(211, Typeof(AppDto.JoinTeamNotify.ctor));
            typeMap.Add(212, Typeof(AppDto.TeamSceneNotify.ctor));
            typeMap.Add(213, Typeof(AppDto.TeamCommand.ctor));
            typeMap.Add(214, Typeof(AppDto.VideoRetreatState.ctor));
            typeMap.Add(216, Typeof(AppDto.AptitudeTips.ctor));
            typeMap.Add(217, Typeof(AppDto.BasePropertyTransform.ctor));
            typeMap.Add(218, Typeof(AppDto.TeamCommanderNotify.ctor));
            typeMap.Add(219, Typeof(AppDto.TeamRecallNotify.ctor));
            typeMap.Add(220, Typeof(AppDto.BattlePlayerInfoDto.ctor));
            typeMap.Add(221, Typeof(AppDto.UITips.ctor));
            typeMap.Add(222, Typeof(AppDto.CommandNotify.ctor));
            typeMap.Add(223, Typeof(AppDto.MailType.ctor));
            typeMap.Add(224, Typeof(AppDto.PlayerMailDto.ctor));
            typeMap.Add(225, Typeof(AppDto.VideoTargetExceptionState.ctor));
            typeMap.Add(226, Typeof(AppDto.SkillBuffRate.ctor));
            typeMap.Add(227, Typeof(AppDto.MailsDto.ctor));
            typeMap.Add(228, Typeof(AppDto.TeamMemberSimpleDto.ctor));
            typeMap.Add(229, Typeof(AppDto.MailAttachmentDto.ctor));
            typeMap.Add(231, Typeof(AppDto.SkillLevelUpCopperCost.ctor));
            typeMap.Add(232, Typeof(AppDto.SkillLevelUpItemCost.ctor));
            typeMap.Add(233, Typeof(AppDto.SkillUnLock.ctor));
            typeMap.Add(234, Typeof(AppDto.CommonSkillDto.ctor));
            typeMap.Add(235, Typeof(AppDto.CommonSkillsDto.ctor));
            typeMap.Add(236, Typeof(AppDto.FactionSkillDto.ctor));
            typeMap.Add(237, Typeof(AppDto.FactionSkillsDto.ctor));
            typeMap.Add(238, Typeof(AppDto.SkillDto.ctor));
            typeMap.Add(239, Typeof(AppDto.SkillsDto.ctor));
            typeMap.Add(240, Typeof(AppDto.SkillPlan.ctor));
            return typeMap;
        },
        initClassMap: function (){
            var classMap = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Int32.ctor);
            classMap.Add(Typeof(AppDto.ErrorCode.ctor), 101);
            classMap.Add(Typeof(AppDto.StaticConfig.ctor), 102);
            classMap.Add(Typeof(AppDto.StaticString.ctor), 103);
            classMap.Add(Typeof(AppDto.TraceType.ctor), 104);
            classMap.Add(Typeof(AppDto.ErrorResponse.ctor), 105);
            classMap.Add(Typeof(AppDto.GeneralRequest.ctor), 106);
            classMap.Add(Typeof(AppDto.GeneralResponse.ctor), 107);
            classMap.Add(Typeof(AppDto.SuccessResponse.ctor), 108);
            classMap.Add(Typeof(AppDto.AppErrorCodes.ctor), 109);
            classMap.Add(Typeof(AppDto.AppStaticConfigs.ctor), 110);
            classMap.Add(Typeof(AppDto.AppStaticStrings.ctor), 111);
            classMap.Add(Typeof(AppDto.AppTraceTypes.ctor), 112);
            classMap.Add(Typeof(AppDto.AppItem.ctor), 113);
            classMap.Add(Typeof(AppDto.AppVirtualItem.ctor), 114);
            classMap.Add(Typeof(AppDto.DataList.ctor), 115);
            classMap.Add(Typeof(AppDto.DataListVersion.ctor), 116);
            classMap.Add(Typeof(AppDto.GeneralItem.ctor), 117);
            classMap.Add(Typeof(AppDto.RealItem.ctor), 118);
            classMap.Add(Typeof(AppDto.VirtualItem.ctor), 119);
            classMap.Add(Typeof(AppDto.Faction.ctor), 123);
            classMap.Add(Typeof(AppDto.CreatePlayerDto.ctor), 124);
            classMap.Add(Typeof(AppDto.PlayerDto.ctor), 125);
            classMap.Add(Typeof(AppDto.PlayerNameDto.ctor), 126);
            classMap.Add(Typeof(AppDto.GeneralCharactor.ctor), 128);
            classMap.Add(Typeof(AppDto.MainCharactor.ctor), 129);
            classMap.Add(Typeof(AppDto.GameServerGrade.ctor), 130);
            classMap.Add(Typeof(AppDto.GameServerGradeDto.ctor), 131);
            classMap.Add(Typeof(AppDto.GameServerTimeDto.ctor), 132);
            classMap.Add(Typeof(AppDto.SceneMap.ctor), 133);
            classMap.Add(Typeof(AppDto.AfterLoginDto.ctor), 134);
            classMap.Add(Typeof(AppDto.Formation.ctor), 135);
            classMap.Add(Typeof(AppDto.ActionQueueAddNotifyDto.ctor), 137);
            classMap.Add(Typeof(AppDto.Monster.ctor), 148);
            classMap.Add(Typeof(AppDto.Pet.ctor), 149);
            classMap.Add(Typeof(AppDto.Skill.ctor), 150);
            classMap.Add(Typeof(AppDto.PlayerDressInfo.ctor), 151);
            classMap.Add(Typeof(AppDto.Model.ctor), 152);
            classMap.Add(Typeof(AppDto.FighterReadyNotifyDto.ctor), 153);
            classMap.Add(Typeof(AppDto.ActionQueueRemoveNotifyDto.ctor), 154);
            classMap.Add(Typeof(AppDto.SkillAi.ctor), 155);
            classMap.Add(Typeof(AppDto.MonsterGroup.ctor), 156);
            classMap.Add(Typeof(AppDto.SceneDto.ctor), 157);
            classMap.Add(Typeof(AppDto.SceneObjectDto.ctor), 158);
            classMap.Add(Typeof(AppDto.ScenePlayerDto.ctor), 159);
            classMap.Add(Typeof(AppDto.ActionPointNotifyDto.ctor), 160);
            classMap.Add(Typeof(AppDto.ActionPointSpeedNotifyDto.ctor), 161);
            classMap.Add(Typeof(AppDto.DebugVideoRound.ctor), 164);
            classMap.Add(Typeof(AppDto.DemoVideo.ctor), 165);
            classMap.Add(Typeof(AppDto.Video.ctor), 166);
            classMap.Add(Typeof(AppDto.VideoAction.ctor), 167);
            classMap.Add(Typeof(AppDto.VideoInsideSkillAction.ctor), 168);
            classMap.Add(Typeof(AppDto.VideoRound.ctor), 169);
            classMap.Add(Typeof(AppDto.VideoRoundAction.ctor), 170);
            classMap.Add(Typeof(AppDto.VideoRounds.ctor), 171);
            classMap.Add(Typeof(AppDto.VideoSkillAction.ctor), 172);
            classMap.Add(Typeof(AppDto.VideoSoldier.ctor), 173);
            classMap.Add(Typeof(AppDto.VideoTargetState.ctor), 174);
            classMap.Add(Typeof(AppDto.VideoTargetStateGroup.ctor), 175);
            classMap.Add(Typeof(AppDto.VideoTeam.ctor), 176);
            classMap.Add(Typeof(AppDto.VideoActionTargetState.ctor), 177);
            classMap.Add(Typeof(AppDto.VideoDodgeTargetState.ctor), 178);
            classMap.Add(Typeof(AppDto.CharactorDto.ctor), 179);
            classMap.Add(Typeof(AppDto.SimplePlayerDto.ctor), 180);
            classMap.Add(Typeof(AppDto.Npc.ctor), 181);
            classMap.Add(Typeof(AppDto.NpcStateDto.ctor), 182);
            classMap.Add(Typeof(AppDto.SceneObjectNotify.ctor), 183);
            classMap.Add(Typeof(AppDto.SceneObjectRemoveNotify.ctor), 184);
            classMap.Add(Typeof(AppDto.VideoBuffAddTargetState.ctor), 185);
            classMap.Add(Typeof(AppDto.VideoBuffRemoveTargetState.ctor), 186);
            classMap.Add(Typeof(AppDto.SceneNpcDto.ctor), 188);
            classMap.Add(Typeof(AppDto.SceneObjectWalkNotify.ctor), 189);
            classMap.Add(Typeof(AppDto.NpcDialog.ctor), 190);
            classMap.Add(Typeof(AppDto.NpcDoubleTeleport.ctor), 191);
            classMap.Add(Typeof(AppDto.NpcGeneral.ctor), 192);
            classMap.Add(Typeof(AppDto.SceneObjectTeleportNotify.ctor), 193);
            classMap.Add(Typeof(AppDto.QueueDto.ctor), 195);
            classMap.Add(Typeof(AppDto.TeamDto.ctor), 196);
            classMap.Add(Typeof(AppDto.TeamMemberDto.ctor), 197);
            classMap.Add(Typeof(AppDto.TeamRequestNotify.ctor), 198);
            classMap.Add(Typeof(AppDto.TeamInvitationNotify.ctor), 199);
            classMap.Add(Typeof(AppDto.TeamMemberStatusDto.ctor), 200);
            classMap.Add(Typeof(AppDto.TeamStatusNotify.ctor), 201);
            classMap.Add(Typeof(AppDto.SkillBuff.ctor), 202);
            classMap.Add(Typeof(AppDto.LeaveTeamNotify.ctor), 203);
            classMap.Add(Typeof(AppDto.BagDto.ctor), 204);
            classMap.Add(Typeof(AppDto.BagItemDto.ctor), 205);
            classMap.Add(Typeof(AppDto.BagItemNotify.ctor), 206);
            classMap.Add(Typeof(AppDto.PlayerSimpleDressInfoDto.ctor), 207);
            classMap.Add(Typeof(AppDto.CharacterAbility.ctor), 208);
            classMap.Add(Typeof(AppDto.CharacterPropertyDto.ctor), 210);
            classMap.Add(Typeof(AppDto.JoinTeamNotify.ctor), 211);
            classMap.Add(Typeof(AppDto.TeamSceneNotify.ctor), 212);
            classMap.Add(Typeof(AppDto.TeamCommand.ctor), 213);
            classMap.Add(Typeof(AppDto.VideoRetreatState.ctor), 214);
            classMap.Add(Typeof(AppDto.AptitudeTips.ctor), 216);
            classMap.Add(Typeof(AppDto.BasePropertyTransform.ctor), 217);
            classMap.Add(Typeof(AppDto.TeamCommanderNotify.ctor), 218);
            classMap.Add(Typeof(AppDto.TeamRecallNotify.ctor), 219);
            classMap.Add(Typeof(AppDto.BattlePlayerInfoDto.ctor), 220);
            classMap.Add(Typeof(AppDto.UITips.ctor), 221);
            classMap.Add(Typeof(AppDto.CommandNotify.ctor), 222);
            classMap.Add(Typeof(AppDto.MailType.ctor), 223);
            classMap.Add(Typeof(AppDto.PlayerMailDto.ctor), 224);
            classMap.Add(Typeof(AppDto.VideoTargetExceptionState.ctor), 225);
            classMap.Add(Typeof(AppDto.SkillBuffRate.ctor), 226);
            classMap.Add(Typeof(AppDto.MailsDto.ctor), 227);
            classMap.Add(Typeof(AppDto.TeamMemberSimpleDto.ctor), 228);
            classMap.Add(Typeof(AppDto.MailAttachmentDto.ctor), 229);
            classMap.Add(Typeof(AppDto.SkillLevelUpCopperCost.ctor), 231);
            classMap.Add(Typeof(AppDto.SkillLevelUpItemCost.ctor), 232);
            classMap.Add(Typeof(AppDto.SkillUnLock.ctor), 233);
            classMap.Add(Typeof(AppDto.CommonSkillDto.ctor), 234);
            classMap.Add(Typeof(AppDto.CommonSkillsDto.ctor), 235);
            classMap.Add(Typeof(AppDto.FactionSkillDto.ctor), 236);
            classMap.Add(Typeof(AppDto.FactionSkillsDto.ctor), 237);
            classMap.Add(Typeof(AppDto.SkillDto.ctor), 238);
            classMap.Add(Typeof(AppDto.SkillsDto.ctor), 239);
            classMap.Add(Typeof(AppDto.SkillPlan.ctor), 240);
            return classMap;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppProtobuf$ProtobufMap);
var AppServices$Services = {
    fullname: "AppServices.Services",
    baseTypeName: "System.Object",
    staticDefinition: {
        Character_AddPoint: function (physique, power, intellect, technique, agility){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Character_AddPoint";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(physique);
            request.xparams.Add(power);
            request.xparams.Add(intellect);
            request.xparams.Add(technique);
            request.xparams.Add(agility);
            return request;
        },
        Gm_Execute: function (strGmCommand){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Gm_Execute";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(strGmCommand);
            return request;
        },
        Login_Player: function (token, ip, playerId, deviceId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Login_Player";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(token);
            request.xparams.Add(ip);
            request.xparams.Add(playerId);
            request.xparams.Add(deviceId);
            return request;
        },
        Login_PlayerCreate: function (token, ip, name, charactorId, factionId, gameServerId, deviceId, extraInfo){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Login_PlayerCreate";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(token);
            request.xparams.Add(ip);
            request.xparams.Add(name);
            request.xparams.Add(charactorId);
            request.xparams.Add(factionId);
            request.xparams.Add(gameServerId);
            request.xparams.Add(deviceId);
            request.xparams.Add(extraInfo);
            return request;
        },
        Login_RandomName: function (gender){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Login_RandomName";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(gender);
            return request;
        },
        Mail_Check: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Mail_Check";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Mail_Delete: function (mailId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Mail_Delete";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(mailId);
            return request;
        },
        Mail_DeleteAllRead: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Mail_DeleteAllRead";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Mail_Read: function (mailId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Mail_Read";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(mailId);
            return request;
        },
        Mail_SendPublicMail: function (title, content, fromName, toId, mailTypeId, sendTime, endTime){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Mail_SendPublicMail";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(title);
            request.xparams.Add(content);
            request.xparams.Add(fromName);
            request.xparams.Add(toId);
            request.xparams.Add(mailTypeId);
            request.xparams.Add(sendTime);
            request.xparams.Add(endTime);
            return request;
        },
        Player_AfterLogin: function (deviceInfo){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Player_AfterLogin";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(deviceInfo);
            return request;
        },
        Team_ApproveInvitation: function (inviterPlayerId, strMeta){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_ApproveInvitation";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(inviterPlayerId);
            request.xparams.Add(strMeta);
            return request;
        },
        Team_ApproveJoin: function (joinPlayerId, strMeta){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_ApproveJoin";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(joinPlayerId);
            request.xparams.Add(strMeta);
            return request;
        },
        Team_AssignLeader: function (targetMemberPlayerId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_AssignLeader";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(targetMemberPlayerId);
            return request;
        },
        Team_AwayTeam: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_AwayTeam";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Team_BackTeam: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_BackTeam";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Team_CreateTeam: function (strMeta){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_CreateTeam";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(strMeta);
            return request;
        },
        Team_InvitePlayer: function (inviteePlayerId, strMeta){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_InvitePlayer";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(inviteePlayerId);
            request.xparams.Add(strMeta);
            return request;
        },
        Team_JoinTeam: function (memberPlayerId, strMeta){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_JoinTeam";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(memberPlayerId);
            request.xparams.Add(strMeta);
            return request;
        },
        Team_Kickout: function (targetMemberPlayerId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_Kickout";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(targetMemberPlayerId);
            return request;
        },
        Team_LeaveTeam: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_LeaveTeam";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Team_Lineup: function (memberPlayerId1, memberPlayerId2){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_Lineup";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(memberPlayerId1);
            request.xparams.Add(memberPlayerId2);
            return request;
        },
        Team_Recall: function (memberPlayerId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_Recall";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(memberPlayerId);
            return request;
        },
        Team_SetCommander: function (memberPlayerId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Team_SetCommander";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(memberPlayerId);
            return request;
        },
        Table_AptitudeTips: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_AptitudeTips";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_BasePropertyConvertor: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_BasePropertyConvertor";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_BasePropertyTransform: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_BasePropertyTransform";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_CharacterAbility: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_CharacterAbility";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_DataListVersion: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_DataListVersion";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_ErrorCode: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_ErrorCode";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Faction: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Faction";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Formation: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Formation";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_GeneralCharactor: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_GeneralCharactor";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_GeneralItem: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_GeneralItem";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_MailType: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_MailType";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Model: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Model";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Monster: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Monster";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_MonsterGroup: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_MonsterGroup";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Npc: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Npc";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_NpcDialog: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_NpcDialog";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Pet: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Pet";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_PropertyConvertTemplate: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_PropertyConvertTemplate";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SceneMap: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SceneMap";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_Skill: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_Skill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillAi: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillAi";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillBuff: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillBuff";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillLevelUp: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillLevelUp";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillLevelUpCopperCost: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillLevelUpCopperCost";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillLevelUpItemCost: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillLevelUpItemCost";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillPlan: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillPlan";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_SkillUnLock: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_SkillUnLock";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_StaticConfig: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_StaticConfig";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_StaticString: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_StaticString";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_TeamCommand: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_TeamCommand";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_TraceType: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_TraceType";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Table_UITips: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Table_UITips";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Battle_Attack: function (battleId, mainCharacter, targetId, skillId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Attack";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            request.xparams.Add(mainCharacter);
            request.xparams.Add(targetId);
            request.xparams.Add(skillId);
            return request;
        },
        Battle_Auto: function (battleId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Auto";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            return request;
        },
        Battle_CancelAuto: function (battleId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_CancelAuto";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            return request;
        },
        Battle_ClearOrder: function (battleId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_ClearOrder";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            return request;
        },
        Battle_Defence: function (battleId, targetId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Defence";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            request.xparams.Add(targetId);
            return request;
        },
        Battle_Enter: function (json){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Enter";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(json);
            return request;
        },
        Battle_Escape: function (battleId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Escape";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            return request;
        },
        Battle_Leave: function (battleId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Leave";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            return request;
        },
        Battle_Order: function (battleId, targetId, command){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_Order";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            request.xparams.Add(targetId);
            request.xparams.Add(command);
            return request;
        },
        Battle_PetDefaultSkill: function (battleId, skillId, petId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_PetDefaultSkill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            request.xparams.Add(skillId);
            request.xparams.Add(petId);
            return request;
        },
        Battle_PlayerDefaultSkill: function (battleId, skillId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_PlayerDefaultSkill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            request.xparams.Add(skillId);
            return request;
        },
        Battle_UseItem: function (battleId, itemIndex, mainCharacter, targetId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Battle_UseItem";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(battleId);
            request.xparams.Add(itemIndex);
            request.xparams.Add(mainCharacter);
            request.xparams.Add(targetId);
            return request;
        },
        Scene_Fly: function (sceneId, strParams){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Scene_Fly";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(sceneId);
            request.xparams.Add(strParams);
            return request;
        },
        Scene_Login: function (strParams){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Scene_Login";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(strParams);
            return request;
        },
        Scene_PlanWalk: function (sceneId, toX, toZ){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Scene_PlanWalk";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(sceneId);
            request.xparams.Add(System.Single.IsNaN(toX) ? 0 : toX);
            request.xparams.Add(System.Single.IsNaN(toZ) ? 0 : toZ);
            return request;
        },
        Scene_VerifyWalk: function (sceneId, toX, toZ){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Scene_VerifyWalk";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(sceneId);
            request.xparams.Add(System.Single.IsNaN(toX) ? 0 : toX);
            request.xparams.Add(System.Single.IsNaN(toZ) ? 0 : toZ);
            return request;
        },
        Skill_AddActiveSkill: function (skillId, planId, position){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_AddActiveSkill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(skillId);
            request.xparams.Add(planId);
            request.xparams.Add(position);
            return request;
        },
        Skill_AddPassiveSkill: function (skillId, planId, position){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_AddPassiveSkill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(skillId);
            request.xparams.Add(planId);
            request.xparams.Add(position);
            return request;
        },
        Skill_AllLevelUp: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_AllLevelUp";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Skill_AvailableSkills: function (){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_AvailableSkills";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            return request;
        },
        Skill_FactionSkills: function (factionId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_FactionSkills";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(factionId);
            return request;
        },
        Skill_Learn: function (skillId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_Learn";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(skillId);
            return request;
        },
        Skill_LevelUp: function (skillId){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_LevelUp";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(skillId);
            return request;
        },
        Skill_PlanRename: function (planId, name){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_PlanRename";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(planId);
            request.xparams.Add(name);
            return request;
        },
        Skill_RemoveActiveSkill: function (planId, position){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_RemoveActiveSkill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(planId);
            request.xparams.Add(position);
            return request;
        },
        Skill_RemovePassiveSkill: function (planId, position){
            var request = new AppDto.GeneralRequest.ctor();
            request.action = "Skill_RemovePassiveSkill";
            request.xparams = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            request.xparams.Add(planId);
            request.xparams.Add(position);
            return request;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppServices$Services);
var AppGameManager = {
    fullname: "AppGameManager",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            AppGameManager._Instance = null;
        },
        Instance$$: "AppGameManager",
        get_Instance: function (){
            return AppGameManager._Instance;
        },
        set_Instance: function (value){
            AppGameManager._Instance = value;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            AppGameManager.set_Instance(this);
        },
        Start: function (){
            this.Setup();
        },
        Setup: function (){
            JsHelper.SetupJsProto();
            SPSdkManager.get_Instance().Setup();
            SPSdkManager.LoadSPChannelConfig($CreateDelegate(this, this.OnSPChanelConfigLoadFinish));
        },
        OnSPChanelConfigLoadFinish: function (success){
            if (!success){
                UnityEngine.Debug.LogError$$Object("渠道配置加载失败，请检查资源");
                GameLauncher.ShowTips("加载渠道配置失败，请检查资源");
                return;
            }
            this.InitChannelInfo();
            TestinAgentHelper.Init$$String$$String("675e18a4db1224c5971df10418e32165" /* GameConfig.TESTIN_APPKEY */, GameSetting.Channel);
            GameObjectExt.GetMissingComponent$1(LayerManager.ctor, this.get_gameObject());
            UnityEngine.Shader.WarmupAllShaders();
            UnityEngine.Resources.UnloadUnusedAssets();
            AssetPipeline.ResourcePoolManager.get_Instance().Setup();
            var go = new UnityEngine.GameObject.ctor$$String("_ExitGameHandler");
            UnityEngine.Object.DontDestroyOnLoad(go);
            go.AddComponent$1(ExitGameScript.ctor);
            go = new UnityEngine.GameObject.ctor$$String("_SystemTimeManager");
            UnityEngine.Object.DontDestroyOnLoad(go);
            go.AddComponent$1(SystemTimeManager.ctor);
            SdkMessageManager.get_Instance().Setup();
            XinGeSdk.Setup();
            XinGeSdk.Register();
            DataManager.get_Instance().Setup();
            NotifyListenerRegister.AddLoginQueueNotifyListener();
            GameDebuger.TODO(" SystemSetting.Setup();");
            AudioManager.get_Instance().Setup();
            LoadingTipManager.Setup();
            RequestLoadingTip.Setup();
            TipManager.Setup();
            BattleConfigManager.get_Instance().Setup();
            ModelHelper.Setup();
            VoiceRecognitionManager.get_Instance().Setup();
            GameDebuger.TODO("ExpressionManager.Setup();");
            DG.Tweening.DOTween.Init(null, null, null);
            GameLauncher.get_Instance().DestroyGameLoader(LayerManager.get_Root().UIModuleRoot);
            IconConfigManager.Setup($CreateAnonymousDelegate(this, function (){
                if (GameSetting.get_TestServerMode()){
                    this.OnLoadServerListFinish();
                }
                else {
                    this.LoadStaticServerList();
                }
            }));
        },
        InitChannelInfo: function (){
            GameSetting.Channel = SPSdkManager.get_Instance().GetChannel();
            GameSetting.SubChannel = SPSdkManager.get_Instance().GetChannel();
            GameSetting.LoginWay = GameSetting.Channel;
        },
        SetupChannel: function (){
            this.InitChannelInfo();
        },
        LoadStaticServerList: function (){
            TalkingDataHelper.OnEventSetp$$String("AppGameManager/LoadStaticServerList");
            GameLauncher.ShowTips("加载静态服务器列表...");
            GameServerInfoManager.Setup($CreateDelegate(this, this.LoadDynamicServerList), $CreateAnonymousDelegate(this, function (errorMsg){
                this.OpenRetryWindow(errorMsg, $CreateDelegate(this, this.LoadStaticServerList));
            }));
        },
        LoadDynamicServerList: function (){
            TalkingDataHelper.OnEventSetp$$String("AppGameManager/LoadDynamicServerList");
            GameLauncher.ShowTips("加载动态服务器列表...");
            GameServerInfoManager.RequestDynamicServerList(AppGameVersion.get_SpVersionCode(), GameSetting.Channel, GameSetting.get_PlatformTypeId(), $CreateDelegate(this, this.OnLoadServerListFinish), $CreateAnonymousDelegate(this, function (){
                this.OpenRetryWindow("加载服务器列表失败, 请重新进入游戏", $CreateDelegate(this, this.LoadDynamicServerList));
            }));
        },
        OpenRetryWindow: function (errorMsg, retryAction){
            GameLauncher.ShowTips(errorMsg);
            ProxyWindowModule.OpenSimpleMessageWindow(errorMsg, retryAction, 3, null, UILayerType.TopDialogue);
        },
        OnLoadServerListFinish: function (){
            this.CheckGameMov();
        },
        CheckGameMov: function (){
            if (AppGameVersion.get_EnableStartMovieMode() && !PlayerPrefsExt.GetBool$$String("GameStartCG")){
                GameLauncher.ShowTips("");
                CGPlayer.PlayCG("Movies/xlsj.mp4" /* PathHelper.CG_Asset_PATH */, $CreateDelegate(this, this.OnPlayCGFinish));
            }
            else {
                this.OnPlayCGFinish();
            }
        },
        OnPlayCGFinish: function (){
            PlayerPrefsExt.SetBool("GameStartCG", true);
            if (AppGameVersion.get_EnableStartPlotMode() && !PlayerPrefsExt.GetBool$$String("PassRoleCreatePlot")){
                GameDebuger.TODO("var plot = DataCache.getDtoByCls<Plot>(1);\n\t\t\tif (plot != null)\n\t\t\t{\n\t\t\t\tReadyPlotMapRes();\n\t\t\t}\n\t\t\telse ");
                this.InitSPSdk();
            }
            else {
                this.InitSPSdk();
            }
        },
        ReadyPlotMapRes: function (){
            TalkingDataHelper.OnEventSetp$$String("GameStartPlot/ReadyPlotMapRes");
            GameLauncher.ShowTips("载入场景资源...");
            var sceneId = 3007;
            WorldMapLoader.get_Instance().LoadWorldMap(sceneId, $CreateAnonymousDelegate(this, function (){
                GameLauncher.ShowTips("");
                this.PlayGamePlot();
            }), null);
            GameLauncher.ShowTips("");
            this.PlayGamePlot();
        },
        PlayGamePlot: function (){
            ScreenMaskManager.FadeOut($CreateAnonymousDelegate(this, function (){
                GameLauncher.CloseLauncherView();
                UnityEngine.Screen.set_sleepTimeout(-1 /* SleepTimeout.NeverSleep */);
                GameDebuger.TODO("var plot = DataCache.getDtoByCls<Plot>(1);\n\t\t\t\tif (plot != null)\n\t\t\t\t{\n\t\t\t\t\tvar playerDto = new PlayerDto();\n\t\t\t\t\tplayerDto.id = 1001;\n                    playerDto.nickname = \'明月\';\n\t\t\t\t\tplayerDto.grade = 1;\n\t\t\t\t\tplayerDto.factionId = 5;\n\t\t\t\t\tplayerDto.charactorId = 4;\n\n\t\t\t\t\tModelManager.Player.SetupTempPlayerDto(playerDto);\n\n\t\t\t\t\tGamePlotManager.Instance.PlayPlot(plot);\n\t\t\t\t}\n                else ");
                this.InitSPSdk();
            }), 0, 0.3);
        },
        InitSPSdk: function (){
            TalkingDataHelper.OnEventSetp$$String("GameAccountLogin/InitSPSdk");
            GameLauncher.ShowTips("初始化SDK...");
            SPSdkManager.get_Instance().Init($CreateDelegate(this, this.OnInitSuccess));
        },
        OnInitSuccess: function (success){
            if (success){
                GameLauncher.CloseLauncherView();
                ProxyLoginModule.Open();
            }
            else {
                this.OpenRetryWindow("初始化SDK失败", $CreateDelegate(this, this.LoadDynamicServerList));
            }
        }
    }
};
JsTypes.push(AppGameManager);
var AppGameVersion = {
    fullname: "AppGameVersion",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AppGameVersion.startPlotMode = false;
            AppGameVersion.startMovieMode = false;
            AppGameVersion.sp_version = "0.1.0";
            AppGameVersion.ver = 1;
        },
        EnableStartPlotMode$$: "System.Boolean",
        get_EnableStartPlotMode: function (){
            return GameSetting.get_Release() && AppGameVersion.startPlotMode;
        },
        EnableStartMovieMode$$: "System.Boolean",
        get_EnableStartMovieMode: function (){
            return GameSetting.get_Release() && AppGameVersion.startMovieMode;
        },
        SpVersionCode$$: "System.Int32",
        get_SpVersionCode: function (){
            return GameSetting.ParseVersionCode(AppGameVersion.sp_version);
        },
        BundleVersion$$: "System.String",
        get_BundleVersion: function (){
            return AppGameVersion.sp_version;
        },
        ShortBundleVersion$$: "System.String",
        get_ShortBundleVersion: function (){
            return AppGameVersion.sp_version;
        },
        BundleVersionCode$$: "System.Int32",
        get_BundleVersionCode: function (){
            return AppGameVersion.ver;
        },
        ShowVersion$$: "System.String",
        get_ShowVersion: function (){
            var channelVersionStr = (GameSetting.get_IsOriginWinPlatform()) ? "" : "_" + GameSetting.Channel;
            if (GameSetting.get_Release()){
                return "v" + AppGameVersion.get_BundleVersion() + channelVersionStr;
            }
            return "v" + AppGameVersion.sp_version + "." + AppGameVersion.ver + channelVersionStr + "_debug";
        },
        GetBanhao: function (){
            return "";
        },
        CheckFunctionSupport: function (supportVersion, msg){
            return null;
            if (supportVersion > FrameworkVersion.ver){
                return System.String.IsNullOrEmpty(msg) ? "请使用最新版本使用完整功能" : msg;
            }
            else {
                return null;
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppGameVersion);
var AgencyPlatform = {
    fullname: "AgencyPlatform",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AgencyPlatform.Channel_Appstore = "appstore";
            AgencyPlatform.Channel_cilugame = "nucleus";
            AgencyPlatform.Channel_demi = "demi";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AgencyPlatform);
var ChangeSkinHelper = {
    fullname: "ChangeSkinHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        ChangeAtlas: function (sprite, newAtlas, makePixelPerfect, check){
            if (UnityEngine.Object.op_Inequality(sprite, null) && UnityEngine.Object.op_Inequality(newAtlas, null)){
                var canChange = true;
                if (check){
                    if (newAtlas.GetSprite(sprite.get_spriteName()) == null){
                        canChange = false;
                    }
                }
                if (canChange){
                    sprite.set_atlas(newAtlas);
                    if (makePixelPerfect){
                        sprite.MakePixelPerfect();
                    }
                }
            }
        },
        ChangeTexture: function (tex, res, makePixelPerfect){
            if (UnityEngine.Object.op_Inequality(tex, null) && UnityEngine.Object.op_Inequality(res, null)){
                tex.set_mainTexture(res);
                if (makePixelPerfect){
                    tex.MakePixelPerfect();
                }
            }
        },
        ChangeMiniMapSkin: function (controller){
            GameDebuger.TODO("if (controller != null)\n        {\n            switch (GameSetting.Game)\n            {\n                case GameSetting.GameType.Yhxj:\n                    {\n                        YhxjSkin.ChangeMiniMapSkin(controller);\n                        break;\n                    }\n            }\n        }");
        },
        ChangeMiniWorldMapSkin: function (controller){
            GameDebuger.TODO("if (controller != null)\n        {\n            switch (GameSetting.Game)\n            {\n                case GameSetting.GameType.Yhxj:\n                    {\n                        YhxjSkin.ChangeMiniWorldMapSkin(controller);\n                        break;\n                    }\n                default:\n                    {\n                        break;\n                    }\n            }\n        }");
        },
        GetWorldMapTexResName: function (defaultName){
            GameDebuger.TODO("switch (GameSetting.Game)\n        {\n            case GameSetting.GameType.Yhxj:\n                {\n                    defaultName = YhxjSkin.WorldMap_Yhxj;\n                    break;\n                }\n        }");
            return defaultName;
        },
        GetGoldCellResName: function (defaultName){
            GameDebuger.TODO("switch (GameSetting.Game)\n        {\n            case GameSetting.GameType.Yhxj:\n                {\n                    defaultName = YhxjSkin.GoldCell_Yhxj;\n                    break;\n                }\n        }");
            return defaultName;
        },
        ChangeMainUISkin: function (controller){
            GameDebuger.TODO("if (controller != null)\n        {\n            switch (GameSetting.GameType)\n            {\n                case GameSetting.GameType:\n                    {\n                        YhxjSkin.ChangeMainUISkin(controller);\n                        break;\n                    }\n            }\n        }");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ChangeSkinHelper);
var DefaultSkin = {
    fullname: "DefaultSkin",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DefaultSkin);
var YhxjSkin = {
    fullname: "YhxjSkin",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            YhxjSkin.WorldMapUIAtlas_Yhxj = "WorldMapUIAtlas_Yhxj";
            YhxjSkin.WorldMap_Yhxj = "WorldMap_Yhxj";
            YhxjSkin.GoldCell_Yhxj = "GoldCell_Yhxj";
            YhxjSkin.MainUIAltas_Yhxj = "MainUIAltas_Yhxj";
        },
        ChangeMiniWorldMapSkin: function (controller){
            if (UnityEngine.Object.op_Inequality(controller, null)){
                var atlas = YhxjSkin.GetWorldMapUIAtlas_Yhxj();
            }
        },
        ChangeMainUISkin: function (controller){
            if (UnityEngine.Object.op_Inequality(controller, null)){
                var mainUIAtlas = YhxjSkin.GetMainUIAltas_Yhxj();
                var sprites = controller.GetComponentsInChildren$1$$Boolean(UISprite.ctor, true);
                for (var i = 0; i < sprites.length; i++){
                    ChangeSkinHelper.ChangeAtlas(sprites[i], mainUIAtlas, true, true);
                }
            }
        },
        GetWorldMapUIAtlas_Yhxj: function (){
            return (As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type("WorldMapUIAtlas_Yhxj" /* WorldMapUIAtlas_Yhxj */, 11, null), UnityEngine.GameObject.ctor)).GetComponent$1(UIAtlas.ctor);
        },
        GetMainUIAltas_Yhxj: function (){
            return (As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type("MainUIAltas_Yhxj" /* MainUIAltas_Yhxj */, 11, null), UnityEngine.GameObject.ctor)).GetComponent$1(UIAtlas.ctor);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(YhxjSkin);
var AutoCacherHelper = {
    fullname: "AutoCacherHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        InitUIList: function (pUIList){
            pUIList.Value = new System.Collections.Generic.List$1.ctor(UnityEngine.GameObject.ctor);
        },
        InitUICacheList: function (pCachedUIList){
            pCachedUIList.Value = new System.Collections.Generic.List$1.ctor(UnityEngine.GameObject.ctor);
        },
        InitUIControllerCacheList: function (pCachedUIList){
            pCachedUIList.Value = new System.Collections.Generic.List$1.ctor(IViewController.ctor);
        },
        AddToUIList: function (pGo, pUIList){
            CollectionExtension.AddIfNotExist$1$$List$1$$T(UnityEngine.GameObject.ctor, pUIList, pGo);
        },
        AddToUICacheList: function (pGo, pCachedUIList){
            CollectionExtension.AddIfNotExist$1$$List$1$$T(UnityEngine.GameObject.ctor, pCachedUIList, pGo);
        },
        AddToUIControllerCacheList: function (pMonolessViewController, pCachedUIList){
            CollectionExtension.AddIfNotExist$1$$List$1$$T(IViewController.ctor, pCachedUIList, pMonolessViewController);
        },
        ClearUIList: function (pUIList){
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(UnityEngine.GameObject.ctor, pUIList.Value))
                return;
            var tNewList = pUIList.Value.ToArray();
            for (var tCounter = 0,tLen = tNewList.length; tCounter < tLen; tCounter++){
                AutoCacherHelper.RemoveUI(tNewList[tCounter], pUIList);
            }
            tNewList = null;
            pUIList.Value.Clear();
        },
        RemoveUI: function (ui, pUIList){
            if (UnityEngine.Object.op_Equality(null, ui))
                return;
            CollectionExtension.RemoveItem$1(UnityEngine.GameObject.ctor, pUIList.Value, ui);
            UnityEngine.Object.DestroyObject$$Object(ui);
        },
        DespawnUIList: function (pCachedUIList){
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(UnityEngine.GameObject.ctor, pCachedUIList.Value))
                return;
            var tNewList = pCachedUIList.Value.ToArray();
            for (var tCounter = 0,tLen = tNewList.length; tCounter < tLen; tCounter++){
                AutoCacherHelper.DespawnUI(tNewList[tCounter], pCachedUIList);
            }
            tNewList = null;
            pCachedUIList.Value.Clear();
        },
        DespawnUI: function (pGo, pCachedUIList){
            if (UnityEngine.Object.op_Equality(null, pGo))
                return;
            CollectionExtension.RemoveItem$1(UnityEngine.GameObject.ctor, pCachedUIList.Value, pGo);
            AssetPipeline.ResourcePoolManager.get_Instance().DespawnUI(pGo);
        },
        AddController$2: function (T, V, module, mControllerCachedUIList){
            if (UnityEngine.Object.op_Equality(module, null)){
                GameDebuger.LogError("module is null", null);
                return null;
            }
            var ctrl = MonolessViewController$1.Create$1(T, module);
            AutoCacherHelper.AddToUIControllerCacheList(ctrl, mControllerCachedUIList);
            return ctrl;
        },
        AddCachedChild$$GameObject$$String$$List$1$GameObject: function (pParent, pPrefabName, pCachedUIList){
            if (System.String.IsNullOrEmpty(pPrefabName)){
                GameDebuger.LogError("AddChild failed , pPrefabName is IsNullOrEmpty !", null);
                return null;
            }
            var tGameObject = AutoCacherHelper.SpawnUIGo(pPrefabName, pCachedUIList, null);
            if (UnityEngine.Object.op_Equality(null, tGameObject))
                return null;
            tGameObject = GameObjectExt.AddPoolChild(pParent, tGameObject, 0, 0, 0);
            GameObjectExt.ResetPanelsDepth$$GameObject$$GameObject(tGameObject, pParent);
            return tGameObject;
        },
        AddChild$2$$GameObject$$String$$List$1$GameObject$$List$1$IViewController: function (T, V, pParent, pPrefabName, mUIList, mControllerCachedUIList){
            if (System.String.IsNullOrEmpty(pPrefabName)){
                GameDebuger.LogError("AddChild failed , pPrefabName is IsNullOrEmpty !", null);
                return null;
            }
            var module = GameObjectExt.AddChildAndAdjustDepth$$GameObject$$String(pParent, pPrefabName);
            var pMonolessViewController = UnityEngine.Object.op_Equality(module, null) ? null : MonolessViewController$1.Create$1(T, module);
            AutoCacherHelper.AddToUIList(module, mUIList);
            AutoCacherHelper.AddToUIControllerCacheList(pMonolessViewController, mControllerCachedUIList);
            return pMonolessViewController;
        },
        AddChild$2$$GameObject$$GameObject$$List$1$GameObject$$List$1$IViewController: function (T, V, pParent, pPrefab, mUIList, mControllerCachedUIList){
            var module = GameObjectExt.AddChildAndAdjustDepth$$GameObject$$GameObject(pParent, pPrefab);
            var pMonolessViewController = UnityEngine.Object.op_Equality(module, null) ? null : MonolessViewController$1.Create$1(T, module);
            AutoCacherHelper.AddToUIList(module, mUIList);
            AutoCacherHelper.AddToUIControllerCacheList(pMonolessViewController, mControllerCachedUIList);
            return pMonolessViewController;
        },
        RemoveChild$2: function (T, V, ctrl, mUIList, mControllerCachedUIList){
            if (ctrl == null){
                GameDebuger.LogError("ctrl is null", null);
                return;
            }
            AutoCacherHelper.DespawnUIController(ctrl, mControllerCachedUIList);
            AutoCacherHelper.RemoveUI(ctrl.get_gameObject(), mUIList);
            UnityEngine.Object.Destroy$$Object(ctrl.get_gameObject());
        },
        AddCachedChild$2$$GameObject$$String$$List$1$GameObject$$List$1$IViewController: function (T, V, pParent, pPrefabName, mCachedUIList, mControllerCachedUIList){
            var module = AutoCacherHelper.AddCachedChild$$GameObject$$String$$List$1$GameObject(pParent, pPrefabName, mCachedUIList);
            var ctrl = UnityEngine.Object.op_Equality(module, null) ? null : MonolessViewController$1.Create$1(T, module);
            AutoCacherHelper.AddToUIControllerCacheList(ctrl, mControllerCachedUIList);
            return ctrl;
        },
        RemoveCachedChild$2: function (T, V, ctrl, mCachedUIList, mControllerCachedUIList){
            if (ctrl == null){
                GameDebuger.LogError("ctrl is null", null);
                return;
            }
            AutoCacherHelper.DespawnUIController(ctrl, mControllerCachedUIList);
            AutoCacherHelper.DespawnUI(ctrl.get_gameObject(), mCachedUIList);
        },
        SpawnUITrans: function (pPrefabName, pCachedUIList){
            var tGameObject = AutoCacherHelper.SpawnUIGo(pPrefabName, pCachedUIList, null);
            return UnityEngine.Object.op_Equality(null, tGameObject) ? null : tGameObject.get_transform();
        },
        SpawnUIGo: function (pPrefabName, pCachedUIList, parent){
            if (System.String.IsNullOrEmpty(pPrefabName)){
                GameDebuger.LogError("SpawnUIGo failed , pPrefabName is null !", null);
                return null;
            }
            var tGameObject = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo(pPrefabName, parent);
            AutoCacherHelper.AddToUICacheList(tGameObject, pCachedUIList);
            return tGameObject;
        },
        DespawnUIControllerList: function (pCachedUIList){
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(IViewController.ctor, pCachedUIList.Value)){
                return;
            }
            CollectionExtension.ForEach$1(IViewController.ctor, pCachedUIList.Value, function (s){
                s.Dispose();
            });
            pCachedUIList.Value.Clear();
        },
        DespawnUIController: function (pGo, pCachedUIList){
            if (null == pGo)
                return;
            pGo.Dispose();
            CollectionExtension.RemoveItem$1(IViewController.ctor, pCachedUIList.Value, pGo);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AutoCacherHelper);
var BaseView = {
    fullname: "BaseView",
    baseTypeName: "System.Object",
    staticDefinition: {
        IsViewDestroy: function (view){
            return view == null || UnityEngine.Object.op_Equality(view.get_gameObject(), null);
        },
        Create$1$$Transform: function (T, root){
            var view = (function (){
                var $v1 = new T();
                $v1._gameObject = root.get_gameObject();
                return $v1;
            }).call(this);
            view.Setup();
            return view;
        },
        Create$1$$GameObject: function (T, root){
            var view = (function (){
                var $v2 = new T();
                $v2._gameObject = root;
                return $v2;
            }).call(this);
            view.Setup();
            return view;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._gameObject = null;
            System.Object.ctor.call(this);
        },
        gameObject$$: "UnityEngine.GameObject",
        get_gameObject: function (){
            return this._gameObject;
        },
        transform$$: "UnityEngine.Transform",
        get_transform: function (){
            return this.get_gameObject().get_transform();
        },
        Setup: function (){
            this.InitElementBinding();
            this.LateElementBinding();
            this.InitReactiveEvents();
            this.CustomInitReactiveEvents();
        },
        InitReactiveEvents: function (){
        },
        CustomInitReactiveEvents: function (){
        },
        InitElementBinding: function (){
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        ClearReactiveEvents: function (){
        },
        CustomClearReactiveEvents: function (){
        },
        Dispose: function (){
            this.ClearReactiveEvents();
            this.CustomClearReactiveEvents();
            this.OnDispose();
        }
    }
};
JsTypes.push(BaseView);
var BaseViewExt = {
    fullname: "BaseViewExt",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetComponentsInChildren$1: function (T, pBaseView, pIncludeInactive){
            if (null == pBaseView || UnityEngine.Object.op_Equality(null, pBaseView.get_gameObject())){
                GameDebuger.LogError("GetComponentsInChildren failed for null == pBaseView or null == pBaseView.gameObject", null);
                return null;
            }
            return pBaseView.get_gameObject().GetComponentsInChildren$1$$Boolean(T, pIncludeInactive);
        },
        GetComponent$1: function (T, pBaseView){
            if (null == pBaseView){
                GameDebuger.LogError("GetComponentsInChildren failed for null == pBaseView !", null);
                return null;
            }
            if (UnityEngine.Object.op_Equality(null, pBaseView.get_gameObject())){
                GameDebuger.LogError("GetComponentsInChildren failed for null == pBaseView.gameObject !", null);
                return null;
            }
            return pBaseView.get_gameObject().GetComponent$1(T);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BaseViewExt);
var ContainerController$1 = {
    fullname: "ContainerController$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        StaticDespawn$1: function (U, controller){
            for (var i = 0; i < controller.get_ItemList().get_Count(); i++){
                var c = controller.get_ItemList().get_Item$$Int32(i);
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnUI(c.get_gameObject());
                c.Dispose();
            }
            controller.get_ItemList().Clear();
            controller.Dispose();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this._hasSetup = false;
            this._itemList = new System.Collections.Generic.List$1.ctor(this.T);
            this._useCount = 0;
            System.Object.ctor.call(this);
        },
        ItemList$$: "System.Collections.Generic.List`1[[`0]]",
        get_ItemList: function (){
            return this._itemList;
        },
        CurrentItem$$: "`0",
        get_CurrentItem: function (){
            return this._useCount > 0 ? this._itemList.get_Item$$Int32(this._useCount - 1) : null;
        },
        UseCount$$: "System.Int32",
        get_UseCount: function (){
            return this._useCount;
        },
        Setup: function (){
            if (!this._hasSetup){
                this._hasSetup = true;
                this.Init();
            }
        },
        Init: function (){
            this._useCount = 0;
        },
        Dispose: function (){
            if (this._hasSetup){
                this._hasSetup = false;
                this.OnDispose();
            }
        },
        OnDispose: function (){
            for (var i = 0; i < this._itemList.get_Count(); i++){
                UnityEngine.Object.Destroy$$Object(this._itemList.get_Item$$Int32(i).get_gameObject());
            }
            this._itemList.Clear();
            this._useCount = 0;
        },
        AddItem: function (index, item){
            if (!this.IsUseCache(index)){
                if (item == null){
                    return false;
                }
                else {
                    this._itemList.Add(item);
                    this._useCount++;
                    return true;
                }
            }
            else {
                if (item != null){
                    return false;
                }
                else {
                    this._itemList.get_Item$$Int32(index).get_gameObject().SetActive(true);
                    this._useCount++;
                    return true;
                }
            }
        },
        AddItemByPool: function (index, path, parent){
            if (!this.IsUseCache(index)){
                var go = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo(path, parent);
                var controller = GameObjectExt.GetMissingComponent$1(this.T, go);
                this.AddItem(index, controller);
            }
            else {
                this.AddItem(index, Default(this.T));
            }
        },
        IsUseCache: function (index){
            return index < this._itemList.get_Count();
        },
        StartAdding: function (){
            this._useCount = 0;
        },
        EndAdding: function (){
            for (var i = this._useCount; i < this._itemList.get_Count(); i++){
                this._itemList.get_Item$$Int32(i).get_gameObject().SetActive(false);
            }
        },
        DeactiveItemList: function (){
            this.StartAdding();
            this.EndAdding();
        }
    }
};
JsTypes.push(ContainerController$1);
var IPoolController = {
    fullname: "IPoolController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IPoolController);
var IViewController = {
    fullname: "IViewController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IViewController);
var MonoAutoCacher = {
    fullname: "MonoAutoCacher",
    baseTypeName: "MonoController",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mCachedUIList = null;
            this.mControllerCachedUIList = null;
            this.mUIList = null;
            this.mCDTaskManager = null;
            MonoController.ctor.call(this);
        },
        InitUICacheList: function (){
            (function (){
                var $1 = $Ref(this, "mUIList");
                var $res = AutoCacherHelper.InitUIList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $res = AutoCacherHelper.InitUICacheList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.InitUIControllerCacheList($1);
                return $res;
            }).call(this);
        },
        DespawnUIList: function (){
            (function (){
                var $1 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.DespawnUIControllerList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $res = AutoCacherHelper.DespawnUIList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mUIList");
                var $res = AutoCacherHelper.ClearUIList($1);
                return $res;
            }).call(this);
            this.DisposeCDTaskManager();
        },
        AddCachedChild$$GameObject$$String: function (pParent, pPrefabName){
            return (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $res = AutoCacherHelper.AddCachedChild$$GameObject$$String$$List$1$GameObject(pParent, pPrefabName, $1);
                return $res;
            }).call(this);
        },
        AddChild$$GameObject$$String$$String: function (pParent, pPrefabName, nameStr){
            var tPrefab = AssetPipeline.ResourcePoolManager.get_Instance().LoadUI(pPrefabName);
            if (UnityEngine.Object.op_Inequality(tPrefab, null) && !System.String.IsNullOrEmpty(nameStr)){
                tPrefab.set_name(nameStr);
            }
            return GameObjectExt.AddChildAndAdjustDepth$$GameObject$$GameObject(pParent, tPrefab);
        },
        AddController$2: function (T, V, module){
            return (function (){
                var $1 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.AddController$2(T, V, module, $1);
                return $res;
            }).call(this);
        },
        AddChild$2$$GameObject$$String$$String: function (T, V, pParent, pPrefabName, nameStr){
            var ctrl = (function (){
                var $1 = $Ref(this, "mUIList");
                var $2 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.AddChild$2$$GameObject$$String$$List$1$GameObject$$List$1$IViewController(T, V, pParent, pPrefabName, $1, $2);
                return $res;
            }).call(this);
            if (ctrl != null && !System.String.IsNullOrEmpty(nameStr)){
                ctrl.get_gameObject().set_name(nameStr);
            }
            return ctrl;
        },
        AddChild$2$$GameObject$$GameObject$$String: function (T, V, pParent, pPrefab, nameStr){
            var ctrl = (function (){
                var $1 = $Ref(this, "mUIList");
                var $2 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.AddChild$2$$GameObject$$GameObject$$List$1$GameObject$$List$1$IViewController(T, V, pParent, pPrefab, $1, $2);
                return $res;
            }).call(this);
            if (ctrl != null && !System.String.IsNullOrEmpty(nameStr)){
                ctrl.get_gameObject().set_name(nameStr);
            }
            return ctrl;
        },
        RemoveChild$2: function (T, V, ctrl){
            (function (){
                var $1 = $Ref(this, "mUIList");
                var $2 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.RemoveChild$2(T, V, ctrl, $1, $2);
                return $res;
            }).call(this);
        },
        AddCachedChild$2$$GameObject$$String$$String: function (T, V, pParent, pPrefabName, nameStr){
            var ctrl = (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $2 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.AddCachedChild$2$$GameObject$$String$$List$1$GameObject$$List$1$IViewController(T, V, pParent, pPrefabName, $1, $2);
                return $res;
            }).call(this);
            if (ctrl != null && !System.String.IsNullOrEmpty(nameStr)){
                ctrl.get_gameObject().set_name(nameStr);
            }
            return ctrl;
        },
        RemoveCachedChild$2: function (T, V, ctrl){
            (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $2 = $Ref(this, "mControllerCachedUIList");
                var $res = AutoCacherHelper.RemoveCachedChild$2(T, V, ctrl, $1, $2);
                return $res;
            }).call(this);
        },
        CDTaskManager$$: "CDTaskManager",
        get_CDTaskManager: function (){
            if (null == this.mCDTaskManager)
                this.mCDTaskManager = new CDTaskManager.ctor();
            return this.mCDTaskManager;
        },
        DisposeCDTaskManager: function (){
            if (null != this.mCDTaskManager){
                this.mCDTaskManager.Dispose();
                this.mCDTaskManager = null;
            }
        },
        AddOrResetCDTask: function (taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale){
            return this.get_CDTaskManager().AddOrResetCDTask(taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale);
        },
        RemoveCDTask: function (taskName){
            this.get_CDTaskManager().RemoveCDTask(taskName);
        }
    }
};
JsTypes.push(MonoAutoCacher);
var MonoController = {
    fullname: "MonoController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IViewController", "IPoolController"],
    Kind: "Class",
    definition: {
        ctor: function (){
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Dispose: function (){
        },
        Spawn: function (){
        },
        Despawn: function (){
        }
    }
};
JsTypes.push(MonoController);
var MonolessAutoCacher = {
    fullname: "MonolessAutoCacher",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IViewController"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mCachedUIList = null;
            this.mCachedUIControllerList = null;
            this.mUIList = null;
            this.mCDTaskManager = null;
            System.Object.ctor.call(this);
        },
        InitView: function (){
        },
        OnDispose: function (){
        },
        Dispose: function (){
        },
        RegistCustomEvent: function (){
        },
        InitUICacheList: function (){
            (function (){
                var $1 = $Ref(this, "mUIList");
                var $res = AutoCacherHelper.InitUIList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $res = AutoCacherHelper.InitUICacheList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.InitUIControllerCacheList($1);
                return $res;
            }).call(this);
        },
        DespawnUIList: function (){
            (function (){
                var $1 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.DespawnUIControllerList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $res = AutoCacherHelper.DespawnUIList($1);
                return $res;
            }).call(this);
            (function (){
                var $1 = $Ref(this, "mUIList");
                var $res = AutoCacherHelper.ClearUIList($1);
                return $res;
            }).call(this);
        },
        AddController$2: function (T, V, module){
            return (function (){
                var $1 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.AddController$2(T, V, module, $1);
                return $res;
            }).call(this);
        },
        AddCachedChild$$GameObject$$String: function (pParent, pPrefabName){
            return (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $res = AutoCacherHelper.AddCachedChild$$GameObject$$String$$List$1$GameObject(pParent, pPrefabName, $1);
                return $res;
            }).call(this);
        },
        AddChild$2: function (T, V, pParent, pPrefabName, nameStr){
            var ctrl = (function (){
                var $1 = $Ref(this, "mUIList");
                var $2 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.AddChild$2$$GameObject$$String$$List$1$GameObject$$List$1$IViewController(T, V, pParent, pPrefabName, $1, $2);
                return $res;
            }).call(this);
            if (ctrl != null && !System.String.IsNullOrEmpty(nameStr))
                ctrl.get_gameObject().set_name(nameStr);
            return ctrl;
        },
        RemoveChild$2: function (T, V, ctrl){
            (function (){
                var $1 = $Ref(this, "mUIList");
                var $2 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.RemoveChild$2(T, V, ctrl, $1, $2);
                return $res;
            }).call(this);
        },
        AddCachedChild$2$$GameObject$$String$$String: function (T, V, pParent, pPrefabName, nameStr){
            var ctrl = (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $2 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.AddCachedChild$2$$GameObject$$String$$List$1$GameObject$$List$1$IViewController(T, V, pParent, pPrefabName, $1, $2);
                return $res;
            }).call(this);
            if (ctrl != null && !System.String.IsNullOrEmpty(nameStr))
                ctrl.get_gameObject().set_name(nameStr);
            return ctrl;
        },
        RemoveCachedChild$2: function (T, V, ctrl){
            (function (){
                var $1 = $Ref(this, "mCachedUIList");
                var $2 = $Ref(this, "mCachedUIControllerList");
                var $res = AutoCacherHelper.RemoveCachedChild$2(T, V, ctrl, $1, $2);
                return $res;
            }).call(this);
        },
        CDTaskManager$$: "CDTaskManager",
        get_CDTaskManager: function (){
            if (null == this.mCDTaskManager)
                this.mCDTaskManager = new CDTaskManager.ctor();
            return this.mCDTaskManager;
        },
        DisposeCDTaskManager: function (){
            if (null != this.mCDTaskManager){
                this.mCDTaskManager.Dispose();
                this.mCDTaskManager = null;
            }
        },
        AddOrResetCDTask: function (taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale){
            return this.get_CDTaskManager().AddOrResetCDTask(taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale);
        },
        RemoveCDTask: function (taskName){
            this.get_CDTaskManager().RemoveCDTask(taskName);
        }
    }
};
JsTypes.push(MonolessAutoCacher);
var MonolessViewController$1 = {
    fullname: "MonolessViewController$1",
    baseTypeName: "MonolessAutoCacher",
    staticDefinition: {
        Create$1: function (T, go){
            if (UnityEngine.Object.op_Equality(go, null))
                return null;
            var t = (function (){
                var $v3 = new T();
                $v3._setupStartTime = UnityEngine.Time.get_realtimeSinceStartup();
                $v3._gameObject = go;
                $v3._transform = go.get_transform();
                return $v3;
            }).call(this);
            t.Setup();
            return t;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1){
            this.T1 = T1;
            this._view = null;
            this._gameObject = null;
            this._transform = null;
            this._setupStartTime = 0;
            MonolessAutoCacher.ctor.call(this);
        },
        gameObject$$: "UnityEngine.GameObject",
        get_gameObject: function (){
            return this._gameObject;
        },
        transform$$: "UnityEngine.Transform",
        get_transform: function (){
            return this._transform;
        },
        View$$: "`0",
        get_View: function (){
            return this._view;
        },
        LogSetupTime: function (){
        },
        Setup: function (){
            this.InitUICacheList();
            this._view = BaseView.Create$1$$Transform(this.T1, this.get_transform());
            this.AfterInitView();
            this.InitReactiveEvents();
            this.RegistCustomEvent();
        },
        AfterInitView: function (){
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        },
        RemoveCustomEvent: function (){
        },
        Dispose: function (){
            this.ClearReactiveEvents();
            this.RemoveCustomEvent();
            this.OnDispose();
            this.DespawnUIList();
            if (this._view != null){
                this._view.Dispose();
                this._view = null;
            }
            this.get_transform().set_parent(null);
            MonolessAutoCacher.commonPrototype.Dispose.call(this);
        }
    }
};
JsTypes.push(MonolessViewController$1);
var MonoViewController$1 = {
    fullname: "MonoViewController$1",
    baseTypeName: "MonoAutoCacher",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this._view = null;
            this._setupStartTime = 0;
            MonoAutoCacher.ctor.call(this);
        },
        View$$: "`0",
        get_View: function (){
            return this._view;
        },
        LogSetupTime: function (){
            GameDebuger.Log(System.String.Format$$String$$Object$$Object("启动 {0} 耗时：{1}", this.get_name(), UnityEngine.Time.get_realtimeSinceStartup() - this._setupStartTime), null);
        },
        Awake: function (){
            if (this._view != null){
                UnityEngine.Debug.LogError$$Object("流程不对，查一下什么地方调用了");
                return;
            }
            this.InitUICacheList();
            this.InitData();
            this._setupStartTime = UnityEngine.Time.get_realtimeSinceStartup();
            this._view = BaseView.Create$1$$Transform(this.T, this.get_transform());
            this.AfterInitView();
            this.RegistEvent();
            this.RegistCustomEvent();
            this.InitViewWithStream();
        },
        InitViewWithStream: function (){
        },
        InitData: function (){
        },
        AfterInitView: function (){
        },
        Dispose: function (){
            this.OnDispose();
            this.DespawnUIList();
            if (this._view != null){
                this._view.Dispose();
                this._view = null;
            }
            UnityEngine.Object.DestroyImmediate$$Object(this);
        },
        OnDispose: function (){
        },
        RegistEvent: function (){
        },
        RegistCustomEvent: function (){
        }
    }
};
JsTypes.push(MonoViewController$1);
var UIDragDropItemCallbackable = {
    fullname: "UIDragDropItemCallbackable",
    baseTypeName: "UIDragDropItem",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mDragStartPosition = UnityEngine.Vector3.get_zero();
            this.OnDragDropReleaseHandler = null;
            UIDragDropItem.ctor.call(this);
        },
        OnDragDropStart: function (){
            this.mDragStartPosition = this.get_transform().get_position();
            UIDragDropItem.commonPrototype.OnDragDropStart.call(this);
        },
        OnDragDropRelease: function (surface){
            UIDragDropItem.commonPrototype.OnDragDropRelease.call(this, surface);
            if (null != this.OnDragDropReleaseHandler)
                this.OnDragDropReleaseHandler(surface, this.mDragStartPosition);
        }
    }
};
JsTypes.push(UIDragDropItemCallbackable);
var FRPBaseController$3 = {
    fullname: "FRPBaseController$3",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (ViewClass, IView, IData){
            this.ViewClass = ViewClass;
            this.IView = IView;
            this.IData = IData;
            MonoViewController$1.ctor.call(this, this.ViewClass);
        },
        View$$: "`1",
        get_View: function (){
            return this._view;
        }
    }
};
JsTypes.push(FRPBaseController$3);
var ICloseableView = {
    fullname: "ICloseableView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ICloseableView);
var FRPBaseView$3 = {
    fullname: "FRPBaseView$3",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (ViewClass, IView, IData){
            this.ViewClass = ViewClass;
            this.IView = IView;
            this.IData = IData;
            BaseView.ctor.call(this);
        }
    }
};
JsTypes.push(FRPBaseView$3);
var GameDebugConsole = {
    fullname: "GameDebugConsole",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            GameDebugConsole.mInstance = null;
        },
        Setup: function (){
            GameDebugConsole.CreateInstance();
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(GameDebugConsole.mInstance, null)){
                UnityEngine.Object.Destroy$$Object(GameDebugConsole.mInstance.get_gameObject());
                GameDebugConsole.mInstance = null;
            }
        },
        CreateInstance: function (){
            if (UnityEngine.Object.op_Equality(GameDebugConsole.mInstance, null)){
                var go = new UnityEngine.GameObject.ctor$$String("_GameDebugConsole");
                GameDebugConsole.mInstance = go.AddComponent$1(GameDebugConsole.ctor);
                UnityEngine.Object.DontDestroyOnLoad(go);
            }
        },
        Log: function (condition, stackTrace, type){
            if (UnityEngine.Object.op_Inequality(GameDebugConsole.mInstance, null)){
                GameDebugConsole.mInstance.AddLog(condition, stackTrace, type);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.consoleRect = new UnityEngine.Rect.ctor();
            this._consoleScrollPos = new UnityEngine.Vector2.ctor();
            this._hide = false;
            this._logScrollPos = new UnityEngine.Vector2.ctor();
            this._logBuilder = null;
            this.fpsFrequency = 0.5;
            this.nbDecimal = 1;
            this.accum = 0;
            this.frames = 0;
            this.fpsColor = UnityEngine.Color.get_white();
            this.sFPS = "";
            this.memoryFrequency = 5;
            this._freeMemory = 0;
            this._totalMemory = 0;
            this._useHeapSize = 0;
            this._monoUsedSize = 0;
            this._monoHeapSize = 0;
            this.socketColor = UnityEngine.Color.get_white();
            this._sendInfo = "";
            this._receiveInfo = "";
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        AddLog: function (condition, stackTrace, type){
            if (this._logBuilder != null){
                this._logBuilder.AppendFormat$$String$$Object$Array("{0} <{1}>\n{2}\n{3}\n", [System.DateTime.get_Now(), type, condition, stackTrace]);
            }
        },
        Start: function (){
            this.consoleRect = new UnityEngine.Rect.ctor$$Single$$Single$$Single$$Single(0, 0, UnityEngine.Screen.get_width() * 0.8, UnityEngine.Screen.get_height() * 0.8);
            this._logBuilder = new System.Text.StringBuilder.ctor$$Int32(1024);
            this.StartCoroutine$$IEnumerator(this.RefreshFPS());
            this.StartCoroutine$$IEnumerator(this.RefreshMemory());
            UnityEngine.Application.add_logMessageReceived($CreateDelegate(this, this.AddLog));
        },
        OnDestroy: function (){
            UnityEngine.Application.remove_logMessageReceived($CreateDelegate(this, this.AddLog));
        },
        Update: function (){
            this.accum += UnityEngine.Time.get_timeScale() / _jsComManager.dT;
            ++this.frames;
            this._sendInfo = System.String.Format$$String$$Object$$Object("SendCount: {0} SendBytes: {1}", HaConnector.TotalSendCount, AppStringHelper.FormatBytes(HaConnector.TotalSendBytes));
            this._receiveInfo = System.String.Format$$String$$Object$$Object("ReceiveCount: {0} ReceiveBytes: {1}", HaConnector.TotalReceiveCount, AppStringHelper.FormatBytes(HaConnector.TotalReceiveBytes));
            this.socketColor = SocketManager.IsOnLink ? UnityEngine.Color.get_green() : UnityEngine.Color.get_red();
        },
        OnGUI: function (){
            UnityEngine.GUILayout.BeginArea$$Rect(this.consoleRect);
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("Hide", [UnityEngine.GUILayout.Height(50)])){
                this._hide = !this._hide;
            }
            if (!this._hide){
                this._consoleScrollPos = UnityEngine.GUILayout.BeginScrollView$$Vector2$$GUIStyle(this._consoleScrollPos, UnityEngine.GUIStyle.op_Implicit("TextArea"));
                this.DrawFPSInfo();
                this.DrawMemoryInfo();
                this.DrawSocketInfo();
                this.DrawStopwatchInfo();
                this.DrawLogPanel();
                UnityEngine.GUILayout.EndScrollView();
            }
            UnityEngine.GUILayout.EndArea();
        },
        DrawLogPanel: function (){
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("Clear", new Array(0))){
                this._logBuilder.set_Length(0);
            }
            this._logScrollPos = UnityEngine.GUILayout.BeginScrollView$$Vector2$$GUIStyle$$GUILayoutOption$Array(this._logScrollPos, UnityEngine.GUIStyle.op_Implicit("TextArea"), [UnityEngine.GUILayout.Height(400)]);
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(this._logBuilder.toString(), new Array(0));
            UnityEngine.GUILayout.EndScrollView();
        },
        RefreshFPS: function*(){
            while (true){
                var fps = this.accum / this.frames;
                this.sFPS = fps.ToString$$String("f" + UnityEngine.Mathf.Clamp$$Int32$$Int32$$Int32(this.nbDecimal, 0, 10));
                this.fpsColor = (fps >= 30) ? UnityEngine.Color.get_green() : ((fps > 10) ? UnityEngine.Color.get_yellow() : UnityEngine.Color.get_red());
                this.accum = 0;
                this.frames = 0;
                yield(new UnityEngine.WaitForSeconds.ctor(this.fpsFrequency));
            }
        },
        DrawFPSInfo: function (){
            UnityEngine.GUI.set_color(this.fpsColor);
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(this.sFPS + " FPS", new Array(0));
            UnityEngine.GUI.set_color(UnityEngine.Color.get_white());
        },
        RefreshMemory: function*(){
            while (true){
                this._useHeapSize = UnityEngine.Profiler.get_usedHeapSize();
                this._monoUsedSize = UnityEngine.Profiler.GetMonoUsedSize();
                this._monoHeapSize = UnityEngine.Profiler.GetMonoHeapSize();
                this._freeMemory = BaoyugameSdk.getFreeMemory();
                this._totalMemory = BaoyugameSdk.getTotalMemory();
                yield(new UnityEngine.WaitForSeconds.ctor(this.memoryFrequency));
            }
        },
        DrawMemoryInfo: function (){
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(System.String.Format$$String$$Object("UseHeapSize : {0}", AppStringHelper.FormatBytes(this._useHeapSize)), new Array(0));
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(System.String.Format$$String$$Object("MonoUsedSize : {0}", AppStringHelper.FormatBytes(this._monoUsedSize)), new Array(0));
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(System.String.Format$$String$$Object("MonoHeapSize : {0}", AppStringHelper.FormatBytes(this._monoHeapSize)), new Array(0));
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(System.String.Format$$String$$Object("空闲内存 : {0}", AppStringHelper.FormatBytes(this._freeMemory)), new Array(0));
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(System.String.Format$$String$$Object("总内存 : {0}", AppStringHelper.FormatBytes(this._totalMemory)), new Array(0));
        },
        DrawSocketInfo: function (){
            UnityEngine.GUI.set_color(this.socketColor);
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(this._sendInfo, new Array(0));
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(this._receiveInfo, new Array(0));
            UnityEngine.GUI.set_color(UnityEngine.Color.get_white());
        },
        DrawStopwatchInfo: function (){
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("Dump Stopwatch Info", new Array(0))){
                this._logBuilder.AppendLine$$String(GameStopwatch.DumpAllInfo());
            }
        }
    }
};
JsTypes.push(GameDebugConsole);
var GameDebuger = {
    fullname: "GameDebuger",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameDebuger.debugIsOn = false;
            GameDebuger.DebugForExit = false;
            GameDebuger.DebugForLogout = false;
            GameDebuger.DebugForDisconnect = false;
            GameDebuger.Release = false;
            GameDebuger.Debug_PlayerId = 0;
            GameDebuger.openDebugLogOrange = false;
        },
        UpdateSetting: function (){
            GameDebuger.debugIsOn = CSGameDebuger.debugIsOn;
            GameDebuger.DebugForExit = CSGameDebuger.DebugForExit;
            GameDebuger.DebugForLogout = CSGameDebuger.DebugForLogout;
            GameDebuger.DebugForDisconnect = CSGameDebuger.DebugForDisconnect;
            GameDebuger.Release = CSGameDebuger.Release;
            GameDebuger.Debug_PlayerId = CSGameDebuger.Debug_PlayerId;
            GameDebuger.openDebugLogOrange = CSGameDebuger.openDebugLogOrange;
        },
        Log: function (message, color){
            if (!GameDebuger.debugIsOn && GameDebuger.Release)
                return;
            var log = message == null ? "Null" : message.toString();
            if (!System.String.IsNullOrEmpty(color))
                log = "<color=" + color + ">" + log + "</color>";
            UnityEngine.Debug.Log$$Object(log);
        },
        LogError: function (msg, context){
            UnityEngine.Debug.LogError$$Object$$Object(msg, context);
        },
        LogWarning: function (msg, context){
            UnityEngine.Debug.LogWarning$$Object$$Object(msg, context);
        },
        LogException: function (e, context){
            UnityEngine.Debug.LogException$$Exception$$Object(e, context);
        },
        LogBattleInfo: function (message){
            GameDebuger.Log(message, "orange");
        },
        SendExceptionForJS: function (log){
            UnityEngine.Debug.Log$$Object("SendExceptionForJS");
        },
        OrangeDebugLog: function (s){
            if (GameDebuger.openDebugLogOrange){
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("<color=orange> ## {0} ## </color>", s));
            }
        },
        AquaDebugLog: function (s){
            if (GameDebuger.openDebugLogOrange){
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("<color=aqua> ## {0} ## </color>", s));
            }
        },
        YellowDebugLog: function (s, b){
            if (GameDebuger.openDebugLogOrange || b){
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("<color=yellow> ## {0} ## </color>", s));
            }
        },
        Note: function (pParam){
            GameDebuger.Log(System.String.Format$$String$$Object("[Note]临时屏蔽，信息：\n{0}", pParam), null);
        },
        TODO: function (pParam){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameDebuger);
var GameEvent = {
    fullname: "GameEvent",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameEvent.BATTLE_FIGHT_CHOOSETARGETPET = new GameEvents.Event$1.ctor(MonsterController.ctor, "BATTLE_FIGHT_CHOOSETARGETPET");
            GameEvent.BATTLE_FIGHT_EXIT_BATTLE_WITHOUT_REPORT = new GameEvents.Event.ctor("BATTLE_FIGHT_EXITBATTLEWITHOUTREPORT");
            GameEvent.BATTLE_FIGHT_SET_READY_STATE = new GameEvents.Event$1.ctor(System.Boolean.ctor, "BATTLE_FIGHT_SETREADYSTATE");
            GameEvent.BATTLE_FIGHT_SETBATTLESTAT = new GameEvents.Event$1.ctor(BattleDemoModel.BattleSceneStat.ctor, "BATTLE_FIGHT_SETBATTLESTAT");
            GameEvent.BATTLE_FIGHT_EXITBATTLE = new GameEvents.Event.ctor("BATTLE_FIGHT_EXITBATTLE");
            GameEvent.BATTLE_FIGHT_CHECKGAMESTATE = new GameEvents.Event.ctor("BATTLE_FIGHT_CHECKGAMESTATE");
            GameEvent.BATTLE_FIGHT_REMOVEMONSTER = new GameEvents.Event$1.ctor(MonsterController.ctor, "BATTLE_FIGHT_REMOVEMONSTER");
            GameEvent.BATTLE_UI_UPDATE_POSITION = new GameEvents.Event$1.ctor(UnityEngine.Transform.ctor, "BATTLE_UI_UPDATE_POSITION");
            GameEvent.BATTLE_FIGHT_DESTROY = new GameEvents.Event.ctor("BATTLE_FIGHT_DESTROY");
            GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Int32.ctor, "BATTLE_FIGHT_SKILL_POINT_UPDATE");
            GameEvent.BATTLE_FIGHT_SKILL_POINT_ADD_TIME_UPDATE = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Int32.ctor, System.Boolean.ctor, "BATTLE_FIGHT_SKILL_POINT_ADD_TIME_UPDATE");
            GameEvent.BATTLE_FIGHT_ADD_TO_QUEUE_UI = new GameEvents.Event$1.ctor(AppDto.ActionQueueAddNotifyDto.ctor, "BATTLE_FIGHT_ADD_TO_QUEUE");
            GameEvent.BATTLE_FIGHT_REMOVE_FROM_QUEUE_UI = new GameEvents.Event$2.ctor(System.Int64.ctor, System.String.ctor, "BATTLE_FIGHT_REMOVE_FROM_QUEUE");
            GameEvent.BATTLE_FIGHT_VIDEOROUND = new GameEvents.Event$1.ctor(AppDto.VideoRound.ctor, "BATTLE_FIGHT_VIDEOROUND");
            GameEvent.BATTLE_FIGHT_UPDATE_REMAIN_TIME = new GameEvents.Event$2.ctor(System.String.ctor, System.Single.ctor, "BATTLE_FIGHT_UPDATE_REMAIN_TIME");
            GameEvent.BATTLE_FIGHT_BATTLE_ROUND_PLAY_FINISH = new GameEvents.Event$1.ctor(System.Int32.ctor, "BATTLE_FIGHT_BATTLE_ROUND_PLAY_FINISH");
            GameEvent.BATTLE_UI_SKILL_COMMON_CD = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Single.ctor, System.Single.ctor, "BATTLE_UI_SKILL_COMMON_CD");
            GameEvent.BATTLE_FIGHT_QUEUE_UPDATE = new GameEvents.Event$1.ctor(System.Int64.ctor, "BATTLE_FIGHT_QUEUE_UPDATE");
            GameEvent.BATTLE_UI_SHOW_TIP = new GameEvents.Event$1.ctor(System.String.ctor, "BATTLE_UI_SHOW_TIP");
            GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER = new GameEvents.Event$1.ctor(AppDto.ErrorResponse.ctor, "BATTLE_FIGHT_CHECK_GAME_OVER");
            GameEvent.BATTLE_UI_SELECTED_OPTION_ROLE_CHANGED = new GameEvents.Event$1.ctor(System.Int64.ctor, "BATTLE_UI_SELECTED_OPTION_ROLE_CHANGED");
            GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW = new GameEvents.Event.ctor("BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW");
            GameEvent.BATTLE_UI_EXIT_BATTLE = new GameEvents.Event.ctor("BATTLE_UI_EXIT_BATTLE");
            GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK = new GameEvents.Event.ctor("BATTLE_UI_ON_CANCEL_BUTTON_CLICK");
            GameEvent.BATTLE_UI_ACTION_REQUEST_SUCCESS = new GameEvents.Event.ctor("BATTLE_UI_ACTION_REQUEST_SUCCESS");
            GameEvent.BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL = new GameEvents.Event.ctor("BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL");
            GameEvent.BATTLE_UI_UPDATE_ACTION_TOTAL_DAMAGE_OR_HEAL = new GameEvents.Event$2.ctor(MonsterController.MonsterSide.ctor, System.Int32.ctor, "BATTLE_UI_UPDATE_ACTION_TOTAL_DAMAGE_OR_HEAL");
            GameEvent.BATTLE_UI_SHOW_FORMATION = new GameEvents.Event$1.ctor(MonsterController.MonsterSide.ctor, "BATTLE_UI_SHOW_FORMATION");
            GameEvent.BATTLE_UI_BTN_AUTO_CLICKED = new GameEvents.Event$1.ctor(System.Boolean.ctor, "BATTLE_UI_BTN_AUTO_CLICKED");
            GameEvent.BATTLE_UI_AUTO_BTN_STATUS_CHANGE = new GameEvents.Event$1.ctor(System.Boolean.ctor, "BATTLE_UI_AUTO_BTN_STATUS_CHANGE");
            GameEvent.BATTLE_UI_ONORDERLISTUPDATE = new GameEvents.Event.ctor("BATTLE_UI_ONORDERLISTUPDATE");
            GameEvent.BATTLE_UI_TARGET_SELECTED = new GameEvents.Event$4.ctor(MonsterController.ctor, AppDto.Skill.ctor, System.Boolean.ctor, System.Object.ctor, "BATTLE_UI_TARGET_SELECTED");
            GameEvent.BATTLE_FIGHT_RETREAT_BATTLE = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Collections.Generic.List$1.ctor, "BATTLE_FIGHT_RETREAT_BATTLE");
            GameEvent.BATTLE_UI_SP_UPDATED = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Int32.ctor, "BATTLE_UI_SP_UPDATED");
            GameEvent.BATTLE_FIGHT_MC_DEAD = new GameEvents.Event$1.ctor(MonsterController.ctor, "BATTLE_FIGHT_MC_DEAD");
            GameEvent.BATTLE_FIGHT_MONSTER_OPTION_STATE_CHANGED = new GameEvents.Event$2.ctor(System.Int64.ctor, MonsterOptionStateManager.MonsterOptionState.ctor, "BATTLE_FIGHT_MONSTER_OPTION_STATE_CHANGED");
            GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED = new GameEvents.Event$3.ctor(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, "BATTLE_FIGHT_BUFFED");
            GameEvent.BATTLE_UI_ON_OPTION_BUTTON_HIDE = new GameEvents.Event$2.ctor(System.Boolean.ctor, System.Boolean.ctor, "BATTLE_UI_ON_OPTION_BUTTON_HIDE");
            GameEvent.BATTLE_UI_SKILL_SELECTED = new GameEvents.Event$2.ctor(MonsterController.ctor, AppDto.Skill.ctor, "BATTLE_UI_SKILL_SELECTED");
            GameEvent.BATTLE_FIGHT_OPTION_TARGET_SELECTED = new GameEvents.Event$1.ctor(MonsterController.ctor, "BATTLE_FIGHT_OPTION_TARGET_SELECTED");
            GameEvent.BATTLE_UI_SHOW_TARGET_SELECT = new GameEvents.Event$2.ctor(AppDto.Skill.ctor, System.String.ctor, "BATTLE_UI_SHOW_TARGET_SELECT");
            GameEvent.BATTLE_UI_SHOW_SKILL_TIP = new GameEvents.Event$2.ctor(AppDto.Skill.ctor, System.Boolean.ctor, "BATTLE_UI_SHOW_SKILL_TIP");
            GameEvent.BATTLE_UI_CD_STATUS_UPDATE = new GameEvents.Event$1.ctor(MonsterController.ctor, "BATTLE_UI_CD_STATUS_UPDATE");
            GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE = new GameEvents.Event.ctor("BATTLE_FIGHT_AUTO_FIGHT_TIME_UPDATE");
            GameEvent.BATTLE_UI_HIDE_ALL_BUTTON = new GameEvents.Event$1.ctor(System.Boolean.ctor, "BATTLE_UI_HIDE_ALL_BUTTON");
            GameEvent.World_OnAddPlayer = new GameEvents.Event$1.ctor(AppDto.ScenePlayerDto.ctor, "World_OnAddPlayer");
            GameEvent.World_OnUpdatePlayer = new GameEvents.Event$1.ctor(AppDto.ScenePlayerDto.ctor, "World_OnUpdatePlayer");
            GameEvent.World_OnRemovePlayer = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnRemovePlayer");
            GameEvent.World_OnUpdatePlayerPos = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Single.ctor, System.Single.ctor, "World_OnUpdatePlayerPos");
            GameEvent.World_OnChangePlayerPos = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Single.ctor, System.Single.ctor, "World_OnChangePlayerPos");
            GameEvent.World_OnChangeBattleStatus = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Boolean.ctor, "World_OnChangeBattleStatus");
            GameEvent.World_OnChangeWeapon = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Int32.ctor, "World_OnChangeWeapon");
            GameEvent.World_OnChangeWeaponEff = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Int32.ctor, "World_OnChangeWeaponEff");
            GameEvent.World_OnChangePlayerTitle = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnChangePlayerTitle");
            GameEvent.World_OnChangePlayerDye = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnChangePlayerDye");
            GameEvent.World_OnChangePlayerScale = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Int64.ctor, System.Single.ctor, "World_OnChangePlayerScale");
            GameEvent.World_OnChangePlayerModel = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnChangePlayerModel");
            GameEvent.World_OnUpdateNpcPos = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Single.ctor, System.Single.ctor, "World_OnUpdateNpcPos");
            GameEvent.World_OnHallowSpriteNotify = new GameEvents.Event$2.ctor(System.Int64.ctor, System.Int32.ctor, "World_OnHallowSpriteNotify");
            GameEvent.World_OnChangePlayerMoveSpeed = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnChangePlayerMoveSpeed");
            GameEvent.World_OnChangeMaster = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnChangeMaster");
            GameEvent.World_OnChangeTeamRide = new GameEvents.Event$3.ctor(System.Int64.ctor, System.Int64.ctor, System.Boolean.ctor, "World_OnChangeTeamRide");
            GameEvent.World_OnChangeTeamStatus = new GameEvents.Event$1.ctor(System.Int64.ctor, "World_OnChangeTeamStatus");
            GameEvent.Team_OnTeamStateUpdate = new GameEvents.Event.ctor("Team_OnTeamStateUpdate");
            GameEvent.OnSceneChangeEnd = new GameEvents.Event.ctor("OnSceneChangeEnd");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameEvent);
var GameEventAgent = {
    fullname: "GameEventAgent",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameEventAgent._instance = null;
        },
        Instance$$: "GameEventAgent",
        get_Instance: function (){
            if (GameEventAgent._instance == null){
                GameEventAgent._instance = new GameEventAgent.ctor();
                GameEventCenter.get_Instance().AddGameEventAgent(GameEventAgent._instance);
            }
            return GameEventAgent._instance;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGameEventAgent"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.eventList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, GameEventAgent.GameEventDelegate.ctor);
            System.Object.ctor.call(this);
        },
        AddListener: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this) == false){
                gameEventDelegate = new GameEventAgent.GameEventDelegate.ctor();
                this.eventList.Add(gameEvent, gameEventDelegate);
            }
            gameEventDelegate.Add(action);
        },
        Invoke: function (gameEvent){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Invoke();
            }
        },
        RemoveListener$$String$$Action: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Remove$$Action(action);
            }
        },
        RemoveListener$$String: function (gameEvent){
            if (this.CheckHaveListen(gameEvent)){
                this.eventList.Remove(gameEvent);
            }
        },
        CheckHaveListen: function (gameEvent){
            var eventDelegate;
            if ((function (){
                var $1 = $Ref(null, eventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                eventDelegate = $1.Value;
                return $res;
            }).call(this)){
                var delegateList = eventDelegate.GetInvokeList();
                if (delegateList != null && delegateList.length > 0)
                    return true;
            }
            return false;
        },
        RemoveListener$$Object: function (listener){
            var tor = this.eventList.GetEnumerator();
            while (tor.MoveNext()){
                tor.get_Current().get_Value().Remove$$Object(listener);
            }
        }
    }
};
JsTypes.push(GameEventAgent);
var GameEventAgent$1 = {
    fullname: "GameEventAgent$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (T){
            GameEventAgent$1._instance = null;
        },
        Instance$$: "GameEventAgent`1[[`0]]",
        get_Instance: function (){
            if (GameEventAgent$1._instance == null){
                GameEventAgent$1._instance = new GameEventAgent$1.ctor(this.T);
                GameEventCenter.get_Instance().AddGameEventAgent(GameEventAgent$1._instance);
            }
            return GameEventAgent$1._instance;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGameEventAgent"],
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this.eventList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, GameEventAgent.GameEventDelegate$1.ctor);
            System.Object.ctor.call(this);
        },
        AddListener: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this) == false){
                gameEventDelegate = new GameEventAgent.GameEventDelegate$1.ctor(this.T);
                this.eventList.Add(gameEvent, gameEventDelegate);
            }
            gameEventDelegate.Add(action);
        },
        Invoke: function (gameEvent, param){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Invoke(param);
            }
        },
        RemoveListener$$String$$Action$1: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Remove$$Action$1(action);
            }
        },
        RemoveListener$$String: function (gameEvent){
            if (this.CheckHaveListen(gameEvent)){
                this.eventList.Remove(gameEvent);
            }
        },
        CheckHaveListen: function (gameEvent){
            var eventDelegate;
            if ((function (){
                var $1 = $Ref(null, eventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                eventDelegate = $1.Value;
                return $res;
            }).call(this)){
                var delegateList = eventDelegate.GetInvokeList();
                if (delegateList != null && delegateList.length > 0)
                    return true;
            }
            return false;
        },
        RemoveListener$$Object: function (listener){
            var tor = this.eventList.GetEnumerator();
            while (tor.MoveNext()){
                tor.get_Current().get_Value().Remove$$Object(listener);
            }
        }
    }
};
JsTypes.push(GameEventAgent$1);
var GameEventAgent$2 = {
    fullname: "GameEventAgent$2",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (T1, T2){
            GameEventAgent$2._instance = null;
        },
        Instance$$: "GameEventAgent`2[[`0],[`1]]",
        get_Instance: function (){
            if (GameEventAgent$2._instance == null){
                GameEventAgent$2._instance = new GameEventAgent$2.ctor(this.T1, this.T2);
                GameEventCenter.get_Instance().AddGameEventAgent(GameEventAgent$2._instance);
            }
            return GameEventAgent$2._instance;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGameEventAgent"],
    Kind: "Class",
    definition: {
        ctor: function (T1, T2){
            this.T1 = T1;
            this.T2 = T2;
            this.eventList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, GameEventAgent.GameEventDelegate$2.ctor);
            System.Object.ctor.call(this);
        },
        AddListener: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this) == false){
                gameEventDelegate = new GameEventAgent.GameEventDelegate$2.ctor(this.T1, this.T2);
                this.eventList.Add(gameEvent, gameEventDelegate);
            }
            gameEventDelegate.Add(action);
        },
        Invoke: function (gameEvent, param1, param2){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Invoke(param1, param2);
            }
        },
        RemoveListener$$String$$Action$2: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Remove$$Action$2(action);
            }
        },
        RemoveListener$$String: function (gameEvent){
            if (this.CheckHaveListen(gameEvent)){
                this.eventList.Remove(gameEvent);
            }
        },
        CheckHaveListen: function (gameEvent){
            var eventDelegate;
            if ((function (){
                var $1 = $Ref(null, eventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                eventDelegate = $1.Value;
                return $res;
            }).call(this)){
                var delegateList = eventDelegate.GetInvokeList();
                if (delegateList != null && delegateList.length > 0)
                    return true;
            }
            return false;
        },
        RemoveListener$$Object: function (listener){
            var tor = this.eventList.GetEnumerator();
            while (tor.MoveNext()){
                tor.get_Current().get_Value().Remove$$Object(listener);
            }
        }
    }
};
JsTypes.push(GameEventAgent$2);
var GameEventAgent$3 = {
    fullname: "GameEventAgent$3",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (T1, T2, T3){
            GameEventAgent$3._instance = null;
        },
        Instance$$: "GameEventAgent`3[[`0],[`1],[`2]]",
        get_Instance: function (){
            if (GameEventAgent$3._instance == null){
                GameEventAgent$3._instance = new GameEventAgent$3.ctor(this.T1, this.T2, this.T3);
                GameEventCenter.get_Instance().AddGameEventAgent(GameEventAgent$3._instance);
            }
            return GameEventAgent$3._instance;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGameEventAgent"],
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.eventList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, GameEventAgent.GameEventDelegate$3.ctor);
            System.Object.ctor.call(this);
        },
        AddListener: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this) == false){
                gameEventDelegate = new GameEventAgent.GameEventDelegate$3.ctor(this.T1, this.T2, this.T3);
                this.eventList.Add(gameEvent, gameEventDelegate);
            }
            gameEventDelegate.Add(action);
        },
        Invoke: function (gameEvent, param1, param2, param3){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Invoke(param1, param2, param3);
            }
        },
        RemoveListener$$String$$Action$3: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Remove$$Action$3(action);
            }
        },
        RemoveListener$$String: function (gameEvent){
            if (this.CheckHaveListen(gameEvent)){
                this.eventList.Remove(gameEvent);
            }
        },
        CheckHaveListen: function (gameEvent){
            var eventDelegate;
            if ((function (){
                var $1 = $Ref(null, eventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                eventDelegate = $1.Value;
                return $res;
            }).call(this)){
                var delegateList = eventDelegate.GetInvokeList();
                if (delegateList != null && delegateList.length > 0)
                    return true;
            }
            return false;
        },
        RemoveListener$$Object: function (listener){
            var tor = this.eventList.GetEnumerator();
            while (tor.MoveNext()){
                tor.get_Current().get_Value().Remove$$Object(listener);
            }
        }
    }
};
JsTypes.push(GameEventAgent$3);
var GameEventAgent$4 = {
    fullname: "GameEventAgent$4",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (T1, T2, T3, T4){
            GameEventAgent$4._instance = null;
        },
        Instance$$: "GameEventAgent`4[[`0],[`1],[`2],[`3]]",
        get_Instance: function (){
            if (GameEventAgent$4._instance == null){
                GameEventAgent$4._instance = new GameEventAgent$4.ctor(this.T1, this.T2, this.T3, this.T4);
                GameEventCenter.get_Instance().AddGameEventAgent(GameEventAgent$4._instance);
            }
            return GameEventAgent$4._instance;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGameEventAgent"],
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.eventList = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, GameEventAgent.GameEventDelegate$4.ctor);
            System.Object.ctor.call(this);
        },
        AddListener: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this) == false){
                gameEventDelegate = new GameEventAgent.GameEventDelegate$4.ctor(this.T1, this.T2, this.T3, this.T4);
                this.eventList.Add(gameEvent, gameEventDelegate);
            }
            gameEventDelegate.Add(action);
        },
        Invoke: function (gameEvent, param1, param2, param3, param4){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Invoke(param1, param2, param3, param4);
            }
        },
        RemoveListener$$String$$Action$4: function (gameEvent, action){
            var gameEventDelegate;
            if ((function (){
                var $1 = $Ref(null, gameEventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                gameEventDelegate = $1.Value;
                return $res;
            }).call(this)){
                gameEventDelegate.Remove$$Action$4(action);
            }
        },
        RemoveListener$$String: function (gameEvent){
            if (this.CheckHaveListen(gameEvent)){
                this.eventList.Remove(gameEvent);
            }
        },
        CheckHaveListen: function (gameEvent){
            var eventDelegate;
            if ((function (){
                var $1 = $Ref(null, eventDelegate);
                var $res = this.eventList.TryGetValue(gameEvent, $1);
                eventDelegate = $1.Value;
                return $res;
            }).call(this)){
                var delegateList = eventDelegate.GetInvokeList();
                if (delegateList != null && delegateList.length > 0)
                    return true;
            }
            return false;
        },
        RemoveListener$$Object: function (listener){
            var tor = this.eventList.GetEnumerator();
            while (tor.MoveNext()){
                tor.get_Current().get_Value().Remove$$Object(listener);
            }
        }
    }
};
JsTypes.push(GameEventAgent$4);
var GameEventCenter = {
    fullname: "GameEventCenter",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameEventCenter._instance = null;
        },
        Instance$$: "GameEventCenter",
        get_Instance: function (){
            if (GameEventCenter._instance == null){
                GameEventCenter._instance = new GameEventCenter.ctor();
            }
            return GameEventCenter._instance;
        },
        AddListener$$String$$Action: function (eventName, action){
            GameEventAgent.get_Instance().AddListener(eventName, action);
        },
        AddListener$$Event$$Action: function (gameEvent, action){
            GameEventAgent.get_Instance().AddListener(gameEvent.eventName, action);
        },
        SendEvent$$Event: function (gameEvent){
            GameEventAgent.get_Instance().Invoke(gameEvent.eventName);
        },
        RemoveListener$$Event$$Action: function (gameEvent, action){
            GameEventAgent.get_Instance().RemoveListener$$String$$Action(gameEvent.eventName, action);
        },
        RemoveListener$$String$$Action: function (eventName, action){
            GameEventAgent.get_Instance().RemoveListener$$String$$Action(eventName, action);
        },
        RemoveListener$$Event: function (gameEvent){
            GameEventAgent.get_Instance().RemoveListener$$String(gameEvent.eventName);
        },
        CheckHaveListen$$Event: function (gameEvent){
            return GameEventAgent.get_Instance().CheckHaveListen(gameEvent.eventName);
        },
        AddListener$1$$Event$1$$Action$1: function (T, gameEvent, action){
            GameEventAgent$1.get_Instance().AddListener(gameEvent.eventName, action);
        },
        SendEvent$1$$Event$1$$T: function (T, gameEvent, param){
            GameEventAgent$1.get_Instance().Invoke(gameEvent.eventName, param);
        },
        RemoveListener$1$$Event$1$$Action$1: function (T, gameEvent, action){
            GameEventAgent$1.get_Instance().RemoveListener$$String$$Action$1(gameEvent.eventName, action);
        },
        RemoveListener$1$$Event$1: function (T, gameEvent){
            GameEventAgent$1.get_Instance().RemoveListener$$String(gameEvent.eventName);
        },
        CheckHaveListen$1$$Event$1: function (T, gameEvent){
            return GameEventAgent$1.get_Instance().CheckHaveListen(gameEvent.eventName);
        },
        SendEvent$2$$Event$2$$T1$$T2: function (T1, T2, gameEvent, param1, param2){
            GameEventAgent$2.get_Instance().Invoke(gameEvent.eventName, param1, param2);
        },
        AddListener$2$$Event$2$$Action$2: function (T1, T2, gameEvent, action){
            GameEventAgent$2.get_Instance().AddListener(gameEvent.eventName, action);
        },
        RemoveListener$2$$Event$2$$Action$2: function (T1, T2, gameEvent, action){
            GameEventAgent$2.get_Instance().RemoveListener$$String$$Action$2(gameEvent.eventName, action);
        },
        RemoveListener$2$$Event$2: function (T1, T2, gameEvent){
            GameEventAgent$2.get_Instance().RemoveListener$$String(gameEvent.eventName);
        },
        CheckHaveListen$2$$Event$2: function (T1, T2, gameEvent){
            return GameEventAgent$2.get_Instance().CheckHaveListen(gameEvent.eventName);
        },
        SendEvent$3$$Event$3$$T1$$T2$$T3: function (T1, T2, T3, gameEvent, param1, param2, param3){
            GameEventAgent$3.get_Instance().Invoke(gameEvent.eventName, param1, param2, param3);
        },
        AddListener$3$$Event$3$$Action$3: function (T1, T2, T3, gameEvent, action){
            GameEventAgent$3.get_Instance().AddListener(gameEvent.eventName, action);
        },
        RemoveListener$3$$Event$3$$Action$3: function (T1, T2, T3, gameEvent, action){
            GameEventAgent$3.get_Instance().RemoveListener$$String$$Action$3(gameEvent.eventName, action);
        },
        RemoveListener$3$$Event$3: function (T1, T2, T3, gameEvent){
            GameEventAgent$3.get_Instance().RemoveListener$$String(gameEvent.eventName);
        },
        CheckHaveListen$3$$Event$3: function (T1, T2, T3, gameEvent){
            return GameEventAgent$3.get_Instance().CheckHaveListen(gameEvent.eventName);
        },
        SendEvent$4$$Event$4$$T1$$T2$$T3$$T4: function (T1, T2, T3, T4, gameEvent, param1, param2, param3, param4){
            GameEventAgent$4.get_Instance().Invoke(gameEvent.eventName, param1, param2, param3, param4);
        },
        AddListener$4$$Event$4$$Action$4: function (T1, T2, T3, T4, gameEvent, action){
            GameEventAgent$4.get_Instance().AddListener(gameEvent.eventName, action);
        },
        RemoveListener$4$$Event$4$$Action$4: function (T1, T2, T3, T4, gameEvent, action){
            GameEventAgent$4.get_Instance().RemoveListener$$String$$Action$4(gameEvent.eventName, action);
        },
        RemoveListener$4$$Event$4: function (T1, T2, T3, T4, gameEvent){
            GameEventAgent$4.get_Instance().RemoveListener$$String(gameEvent.eventName);
        },
        CheckHaveListen$4$$Event$4: function (T1, T2, T3, T4, gameEvent){
            return GameEventAgent$4.get_Instance().CheckHaveListen(gameEvent.eventName);
        },
        RemoveListener$$Object: function (listener){
            if (GameEventCenter._instance == null)
                return;
            var tor = GameEventCenter._instance.gameEventAgentList.GetEnumerator();
            while (tor.MoveNext()){
                tor.get_Current().RemoveListener(listener);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.gameEventAgentList = new System.Collections.Generic.List$1.ctor$$Int32(IGameEventAgent.ctor, 30);
            System.Object.ctor.call(this);
        },
        AddGameEventAgent: function (agent){
            this.gameEventAgentList.Add(agent);
        }
    }
};
JsTypes.push(GameEventCenter);
var GameEvents = {
    fullname: "GameEvents",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameEvents.OnTestEvent = new GameEvents.Event$1.ctor(System.String.ctor, "OnTestEvent");
            GameEvents.OnTestEvent2 = new GameEvents.Event$1.ctor(TestClass1.ctor, "OnTestEvent2");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameEvents);
var IGameEventAgent = {
    fullname: "IGameEventAgent",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IGameEventAgent);
var GameEventCenterTest = {
    fullname: "GameEventCenterTest",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Start: function (){
            GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvents.OnTestEvent, "aaa");
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.String.ctor, GameEvents.OnTestEvent, $CreateDelegate(this, this.TestEvent));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(TestClass1.ctor, GameEvents.OnTestEvent2, $CreateDelegate(this, this.TestClass));
        },
        Update: function (){
            GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvents.OnTestEvent, "bbb");
            GameEventCenter.SendEvent$1$$Event$1$$T(TestClass1.ctor, GameEvents.OnTestEvent2, new TestClass2.ctor());
            GameEventCenter.RemoveListener$$Object(this);
        },
        TestEvent: function (message){
            UnityEngine.Debug.Log$$Object(message);
        },
        TestClass: function (testClass){
            UnityEngine.Debug.Log$$Object("testClass");
        }
    }
};
JsTypes.push(GameEventCenterTest);
var TestClass1 = {
    fullname: "TestClass1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(TestClass1);
var TestClass2 = {
    fullname: "TestClass2",
    baseTypeName: "TestClass1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TestClass1.ctor.call(this);
        }
    }
};
JsTypes.push(TestClass2);
var GameEventCenterTest2 = {
    fullname: "GameEventCenterTest2",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.list = new System.Collections.Generic.List$1.ctor(GameEventCenterTsetItem.ctor);
            this.i = 1500;
            this.j = 1500;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Start: function (){
        },
        Update: function (){
            if (this.i > 0){
                this.i--;
                this.list.Add(new GameEventCenterTsetItem.ctor());
            }
            else {
                if (this.j > 2){
                    this.j--;
                    this.list.get_Item$$Int32(this.list.get_Count() - 1).Dispose();
                    this.list.RemoveAt(this.list.get_Count() - 1);
                }
            }
            GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvents.OnTestEvent, "bbb");
            GameEventCenter.SendEvent$1$$Event$1$$T(TestClass1.ctor, GameEvents.OnTestEvent2, new TestClass2.ctor());
        }
    }
};
JsTypes.push(GameEventCenterTest2);
var GameEventCenterTsetItem = {
    fullname: "GameEventCenterTsetItem",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.String.ctor, GameEvents.OnTestEvent, $CreateDelegate(this, this.TestEvent));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(TestClass1.ctor, GameEvents.OnTestEvent2, $CreateDelegate(this, this.TestClass));
        },
        TestClass: function (param){
        },
        TestEvent: function (param){
        },
        Dispose: function (){
            GameEventCenter.RemoveListener$$Object(this);
        }
    }
};
JsTypes.push(GameEventCenterTsetItem);
var GameRoot = {
    fullname: "GameRoot",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            GameRoot.NAME = "GameRoot";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AudioManager = null;
            this.BattleLayer = null;
            this.SceneLayer = null;
            this.WorldActors = null;
            this.BattleActors = null;
            this.StoryActors = null;
            this.EffectsAnchor = null;
            this.SceneCamera = null;
            this.SceneCameraTrans = null;
            this.BattleCamera = null;
            this.SceneHUDCamera = null;
            this.UICamera = null;
            this.BattleBgTexture = null;
            this.UIModuleRoot = null;
            this.SceneHudTextPanel = null;
            this.PlotHudTextPanel = null;
            this.BattleHudTextPanel = null;
            this.SceneUIHUDPanel = null;
            this.PlotUIHUDPanel = null;
            this.BattleUIHUDPanel = null;
            this.FloatTipPanel = null;
            this.TopFloatTipPanel = null;
            this.LockScreenPanel = null;
            this.SceneCameraAnimator = null;
            this.BattleCameraAnimator = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.AudioManager = root.Find("AudioManager").get_gameObject();
            this.BattleLayer = root.Find("World/BattleLayer").get_gameObject();
            this.SceneLayer = root.Find("World/SceneLayer").get_gameObject();
            this.WorldActors = root.Find("Gameplay/WorldActors").get_gameObject();
            this.BattleActors = root.Find("Gameplay/BattleActors").get_gameObject();
            this.StoryActors = root.Find("Gameplay/StoryActors").get_gameObject();
            this.EffectsAnchor = root.Find("Gameplay/EffectsAnchor").get_gameObject();
            this.SceneCamera = root.Find("Cameras/SceneCamera").GetComponent$1(UnityEngine.Camera.ctor);
            this.SceneCameraTrans = root.Find("Cameras/SceneCamera");
            this.BattleCamera = root.Find("Cameras/BattleCamera").GetComponent$1(UnityEngine.Camera.ctor);
            this.SceneHUDCamera = root.Find("Cameras/SceneCamera/SceneHUD/SceneHUDCamera").GetComponent$1(UnityEngine.Camera.ctor);
            this.UICamera = root.Find("GUI/UICamera").GetComponent$1(UICamera.ctor);
            this.BattleBgTexture = root.Find("Cameras/SceneCamera/SceneHUD/SceneHUDCamera/BattleBgTexture").GetComponent$1(UITexture.ctor);
            this.UIModuleRoot = root.Find("GUI/UICamera/UIModuleRoot").get_gameObject();
            this.SceneHudTextPanel = root.Find("Cameras/SceneCamera/SceneHUD/SceneHUDCamera/SceneHudTextPanel").GetComponent$1(UIPanel.ctor);
            this.PlotHudTextPanel = root.Find("Cameras/SceneCamera/SceneHUD/SceneHUDCamera/PlotHudTextPanel").GetComponent$1(UIPanel.ctor);
            this.BattleHudTextPanel = root.Find("Cameras/SceneCamera/SceneHUD/SceneHUDCamera/BattleHudTextPanel").GetComponent$1(UIPanel.ctor);
            this.SceneUIHUDPanel = root.Find("GUI/UICamera/FrontAnchor/SceneUIHUDPanel").GetComponent$1(UIPanel.ctor);
            this.PlotUIHUDPanel = root.Find("GUI/UICamera/FrontAnchor/PlotUIHUDPanel").GetComponent$1(UIPanel.ctor);
            this.BattleUIHUDPanel = root.Find("GUI/UICamera/FrontAnchor/BattleUIHUDPanel").GetComponent$1(UIPanel.ctor);
            this.FloatTipPanel = root.Find("GUI/UICamera/FrontAnchor/FloatTipPanel").GetComponent$1(UIPanel.ctor);
            this.TopFloatTipPanel = root.Find("GUI/UICamera/FrontAnchor/TopFloatTipPanel").GetComponent$1(UIPanel.ctor);
            this.LockScreenPanel = root.Find("GUI/UICamera/FrontAnchor/LockScreenPanel").GetComponent$1(UIPanel.ctor);
            this.SceneCameraAnimator = root.Find("Cameras/SceneCamera").GetComponent$1(UnityEngine.Animator.ctor);
            this.BattleCameraAnimator = root.Find("Cameras/BattleCamera").GetComponent$1(UnityEngine.Animator.ctor);
        }
    }
};
JsTypes.push(GameRoot);
var BattleHelper = {
    fullname: "BattleHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        WatchPlayerBattle: function (pPlayerUid, pTargetSceneID, pBattleID, watchType, pSuccessCallBack, pFailCallBack){
            if (BattleManager.get_Instance().IsInBattle()){
                TipManager.AddTip("你正在战斗状态，无法观战", false, false, "");
                return;
            }
            GameDebuger.TODO("\nif (ModelManager.Team.IsFollowLeader())\n        {\n            TipManager.AddTip(\"你处于归队状态，无法观战\");\n        }        \n");
            var judgmentSceneIDSta = true;
            if (pTargetSceneID > 0){
                var tSceneID = WorldManager.get_Instance().GetModel() == null ? ModelManager.get_Player().GetPlayer().sceneId : WorldManager.get_Instance().GetModel().GetSceneId();
                judgmentSceneIDSta = tSceneID == DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, pTargetSceneID).id;
            }
            GameDebuger.TODO("\n        if (judgmentSceneIDSta)\n        {\n            if (pBattleID > 0)\n                ServiceRequestAction.requestServer(CommandService.watchBattleByBattleId(pPlayerUid, pBattleID), \"watchBattleByBattleId\",(e)=>\n                {\n                    if (null != pSuccessCallBack)\n                        pSuccessCallBack();\n                },(e) =>\n                    {\n                        TipManager.AddTip(e.message);\n                        if (pFailCallBack != null)\n                            pFailCallBack();\n                    });\n            else\n                ServiceRequestAction.requestServer(CommandService.watchBattle(pPlayerUid));\n\n            \n        } else {\n            switch (watchType) {\n            case BattleWatchType.WatchType_Duel:\n                Npc tTargetNpc = DataCache.getDtoByCls<Npc>(ModelManager.DuelData.speciteNpcID);\n                SceneMap tTargetSceneMap = DataCache.getDtoByCls<SceneMap>(pTargetSceneID);\n\n                TipManager.AddTip(string.Format(\"请前往{0}{1}处观战\", tTargetSceneMap.name.WrapColor(ColorConstantV3.Color_Green_Str), tTargetNpc.name.WrapColor(ColorConstantV3.Color_Blue_Str)));\n                break;\n            case BattleWatchType.WatchType_CSPK:\n                //  这里不需要如是操作。2016-09-23 18:04:12\n                break;\n            }\n        }\n        //} else {\n        //  TipManager.AddTip(\"对方不在战斗状态， 无法观战\");\n        //}        \n");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattleHelper);
var BattleInfoOutput = {
    fullname: "BattleInfoOutput",
    baseTypeName: "System.Object",
    staticDefinition: {
        ShowVideoAction: function (gameAction){
            if (BattleManager.DEBUG){
                GameDebuger.Log("基础效果:", null);
                BattleInfoOutput.ShowGameVideoStateAction(gameAction);
            }
        },
        ShowGameVideoStateAction: function (gameAction){
            GameDebuger.Log(BattleInfoOutput.GetTargetStateGroupsInfo(gameAction), null);
        },
        showVideoSkillAction: function (gameAction, strikeBack){
            if (gameAction.get_skill() == null){
                return;
            }
            var monster = MonsterManager.get_Instance().GetMonsterFromSoldierID(gameAction.actionSoldierId);
            if (UnityEngine.Object.op_Equality(monster, null)){
                GameDebuger.Log("Error: attacker not exist id=" + gameAction.actionSoldierId, null);
                return;
            }
            var desc = (strikeBack ? "[反击]" : "") + monster.GetDebugInfo() + " 使用【" + gameAction.get_skill().name + "】" + ",造成" + BattleInfoOutput.GetTargetStateGroupsInfo(gameAction);
            GameDebuger.LogBattleInfo(desc);
        },
        GetTargetStateGroupsInfo: function (gameAction){
            var effects = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            for (var i = 0,len = gameAction.targetStateGroups.get_Count(); i < len; i++){
                var targetStateGroup = gameAction.targetStateGroups.get_Item$$Int32(i);
                effects.Add(BattleInfoOutput.GetTargetStatesInfo(targetStateGroup));
            }
            return System.String.Join$$String$$String$Array(";", effects.ToArray());
        },
        GetTargetStatesInfo: function (groups){
            var targetList = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            for (var i = 0,len = groups.targetStates.get_Count(); i < len; i++){
                var targetState = groups.targetStates.get_Item$$Int32(i);
                if (targetList.Contains(targetState.id) == false){
                    targetList.Add(targetState.id);
                }
            }
            var effects = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            for (var i = 0,len = targetList.get_Count(); i < len; i++){
                var targetId = targetList.get_Item$$Int32(i);
                var effectInfo = BattleInfoOutput.GetTargetEffectInfo(targetId, groups.targetStates);
                if (!System.String.IsNullOrEmpty(effectInfo)){
                    effects.Add(effectInfo);
                }
            }
            if (groups.strikeBackAction != null){
                BattleInfoOutput.showVideoSkillAction(groups.strikeBackAction, true);
            }
            return System.String.Join$$String$$String$Array(",", effects.ToArray());
        },
        getTargetStates: function (arr, petId){
            var states = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetState.ctor);
            for (var i = 0,len = arr.get_Count(); i < len; i++){
                var state = arr.get_Item$$Int32(i);
                if (petId == 0){
                    states.Add(state);
                }
                else {
                    if (state.id == petId){
                        states.Add(state);
                    }
                }
            }
            return states;
        },
        GetTargetEffectInfo: function (targetId, stateList){
            stateList = BattleInfoOutput.getTargetStates(stateList, targetId);
            var monsterInfo = "";
            var monster = MonsterManager.get_Instance().GetMonsterFromSoldierID(targetId);
            if (UnityEngine.Object.op_Equality(monster, null)){
                monsterInfo = "[" + targetId + "]";
                GameDebuger.Log("Error: target not exist! id=" + targetId, null);
            }
            else {
                monsterInfo = monster.GetDebugInfo();
            }
            var effect = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            var dead = false;
            for (var i = 0,len = stateList.get_Count(); i < len; i++){
                var state = stateList.get_Item$$Int32(i);
                if (!dead){
                    dead = state.dead;
                }
                if (Is(state, AppDto.VideoActionTargetState.ctor)){
                    effect.Add(BattleInfoOutput.GetActionTargetState(As(state, AppDto.VideoActionTargetState.ctor)));
                }
                if (Is(state, AppDto.VideoBuffAddTargetState.ctor)){
                    effect.Add(BattleInfoOutput.GetBuffAddTargetState(As(state, AppDto.VideoBuffAddTargetState.ctor)));
                }
                if (Is(state, AppDto.VideoBuffRemoveTargetState.ctor)){
                    effect.Add(BattleInfoOutput.GetBuffRemoveTargetState(As(state, AppDto.VideoBuffRemoveTargetState.ctor)));
                }
                if (Is(state, AppDto.VideoDodgeTargetState.ctor)){
                    effect.Add(BattleInfoOutput.GetDodgeTargetState(As(state, AppDto.VideoDodgeTargetState.ctor)));
                }
                if (Is(state, AppDto.VideoRetreatState.ctor)){
                    effect.Add(BattleInfoOutput.GetVideoRetreatState(As(state, AppDto.VideoRetreatState.ctor)));
                }
                GameDebuger.TODO("if (state is VideoAntiSkillTargetState)\n            {\n                effect.Add(GetAntiSkillTargetState(state as VideoAntiSkillTargetState));\n            }");
                GameDebuger.TODO("if (state is VideoRageTargetState)\n            {\n                effect.Add(GetRageTargetState(state as VideoRageTargetState));\n            }");
                GameDebuger.TODO("if (state is VideoCallSoldierState)\n            {\n                effect.Add(GetVideoCallSoldierState(state as VideoCallSoldierState));\n            }");
                GameDebuger.TODO("if (state is VideoCallSoldierLeaveState)\n            {\n                effect.Add(GetVideoCallSoldierLeaveState(state as VideoCallSoldierLeaveState));\n            }");
                GameDebuger.TODO("if (state is VideoSwtichPetState)\n            {\n                effect.Add(GetVideoSwtichPetState(state as VideoSwtichPetState));\n            }");
                GameDebuger.TODO("if (state is VideoTargetExceptionState)\n            {\n                effect.Add(GetVideoTargetExceptionState(state as VideoTargetExceptionState));\n            }");
                GameDebuger.TODO("if (state is VideoCaptureState)\n            {\n                effect.Add(GetVideoCaptureState(state as VideoCaptureState));\n            }");
            }
            if (dead){
                effect.Add("死亡");
            }
            if (effect.get_Count() > 0){
                return monsterInfo + " " + System.String.Join$$String$$String$Array(",", effect.ToArray());
            }
            return "";
        },
        GetActionTargetState: function (state){
            var effect = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            if (state.hp != 0){
                effect.Add("HP" + state.hp);
            }
            return System.String.Join$$String$$String$Array(",", effect.ToArray());
        },
        GetDodgeTargetState: function (state){
            return "闪避";
        },
        GetVideoRetreatState: function (state){
            return "撤退:" + state.success;
        },
        GetBuffAddTargetState: function (state){
            return System.String.Format$$String$$Object$$Object$$Object("Buff id：{0},效果：{1}，持续时间或次数：{2}", state.battleBuffId, state.get_battleBuff().name, state.durationTime);
        },
        GetBuffRemoveTargetState: function (state){
            var ids = "";
            for (var index = 0; index < state.buffId.get_Count(); index++){
                ids += state.buffId.get_Item$$Int32(index) + ",";
            }
            return "Buff移除 id:" + ids;
        },
        OutputTargetStateGroups: function (groups){
            var infos = "OutputTargetStateGroups=============";
            for (var i = 0,len = groups.get_Count(); i < len; i++){
                var group = groups.get_Item$$Int32(i);
                infos += BattleInfoOutput.OutputTargetStates(group.targetStates);
                if (group.strikeBackAction != null){
                    infos += "\n\t[反击]" /* "\n\t" + "[反击]" */;
                    if (group.strikeBackAction.targetStateGroups != null && group.strikeBackAction.targetStateGroups.get_Count() > 0){
                        infos += BattleInfoOutput.OutputTargetStates(group.strikeBackAction.targetStateGroups.get_Item$$Int32(0).targetStates);
                    }
                }
            }
            infos += "\n===============OutputTargetStateGroups" /* "\n" + "===============OutputTargetStateGroups" */;
            GameDebuger.Log(infos, null);
        },
        OutputTargetStates: function (targetStates){
            var infos = "\n\tOutputVideoTargetState-----------------" /* "\n\t" + "OutputVideoTargetState-----------------" */;
            var outputs = BattleInfoOutput.GetVideoTargetStates(targetStates);
            for (var i = 0,len = outputs.get_Count(); i < len; i++){
                var info = outputs.get_Item$$Int32(i);
                infos += "\n\t" + info;
            }
            infos += "\n\t-----------------OutputVideoTargetState" /* "\n\t" + "-----------------OutputVideoTargetState" */;
            return infos;
        },
        GetVideoTargetStates: function (targetStates){
            var outputs = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            for (var i = 0,len = targetStates.get_Count(); i < len; i++){
                var state = targetStates.get_Item$$Int32(i);
                outputs.Add(state.toString());
            }
            return outputs;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattleInfoOutput);
var BattleMonsterBuff = {
    fullname: "BattleMonsterBuff",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            BattleMonsterBuff.MCDTASKNAME_FORMAT = "BuffCoolDown_PlayerID_{0}_BuffID_{1}";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.buffList = null;
            this.effectMaps = null;
            this._monsterController = null;
            this.mBuffCoolDownDic = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        SetMonster: function (monsterController){
            this._monsterController = monsterController;
            this.buffList = new System.Collections.Generic.List$1.ctor(AppDto.VideoBuffAddTargetState.ctor);
            this.effectMaps = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, UnityEngine.GameObject.ctor);
            this.mBuffCoolDownDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, JSTimer.CdTask.ctor);
        },
        AddOrResetBuff: function (buffState, tip){
            if (buffState == null){
                GameDebuger.LogError("[错误]AddBuff faield , buffState == null", null);
                return;
            }
            if (null == buffState.get_battleBuff()){
                GameDebuger.LogError(System.String.Format$$String$$Object("[错误]AddBuff faield , battleBuff is null, buffId :{0}", buffState.battleBuffId), null);
                return;
            }
            GameDebuger.LogBattleInfo(System.String.Format$$String$$Object$Array("mcid:{0},mcname:{1} AddBuff:{2},id:{3},durationTime:{4},buffStateid:{5}", [this._monsterController.GetId(), this._monsterController.videoSoldier.name, buffState.get_battleBuff().name, buffState.battleBuffId, buffState.durationTime, buffState.id]));
            if (!this.buffList.Contains(buffState)){
                this.AddBuffEffect(buffState.get_battleBuff());
                this.buffList.Add(buffState);
            }
            this.AddOrResetBuffCoolDown(buffState);
        },
        GetBuffTipColor: function (buffer){
            var colorStr = "fec742";
            return ColorExt.Parse(colorStr);
        },
        RemoveBuff: function (buffState){
            if (buffState == null){
                GameDebuger.Log("buffState == null", null);
                return;
            }
            GameDebuger.LogBattleInfo(this._monsterController.videoSoldier.name + " RemoveBuff " + buffState.get_battleBuff().name + " id=" + buffState.battleBuffId + ",Duration:" + buffState.durationTime);
            this.RemoveBuffCoolDown(System.String.Format$$String$$Object$$Object("BuffCoolDown_PlayerID_{0}_BuffID_{1}" /* MCDTASKNAME_FORMAT */, buffState.id, buffState.battleBuffId), true);
            this.buffList.Remove(buffState);
            this.RemoveBuffEffect(buffState.get_battleBuff());
        },
        AddBuffEffect: function (buffer){
            if (this.effectMaps == null || this.effectMaps.ContainsKey(buffer.id)){
                return;
            }
            if (buffer.animationMount == null){
                buffer.animationMount = "Mount_Shadow" /* ModelHelper.Mount_shadow */;
            }
            if (buffer.animation != 0 && !System.String.IsNullOrEmpty(buffer.animationMount)){
                var mountTransform = GameObjectExt.GetChildTransform(this._monsterController.get_transform(), buffer.animationMount);
                if (UnityEngine.Object.op_Equality(mountTransform, null)){
                    return;
                }
                var buffName = PathHelper.GetEffectPath("buff_eff_" + buffer.animation);
                AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(buffName, $CreateAnonymousDelegate(this, function (go){
                    if (UnityEngine.Object.op_Equality(go, null)){
                        return;
                    }
                    var effectGO = null;
                    if (buffer.animationMount == "Mount_Shadow" /* ModelHelper.Mount_shadow */){
                        effectGO = GameObjectExt.AddPoolChild(this._monsterController.GetBattleGroundMount().get_gameObject(), go, 0, 0, 0);
                    }
                    else {
                        effectGO = GameObjectExt.AddPoolChild(mountTransform.get_gameObject(), go, 0, 0, 0);
                        var noRotation = GameObjectExt.GetMissingComponent$1(NoRotation.ctor, effectGO);
                        noRotation.fixYToZero = false;
                    }
                    this.effectMaps.set_Item$$TKey(buffer.id, effectGO);
                }), null, 100);
            }
        },
        IsNeedRotationGroundEffect: function (buffName){
            return buffName.Contains("buff_eff_120") || buffName.Contains("buff_eff_137");
        },
        RemoveBuffEffect: function (buffer){
            if (this.effectMaps.ContainsKey(buffer.id)){
                var effect = this.effectMaps.get_Item$$TKey(buffer.id);
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effect, false);
                this.effectMaps.Remove(buffer.id);
            }
        },
        RemoveAllBuff: function (){
            var $it1 = this.effectMaps.get_Values().GetEnumerator();
            while ($it1.MoveNext()){
                var effect = $it1.get_Current();
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effect, false);
            }
            if (this.effectMaps != null){
                this.effectMaps.Clear();
            }
            if (this.buffList != null){
                this.buffList.Clear();
            }
            this.ClearAllBuffCoolDown();
        },
        SetActive: function (b){
            this.SetVisible(b);
        },
        SetVisible: function (pVisible){
            if (null == this.effectMaps || this.effectMaps.get_Count() <= 0)
                return;
            var tEnum = this.effectMaps.GetEnumerator();
            while (tEnum.MoveNext()){
                tEnum.get_Current().get_Value().SetActive(pVisible);
            }
        },
        AddOrResetBuffCoolDown: function (pVideoBuffAddTargetState){
            if (null == pVideoBuffAddTargetState || pVideoBuffAddTargetState.durationTime <= 0)
                return;
            var tCDTaskName = System.String.Format$$String$$Object$$Object("BuffCoolDown_PlayerID_{0}_BuffID_{1}" /* MCDTASKNAME_FORMAT */, pVideoBuffAddTargetState.id, pVideoBuffAddTargetState.battleBuffId);
            var tDuration = pVideoBuffAddTargetState.durationTime / 1000;
            var tCdTask = JSTimer.get_Instance().GetCdTask(tCDTaskName);
            var tOnCdFinish = $CreateAnonymousDelegate(this, function (){
                this._monsterController.RemoveBuff(pVideoBuffAddTargetState.battleBuffId);
            });
            if (null == tCdTask){
                tCdTask = JSTimer.get_Instance().SetupCoolDown(tCDTaskName, tDuration, null, tOnCdFinish, 0.1, false);
                this.mBuffCoolDownDic.Add(tCDTaskName, tCdTask);
            }
            else
                tCdTask.Reset(tDuration, null, tOnCdFinish, 0.1, false);
        },
        RemoveBuffCoolDown: function (pCDTaskName, pNeedRemoveFromDic){
            if (JSTimer.get_Instance().IsCdExist(pCDTaskName))
                JSTimer.get_Instance().CancelCd(pCDTaskName);
            if (pNeedRemoveFromDic)
                this.mBuffCoolDownDic.Remove(pCDTaskName);
        },
        ClearAllBuffCoolDown: function (){
            if (null == this.mBuffCoolDownDic)
                return;
            var tEnum = this.mBuffCoolDownDic.GetEnumerator();
            while (tEnum.MoveNext()){
                this.RemoveBuffCoolDown(tEnum.get_Current().get_Key(), false);
            }
        },
        OnDestroy: function (){
            this.buffList = null;
            this._monsterController = null;
            this.mBuffCoolDownDic = null;
        }
    }
};
JsTypes.push(BattleMonsterBuff);
var BattlePositionCalculator = {
    fullname: "BattlePositionCalculator",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattlePositionCalculator.a_positions = null;
            BattlePositionCalculator.b_positions = null;
        },
        Setup: function (){
            if (BattlePositionCalculator.a_positions == null){
                BattlePositionCalculator.a_positions = new Array(14);
                BattlePositionCalculator.b_positions = new Array(14);
                BattlePositionCalculator.a_positions[0] = "-3.41:-2.43";
                BattlePositionCalculator.a_positions[1] = "-3.21:-0.84";
                BattlePositionCalculator.a_positions[2] = "-3.59:-4.04";
                BattlePositionCalculator.a_positions[3] = "-3.13:0.96";
                BattlePositionCalculator.a_positions[4] = "-3.83:-5.98";
                BattlePositionCalculator.a_positions[5] = "-1.58:-3.21";
                BattlePositionCalculator.a_positions[6] = "-1.32:-1.59";
                BattlePositionCalculator.a_positions[7] = "-1.82:-4.60";
                BattlePositionCalculator.a_positions[8] = "-1.14:-0.10";
                BattlePositionCalculator.a_positions[9] = "-2.06:-6.28";
                BattlePositionCalculator.a_positions[10] = "-4.71:-2.16";
                BattlePositionCalculator.a_positions[11] = "-4.51:-0.60";
                BattlePositionCalculator.a_positions[12] = "-4.89:-3.74";
                BattlePositionCalculator.a_positions[13] = "-5.96:-1.88";
                BattlePositionCalculator.b_positions[0] = "3.72:-1.95";
                BattlePositionCalculator.b_positions[1] = "3.48:-3.53";
                BattlePositionCalculator.b_positions[2] = "4.04:-0.32";
                BattlePositionCalculator.b_positions[3] = "3.20:-5.09";
                BattlePositionCalculator.b_positions[4] = "4.25:1.34";
                BattlePositionCalculator.b_positions[5] = "2.16:-1.31";
                BattlePositionCalculator.b_positions[6] = "1.83:-2.81";
                BattlePositionCalculator.b_positions[7] = "2.39:0.31";
                BattlePositionCalculator.b_positions[8] = "1.69:-4.53";
                BattlePositionCalculator.b_positions[9] = "2.71:1.92";
                BattlePositionCalculator.b_positions[10] = "5.2:-2.38";
                BattlePositionCalculator.b_positions[11] = "4.97:-3.98";
                BattlePositionCalculator.b_positions[12] = "5.52:-0.84";
                BattlePositionCalculator.b_positions[13] = "6.68:-2.89";
            }
        },
        GetMonsterPosition: function (soldier, side, distance){
            BattlePositionCalculator.Setup();
            var isPlayer = side == MonsterController.MonsterSide.Player;
            var positionIndex = soldier.position - 1;
            var positions = isPlayer ? BattlePositionCalculator.a_positions : BattlePositionCalculator.b_positions;
            var position = "0:0";
            if (positionIndex >= 0){
                position = positions[positionIndex];
            }
            else {
                position = positions[0];
            }
            var vec = position.Split$$Char$Array([":"]);
            var x = System.Single.Parse$$String(vec[0]);
            var z = System.Single.Parse$$String(vec[1]);
            return new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x, 0, z);
        },
        GetZonePosition: function (side){
            if (side == MonsterController.MonsterSide.Player){
                return new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-3.41 /* -3.41f */, 0, -2.43 /* -2.43f */);
            }
            return new UnityEngine.Vector3.ctor$$Single$$Single$$Single(3.72, 0, -1.95 /* -1.95f */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattlePositionCalculator);
var BattleStateHandler = {
    fullname: "BattleStateHandler",
    baseTypeName: "System.Object",
    staticDefinition: {
        PlayVideoSkillAction: function (mc, action){
            if (UnityEngine.Object.op_Inequality(mc, null)){
                mc.ClearMessageEffect(true);
                mc.modifyHP = action.hpSpent;
                GameDebuger.TODO("mc.modifyMP = action.mpSpent;");
                mc.modifySP = action.spSpent;
                GameDebuger.TODO("mc.modifyMagicMana = action.magicManaSpent;");
                mc.PlayInjure();
            }
        },
        PlayState: function (mc, bas, handleAll){
            if (UnityEngine.Object.op_Inequality(mc, null)){
                mc.ClearMessageEffect(true);
            }
            else {
                GameDebuger.TODO("if (bas is VideoCallSoldierState)\n            {\n                VideoCallSoldierState videoCallSoldierState = bas as VideoCallSoldierState;\n                         BattleController.Instance.CallPet(videoCallSoldierState.soldier);\n            }");
                return;
            }
            if (Is(bas, AppDto.VideoActionTargetState.ctor)){
                var action = Cast(bas, AppDto.VideoActionTargetState.ctor);
                if (action.crit)
                    mc.AddMessageEffect(MonsterController.ShowMessageEffect.CRITICAL);
                mc.modifyHP = action.hp;
                GameDebuger.TODO("mc.modifyMP = action.mp;");
                mc.modifySP = action.sp;
                GameDebuger.TODO("mc.modifyMagicMana= action.magicMana;");
                mc.lastHP = action.currentHp;
                mc.lastSP = action.currentSp;
            }
            else if (Is(bas, AppDto.VideoDodgeTargetState.ctor)){
                mc.AddMessageEffect(MonsterController.ShowMessageEffect.DODGE);
                mc.PlaySkillName$$String("躲闪");
            }
            else if (Is(bas, AppDto.VideoBuffAddTargetState.ctor)){
                mc.AddBuffState(Cast(bas, AppDto.VideoBuffAddTargetState.ctor), true);
            }
            else if (Is(bas, AppDto.VideoBuffRemoveTargetState.ctor)){
                mc.RemoveBuffs(Cast(bas, AppDto.VideoBuffRemoveTargetState.ctor));
            }
            GameDebuger.TODO("else if (bas is VideoAntiSkillTargetState)\n        {\n            mc.AddMessageEffect( MonsterController.ShowMessageEffect.IMMUNE );\n        }\n       \n        else if (bas is VideoRageTargetState)\n        {\n              }\n        else if (bas is VideoTargetShoutState)\n        {\n            return;\n        }\n        else if (bas is VideoCallSoldierLeaveState)\n        {\n            VideoCallSoldierLeaveState rageTargetState = bas as VideoCallSoldierLeaveState;\n            MonsterController leaveSoldier = MonsterManager.Instance.GetMonsterFromSoldierID (rageTargetState.id);\n            if (leaveSoldier != null)\n            {\n                leaveSoldier.LeaveBattle();\n            }\n            return;\n        }\n        else if (bas is VideoTargetExceptionState)\n        {\n            //TODO@senkay 竞技场考虑对方打我的时候， 如果对方有异常状态， 也要显示\n            if (mc.IsPlayerCtrlCharactor())\n            {\n                VideoTargetExceptionState targetExceptionState = bas as VideoTargetExceptionState;\n                TipManager.AddTip(targetExceptionState.message);\n            }\n        }");
            if (handleAll){
                if (Is(bas, AppDto.VideoRetreatState.ctor)){
                    var retreatState = As(bas, AppDto.VideoRetreatState.ctor);
                    if (retreatState.success){
                        mc.RetreatFromBattle(MonsterController.RetreatMode.Run, 1);
                    }
                }
            }
            if (UnityEngine.Object.op_Inequality(mc, null)){
                mc.dead = bas.dead;
                mc.leave = bas.leave;
                mc.PlayInjure();
            }
        },
        HanderOtherTargetState: function (checkList, targetStates){
            var states = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetState.ctor);
            for (var i = 0,len = targetStates.get_Count(); i < len; i++){
                var state = targetStates.get_Item$$Int32(i);
                if (!checkList.Contains(state.id)){
                    states.Add(state);
                }
            }
            for (var i = 0,len = states.get_Count(); i < len; i++){
                var doState = states.get_Item$$Int32(i);
                BattleStateHandler.PlayState(MonsterManager.get_Instance().GetMonsterFromSoldierID(doState.id), doState, false);
            }
        },
        HandleBattleStateGroup: function (petId, targetStateGroups, handleAll){
            for (var i = 0,len = targetStateGroups.get_Count(); i < len; i++){
                var group = targetStateGroups.get_Item$$Int32(i);
                BattleStateHandler.HandleBattleState(petId, group.targetStates, handleAll);
            }
        },
        CheckDeadState: function (mc, bas){
            var modifyHP = 0;
            if (Is(bas, AppDto.VideoActionTargetState.ctor)){
                var action = Cast(bas, AppDto.VideoActionTargetState.ctor);
                modifyHP = action.hp;
            }
            if (UnityEngine.Object.op_Inequality(mc, null)){
                mc.dead = bas.dead;
                mc.leave = bas.leave;
                if (mc.get_currentHP() + modifyHP <= 0){
                    mc.dead = true;
                }
                else {
                    mc.dead = false;
                }
            }
        },
        HandleBattleState: function (petId, targetStates, handleAll){
            BattleStateHandler.HandleAllBattleState(targetStates, handleAll);
        },
        HandleAllBattleState: function (targetStates, handleAll){
            for (var i = 0,len = targetStates.get_Count(); i < len; i++){
                var state = targetStates.get_Item$$Int32(i);
                if (state.id == 0){
                    GameDebuger.LogError("state.id = 0", null);
                }
                BattleStateHandler.PlayState(MonsterManager.get_Instance().GetMonsterFromSoldierID(state.id), state, handleAll);
            }
        },
        getTargetStates: function (arr, petId){
            var states = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetState.ctor);
            for (var i = 0,len = states.get_Count(); i < len; i++){
                var state = states.get_Item$$Int32(i);
                if (petId == 0){
                    states.Add(state);
                }
                else {
                    if (state.id == petId){
                        states.Add(state);
                    }
                }
            }
            return states;
        },
        getTargetState: function (arr, petId){
            var select = null;
            var count = 0;
            for (var i = 0,len = arr.get_Count(); i < len; i++){
                var state = arr.get_Item$$Int32(i);
                if (state.id == petId){
                    if (select == null){
                        select = state;
                    }
                    count++;
                }
            }
            if (select != null && count > 1){
                arr.Remove(select);
            }
            return select;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattleStateHandler);
var BattleStatusEffectManager = {
    fullname: "BattleStatusEffectManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleStatusEffectManager._instance = new BattleStatusEffectManager.ctor();
            BattleStatusEffectManager.BattleHUDText_PrefabName = "BattleHUDText";
        },
        Instance$$: "BattleStatusEffectManager",
        get_Instance: function (){
            return BattleStatusEffectManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._playSkillEfect = null;
            System.Object.ctor.call(this);
        },
        Setup: function (){
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(this._playSkillEfect, null)){
                this._playSkillEfect.Dispose();
                this._playSkillEfect = null;
            }
        },
        AddEffect: function (mc){
            var hudTransform = mc.GetMountDamageffect();
            if (mc.existMessageEffect(MonsterController.ShowMessageEffect.CRITICAL)){
                this.ShowBattleStatusEffect("baoji", hudTransform);
            }
            else if (mc.existMessageEffect(MonsterController.ShowMessageEffect.DODGE))
                this.ShowBattleStatusEffect("shanduo", hudTransform);
            else if (mc.existMessageEffect(MonsterController.ShowMessageEffect.IMMUNE)){
            }
        },
        PlayDamage: function (msg, color, target, duration, fontType, scale){
            var com = this.GetUIBattleStatusEffect();
            if (UnityEngine.Object.op_Inequality(com, null)){
                com.ShowDamage(target, msg, fontType, duration);
            }
        },
        PlaySkillName$$MonsterController$$Skill: function (mc, skill){
            this._playSkillEfect = this.GetUIBattleStatusEffect();
            if (UnityEngine.Object.op_Inequality(this._playSkillEfect, null)){
                var hudTransform = mc.GetMountBattleEffect();
                this._playSkillEfect.ShowSkillName(skill.name, hudTransform);
            }
            else
                GameDebuger.LogError("PlaySkillName failed for GetUIBattleStatusEffect failed !", null);
        },
        PlaySkillName$$MonsterController$$String: function (mc, name){
            var com = this.GetUIBattleStatusEffect();
            if (UnityEngine.Object.op_Inequality(com, null)){
                var hudTransform = mc.GetMountBattleEffect();
                com.ShowSkillName(name, hudTransform);
            }
        },
        PlayMsg: function (mc, msg){
            var com = this.GetUIBattleStatusEffect();
            if (UnityEngine.Object.op_Inequality(com, null)){
                var hudTransform = mc.GetMountBattleEffect();
                com.ShowMsg(msg, hudTransform);
            }
        },
        ShowBattleStatusEffect: function (effectName, mountPoint){
            if (UnityEngine.Object.op_Equality(mountPoint, null))
                return;
            var com = this.GetUIBattleStatusEffect();
            if (UnityEngine.Object.op_Inequality(com, null)){
                com.ShowStatusEffect(mountPoint, effectName);
            }
        },
        GetUIBattleStatusEffect: function (){
            var fontGo = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("BattleHUDText" /* BattleHUDText_PrefabName */, LayerManager.get_Root().BattleUIHUDPanel.get_cachedGameObject());
            var com = GameObjectExt.GetMissingComponent$1(UIBattleStatusEffectController.ctor, fontGo);
            return com;
        }
    }
};
JsTypes.push(BattleStatusEffectManager);
var BattleTargetSelector = {
    fullname: "BattleTargetSelector",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (monsterSkill){
            this.singleTarget = false;
            this.targetType = BattleTargetSelector.TargetType.ALL;
            this.characterType = BattleTargetSelector.CharacterType.ALL;
            this.lifeState = BattleTargetSelector.LifeState.ALL;
            this.selectorType = BattleTargetSelector.SelectorType.CAPTURE;
            this.selfType = BattleTargetSelector.SelfType.SELF;
            this._selectParam = 0;
            this.SkillParam = null;
            this.skill = null;
            this.monsterSource = null;
            this.monsterTargets = 0;
            System.Object.ctor.call(this);
            if (monsterSkill == null){
                GameDebuger.Log("BattleTargetSelector:monsterSkill == null ", null);
                return;
            }
            this.SkillParam = null;
            this.skill = monsterSkill;
            switch (this.skill.skillAiId){
                case AppDto.Skill.UserTargetScopeType.Enemy:
                    this.targetType = BattleTargetSelector.TargetType.ENEMY;
                    this.characterType = BattleTargetSelector.CharacterType.ALL;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.Self:
                    this.targetType = BattleTargetSelector.TargetType.SELF;
                    this.characterType = BattleTargetSelector.CharacterType.ALL;
                    this.selfType = BattleTargetSelector.SelfType.SELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.FriendsExceptSelfWithPet:
                    this.targetType = BattleTargetSelector.TargetType.PLAYER;
                    this.characterType = BattleTargetSelector.CharacterType.ALL;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.FriendsWithPet:
                    this.targetType = BattleTargetSelector.TargetType.PLAYER;
                    this.characterType = BattleTargetSelector.CharacterType.ALL;
                    this.selfType = BattleTargetSelector.SelfType.SELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.FriendPets:
                    this.targetType = BattleTargetSelector.TargetType.PLAYER;
                    this.characterType = BattleTargetSelector.CharacterType.PET;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.ExceptSelf:
                    this.targetType = BattleTargetSelector.TargetType.ALL;
                    this.characterType = BattleTargetSelector.CharacterType.ALL;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.PetsInBag:
                    this.targetType = BattleTargetSelector.TargetType.ALL;
                    this.characterType = BattleTargetSelector.CharacterType.PET;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.Fere:
                    this.targetType = BattleTargetSelector.TargetType.PLAYER;
                    this.characterType = BattleTargetSelector.CharacterType.COUPLE;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.EnemyPlayer:
                    this.targetType = BattleTargetSelector.TargetType.ENEMY;
                    this.characterType = BattleTargetSelector.CharacterType.PLAYER;
                    this.selfType = BattleTargetSelector.SelfType.NOTSELF;
                    break;
                case AppDto.Skill.UserTargetScopeType.MyTeamPlayer:
                    this.targetType = BattleTargetSelector.TargetType.PLAYER;
                    this.characterType = BattleTargetSelector.CharacterType.PLAYER;
                    this.selfType = BattleTargetSelector.SelfType.SELF;
                    break;
                default:
                    this.targetType = BattleTargetSelector.TargetType.ALL;
                    this.characterType = BattleTargetSelector.CharacterType.ALL;
                    this.selfType = BattleTargetSelector.SelfType.SELF;
                    break;
            }
            GameDebuger.TODO("if (skill.battleType == EquipmentActiveSkill.BattleType_PVP)\n        {\n            characterType = CharacterType.HERO;\n        }");
            this.lifeState = BattleTargetSelector.LifeState.ALL;
            this.selectorType = BattleTargetSelector.SelectorType.SKILL;
        },
        SetTargets: function (source, targets){
            this.monsterTargets = targets;
            this.monsterSource = source;
        },
        GetSkill: function (){
            return this.skill;
        },
        IsCoupleSKill: function (){
            GameDebuger.TODO("if (skill != null)\n        {\n            return skill.relationType == Skill.RelationTypeEnum_Couple;\n        }\n        else");
            return false;
        },
        IsSingleTarget: function (){
            return this.singleTarget;
        },
        getTargetType: function (){
            return this.targetType;
        },
        GetLifeState: function (){
            return this.lifeState;
        },
        GetSelectorType: function (){
            return this.selectorType;
        },
        GetSelfType: function (){
            return this.selfType;
        },
        IsTargetTypeMatch: function (choosePet, mc){
            if (this.targetType == BattleTargetSelector.TargetType.ALL)
                return true;
            if (this.targetType == BattleTargetSelector.TargetType.ENEMY && mc.side == MonsterController.MonsterSide.Enemy)
                return true;
            if (this.targetType == BattleTargetSelector.TargetType.PLAYER && mc.side == MonsterController.MonsterSide.Player)
                return true;
            if (this.targetType == BattleTargetSelector.TargetType.SELF && choosePet.GetId() == mc.GetId())
                return true;
            return false;
        },
        IsLifeStateMatch: function (mc){
            GameDebuger.Log(this.lifeState.toString(), null);
            if (this.lifeState == BattleTargetSelector.LifeState.ALL)
                return true;
            if (this.lifeState == BattleTargetSelector.LifeState.DEAD && mc.IsDead())
                return true;
            if (this.lifeState == BattleTargetSelector.LifeState.ALIVE && !mc.IsDead())
                return true;
            return false;
        },
        IsSelfTypeMatch: function (choosePet, mc){
            if (this.selfType == BattleTargetSelector.SelfType.NOTSELF){
                return choosePet.GetId() != mc.GetId();
            }
            else {
                return true;
            }
        },
        IsCharacterTypeMatch: function (choosePet, mc){
            if (this.characterType == BattleTargetSelector.CharacterType.HERO){
                return mc.IsMainCharactor();
            }
            else if (this.characterType == BattleTargetSelector.CharacterType.PET){
                return mc.IsPet() || mc.IsChild();
            }
            else if (this.characterType == BattleTargetSelector.CharacterType.NOTPET){
                return !(mc.IsPet() || mc.IsChild());
            }
            else if (this.characterType == BattleTargetSelector.CharacterType.COUPLE){
                return mc.IsMyCouple();
            }
            else if (this.characterType == BattleTargetSelector.CharacterType.PLAYER){
                return mc.IsPlayer();
            }
            else {
                return true;
            }
        },
        CanSetTarget: function (choosePet, mc){
            if (this.skill != null && this.skill.id == BattleManager.GetDefenseSkillId()){
                return false;
            }
            if (!this.IsTargetTypeMatch(choosePet, mc))
                return false;
            if (!this.IsSelfTypeMatch(choosePet, mc))
                return false;
            if (!this.IsCharacterTypeMatch(choosePet, mc))
                return false;
            if (this.skill.id == BattleManager.GetCaptureSkillId()){
                GameDebuger.TODO("if (mc.IsMonster())\n            {\n                Pet pet = mc.videoSoldier.monster.pet;\n                if (pet != null)\n                {\n                    return true;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n            else");
                return false;
            }
            return true;
        },
        CanSetCaptureTarget: function (choosePet, mc){
            if (this.skill.id == BattleManager.GetCaptureSkillId()){
                GameDebuger.TODO("if (mc.IsMonster())\n            {\n                Pet pet = mc.videoSoldier.monster.pet;\n                         if (ModelManager.Player.GetPlayerLevel() >= pet.companyLevel)\n                         {\n                             return true;\n                         }\n                         else\n                {\n                    TipManager.AddTip(string.Format(\'捕捉{0}需要等级{1}级\', pet.name.WrapColor(ColorConstant.Color_Tip_Item), pet.companyLevel.WrapColor(ColorConstantV3.Color_Green_Str)));\n                    return false;\n                }\n            }\n            else");
                return false;
            }
            else {
                return true;
            }
        },
        IsMainCharactor: function (){
            return !(this.monsterSource.IsPet() || this.monsterSource.IsChild());
        },
        IsItemSkill: function (){
            return this.skill.id == BattleManager.GetUseItemSkillId();
        },
        IsCommandSkill: function (){
            return this.skill.id == BattleManager.GetCommandSkillId();
        },
        GetSkillId: function (){
            return this.skill.id;
        },
        GetSkillLogicId: function (){
            return this.skill.logicId;
        },
        GetTargetSoldierId: function (){
            return this.monsterTargets;
        },
        getSelectParam: function (){
            return System.String.Format$$String$$Object$$Object$$Object("IsMainCharactor={0} GetSkillId={1} GetTargetSoldierId={2}", this.IsMainCharactor(), this.GetSkillId(), this.GetTargetSoldierId());
        }
    }
};
JsTypes.push(BattleTargetSelector);
var GuideVideo = {
    fullname: "GuideVideo",
    baseTypeName: "AppDto.Video",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.Video.ctor.call(this);
        }
    }
};
JsTypes.push(GuideVideo);
var MonsterController = {
    fullname: "MonsterController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            MonsterController.TargetClickEffectPath = GameEffectConst.GetGameEffectPath("game_eff_2017" /* GameEffectConst.Effect_CharactorClick */);
            MonsterController.SummonEffectPath = GameEffectConst.GetGameEffectPath("game_eff_2007" /* GameEffectConst.Effect_Summon */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._allSkillIds = null;
            this._backToOriginPosition = false;
            this._currentHP = 0;
            this._currentMP = 0;
            this._currentSP = 0;
            this._delayShoutContent = null;
            this._firstAnimation = true;
            this._lastBodyShiftDistance = 0;
            this._modelDisplayer = null;
            this._modelStyleInfo = null;
            this._playSkillCallback = null;
            this._propertyController = null;
            this._skillIds = null;
            this.actionEnd = null;
            this.battleMonsterBuff = null;
            this.battleTargetSelector = null;
            this.buffStateMaps = null;
            this.dead = false;
            this.floatTextPlaying = false;
            this.floatTextQueue = new System.Collections.Generic.Queue$1.ctor(System.String.ctor);
            this.HasDestroyEffect = false;
            this.HasDestroyMe = false;
            this.hpSlider = null;
            this.lastHP = 0;
            this.lastSP = 0;
            this.leave = false;
            this.maxHP = 0;
            this.maxMP = 0;
            this.maxSP = 0;
            this.modifyHP = 0;
            this.modifyMP = 0;
            this.modifySP = 0;
            this.modifyMagicMana = 0;
            this.monsterName = null;
            this.monsterNameShow = true;
            this.monsterOrder = null;
            this.monsterOrderArrow = null;
            this.monsterPosition = null;
            this._mTrans = null;
            this.NeedReady = false;
            this.mIsInCD = false;
            this.originPosition = new UnityEngine.Vector3.ctor();
            this.originRotation = new UnityEngine.Vector3.ctor();
            this.ShoutDialogueId = 0;
            this.showMessageEffect = MonsterController.ShowMessageEffect.DODGE;
            this.side = MonsterController.MonsterSide.Player;
            this.target = null;
            this.targetReference = 0;
            this.videoSoldier = null;
            this._showSelectEffect = false;
            this._selectView = null;
            this.skillTarget = null;
            this._modifySP = 0;
            this.mModelCopy = null;
            this.mMonsterOptionStateManager = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        IsInCD$$: "System.Boolean",
        get_IsInCD: function (){
            return this.mIsInCD;
        },
        set_IsInCD: function (value){
            if (this.mIsInCD != value){
                this.mIsInCD = value;
                GameEventCenter.SendEvent$1$$Event$1$$T(MonsterController.ctor, GameEvent.BATTLE_UI_CD_STATUS_UPDATE, this);
            }
        },
        currentHP$$: "System.Int32",
        get_currentHP: function (){
            return this._currentHP;
        },
        set_currentHP: function (value){
            this._currentHP = UnityEngine.Mathf.Clamp$$Int32$$Int32$$Int32(value, 0, this.maxHP);
        },
        currentMP$$: "System.Int32",
        get_currentMP: function (){
            return this._currentMP;
        },
        set_currentMP: function (value){
            this._currentMP = UnityEngine.Mathf.Clamp$$Int32$$Int32$$Int32(value, 0, this.maxMP);
        },
        currentSP$$: "System.Int32",
        get_currentSP: function (){
            return this._currentSP;
        },
        set_currentSP: function (value){
            this.UpdateCurrentSP(UnityEngine.Mathf.Clamp$$Int32$$Int32$$Int32(value, 0, this.maxSP));
        },
        Awake: function (){
            this._mTrans = this.get_transform();
        },
        ClearMessageEffect: function (cleanAll){
            this.modifyHP = 0;
            this.modifyMP = 0;
            this.modifySP = 0;
            this.modifyMagicMana = 0;
            this.lastHP = 0;
            this.lastSP = -1 /* -1 */;
            this.showMessageEffect = 0;
        },
        AddMessageEffect: function (effect){
            GameDebuger.Log(effect.toString(), null);
            this.showMessageEffect = this.showMessageEffect | effect;
        },
        existMessageEffect: function (effect){
            return (this.showMessageEffect & effect) != 0;
        },
        InitMonster: function (data, _side, showFashion){
            this.side = _side;
            this.videoSoldier = data;
            this.set_IsInCD(false);
            this.maxHP = data.maxHp;
            this.set_currentHP(data.hp);
            GameDebuger.TODO("maxMP = data.maxMp;");
            GameDebuger.TODO("currentMP = data.mp;");
            this.maxSP = data.maxSp;
            this.lastSP = data.sp;
            this.set_currentSP(this.lastSP);
            if (this.IsPlayerMainCharactor()){
                this._skillIds = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                this._skillIds.Add(data.defaultSkillId);
                this._skillIds = DemoSimulateHelper.GetMainCharacterSkillIDList(data);
                GameDebuger.TODO("List<int> fskills = new List<int>();\n            Faction faction = GetFaction();\n            fskills.Add(faction.mainFactionSkillId);\n            fskills.AddRange(faction.propertyFactionSkillIds);\n\n\n            for (int i = 0, len = fskills.Count; i < len; i++)\n            {\n                FactionSkill factionSkill = DataCache.getDtoByCls<FactionSkill>(fskills[i]);\n\n                for (int j = 0, len2 = factionSkill.skillInfos.Count; j < len2; j++)\n                {\n                    SkillInfo info = factionSkill.skillInfos[j];\n                    if (info.skill.activeSkill &&\n                        ModelManager.FactionSkill.GetFactionSkillLevel(factionSkill.id) >=\n                        info.acquireFactionSkillLevel)\n                    {\n                        _skillIds.Add(info.skillId);\n                    }\n                }\n            }");
            }
            GameDebuger.TODO("if (MainUIViewController.Instance != null)\n        {\n            if (IsPlayerMainCharactor())\n            {\n                _propertyController = MainUIViewController.Instance.GetPlayerProperyController();\n            }\n            else if (IsPlayerPet())\n            {\n                _propertyController = MainUIViewController.Instance.GetPetProperyController();\n            }\n        }");
            if (this._propertyController != null){
                this._propertyController.SetupStatusBarFunc($CreateDelegate(this, this.OnStatusBarClick));
                this.UpdateToProperyController();
            }
            this.InitBuffStateMaps();
            GameDebuger.TODO("InitPet(ModelStyleInfo.ToInfoWithNpcAppearanceDto(data, npcAppearanceDto, showFashion));");
            this.InitPet(ModelStyleInfo.ToInfoWithNpcAppearanceDto(data, showFashion));
            this.get_gameObject().set_name(this.side + "_" + this.GetId() + "_" + this.GetModel());
            this.InitHudText();
        },
        DelayInitBattleMount: function (){
            this.GetMountBattleEffect();
            this.GetMountDamageffect();
            this.GetBattleGroundMount();
            if (this._showSelectEffect){
                this.ShowSelectEffect(false);
            }
        },
        InitPetModel: function (){
            this._modelDisplayer = new ModelDisplayer.ctor(this.get_gameObject(), $CreateDelegate(this, this.OnLoadModelFinish), false);
            this._modelDisplayer.SetLookInfo(this._modelStyleInfo);
        },
        OnLoadModelFinish: function (){
            this.get_gameObject().set_layer(UnityEngine.LayerMask.NameToLayer("BattleActor" /* GameTag.Tag_BattleActor */));
            this.get_gameObject().set_tag("BattleActor" /* GameTag.Tag_BattleActor */);
            this.Initialize();
            this.Invoke("DelayInitBattleMount", 0.05);
        },
        InitPet: function (modelStyleInfo){
            this._modelStyleInfo = modelStyleInfo;
            this.get_gameObject().set_tag("BattleActor" /* GameTag.Tag_BattleActor */);
            this.originPosition = this._mTrans.get_position();
            this.originRotation = this._mTrans.get_rotation().get_eulerAngles();
            this.InitPetModel();
        },
        MoveTo: function (target, targetOffset, animation, time, rotation, needFinishTurn){
            var targetPosition = UnityEngine.Vector3.op_Addition(target.get_position(), UnityEngine.Vector3.op_Multiply$$Vector3$$Single(target.TransformDirection$$Vector3(UnityEngine.Vector3.get_forward()), targetOffset));
            this._mTrans.LookAt$$Transform(target);
            this._mTrans.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(rotation.x, this._mTrans.get_eulerAngles().y, rotation.z));
            this.Goto(targetPosition, time, animation, 0, false, false, needFinishTurn);
        },
        Goto: function (position, time, animationName, delay, turn, catchMode, needFinishTurn){
            if (animationName != null){
                this.PlayAnimation(animationName, null);
            }
            if (turn){
                this._mTrans.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this._mTrans.get_eulerAngles().x, this._mTrans.get_eulerAngles().y + 180, this._mTrans.get_eulerAngles().z));
            }
            var totalDis = UnityEngine.Vector3.Distance(this._mTrans.get_position(), position);
            time = totalDis / (catchMode ? 3 /* ModelHelper.DefaultBattleCatchSpeed */ * (turn ? 2 : 1) : 25 /* ModelHelper.DefaultBattleModelSpeed */);
            this.get_ModelCopy().ShowCopy();
            DG.Tweening.ShortcutExtensions.DOKill$$Component$$Boolean(this._mTrans, false);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetDelay$1(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOMove$$Transform$$Vector3$$Single$$Boolean(this._mTrans, position, time, false), delay), 1), $CreateAnonymousDelegate(this, function (){
                this.GotoComplete(needFinishTurn);
            }));
            return time;
        },
        GotoComplete: function (needFinishTurn){
            if (needFinishTurn){
                this._mTrans.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.originRotation.x, this.originRotation.y + 180, this.originRotation.z));
            }
            else {
                this._mTrans.set_eulerAngles(this.originRotation);
            }
            this.PlayAnimation("battle" /* ModelHelper.Anim_battle */, null);
            if (this.actionEnd != null)
                this.actionEnd("move");
        },
        ReturnToOrigin: function (){
            if (UnityEngine.Vector3.op_Inequality(this._mTrans.get_position(), this.originPosition))
                this.GoBack(0.1, UnityEngine.Vector3.get_zero(), null, false, 0, false);
        },
        GoBack: function (time, rotation, animationName, callbackWhenFinished, delayTime, catchMode){
            if (animationName != null){
                this.PlayAnimation(animationName, null);
            }
            var position = this.originPosition;
            this._mTrans.set_eulerAngles(UnityEngine.Vector3.op_Addition(this.originRotation, rotation));
            var totalDis = UnityEngine.Vector3.Distance(this._mTrans.get_position(), position);
            time = totalDis / (catchMode ? 3 /* ModelHelper.DefaultBattleCatchSpeed */ : 25 /* ModelHelper.DefaultBattleModelSpeed */);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetDelay$1(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOMove$$Transform$$Vector3$$Single$$Boolean(this._mTrans, position, time, false), delayTime), 1), $CreateAnonymousDelegate(this, function (){
                this.GotoBackComplete(callbackWhenFinished);
            }));
        },
        GotoBackComplete: function (callbackWhenFinished){
            this.get_ModelCopy().HideCopy();
            this._mTrans.set_eulerAngles(this.originRotation);
            if (!callbackWhenFinished)
                return;
            if (this.actionEnd != null)
                this.actionEnd("moveback");
        },
        PlayStateAnimation: function (){
            this.CheckStateAnimation();
            if (!this.IsDead()){
                this.PlayIdleAnimation();
            }
        },
        CheckStateAnimation: function (){
            if (this.IsDead() == false){
                this._modelDisplayer.SetActive(true);
                this.HideShadow();
            }
        },
        PlayIdleAnimation: function (){
            this.PlayAnimation("battle" /* ModelHelper.Anim_battle */, null);
            this._modelDisplayer.SetSoulEffectActive(true);
        },
        PlayDieAnimation: function (needCallback){
            if (this._modelDisplayer.IsAnimatorReady()){
                var animatorState = this._modelDisplayer.GetCurrentAnimatorStateInfo(1 /* ModelHelper.Animator_Layer_BattleLayer */);
                if (animatorState.IsName("death" /* ModelHelper.Anim_death */) == false){
                    if (needCallback){
                        this.PlayAnimation("death" /* ModelHelper.Anim_death */, $CreateDelegate(this, this.OnDieFinishCallback));
                    }
                    else {
                        this.PlayAnimation("death" /* ModelHelper.Anim_death */, null);
                    }
                }
            }
            this._modelDisplayer.SetSoulEffectActive(false);
            this.HideShadow();
        },
        OnDieFinishCallback: function (anim, length){
            this.Invoke("OnFadeEffectFinish", length);
        },
        OnFadeEffectFinish: function (){
            this.AnimatinCallback();
        },
        InitDieState: function (){
            this.HideShadow();
            this._modelDisplayer.SetActive(false);
        },
        HideShadow: function (){
        },
        BodyShift: function (distance, time, direction, shiftBackDelay, backToOriginPosition){
            this.CancelInvoke$$String("BodShiftComplete");
            this._lastBodyShiftDistance = distance;
            this._backToOriginPosition = backToOriginPosition;
            var position = this._mTrans.get_position();
            var moveDir = new UnityEngine.Vector3.ctor();
            if (direction == 0)
                moveDir = UnityEngine.Vector3.get_up();
            else if (direction == 1)
                moveDir = UnityEngine.Vector3.op_UnaryNegation(UnityEngine.Vector3.get_up());
            else if (direction == 2)
                moveDir = UnityEngine.Vector3.get_forward();
            else if (direction == 3)
                moveDir = UnityEngine.Vector3.op_UnaryNegation(UnityEngine.Vector3.get_forward());
            position = UnityEngine.Vector3.op_Addition(position, UnityEngine.Vector3.op_Multiply$$Vector3$$Single(this._mTrans.TransformDirection$$Vector3(moveDir), distance));
            if (time == 0){
                this._mTrans.set_position(position);
            }
            else {
                DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOMove$$Transform$$Vector3$$Single$$Boolean(this._mTrans, position, time, false), 1), $CreateAnonymousDelegate(this, function (){
                    this.BodShiftCompleteDelay(shiftBackDelay);
                }));
            }
        },
        BodShiftComplete: function (){
            this.GoBackFromShit(0.1);
        },
        BodShiftCompleteDelay: function (delay){
            if (delay == 0){
                this.BodShiftComplete();
            }
            else if (delay > 0){
                this.Invoke("BodShiftComplete", delay);
            }
        },
        GoBackFromShit: function (time){
            if (this._modelDisplayer.IsAnimatorReady()){
                var animatorState = this._modelDisplayer.GetCurrentAnimatorStateInfo(1 /* ModelHelper.Animator_Layer_BattleLayer */);
                if (animatorState.IsName("death" /* ModelHelper.Anim_death */) == false){
                    if (animatorState.IsName("def" /* ModelHelper.Anim_def */) == false){
                        this.PlayAnimation("hit2" /* ModelHelper.Anim_hit2 */, null);
                    }
                    else {
                        this.PlayAnimation("battle" /* ModelHelper.Anim_battle */, null);
                    }
                }
            }
            var position = this.originPosition;
            if (this._backToOriginPosition == false){
                var moveDir = UnityEngine.Vector3.get_forward();
                position = this._mTrans.get_position();
                position = UnityEngine.Vector3.op_Addition(position, UnityEngine.Vector3.op_Multiply$$Vector3$$Single(this._mTrans.TransformDirection$$Vector3(moveDir), this._lastBodyShiftDistance));
            }
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOMove$$Transform$$Vector3$$Single$$Boolean(this._mTrans, position, time, false), 1), $CreateDelegate(this, this.BodShiftBackComplete));
        },
        BodShiftBackComplete: function (){
            this.AnimatinCallback();
        },
        RotateToOriginDirection: function (time){
            DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DORotate$$Transform$$Vector3$$Single$$RotateMode(this._mTrans, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, this.originRotation.y, 0), time, 0), 1);
        },
        PlayNormalActionInfo: function (name, duration){
            this.CancelInvoke$$String("AnimatinCallback");
            this.CancelInvoke$$String("PlayIdleAnimation");
            this.CancelInvoke$$String("CheckAnimationCallback");
            this.CancelInvoke$$String("CheckAnimationIdleCallback");
            if (duration == 0){
                this.PlayAnimation(name, $CreateAnonymousDelegate(this, function (arg1, arg2){
                    if (arg2 == 0){
                        this.Invoke("CheckAnimationCallback", 0.05);
                    }
                    else {
                        this.Invoke("AnimatinCallback", arg2);
                    }
                }));
            }
            else {
                this.PlayAnimation(name, $CreateAnonymousDelegate(this, function (){
                }));
                this.Invoke("AnimatinCallback", duration);
            }
        },
        CheckAnimationCallback: function (){
            if (this._modelDisplayer.IsAnimatorReady()){
                var animatorState = this._modelDisplayer.GetCurrentAnimatorStateInfo(1 /* ModelHelper.Animator_Layer_BattleLayer */);
                this.Invoke("AnimatinCallback", animatorState.get_length() - 0.05);
            }
            else {
                this.Invoke("AnimatinCallback", 0.5);
            }
        },
        CheckAnimationIdleCallback: function (){
            if (this._modelDisplayer.IsAnimatorReady()){
                var animatorState = this._modelDisplayer.GetCurrentAnimatorStateInfo(1 /* ModelHelper.Animator_Layer_BattleLayer */);
                this.Invoke("PlayIdleAnimation", animatorState.get_length() - 0.05);
            }
            else {
                this.Invoke("PlayIdleAnimation", 0.5);
            }
        },
        AnimatinCallback: function (){
            if (this.actionEnd != null){
                this.actionEnd("normal");
            }
            else {
                this.PlayStateAnimation();
            }
        },
        PlayAnimation: function (name, animClipCallBack){
            var crossFade = false;
            var checkSameAnim = false;
            if (name == "death" /* ModelHelper.Anim_death */){
                checkSameAnim = true;
            }
            if (name == "battle" /* ModelHelper.Anim_battle */){
                checkSameAnim = true;
            }
            if (this._firstAnimation){
                this._firstAnimation = false;
                checkSameAnim = false;
            }
            if (this._modelDisplayer.IsAnimatorReady()){
                var animatorState = this._modelDisplayer.GetCurrentAnimatorStateInfo(1 /* ModelHelper.Animator_Layer_BattleLayer */);
                if (animatorState.IsName("hit" /* ModelHelper.Anim_hit */) || animatorState.IsName("hit2" /* ModelHelper.Anim_hit2 */)){
                    if (name == "battle" /* ModelHelper.Anim_battle */){
                        return;
                    }
                }
            }
            this._modelDisplayer.PlayAnimateWithCallback(name, crossFade, animClipCallBack, checkSameAnim, 1 /* ModelHelper.Animator_Layer_BattleLayer */);
        },
        Initialize: function (){
            this.InitHudText();
            if (this.get_currentHP() <= 0){
                this.dead = true;
                this.PlayDieAnimation(false);
            }
            if (this.videoSoldier.buffs != null){
                for (var i = 0,len = this.videoSoldier.buffs.get_Count(); i < len; i++){
                    var state = this.videoSoldier.buffs.get_Item$$Int32(i);
                    this.AddBuffState(state, false);
                }
            }
            this.PlayStateAnimation();
            this.Invoke("ShowPetShoutContent", 0.5);
        },
        RetreatFromBattle: function (mode, delayTime){
            this.RemoveAllBuff();
            switch (mode){
                case MonsterController.RetreatMode.Normal:
                    this.LeaveBattle();
                    break;
                case MonsterController.RetreatMode.Fly:
                    var autoRotate = NGUITools.AddMissingComponent$1(AutoRotation.ctor, this.get_gameObject());
                    autoRotate.rotationSpeed = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 40, 0);
                    var addVec;
                    if (this.side == MonsterController.MonsterSide.Enemy){
                    addVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(10, 0, 0);
                }
                    else {
                    addVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-10 /* -10f */, 0, 0);
                }
                    this.Goto(UnityEngine.Vector3.op_Addition(this._mTrans.get_position(), addVec), 0.7, "run" /* ModelHelper.Anim_run */, 0, false, false, false);
                    this.Invoke("LeaveBattle", 0.7);
                    break;
                case MonsterController.RetreatMode.Flash:
                    var rendererFlicker = NGUITools.AddMissingComponent$1(RendererFlicker.ctor, this.get_gameObject());
                    rendererFlicker.flashDelay = delayTime + 0.2;
                    rendererFlicker.flashSpeed = 0.2;
                    this.Invoke("LeaveBattle", delayTime + 1);
                    break;
                case MonsterController.RetreatMode.Run:
                    this.Invoke("DoRetreatAction", delayTime);
                    break;
            }
        },
        DoRetreatAction: function (){
            this.RotationToBack();
            var effpath = GameEffectConst.GetGameEffectPath("game_eff_2005" /* GameEffectConst.Effect_Retreat */);
            var addVec = UnityEngine.Vector3.get_zero();
            if (this.side == MonsterController.MonsterSide.Player){
                addVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-7 /* -7f */, 0, 0);
            }
            else {
                addVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(7, 0, 0);
            }
            OneShotSceneEffect.BeginFollowEffect(effpath, this.get_transform(), 1.2, 1, null);
            this.Goto(UnityEngine.Vector3.op_Addition(this._mTrans.get_position(), addVec), 1.2, "run" /* ModelHelper.Anim_run */, 0, false, false, false);
            this.Invoke("LeaveBattle", 1.2);
        },
        LeaveBattle: function (){
            if (BattleManager.get_Instance().IsInBattle()){
                GameEventCenter.SendEvent$1$$Event$1$$T(MonsterController.ctor, GameEvent.BATTLE_FIGHT_REMOVEMONSTER, this);
            }
            this.DestroyMe();
        },
        DestroyMe: function (){
            if (this.HasDestroyMe){
                return;
            }
            this.set_IsInCD(false);
            this.HasDestroyMe = true;
            this.CancelInvoke$$String("DoDelayShout");
            GameObjectExt.RemoveComponent$1$$Component(AutoRotation.ctor, this);
            var rendererFlicker = this.GetComponent$1(RendererFlicker.ctor);
            if (UnityEngine.Object.op_Inequality(rendererFlicker, null)){
                rendererFlicker.Dispose();
                UnityEngine.Object.Destroy$$Object(rendererFlicker);
            }
            if (null != this.mModelCopy){
                this.mModelCopy.Dispose();
                this.mModelCopy = null;
            }
            if (null != this.mMonsterOptionStateManager){
                this.mMonsterOptionStateManager.Dispose();
                this.mMonsterOptionStateManager = null;
            }
            this.DestroyPetModel();
            this.DestroyEffect();
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        },
        DestroyPetModel: function (){
            this.DestroyBattleMount();
            this._modelDisplayer.Destory();
            this.RemoveAllBuff();
            this.DestroyHPSlider();
            this.DestroyMonsterName();
            this.DestroyMonsterOrder();
            this.DestroyMonsterOrderArrow();
            this.DestroyMonsterPosition();
            this.DestroyMonsterSelectView();
            if (this._propertyController != null){
                this._propertyController.RemoveStatusBarFunc($CreateDelegate(this, this.OnStatusBarClick));
            }
        },
        DestroyEffect: function (){
            this.HasDestroyEffect = true;
        },
        PlayInjure: function (){
            if (this.existMessageEffect(MonsterController.ShowMessageEffect.DODGE) || this.existMessageEffect(MonsterController.ShowMessageEffect.CRITICAL) || this.existMessageEffect(MonsterController.ShowMessageEffect.IMMUNE)){
                this.AddStatusEffect();
                this.AddHPMPValue();
            }
            else {
                this.AddHPMPValue();
                this.AddStatusEffect();
            }
        },
        AddHPMPValue: function (){
            var critical = this.existMessageEffect(MonsterController.ShowMessageEffect.CRITICAL);
            if (this.get_currentHP() + this.modifyHP > this.maxHP){
                this.modifyHP = this.maxHP - this.get_currentHP();
            }
            this.set_currentHP(this.get_currentHP() + this.modifyHP);
            this.set_currentMP(this.get_currentMP() + this.modifyMP);
            this.set_currentSP(this.get_currentSP() + this.modifySP);
            this.videoSoldier.hp = this.get_currentHP();
            GameDebuger.TODO("videoSoldier.mp = currentMP;");
            this.videoSoldier.sp = this.get_currentSP();
            GameDebuger.TODO("videoSoldier.magicMana = magicMana;");
            if (this.get_currentHP() <= 0){
                this.dead = true;
            }
            else {
                this.dead = false;
            }
            if (this.IsDead()){
                if (this.lastSP >= 0){
                    this.set_currentSP(this.lastSP);
                }
            }
            this.UpdateToProperyController();
            if (this.modifyHP != 0){
                if (critical){
                    this.AddFloatText("CHP," /* "CHP" + "," */ + this.modifyHP);
                }
                else {
                    this.AddFloatText("HP," /* "HP" + "," */ + this.modifyHP);
                }
            }
            this.PlayFloatText();
        },
        UpdateToProperyController: function (){
            if (this._propertyController != null){
                GameDebuger.TODO("if (BattleController.Instance.IsGuideBattle)\n            {\n                _propertyController.SetHpSlider(_currentHP, maxHP);\n                _propertyController.SetMpSlider(_currentMP, maxMP);\n            }\n            else");
                if (this.IsPlayerMainCharactor()){
                    ModelManager.get_Player().UpdateHpMpSp(this._currentHP, this._currentMP, this._currentSP);
                }
                else if (this.IsPlayerPet()){
                    GameDebuger.TODO("ModelManager.Pet.UpdateBattlePetHpMp(_currentHP, _currentMP, videoSoldier.id);");
                }
            }
        },
        AddFloatText: function (info){
            this.floatTextQueue.Enqueue(info);
        },
        PlayFloatText: function (){
            if (this.floatTextQueue.get_Count() == 0){
                return;
            }
            if (this.floatTextPlaying){
                return;
            }
            var info = this.floatTextQueue.Dequeue();
            var infos = info.Split$$Char$Array([","]);
            var type = infos[0];
            var modifyValue = System.Int32.Parse$$String(infos[1]);
            var hudTransform = this.GetMountDamageffect();
            switch (type){
                case "CHP":
                    BattleStatusEffectManager.get_Instance().PlayDamage(this.GetNumValue(modifyValue), UnityEngine.Color.get_white(), hudTransform, 1, modifyValue > 0 ? 3 : 2, 5);
                    break;
                case "HP":
                    BattleStatusEffectManager.get_Instance().PlayDamage(this.GetNumValue(modifyValue), UnityEngine.Color.get_white(), hudTransform, 1, modifyValue > 0 ? 1 : 0, 1);
                    break;
            }
            this.floatTextPlaying = true;
            this.Invoke("DelayPlayFloatText", 0.6);
        },
        DelayPlayFloatText: function (){
            this.floatTextPlaying = false;
            this.PlayFloatText();
        },
        GetNumValue: function (num){
            if (num > 0){
                return "+" + num;
            }
            return UnityEngine.Mathf.Abs$$Int32(num).toString();
        },
        GetRageValue: function (num){
            GameDebuger.Log("GetRageValue : " + num, null);
            if (num > 0){
                return "+" + num;
            }
            return "-" + UnityEngine.Mathf.Abs$$Int32(num);
        },
        AddStatusEffect: function (){
            BattleStatusEffectManager.get_Instance().AddEffect(this);
        },
        PlaySkillName$$Skill$$Action: function (skill, playSkillCallback){
            BattleStatusEffectManager.get_Instance().PlaySkillName$$MonsterController$$Skill(this, skill);
            var model = DataCache.getDtoByCls$1(AppDto.Model.ctor, this._modelStyleInfo.defaultModelId);
            var skillSound = "";
            if (model != null){
                if (skill.skillAttackType == AppDto.Skill.SkillType.Phy){
                    skillSound = model.phySkillSound;
                }
                else {
                    skillSound = model.magicSkillSound;
                }
            }
            if (!System.String.IsNullOrEmpty(skillSound)){
                AudioManager.get_Instance().PlaySound(skillSound);
            }
            this._playSkillCallback = playSkillCallback;
            this.Invoke("DelayPlaySkillNameCallback", 0.5);
        },
        PlaySkillName$$String: function (name){
            BattleStatusEffectManager.get_Instance().PlaySkillName$$MonsterController$$String(this, name);
        },
        DelayPlaySkillNameCallback: function (){
            if (this._playSkillCallback != null){
                this._playSkillCallback();
                this._playSkillCallback = null;
            }
        },
        PlayMsg: function (msg){
            BattleStatusEffectManager.get_Instance().PlayMsg(this, msg);
        },
        GetMountingPoint: function (point){
            return this._modelDisplayer.GetMountingPoint(point);
        },
        GetMountHUD: function (){
            return this.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
        },
        GetMountFace: function (){
            return this.GetMountingPoint("Mount_face" /* ModelHelper.Mount_face */);
        },
        GetMountHit: function (){
            return this.GetMountingPoint("Mount_Hit" /* ModelHelper.Mount_hit */);
        },
        GetMountShadow: function (){
            return this.GetMountingPoint("Mount_Shadow" /* ModelHelper.Mount_shadow */);
        },
        GetMountBattleEffect: function (){
            var hudTransform = this._mTrans.FindChild("floatTextGO");
            if (UnityEngine.Object.op_Equality(hudTransform, null)){
                hudTransform = this.GetMountHUD();
                if (UnityEngine.Object.op_Equality(hudTransform, null)){
                    hudTransform = this.get_transform();
                }
                else {
                    var floatTextGO = NGUITools.AddChild$$GameObject(this.get_gameObject());
                    floatTextGO.set_name("floatTextGO");
                    var floatTrans = floatTextGO.get_transform();
                    floatTrans.set_position(hudTransform.get_position());
                    floatTrans.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, floatTrans.get_localPosition().y + 0.4, 0));
                    hudTransform = floatTextGO.get_transform();
                }
            }
            return hudTransform;
        },
        GetMountDamageffect: function (){
            var hudTransform = this._mTrans.FindChild("damageTextGO");
            if (UnityEngine.Object.op_Equality(hudTransform, null)){
                hudTransform = this.GetMountHUD();
                if (UnityEngine.Object.op_Equality(hudTransform, null)){
                    hudTransform = this.get_transform();
                }
                else {
                    var floatTextGO = NGUITools.AddChild$$GameObject(this.get_gameObject());
                    var floatTrans = floatTextGO.get_transform();
                    floatTextGO.set_name("damageTextGO");
                    floatTrans.set_position(hudTransform.get_position());
                    hudTransform = floatTrans;
                }
            }
            return hudTransform;
        },
        GetBattleGroundMount: function (){
            var hudTransform = this._mTrans.FindChild("groundMountGO");
            if (UnityEngine.Object.op_Equality(hudTransform, null)){
                hudTransform = this.GetMountShadow();
                if (UnityEngine.Object.op_Equality(hudTransform, null)){
                    hudTransform = this.get_transform();
                }
                else {
                    var go = NGUITools.AddChild$$GameObject(this.get_gameObject());
                    go.set_name("groundMountGO");
                    go.get_transform().set_position(hudTransform.get_position());
                    go.get_transform().set_rotation(hudTransform.get_rotation());
                    hudTransform = go.get_transform();
                }
            }
            return hudTransform;
        },
        DestroyBattleMount: function (){
            var hudTransform = this._mTrans.FindChild("floatTextGO");
            if (UnityEngine.Object.op_Inequality(hudTransform, null)){
                UnityEngine.Object.Destroy$$Object(hudTransform.get_gameObject());
            }
            hudTransform = this._mTrans.FindChild("groundMountGO");
            if (UnityEngine.Object.op_Inequality(hudTransform, null)){
                UnityEngine.Object.Destroy$$Object(hudTransform.get_gameObject());
            }
        },
        CancelEffect: function (){
            this.PlayIdleAnimation();
            this.CancelInvoke$$String("PlayIdleAnimation");
        },
        TransparentEffectShader: function (alpha){
        },
        ResetRotation: function (){
            this._mTrans.set_eulerAngles(this.originRotation);
        },
        RotationToBack: function (){
            this._mTrans.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.originRotation.x, this.originRotation.y - 180, this.originRotation.z));
        },
        InstantiateGameObject: function (effectName, target, isOnGround, follow, delayTime){
            if (System.String.IsNullOrEmpty(effectName))
                return;
            if (UnityEngine.Object.op_Equality(target, null)){
                target = this.get_gameObject().get_transform();
            }
            if (UnityEngine.Object.op_Equality(target, null))
                return;
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effectName, $CreateAnonymousDelegate(this, function (effGo){
                if (UnityEngine.Object.op_Equality(effGo, null)){
                    GameDebuger.Log("Instantiate Failed", null);
                    return;
                }
                if (UnityEngine.Object.op_Equality(target, null) || UnityEngine.Object.op_Equality(target.get_gameObject(), null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                    return;
                }
                var t = effGo.get_transform();
                if (follow){
                    GameObjectExt.AddPoolChild(target.get_gameObject(), effGo, 0, 0, 0);
                    var noRotation = GameObjectExt.GetMissingComponent$1(NoRotation.ctor, effGo);
                    if (isOnGround){
                        noRotation.fixYToZero = true;
                    }
                }
                else {
                    GameObjectExt.AddPoolChild(LayerManager.get_Root().EffectsAnchor, effGo, 0, 0, 0);
                    t.set_position(target.get_position());
                }
                if (isOnGround)
                    t.set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(t.get_position().x, 0.02, t.get_position().z));
                if (delayTime > 0){
                    var effectTime = GameObjectExt.GetMissingComponent$1(EffectTime.ctor, effGo);
                    effectTime.time = delayTime;
                    effectTime.OnFinish = $CreateDelegate(this, this.OnEffectTimeFinish);
                }
            }), null, 100);
        },
        OnEffectTimeFinish: function (effectTime){
            if (UnityEngine.Object.op_Inequality(effectTime, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effectTime.get_gameObject(), false);
            }
        },
        InstantiateGameObjectToParent: function (effectName, target, x, y, z){
            if (System.String.IsNullOrEmpty(effectName))
                return;
            if (UnityEngine.Object.op_Equality(target, null))
                return;
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effectName, $CreateAnonymousDelegate(this, function (go){
                if (UnityEngine.Object.op_Equality(go, null) || this.HasDestroyEffect){
                    GameDebuger.Log("Instantiate GameObject Failed", null);
                    return;
                }
                var effectGO = GameObjectExt.AddPoolChild(target.get_gameObject(), go, x, y, z);
                effectGO.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.01, 0));
                var shadow = GameObjectExt.GetMissingComponent$1(BattleShadow.ctor, effectGO);
                shadow.Setup(target);
            }), null, 100);
        },
        OnJoinBattleEffectFinish: function (){
            this.InitPetModel();
        },
        PlayTargetSelectEffect: function (){
        },
        StopTargetSelectEffect: function (){
        },
        PlayTargetClickEffect: function (){
            this.InstantiateGameObject(MonsterController.TargetClickEffectPath, this.GetMountShadow(), false, true, 2);
        },
        PlayTargetOrderArrowEffect: function (){
            if (UnityEngine.Object.op_Equality(this.monsterOrderArrow, null)){
                this.monsterOrderArrow = BattleMonsterOrderArrow.CreateNew(this, $CreateDelegate(this, this.DestroyMonsterOrderArrow));
            }
        },
        PlaySummonEffect: function (){
            this.InstantiateGameObject(MonsterController.SummonEffectPath, this.GetMountShadow(), false, false, 5);
            AudioManager.get_Instance().PlaySound("sound_battle_summon");
        },
        OnStatusBarClick: function (){
            GameDebuger.TODO("BattleController.Instance.ShowMonsterStatus(this);");
        },
        ShowPetShoutContent: function (){
            this.CheckActionShout();
            GameDebuger.TODO("if (videoSoldier.monsterType == Monster.MonsterType_Baobao ||\n            videoSoldier.monsterType == Monster.MonsterType_Mutate)\n        {\n            Pet pet = videoSoldier.monster.pet;\n            if (string.IsNullOrEmpty(pet.shoutContent) == false)\n            {\n                Shout(pet.shoutContent);\n            }\n        }");
        },
        CheckActionShout: function (){
            if (this.ShoutDialogueId > 0){
                GameDebuger.TODO("NpcDialog npcDialog = DataCache.getDtoByCls<NpcDialog>(ShoutDialogueId);\n            if (npcDialog != null)\n            {\n                Shout(npcDialog.dialogContent[0]);\n            }");
                this.ShoutDialogueId = 0;
            }
        },
        DelayShout: function (content, delayTime){
            GameDebuger.Log("DelayShout " + content, null);
            this._delayShoutContent = content;
            this.Invoke("DoDelayShout", delayTime);
        },
        DoDelayShout: function (){
            if (!System.String.IsNullOrEmpty(this._delayShoutContent)){
                this.Shout(this._delayShoutContent);
                this._delayShoutContent = null;
            }
        },
        Shout: function (content){
            var mountHUD = this.GetMountHUD();
            GameDebuger.TODO("if (mountHUD == null)\n        {\n            mountHUD = this.gameObject.transform;\n            ProxyManager.ActorPopo.Open(GetId(), mountHUD, content, LayerManager.Root.BattleCamera, 2f, 3f);\n        }\n        else\n        {\n            ProxyManager.ActorPopo.Open(GetId(), mountHUD, content, LayerManager.Root.BattleCamera, 0f, 3f);\n        }");
        },
        InitHudText: function (){
            if (UnityEngine.Object.op_Equality(this.hpSlider, null)){
                this.hpSlider = BattleMonsterHPSlider.CreateNew(this);
            }
            else {
                this.hpSlider.UpdateFollowTarget(this);
            }
            if (UnityEngine.Object.op_Equality(this.monsterName, null)){
                this.monsterName = BattleMonsterName.CreateNew(this);
                GameDebuger.TODO("ShowMonsterName(BattleController.Instance.monsterNameShow, true);");
            }
            else {
                this.monsterName.UpdateFollowTarget(this);
            }
            if (this._selectView == null){
                this._selectView = MonsterSelectView.CreateNew(this, $CreateDelegate(this, this.OnMonsterSelect));
                this.HideSelectEffect();
            }
            else {
                this._selectView.UpdateFollowTarget(this);
            }
            if (UnityEngine.Object.op_Inequality(this.monsterPosition, null)){
                this.monsterPosition.UpdateFollowTarget(this);
            }
            if (UnityEngine.Object.op_Inequality(this.monsterOrder, null)){
                this.monsterOrder.UpdateFollowTarget(this);
            }
        },
        IsPlayerMainCharactor: function (){
            if (this.IsPlayerCtrlCharactor() && this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.MainCharactor){
                return true;
            }
            return false;
        },
        IsPlayerPet: function (){
            if (this.IsPlayerCtrlCharactor() && (this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.Pet || this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.Child)){
                return true;
            }
            return false;
        },
        GetId: function (){
            return this.videoSoldier.id;
        },
        GetStyle: function (){
            var charactor = this.videoSoldier.get_charactor();
            GameDebuger.TODO("Monster monster = videoSoldier.monster;\n        if (monster != null)\n        {\n            return monster.texture;\n        }");
            return charactor.texture;
        },
        GetModel: function (){
            return this._modelStyleInfo.defaultModelId;
        },
        GetGrade: function (){
            return this.videoSoldier.grade;
        },
        GetFaction: function (){
            return this.videoSoldier.get_faction();
        },
        GetSkillIds: function (){
            if (this._skillIds == null){
                this._skillIds = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                this._skillIds = DemoSimulateHelper.GetMainCharacterSkillIDList(this.videoSoldier);
            }
            return this._skillIds;
        },
        GetSuperSkill: function (){
            GameDebuger.LogError("[TEMP]获取目标的奥义技能", null);
            if (null == this._skillIds || this._skillIds.get_Count() <= 0)
                return 0;
            return this._skillIds.get_Item$$Int32(this._skillIds.get_Count() - 1);
        },
        GetAllSkillIds: function (){
            if (this._allSkillIds == null){
                this._allSkillIds = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                this._allSkillIds.AddRange(this.GetSkillIds());
                GameDebuger.TODO("if (videoSoldier.fereId > 0)\n            {\n                List<int> list = ModelManager.FactionSkill.GetCoupleSkillIds();\n                List<int> list = null;\n                if (list != null)\n                {\n                    _allSkillIds.AddRange(list);\n                }\n            }");
            }
            return this._allSkillIds;
        },
        IsCoupleAtBattle: function (){
            GameDebuger.TODO("if (videoSoldier.fereId > 0)\n        {\n            MonsterController mc = MonsterManager.Instance.GetMonsterFromSoldierID(videoSoldier.fereId);\n            return mc != null;\n        }");
            return false;
        },
        GetFriendDegree: function (){
            GameDebuger.TODO("return ModelManager.Friend.GetFriendDegree(videoSoldier.fereId);");
            return 1;
        },
        GetName: function (){
            return this.videoSoldier.name;
        },
        IsPet: function (){
            return this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.Pet;
        },
        IsChild: function (){
            return this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.Child;
        },
        IsMonster: function (){
            return this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.Monster;
        },
        IsMainCharactor: function (){
            return this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.MainCharactor;
        },
        IsCrew: function (){
            return this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.Crew;
        },
        GetCharactorType: function (){
            return this.videoSoldier.charactorType;
        },
        IsPlayerCtrlCharactor: function (){
            if (this.GetPlayerId() == ModelManager.get_Player().GetPlayerId()){
                return true;
            }
            return false;
        },
        IsMyCouple: function (){
            var hero = MonsterManager.get_Instance().GetMyHero();
            if (UnityEngine.Object.op_Inequality(hero, null)){
                GameDebuger.TODO("return IsMainCharactor() && GetPlayerId() == hero.videoSoldier.fereId;");
                return false;
            }
            return false;
        },
        IsPlayer: function (){
            return this.GetCharactorType() == AppDto.GeneralCharactor.CharactorType.MainCharactor;
        },
        GetPlayerId: function (){
            return this.videoSoldier.playerId;
        },
        GetCharacter: function (){
            return this.videoSoldier.get_charactor();
        },
        IsDead: function (){
            return this.dead;
        },
        NeedLeave: function (){
            if (this.IsMonster() || this.IsPet() || this.IsChild()){
                return this.leave;
            }
            return false;
        },
        InitBuffStateMaps: function (){
            this.buffStateMaps = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, AppDto.VideoBuffAddTargetState.ctor);
            this.battleMonsterBuff = this.get_gameObject().AddComponent$1(BattleMonsterBuff.ctor);
            this.battleMonsterBuff.SetMonster(this);
        },
        DestroyHPSlider: function (){
            if (UnityEngine.Object.op_Inequality(this.hpSlider, null)){
                this.hpSlider.Destroy();
                this.hpSlider = null;
            }
        },
        DestroyMonsterName: function (){
            if (UnityEngine.Object.op_Inequality(this.monsterName, null)){
                this.monsterName.Destroy();
                this.monsterName = null;
            }
        },
        DestroyMonsterOrder: function (){
            if (UnityEngine.Object.op_Inequality(this.monsterOrder, null)){
                this.monsterOrder.Destroy();
                this.monsterOrder = null;
            }
        },
        DestroyMonsterOrderArrow: function (){
            if (UnityEngine.Object.op_Inequality(this.monsterOrderArrow, null)){
                this.monsterOrderArrow.Destroy();
                this.monsterOrderArrow = null;
            }
        },
        DestroyMonsterPosition: function (){
            if (UnityEngine.Object.op_Inequality(this.monsterPosition, null)){
                this.monsterPosition.Destroy();
                this.monsterPosition = null;
            }
        },
        ShowMonsterName: function (show, atonce){
            if (UnityEngine.Object.op_Inequality(this.monsterName, null)){
                if (this.monsterNameShow != show){
                    this.monsterNameShow = show;
                    if (show){
                        if (atonce){
                            UIHelper.PlayAlphaTween(this.monsterName.label, 1, 1, 0.3, 0, null);
                        }
                        else {
                            UIHelper.PlayAlphaTween(this.monsterName.label, 0, 1, 0.3, 0, null);
                        }
                    }
                    else {
                        if (atonce){
                            UIHelper.PlayAlphaTween(this.monsterName.label, 0, 0, 0.3, 0, null);
                        }
                        else {
                            UIHelper.PlayAlphaTween(this.monsterName.label, 1, 0, 0.3, 0, null);
                        }
                    }
                }
            }
        },
        showOrder: function (order){
            if (System.String.IsNullOrEmpty(order)){
                this.DestroyMonsterOrder();
            }
            else {
                if (UnityEngine.Object.op_Equality(this.monsterOrder, null)){
                    this.monsterOrder = BattleMonsterOrder.CreateNew(this);
                }
                this.monsterOrder.showOrder(order);
            }
        },
        GetFormationPosition: function (formation, battlePosition){
            var list = formation.playerPosition;
            return list.IndexOf$$T(battlePosition) + 1;
        },
        ShowPosition: function (formation){
            var formationPosition = 0;
            if (this.IsPet() || this.IsChild()){
                var mc = MonsterManager.get_Instance().GetPlayerMainCharactor(this.GetPlayerId());
                if (UnityEngine.Object.op_Inequality(mc, null)){
                    formationPosition = this.GetFormationPosition(formation, mc.videoSoldier.position);
                }
            }
            else {
                formationPosition = this.GetFormationPosition(formation, this.videoSoldier.position);
            }
            if (formationPosition > 0 && formationPosition <= 5){
                if (UnityEngine.Object.op_Equality(this.monsterPosition, null)){
                    this.monsterPosition = BattleMonsterPosition.CreateNew(this);
                }
                this.monsterPosition.showPosition(formationPosition);
                this.monsterPosition.get_gameObject().SetActive(true);
            }
            else {
                this.HidePosition();
            }
        },
        HidePosition: function (){
            if (UnityEngine.Object.op_Inequality(this.monsterPosition, null)){
                this.monsterPosition.get_gameObject().SetActive(false);
            }
        },
        GetDebugInfo: function (){
            return "[" + this.videoSoldier.id + " " + this.videoSoldier.name + " " + this.get_currentHP() + "/" + this.maxHP + " " + this.get_currentMP() + "/" + this.maxMP + " " + this.videoSoldier.position + " " + this.GetCharactorType() + " " + this.IsDead() + "]";
        },
        SetSelectSkill: function (skill, pSkillAdditionParam){
            this.battleTargetSelector = null;
            this.battleTargetSelector = new BattleTargetSelector.ctor(skill);
            this.battleTargetSelector.SkillParam = pSkillAdditionParam;
        },
        GetTargetType: function (){
            if (this.battleTargetSelector != null)
                return this.battleTargetSelector.getTargetType();
            return BattleTargetSelector.TargetType.NONE;
        },
        SetSkillTarget$$Int64: function (targets){
            if (this.battleTargetSelector != null){
                this.battleTargetSelector.SetTargets(this, targets);
            }
            this.NeedReady = false;
            GameDebuger.TODO("UpdateSkillCD();");
        },
        GetBattleTargetSelector: function (){
            return this.battleTargetSelector;
        },
        GetLastSelectedSkill: function (){
            if (null == this.battleTargetSelector)
                return null;
            return this.battleTargetSelector.GetSkill();
        },
        ShowSelectEffect: function (isCouple){
            if (this.NeedLeave()){
                return;
            }
            if (this._selectView == null){
                this._selectView = MonsterSelectView.CreateNew(this, $CreateDelegate(this, this.OnMonsterSelect));
            }
            if (this._selectView != null){
                this._selectView.Show(true, isCouple);
            }
            this._showSelectEffect = true;
        },
        OnMonsterSelect: function (){
            GameEventCenter.SendEvent$1$$Event$1$$T(MonsterController.ctor, GameEvent.BATTLE_FIGHT_CHOOSETARGETPET, this);
        },
        HideSelectEffect: function (){
            if (this._selectView != null){
                this._selectView.Show(false, false);
            }
            this._showSelectEffect = false;
        },
        IsShowSelectEffect: function (){
            return this._showSelectEffect;
        },
        GetSelectEffectUIWidget: function (){
            if (this._selectView != null){
                return this._selectView._selectButton.get_sprite();
            }
            return null;
        },
        DestroyMonsterSelectView: function (){
            if (this._selectView != null){
                this._selectView.Destroy();
                this._selectView = null;
            }
        },
        AddBuffState: function (buff, tip){
            if (buff.get_battleBuff().group == 1 /* (int)SkillBuff.BuffGroup.SEAL */){
                ModelManager.get_BattleDemo().DealCDForInterrupttedByDebuff(buff.id);
                BattleInstController.get_Instance().RemoveRound(buff.id);
            }
            if (buff.battleBuffId == DataCache.GetStaticConfigValue(2083 /* AppStaticConfigs.DRUG_RESISTANT_BUFF_ID */, 0) && this.side == MonsterController.MonsterSide.Enemy)
                return;
            var removeList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            if (this.isHideBuff(buff)){
                this.TransparentEffectShader(0.5);
            }
            for (var i = 0,len = removeList.get_Count(); i < len; i++){
                this.RemoveBuff(removeList.get_Item$$Int32(i));
            }
            if (this.buffStateMaps.ContainsKey(buff.battleBuffId)){
                this.buffStateMaps.set_Item$$TKey(buff.battleBuffId, buff);
                this.battleMonsterBuff.AddOrResetBuff(buff, tip);
            }
            else {
                this.buffStateMaps.Add(buff.battleBuffId, buff);
                this.battleMonsterBuff.AddOrResetBuff(buff, tip);
            }
            GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, this.GetId(), buff.get_battleBuff(), true);
        },
        UpdateBuffState: function (){
            var removeList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var $it2 = this.buffStateMaps.GetEnumerator();
            while ($it2.MoveNext()){
                var keyVal = $it2.get_Current();
                var buff = keyVal.get_Value();
                if (this.UpdateBuffRemainTimesReturnRemovable(buff))
                    removeList.Add(keyVal.get_Key());
                if (buff.battleBuffId == DataCache.GetStaticConfigValue(2083 /* AppStaticConfigs.DRUG_RESISTANT_BUFF_ID */, 0)){
                    var num = 2 + ((buff.effectValue / 7) | 0);
                    buff.effectValue -= num;
                }
            }
            for (var i = 0,len = removeList.get_Count(); i < len; i++){
                this.RemoveBuff(removeList.get_Item$$Int32(i));
            }
        },
        UpdateBuffRemainTimesReturnRemovable: function (pVideoBuffAddTargetState){
            if (null == pVideoBuffAddTargetState)
                return false;
            if (ModelManager.get_BattleDemo().PreFinishedActionPlayerUID() != this.GetId())
                return false;
            if (pVideoBuffAddTargetState.remainTimes > 0){
                pVideoBuffAddTargetState.remainTimes--;
                if (pVideoBuffAddTargetState.remainTimes == 0)
                    return true;
            }
            return false;
        },
        RemoveBuffs: function (removeState){
            for (var i = 0,len = removeState.buffId.get_Count(); i < len; i++){
                this.RemoveBuff(removeState.buffId.get_Item$$Int32(i));
            }
        },
        RemoveBuff: function (buffId){
            if (this.buffStateMaps.ContainsKey(buffId)){
                var buff = this.buffStateMaps.get_Item$$TKey(buffId);
                if (buff != null){
                    if (this.isHideBuff(buff)){
                        this._modelDisplayer.SetShadowActive(true, 1);
                    }
                    this.buffStateMaps.Remove(buffId);
                    this.battleMonsterBuff.RemoveBuff(buff);
                    GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, this.GetId(), buff.get_battleBuff(), false);
                }
            }
        },
        ClearBuff: function (){
            var removeList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var $it3 = this.buffStateMaps.GetEnumerator();
            while ($it3.MoveNext()){
                var keyVal = $it3.get_Current();
                var buff = keyVal.get_Value();
                GameDebuger.TODO("if (buff.round != -1)");
                removeList.Add(keyVal.get_Key());
            }
            for (var i = 0,len = removeList.get_Count(); i < len; i++){
                this.RemoveBuff(removeList.get_Item$$Int32(i));
            }
        },
        RemoveAllBuff: function (){
            this.buffStateMaps.Clear();
            this.battleMonsterBuff.RemoveAllBuff();
        },
        isHideBuff: function (buff){
            GameDebuger.TODO("return buff.battleBuff.buffType == Buff.BattleBuffType_Hidden;");
            return false;
        },
        ContainsBuff: function (buffId){
            return this.buffStateMaps.ContainsKey(buffId);
        },
        FindBuffByGroup: function (pBuffGroup){
            var tEnum = this.buffStateMaps.GetEnumerator();
            var tVideoBuffAddTargetState;
            while (tEnum.MoveNext()){
                tVideoBuffAddTargetState = tEnum.get_Current().get_Value();
                if (tVideoBuffAddTargetState.get_battleBuff().group == pBuffGroup)
                    return tVideoBuffAddTargetState.battleBuffId;
            }
            return 0;
        },
        GetBuffs: function (){
            return CollectionExtension.ToList$1(AppDto.VideoBuffAddTargetState.ctor, this.buffStateMaps.get_Values());
        },
        GetNeedUIEffectBuff: function (){
            GameDebuger.LogError("[TEMP]获取需要UI环绕特效的BUFF", null);
            var tBuffId = this.FindBuffByGroup(AppDto.SkillBuff.BuffGroup.SEAL);
            if (tBuffId > 0)
                return DataCache.getDtoByCls$1(AppDto.SkillBuff.ctor, tBuffId);
            return null;
        },
        CanChoose: function (pSkill, pShowTip){
            if (this.FindBuffByGroup(AppDto.SkillBuff.BuffGroup.SEAL) > 0){
                if (pShowTip)
                    TipManager.AddTip("正在封印状态，无法使用技能", false, false, "");
                return false;
            }
            if (!ModelManager.get_BattleDemo().IsSkillPointEnoughToUseSkill(this.GetId(), pSkill)){
                TipManager.AddTip("技能点不足，无法使用技能", false, false, "");
                return false;
            }
            return true;
        },
        UpdateSkillCD: function (pDuration, pPlayReverse, pOnCdFinish){
            this.hpSlider.ShowCD(pDuration, pPlayReverse, pOnCdFinish);
        },
        UpdateMagicManaInRoundStart: function (){
            GameDebuger.TODO("if (magicMana < ModelManager.MagicEquipmentUpGrade.MaxMagicValue)\n            magicMana += ModelManager.MagicEquipmentUpGrade.AddMagicValueInRoundStart;");
        },
        SetSkillTarget$$MonsterController: function (enemyTarget){
            this.skillTarget = enemyTarget;
            if (UnityEngine.Object.op_Equality(this.skillTarget, null)){
                GameDebuger.LogError("SetSkillTarget is null", null);
            }
        },
        GetSkillTarget: function (){
            return this.skillTarget;
        },
        PlayMoveNode: function (node){
            var go = new UnityEngine.GameObject.ctor();
            var targetTransform = go.get_transform();
            var distance = node.distance;
            var needFinishTurn = false;
            if (node.center){
                targetTransform.set_position(UnityEngine.Vector3.get_zero());
                distance = 0;
            }
            else {
                if (UnityEngine.Object.op_Inequality(this.skillTarget, null)){
                    targetTransform.set_position(this.skillTarget._mTrans.get_position());
                    targetTransform.set_rotation(this.skillTarget._mTrans.get_rotation());
                    if (this.side.CompareTo(this.skillTarget.side) == 0){
                        needFinishTurn = true;
                    }
                }
                else {
                    targetTransform.set_position(UnityEngine.Vector3.get_zero());
                    distance = 0;
                }
            }
            this.MoveTo(targetTransform, distance, node.name, node.time, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(node.rotateX, node.rotateY, node.rotateZ), needFinishTurn);
            UnityEngine.Object.Destroy$$Object(go);
        },
        PlayNormalNode: function (node){
            this.PlayNormalActionInfo(node.name, node.delayTime);
        },
        PlayMoveBackNode: function (node, catchMode){
            this.GoBack(node.time, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(node.rotateX, 180, node.rotateZ), node.name, true, 0, catchMode);
        },
        ModelCopy$$: "ModelCopy",
        get_ModelCopy: function (){
            if (null == this.mModelCopy)
                this.mModelCopy = new ModelCopy.ctor(this.get_gameObject());
            return this.mModelCopy;
        },
        PlayHideEffect: function (playTime){
            this._modelDisplayer.HideEffect();
            this.Invoke("DelayHideEffect", playTime);
        },
        DelayHideEffect: function (){
            this._modelDisplayer.AppearEffect();
        },
        UpdateCurrentSP: function (pTargetValue){
            if (this._currentSP != pTargetValue){
                this._currentSP = pTargetValue;
                var tUID = this.GetId();
                if (tUID == ModelManager.get_Player().GetPlayerId())
                    GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_UI_SP_UPDATED, tUID, this._currentSP);
            }
        },
        MonsterOptionStateManager$$: "MonsterOptionStateManager",
        get_MonsterOptionStateManager: function (){
            if (null == this.mMonsterOptionStateManager)
                this.mMonsterOptionStateManager = new MonsterOptionStateManager.ctor(this);
            return this.mMonsterOptionStateManager;
        }
    }
};
JsTypes.push(MonsterController);
var BattleActionPlayer = {
    fullname: "BattleActionPlayer",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            BattleActionPlayer.HasPlayFulEff = false;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._actionIndex = 0;
            this._actionList = null;
            this._actionNode = null;
            this._atOnce = false;
            this._completed = false;
            this._finishAction = false;
            this._finishTime = false;
            this._gameAction = null;
            this._gamePlayer = null;
            this._injurerId = 0;
            this._injurerIds = null;
            this._isAttack = false;
            this._lastAction = false;
            this._maxWaitTime = 0;
            this._mc = null;
            this._needWaitNormalAction = false;
            this._oriInjurerIds = null;
            this._protectMonster = null;
            this._sameTarget = false;
            this._skillConfigInfo = null;
            this._startTime = 0;
            this._stateGroup = null;
            this._takeDamageActionIndex = 0;
            this._targetId = 0;
            this._videoInsideSkillAction = null;
            this._waitingEffects = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        SetInjureInfo: function (injureIds){
            this._oriInjurerIds = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            this._oriInjurerIds.AddRange(injureIds.ToArray());
        },
        Init: function (instPlayer, gameAction, isAttack, skillConfigInfo, targetId, atOnce){
            this._gamePlayer = instPlayer;
            this._gameAction = gameAction;
            this._isAttack = isAttack;
            this._skillConfigInfo = skillConfigInfo;
            this._targetId = targetId;
            this._atOnce = atOnce;
            if (this._isAttack){
                this._actionList = this._skillConfigInfo.attackerActions;
                this._takeDamageActionIndex = this.GetTakeDamageActionIndex(this._actionList);
            }
            else {
                this._actionList = this._skillConfigInfo.injurerActions;
            }
        },
        GetTargetId: function (){
            return this._targetId;
        },
        Reset: function (){
            this._finishAction = false;
            this._finishTime = false;
            this._needWaitNormalAction = false;
            this._actionIndex = 0;
            if (this._isAttack){
                BattleActionPlayer.HasPlayFulEff = false;
            }
            if (this._isAttack && this._completed && !this._atOnce && this._sameTarget){
                this._actionIndex = this._takeDamageActionIndex;
            }
            if (UnityEngine.Object.op_Inequality(this._mc, null)){
                this._mc.actionEnd = null;
            }
            if (UnityEngine.Object.op_Inequality(this._protectMonster, null)){
                this._protectMonster.actionEnd = null;
            }
            this._completed = false;
            this._startTime = 0;
            this._maxWaitTime = 0;
        },
        Play$$VideoTargetStateGroup$$Int64$$Boolean: function (stateGroup, injureId, lastAction){
            this._stateGroup = stateGroup;
            this._sameTarget = this._injurerId == injureId;
            this._injurerId = injureId;
            this._lastAction = lastAction;
            this.Play$$VideoTargetStateGroup(stateGroup);
        },
        Play$$VideoTargetStateGroup$$List$1$Int64$$Boolean: function (stateGroup, injureIds, lastAction){
            this._stateGroup = stateGroup;
            this._injurerIds = injureIds;
            if (this._injurerIds.get_Count() > 0){
                this._injurerId = injureIds.get_Item$$Int32(0);
            }
            this._lastAction = lastAction;
            this.Play$$VideoTargetStateGroup(stateGroup);
        },
        Play$$VideoTargetStateGroup: function (stateGroup){
            this._stateGroup = stateGroup;
            this._mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(this._targetId);
            if (UnityEngine.Object.op_Equality(this._mc, null)){
                GameDebuger.Log("战斗指令对应的怪物已经不存在 怪物id=" + this._targetId, null);
                this._actionIndex = this._actionList.get_Count();
                this._completed = true;
            }
            this.Reset();
            this.PlayNextAction();
        },
        PlayNextAction: function (){
            if (this._isAttack && UnityEngine.Object.op_Inequality(this._mc, null) && this._gameAction.skillId == BattleManager.GetRetreatSkillId()){
                var retreatState = this.GetRetreatState();
                if (retreatState != null){
                    TipManager.AddTip(System.String.Format$$String$$Object("逃跑成功率{0}%", UnityEngine.Mathf.RoundToInt(retreatState.rate * 100)), false, false, "");
                    this.DoRetreatAction(retreatState.success);
                }
                else {
                    this.CompleteActions();
                }
                return;
            }
            if (this._isAttack && UnityEngine.Object.op_Inequality(this._mc, null) && this._gameAction.skillId == BattleManager.GetDefenseSkillId()){
                this.CompleteActions();
                return;
            }
            if (this._isAttack && UnityEngine.Object.op_Inequality(this._mc, null) && this._gameAction.skillId == BattleManager.GetProtectSkillId()){
                this.CompleteActions();
                return;
            }
            this.LogPlayerInfo();
            if (this._actionIndex < this._actionList.get_Count()){
                if (this._isAttack && !this._atOnce && this._sameTarget && this._actionIndex == this._takeDamageActionIndex + 1 && this._lastAction == false){
                    this.CompleteActions();
                }
                else {
                    if (this._isAttack && this._stateGroup.strikeBackAction != null && this._actionIndex == this._takeDamageActionIndex + 1){
                        this.CompleteActions();
                    }
                    else {
                        if (UnityEngine.Object.op_Inequality(this._mc, null)){
                            if (this._mc.IsDead() && this._mc.leave){
                                this.CompleteActions();
                            }
                            else {
                                var actionNode = this._actionList.get_Item$$Int32(this._actionIndex);
                                this._actionIndex++;
                                this.PlayActionInfo(actionNode);
                            }
                        }
                        else {
                            GameDebuger.LogError("战斗指令对应的怪物已经不存在 怪物id=" + this._targetId, null);
                            this.CompleteActions();
                        }
                    }
                }
            }
            else {
                this.CompleteActions();
            }
        },
        GetTakeDamageActionIndex: function (list){
            for (var i = 0; i < list.get_Count(); i++){
                var actionInfo = list.get_Item$$Int32(i);
                if (actionInfo.effects != null){
                    for (var j = 0,len = actionInfo.effects.get_Count(); j < len; j++){
                        var info = actionInfo.effects.get_Item$$Int32(j);
                        if (Is(info, TakeDamageEffectInfo.ctor)){
                            return i;
                        }
                    }
                }
            }
            return 0;
        },
        DoRetreatAction: function (success){
            GameDebuger.TODO("BattleController.Instance.GetInstController().TriggerMonsterShount(_mc.GetId(), ShoutConfig.BattleShoutTypeEnum_RunAway);");
            this._mc.RotationToBack();
            this._mc.PlayAnimation("run" /* ModelHelper.Anim_run */, null);
            if (success){
                this.Invoke("DelayRetreatActionSuccess", 1.3);
            }
            else {
                this.Invoke("DelayRetreatActionFail", 1.3);
            }
        },
        DelayRetreatActionSuccess: function (){
            var effpath = GameEffectConst.GetGameEffectPath("game_eff_2005" /* GameEffectConst.Effect_Retreat */);
            var addVec = UnityEngine.Vector3.get_zero();
            if (this._mc.side == MonsterController.MonsterSide.Player){
                addVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-6 /* -6f */, 0, 0);
            }
            else {
                addVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(6, 0, 0);
            }
            if (this._mc.IsMainCharactor()){
                var retreatState = this.GetRetreatState();
                if (retreatState.retreatSoldiers != null){
                    for (var i = 0,len = retreatState.retreatSoldiers.get_Count(); i < len; i++){
                        var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(retreatState.retreatSoldiers.get_Item$$Int32(i));
                        if (UnityEngine.Object.op_Inequality(mc, null) && (mc.IsPet() || mc.IsChild()) && mc.IsDead() == false){
                            GameDebuger.TODO("BattleController.Instance.GetInstController().TriggerMonsterShount(_mc.GetId(), ShoutConfig.BattleShoutTypeEnum_RunAway);");
                            OneShotSceneEffect.BeginFollowEffect(effpath, mc.get_transform(), 0.7, 1, null);
                            mc.RotationToBack();
                            mc.Goto(UnityEngine.Vector3.op_Addition(mc.get_transform().get_position(), addVec), 0.7, "run" /* ModelHelper.Anim_run */, 0, false, false, false);
                        }
                    }
                }
            }
            AudioManager.get_Instance().PlaySound("sound_battle_escape");
            OneShotSceneEffect.BeginFollowEffect(effpath, this._mc.get_transform(), 0.7, 1, null);
            this._mc.Goto(UnityEngine.Vector3.op_Addition(this._mc.get_transform().get_position(), addVec), 0.7, "run" /* ModelHelper.Anim_run */, 0, false, false, false);
            this.Invoke("DelayRetreatActionSuccess2", 0.7);
        },
        DelayRetreatActionSuccess2: function (){
            this._mc.RetreatFromBattle(MonsterController.RetreatMode.Normal, 0);
            this.CompleteActions();
        },
        DelayRetreatActionFail: function (){
            this._mc.PlayAnimation("death" /* ModelHelper.Anim_death */, null);
            this.Invoke("DelayRetreatActionFail2", 0.5);
        },
        DelayRetreatActionFail2: function (){
            this._mc.ResetRotation();
            this._mc.PlayAnimation("battle" /* ModelHelper.Anim_battle */, null);
            this.CompleteActions();
        },
        GetRetreatState: function (){
            for (var i = 0,len = this._stateGroup.targetStates.get_Count(); i < len; i++){
                var state = this._stateGroup.targetStates.get_Item$$Int32(i);
                if (Is(state, AppDto.VideoRetreatState.ctor)){
                    return As(state, AppDto.VideoRetreatState.ctor);
                }
            }
            return null;
        },
        CompleteActions: function (){
            this._completed = true;
            if (UnityEngine.Object.op_Inequality(this._mc, null)){
                this.HandleMonsterAfterAction(this._mc);
            }
            if (this._isAttack && UnityEngine.Object.op_Inequality(this._mc, null) && this._gameAction.skillId == BattleManager.GetRetreatSkillId() && this._mc.IsMainCharactor()){
                var retreatState = this.GetRetreatState();
                if (retreatState.success){
                    GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(System.Int64.ctor, System.Collections.Generic.List$1.ctor, GameEvent.BATTLE_FIGHT_RETREAT_BATTLE, this._mc.GetPlayerId(), retreatState.retreatSoldiers);
                }
                else {
                    this.DelayCheckFinish(0.01);
                }
            }
            else if (this._isAttack && UnityEngine.Object.op_Inequality(this._mc, null) && this._gameAction.skillId == BattleManager.GetSummonSkillId() && this._mc.IsMainCharactor()){
                GameDebuger.TODO("VideoSwtichPetState switchPetState = GetSwtichPetState();\n            if (switchPetState.switchPetSoldier != null)\n            {\n                BattleController.Instance.SwitchPet(switchPetState.switchPetSoldier);\n                DelayCheckFinish(1f);\n            }\n            else\n            {\n                DelayCheckFinish();\n            }");
            }
            else {
                this.DelayCheckFinish(0.01);
            }
            GameDebuger.TODO("else if (_mc != null && GetVideoCallSoldierState() != null)\n        {\n            bool needDelay = false;\n            List<VideoCallSoldierState> callList = GetVideoCallSoldierState();\n            for (int i = 0, len = callList.Count; i < len; i++)\n            {\n                VideoCallSoldierState callSoldierState = callList[i];\n                if (callSoldierState.soldier != null)\n                {\n                    BattleController.Instance.CallPet(callSoldierState.soldier);\n                    needDelay = true;\n                }\n            }\n            //http://oa.cilugame.com/redmine/issues/12895\n            //BattleStateHandler.HandleAllBattleState(_stateGroup.targetStates, false);\n\n            if (needDelay)\n            {\n                DelayCheckFinish(1f);\n            }\n            else\n            {\n                DelayCheckFinish();\n            }\n        }");
        },
        DelayCheckFinish: function (deleyTime){
            this.CancelInvoke$$String("CheckFinish");
            this.Invoke("CheckFinish", deleyTime);
        },
        CheckFinish: function (){
            this._gamePlayer.CheckFinish();
        },
        PlayActionInfo: function (node){
            this._actionNode = node;
            this._finishAction = false;
            this._finishTime = false;
            this._mc.actionEnd = $CreateDelegate(this, this.OnActionEnd);
            this._waitingEffects = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(BaseEffectInfo.ctor, this._actionNode.effects.ToArray());
            this._maxWaitTime = 0;
            if (Is(node, NormalActionInfo.ctor)){
                var normalActionInfo = As(node, NormalActionInfo.ctor);
                this._maxWaitTime = normalActionInfo.startTime + normalActionInfo.delayTime;
                if (this._isAttack == false){
                    this._maxWaitTime += 0.4;
                }
                if (this._isAttack){
                    this._protectMonster = this.GetNextProtectMonster(false);
                    if (UnityEngine.Object.op_Inequality(this._protectMonster, null)){
                        var targetMonster = MonsterManager.get_Instance().GetMonsterFromSoldierID(this.getTargetId());
                        if (UnityEngine.Object.op_Inequality(targetMonster, null)){
                            this._protectMonster.MoveTo(targetMonster.get_transform(), 0.05, null, 0.05, UnityEngine.Vector3.get_zero(), false);
                        }
                        AudioManager.get_Instance().PlaySound("sound_battle_protect");
                    }
                }
            }
            for (var i = 0,len = this._waitingEffects.get_Count(); i < len; i++){
                var effectNode = this._waitingEffects.get_Item$$Int32(i);
                var playTime = effectNode.playTime;
                if (Is(effectNode, TakeDamageEffectInfo.ctor) && this.HasVideoDodgeTargetState(this._stateGroup.targetStates, this.getTargetId())){
                    playTime = 0.1;
                }
                if (playTime > this._maxWaitTime){
                    this._maxWaitTime = playTime;
                }
            }
            if (this._maxWaitTime == 0){
                this._finishTime = true;
            }
            if (Is(this._actionNode, MoveActionInfo.ctor)){
                this.DoMoveAction(Cast(node, MoveActionInfo.ctor));
            }
            else if (Is(this._actionNode, NormalActionInfo.ctor)){
                this._needWaitNormalAction = true;
            }
            else if (Is(this._actionNode, MoveBackActionInfo.ctor)){
                if (this._atOnce == false && this._lastAction == false){
                    this.OnActionEnd(null);
                }
                else {
                    GameDebuger.TODO("VideoCaptureState captureState = GetCaptureState();\n                _mc.PlayMoveBackNode((MoveBackActionInfo)node, captureState != null);");
                    this._mc.PlayMoveBackNode(Cast(node, MoveBackActionInfo.ctor), false);
                }
            }
            this._startTime = UnityEngine.Time.get_time();
            this.Update();
        },
        CaptureSuccess: function (){
            GameDebuger.TODO("VideoCaptureState captureState = GetCaptureState();\n        if (captureState.wildToBaobao)\n        {\n            TipManager.AddTip(string.Format(\'喜从天降，这是一只{0}宝宝\',\n                captureState.pet.name.WrapColor(ColorConstant.Color_Tip_Item)));\n        }");
            this._mc.LeaveBattle();
            this._finishAction = true;
            this.CheckPlayerFinish();
        },
        CaptureFail: function (){
            this._mc.Goto(this._mc.originPosition, 1, "run" /* ModelHelper.Anim_run */, 0, true, true, false);
        },
        DoMoveAction: function (node){
            if (node.center == false){
                var target = MonsterManager.get_Instance().GetMonsterFromSoldierID(this.getTargetId());
                this._mc.SetSkillTarget$$MonsterController(target);
            }
            this._mc.PlayMoveNode(node);
        },
        DoNormalAttackAction: function (node){
            this._mc.PlayNormalNode(node);
        },
        DoNormalInjureAction: function (node){
            if (UnityEngine.Object.op_Inequality(this._mc, null)){
                this.PlayInjureAction(this._mc, node);
            }
        },
        PlayInjureState: function (mc, node, state){
            BattleStateHandler.CheckDeadState(mc, state);
            var actionName = "battle" /* ModelHelper.Anim_battle */;
            var needHit = false;
            if (Is(state, AppDto.VideoDodgeTargetState.ctor)){
                needHit = true;
                actionName = "battle" /* ModelHelper.Anim_battle */;
                mc.BodyShift(1, 0.1, 3, 0.2, false);
            }
            else {
                var videoActionTargetStat = As(state, AppDto.VideoActionTargetState.ctor);
                if (videoActionTargetStat != null){
                    GameDebuger.TODO("if (videoActionTargetStat.hp > 0 || videoActionTargetStat.mp > 0)");
                    if (videoActionTargetStat.hp > 0){
                        needHit = false;
                    }
                    else {
                        GameDebuger.TODO("if (videoActionTargetStat.hp == 0 && videoActionTargetStat.mp == 0)");
                        if (videoActionTargetStat.hp == 0){
                            needHit = false;
                        }
                        else {
                            needHit = true;
                        }
                    }
                }
                else {
                    needHit = false;
                }
                if (needHit){
                    var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, this._gameAction.skillId);
                    if (videoActionTargetStat.soldierStatus == AppDto.VideoSoldier.SoldierStatus.SelfDefense && skill.skillAttackType != AppDto.Skill.SkillType.Magic){
                        actionName = "def" /* ModelHelper.Anim_def */;
                        mc.BodyShift(0.2, 0.2, 3, node.delayTime, false);
                        this.PlayDefenseEffect(mc);
                    }
                    else {
                        actionName = "hit" /* ModelHelper.Anim_hit */;
                        mc.BodyShift(0.4, 0.2, 3, node.delayTime, false);
                    }
                }
                this._videoInsideSkillAction = null;
                this._protectMonster = this.GetNextProtectMonster(true);
                if (UnityEngine.Object.op_Inequality(this._protectMonster, null)){
                    this._videoInsideSkillAction = this.GetNextVideoInsideSkillAction();
                    this._protectMonster.BodyShift(0.4, 0.2, 3, node.delayTime + 0.3, true);
                    this._protectMonster.actionEnd = $CreateDelegate(this, this.OnProtectActionEnd);
                    this.DoPlayNormalAction(this._protectMonster, "hit" /* ModelHelper.Anim_hit */, node.delayTime);
                }
            }
            GameDebuger.TODO("else if (state is VideoCaptureState)\n        {\n            PlayCatchffect(mc);\n        }\n        else if (state is VideoAntiSkillTargetState)\n        {\n            PlayAntiSkillEffect(mc);\n        }");
            var delayTime = node.delayTime;
            if (actionName == "def" /* ModelHelper.Anim_def */){
                delayTime += 0.3;
            }
            if (actionName == ""){
                delayTime = 0.05;
            }
            this.DoPlayNormalAction(mc, actionName, delayTime);
        },
        PlayInjureAction: function (mc, node){
            var targetStateList = this.GetTargetState(this._stateGroup.targetStates, mc.videoSoldier.id);
            if (targetStateList.get_Count() == 0){
                this.OnActionEnd("");
            }
            else {
                for (var i = 0,len = targetStateList.get_Count(); i < len; i++){
                    var state = targetStateList.get_Item$$Int32(i);
                    this.PlayInjureState(mc, node, state);
                }
            }
        },
        GetNextProtectMonster: function (needRemove){
            var monsterId = this._stateGroup.protectSoldierId;
            var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(monsterId);
            return mc;
        },
        GetNextVideoInsideSkillAction: function (){
            return this._stateGroup.protectAction;
        },
        PlayDefenseEffect: function (mc){
            var node = new NormalEffectInfo.ctor();
            node.fly = false;
            node.target = 0;
            node.mount = "Mount_Hit" /* ModelHelper.Mount_hit */;
            this.PlaySpecialEffect(node, "game_eff_2003" /* GameEffectConst.Effect_Defence */, node.target, node.mount, this._mc, mc, 1);
        },
        PlayCatchffect: function (mc){
            var node = new NormalEffectInfo.ctor();
            node.fly = false;
            node.target = 0;
            node.mount = "Mount_Shadow" /* ModelHelper.Mount_shadow */;
            this.PlaySpecialEffect(node, "game_eff_2006" /* GameEffectConst.Effect_Catch */, node.target, node.mount, this._mc, mc, 1);
            AudioManager.get_Instance().PlaySound("sound_battle_capture");
        },
        PlayAntiSkillEffect: function (mc){
            mc.PlayMsg("免疫");
        },
        DoPlayNormalAction: function (mc, action, delayTime){
            if (action == "hit" /* ModelHelper.Anim_hit */){
                var model = DataCache.getDtoByCls$1(AppDto.Model.ctor, mc.GetModel());
                var skillSound = "";
                if (model != null){
                    skillSound = model.hitSound;
                }
                if (!System.String.IsNullOrEmpty(skillSound)){
                    AudioManager.get_Instance().PlaySound(skillSound);
                }
            }
            else if (action == "def" /* ModelHelper.Anim_def */){
                AudioManager.get_Instance().PlaySound("sound_battle_defence");
            }
            if (action == "death" /* ModelHelper.Anim_death */){
                mc.PlayDieAnimation(true);
            }
            else {
                mc.PlayNormalActionInfo(action, delayTime);
            }
        },
        GetTargetState: function (arr, id){
            var targetStateList = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetState.ctor);
            for (var i = 0,len = arr.get_Count(); i < len; i++){
                var state = arr.get_Item$$Int32(i);
                if (state.id == id){
                    if (Is(state, AppDto.VideoBuffAddTargetState.ctor)){
                        continue;
                    }
                    if (Is(state, AppDto.VideoRetreatState.ctor)){
                        continue;
                    }
                    GameDebuger.TODO("if (state is VideoRageTargetState)\n                {\n                    continue;\n                }\n                \n                //              if (state is VideoBuffRemoveTargetState)\n                //              {\n                //                  continue;\n                //              }\n                if (state is VideoSwtichPetState)\n                {\n                    continue;\n                }");
                    targetStateList.Add(state);
                }
            }
            return targetStateList;
        },
        HasVideoDodgeTargetState: function (arr, id){
            var hasDodge = false;
            for (var i = 0,len = arr.get_Count(); i < len; i++){
                var state = arr.get_Item$$Int32(i);
                if (state.id == id){
                    if (Is(state, AppDto.VideoDodgeTargetState.ctor)){
                        hasDodge = true;
                        break;
                    }
                }
            }
            return hasDodge;
        },
        getTargetId: function (){
            return this.GetNextInjureId();
        },
        IsLastActionInfo: function (){
            return this._actionList.IndexOf$$T(this._actionNode) == this._actionList.get_Count() - 1;
        },
        OnActionEnd: function (type){
            this._finishAction = true;
            this.LogPlayerInfo();
            if (this._finishTime == false){
                this.HandleMonsterAfterAction(this._mc);
            }
            else {
                if (this.IsLastActionInfo()){
                    this.HandleMonsterAfterAction(this._mc);
                }
                else {
                    this._mc.PlayIdleAnimation();
                }
            }
            if (this._finishTime){
                this.CheckPlayerFinish();
            }
        },
        HandleMonsterAfterAction: function (monster){
            if (monster.NeedLeave()){
                monster.RetreatFromBattle(MonsterController.RetreatMode.Fly, 0);
            }
            else {
                if (monster.lastHP > 0){
                    monster.set_currentHP(this._mc.lastHP);
                    monster.lastHP = 0;
                    monster.dead = false;
                }
                if (monster.lastSP >= 0 && monster.IsDead()){
                    monster.set_currentSP(this._mc.lastSP);
                }
                if (monster.IsDead()){
                    monster.PlayDieAnimation(true);
                }
                else {
                    monster.PlayStateAnimation();
                }
            }
        },
        CheckPlayerFinish: function (){
            this.LogPlayerInfo();
            if (this._finishAction && this._finishTime && this._completed == false){
                this._mc.actionEnd = null;
                this.PlayNextAction();
            }
        },
        LogPlayerInfo: function (){
        },
        OnProtectActionEnd: function (type){
            this._protectMonster.actionEnd = null;
            if (this._protectMonster.IsDead()){
                this.HandleMonsterAfterAction(this._protectMonster);
            }
            else {
                this._protectMonster.GoBack(0.05, UnityEngine.Vector3.get_zero(), null, false, 0.1, false);
            }
        },
        IsComplete: function (){
            return this._completed;
        },
        GetAttackType: function (){
            var str = "";
            if (this._isAttack){
                str = "攻击方 ";
            }
            else {
                str = "受击方 ";
            }
            if (UnityEngine.Object.op_Inequality(this._mc, null)){
                str += this._mc.GetDebugInfo();
            }
            return str;
        },
        CleanWaitingEffects: function (){
            this._waitingEffects = null;
        },
        Update: function (){
            var passTime = UnityEngine.Time.get_time() - this._startTime;
            if (this._needWaitNormalAction){
                var startTime = (As(this._actionNode, NormalActionInfo.ctor)).startTime;
                if (passTime >= startTime){
                    if (this._isAttack){
                        this.DoNormalAttackAction(Cast(this._actionNode, NormalActionInfo.ctor));
                    }
                    else {
                        this.DoNormalInjureAction(Cast(this._actionNode, NormalActionInfo.ctor));
                    }
                    this._needWaitNormalAction = false;
                }
            }
            if (this._waitingEffects != null){
                var removeNodes = null;
                for (var i = 0,len = this._waitingEffects.get_Count(); i < len; i++){
                    var node = this._waitingEffects.get_Item$$Int32(i);
                    var playTime = node.playTime;
                    if (Is(node, TakeDamageEffectInfo.ctor) && this.HasVideoDodgeTargetState(this._stateGroup.targetStates, this.getTargetId())){
                        playTime = 0.1;
                    }
                    if (passTime >= playTime){
                        this.PlayEffect(node);
                        if (removeNodes == null){
                            removeNodes = new System.Collections.Generic.List$1.ctor(BaseEffectInfo.ctor);
                        }
                        removeNodes.Add(node);
                    }
                }
                if (removeNodes != null){
                    for (var i = 0,len = removeNodes.get_Count(); i < len; i++){
                        var removeNode = removeNodes.get_Item$$Int32(i);
                        this._waitingEffects.Remove(removeNode);
                    }
                    if (this._waitingEffects.get_Count() == 0){
                        this._waitingEffects = null;
                    }
                }
            }
            if (passTime >= this._maxWaitTime && this._finishTime == false){
                this._finishTime = true;
                this.CheckPlayerFinish();
            }
        },
        PlayEffect: function (node){
            if (Is(node, TakeDamageEffectInfo.ctor))
                this.PlayTakeDamage(Cast(node, TakeDamageEffectInfo.ctor));
            else if (Is(node, NormalEffectInfo.ctor)){
                if (this._isAttack == false){
                    var hasDodge = this.HasVideoDodgeTargetState(this._stateGroup.targetStates, this._mc.GetId());
                    if (hasDodge && (As(node, NormalEffectInfo.ctor)).hitEff){
                        return;
                    }
                }
                this.PlayNormalEffect(Cast(node, NormalEffectInfo.ctor));
            }
            else if (Is(node, HideEffectInfo.ctor))
                this.ShowHideEffect(Cast((node), HideEffectInfo.ctor));
            else if (Is(node, ShowInjureEffectInfo.ctor))
                this.ShowInjureEffect(Cast(node, ShowInjureEffectInfo.ctor));
            else if (Is(node, SoundEffectInfo.ctor))
                this.PlaySoundEffect(Cast(node, SoundEffectInfo.ctor));
        },
        GetSkillEffectName: function (skill, skillName){
            if (skillName == null){
                skillName = "";
            }
            if (skillName != ""){
                if (skillName.Contains("skill_") == false && skillName.Contains("game_") == false){
                    var effId = skill.clientEffectType;
                    if (effId == 0){
                        effId = skill.id;
                    }
                    skillName = System.String.Format$$String$$Object$$Object("skill_eff_{0}_{1}", effId, skillName);
                }
                skillName = skillName.toLowerCase();
            }
            return skillName;
        },
        PlayNormalEffect: function (node){
            var skillId = this._gameAction.skillId;
            var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillId);
            var skillName = this.GetSkillEffectName(skill, node.name);
            if (node.name == "full"){
                if (BattleActionPlayer.HasPlayFulEff){
                    return;
                }
                BattleActionPlayer.HasPlayFulEff = true;
            }
            var targetType = node.target;
            var mount = node.mount;
            var clientSkillScale = 10000;
            if (this._isAttack){
                if (node.fly && node.flyTarget == 0){
                    if (this._atOnce == false){
                        var id = this.GetNextInjureId();
                        var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(id);
                        this.PlaySpecialEffect(node, skillName, targetType, mount, this._mc, mc, clientSkillScale);
                    }
                    else {
                        var ids = this.GetInjurerIds();
                        for (var i = 0,len = ids.get_Count(); i < len; i++){
                            var id = ids.get_Item$$Int32(i);
                            var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(id);
                            if (UnityEngine.Object.op_Inequality(mc, null)){
                                this.PlaySpecialEffect(node, skillName, targetType, mount, this._mc, mc, clientSkillScale);
                            }
                        }
                    }
                }
                else {
                    this.PlaySpecialEffect(node, skillName, targetType, mount, this._mc, this._mc.GetSkillTarget(), clientSkillScale);
                }
            }
            else {
                if (targetType == 0){
                    if (UnityEngine.Object.op_Inequality(this._mc, null)){
                        this.PlaySpecialEffect(node, skillName, targetType, mount, this._mc, this._mc.GetSkillTarget(), clientSkillScale);
                    }
                }
                else {
                    this.PlaySpecialEffect(node, skillName, targetType, mount, this._mc, this._mc.GetSkillTarget(), clientSkillScale);
                }
            }
        },
        PlaySpecialEffect: function (node, skillName, targetType, mountName, monster, target, clientSkillScale){
            if (clientSkillScale == 0){
                clientSkillScale = 10000;
            }
            skillName = skillName.toLowerCase();
            var skillPath = PathHelper.GetEffectPath(skillName);
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(skillPath, $CreateAnonymousDelegate(this, function (effectGO){
                if (UnityEngine.Object.op_Equality(effectGO, null)){
                    return;
                }
                if (UnityEngine.Object.op_Equality(monster, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effectGO, false);
                    return;
                }
                GameObjectExt.AddPoolChild(LayerManager.get_Root().EffectsAnchor, effectGO, 0, 0, 0);
                var effectStartPosition = new UnityEngine.Vector3.ctor();
                switch (targetType){
                    case 0:
                        var mountTransform = null;
                        if (System.String.IsNullOrEmpty(mountName) == false){
                        mountTransform = GameObjectExt.GetChildTransform(monster.get_transform(), mountName);
                    }
                        if (UnityEngine.Object.op_Equality(mountTransform, null)){
                        mountTransform = monster.get_gameObject().get_transform();
                    }
                        if (mountName == "Mount_Shadow" /* ModelHelper.Mount_shadow */){
                        effectStartPosition = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(mountTransform.get_position().x, 0, mountTransform.get_position().z);
                    }
                        else {
                        effectStartPosition = mountTransform.get_position();
                    }
                        break;
                    case 1:
                        effectStartPosition = UnityEngine.Vector3.get_zero();
                        break;
                    case 2:
                        effectStartPosition = BattlePositionCalculator.GetZonePosition(monster.side);
                        break;
                    case 3:
                        effectStartPosition = BattlePositionCalculator.GetZonePosition(monster.side == MonsterController.MonsterSide.Player ? MonsterController.MonsterSide.Enemy : MonsterController.MonsterSide.Player);
                        break;
                }
                var offVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(node.offX, node.offY, node.offZ);
                effectStartPosition = UnityEngine.Vector3.op_Addition(effectStartPosition, offVec);
                var trans = effectGO.get_transform();
                trans.set_position(effectStartPosition);
                trans.set_rotation(UnityEngine.Quaternion.get_identity());
                var effectTime = effectGO.GetComponent$1(EffectTime.ctor);
                if (UnityEngine.Object.op_Equality(effectTime, null)){
                    effectTime = effectGO.AddComponent$1(EffectTime.ctor);
                    effectTime.time = 5;
                }
                effectTime.OnFinish = $CreateDelegate(this, this.OnEffectTimeFinish);
                if (node.delayTime > 0){
                    effectTime.time = node.delayTime;
                }
                if (node.loop){
                    effectTime.loopCount = node.loopCount;
                }
                var scaleValue = node.scale / 100;
                scaleValue *= clientSkillScale / 10000;
                var scaler = effectGO.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Equality(scaler, null)){
                    scaler = effectGO.AddComponent$1(ParticleScaler.ctor);
                }
                scaler.SetScale(scaleValue);
                var rotOffY = 0;
                if (node.fixRotation != true){
                    if (this._isAttack == false && monster.side == MonsterController.MonsterSide.Player){
                        rotOffY = 180;
                    }
                    if (this._isAttack && monster.side == MonsterController.MonsterSide.Enemy){
                        rotOffY = 180;
                    }
                }
                trans.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(node.rotX, node.rotY + rotOffY, node.rotZ));
                if (node.follow){
                    trans.set_parent(monster.get_gameObject().get_transform());
                }
                else if (node.fly){
                    var targetPoint = UnityEngine.Vector3.get_zero();
                    switch (node.flyTarget){
                        case 0:
                            var flyTargetTransform = null;
                            if (UnityEngine.Object.op_Equality(target, null)){
                            targetPoint = UnityEngine.Vector3.get_zero();
                            break;
                        }
                            if (System.String.IsNullOrEmpty(node.mount) == false){
                            flyTargetTransform = GameObjectExt.GetChildTransform(target.get_transform(), node.mount);
                        }
                            if (UnityEngine.Object.op_Equality(flyTargetTransform, null)){
                            flyTargetTransform = target.get_gameObject().get_transform();
                        }
                            if (mountName == "Mount_Shadow" /* ModelHelper.Mount_shadow */){
                            targetPoint = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(flyTargetTransform.get_position().x, 0, flyTargetTransform.get_position().z);
                        }
                            else {
                            targetPoint = flyTargetTransform.get_position();
                        }
                            break;
                        case 1:
                            targetPoint = UnityEngine.Vector3.get_zero();
                            break;
                        case 2:
                            break;
                        case 3:
                            break;
                    }
                    var flyOffVec = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(node.flyOffX, node.flyOffY, node.flyOffZ);
                    targetPoint = UnityEngine.Vector3.op_Addition(targetPoint, flyOffVec);
                    var flyTime = node.delayTime;
                    if (flyTime == 0){
                        flyTime = 1;
                    }
                    var effectTrans = effectGO.get_transform();
                    DG.Tweening.ShortcutExtensions.DOMove$$Transform$$Vector3$$Single$$Boolean(effectTrans, targetPoint, flyTime, false);
                }
            }), null, 100);
        },
        OnEffectTimeFinish: function (effectTime){
            if (UnityEngine.Object.op_Inequality(effectTime, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effectTime.get_gameObject(), false);
            }
        },
        ShowHideEffect: function (node){
            this._mc.PlayHideEffect(node.playTime);
        },
        ShowInjureEffect: function (node){
            if (this._isAttack == false){
                if (UnityEngine.Object.op_Inequality(this._mc, null)){
                    BattleStateHandler.HandleBattleState(this._mc.GetId(), this._stateGroup.targetStates, BattleManager.get_Instance().IsInBattle());
                }
                if (UnityEngine.Object.op_Inequality(this._protectMonster, null) && this._videoInsideSkillAction != null){
                    BattleStateHandler.HandleBattleState(this._protectMonster.GetId(), this._videoInsideSkillAction.targetStateGroups.get_Item$$Int32(0).targetStates, BattleManager.get_Instance().IsInBattle());
                }
                GameDebuger.TODO("VideoCaptureState captureState = GetCaptureState();\n            if (captureState != null)\n            {\n                float moveBackTime = 3.4f;\n\n                MonsterController attackMonster = MonsterManager.Instance.GetMonsterFromSoldierID(getAttackerId());\n                moveBackTime = _mc.Goto(attackMonster.originPosition, moveBackTime + 0.2f, ModelHelper.Anim_run, 0.05f,\n                    false, true);\n\n                if (captureState.success)\n                {\n                    Invoke(\'CaptureSuccess\', moveBackTime);\n                }\n                else\n                {\n                    float ranMoveTime = Random.Range(moveBackTime * 0.5f, moveBackTime * 0.8f);\n                    Invoke(\'CaptureFail\', ranMoveTime);\n                }\n            }");
            }
        },
        PlaySoundEffect: function (info){
            var soundName = info.name;
            AudioManager.get_Instance().PlaySound(soundName);
        },
        IsNormalAttack: function (skillId){
            return skillId == BattleManager.GetNormalAttackSkillId();
        },
        PlayTakeDamage: function (node){
            var ids = null;
            if (this._atOnce){
                ids = this.GetInjurerIds();
            }
            else {
                ids = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
                ids.Add(this.getTargetId());
            }
            this._gamePlayer.PlayInjureAction(ids);
        },
        DoPlayCameraShake: function (delayTime, power){
            var skillId = this._gameAction.skillId;
            if (this.IsNormalAttack(skillId)){
                return;
            }
            CameraController.Instance.get_CameraShake().Launch(delayTime, power);
        },
        getAttackerId: function (){
            return this._gameAction.actionSoldierId;
        },
        GetInjurerIds: function (){
            return this._injurerIds;
        },
        GetOriInjurerIds: function (){
            return this._oriInjurerIds;
        },
        GetNextInjureId: function (){
            return this._injurerId;
        },
        DelayPlay: function (){
            this.Invoke("Play", 0.1);
        },
        Continue: function (){
            this._finishAction = false;
            this._finishTime = false;
            this._needWaitNormalAction = false;
            if (UnityEngine.Object.op_Inequality(this._mc, null)){
                this._mc.actionEnd = null;
            }
            if (UnityEngine.Object.op_Inequality(this._protectMonster, null)){
                this._protectMonster.actionEnd = null;
            }
            this._completed = false;
            this._startTime = 0;
            this._maxWaitTime = 0;
            this.PlayNextAction();
        },
        Destroy: function (){
            this._finishAction = false;
            this._finishTime = false;
            this._needWaitNormalAction = false;
            this._actionIndex = 0;
            this._completed = false;
            this._startTime = 0;
            this._maxWaitTime = 0;
            if (UnityEngine.Object.op_Inequality(this._mc, null)){
                this._mc.actionEnd = null;
                this._mc = null;
            }
            if (UnityEngine.Object.op_Inequality(this._protectMonster, null)){
                this._protectMonster.actionEnd = null;
                this._protectMonster = null;
            }
            this._videoInsideSkillAction = null;
        }
    }
};
JsTypes.push(BattleActionPlayer);
var BattleActionPlayerPoolManager = {
    fullname: "BattleActionPlayerPoolManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleActionPlayerPoolManager.mInstance = new BattleActionPlayerPoolManager.ctor();
        },
        Instance$$: "BattleActionPlayerPoolManager",
        get_Instance: function (){
            return BattleActionPlayerPoolManager.mInstance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._rootGO = null;
            this._playerQueue = null;
            System.Object.ctor.call(this);
        },
        Setup: function (rootGO){
            this._rootGO = rootGO;
            this._playerQueue = new System.Collections.Generic.Queue$1.ctor(BattleActionPlayer.ctor);
        },
        Spawn: function (){
            var player = null;
            if (this._playerQueue.get_Count() > 0){
                player = this._playerQueue.Dequeue();
            }
            else {
                player = this._rootGO.AddComponent$1(BattleActionPlayer.ctor);
            }
            return player;
        },
        Despawn: function (player){
            this._playerQueue.Enqueue(player);
        },
        Dispose: function (){
            this._playerQueue.Clear();
            this._playerQueue = null;
            this._rootGO = null;
        }
    }
};
JsTypes.push(BattleActionPlayerPoolManager);
var SwitchHeroAction = {
    fullname: "SwitchHeroAction",
    baseTypeName: "AppDto.VideoAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            AppDto.VideoAction.ctor.call(this);
        }
    }
};
JsTypes.push(SwitchHeroAction);
var VideoShoutAction = {
    fullname: "VideoShoutAction",
    baseTypeName: "AppDto.VideoSkillAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.shoutContent = null;
            AppDto.VideoSkillAction.ctor.call(this);
        }
    }
};
JsTypes.push(VideoShoutAction);
var BattleHUDText = {
    fullname: "BattleHUDText",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleHUDText.NAME = "BattleHUDText";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.statusSprite = null;
            this.damageInfo = null;
            this.msgLbl = null;
            this.damageLbl = null;
            this.critSprite = null;
            this.skillInfo = null;
            this.skillSprite = null;
            this.skillSpriteAnimation = null;
            this.skillNameLbl = null;
            this.followTarget = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.statusSprite = root.Find("statusSprite").GetComponent$1(UISprite.ctor);
            this.damageInfo = root.Find("damageInfo").get_gameObject();
            this.msgLbl = root.Find("msgLbl").GetComponent$1(UILabel.ctor);
            this.damageLbl = root.Find("damageInfo/damageLbl").GetComponent$1(UILabel.ctor);
            this.critSprite = root.Find("damageInfo/critSprite").GetComponent$1(UISprite.ctor);
            this.skillInfo = root.Find("skillInfo").get_gameObject();
            this.skillSprite = root.Find("skillInfo/skillSprite").GetComponent$1(UISprite.ctor);
            this.skillSpriteAnimation = root.Find("skillInfo/skillSprite").GetComponent$1(UISpriteAnimation.ctor);
            this.skillNameLbl = root.Find("skillInfo/skillNameLbl").GetComponent$1(UILabel.ctor);
            this.followTarget = root.GetComponent$1(UIFollowTarget.ctor);
        }
    }
};
JsTypes.push(BattleHUDText);
var BattleLaunchTimer = {
    fullname: "BattleLaunchTimer",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            BattleLaunchTimer.MAX_INSTRUCTION_TIME = 30000;
            BattleLaunchTimer.AUTO_TIME = 27;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._waitingAutoTime = true;
            this.autoRoundTimeLabel = null;
            this.isEnable = false;
            this.timeCounter = 0;
            this.timeLabel = null;
            this.OnFinishedDelegate = null;
            this.OnAutoTimeFinish = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        add_OnFinishedDelegate: function (value){
            this.OnFinishedDelegate = $CombineDelegates(this.OnFinishedDelegate, value);
        },
        remove_OnFinishedDelegate: function (value){
            this.OnFinishedDelegate = $RemoveDelegate(this.OnFinishedDelegate, value);
        },
        add_OnAutoTimeFinish: function (value){
            this.OnAutoTimeFinish = $CombineDelegates(this.OnAutoTimeFinish, value);
        },
        remove_OnAutoTimeFinish: function (value){
            this.OnAutoTimeFinish = $RemoveDelegate(this.OnAutoTimeFinish, value);
        },
        Awake: function (){
            this.timeLabel = this.GetComponentInChildren$1(UILabel.ctor);
            this.ResetTimer(0);
        },
        LaunchTimer: function (time, cancelAutoSec, autoMode){
            this.get_gameObject().SetActive(true);
            this.autoRoundTimeLabel.get_gameObject().SetActive(autoMode);
            GameDebuger.TODO("AUTO_TIME = MAX_INSTRUCTION_TIME - cancelAutoSec; // - 1;");
            BattleLaunchTimer.AUTO_TIME = 3;
            this._waitingAutoTime = true;
            this.ResetTimer(time);
            this.EnableTimer(true);
        },
        EnableTimer: function (enable){
            this.isEnable = enable;
        },
        StopTimer: function (){
            this.EnableTimer(false);
            this.timeCounter = 0;
        },
        ResetTimer: function (time){
            if (time == 0){
                this.timeCounter = BattleLaunchTimer.MAX_INSTRUCTION_TIME;
            }
            else {
                this.timeCounter = time;
            }
        },
        GetSeconds: function (){
            return ((System.Math.Ceiling$$Double(this.timeCounter)) | 0);
        },
        Update: function (){
            var currentSecond = 0;
            if (this.isEnable){
                this.timeCounter -= _jsComManager.dT;
                if (this.timeCounter <= BattleLaunchTimer.AUTO_TIME && this._waitingAutoTime){
                    this._waitingAutoTime = false;
                    if (this.OnAutoTimeFinish != null)
                        this.OnAutoTimeFinish();
                }
                if (this.timeCounter <= 0){
                    this.timeCounter = 0;
                    if (this.OnFinishedDelegate != null)
                        this.OnFinishedDelegate();
                    this.EnableTimer(false);
                }
                currentSecond = this.GetSeconds();
                this.timeLabel.set_text(currentSecond > 0 ? currentSecond.toString() : System.String.Empty);
            }
            else
                currentSecond = this.GetSeconds();
            var autoSecond = currentSecond - BattleLaunchTimer.AUTO_TIME;
            if (autoSecond > 0){
                this.autoRoundTimeLabel.set_text(autoSecond.toString());
            }
            else {
                this.autoRoundTimeLabel.set_text(System.String.Empty);
            }
        },
        Hide: function (){
            this.get_gameObject().SetActive(false);
            this.autoRoundTimeLabel.get_gameObject().SetActive(false);
        },
        HideAutoRoundTimeLabel: function (){
            this.autoRoundTimeLabel.get_gameObject().SetActive(false);
        },
        DestroyIt: function (){
            this.OnAutoTimeFinish = null;
            this.OnFinishedDelegate = null;
        }
    }
};
JsTypes.push(BattleLaunchTimer);
var BattleMonsterHPSlider = {
    fullname: "BattleMonsterHPSlider",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        CreateNew: function (mc){
            var hpSliderPrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("MonsterHPSlider"), UnityEngine.GameObject.ctor);
            var hpSliderGO = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().BattleUIHUDPanel.get_cachedGameObject(), hpSliderPrefab);
            var follower = hpSliderGO.AddComponent$1(UIFollowTarget.ctor);
            follower.gameCamera = LayerManager.get_Root().BattleCamera;
            follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
            var hpSlider = GameObjectExt.GetMissingComponent$1(BattleMonsterHPSlider.ctor, hpSliderGO);
            hpSlider.SetupView();
            hpSlider.UpdateFollowTarget(mc);
            hpSlider.Setup(mc);
            return hpSlider;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._hpPrecent = 0;
            this._lerpBaseTime = 0;
            this._lerpTime = 0;
            this._monster = null;
            this._oriFillAmount = -1 /* -1 */;
            this.readySprite = null;
            this.mCDDurationSlider = null;
            this.mCDDurationSprite = null;
            this.mMonsterHPSlider = null;
            this.mCntrBuffIconPrefab = null;
            this.mBuffGrid = null;
            this.mCntrPoint_UIWidget = null;
            this.mLabelPoint_UILabel = null;
            this.slider = null;
            this.mBuffEffectGODic = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        SetupView: function (){
            var myTransform = this.get_gameObject().get_transform();
            this.mMonsterHPSlider = BaseView.Create$1$$GameObject(MonsterHPSlider.ctor, this.get_gameObject());
            this.slider = this.mMonsterHPSlider.HPSlider_UISlider;
            this.readySprite = this.mMonsterHPSlider.ReadySprite_UISprite;
            this.mCDDurationSlider = this.mMonsterHPSlider.CDSlider_UISlider;
            this.mCDDurationSprite = this.mMonsterHPSlider.Front_Sprite_UISprite;
            this.mBuffGrid = this.mMonsterHPSlider.BuffGrid_UIGrid;
            this.mCntrBuffIconPrefab = this.mMonsterHPSlider.CntrBuffIcon;
            this.mCntrPoint_UIWidget = this.mMonsterHPSlider.CntrPoint_UIWidget;
            this.mLabelPoint_UILabel = this.mMonsterHPSlider.LabelPoint_UILabel;
        },
        UpdateFollowTarget: function (mc){
            var follower = this.get_gameObject().GetComponent$1(UIFollowTarget.ctor);
            if (UnityEngine.Object.op_Equality(follower, null)){
                return;
            }
            var tf = mc.GetMountHUD();
            if (UnityEngine.Object.op_Equality(tf, null)){
                tf = mc.get_gameObject().get_transform();
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 2, 0);
            }
            else {
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.1 /* -0.1f */, 0);
            }
            follower.target = tf;
        },
        Setup: function (mc){
            this._monster = mc;
            this.mBuffEffectGODic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, UnityEngine.GameObject.ctor);
            this.UpdateUIVisibleBySide(UnityEngine.Object.op_Inequality(null, this._monster) && this._monster.side == MonsterController.MonsterSide.Player);
            this.AddEvents();
            this.slider.set_value(this._monster.get_currentHP() / this._monster.maxHP);
            this.ShowReady(false);
            this.mCDDurationSlider.set_value(1);
            this.InitActionPoint();
        },
        Update: function (){
            if (UnityEngine.Object.op_Inequality(this._monster, null)){
                this.ShowReady(this._monster.NeedReady && !this.get_EnableToShowPoint());
                this._hpPrecent = this._monster.get_currentHP() / this._monster.maxHP;
                if (this.slider.get_value() != this._hpPrecent){
                    if (this._oriFillAmount == -1 /* -1f */){
                        this._lerpTime = 0;
                        this._oriFillAmount = this.slider.get_value();
                        if (this._hpPrecent == 0){
                            this._lerpBaseTime = 4;
                        }
                        else {
                            var modifyPrecent = UnityEngine.Mathf.Abs$$Single(this._oriFillAmount - this._hpPrecent);
                            this._lerpBaseTime = 1 / (2 * modifyPrecent);
                        }
                    }
                    this._lerpTime += this._lerpBaseTime * _jsComManager.dT;
                    this.slider.set_value(UnityEngine.Mathf.Lerp(this._oriFillAmount, this._hpPrecent, this._lerpTime));
                }
                else {
                    this._oriFillAmount = -1 /* -1f */;
                }
                if (this._monster.IsDead()){
                    this.ShowCD(0, false, null);
                    this.ShowReady(false);
                }
            }
        },
        ShowReady: function (ready){
            var tAlpha = ready ? 1 : 0;
            if (this.readySprite.get_alpha() != tAlpha)
                this.readySprite.set_alpha(tAlpha);
        },
        ShowCD: function (pDuration, pPlayReverse, pOnCdFinish){
            if (pDuration <= 0){
                if (this.mCDDurationSlider.get_value() != 0)
                    this.mCDDurationSlider.set_value(0);
                if (null != pOnCdFinish)
                    pOnCdFinish();
            }
            else {
                if (this._monster.IsDead()){
                    if (null != pOnCdFinish)
                        pOnCdFinish();
                    return;
                }
                var mCDTimerName = "ShowCD" + this.GetInstanceID().toString();
                JSTimer.get_Instance().CancelCd(mCDTimerName);
                var tOnCdUpdate = null;
                if (UnityEngine.Object.op_Inequality(null, this.mCDDurationSlider) && this.mCDDurationSlider.get_enabled()){
                    this.mCDDurationSlider.set_value(pPlayReverse ? 0 : 1);
                    tOnCdUpdate = $CreateAnonymousDelegate(this, function (pRemainTime){
                        this.mCDDurationSlider.set_value((pPlayReverse ? (pDuration - pRemainTime) : pRemainTime) / pDuration);
                    });
                }
                JSTimer.get_Instance().SetupCoolDown(mCDTimerName, pDuration, tOnCdUpdate, pOnCdFinish, 0.01, false);
            }
        },
        UpdateUIVisibleBySide: function (pVisible){
            this.mCDDurationSlider.set_enabled((function ($p1){
                this.mCDDurationSprite.set_enabled($p1);
                return $p1;
            }).call(this, pVisible));
            this.mCntrPoint_UIWidget.set_alpha(this.get_EnableToShowPoint() ? 1 : 0);
        },
        Destroy: function (){
            this.RemoveEvents();
            this.ClearBuffEffect();
            this.mBuffEffectGODic = null;
            this._monster = null;
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        },
        AddEvents: function (){
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, $CreateDelegate(this, this.OnBuffStatusChanged));
            if (this.mCntrPoint_UIWidget.get_alpha() == 1)
                GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, $CreateDelegate(this, this.OnSkillPointUpdate));
        },
        RemoveEvents: function (){
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, $CreateDelegate(this, this.OnBuffStatusChanged));
            if (this.mCntrPoint_UIWidget.get_alpha() == 1)
                GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, $CreateDelegate(this, this.OnSkillPointUpdate));
        },
        AddBuffEffect: function (pSkillBuff){
            if (null == pSkillBuff || (null != this.mBuffEffectGODic && this.mBuffEffectGODic.ContainsKey(pSkillBuff.id)))
                return;
            var tGameObject = GameObjectExt.AddChild(this.mBuffGrid.get_gameObject(), this.mCntrBuffIconPrefab, 0, 0, 0);
            this.mBuffEffectGODic.Add(pSkillBuff.id, tGameObject);
            this.UpdateBuffIcon(tGameObject, pSkillBuff.uiHeadEffect);
            tGameObject.GetComponent$1(UIWidget.ctor).set_alpha(1);
            UIHelper.RepositionDelay(this.mBuffGrid, null);
        },
        RemoveBuffEffect: function (pBuffId){
            if (pBuffId <= 0 || null == this.mBuffEffectGODic || this.mBuffEffectGODic.get_Count() <= 0)
                return;
            var tGameObject = null;
            if ((function (){
                var $1 = $Ref(null, tGameObject);
                var $res = this.mBuffEffectGODic.TryGetValue(pBuffId, $1);
                tGameObject = $1.Value;
                return $res;
            }).call(this)){
                this.mBuffEffectGODic.Remove(pBuffId);
                GameObjectExt.DestroyLog(tGameObject);
            }
        },
        ClearBuffEffect: function (){
            if (null == this.mBuffEffectGODic)
                return;
            var tBuffIdList = CollectionExtension.ToList$1(System.Int32.ctor, this.mBuffEffectGODic.get_Keys());
            if (null == tBuffIdList || tBuffIdList.get_Count() <= 0)
                return;
            for (var tCounter = 0; tCounter < tBuffIdList.get_Count(); tCounter++){
                this.RemoveBuffEffect(tBuffIdList.get_Item$$Int32(tCounter));
            }
            this.mBuffEffectGODic.Clear();
            this.mBuffEffectGODic = null;
        },
        UpdateBuffIcon: function (pBuffIcon, pBuffEffect){
            pBuffIcon.GetComponentInChildren$1(UISprite.ctor).set_spriteName(pBuffEffect);
        },
        OnBuffStatusChanged: function (pMonsterUID, pBuff, pIsBuffAdded){
            if (UnityEngine.Object.op_Equality(null, this._monster) || pMonsterUID <= 0 || null == pBuff || this._monster.GetId() != pMonsterUID)
                return;
            if (pIsBuffAdded)
                this.AddBuffEffect(pBuff);
            else
                this.RemoveBuffEffect(pBuff.id);
        },
        InitActionPoint: function (){
            if (!this.get_EnableToShowPoint())
                return;
            var tVideoSoldier = this._monster.videoSoldier;
            if (null == tVideoSoldier)
                return;
            this.UpdatePoint(tVideoSoldier.actionPoint);
        },
        OnSkillPointUpdate: function (pCharacterId, pSkillPoint){
            if (UnityEngine.Object.op_Equality(null, this._monster) || pCharacterId <= 0 || this._monster.GetId() != pCharacterId)
                return;
            this.UpdatePoint(pSkillPoint);
        },
        EnableToShowPoint$$: "System.Boolean",
        get_EnableToShowPoint: function (){
            return this._monster.IsPlayerMainCharactor() || this._monster.IsPlayerPet();
        },
        UpdatePoint: function (pTargetPoint){
            this.mLabelPoint_UILabel.set_text(System.String.Format$$String$$Object("[b]{0}[-]", pTargetPoint.toString()));
        }
    }
};
JsTypes.push(BattleMonsterHPSlider);
var BattleMonsterName = {
    fullname: "BattleMonsterName",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        CreateNew: function (mc){
            var monsterNamePrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("MonsterName"), UnityEngine.GameObject.ctor);
            var monsterNameGO = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().BattleHudTextPanel.get_cachedGameObject(), monsterNamePrefab);
            var follower = monsterNameGO.AddComponent$1(UIFollowTarget.ctor);
            follower.gameCamera = LayerManager.get_Root().BattleCamera;
            follower.uiCamera = LayerManager.get_Root().SceneHUDCamera;
            var monsterName = NGUITools.AddMissingComponent$1(BattleMonsterName.ctor, monsterNameGO);
            monsterName.SetupView();
            monsterName.UpdateFollowTarget(mc);
            monsterName.Setup(mc);
            return monsterName;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.label = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        SetupView: function (){
            this.label = this.get_gameObject().get_transform().Find("NameLabel").GetComponent$1(UILabel.ctor);
        },
        UpdateFollowTarget: function (mc){
            var follower = this.get_gameObject().GetComponent$1(UIFollowTarget.ctor);
            if (UnityEngine.Object.op_Equality(follower, null)){
                return;
            }
            var mount = mc.GetMountShadow();
            if (UnityEngine.Object.op_Equality(mount, null)){
                mount = mc.get_gameObject().get_transform();
            }
            else {
                mount.set_localRotation(UnityEngine.Quaternion.get_identity());
                mount.set_localScale(UnityEngine.Vector3.get_one());
                mount.set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(mount.get_position().x, 0, mount.get_position().z));
            }
            follower.target = mount;
            follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.4 /* -0.4f */, 0);
        },
        Setup: function (mc){
            var showStr = mc.videoSoldier.name;
            GameDebuger.TODO("switch (mc.videoSoldier.monsterType)\n        {\n            case Monster.MonsterType_Boss:\n                if (!showStr.Contains(\'头领\'))\n                {\n                    showStr = showStr + \'头领\';\n                }\n                break;\n            case Monster.MonsterType_Baobao:\n                if (!showStr.Contains(\'宝宝\'))\n                {\n                    showStr = showStr + \'宝宝\';\n                }\n                break;\n            case Monster.MonsterType_Mutate:\n                if (!showStr.Contains(\'变异\'))\n                {\n                    showStr = \'变异\' + showStr;\n                }\n                break;\n        }");
            this.label.set_fontSize(17);
            this.label.set_text("[b]" + showStr);
            if (mc.IsPet() || mc.IsMainCharactor()){
                this.label.set_color(ColorConstant.Color_Battle_Player_Name);
            }
            else {
                this.label.set_color(ColorConstant.Color_Battle_Enemy_Name);
            }
        },
        Destroy: function (){
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        }
    }
};
JsTypes.push(BattleMonsterName);
var BattleMonsterOrder = {
    fullname: "BattleMonsterOrder",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        CreateNew: function (mc){
            var monsterOrderPrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("MonsterOrder"), UnityEngine.GameObject.ctor);
            var monsterOrderGO = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().BattleUIHUDPanel.get_cachedGameObject(), monsterOrderPrefab);
            var follower = GameObjectExt.GetMissingComponent$1(UIFollowTarget.ctor, monsterOrderGO);
            follower.gameCamera = LayerManager.get_Root().BattleCamera;
            follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
            var monsterOrder = GameObjectExt.GetMissingComponent$1(BattleMonsterOrder.ctor, monsterOrderGO);
            monsterOrder.UpdateFollowTarget(mc);
            monsterOrder.InitView();
            monsterOrder.showOrder("");
            return monsterOrder;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.label = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        UpdateFollowTarget: function (mc){
            var follower = this.get_gameObject().GetComponent$1(UIFollowTarget.ctor);
            if (UnityEngine.Object.op_Equality(follower, null)){
                return;
            }
            var tf = mc.GetMountHUD();
            if (UnityEngine.Object.op_Equality(tf, null)){
                tf = mc.get_gameObject().get_transform();
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -2 /* -2f */, 0);
            }
            else {
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -1 /* -1f */, 0);
            }
            follower.target = tf;
        },
        InitView: function (){
            this.label = this.get_transform().Find("bgSprite/NameLabel").GetComponent$1(UILabel.ctor);
        },
        showOrder: function (order){
            this.label.set_text("");
            if (System.String.IsNullOrEmpty(order)){
                this.get_gameObject().SetActive(false);
            }
            else {
                this.get_gameObject().SetActive(true);
                this.label.set_text(order);
            }
        },
        Destroy: function (){
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        }
    }
};
JsTypes.push(BattleMonsterOrder);
var BattleMonsterOrderArrow = {
    fullname: "BattleMonsterOrderArrow",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        CreateNew: function (mc, onFinish){
            var monsterOrderArrowPrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("MonsterOrderAarrow"), UnityEngine.GameObject.ctor);
            var monsterOrderArrowGO = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().BattleUIHUDPanel.get_cachedGameObject(), monsterOrderArrowPrefab);
            var follower = monsterOrderArrowGO.AddComponent$1(UIFollowTarget.ctor);
            follower.gameCamera = LayerManager.get_Root().BattleCamera;
            follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
            var tf = mc.GetMountHUD();
            if (UnityEngine.Object.op_Equality(tf, null)){
                tf = mc.get_gameObject().get_transform();
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -1.2 /* -1.2f */, 0);
            }
            else {
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.2 /* -0.2f */, 0);
            }
            follower.target = tf;
            var com = NGUITools.AddMissingComponent$1(BattleMonsterOrderArrow.ctor, monsterOrderArrowGO);
            com.InitView();
            com.arrow.set_fillAmount(0);
            com._onFinish = onFinish;
            return com;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._onFinish = null;
            this.arrow = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        InitView: function (){
            this.arrow = this.get_gameObject().get_transform().Find("bottomSprite").GetComponent$1(UISprite.ctor);
        },
        Update: function (){
            if (this.arrow.get_cachedGameObject().get_activeInHierarchy()){
                this.arrow.set_fillAmount(this.arrow.get_fillAmount() + _jsComManager.dT * 3.5);
                if (this.arrow.get_fillAmount() >= 1){
                    if (this._onFinish != null){
                        this._onFinish();
                    }
                }
            }
        },
        Destroy: function (){
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        }
    }
};
JsTypes.push(BattleMonsterOrderArrow);
var BattleMonsterPosition = {
    fullname: "BattleMonsterPosition",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        CreateNew: function (mc){
            var monsterOrderPrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("MonsterPosition"), UnityEngine.GameObject.ctor);
            var monsterOrderGO = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().BattleUIHUDPanel.get_cachedGameObject(), monsterOrderPrefab);
            var follower = GameObjectExt.GetMissingComponent$1(UIFollowTarget.ctor, monsterOrderGO);
            follower.gameCamera = LayerManager.get_Root().BattleCamera;
            follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
            var monsterPosition = GameObjectExt.GetMissingComponent$1(BattleMonsterPosition.ctor, monsterOrderGO);
            monsterPosition.UpdateFollowTarget(mc);
            monsterPosition.InitView();
            return monsterPosition;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.label = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        UpdateFollowTarget: function (mc){
            var follower = this.get_gameObject().GetComponent$1(UIFollowTarget.ctor);
            if (UnityEngine.Object.op_Equality(follower, null)){
                return;
            }
            var tf = mc.GetMountShadow();
            if (UnityEngine.Object.op_Equality(tf, null)){
                tf = mc.get_gameObject().get_transform();
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.15, 0);
            }
            else {
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.15, 0);
            }
            follower.target = tf;
        },
        InitView: function (){
            this.label = this.get_transform().Find("PositionLabel").GetComponent$1(UILabel.ctor);
        },
        showPosition: function (position){
            this.label.set_text(position.toString());
        },
        Destroy: function (){
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        }
    }
};
JsTypes.push(BattleMonsterPosition);
var BattleShadow = {
    fullname: "BattleShadow",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.followTarget = null;
            this.myTransform = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Setup: function (target){
            this.myTransform = this.get_transform();
            this.myTransform.set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.1, 0));
            this.myTransform.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0, 0));
            this.followTarget = target;
            this.Update();
        },
        Update: function (){
            if (UnityEngine.Object.op_Implicit(this.myTransform))
                this.myTransform.set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.followTarget.get_position().x, 0.1, this.followTarget.get_position().z));
        }
    }
};
JsTypes.push(BattleShadow);
var BattleView = {
    fullname: "BattleView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleView.NAME = "BattleView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.MainUI = null;
            this.AutoButton = null;
            this.AttackButton = null;
            this.SkillButton = null;
            this.DefenseButton = null;
            this.ManualButton = null;
            this.RoundTimeLabel = null;
            this.RoundWatingSprite = null;
            this.RoundLabel = null;
            this.TipSprite = null;
            this.TipLabel = null;
            this.TargetSelectSprite = null;
            this.SkillNameLabel = null;
            this.CancelButton = null;
            this.CharactorLabel_UILabel = null;
            this.CatchButton = null;
            this.ProtectButton = null;
            this.RetreatButton = null;
            this.SummonButton = null;
            this.ItemButton = null;
            this.StuntButton = null;
            this.BottomButtonGrid_UIGrid = null;
            this.RightButtonGrid_UIGrid = null;
            this.PlayerDefaultSkillButton = null;
            this.PetDefaultSkillButton = null;
            this.BottomRightAnchor_Transform = null;
            this.Anchor_BottomRight_Transform = null;
            this.RoundInfoGroup_Transform = null;
            this.EnemyFormationIconButton = null;
            this.PlayerFormationIconButton = null;
            this.DefaultSkillButton = null;
            this.PlayerDefaultSkillSprite_UISprite = null;
            this.PetDefaultSkillSprite_UISprite = null;
            this.BottomRightBg = null;
            this.AutoSkillSelectGroup = null;
            this.AutoSkillSelectBg_UISprite = null;
            this.AutoSkillSelectGrid_UIGrid = null;
            this.AutoSkillSelectTipLabel_UILabel = null;
            this.PlayerDefaultSkillIconGroup = null;
            this.PlayerDefaultSkillIcon_UISprite = null;
            this.PlayerDefaultSkillNameLabel_UILabel = null;
            this.PetDefaultSkillIconGroup = null;
            this.PetDefaultSkillIcon_UISprite = null;
            this.PetDefaultSkillNameLabel_UILabel = null;
            this.DefaultSkilllNameLabel_UILabel = null;
            this.StatusSprite = null;
            this.NameLabel_UILabel = null;
            this.MPLabel_UILabel = null;
            this.HPLabel_UILabel = null;
            this.SPLabel_UILabel = null;
            this.SPGroup = null;
            this.StatusSprite_UISprite = null;
            this.AutoRoundTimeLabel_UILabel = null;
            this.FormationInfoLabel_UILabel = null;
            this.FormationGroup_UIAnchor = null;
            this.FormationGroup = null;
            this.EnemyFormationIconSprite_UISprite = null;
            this.PlayerFormationIconSprite_UISprite = null;
            this.EnemyFormationIconButton_UIButton = null;
            this.PlayerFormationIconButton_UIButton = null;
            this.FormationGroup_UISprite = null;
            this.ExitButton_UIButton = null;
            this.DefaultSkillSprite_UISprite = null;
            this.AutoSkillPanel = null;
            this.CntrDamageHealInfoUI_Transform = null;
            this.LabelDamageInfo_UILabel = null;
            this.LabelHealInfo_UILabel = null;
            this.CntrLeftDamageInfoUIBG_UISprite = null;
            this.CntrLeftDamageInfoUI_UIWidget = null;
            this.CntrLeftDamageInfoUI_TweenAlpha = null;
            this.MagicButton_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.MainUI = root.Find("MainUI");
            this.AutoButton = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoButton").GetComponent$1(UIButton.ctor);
            this.AttackButton = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/AttackButton").GetComponent$1(UIButton.ctor);
            this.SkillButton = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/SkillButton").GetComponent$1(UIButton.ctor);
            this.DefenseButton = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid/DefenseButton").GetComponent$1(UIButton.ctor);
            this.ManualButton = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/ManualButton").GetComponent$1(UIButton.ctor);
            this.RoundTimeLabel = root.Find("MainUI/Anchor_Top/RoundTimeLabel").GetComponent$1(UILabel.ctor);
            this.RoundWatingSprite = root.Find("MainUI/Anchor_Top/RoundWatingSprite").GetComponent$1(UISprite.ctor);
            this.RoundLabel = root.Find("MainUI/Anchor_Top/RoundInfoGroup/RoundLabel").GetComponent$1(UILabel.ctor);
            this.TipSprite = root.Find("MainUI/Anchor_Center/TipSprite").GetComponent$1(UISprite.ctor);
            this.TipLabel = root.Find("MainUI/Anchor_Center/TipSprite/TipLabel").GetComponent$1(UILabel.ctor);
            this.TargetSelectSprite = root.Find("MainUI/Anchor_Center/TargetSelectSprite").GetComponent$1(UISprite.ctor);
            this.SkillNameLabel = root.Find("MainUI/Anchor_Center/TargetSelectSprite/SkillNameLabel").GetComponent$1(UILabel.ctor);
            this.CancelButton = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CancelButton").GetComponent$1(UIButton.ctor);
            this.CharactorLabel_UILabel = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CharactorLabel").GetComponent$1(UILabel.ctor);
            this.CatchButton = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid/CatchButton").GetComponent$1(UIButton.ctor);
            this.ProtectButton = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid/ProtectButton").GetComponent$1(UIButton.ctor);
            this.RetreatButton = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid/RetreatButton").GetComponent$1(UIButton.ctor);
            this.SummonButton = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid/SummonButton").GetComponent$1(UIButton.ctor);
            this.ItemButton = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/ItemButton").GetComponent$1(UIButton.ctor);
            this.StuntButton = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/StuntButton").GetComponent$1(UIButton.ctor);
            this.BottomButtonGrid_UIGrid = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid").GetComponent$1(UIGrid.ctor);
            this.RightButtonGrid_UIGrid = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid").GetComponent$1(UIGrid.ctor);
            this.PlayerDefaultSkillButton = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PlayerDefaultSkillButton").GetComponent$1(UIButton.ctor);
            this.PetDefaultSkillButton = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PetDefaultSkillButton").GetComponent$1(UIButton.ctor);
            this.BottomRightAnchor_Transform = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor");
            this.Anchor_BottomRight_Transform = root.Find("MainUI/Anchor_BottomRight");
            this.RoundInfoGroup_Transform = root.Find("MainUI/Anchor_Top/RoundInfoGroup");
            this.EnemyFormationIconButton = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton").get_gameObject();
            this.PlayerFormationIconButton = root.Find("MainUI/Anchor_Top/RoundInfoGroup/PlayerFormationIconButton").get_gameObject();
            this.DefaultSkillButton = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/DefaultSkillButton").GetComponent$1(UIButton.ctor);
            this.PlayerDefaultSkillSprite_UISprite = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PlayerDefaultSkillButton/PlayerDefaultSkillSprite").GetComponent$1(UISprite.ctor);
            this.PetDefaultSkillSprite_UISprite = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PetDefaultSkillButton/PetDefaultSkillSprite").GetComponent$1(UISprite.ctor);
            this.BottomRightBg = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/BottomRightBg").get_gameObject();
            this.AutoSkillSelectGroup = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoSkillSelectGroup").get_gameObject();
            this.AutoSkillSelectBg_UISprite = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoSkillSelectGroup/AutoSkillSelectBg").GetComponent$1(UISprite.ctor);
            this.AutoSkillSelectGrid_UIGrid = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoSkillSelectGroup/AutoSkillSelectGrid").GetComponent$1(UIGrid.ctor);
            this.AutoSkillSelectTipLabel_UILabel = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoSkillSelectGroup/AutoSkillSelectTipLabel").GetComponent$1(UILabel.ctor);
            this.PlayerDefaultSkillIconGroup = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PlayerDefaultSkillButton/PlayerDefaultSkillIconGroup").get_gameObject();
            this.PlayerDefaultSkillIcon_UISprite = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PlayerDefaultSkillButton/PlayerDefaultSkillIconGroup/PlayerDefaultSkillIcon").GetComponent$1(UISprite.ctor);
            this.PlayerDefaultSkillNameLabel_UILabel = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PlayerDefaultSkillButton/PlayerDefaultSkillIconGroup/PlayerDefaultSkillNameLabel").GetComponent$1(UILabel.ctor);
            this.PetDefaultSkillIconGroup = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PetDefaultSkillButton/PetDefaultSkillIconGroup").get_gameObject();
            this.PetDefaultSkillIcon_UISprite = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PetDefaultSkillButton/PetDefaultSkillIconGroup/PetDefaultSkillIcon").GetComponent$1(UISprite.ctor);
            this.PetDefaultSkillNameLabel_UILabel = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/PetDefaultSkillButton/PetDefaultSkillIconGroup/PetDefaultSkillNameLabel").GetComponent$1(UILabel.ctor);
            this.DefaultSkilllNameLabel_UILabel = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/DefaultSkillButton/DefaultSkilllNameLabel").GetComponent$1(UILabel.ctor);
            this.StatusSprite = root.Find("MainUI/Anchor_Center/StatusSprite").get_gameObject();
            this.NameLabel_UILabel = root.Find("MainUI/Anchor_Center/StatusSprite/NameLabel").GetComponent$1(UILabel.ctor);
            this.MPLabel_UILabel = root.Find("MainUI/Anchor_Center/StatusSprite/MPGroup/MPLabel").GetComponent$1(UILabel.ctor);
            this.HPLabel_UILabel = root.Find("MainUI/Anchor_Center/StatusSprite/HPGroup/HPLabel").GetComponent$1(UILabel.ctor);
            this.SPLabel_UILabel = root.Find("MainUI/Anchor_Center/StatusSprite/SPGroup/SPLabel").GetComponent$1(UILabel.ctor);
            this.SPGroup = root.Find("MainUI/Anchor_Center/StatusSprite/SPGroup").get_gameObject();
            this.StatusSprite_UISprite = root.Find("MainUI/Anchor_Center/StatusSprite").GetComponent$1(UISprite.ctor);
            this.AutoRoundTimeLabel_UILabel = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoRoundTimeLabel").GetComponent$1(UILabel.ctor);
            this.FormationInfoLabel_UILabel = root.Find("MainUI/FormationGroup/FormationInfoLabel").GetComponent$1(UILabel.ctor);
            this.FormationGroup_UIAnchor = root.Find("MainUI/FormationGroup").GetComponent$1(UIAnchor.ctor);
            this.FormationGroup = root.Find("MainUI/FormationGroup").get_gameObject();
            this.EnemyFormationIconSprite_UISprite = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/EnemyFormationIconSprite").GetComponent$1(UISprite.ctor);
            this.PlayerFormationIconSprite_UISprite = root.Find("MainUI/Anchor_Top/RoundInfoGroup/PlayerFormationIconButton/PlayerFormationIconSprite").GetComponent$1(UISprite.ctor);
            this.EnemyFormationIconButton_UIButton = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton").GetComponent$1(UIButton.ctor);
            this.PlayerFormationIconButton_UIButton = root.Find("MainUI/Anchor_Top/RoundInfoGroup/PlayerFormationIconButton").GetComponent$1(UIButton.ctor);
            this.FormationGroup_UISprite = root.Find("MainUI/FormationGroup").GetComponent$1(UISprite.ctor);
            this.ExitButton_UIButton = root.Find("MainUI/Anchor_BottomRight/ExitButton").GetComponent$1(UIButton.ctor);
            this.DefaultSkillSprite_UISprite = root.Find("MainUI/Anchor_BottomRight/RightButtonGrid/DefaultSkillButton/DefaultSkillSprite").GetComponent$1(UISprite.ctor);
            this.AutoSkillPanel = root.Find("MainUI/Anchor_BottomRight/BottomRightAnchor/AutoSkillSelectGroup").GetComponent$1(UIPanel.ctor);
            this.CntrDamageHealInfoUI_Transform = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/CntrDamageHealInfoUI");
            this.LabelDamageInfo_UILabel = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/CntrDamageHealInfoUI/CntrLeftDamageInfoUI/LabelDamageInfo").GetComponent$1(UILabel.ctor);
            this.LabelHealInfo_UILabel = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/CntrDamageHealInfoUI/CntrLeftDamageInfoUI/LabelHealInfo").GetComponent$1(UILabel.ctor);
            this.CntrLeftDamageInfoUIBG_UISprite = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/CntrDamageHealInfoUI/CntrLeftDamageInfoUI/CntrLeftDamageInfoUIBG").GetComponent$1(UISprite.ctor);
            this.CntrLeftDamageInfoUI_UIWidget = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/CntrDamageHealInfoUI/CntrLeftDamageInfoUI").GetComponent$1(UIWidget.ctor);
            this.CntrLeftDamageInfoUI_TweenAlpha = root.Find("MainUI/Anchor_Top/RoundInfoGroup/EnemyFormationIconButton/CntrDamageHealInfoUI/CntrLeftDamageInfoUI").GetComponent$1(TweenAlpha.ctor);
            this.MagicButton_UIButton = root.Find("MainUI/Anchor_BottomRight/BottomButtonGrid/MagicButton").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(BattleView);
var ModelCopy = {
    fullname: "ModelCopy",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Class",
    definition: {
        ctor: function (pRealityModel){
            this.mRealityModel = null;
            this.mCopy = null;
            this.mModelAlphaUpdater = null;
            System.Object.ctor.call(this);
            this.mRealityModel = pRealityModel;
        },
        InitializeUI: function (pPrefab){
            this.mCopy.set_parent(pPrefab.get_parent());
            this.mCopy.set_localPosition(pPrefab.get_localPosition());
            this.mCopy.set_localRotation(pPrefab.get_localRotation());
            this.mCopy.set_localScale(pPrefab.get_localScale());
            this.get_ModelAlphaUpdater().SetTransparent(0.5);
            this.PlayBattleAnimator();
        },
        PlayBattleAnimator: function (){
            var animator = this.mCopy.GetComponentInChildren$1(UnityEngine.Animator.ctor);
            if (UnityEngine.Object.op_Inequality(animator, null))
                ModelHelper.PlayAnimation(animator, "battle" /* ModelHelper.Anim_battle */, false, null, false, 1 /* ModelHelper.Animator_Layer_BattleLayer */);
        },
        ShowCopy: function (){
            this.get_Copy().get_gameObject().SetActive(true);
        },
        HideCopy: function (){
            this.get_Copy().get_gameObject().SetActive(false);
        },
        Dispose: function (){
            NGUITools.Destroy(this.mCopy);
            this.mCopy = null;
            this.mRealityModel = null;
            if (null != this.mModelAlphaUpdater){
                this.mModelAlphaUpdater.Dispose();
                this.mModelAlphaUpdater = null;
            }
        },
        Copy$$: "UnityEngine.Transform",
        get_Copy: function (){
            if (UnityEngine.Object.op_Equality(null, this.mCopy)){
                this.mCopy = NGUITools.AddChild$$GameObject$$GameObject(this.mRealityModel.get_transform().get_parent().get_gameObject(), this.mRealityModel).get_transform();
                this.InitializeUI(this.mRealityModel.get_transform());
            }
            return this.mCopy;
        },
        ModelAlphaUpdater$$: "ModelAlphaUpdater",
        get_ModelAlphaUpdater: function (){
            if (null == this.mModelAlphaUpdater){
                this.mModelAlphaUpdater = new ModelAlphaUpdater.ctor();
                this.mModelAlphaUpdater.Initialize(this.mCopy.get_gameObject(), false);
            }
            return this.mModelAlphaUpdater;
        }
    }
};
JsTypes.push(ModelCopy);
var MonsterSelectView = {
    fullname: "MonsterSelectView",
    baseTypeName: "BaseView",
    staticDefinition: {
        CreateNew: function (mc, selectDelegate){
            var monsterSelectPrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("MonsterSelectPrefab"), UnityEngine.GameObject.ctor);
            var monsterSelectGO = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().BattleUIHUDPanel.get_cachedGameObject(), monsterSelectPrefab);
            var monsterSelectView = BaseView.Create$1$$GameObject(MonsterSelectView.ctor, monsterSelectGO);
            monsterSelectView.SetDelegate(selectDelegate);
            var follower = monsterSelectGO.AddComponent$1(UIFollowTarget.ctor);
            follower.gameCamera = LayerManager.get_Root().BattleCamera;
            follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
            monsterSelectView.UpdateFollowTarget(mc);
            monsterSelectView.SetData(mc);
            return monsterSelectView;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameLabel_UILabel = null;
            this._selectSprite = null;
            this._selectButton = null;
            this._selectButtonEventTrigger = null;
            this._mc = null;
            this._onSelectDelegate = null;
            BaseView.ctor.call(this);
        },
        UpdateFollowTarget: function (mc){
            var follower = this.get_gameObject().GetComponent$1(UIFollowTarget.ctor);
            if (UnityEngine.Object.op_Equality(follower, null)){
                return;
            }
            var tf = mc.GetMountHit();
            if (UnityEngine.Object.op_Equality(tf, null)){
                tf = mc.get_gameObject().get_transform();
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.5, 0);
            }
            else {
                tf.set_localRotation(UnityEngine.Quaternion.get_identity());
                tf.set_localScale(UnityEngine.Vector3.get_one());
                tf.set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(tf.get_position().x, tf.get_position().y, tf.get_position().z));
                follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0, 0);
            }
            follower.target = tf;
            this.DisableUIFollowTargetDelay(follower);
        },
        DisableUIFollowTargetDelay: function (pUIFollowTarget){
            var tTimer = System.String.Format$$String$$Object("DisableUIFollowTargetDelay_{0}", this.get_gameObject().GetInstanceID());
            JSTimer.get_Instance().CancelCd(tTimer);
            JSTimer.get_Instance().SetupCoolDown(tTimer, 0.1, null, $CreateAnonymousDelegate(this, function (){
                if (UnityEngine.Object.op_Equality(null, pUIFollowTarget))
                    return;
                pUIFollowTarget.set_enabled(false);
            }), 0.1, false);
        },
        add__onSelectDelegate: function (value){
            this._onSelectDelegate = $CombineDelegates(this._onSelectDelegate, value);
        },
        remove__onSelectDelegate: function (value){
            this._onSelectDelegate = $RemoveDelegate(this._onSelectDelegate, value);
        },
        LateElementBinding: function (){
            BaseView.commonPrototype.LateElementBinding.call(this);
            this.NameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, this.get_gameObject(), "NameLabel");
            this._selectSprite = GameObjectExt.FindScript$1(UISprite.ctor, this.get_gameObject(), "SelectSprite");
            this._selectButton = GameObjectExt.FindScript$1(UIButton.ctor, this.get_gameObject(), "SelectSprite");
            this._selectButtonEventTrigger = GameObjectExt.FindScript$1(UIEventTrigger.ctor, this.get_gameObject(), "SelectSprite");
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._selectButton.onClick, $CreateDelegate(this, this.OnSelectButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._selectButtonEventTrigger.onPress, $CreateDelegate(this, this.OnPressSelectButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._selectButtonEventTrigger.onRelease, $CreateDelegate(this, this.OnReleaseSelectButton));
        },
        SetDelegate: function (selectDelegate){
            this._onSelectDelegate = selectDelegate;
        },
        OnPressSelectButton: function (){
            GameDebuger.TODO("if (NewBieGuideManager.Instance.IsForceGuideRunning())\n        {\n            return;\n        }        \n");
            GameDebuger.TODO("if (BattleController.Instance.IsGuideBattle)\n        {\n            return;\n        }");
            JSTimer.get_Instance().SetupCoolDown("BattleOrderArrowClickTimer", 0.4, null, $CreateAnonymousDelegate(this, function (){
                this._mc.PlayTargetOrderArrowEffect();
            }), 0.1, false);
            JSTimer.get_Instance().SetupCoolDown("BattleBuffClickTimer", 0.6, null, $CreateAnonymousDelegate(this, function (){
                ProxyMainUIModule.OpenBattleBuffTipsView(this._mc);
            }), 0.1, false);
        },
        OnReleaseSelectButton: function (){
            GameDebuger.TODO("if (NewBieGuideManager.Instance.IsForceGuideRunning())\n        {\n            return;\n        }           \n");
            GameDebuger.TODO("if (BattleController.Instance.IsGuideBattle)\n        {\n            return;\n        }");
            JSTimer.get_Instance().CancelCd("BattleOrderArrowClickTimer");
            JSTimer.get_Instance().CancelCd("BattleBuffClickTimer");
        },
        OnSelectButtonClick: function (){
            if (this._onSelectDelegate != null){
                this._onSelectDelegate();
            }
        },
        SetData: function (mc){
            this._mc = mc;
            if (mc.GetFaction() != null){
                GameDebuger.TODO("NameLabel_UILabel.text = \'[b]\' + mc.GetGrade() + \' \' + mc.GetFaction ().shortDesc;");
            }
            else {
                if (mc.IsMonster()){
                    this.NameLabel_UILabel.set_text("");
                }
                else {
                    this.NameLabel_UILabel.set_text("[b]" + mc.GetGrade().toString());
                }
            }
        },
        Show: function (show, isCouple){
            GameDebuger.Log(System.String.Format$$String$$Object("Show:{0} MonsterSelectView", show), null);
            if (show){
                this.SetData(this._mc);
            }
            else {
                this.NameLabel_UILabel.set_text("");
            }
            this._selectButton.set_enabled(show);
            this._selectSprite.set_alpha(show ? 1 : (0.003921569 /* 1f / 255f */));
            if (show){
                this._selectSprite.set_spriteName(isCouple ? "choice-couple" : "choice");
            }
        },
        Destroy: function (){
            GameDebuger.Log("Destroy MonsterSelectView", null);
            JSTimer.get_Instance().CancelCd("BattleOrderArrowClickTimer");
            JSTimer.get_Instance().CancelCd("BattleBuffClickTimer");
            this._mc.StopTargetSelectEffect();
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
            this._mc = null;
        }
    }
};
JsTypes.push(MonsterSelectView);
var UIBattleStatusEffectController = {
    fullname: "UIBattleStatusEffectController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            UIBattleStatusEffectController.fontType = ["ReduceHPFont", "AddHPFont", "CritFont", "AddHPCritFont", "ReduceVirtualHPFont"];
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, BattleHUDText.ctor);
        },
        AfterInitView: function (){
            this.get_View().followTarget.set_AlwaysVisible(true);
            this.get_View().followTarget.gameCamera = LayerManager.get_Root().BattleCamera;
            this.get_View().followTarget.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
        },
        OnDispose: function (){
            this.Clear();
        },
        Clear: function (){
            this.get_View().followTarget.offset = UnityEngine.Vector3.get_zero();
            this.get_View().followTarget.target = null;
            this.get_View().statusSprite.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
            this.get_View().msgLbl.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
            this.get_View().damageInfo.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
            this.get_View().skillInfo.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
            AssetPipeline.ResourcePoolManager.get_Instance().DespawnUI(this.get_gameObject());
        },
        ShowStatusEffect: function (target, effectName){
            if (UnityEngine.Object.op_Equality(target, null))
                return;
            this.HideAll();
            this.get_View().statusSprite.get_cachedGameObject().SetActive(true);
            this.get_View().statusSprite.set_spriteName(effectName);
            this.get_View().statusSprite.MakePixelPerfect();
            this.get_View().followTarget.target = target;
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetRelative$1$$T(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOLocalMoveY(this.get_View().statusSprite.get_cachedTransform(), 40, 1, false)), $CreateDelegate(this, this.DestroyMe));
        },
        ShowDamage: function (target, msg, fontIndex, duration){
            if (UnityEngine.Object.op_Equality(target, null))
                return;
            this.HideAll();
            this.get_View().damageLbl.get_cachedGameObject().SetActive(true);
            this.get_View().damageLbl.set_bitmapFont(FontManager.GetFont(UIBattleStatusEffectController.fontType[fontIndex]));
            this.get_View().damageLbl.set_fontSize(22);
            this.get_View().damageLbl.set_text(msg);
            if (fontIndex == 2){
                this.get_View().critSprite.get_cachedGameObject().SetActive(true);
                this.get_View().critSprite.set_spriteName("reduceHpCrit");
            }
            else if (fontIndex == 3){
                this.get_View().critSprite.get_cachedGameObject().SetActive(true);
                this.get_View().critSprite.set_spriteName("addHpCrit");
            }
            else {
                this.get_View().critSprite.get_cachedGameObject().SetActive(false);
            }
            this.get_View().followTarget.target = target;
            if (fontIndex != 4){
                DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetRelative$1$$T(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOLocalMoveY(this.get_View().damageInfo.get_transform(), 35, duration, false)), $CreateDelegate(this, this.DestroyMe));
            }
            else {
                DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetRelative$1$$T(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOLocalMove(this.get_View().damageInfo.get_transform(), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-70 /* -70f */, 35, 0), duration, false)), $CreateDelegate(this, this.DestroyMe));
            }
        },
        ShowSkillName: function (name, target){
            if (UnityEngine.Object.op_Equality(target, null)){
                GameDebuger.LogError(System.String.Format$$String$$Object("[错误]ShowSkillName failed , target == null , name:{0}", name), null);
                return;
            }
            this.HideAll();
            this.get_View().skillInfo.SetActive(true);
            this.get_View().skillSpriteAnimation.ResetToBeginning();
            this.get_View().skillNameLbl.get_cachedGameObject().SetActive(false);
            this.get_View().skillNameLbl.set_text("[b]" + name);
            this.get_View().followTarget.target = target;
            this.CancelInvoke$$String("HideSkillEff");
            this.CancelInvoke$$String("DoShowSkillName");
            this.Invoke("HideSkillEff", 1);
            this.Invoke("DoShowSkillName", 0.02);
        },
        DoShowSkillName: function (){
            this.get_View().skillNameLbl.get_gameObject().SetActive(true);
            UIHelper.PlayAlphaTween(this.get_View().skillNameLbl, 1, 0, 0.5, 0.45, null);
        },
        HideSkillEff: function (){
            this.get_View().skillInfo.SetActive(false);
            this.DestroyMe();
        },
        ShowMsg: function (msg, target){
            if (UnityEngine.Object.op_Equality(target, null))
                return;
            this.HideAll();
            this.get_View().msgLbl.get_cachedGameObject().SetActive(true);
            this.get_View().msgLbl.set_text(msg);
            this.get_View().followTarget.target = target;
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetRelative$1$$T(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOLocalMoveY(this.get_View().msgLbl.get_cachedTransform(), 70, 2, false)), $CreateDelegate(this, this.DestroyMe));
        },
        HideAll: function (){
            this.get_View().damageLbl.get_cachedGameObject().SetActive(false);
            this.get_View().statusSprite.get_gameObject().SetActive(false);
            this.get_View().skillInfo.SetActive(false);
            this.get_View().msgLbl.get_cachedGameObject().SetActive(false);
            this.get_View().critSprite.get_cachedGameObject().SetActive(false);
        },
        DestroyMe: function (){
            this.Clear();
        }
    }
};
JsTypes.push(UIBattleStatusEffectController);
var BattleMagicEquipCell = {
    fullname: "BattleMagicEquipCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleMagicEquipCell.NAME = "BattleMagicEquipCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameLabel_UILabel = null;
            this.IconSprite_UISprite = null;
            this.DescLabel_UILabel = null;
            this.LabelCost_UILabel = null;
            this.BattleMagicEquipCell_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.NameLabel_UILabel = root.Find("NameLabel").GetComponent$1(UILabel.ctor);
            this.IconSprite_UISprite = root.Find("IconSprite").GetComponent$1(UISprite.ctor);
            this.DescLabel_UILabel = root.Find("DescLabel").GetComponent$1(UILabel.ctor);
            this.LabelCost_UILabel = root.Find("LabelCost").GetComponent$1(UILabel.ctor);
            this.BattleMagicEquipCell_UIButton = root.GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(BattleMagicEquipCell);
var BattleMagicEquipCellController = {
    fullname: "BattleMagicEquipCellController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, BattleMagicEquipCell.ctor);
        },
        Open: function (){
        },
        AfterInitView: function (){
            this.UpdateStaticData();
        },
        RegistCustomEvent: function (){
            MonolessAutoCacher.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BattleMagicEquipCell_UIButton.onClick, $CreateDelegate(this, this.OnItemSelectHandler));
        },
        OnItemSelectHandler: function (){
            GameDebuger.TODO("if (null != mOnItemSelect)\n            mOnItemSelect(mMagicEquipmentDto, mMagicEquipmentActiveSkill);");
        },
        UpdateDynamicData: function (){
            GameDebuger.TODO("if (null != mMagicEquipmentDto && null != mMagicEquipmentDto.itemDto && null != mMagicEquipmentDto.itemDto.item)\n        {\n            MagicEquipment tMagicEquipment = mMagicEquipmentDto.itemDto.item as MagicEquipment;\n            if (null != tMagicEquipment)\n            {\n                GameDebuger.TODO(\'mMagicEquipmentActiveSkill = ModelManager.MagicEquipmentUpGrade.GetMagicEquipmentActiveSkill(tMagicEquipment.activeSkillId);\');\n            }\n        }");
        },
        UpdateStaticData: function (){
        },
        UpdateAllUI: function (){
            var tName = System.String.Empty;
            var tDesc = System.String.Empty;
            var tIcon = System.String.Empty;
            var tNeedMagic = 0;
            GameDebuger.TODO("\nint tHasMagic = ModelManager.MagicEquipmentUpGrade.GetHasMagicValue();\n\n        if (null != mMagicEquipmentDto && null != mMagicEquipmentDto.itemDto && null != mMagicEquipmentDto.itemDto.item)\n        {\n            MagicEquipment tMagicEquipment = mMagicEquipmentDto.itemDto.item as MagicEquipment;\n            if (null != tMagicEquipment)\n            {\n                tName = tMagicEquipment.name;\n                if (null != mMagicEquipmentActiveSkill)\n                {\n                    tIcon = mMagicEquipmentActiveSkill.icon;\n                    tNeedMagic = ModelManager.MagicEquipmentUpGrade.GetNeedMagicValue(mMagicEquipmentActiveSkill);\n                    if (tNeedMagic <= tHasMagic)\n                    {\n                        tDesc = mMagicEquipmentActiveSkill.shortDescription;\n                    }\n                    else\n                    {\n                        tDesc = string.Format(\"需要{0}点法力\", (int)tNeedMagic).WrapColor(ColorConstantV3.Color_Red_Str);\n                    }\n\n                }\n            }\n        }        \n");
            this.get_View().NameLabel_UILabel.set_text(tName);
            this.get_View().DescLabel_UILabel.set_text(tDesc);
            this.get_View().LabelCost_UILabel.set_text(tNeedMagic.toString());
            UIHelper.SetItemIcon(this._view.IconSprite_UISprite, tIcon, false);
        }
    }
};
JsTypes.push(BattleMagicEquipCellController);
var BattleMagicEquipSelectController = {
    fullname: "BattleMagicEquipSelectController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mMonsterController = null;
            this._itemDic = new System.Collections.Generic.Dictionary$2.ctor(UnityEngine.GameObject.ctor, BattleMagicEquipCellController.ctor);
            MonoViewController$1.ctor.call(this, BattleMagicEquipSelectView.ctor);
        },
        AfterInitView: function (){
            this.UpdateStaticData();
            this.InitItemList();
        },
        RegistCustomEvent: function (){
            this.get_View().Table_UIRecycledList.onUpdateItem = $CreateDelegate(this, this.OnUpdateItemInfo$$GameObject$$Int32$$Int32);
        },
        OnDispose: function (){
            this.StopAllCoroutines();
            this.get_View().Table_UIRecycledList.onUpdateItem = null;
        },
        UpdateData: function (){
            this.UpdateDynamicData();
            this.UpdateAllUI();
        },
        UpdateDynamicData: function (){
            GameDebuger.TODO("dataList = ModelManager.MagicEquipment.GetAllWearMagicEquipment();");
        },
        UpdateStaticData: function (){
        },
        UpdateAllUI: function (){
            this.UpdateItemList();
            this.UpdateMagicValue();
        },
        InitItemList: function (){
            this.InitItemList$$UIRecycledList$$Dictionary$2$GameObject$BattleMagicEquipCellController(this.get_View().Table_UIRecycledList, this._itemDic);
        },
        InitItemList$$UIRecycledList$$Dictionary$2$GameObject$BattleMagicEquipCellController: function (pUIRecycledList, pDataList){
            if (UnityEngine.Object.op_Inequality(null, pUIRecycledList)){
                pDataList.Clear();
                for (var i = 0; i < 3; ++i){
                    var com = this.AddCachedChild$2$$GameObject$$String$$String(BattleMagicEquipCellController.ctor, BattleMagicEquipCell.ctor, pUIRecycledList.get_gameObject(), "BattleMagicEquipCell" /* BattleMagicEquipCell.NAME */, "");
                    var item = com.get_gameObject();
                    item.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(i * pUIRecycledList.itemSize, 0, 0));
                    item.set_name("BattleMagicEquipCell" /* BattleMagicEquipCell.NAME */ + i);
                    pDataList.Add(item, com);
                }
            }
        },
        UpdateItemList: function (){
            var tCount = 0;
            GameDebuger.TODO("if (null != dataList && dataList.Count > 0)\n        {\n            tCount = dataList.Count;\n        }");
            this.get_View().Table_UIRecycledList.UpdateDataCount(tCount, true);
            this.UpdateGridBG(tCount);
        },
        UpdateGridBG: function (pAddCount){
            this.get_View().BGSprite_UISprite.set_height(133 + 110 * pAddCount);
        },
        OnUpdateItemInfo$$GameObject$$Int32$$Int32: function (item, itemIndex, dataIndex){
            this.OnUpdateItemInfo$$GameObject$$Int32$$Int32$$Dictionary$2$GameObject$BattleMagicEquipCellController(item, itemIndex, dataIndex, this._itemDic);
        },
        OnUpdateItemInfo$$GameObject$$Int32$$Int32$$Dictionary$2$GameObject$BattleMagicEquipCellController: function (item, itemIndex, dataIndex, pDic){
            if (null != pDic){
                var com = null;
                if ((function (){
                    var $1 = $Ref(null, com);
                    var $res = pDic.TryGetValue(item, $1);
                    com = $1.Value;
                    return $res;
                }).call(this)){
                    GameDebuger.TODO("if (dataList != null && dataIndex < dataList.Count)\n                {\n                    com.UpdateData(dataList[dataIndex], OnItemSelectedHandler);\n                }\n                else\n                {\n                    com.UpdateData(null, null);\n                }");
                }
            }
        },
        OnListUpdateHandler: function (){
            if (UIHelper.IsViewUpdateEnable(this.get_View())){
                this.UpdateData();
            }
        },
        UpdateMagicValue: function (){
            GameDebuger.TODO("\nint tCurMagicValue = ModelManager.MagicEquipmentUpGrade.GetHasMagicValue();\n        int tMaxMagicValue = ModelManager.MagicEquipmentUpGrade.MaxMagicValue;\n        UpdateMagicValue(tCurMagicValue, tMaxMagicValue);        \n");
        },
        UpdateMagicValue$$Int32$$Int32: function (pCurMagicValue, pMaxMagicValue){
            this.get_View().LabelMagicValue_UILabel.set_text(System.String.Format$$String$$Object$$Object("法力：{0}/{1}", pCurMagicValue, pMaxMagicValue));
        }
    }
};
JsTypes.push(BattleMagicEquipSelectController);
var BattleMagicEquipSelectView = {
    fullname: "BattleMagicEquipSelectView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleMagicEquipSelectView.NAME = "BattleMagicEquipSelectView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BGSprite_UISprite = null;
            this.Table_UIRecycledList = null;
            this.LabelMagicValue_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BGSprite_UISprite = root.Find("AnchorContainer/BGSprite").GetComponent$1(UISprite.ctor);
            this.Table_UIRecycledList = root.Find("AnchorContainer/TableContainer/GameObject/Table").GetComponent$1(UIRecycledList.ctor);
            this.LabelMagicValue_UILabel = root.Find("AnchorContainer/CntrTip/LabelMagicValue").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(BattleMagicEquipSelectView);
var BattleSkillSelectController = {
    fullname: "BattleSkillSelectController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleSkillSelectController.GuideSkillSelectViewOpen = "GuideSkillSelectViewOpen";
            BattleSkillSelectController.SkillCellPrefabPath = "SkillCellPrefab";
            BattleSkillSelectController.SKILL_CD_COOL_DOWN = "SKILL_CD_COOL_DOWN_ID_{0}";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._skillTypeMode = BattleSkillSelectController.SkillType.None;
            this.mSkillButtonCellList = new System.Collections.Generic.List$1.ctor(SkillCellPrefab.ctor);
            this._mc = null;
            this._skillCount = 0;
            this._firstSkillWidget = null;
            this.OnSkillSelect = null;
            MonoViewController$1.ctor.call(this, BattleSkillSelectView.ctor);
        },
        SkillTypeMode$$: "BattleSkillSelectController+SkillType",
        get_SkillTypeMode: function (){
            return this._skillTypeMode;
        },
        add_OnSkillSelect: function (value){
            this.OnSkillSelect = $CombineDelegates(this.OnSkillSelect, value);
        },
        remove_OnSkillSelect: function (value){
            this.OnSkillSelect = $RemoveDelegate(this.OnSkillSelect, value);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, $CreateDelegate(this, this.OnSkillPointUpdate));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, $CreateDelegate(this, this.OnSkillCDUpdate));
        },
        OnDispose: function (){
            if (this.OnSkillSelect != null){
                this.OnSkillSelect(null);
                this.OnSkillSelect = null;
            }
            this.mSkillButtonCellList.Clear();
            this._firstSkillWidget = null;
            this._skillTypeMode = BattleSkillSelectController.SkillType.None;
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, $CreateDelegate(this, this.OnSkillPointUpdate));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, $CreateDelegate(this, this.OnSkillCDUpdate));
        },
        OpenStunt: function (mc, skills, spendSpRate, OnStuntSelectDelegate){
            this._mc = mc;
            this.OnSkillSelect = OnStuntSelectDelegate;
            this.UpdateSkillList(skills, spendSpRate, false, 0);
            this._skillTypeMode = BattleSkillSelectController.SkillType.Stunt;
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_COMMAND_ENTER);
        },
        OpenGuide: function (mc, OnSkillSelectDelegate){
            this._mc = mc;
            this.OnSkillSelect = OnSkillSelectDelegate;
            var skills = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            skills.Add(1111);
            this.UpdateSkillList(skills, 1, false, 0);
            this.Invoke("DelaySendOpenEvent", 0.1);
            this._skillTypeMode = BattleSkillSelectController.SkillType.Guide;
        },
        Open: function (mc, OnSkillSelectDelegate){
            this._mc = mc;
            this.OnSkillSelect = OnSkillSelectDelegate;
            if (mc.IsPet()){
                this.ShowPetSkill(mc);
            }
            else {
                this.ShowHeroSkill(mc);
            }
            this._skillTypeMode = BattleSkillSelectController.SkillType.Skill;
        },
        OnCloseButtonClick: function (){
            if (this.OnSkillSelect != null){
                this.OnSkillSelect(null);
                this.OnSkillSelect = null;
            }
            ProxyBattleDemoModule.HideSkillSelect();
        },
        OnSkillPointUpdate: function (pPlayerUID, pSkillPoint){
            if (!this.SuitableToUpdateView(pPlayerUID))
                return;
            this.UpdateSkillItemList();
        },
        OnSkillCDUpdate: function (pPlayerUID, pCDRemain, pTotalCD){
            if (!this.SuitableToUpdateView(pPlayerUID))
                return;
            this.UpdateSkillItemListCD(pCDRemain, pTotalCD);
        },
        ShowHeroSkill: function (mc){
            var skillIds = mc.GetAllSkillIds();
            this.UpdateSkillList(skillIds, 1, mc.IsCoupleAtBattle(), mc.GetFriendDegree());
            this.Invoke("DelaySendOpenEvent", 0.1);
        },
        DelaySendOpenEvent: function (){
            UIModuleManager.get_Instance().SendOpenEvent(BattleSkillSelectController.GuideSkillSelectViewOpen, this);
        },
        AddSkillCell: function (skill, spendSpRate, isCoupleAtBattle, friendDegree){
            if (skill == null){
                return null;
            }
            if (skill.skillType == 1 /* (int)Skill.SkillType.Passive */){
                return null;
            }
            this._skillCount++;
            var go = this.AddCachedChild$$GameObject$$String(this.get_View().Table.get_gameObject(), BattleSkillSelectController.SkillCellPrefabPath);
            var skillId = skill.id;
            GameDebuger.TODO("if (skillId < 10)\n        {\n            skillId += 3000;\n        }");
            go.set_name(skillId.toString());
            var skillCellPrefab = BaseView.Create$1$$GameObject(SkillCellPrefab.ctor, go);
            this.UpdateItemUI(skillCellPrefab, spendSpRate, skill);
            return skillCellPrefab;
        },
        UpdateItemUI: function (pSkillCellPrefab, spendSpRate, pSkill){
            if (null == pSkillCellPrefab || UnityEngine.Object.op_Equality(null, pSkillCellPrefab.get_gameObject())){
                GameDebuger.LogError(System.String.Format$$String$$Object("[错误]UpdateItemUI  failed , pSkillCellPrefab:{0} or pSkillCellPrefab.gameObject is null !", pSkillCellPrefab), null);
                return;
            }
            var tSkill = pSkill;
            var tSkillId = 0;
            if (null == tSkill){
                if (!(function (){
                    var $1 = $Ref(null, tSkillId);
                    var $res = System.Int32.TryParse$$String$$Int32(pSkillCellPrefab.get_gameObject().get_name(), $1);
                    tSkillId = $1.Value;
                    return $res;
                }).call(this)){
                    GameDebuger.LogError(System.String.Format$$String$$Object("[错误]UpdateItemUI failed, pSkillCellPrefab.gameObject.name:{0} is invalid ! ", pSkillCellPrefab.get_gameObject().get_name()), null);
                    return;
                }
                tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, tSkillId);
            }
            tSkillId = tSkillId < 10 ? (tSkillId + 3000) : tSkillId;
            var tTempString = System.String.Empty;
            var limitTip = System.String.Empty;
            tTempString = DemoSkillHelper.GetSkillActionPointLimitTip$$Int64$$Int32(this._mc.GetId(), tSkillId);
            if (!System.String.IsNullOrEmpty(tTempString))
                limitTip = tTempString;
            GameDebuger.TODO("if (!string.IsNullOrEmpty(tSkill.applyHpLimitFormula))\n        {\n            int value = ExpressionManager.DotSkillFormula(\'applyHpLimitFormula\' + tSkill.id, tSkill.applyHpLimitFormula, _mc.videoSoldier);\n            if (_mc.currentHP < Math.Abs(value))\n            {\n                limitTip = \'气血不符\';\n            }\n        }\n\n        if (!string.IsNullOrEmpty(tSkill.applyHpMaxLimitFormula))\n        {\n            int value = ExpressionManager.DotSkillFormula(\'applyHpMaxLimitFormula\' + tSkill.id, tSkill.applyHpMaxLimitFormula, _mc.videoSoldier);\n            if (_mc.currentHP > Math.Abs(value))\n            {\n                limitTip = \'气血不符\';\n            }\n        }\n\n        if (!string.IsNullOrEmpty(tSkill.spendHpFormula))\n        {\n            int value = ExpressionManager.DoSkillFormula(\'spendHpFormula\' + tSkill.id, tSkill.spendHpFormula, _mc.videoSoldier);\n            if (_mc.currentHP < Math.Abs(value))\n            {\n                limitTip = \'气血不足\';\n            }\n        }\n\n        if (!string.IsNullOrEmpty(tSkill.spendMpFormula))\n        {\n            int value = ExpressionManager.DoSkillFormula(\'spendMpFormula\' + tSkill.id, tSkill.spendMpFormula, _mc.videoSoldier);\n            if (_mc.currentMP < Math.Abs(value))\n            {\n                limitTip = \'魔法不足\';\n            }\n        }");
            tTempString = DemoSkillHelper.GetSkillSPLimitTip(this._mc, tSkill);
            if (!System.String.IsNullOrEmpty(tTempString))
                limitTip = tTempString;
            if (tSkill.id == 1813 || tSkill.id == 1814 || tSkill.id == 1815 || tSkill.id == 1816){
                if (this._mc.ContainsBuff(120) == false){
                    limitTip = "需要变身";
                }
            }
            if (this.IsCoupleSkill(tSkill)){
                GameDebuger.TODO("if (isCoupleAtBattle == false)\n            {\n                pSkillCellPrefab.SkillCellPrefab_UISprite.isGrey = true;\n                limitTip = \'需要配偶上阵\';\n            }\n            else\n            {\n                if (friendDegree >= tSkill.friendly)\n                {\n                    pSkillCellPrefab.SkillCellPrefab_UISprite.isGrey = false;\n                }\n                else\n                {\n                    pSkillCellPrefab.SkillCellPrefab_UISprite.isGrey = true;\n                    limitTip = \'好友度不足\';\n                }\n            }");
            }
            else {
                pSkillCellPrefab.SkillCellPrefab_UISprite.set_isGrey(false);
            }
            pSkillCellPrefab.NameLabel_UILabel.set_text(tSkill.name);
            pSkillCellPrefab.TypeLabel_UILabel.set_text(limitTip == "" ? tSkill.shortDescription : limitTip);
            if (limitTip == ""){
                pSkillCellPrefab.TypeLabel_UILabel.set_color(ColorConstant.Color_Battle_SkillCanUseTip);
            }
            else {
                pSkillCellPrefab.TypeLabel_UILabel.set_color(ColorConstant.Color_Battle_SkillCanNotUseTip);
            }
            pSkillCellPrefab.SpriteMask_UISprite.set_fillAmount(0);
            UIHelper.SetSkillIcon(pSkillCellPrefab.IconSprite_UISprite, tSkill.icon, false);
            var tOnToolTip = $CreateAnonymousDelegate(this, function (pGameObject, pShow){
                GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(AppDto.Skill.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_SHOW_SKILL_TIP, pSkill, pShow);
            });
            if (pSkillCellPrefab.SkillCellPrefab_UISprite.get_isGrey() == false){
                var button = pSkillCellPrefab.SkillCellPrefab_UIButton;
                EventDelegate.Set$$List$1$EventDelegate$$Callback(button.onClick, $CreateAnonymousDelegate(this, function (){
                    if (this.OnSkillSelect != null){
                        this.OnSkillSelect(tSkill);
                        this.OnSkillSelect = null;
                    }
                    ProxyBattleDemoModule.HideSkillSelect();
                }));
                UIEventListener.Get(pSkillCellPrefab.IconSprite_UISprite.get_gameObject()).onTooltip = tOnToolTip;
                if (UnityEngine.Object.op_Equality(this._firstSkillWidget, null)){
                    this._firstSkillWidget = button.get_sprite();
                }
            }
        },
        IsCoupleSkill: function (skill){
            GameDebuger.TODO("return skill.relationType == Skill.RelationTypeEnum_Couple;");
            return false;
        },
        firstSkillWidget$$: "UIWidget",
        get_firstSkillWidget: function (){
            return this._firstSkillWidget;
        },
        ShowPetSkill: function (mc){
            GameDebuger.TODO("PetPropertyInfo petPropertyInfo = ModelManager.Pet.GetPetInfoByUID(mc.GetId());\n\n        List<int> skills = petPropertyInfo.GetBattleSkillList();        \n");
            var skills = mc.GetAllSkillIds();
            this.UpdateSkillList(skills, 1, false, 0);
        },
        UpdateSkillList: function (list, spendSpRate, isCoupleAtBattle, friendDegree){
            this.get_gameObject().SetActive(true);
            GameObjectExt.RemoveChildren$$GameObject(this.get_View().Table.get_gameObject());
            this.mSkillButtonCellList.Clear();
            this._skillCount = 0;
            var checkList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var sortList = this.ChangeSort(list);
            var tSkillButtonCell = null;
            for (var i = 0,len = sortList.get_Count(); i < len; i++){
                var skillId = sortList.get_Item$$Int32(i);
                if (!checkList.Contains(skillId)){
                    checkList.Add(skillId);
                    var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillId);
                    tSkillButtonCell = this.AddSkillCell(skill, spendSpRate, isCoupleAtBattle, friendDegree);
                    if (null != tSkillButtonCell)
                        this.mSkillButtonCellList.Add(tSkillButtonCell);
                }
            }
            if (this._skillCount > 6){
                var n = 0;
                if (this._skillCount % 2 > 0){
                    n = ((this._skillCount / 2) | 0) + 1;
                }
                else {
                    n = ((this._skillCount / 2) | 0);
                }
                this.get_View().BGSprite_UISprite.set_height(87 * n + 25);
                this.get_View().BGSprite_UISprite.set_width(510);
                this.get_View().Table.columns = 2;
            }
            else {
                this.get_View().BGSprite_UISprite.set_height(87 * this._skillCount + 25);
                this.get_View().BGSprite_UISprite.set_width(265);
                this.get_View().Table.columns = 1;
            }
            this.get_View().Table.set_repositionNow(true);
            this.UpdateSkillItemListCD(ModelManager.get_BattleDemo().CurrentCommonCDLeft, ModelManager.get_BattleDemo().get_CommonCD());
        },
        ChangeSort: function (list){
            var result = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            if (list.get_Count() > 6){
                var rowNum = ((list.get_Count() / 2) | 0);
                if (list.get_Count() % 2 != 0){
                    rowNum = ((list.get_Count() / 2) | 0) + 1;
                }
                for (var i = 0; i < rowNum; i++){
                    var a = i;
                    var b = rowNum + i;
                    if (list.get_Count() > a){
                        result.Add(list.get_Item$$Int32(a));
                    }
                    if (list.get_Count() > b){
                        result.Add(list.get_Item$$Int32(b));
                    }
                }
            }
            else {
                for (var i = 0; i < list.get_Count(); i++){
                    result.Add(list.get_Item$$Int32(i));
                }
            }
            return result;
        },
        UpdatePosition: function*(){
            yield(null);
            var trans = this.get_View().BGSprite_UISprite.get_transform();
            var pos = trans.get_localPosition();
            GameEventCenter.SendEvent$1$$Event$1$$T(UnityEngine.Transform.ctor, GameEvent.BATTLE_UI_UPDATE_POSITION, trans);
            trans.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(pos.x, trans.get_localPosition().y, 0));
        },
        SuitableToUpdateView: function (pPlayerUID){
            if (BaseView.IsViewDestroy(this.get_View()) || pPlayerUID <= 0 || UnityEngine.Object.op_Equality(null, this._mc) || null == this._mc.videoSoldier || pPlayerUID != this._mc.videoSoldier.id)
                return false;
            return true;
        },
        UpdateSkillItemList: function (){
            if (null == this.mSkillButtonCellList || this.mSkillButtonCellList.get_Count() <= 0)
                return;
            var tSkillButtonCell = null;
            for (var tCounter = 0; tCounter < this.mSkillButtonCellList.get_Count(); tCounter++){
                tSkillButtonCell = this.mSkillButtonCellList.get_Item$$Int32(tCounter);
                this.UpdateItemUI(tSkillButtonCell, 1, null);
            }
        },
        UpdateSkillItemListCD: function (pCurrentRemain, pTotalDuration){
            if (null == this.mSkillButtonCellList || this.mSkillButtonCellList.get_Count() <= 0)
                return;
            var tPlayerUID = this._mc.videoSoldier.id;
            var tCDName = System.String.Format$$String$$Object("SKILL_CD_COOL_DOWN_ID_{0}" /* SKILL_CD_COOL_DOWN */, tPlayerUID);
            var tOnCdUpdate = $CreateAnonymousDelegate(this, function (pRemain){
                if (!this.SuitableToUpdateView(tPlayerUID))
                    this.RemoveCDTask(tCDName);
                else
                    this.UpdateSkillCDForItemUIList(pRemain / pTotalDuration);
            });
            var tOnCdFinish = $CreateAnonymousDelegate(this, function (){
                this.RemoveCDTask(tCDName);
            });
            var tCdTask = this.AddOrResetCDTask(tCDName, pTotalDuration, tOnCdUpdate, tOnCdFinish, 0.01, false);
            tCdTask.remainTime = pCurrentRemain;
        },
        UpdateSkillCDForItemUIList: function (pFillAmount){
            if (null == this.mSkillButtonCellList || this.mSkillButtonCellList.get_Count() <= 0)
                return;
            var tSkillButtonCell = null;
            for (var tCounter = 0; tCounter < this.mSkillButtonCellList.get_Count(); tCounter++){
                tSkillButtonCell = this.mSkillButtonCellList.get_Item$$Int32(tCounter);
                if (null == tSkillButtonCell)
                    continue;
                tSkillButtonCell.SpriteMask_UISprite.set_fillAmount(pFillAmount);
            }
        }
    }
};
JsTypes.push(BattleSkillSelectController);
var BattleSkillSelectView = {
    fullname: "BattleSkillSelectView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleSkillSelectView.NAME = "BattleSkillSelectView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BGSprite_UISprite = null;
            this.CloseBtn_UIButton = null;
            this.Table = null;
            this.AnchorContainer = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BGSprite_UISprite = root.Find("AnchorContainer/BGSprite").GetComponent$1(UISprite.ctor);
            this.CloseBtn_UIButton = root.Find("AnchorContainer/CloseBtn").GetComponent$1(UIButton.ctor);
            this.Table = root.Find("AnchorContainer/TableContainer/Table").GetComponent$1(UITable.ctor);
            this.AnchorContainer = root.Find("AnchorContainer").GetComponent$1(UIWidget.ctor);
        }
    }
};
JsTypes.push(BattleSkillSelectView);
var SkillCellPrefab = {
    fullname: "SkillCellPrefab",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SkillCellPrefab.NAME = "SkillCellPrefab";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameLabel_UILabel = null;
            this.TypeLabel_UILabel = null;
            this.IconSprite_UISprite = null;
            this.SkillCellPrefab_UIButton = null;
            this.SkillCellPrefab_UISprite = null;
            this.SpriteMask_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.NameLabel_UILabel = root.Find("NameLabel").GetComponent$1(UILabel.ctor);
            this.TypeLabel_UILabel = root.Find("TypeLabel").GetComponent$1(UILabel.ctor);
            this.IconSprite_UISprite = root.Find("IconGroup/IconSprite").GetComponent$1(UISprite.ctor);
            this.SkillCellPrefab_UIButton = root.GetComponent$1(UIButton.ctor);
            this.SkillCellPrefab_UISprite = root.GetComponent$1(UISprite.ctor);
            this.SpriteMask_UISprite = root.Find("IconGroup/SpriteMask").GetComponent$1(UISprite.ctor);
        }
    }
};
JsTypes.push(SkillCellPrefab);
var BattleSummonController = {
    fullname: "BattleSummonController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleSummonController.PetCellPrefabPath = "BattleSummonPetCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._currentSelectCell = null;
            this._currentSelectPetId = 0;
            this._curPetSkillList = null;
            this.OnSelect = null;
            MonoViewController$1.ctor.call(this, BattleSummonView.ctor);
        },
        add_OnSelect: function (value){
            this.OnSelect = $CombineDelegates(this.OnSelect, value);
        },
        remove_OnSelect: function (value){
            this.OnSelect = $RemoveDelegate(this.OnSelect, value);
        },
        AfterInitView: function (){
            GameDebuger.TODO("\nint MAX_SKILL_COUNT = 16;\n        _skillItemList = new List<SkillCellController>(MAX_SKILL_COUNT);\n        GameObject skillItemGrid = View.SkillGrid_UIGrid.gameObject;\n\n        for (int i = 0; i < MAX_SKILL_COUNT; ++i)\n        { \n            GameObject skillItem = AddCachedChild(skillItemGrid, CommonUIPrefabPath.ITEMCELL_BASE);\n            SkillCellController com = new SkillCellController(skillItem);\n            com.InitItem(i, null);\n            _skillItemList.Add(com);\n        }        \n");
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().SummonButton_UIButton.onClick, $CreateDelegate(this, this.OnSummonButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
        },
        OnDispose: function (){
            GameDebuger.TODO("_selectInfo = null;");
        },
        Open: function (onSelectDelegate){
            GameDebuger.TODO("\n OnSelect = onSelectDelegate;\n\n        List<PetPropertyInfo> list = ModelManager.Pet.GetCanSummonPetList();\n        View.BattleInfoLabel_UILabel.text = string.Format(\"已出战宠物数量:{0}/{1}\", BattleController.Instance.GetOldBattlePetCount(), BattleController.Instance.CanCallBattlePetCount);\n\n        for (int i = 0, len = list.Count; i < len; i++)\n        {\n            AddPetCell(list[i]);\n        }\n\n        View.LeftSprite.SetActive(list.Count > 0);        \n");
        },
        OnSummonButtonClick: function (){
            if (this._currentSelectPetId > 0){
                GameDebuger.TODO("if (BattleController.Instance.GetOldBattlePetCount() + 1 > BattleController.Instance.CanCallBattlePetCount)\n            {\n                TipManager.AddTip(\'不可以召唤更多宠物了\');\n                return;\n            }");
                GameDebuger.TODO("\n if (_selectInfo != null)\n            {\n                if ((_selectInfo.petDto.lifePoint >= 0 && _selectInfo.petDto.lifePoint <= 50) && !ModelManager.Pet.isZhenShenPet(_selectInfo))\n                {\n                    TipManager.AddTip(\"宠物寿命≤50，无法出战\");\n                    return;\n                }\n            }            \n");
                if (this.OnSelect != null){
                    this.OnSelect(this._currentSelectPetId);
                }
                ProxyBattleDemoModule.CloseSummon();
            }
            else {
                TipManager.AddTip("先选择召唤的宠物", false, false, "");
            }
        },
        OnCloseButtonClick: function (){
            ProxyBattleDemoModule.CloseSummon();
        }
    }
};
JsTypes.push(BattleSummonController);
var BattleSummonPetCell = {
    fullname: "BattleSummonPetCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleSummonPetCell.NAME = "BattleSummonPetCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ItemIcon_UISprite = null;
            this.StatusSprite_UISprite = null;
            this.NameLabel_UILabel = null;
            this.InfoLabel_UILabel = null;
            this.CellSelectSprite_UISprite = null;
            this.BattleSummonPetCell_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.ItemIcon_UISprite = root.Find("ItemCell/ItemIcon").GetComponent$1(UISprite.ctor);
            this.StatusSprite_UISprite = root.Find("ItemCell/StatusSprite").GetComponent$1(UISprite.ctor);
            this.NameLabel_UILabel = root.Find("NameLabel").GetComponent$1(UILabel.ctor);
            this.InfoLabel_UILabel = root.Find("InfoLabel").GetComponent$1(UILabel.ctor);
            this.CellSelectSprite_UISprite = root.Find("CellSelectSprite").GetComponent$1(UISprite.ctor);
            this.BattleSummonPetCell_UIButton = root.GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(BattleSummonPetCell);
var BattleSummonView = {
    fullname: "BattleSummonView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleSummonView.NAME = "BattleSummonView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.PetListGrid_UIGrid = null;
            this.SummonButton_UIButton = null;
            this.CloseBtn_UIButton = null;
            this.AttackValLbl_UILabel = null;
            this.SpeedValLbl_UILabel = null;
            this.MpValLbl_UILabel = null;
            this.MagicValLbl_UILabel = null;
            this.DefenseValLbl_UILabel = null;
            this.SkillGrid_UIGrid = null;
            this.BattleInfoLabel_UILabel = null;
            this.HpValLbl_UILabel = null;
            this.SummonLabel_UILabel = null;
            this.LeftSprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.PetListGrid_UIGrid = root.Find("RightSprite/ScrollView/PetListGrid").GetComponent$1(UIGrid.ctor);
            this.SummonButton_UIButton = root.Find("RightSprite/SummonButton").GetComponent$1(UIButton.ctor);
            this.CloseBtn_UIButton = root.Find("CloseBtn").GetComponent$1(UIButton.ctor);
            this.AttackValLbl_UILabel = root.Find("LeftSprite/InfoGrid/AttackTitleInfoCell/AttackValLbl").GetComponent$1(UILabel.ctor);
            this.SpeedValLbl_UILabel = root.Find("LeftSprite/InfoGrid/SpeedTitleInfoCell/SpeedValLbl").GetComponent$1(UILabel.ctor);
            this.MpValLbl_UILabel = root.Find("LeftSprite/InfoGrid/MpTitleInfoCell/MpValLbl").GetComponent$1(UILabel.ctor);
            this.MagicValLbl_UILabel = root.Find("LeftSprite/InfoGrid/MagicTitleInfoCell/MagicValLbl").GetComponent$1(UILabel.ctor);
            this.DefenseValLbl_UILabel = root.Find("LeftSprite/InfoGrid/DefenseTitleInfoCell/DefenseValLbl").GetComponent$1(UILabel.ctor);
            this.SkillGrid_UIGrid = root.Find("LeftSprite/SkillGrid").GetComponent$1(UIGrid.ctor);
            this.BattleInfoLabel_UILabel = root.Find("LeftSprite/BattleInfoLabel").GetComponent$1(UILabel.ctor);
            this.HpValLbl_UILabel = root.Find("LeftSprite/InfoGrid/HpTitleInfoCell/HpValLbl").GetComponent$1(UILabel.ctor);
            this.SummonLabel_UILabel = root.Find("RightSprite/SummonButton/Label").GetComponent$1(UILabel.ctor);
            this.LeftSprite = root.Find("LeftSprite").get_gameObject();
        }
    }
};
JsTypes.push(BattleSummonView);
var MonsterHPSlider = {
    fullname: "MonsterHPSlider",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            MonsterHPSlider.NAME = "MonsterHPSlider";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CntrBUFF_UIWidget = null;
            this.ReadySprite_UISprite = null;
            this.HPSlider_UISlider = null;
            this.CDSlider_UISlider = null;
            this.BuffGrid_UIGrid = null;
            this.CntrBuffIcon = null;
            this.Front_Sprite_UISprite = null;
            this.CntrBuffIcon_UIWidget = null;
            this.CntrPoint_UIWidget = null;
            this.LabelPoint_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CntrBUFF_UIWidget = root.Find("CntrBUFF").GetComponent$1(UIWidget.ctor);
            this.ReadySprite_UISprite = root.Find("ReadySprite").GetComponent$1(UISprite.ctor);
            this.HPSlider_UISlider = root.Find("HPSlider").GetComponent$1(UISlider.ctor);
            this.CDSlider_UISlider = root.Find("CDSlider").GetComponent$1(UISlider.ctor);
            this.BuffGrid_UIGrid = root.Find("CntrBUFF/BuffGrid").GetComponent$1(UIGrid.ctor);
            this.CntrBuffIcon = root.Find("CntrBUFF/CntrBuffIcon").get_gameObject();
            this.Front_Sprite_UISprite = root.Find("CDSlider/Front_Sprite").GetComponent$1(UISprite.ctor);
            this.CntrBuffIcon_UIWidget = root.Find("CntrBUFF/CntrBuffIcon").GetComponent$1(UIWidget.ctor);
            this.CntrPoint_UIWidget = root.Find("CntrPoint").GetComponent$1(UIWidget.ctor);
            this.LabelPoint_UILabel = root.Find("CntrPoint/LabelPoint").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(MonsterHPSlider);
var SkillPlayTimeHelper = {
    fullname: "SkillPlayTimeHelper",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._time = 0;
            this._videoRound = null;
            this._callSoldierIds = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            System.Object.ctor.call(this);
        },
        GetVideoRoundPlayTime: function (videoRound){
            GameDebuger.TODO("if (!BattleManager.DEBUG)\n        {\n            return 0f;\n        }");
            this._time = 0;
            GameDebuger.TODO("_time += GetVideoRoundActionPlayTime(videoRound.readyAction);");
            for (var i = 0; i < videoRound.skillActions.get_Count(); i++){
                var videoSkillAction = videoRound.skillActions.get_Item$$Int32(i);
                this._time += this.GetSkillVideoActionPlayTime(videoSkillAction);
            }
            GameDebuger.TODO("_time += GetVideoRoundActionPlayTime(videoRound.endAction);");
            GameDebuger.TODO("if (videoRound.afterEndAction != null && videoRound.afterEndAction.targetStateGroups.Count > 0)\n        {\n            _time += 1f;\n            _time += GetVideoRoundActionPlayTime(videoRound.afterEndAction);\n        }");
            return this._time;
        },
        GetVideoActionPlayTime: function (videoAction){
            var time = 0;
            for (var i = 0; i < videoAction.targetStateGroups.get_Count(); i++){
                var stateGroup = videoAction.targetStateGroups.get_Item$$Int32(i);
                if (stateGroup.strikeBackAction != null){
                    time += this.GetSkillVideoActionPlayTime(stateGroup.strikeBackAction);
                }
            }
            return time;
        },
        GetSkillVideoActionPlayTime: function (videoSkillAction){
            GameDebuger.TODO("if (!BattleManager.DEBUG)\n        {\n            return 0f;\n        }");
            var time = this.GetVideoActionPlayTime(videoSkillAction);
            var skill = videoSkillAction.get_skill();
            if (skill == null){
                return time;
            }
            if (videoSkillAction.actionSoldierId == 0){
                return time;
            }
            if (skill.id == BattleManager.GetDefenseSkillId()){
                return time;
            }
            if (skill.id == BattleManager.GetProtectSkillId()){
                return time;
            }
            GameDebuger.TODO("if (videoSkillAction.skillStatusCode != Skill.SkillActionStatus_Ordinary)\n        {\n            return time;\n        }");
            if (skill.id >= 10){
                time += 0.1;
            }
            time += skill.actionReadyPlayTime / 1000;
            var totalWaitingRound = 0;
            var waintingAttackFinish = false;
            var injureIds = this.GetInjureIds(videoSkillAction, skill.atOnce);
            if (injureIds.get_Count() == 0){
                totalWaitingRound = 1;
            }
            else {
                if (skill.atOnce){
                    totalWaitingRound = 1;
                }
                else {
                    totalWaitingRound += injureIds.get_Count();
                }
            }
            time += (skill.singleActionPlayTime / 1000 * totalWaitingRound);
            time += this.GetAttackMoveSpentTime(skill.clientSkillType) * totalWaitingRound;
            time += skill.actionEndPlayTime / 1000;
            return time;
        },
        GetAttackMoveSpentTime: function (clientSkillType){
            if (clientSkillType == 1 || clientSkillType == 6 || clientSkillType == 7 || clientSkillType == 10){
                return 0.1;
            }
            else {
                return 0;
            }
        },
        GetInjureIds: function (gameAction, atOnce){
            var injurerIds = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            for (var i = 0,len = gameAction.targetStateGroups.get_Count(); i < len; i++){
                var group = gameAction.targetStateGroups.get_Item$$Int32(i);
                var injureId = this.GetInjureId(group);
                if (injureId > 0){
                    injurerIds.Add(injureId);
                }
            }
            return injurerIds;
        },
        GetInjureId: function (group){
            for (var i = 0,len = group.targetStates.get_Count(); i < len; i++){
                var state = group.targetStates.get_Item$$Int32(i);
                if (Is(state, AppDto.VideoBuffAddTargetState.ctor)){
                    var videoBuffAddTargetState = As(state, AppDto.VideoBuffAddTargetState.ctor);
                    if (this._callSoldierIds.Contains(videoBuffAddTargetState.id)){
                        continue;
                    }
                    if (group.targetStates.get_Count() > 1){
                        continue;
                    }
                }
                if (Is(state, AppDto.VideoRetreatState.ctor)){
                    continue;
                }
                GameDebuger.TODO("if (state is VideoRageTargetState)\n            {\n                continue;\n            }\n\n\n            \n            if (state is VideoCallSoldierState)\n            {\n                VideoCallSoldierState videoCallSoldierState = state as VideoCallSoldierState;\n                if (_callSoldierIds.Contains(videoCallSoldierState.soldier.id) == false)\n                {\n                    _callSoldierIds.Add(videoCallSoldierState.soldier.id);\n                }\n                continue;\n            }");
                if (state.id > 0){
                    return state.id;
                }
            }
            return 0;
        },
        GetVideoRoundActionPlayTime: function (videoRoundAction){
            if (videoRoundAction != null && videoRoundAction.targetStateGroups != null && videoRoundAction.targetStateGroups.get_Count() > 0){
                return 0.2;
            }
            else {
                return 0;
            }
        }
    }
};
JsTypes.push(SkillPlayTimeHelper);
var BaseBattleInstPlayer = {
    fullname: "BaseBattleInstPlayer",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._action = null;
            System.Object.ctor.call(this);
        },
        Excute: function (action){
            this._action = action;
            this.DoExcute(action);
        },
        DoExcute: function (action){
        },
        Destroy: function (){
            JSTimer.get_Instance().CancelCd("BaseBattleInstPlayer_" + this.GetHashCode());
        },
        CheckFinish: function (){
        },
        PlayInjureAction: function (ids){
        },
        CheckMonsterDead: function (){
            var monsterList = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            for (var i = 0,len = this._action.targetStateGroups.get_Count(); i < len; i++){
                var stateGroup = this._action.targetStateGroups.get_Item$$Int32(i);
                for (var j = 0,len2 = stateGroup.targetStates.get_Count(); j < len2; j++){
                    var state = stateGroup.targetStates.get_Item$$Int32(j);
                    if (monsterList.Contains(state.id) == false){
                        monsterList.Add(state.id);
                    }
                }
            }
            for (var i = 0,len = monsterList.get_Count(); i < len; i++){
                var monster = MonsterManager.get_Instance().GetMonsterFromSoldierID(monsterList.get_Item$$Int32(i));
                if (UnityEngine.Object.op_Inequality(monster, null)){
                    if (monster.IsDead()){
                        monster.PlayDieAnimation(false);
                        this.CheckAndSendPetDeadEvent(monster);
                        if (monster.NeedLeave()){
                            monster.RetreatFromBattle(MonsterController.RetreatMode.Flash, 0.5);
                        }
                        else {
                            if (monster.IsMainCharactor()){
                                var petController = MonsterManager.get_Instance().GetPlayerPet(monster.GetPlayerId());
                                if (UnityEngine.Object.op_Inequality(null, petController)){
                                    GameDebuger.TODO("BattleController.Instance.GetInstController().TriggerMonsterShount(petController.GetId(), ShoutConfig.BattleShoutTypeEnum_MasterFall);");
                                }
                            }
                        }
                    }
                    else {
                        monster.PlayStateAnimation();
                    }
                }
            }
        },
        CheckAndSendPetDeadEvent: function (pMonsterController){
            GameEventCenter.SendEvent$1$$Event$1$$T(MonsterController.ctor, GameEvent.BATTLE_FIGHT_MC_DEAD, pMonsterController);
        },
        Finish: function (){
            this.CheckMonsterDead();
            BattleInstController.get_Instance().FinishInst();
        },
        DelayFinish: function (delayTime){
            GameDebuger.Log("DelayFinish " + delayTime, null);
            JSTimer.get_Instance().SetupCoolDown("BaseBattleInstPlayer_" + this.GetHashCode(), delayTime, null, $CreateDelegate(this, this.Finish), 0.1, false);
        }
    }
};
JsTypes.push(BaseBattleInstPlayer);
var GameVideoActionPlayer = {
    fullname: "GameVideoActionPlayer",
    baseTypeName: "BaseBattleInstPlayer",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseBattleInstPlayer.ctor.call(this);
        },
        DoExcute: function (action){
            BattleInfoOutput.ShowVideoAction(action);
            BattleStateHandler.HandleBattleStateGroup(0, action.targetStateGroups, true);
            this.DelayFinish(0.2);
        }
    }
};
JsTypes.push(GameVideoActionPlayer);
var GameVideoGeneralActionPlayer = {
    fullname: "GameVideoGeneralActionPlayer",
    baseTypeName: "BaseBattleInstPlayer",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._gameAction = null;
            this._skillConfig = null;
            this._attackActionPlayer = null;
            this._injureActionPlayerDic = null;
            this._totalWaitingRound = 0;
            this._currentFinishRound = 0;
            this._totalWaitingCount = 0;
            this._currentFinishCount = 0;
            this._injureIds = null;
            this._skill = null;
            this._strikeBackActionPlayer = null;
            this.mDamageOrHealInfoShowed = false;
            this.mTotalDamageOrHeal = 0;
            this.mActionSide = MonsterController.MonsterSide.None;
            this._totalPlayTime = 0;
            this._callSoldierIds = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            this._waintingAttackFinish = false;
            this._startCheckTime = 0;
            this.OnActionFinish = null;
            BaseBattleInstPlayer.ctor.call(this);
        },
        add_OnActionFinish: function (value){
            this.OnActionFinish = $CombineDelegates(this.OnActionFinish, value);
        },
        remove_OnActionFinish: function (value){
            this.OnActionFinish = $RemoveDelegate(this.OnActionFinish, value);
        },
        DoExcute: function (inst){
            this._gameAction = As(inst, AppDto.VideoSkillAction.ctor);
            this._startCheckTime = System.DateTime.get_Now().get_Ticks();
            this._totalPlayTime = new SkillPlayTimeHelper.ctor().GetSkillVideoActionPlayTime(this._gameAction);
            this.mDamageOrHealInfoShowed = false;
            this.UpdateActionSide();
            if (this.OnActionFinish == null){
                this.mTotalDamageOrHeal = this.CacheActionTotalDamageOrHeal();
            }
            this.DoSkillBeforeActions();
            this.DoSkillAction();
        },
        DoSkillBeforeActions: function (){
            GameDebuger.TODO("if (_gameAction.beforeActions != null) {\n            for (int i = 0, len = _gameAction.beforeActions.Count; i < len; i++) {\n                VideoAction action = _gameAction.beforeActions [i];\n                BattleInfoOutput.ShowVideoAction (action);\n                BattleStateHandler.HandleBattleStateGroup (0, action.targetStateGroups);\n            }\n        }");
        },
        DoSkillDoingActions: function (){
            BattleInfoOutput.ShowVideoAction(this._gameAction);
            BattleStateHandler.HandleBattleStateGroup(0, this._gameAction.targetStateGroups, false);
        },
        DoSkillEndActions: function (){
            GameDebuger.TODO("if (_gameAction.afterActions != null) {\n            for (int i = 0, len = _gameAction.afterActions.Count; i < len; i++) {\n                VideoAction action = _gameAction.afterActions [i];\n                BattleInfoOutput.ShowVideoAction (action);\n                BattleStateHandler.HandleBattleStateGroup (0, action.targetStateGroups);\n            }\n        }");
        },
        GetSkillStatusDesc: function (code){
            GameDebuger.TODO("AppSkillActionStatusCode statusCode = DataCache.getDtoByCls<AppSkillActionStatusCode> (code);\n        if (statusCode != null && statusCode.tip) {\n            return statusCode.value;\n        } else");
            return "";
        },
        DoSkillAction: function (){
            var _gameAction = this._gameAction;
            if (BattleManager.DEBUG){
                BattleInfoOutput.OutputTargetStateGroups(_gameAction.targetStateGroups);
                BattleInfoOutput.showVideoSkillAction(_gameAction, false);
            }
            if (_gameAction.actionSoldierId == 0){
                GameDebuger.LogError("DoSkillAction attacker is null", null);
                BattleStateHandler.HandleBattleStateGroup(0, _gameAction.targetStateGroups, false);
                this.Finish();
                return;
            }
            var attacker = MonsterManager.get_Instance().GetMonsterFromSoldierID(_gameAction.actionSoldierId);
            if (UnityEngine.Object.op_Equality(attacker, null)){
                GameDebuger.LogError("attacker is null id = " + _gameAction.actionSoldierId, null);
                this.Finish();
                return;
            }
            attacker.CheckActionShout();
            if (_gameAction.skillId == BattleManager.GetDefenseSkillId()){
                this.DoSkillDoingActions();
                this.Finish();
                return;
            }
            if (_gameAction.skillId == BattleManager.GetProtectSkillId()){
                this.DoSkillDoingActions();
                this.Finish();
                return;
            }
            GameDebuger.TODO("if (_gameAction.skillStatusCode != Skill.SkillActionStatus_Ordinary) {\n            DoSkillDoingActions ();\n            GameDebuger.Log (attacker.GetDebugInfo () + \' \' + GetSkillStatusDesc (_gameAction.skillStatusCode));\n            if (attacker.IsPlayerCtrlCharactor ()) {\n                TipManager.AddTip (GetSkillStatusDesc (_gameAction.skillStatusCode));\n                Finish ();\n            } else {\n                Finish ();\n            }\n\n            BattleStateHandler.PlayVideoSkillAction (attacker, _gameAction);\n\n            return;\n        }");
            this._skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, _gameAction.skillId);
            if (this._skill == null){
                GameDebuger.LogError(System.String.Format$$String$$Object("技能数据为空 skillId:{0}", _gameAction.skillId), null);
                this.Finish();
                return;
            }
            var skillConfigId = this._skill.id;
            if (skillConfigId == BattleManager.GetUseItemSkillId()){
                var actionTargetState = this.GetActionTargetState();
                if (actionTargetState != null){
                    if (actionTargetState.hp != 0){
                        skillConfigId = 102;
                    }
                    else if (actionTargetState.sp != 0){
                        skillConfigId = 104;
                    }
                    else {
                        skillConfigId = 102;
                    }
                    GameDebuger.TODO("else if (actionTargetState.mp != 0) {\n                    skillConfigId = 103;\n                }");
                }
                if (attacker.IsPlayerCtrlCharactor()){
                    GameDebuger.TODO("BattleController.Instance.AddItemUsedCount ();");
                }
                GameDebuger.TODO("BattleController.Instance.GetInstController().TriggerMonsterShount(attacker.GetId(), ShoutConfig.BattleShoutTypeEnum_UseItem);");
            }
            if (skillConfigId < 10){
                skillConfigId = this._skill.clientSkillType;
            }
            this._skillConfig = BattleConfigManager.get_Instance().getSkillConfigInfo(skillConfigId);
            if (this._skillConfig == null){
                skillConfigId = this._skill.clientSkillType;
                this._skillConfig = BattleConfigManager.get_Instance().getSkillConfigInfo(skillConfigId);
            }
            if (this._skillConfig == null){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("无技能配置{0}， 使用默认的配置{1}", skillConfigId, 1), null);
                this._skillConfig = BattleConfigManager.get_Instance().getSkillConfigInfo(1);
            }
            if (this._skillConfig == null){
                GameDebuger.LogError("技能配置为空", null);
                this.Finish();
                return;
            }
            GameDebuger.LogBattleInfo(System.String.Format$$String$$Object$$Object("战斗所用技能，skillId：{0}，skillConfigId：{1}", _gameAction.skillId, skillConfigId));
            if (this._injureActionPlayerDic == null){
                this._injureActionPlayerDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, BattleActionPlayer.ctor);
            }
            this._totalWaitingRound = 0;
            this._currentFinishRound = 0;
            this._totalWaitingCount = 0;
            this._currentFinishCount = 0;
            this._waintingAttackFinish = false;
            this._callSoldierIds.Clear();
            this._injureIds = this.GetInjureIds(_gameAction, this._skill.atOnce);
            this._totalWaitingCount += 1;
            if (this._injureIds.Contains(_gameAction.actionSoldierId)){
                this._waintingAttackFinish = true;
            }
            var hasSameInjurer = false;
            for (var i = 0,len = this._injureIds.get_Count(); i < len; i++){
                var id = this._injureIds.get_Item$$Int32(i);
                if (this._injureActionPlayerDic.ContainsKey(id) == false){
                    var player = BattleActionPlayerPoolManager.get_Instance().Spawn();
                    this._injureActionPlayerDic.Add(id, player);
                    player.Init(this, _gameAction, false, this._skillConfig, id, this._skill.atOnce);
                }
                else {
                    hasSameInjurer = true;
                }
            }
            if (UnityEngine.Object.op_Equality(this._attackActionPlayer, null)){
                this._attackActionPlayer = BattleActionPlayerPoolManager.get_Instance().Spawn();
                this._attackActionPlayer.Init(this, _gameAction, true, this._skillConfig, _gameAction.actionSoldierId, this._skill.atOnce);
                this._attackActionPlayer.SetInjureInfo(this._injureIds);
            }
            if (this._injureIds.get_Count() == 0){
                this._totalWaitingRound = 1;
            }
            else {
                if (this._skill.atOnce){
                    this._totalWaitingRound = 1;
                    this._totalWaitingCount += this._injureIds.get_Count();
                    if (hasSameInjurer){
                        var log = System.String.Format$$String$$Object("配置或者服务器下发有异常， 有可能卡住 skillanme={0}", this._skill.name);
                        TipManager.AddTip(log, false, false, "");
                        GameDebuger.LogError(log, null);
                    }
                }
                else {
                    this._totalWaitingRound += this._injureIds.get_Count();
                    this._totalWaitingCount += 1;
                }
            }
            this.ShowSkillName(_gameAction.get_skill());
        },
        GetActionTargetState: function (){
            if (this._gameAction.targetStateGroups.get_Count() > 0){
                for (var i = 0,len = this._gameAction.targetStateGroups.get_Item$$Int32(0).targetStates.get_Count(); i < len; i++){
                    var state = this._gameAction.targetStateGroups.get_Item$$Int32(0).targetStates.get_Item$$Int32(i);
                    if (Is(state, AppDto.VideoActionTargetState.ctor)){
                        return As(state, AppDto.VideoActionTargetState.ctor);
                    }
                }
                return null;
            }
            else {
                return null;
            }
        },
        CacheActionTotalDamageOrHeal: function (){
            var tTotalDamange = 0;
            var tTotalHPAdded = 0;
            if (null != this._gameAction){
                var tVideoTargetStateGroups = this._gameAction.targetStateGroups;
                if (null != tVideoTargetStateGroups && tVideoTargetStateGroups.get_Count() > 0){
                    var tVideoTargetStateGroup;
                    var tVideoActionTargetState;
                    var tVideoActionTargetStates;
                    var tHPAddedReally = 0;
                    var tMonsterController;
                    for (var tCounter = 0; tCounter < tVideoTargetStateGroups.get_Count(); tCounter++){
                        tVideoTargetStateGroup = tVideoTargetStateGroups.get_Item$$Int32(tCounter);
                        if (null != tVideoTargetStateGroup){
                            tVideoActionTargetStates = tVideoTargetStateGroup.targetStates;
                            if (null != tVideoActionTargetStates && tVideoActionTargetStates.get_Count() > 0){
                                for (var tCounter2 = 0; tCounter2 < tVideoActionTargetStates.get_Count(); tCounter2++){
                                    tVideoActionTargetState = As(tVideoActionTargetStates.get_Item$$Int32(tCounter2), AppDto.VideoActionTargetState.ctor);
                                    if (null != tVideoActionTargetState){
                                        tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(tVideoActionTargetState.id);
                                        if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                                            if (tVideoActionTargetState.hp > 0 && tMonsterController.side == this.mActionSide){
                                                if (tVideoActionTargetState.hp + tMonsterController.get_currentHP() <= tMonsterController.maxHP)
                                                    tHPAddedReally = tVideoActionTargetState.hp;
                                                else {
                                                    tHPAddedReally = tMonsterController.maxHP - tMonsterController.get_currentHP();
                                                }
                                                tTotalHPAdded += tHPAddedReally;
                                            }
                                            else if (tVideoActionTargetState.hp < 0 && tMonsterController.side != this.mActionSide){
                                                tTotalDamange += -tVideoActionTargetState.hp;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (tTotalDamange > 0)
                return -tTotalDamange;
            else
                return tTotalHPAdded;
        },
        GetInjureIds: function (gameAction, atOnce){
            var injurerIds = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            for (var i = 0,len = gameAction.targetStateGroups.get_Count(); i < len; i++){
                var group = gameAction.targetStateGroups.get_Item$$Int32(i);
                var injureId = this.GetInjureId(group);
                if (injureId > 0){
                    injurerIds.Add(injureId);
                }
            }
            return injurerIds;
        },
        GetInjureId: function (group){
            for (var i = 0,len = group.targetStates.get_Count(); i < len; i++){
                var state = group.targetStates.get_Item$$Int32(i);
                if (Is(state, AppDto.VideoRetreatState.ctor))
                    continue;
                GameDebuger.TODO("if (state is VideoRageTargetState) {\n                         continue;\n                     }\n\n\n\n                     if (state is VideoTargetShoutState) {\n                         continue;\n                     }");
                if (Is(state, AppDto.VideoBuffAddTargetState.ctor)){
                    var videoBuffAddTargetState = As(state, AppDto.VideoBuffAddTargetState.ctor);
                    if (this._callSoldierIds.Contains(videoBuffAddTargetState.id)){
                        continue;
                    }
                    if (group.targetStates.get_Count() > 1){
                        continue;
                    }
                }
                GameDebuger.TODO("if (state is VideoCallSoldierState) {\n                VideoCallSoldierState videoCallSoldierState = state as VideoCallSoldierState;\n                if (_callSoldierIds.Contains (videoCallSoldierState.soldier.id) == false) {\n                    _callSoldierIds.Add (videoCallSoldierState.soldier.id);\n                }\n                continue;\n            }");
                if (state.id > 0){
                    return state.id;
                }
            }
            return 0;
        },
        ShowSkillName: function (skill){
            if (skill != null){
                if (skill.id >= 10){
                    var attacker = MonsterManager.get_Instance().GetMonsterFromSoldierID(this._gameAction.actionSoldierId);
                    attacker.PlaySkillName$$Skill$$Action(skill, $CreateDelegate(this, this.OnSkillNameShowFinish));
                }
                else {
                    this.OnSkillNameShowFinish();
                }
            }
        },
        OnSkillNameShowFinish: function (){
            if (UnityEngine.Object.op_Inequality(this._attackActionPlayer, null)){
                if (this._gameAction.targetStateGroups.get_Count() <= this._currentFinishRound){
                    this.FinishPlayer();
                }
                else {
                    if (this._skill.atOnce){
                        this._attackActionPlayer.Play$$VideoTargetStateGroup$$List$1$Int64$$Boolean(this._gameAction.targetStateGroups.get_Item$$Int32(this._currentFinishRound), this._injureIds, this.IsLastAction());
                    }
                    else {
                        this._attackActionPlayer.Play$$VideoTargetStateGroup$$Int64$$Boolean(this._gameAction.targetStateGroups.get_Item$$Int32(this._currentFinishRound), this.GetNextInjureId(), this.IsLastAction());
                    }
                    GameDebuger.TODO("if (_skill.skillActionType == 1 || _skill.skillActionType == 2)\n                {\n                    //触发攻击者喊招\n                                BattleController.Instance.GetInstController().TriggerMonsterShount(_attackActionPlayer.getAttackerId(), ShoutConfig.BattleShoutTypeEnum_Attack);\n                }");
                }
            }
            else {
                this.FinishPlayer();
            }
        },
        UpdateCurActionTotalDamageOrHeal: function (){
            if (this.mActionSide != MonsterController.MonsterSide.None && this.mTotalDamageOrHeal != 0)
                GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(MonsterController.MonsterSide.ctor, System.Int32.ctor, GameEvent.BATTLE_UI_UPDATE_ACTION_TOTAL_DAMAGE_OR_HEAL, this.mActionSide, this.mTotalDamageOrHeal);
        },
        UpdateActionSide: function (){
            this.mActionSide = MonsterController.MonsterSide.None;
            if (null != this._gameAction){
                var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(this._gameAction.actionSoldierId);
                if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                    this.mActionSide = tMonsterController.side;
                }
            }
        },
        GetNextInjureId: function (){
            if (this._injureIds.get_Count() > 0){
                return this._injureIds.get_Item$$Int32(this._currentFinishRound);
            }
            else {
                return 0;
            }
        },
        IsLastAction: function (){
            return this._currentFinishRound + 1 >= this._totalWaitingRound;
        },
        DoStrikeBackAction: function (action){
            if (this._strikeBackActionPlayer == null){
                this._strikeBackActionPlayer = new GameVideoGeneralActionPlayer.ctor();
                this._strikeBackActionPlayer.add_OnActionFinish($CreateDelegate(this, this.OnStrikeBackActionFinish));
                this._strikeBackActionPlayer.DoExcute(action);
            }
        },
        OnStrikeBackActionFinish: function (){
            this._strikeBackActionPlayer.remove_OnActionFinish($CreateDelegate(this, this.OnStrikeBackActionFinish));
            this._strikeBackActionPlayer = null;
            this._attackActionPlayer.Continue();
        },
        CheckFinish: function (){
            this._currentFinishCount++;
            if (this._currentFinishCount >= this._totalWaitingCount){
                var stateGroup = this._gameAction.targetStateGroups.get_Item$$Int32(this._currentFinishRound);
                if (stateGroup.strikeBackAction != null){
                    this._currentFinishCount--;
                    var strikeBackAction = stateGroup.strikeBackAction;
                    stateGroup.strikeBackAction = null;
                    this.DoStrikeBackAction(strikeBackAction);
                }
                else {
                    this._currentFinishCount = 0;
                    this._currentFinishRound++;
                    if (this._currentFinishRound >= this._totalWaitingRound){
                        this.FinishPlayer();
                    }
                    else {
                        var $it4 = this._injureActionPlayerDic.get_Values().GetEnumerator();
                        while ($it4.MoveNext()){
                            var player = $it4.get_Current();
                            player.Reset();
                        }
                        this._attackActionPlayer.Play$$VideoTargetStateGroup$$Int64$$Boolean(this._gameAction.targetStateGroups.get_Item$$Int32(this._currentFinishRound), this.GetNextInjureId(), this.IsLastAction());
                    }
                }
            }
            else {
                if (this._waintingAttackFinish){
                    this._waintingAttackFinish = false;
                    var $it5 = this._injureActionPlayerDic.get_Keys().GetEnumerator();
                    while ($it5.MoveNext()){
                        var playerId = $it5.get_Current();
                        var player = this._injureActionPlayerDic.get_Item$$TKey(playerId);
                        player.Play$$VideoTargetStateGroup(this.GetTargetStateGroup(playerId));
                    }
                }
            }
        },
        FinishPlayer: function (){
            if (UnityEngine.Object.op_Inequality(this._attackActionPlayer, null)){
                this._attackActionPlayer.Destroy();
                BattleActionPlayerPoolManager.get_Instance().Despawn(this._attackActionPlayer);
                this._attackActionPlayer = null;
            }
            var $it6 = this._injureActionPlayerDic.get_Values().GetEnumerator();
            while ($it6.MoveNext()){
                var player = $it6.get_Current();
                player.Destroy();
                BattleActionPlayerPoolManager.get_Instance().Despawn(player);
            }
            this._injureActionPlayerDic.Clear();
            var attacker = MonsterManager.get_Instance().GetMonsterFromSoldierID(this._gameAction.actionSoldierId);
            BattleStateHandler.PlayVideoSkillAction(attacker, this._gameAction);
            if (this._gameAction.hpSpent != 0){
                this.Finish();
            }
            else {
                this.Finish();
            }
        },
        PlayInjureAction: function (ids){
            if (this._waintingAttackFinish == false){
                if (ids.get_Count() == 1){
                    var injureId = ids.get_Item$$Int32(0);
                    if (this._injureActionPlayerDic.ContainsKey(injureId)){
                        var player = this._injureActionPlayerDic.get_Item$$TKey(injureId);
                        player.Play$$VideoTargetStateGroup(this._gameAction.targetStateGroups.get_Item$$Int32(this._currentFinishRound));
                        GameDebuger.TODO("if (_skill.skillActionType == 1 || _skill.skillActionType == 2)\n                    {\n                        //触发攻击者喊招\n                                       BattleController.Instance.GetInstController().TriggerMonsterShount(injureId, ShoutConfig.BattleShoutTypeEnum_SufferBeating);\n                    }");
                    }
                }
                else {
                    for (var i = 0,len = ids.get_Count(); i < len; i++){
                        var id = ids.get_Item$$Int32(i);
                        if (this._injureActionPlayerDic.ContainsKey(id)){
                            var player = this._injureActionPlayerDic.get_Item$$TKey(id);
                            player.Play$$VideoTargetStateGroup(this.GetTargetStateGroup(id));
                            GameDebuger.TODO("if (_skill.skillActionType == 1 || _skill.skillActionType == 2)\n                        {\n                            //触发攻击者喊招\n                                              BattleController.Instance.GetInstController().TriggerMonsterShount(id, ShoutConfig.BattleShoutTypeEnum_SufferBeating);\n                        }");
                        }
                    }
                }
            }
        },
        GetTargetStateGroup: function (id){
            for (var i = 0,len = this._gameAction.targetStateGroups.get_Count(); i < len; i++){
                var group = this._gameAction.targetStateGroups.get_Item$$Int32(i);
                var injureId = this.GetInjureId(group);
                if (injureId == id){
                    return group;
                }
            }
            return null;
        },
        Finish: function (){
            if (this.OnActionFinish == null){
                this.UpdateCurActionTotalDamageOrHeal();
            }
            this.DoSkillEndActions();
            if (BattleManager.DEBUG){
                if (this._startCheckTime > 0){
                    var passTime = System.DateTime.get_Now().get_Ticks() - this._startCheckTime;
                    var elapsedSpan = new System.TimeSpan.ctor$$Int64(passTime);
                    var skillName = this._gameAction.skillId.toString();
                    if (this._gameAction.get_skill() != null){
                        skillName = this._gameAction.get_skill().name;
                    }
                    if (System.Math.Abs$$Double(this._totalPlayTime - elapsedSpan.get_TotalSeconds()) > 0.300000011920929){
                        GameDebuger.LogBattleInfo(System.String.Format$$String$$Object$$Object$$Object("预估播放时长={0}S 真实播放时长={1}S 技能={2}", this._totalPlayTime, elapsedSpan.get_TotalSeconds(), skillName));
                    }
                    else {
                        GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object("预估播放时长={0}S 真实播放时长={1}S 技能={2}", this._totalPlayTime, elapsedSpan.get_TotalSeconds(), skillName), null);
                    }
                    this._startCheckTime = 0;
                }
            }
            if (this.OnActionFinish != null){
                this.OnActionFinish();
            }
            else {
                BaseBattleInstPlayer.commonPrototype.Finish.call(this);
            }
        }
    }
};
JsTypes.push(GameVideoGeneralActionPlayer);
var GameVideoShoutActionPlayer = {
    fullname: "GameVideoShoutActionPlayer",
    baseTypeName: "BaseBattleInstPlayer",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseBattleInstPlayer.ctor.call(this);
        },
        DoExcute: function (inst){
            var action = As(inst, VideoShoutAction.ctor);
            var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(action.actionSoldierId);
            if (UnityEngine.Object.op_Inequality(mc, null)){
                mc.Shout(action.shoutContent);
            }
            this.DelayFinish(0.5);
        }
    }
};
JsTypes.push(GameVideoShoutActionPlayer);
var BattleConfigInfo = {
    fullname: "BattleConfigInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.time = "";
            this.list = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattleConfigInfo);
var BattleConfigManager = {
    fullname: "BattleConfigManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleConfigManager.instance = new BattleConfigManager.ctor();
            BattleConfigManager.BattleConfig_ReadPath = "ConfigFiles/BattleConfig/BattleConfig";
        },
        Instance$$: "BattleConfigManager",
        get_Instance: function (){
            return BattleConfigManager.instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._configDict = null;
            System.Object.ctor.call(this);
            this._configDict = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, SkillConfigInfo.ctor);
        },
        Setup: function (){
            AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig("BattleConfig", $CreateAnonymousDelegate(this, function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null)){
                    var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                    if (UnityEngine.Object.op_Inequality(textAsset, null)){
                        var config = JsHelper.ToObject(JsonBattleConfigInfo.ctor, textAsset.get_text());
                        if (config != null){
                            this._configDict.Clear();
                            for (var i = 0,len = config.list.get_Count(); i < len; i++){
                                var info = config.list.get_Item$$Int32(i);
                                if (this._configDict.ContainsKey(info.id))
                                    GameDebuger.LogError(System.String.Format$$String$$Object$$Object("[错误]BattleConfig这个ID已存在，策划赶紧改下。id:{0},name:{1}", info.id, info.name), null);
                                else
                                    this._configDict.Add(info.id, info.ToSkillConfigInfo());
                            }
                        }
                    }
                }
            }), null, 100);
        },
        getSkillConfigInfo: function (skillID){
            var key = skillID;
            if (this._configDict == null){
                return null;
            }
            var skillConfigInfo = null;
            (function (){
                var $1 = $Ref(null, skillConfigInfo);
                var $res = this._configDict.TryGetValue(key, $1);
                skillConfigInfo = $1.Value;
                return $res;
            }).call(this);
            return skillConfigInfo;
        }
    }
};
JsTypes.push(BattleConfigManager);
var JsonBattleConfigInfo = {
    fullname: "JsonBattleConfigInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.time = "";
            this.list = new System.Collections.Generic.List$1.ctor(JsonSkillConfigInfo.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(JsonBattleConfigInfo);
var JsonSkillConfigInfo = {
    fullname: "JsonSkillConfigInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = "";
            this.attackerActions = new System.Collections.Generic.List$1.ctor(JsonActionInfo.ctor);
            this.injurerActions = new System.Collections.Generic.List$1.ctor(JsonActionInfo.ctor);
            System.Object.ctor.call(this);
        },
        ToSkillConfigInfo: function (){
            var info = new SkillConfigInfo.ctor();
            info.id = this.id;
            info.name = this.name;
            info.attackerActions = this.ToBaseActionInfoList(this.attackerActions);
            info.injurerActions = this.ToBaseActionInfoList(this.injurerActions);
            return info;
        },
        ToBaseActionInfoList: function (jsonList){
            var list = new System.Collections.Generic.List$1.ctor(BaseActionInfo.ctor);
            for (var i = 0,len = jsonList.get_Count(); i < len; i++){
                var json = jsonList.get_Item$$Int32(i);
                list.Add(json.ToBaseActionInfo());
            }
            return list;
        }
    }
};
JsTypes.push(JsonSkillConfigInfo);
var SkillConfigInfo = {
    fullname: "SkillConfigInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = "";
            this.attackerActions = null;
            this.injurerActions = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SkillConfigInfo);
var BaseActionInfo = {
    fullname: "BaseActionInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.type = null;
            this.name = null;
            this.rotateX = 0;
            this.rotateY = 0;
            this.rotateZ = 0;
            this.effects = null;
            System.Object.ctor.call(this);
        },
        FillInfo: function (info){
            this.type = info.type;
            this.name = info.name;
            this.rotateX = info.rotateX;
            this.rotateY = info.rotateY;
            this.rotateZ = info.rotateZ;
            this.effects = this.ToBaseActionInfoList(info.effects);
        },
        ToBaseActionInfoList: function (jsonList){
            var list = new System.Collections.Generic.List$1.ctor(BaseEffectInfo.ctor);
            for (var i = 0,len = jsonList.get_Count(); i < len; i++){
                var json = jsonList.get_Item$$Int32(i);
                list.Add(json.ToBaseEffectInfo());
            }
            return list;
        }
    }
};
JsTypes.push(BaseActionInfo);
var JsonActionInfo = {
    fullname: "JsonActionInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.type = null;
            this.name = null;
            this.rotateX = 0;
            this.rotateY = 0;
            this.rotateZ = 0;
            this.time = 0;
            this.distance = 0;
            this.center = false;
            this.startTime = 0;
            this.delayTime = 0;
            this.effects = new System.Collections.Generic.List$1.ctor(JsonEffectInfo.ctor);
            System.Object.ctor.call(this);
        },
        ToBaseActionInfo: function (){
            var info = null;
            switch (this.type){
                case "move" /* MoveActionInfo.TYPE */:
                    info = MoveActionInfo.ToBaseActionInfo(this);
                    break;
                case "moveBack" /* MoveBackActionInfo.TYPE */:
                    info = MoveBackActionInfo.ToBaseActionInfo(this);
                    break;
                case "normal" /* NormalActionInfo.TYPE */:
                    info = NormalActionInfo.ToBaseActionInfo(this);
                    break;
            }
            return info;
        }
    }
};
JsTypes.push(JsonActionInfo);
var MoveActionInfo = {
    fullname: "MoveActionInfo",
    baseTypeName: "BaseActionInfo",
    staticDefinition: {
        cctor: function (){
            MoveActionInfo.TYPE = "move";
        },
        ToBaseActionInfo: function (json){
            var info = new MoveActionInfo.ctor();
            info.FillInfo(json);
            info.time = json.time;
            info.distance = json.distance;
            info.center = json.center;
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.time = 0;
            this.distance = 0;
            this.center = false;
            BaseActionInfo.ctor.call(this);
        }
    }
};
JsTypes.push(MoveActionInfo);
var MoveBackActionInfo = {
    fullname: "MoveBackActionInfo",
    baseTypeName: "BaseActionInfo",
    staticDefinition: {
        cctor: function (){
            MoveBackActionInfo.TYPE = "moveBack";
        },
        ToBaseActionInfo: function (json){
            var info = new MoveBackActionInfo.ctor();
            info.FillInfo(json);
            info.time = json.time;
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.time = 0;
            BaseActionInfo.ctor.call(this);
        }
    }
};
JsTypes.push(MoveBackActionInfo);
var NormalActionInfo = {
    fullname: "NormalActionInfo",
    baseTypeName: "BaseActionInfo",
    staticDefinition: {
        cctor: function (){
            NormalActionInfo.TYPE = "normal";
        },
        ToBaseActionInfo: function (json){
            var info = new NormalActionInfo.ctor();
            info.FillInfo(json);
            info.startTime = json.startTime;
            info.delayTime = json.delayTime;
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.startTime = 0;
            this.delayTime = 0;
            BaseActionInfo.ctor.call(this);
        }
    }
};
JsTypes.push(NormalActionInfo);
var BaseEffectInfo = {
    fullname: "BaseEffectInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.type = null;
            this.playTime = 0;
            System.Object.ctor.call(this);
        },
        FillInfo: function (info){
            this.type = info.type;
            this.playTime = info.playTime;
        }
    }
};
JsTypes.push(BaseEffectInfo);
var HideEffectInfo = {
    fullname: "HideEffectInfo",
    baseTypeName: "BaseEffectInfo",
    staticDefinition: {
        cctor: function (){
            HideEffectInfo.TYPE = "Hide";
        },
        ToBaseEffectInfo: function (json){
            var info = new HideEffectInfo.ctor();
            info.FillInfo(json);
            info.delayTime = json.delayTime;
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.delayTime = 0;
            BaseEffectInfo.ctor.call(this);
        }
    }
};
JsTypes.push(HideEffectInfo);
var JsonEffectInfo = {
    fullname: "JsonEffectInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.type = null;
            this.playTime = 0;
            this.name = null;
            this.delayTime = 0;
            this.target = 0;
            this.mount = null;
            this.loop = false;
            this.loopCount = 0;
            this.follow = false;
            this.scale = 0;
            this.fixRotation = false;
            this.hitEff = false;
            this.fly = false;
            this.flyTarget = 0;
            this.flyTime = 0;
            this.flyMount = null;
            this.offX = 0;
            this.offY = 0;
            this.offZ = 0;
            this.rotX = 0;
            this.rotY = 0;
            this.rotZ = 0;
            this.flyOffX = 0;
            this.flyOffY = 0;
            this.flyOffZ = 0;
            System.Object.ctor.call(this);
        },
        ToBaseEffectInfo: function (){
            var info = null;
            switch (this.type){
                case "Normal" /* NormalEffectInfo.TYPE */:
                    info = NormalEffectInfo.ToBaseEffectInfo(this);
                    break;
                case "ShowInjure" /* ShowInjureEffectInfo.TYPE */:
                    info = ShowInjureEffectInfo.ToBaseEffectInfo(this);
                    break;
                case "TakeDamage" /* TakeDamageEffectInfo.TYPE */:
                    info = TakeDamageEffectInfo.ToBaseEffectInfo(this);
                    break;
                case "Sound" /* SoundEffectInfo.TYPE */:
                    info = SoundEffectInfo.ToBaseEffectInfo(this);
                    break;
                case "Hide" /* HideEffectInfo.TYPE */:
                    info = HideEffectInfo.ToBaseEffectInfo(this);
                    break;
            }
            return info;
        }
    }
};
JsTypes.push(JsonEffectInfo);
var NormalEffectInfo = {
    fullname: "NormalEffectInfo",
    baseTypeName: "BaseEffectInfo",
    staticDefinition: {
        cctor: function (){
            NormalEffectInfo.TYPE = "Normal";
        },
        ToBaseEffectInfo: function (json){
            var info = new NormalEffectInfo.ctor();
            info.FillInfo(json);
            info.name = json.name;
            info.delayTime = json.delayTime;
            info.target = json.target;
            info.mount = json.mount;
            info.loop = json.loop;
            info.loopCount = json.loopCount;
            info.follow = json.follow;
            info.scale = json.scale;
            info.fixRotation = json.fixRotation;
            info.hitEff = json.hitEff;
            info.fly = json.fly;
            info.flyTarget = json.flyTarget;
            info.flyTime = json.flyTime;
            info.flyMount = json.flyMount;
            info.offX = json.offX;
            info.offY = json.offY;
            info.offZ = json.offZ;
            info.rotX = json.rotX;
            info.rotY = json.rotY;
            info.rotZ = json.rotZ;
            info.flyOffX = json.flyOffX;
            info.flyOffY = json.flyOffY;
            info.flyOffZ = json.flyOffZ;
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = null;
            this.delayTime = 0;
            this.target = 0;
            this.mount = null;
            this.loop = false;
            this.loopCount = 0;
            this.follow = false;
            this.scale = 0;
            this.fixRotation = false;
            this.hitEff = false;
            this.fly = false;
            this.flyTarget = 0;
            this.flyTime = 0;
            this.flyMount = null;
            this.offX = 0;
            this.offY = 0;
            this.offZ = 0;
            this.rotX = 0;
            this.rotY = 0;
            this.rotZ = 0;
            this.flyOffX = 0;
            this.flyOffY = 0;
            this.flyOffZ = 0;
            BaseEffectInfo.ctor.call(this);
        }
    }
};
JsTypes.push(NormalEffectInfo);
var ShowInjureEffectInfo = {
    fullname: "ShowInjureEffectInfo",
    baseTypeName: "BaseEffectInfo",
    staticDefinition: {
        cctor: function (){
            ShowInjureEffectInfo.TYPE = "ShowInjure";
        },
        ToBaseEffectInfo: function (json){
            var info = new ShowInjureEffectInfo.ctor();
            info.FillInfo(json);
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseEffectInfo.ctor.call(this);
        }
    }
};
JsTypes.push(ShowInjureEffectInfo);
var SoundEffectInfo = {
    fullname: "SoundEffectInfo",
    baseTypeName: "BaseEffectInfo",
    staticDefinition: {
        cctor: function (){
            SoundEffectInfo.TYPE = "Sound";
        },
        ToBaseEffectInfo: function (json){
            var info = new SoundEffectInfo.ctor();
            info.FillInfo(json);
            info.name = json.name;
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = null;
            BaseEffectInfo.ctor.call(this);
        }
    }
};
JsTypes.push(SoundEffectInfo);
var TakeDamageEffectInfo = {
    fullname: "TakeDamageEffectInfo",
    baseTypeName: "BaseEffectInfo",
    staticDefinition: {
        cctor: function (){
            TakeDamageEffectInfo.TYPE = "TakeDamage";
        },
        ToBaseEffectInfo: function (json){
            var info = new TakeDamageEffectInfo.ctor();
            info.FillInfo(json);
            return info;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseEffectInfo.ctor.call(this);
        }
    }
};
JsTypes.push(TakeDamageEffectInfo);
var BattleDemoConfigItem = {
    fullname: "BattleDemoConfigItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleDemoConfigItem.NAME = "BattleDemoConfigItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.LabelSpeed_UIInput = null;
            this.LabelHP_UIInput = null;
            this.LabelDefenceMagic_UIInput = null;
            this.LabelDefence_UIInput = null;
            this.LabelAttackMagic_UIInput = null;
            this.LabelAttack_UIInput = null;
            this.LabelActiveSkill_UIInput = null;
            this.LabelId_UIInput = null;
            this.SelectedSprite = null;
            this.LabelType_UIInput = null;
            this.LabelPlayerId_UIInput = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.LabelSpeed_UIInput = root.Find("LabelTable/LabelSpeed").GetComponent$1(UIInput.ctor);
            this.LabelHP_UIInput = root.Find("LabelTable/LabelHP").GetComponent$1(UIInput.ctor);
            this.LabelDefenceMagic_UIInput = root.Find("LabelTable/LabelDefenceMagic").GetComponent$1(UIInput.ctor);
            this.LabelDefence_UIInput = root.Find("LabelTable/LabelDefence").GetComponent$1(UIInput.ctor);
            this.LabelAttackMagic_UIInput = root.Find("LabelTable/LabelAttackMagic").GetComponent$1(UIInput.ctor);
            this.LabelAttack_UIInput = root.Find("LabelTable/LabelAttack").GetComponent$1(UIInput.ctor);
            this.LabelActiveSkill_UIInput = root.Find("LabelTable/LabelActiveSkill").GetComponent$1(UIInput.ctor);
            this.LabelId_UIInput = root.Find("LabelTable/LabelId").GetComponent$1(UIInput.ctor);
            this.SelectedSprite = root.Find("SelectedSprite").get_gameObject();
            this.LabelType_UIInput = root.Find("LabelTable/LabelType").GetComponent$1(UIInput.ctor);
            this.LabelPlayerId_UIInput = root.Find("LabelTable/LabelPlayerId").GetComponent$1(UIInput.ctor);
        }
    }
};
JsTypes.push(BattleDemoConfigItem);
var BattleDemoConfigView = {
    fullname: "BattleDemoConfigView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleDemoConfigView.NAME = "BattleDemoConfigView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseButton_UIButton = null;
            this.BattleButton_UIButton = null;
            this.WatchButton_UIButton = null;
            this.ResumeButton_UIButton = null;
            this.SceneIdInput_UIInput = null;
            this.SceneCameraInput_UIInput = null;
            this.ScrollViewEnemy_UIScrollView = null;
            this.GridEnemy_UIGrid = null;
            this.ScrollViewFriend_UIScrollView = null;
            this.GridFriend_UIGrid = null;
            this.BtnReloadConfig_UIButton = null;
            this.BtnAddEnemy_UIButton = null;
            this.BtnDeleteEnemy_UIButton = null;
            this.BtnCopyEnemy_UIButton = null;
            this.BtnCopyFriend_UIButton = null;
            this.BtnDeleteFriend_UIButton = null;
            this.BtnAddFriend_UIButton = null;
            this.LabelEnemyMonsterId_UIInput = null;
            this.LabelFriendMonsterId_UIInput = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseButton_UIButton = root.Find("CloseButton").GetComponent$1(UIButton.ctor);
            this.BattleButton_UIButton = root.Find("CntrOptionBtns/BattleButton").GetComponent$1(UIButton.ctor);
            this.WatchButton_UIButton = root.Find("CntrOptionBtns/WatchButton").GetComponent$1(UIButton.ctor);
            this.ResumeButton_UIButton = root.Find("CntrOptionBtns/ResumeButton").GetComponent$1(UIButton.ctor);
            this.SceneIdInput_UIInput = root.Find("CntrLabels/SceneIdLabel/SceneIdInput").GetComponent$1(UIInput.ctor);
            this.SceneCameraInput_UIInput = root.Find("CntrLabels/SceneCameraLabel/SceneCameraInput").GetComponent$1(UIInput.ctor);
            this.ScrollViewEnemy_UIScrollView = root.Find("CntrListEnemy/ScrollViewEnemy").GetComponent$1(UIScrollView.ctor);
            this.GridEnemy_UIGrid = root.Find("CntrListEnemy/ScrollViewEnemy/GridEnemy").GetComponent$1(UIGrid.ctor);
            this.ScrollViewFriend_UIScrollView = root.Find("CntrListFriend/ScrollViewFriend").GetComponent$1(UIScrollView.ctor);
            this.GridFriend_UIGrid = root.Find("CntrListFriend/ScrollViewFriend/GridFriend").GetComponent$1(UIGrid.ctor);
            this.BtnReloadConfig_UIButton = root.Find("CntrOptionBtns/BtnReloadConfig").GetComponent$1(UIButton.ctor);
            this.BtnAddEnemy_UIButton = root.Find("CntrEnemy/CntrFighterOptionBtns/BtnAddEnemy").GetComponent$1(UIButton.ctor);
            this.BtnDeleteEnemy_UIButton = root.Find("CntrEnemy/CntrFighterOptionBtns/BtnDeleteEnemy").GetComponent$1(UIButton.ctor);
            this.BtnCopyEnemy_UIButton = root.Find("CntrEnemy/CntrFighterOptionBtns/BtnCopyEnemy").GetComponent$1(UIButton.ctor);
            this.BtnCopyFriend_UIButton = root.Find("CntrFriend/CntrFighterOptionBtns/BtnCopyFriend").GetComponent$1(UIButton.ctor);
            this.BtnDeleteFriend_UIButton = root.Find("CntrFriend/CntrFighterOptionBtns/BtnDeleteFriend").GetComponent$1(UIButton.ctor);
            this.BtnAddFriend_UIButton = root.Find("CntrFriend/CntrFighterOptionBtns/BtnAddFriend").GetComponent$1(UIButton.ctor);
            this.LabelEnemyMonsterId_UIInput = root.Find("CntrEnemy/LabelEnemyMonsterId").GetComponent$1(UIInput.ctor);
            this.LabelFriendMonsterId_UIInput = root.Find("CntrFriend/LabelFriendMonsterId").GetComponent$1(UIInput.ctor);
        }
    }
};
JsTypes.push(BattleDemoConfigView);
var ProxyBattleDemoConfigModule = {
    fullname: "ProxyBattleDemoConfigModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        Open: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleDemoConfigView" /* BattleDemoConfigView.NAME */, UILayerType.BaseModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleDemoConfigController.ctor, ui);
            controller.Open();
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("BattleDemoConfigView" /* BattleDemoConfigView.NAME */, true);
        },
        Hide: function (){
            UIModuleManager.get_Instance().HideModule("BattleDemoConfigView" /* BattleDemoConfigView.NAME */);
        },
        OpenEasyConfig: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleDemoEasyConfigView" /* BattleDemoEasyConfigView.NAME */, UILayerType.BaseModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleDemoEasyConfigController.ctor, ui);
            controller.Open();
        },
        CloseEasyConfig: function (){
            UIModuleManager.get_Instance().CloseModule("BattleDemoEasyConfigView" /* BattleDemoEasyConfigView.NAME */, true);
        },
        HideEasyConfig: function (){
            UIModuleManager.get_Instance().HideModule("BattleDemoEasyConfigView" /* BattleDemoEasyConfigView.NAME */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyBattleDemoConfigModule);
var BattleDemoConfigController = {
    fullname: "BattleDemoConfigController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mBattleDemoS1ConfigDtoListEnemy = null;
            this.mBattleDemoS1ConfigDtoListFriend = null;
            this.mBattleDemoS1ItemControllerEnemyList = null;
            this.mBattleDemoS1ItemControllerFriendList = null;
            this.mSelectedEnemeyBattleDemoS1ItemController = null;
            this.mSelectedFriendBattleDemoS1ItemController = null;
            this.mFightersConfigDtoJSON = null;
            this.mFightersConfigDtoJSONKey = null;
            MonoViewController$1.ctor.call(this, BattleDemoConfigView.ctor);
        },
        FightersConfigDtoJSONKey$$: "System.String",
        get_FightersConfigDtoJSONKey: function (){
            if (System.String.IsNullOrEmpty(this.mFightersConfigDtoJSONKey))
                this.mFightersConfigDtoJSONKey = "FightersConfigDtoJSON_" + ModelManager.get_Player().GetPlayerId().toString();
            return this.mFightersConfigDtoJSONKey;
        },
        Open: function (){
            this.UpdateData();
        },
        AfterInitView: function (){
            this.InitMonsterListUI();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseButton_UIButton.onClick, ProxyBattleDemoConfigModule.Close);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnReloadConfig_UIButton.onClick, $CreateDelegate(this, this.OnBtnReloadConfigHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ResumeButton_UIButton.onClick, $CreateDelegate(this, this.OnBtnResumeHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BattleButton_UIButton.onClick, $CreateDelegate(this, this.OnBtnBattleClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnAddEnemy_UIButton.onClick, $CreateDelegate(this, this.OnBtnAddEnemyClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnDeleteEnemy_UIButton.onClick, $CreateDelegate(this, this.OnBtnDeleteEnemyClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnCopyEnemy_UIButton.onClick, $CreateDelegate(this, this.OnBtnCopyEnemyClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnAddFriend_UIButton.onClick, $CreateDelegate(this, this.OnBtnAddFriendClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnDeleteFriend_UIButton.onClick, $CreateDelegate(this, this.OnBtnDeleteFriendClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnCopyFriend_UIButton.onClick, $CreateDelegate(this, this.OnBtnCopyFriendClick));
        },
        OnDispose: function (){
        },
        OnBtnReloadConfigHandler: function (){
            BattleConfigManager.get_Instance().Setup();
            TipManager.AddTip("战斗配置重载成功，重新进入战斗即可生效。", false, false, "");
        },
        OnBtnResumeHandler: function (){
            this.ResumeFightersConfigDto();
            TipManager.AddTip("敌我配置重置成功，重启界面即可生效。", false, false, "");
        },
        OnBtnBattleClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            this.UpdateSceneIdUI();
            this.UpdateBattleDemoS1ConfigDtoListByItemList();
            this.LogBattleDemoS1ConfigDtoFromList();
            this.EnterBattle();
        },
        EnterBattle: function (){
            if (null == this.mBattleDemoS1ConfigDtoListEnemy || this.mBattleDemoS1ConfigDtoListEnemy.get_Count() <= 0 || null == this.mBattleDemoS1ConfigDtoListFriend || this.mBattleDemoS1ConfigDtoListFriend.get_Count() <= 0){
                GameDebuger.LogError("敌我都必须最少配置1个！", null);
                return;
            }
            GameDebuger.TODO("ServiceRequestAction.requestServer(DemoService.updateEnemyDummy(enemyDummySetting.GetSettingInfo()));");
            var tFightersConfigDto = new AppDto.FightersConfigDto.ctor();
            tFightersConfigDto.ateam = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(AppDto.FighterConfigDto.ctor, this.mBattleDemoS1ConfigDtoListFriend);
            tFightersConfigDto.bteam = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(AppDto.FighterConfigDto.ctor, this.mBattleDemoS1ConfigDtoListEnemy);
            ModelManager.get_BattleDemoConfig().EnterBattle(ModelManager.get_BattleDemoConfig().BattleSceneId, tFightersConfigDto, $CreateAnonymousDelegate(this, function (){
                this.SaveFightersConfigDtoJSON(tFightersConfigDto);
                ProxyBattleDemoConfigModule.Close();
            }));
        },
        SaveFightersConfigDtoJSON: function (pFightersConfigDto){
            this.mFightersConfigDtoJSON = LITJson.JsonMapper.ToJson$$Object(pFightersConfigDto);
            PlayerPrefsExt.SetPlayerString(this.get_FightersConfigDtoJSONKey(), this.mFightersConfigDtoJSON);
        },
        OnBtnAddEnemyClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            var tTempInt = 0;
            (function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelEnemyMonsterId_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this);
            this.AddBattleDemoS1ItemController(this.get_View().GridEnemy_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Int32$$Int32(tTempInt, 1), true);
        },
        OnBtnDeleteEnemyClick: function (){
            (function (){
                var $1 = $Ref(this, "mSelectedEnemeyBattleDemoS1ItemController");
                var $res = this.RemoveBattleDemoS1ItemController($1, true);
                return $res;
            }).call(this);
        },
        OnBtnCopyEnemyClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            this.CopyBattleDemoS1ItemController(this.mSelectedEnemeyBattleDemoS1ItemController, true);
        },
        OnBtnAddFriendClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            var tTempInt = 0;
            (function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelFriendMonsterId_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this);
            this.AddBattleDemoS1ItemController(this.get_View().GridFriend_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Int32$$Int32(tTempInt, 1), true);
        },
        OnBtnDeleteFriendClick: function (){
            (function (){
                var $1 = $Ref(this, "mSelectedFriendBattleDemoS1ItemController");
                var $res = this.RemoveBattleDemoS1ItemController($1, true);
                return $res;
            }).call(this);
        },
        OnBtnCopyFriendClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            this.CopyBattleDemoS1ItemController(this.mSelectedFriendBattleDemoS1ItemController, true);
        },
        OnItemClickHandler: function (pBattleDemoS1ItemController, pBattleDemoS1ConfigDto){
            GameDebuger.TODO(System.String.Format$$String$$Object$$Object("OnItemClickHandler pBattleDemoS1ItemController:{0},pBattleDemoS1ConfigDto:{1}", pBattleDemoS1ItemController, pBattleDemoS1ConfigDto));
            if (this.mSelectedEnemeyBattleDemoS1ItemController == pBattleDemoS1ItemController){
                return;
            }
            else {
                if (null == pBattleDemoS1ItemController || UnityEngine.Object.op_Equality(null, pBattleDemoS1ItemController.get_gameObject()))
                    return;
                var tUIGrid = pBattleDemoS1ItemController.get_gameObject().GetComponentInParent$1(UIGrid.ctor);
                if (UnityEngine.Object.op_Equality(null, tUIGrid))
                    return;
                if (UnityEngine.Object.op_Equality(tUIGrid, this.get_View().GridEnemy_UIGrid)){
                    if (null != this.mSelectedEnemeyBattleDemoS1ItemController)
                        this.mSelectedEnemeyBattleDemoS1ItemController.set_Selected(false);
                    this.mSelectedEnemeyBattleDemoS1ItemController = pBattleDemoS1ItemController;
                    this.mSelectedEnemeyBattleDemoS1ItemController.set_Selected(true);
                }
                else {
                    if (null != this.mSelectedFriendBattleDemoS1ItemController)
                        this.mSelectedFriendBattleDemoS1ItemController.set_Selected(false);
                    this.mSelectedFriendBattleDemoS1ItemController = pBattleDemoS1ItemController;
                    this.mSelectedFriendBattleDemoS1ItemController.set_Selected(true);
                }
            }
        },
        UpdateData: function (){
        },
        InitMonsterListUI: function (){
            var tFightersConfigDto = null;
            this.mFightersConfigDtoJSON = PlayerPrefsExt.GetPlayerString(this.get_FightersConfigDtoJSONKey());
            if (!System.String.IsNullOrEmpty(this.mFightersConfigDtoJSON) && this.mFightersConfigDtoJSON.length > 10)
                tFightersConfigDto = LITJson.JsonMapper.ToObject$1$$String(AppDto.FightersConfigDto.ctor, this.mFightersConfigDtoJSON);
            if (null == tFightersConfigDto)
                tFightersConfigDto = this.CreateFightersConfigDto();
            this.InitMonsterListUI$$FightersConfigDto(tFightersConfigDto);
        },
        UpdateSceneIdUI: function (){
            var tBattleSceneId = 0;
            (function (){
                var $1 = $Ref(null, tBattleSceneId);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().SceneIdInput_UIInput.get_value(), $1);
                tBattleSceneId = $1.Value;
                return $res;
            }).call(this);
            ModelManager.get_BattleDemoConfig().BattleSceneId = tBattleSceneId;
            if (ModelManager.get_BattleDemoConfig().BattleSceneId <= 0){
                ModelManager.get_BattleDemoConfig().BattleSceneId = 2010 /* BattleDemoConfigModel.DEFAULT_SCENE_ID */;
                this.get_View().SceneIdInput_UIInput.set_value(ModelManager.get_BattleDemoConfig().BattleSceneId.toString());
            }
            var tBattleCameraId = 0;
            (function (){
                var $1 = $Ref(null, tBattleCameraId);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().SceneCameraInput_UIInput.get_value(), $1);
                tBattleCameraId = $1.Value;
                return $res;
            }).call(this);
            ModelManager.get_BattleDemoConfig().BattleCameraId = tBattleCameraId;
        },
        UpdateBattleDemoS1ConfigDtoListByItemList: function (){
            this.mBattleDemoS1ConfigDtoListEnemy = this.UpdateBattleDemoS1ConfigDtoListByItemList$$Boolean(true);
            this.mBattleDemoS1ConfigDtoListFriend = this.UpdateBattleDemoS1ConfigDtoListByItemList$$Boolean(false);
        },
        UpdateBattleDemoS1ConfigDtoListByItemList$$Boolean: function (pIsEnemy){
            var tItemList = pIsEnemy ? this.mBattleDemoS1ItemControllerEnemyList : this.mBattleDemoS1ItemControllerFriendList;
            if (null == tItemList || tItemList.get_Count() <= 0)
                return null;
            var tBattleDemoS1ConfigDtoList = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
            var $it7 = tItemList.GetEnumerator();
            while ($it7.MoveNext()){
                var tItem = $it7.get_Current();
                if (null != tItem){
                    tBattleDemoS1ConfigDtoList.Add(tItem.get_BattleDemoS1ConfigDto());
                }
            }
            return tBattleDemoS1ConfigDtoList;
        },
        CreateFightersConfigDto: function (){
            var tFightersConfigDto = new AppDto.FightersConfigDto.ctor();
            tFightersConfigDto.ateam = DemoSimulateHelper.SimulateFighterConfigDtoList(true);
            tFightersConfigDto.bteam = DemoSimulateHelper.SimulateFighterConfigDtoList(false);
            return tFightersConfigDto;
        },
        ResumeFightersConfigDto: function (){
            this.SaveFightersConfigDtoJSON(this.CreateFightersConfigDto());
        },
        AddBattleDemoS1ItemController: function (pParent, pBattleDemoS1ConfigDto, pResetPosition){
            var tBattleDemoS1ItemController = this.AddCachedChild$2$$GameObject$$String$$String(BattleDemoConfigItemController.ctor, BattleDemoConfigItem.ctor, pParent.get_gameObject(), "BattleDemoConfigItem" /* BattleDemoConfigItem.NAME */, "");
            var item = tBattleDemoS1ItemController.get_gameObject();
            item.get_transform().SetAsFirstSibling();
            tBattleDemoS1ItemController.UpdateData(pBattleDemoS1ConfigDto, $CreateDelegate(this, this.OnItemClickHandler));
            if (pResetPosition){
                pParent.Reposition();
                this.ResetPositionDelay(pParent.get_transform().GetComponentInParent$1(UIScrollView.ctor));
            }
            if (UnityEngine.Object.op_Equality(pParent, this.get_View().GridEnemy_UIGrid)){
                if (null == this.mBattleDemoS1ItemControllerEnemyList)
                    this.mBattleDemoS1ItemControllerEnemyList = new System.Collections.Generic.List$1.ctor(BattleDemoConfigItemController.ctor);
                this.mBattleDemoS1ItemControllerEnemyList.Add(tBattleDemoS1ItemController);
            }
            else {
                if (null == this.mBattleDemoS1ItemControllerFriendList)
                    this.mBattleDemoS1ItemControllerFriendList = new System.Collections.Generic.List$1.ctor(BattleDemoConfigItemController.ctor);
                this.mBattleDemoS1ItemControllerFriendList.Add(tBattleDemoS1ItemController);
            }
            return tBattleDemoS1ItemController;
        },
        CopyBattleDemoS1ItemController: function (pSelectedBattleDemoS1ItemController, pResetPosition){
            if (null == pSelectedBattleDemoS1ItemController){
                TipManager.AddTip("请先选择要拷贝的Item！", false, false, "");
                return;
            }
            this.AddBattleDemoS1ItemController(pSelectedBattleDemoS1ItemController.get_gameObject().GetComponentInParent$1(UIGrid.ctor), pSelectedBattleDemoS1ItemController.get_BattleDemoS1ConfigDto(), true);
        },
        RemoveBattleDemoS1ItemController: function (pBattleDemoS1ItemController, pResetPosition){
            if (null == pBattleDemoS1ItemController.Value){
                TipManager.AddTip("请先选择要删除的Item！", false, false, "");
                return;
            }
            var tBattleDemoS1ItemControllerList = null;
            if (UnityEngine.Object.op_Inequality(null, pBattleDemoS1ItemController.Value.get_gameObject())){
                var tUIGrid = pBattleDemoS1ItemController.Value.get_transform().GetComponentInParent$1(UIGrid.ctor);
                var tUIScrollView = pBattleDemoS1ItemController.Value.get_transform().GetComponentInParent$1(UIScrollView.ctor);
                this.RemoveCachedChild$2(BattleDemoConfigItemController.ctor, BattleDemoConfigItem.ctor, pBattleDemoS1ItemController.Value);
                if (UnityEngine.Object.op_Inequality(null, tUIGrid)){
                    if (pResetPosition){
                        tUIGrid.Reposition();
                        this.ResetPositionDelay(tUIScrollView);
                    }
                    tBattleDemoS1ItemControllerList = UnityEngine.Object.op_Equality(tUIGrid, this.get_View().GridEnemy_UIGrid) ? this.mBattleDemoS1ItemControllerEnemyList : this.mBattleDemoS1ItemControllerFriendList;
                }
            }
            if (null != tBattleDemoS1ItemControllerList)
                tBattleDemoS1ItemControllerList.Remove(pBattleDemoS1ItemController.Value);
            pBattleDemoS1ItemController.Value = null;
        },
        ResetPositionDelay: function (pUIScrollView){
            if (UnityEngine.Object.op_Equality(null, pUIScrollView))
                return;
            this.AddOrResetCDTask("ResetPositionDelay", 0.3, null, $CreateAnonymousDelegate(this, function (){
                this.RemoveCDTask("ResetPositionDelay");
                if (BaseView.IsViewDestroy(this.get_View()) || UnityEngine.Object.op_Equality(null, pUIScrollView))
                    return;
                GameDebuger.TODO("ResetPositionDelay : " + pUIScrollView.toString());
                pUIScrollView.ResetPosition();
            }), 0.1, false);
        },
        InitMonsterListUI$$FightersConfigDto: function (pFightersConfigDto){
            this.InitMonsterListUI$$UIGrid$$List$1$FighterConfigDto(this.get_View().GridFriend_UIGrid, pFightersConfigDto.ateam);
            this.InitMonsterListUI$$UIGrid$$List$1$FighterConfigDto(this.get_View().GridEnemy_UIGrid, pFightersConfigDto.bteam);
        },
        InitMonsterListUI$$UIGrid$$List$1$FighterConfigDto: function (pUIGrid, pBattleDemoS1ConfigDtoList){
            if (UnityEngine.Object.op_Equality(null, pUIGrid) || null == pBattleDemoS1ConfigDtoList || pBattleDemoS1ConfigDtoList.get_Count() <= 0)
                return;
            for (var tCounter = 0; tCounter < pBattleDemoS1ConfigDtoList.get_Count(); tCounter++){
                this.AddBattleDemoS1ItemController(pUIGrid, pBattleDemoS1ConfigDtoList.get_Item$$Int32(tCounter), false);
            }
            pUIGrid.Reposition();
            this.ResetPositionDelay(pUIGrid.GetComponentInParent$1(UIScrollView.ctor));
        },
        LogBattleDemoS1ConfigDtoFromList: function (){
            this.LogBattleDemoS1ConfigDtoFromList$$List$1$FighterConfigDto(this.mBattleDemoS1ConfigDtoListEnemy);
            this.LogBattleDemoS1ConfigDtoFromList$$List$1$FighterConfigDto(this.mBattleDemoS1ConfigDtoListFriend);
        },
        LogBattleDemoS1ConfigDtoFromList$$List$1$FighterConfigDto: function (pBattleDemoS1ConfigDtoList){
            if (null == pBattleDemoS1ConfigDtoList || pBattleDemoS1ConfigDtoList.get_Count() <= 0)
                return;
            var tStringBuilder = new System.Text.StringBuilder.ctor();
            tStringBuilder.AppendLine$$String(pBattleDemoS1ConfigDtoList.toString());
            for (var tCounter = 0; tCounter < pBattleDemoS1ConfigDtoList.get_Count(); tCounter++){
                try{
                    tStringBuilder.AppendLine$$String(pBattleDemoS1ConfigDtoList.get_Item$$Int32(tCounter).toString());
                }
                catch(e){
                    GameDebuger.LogError(e, null);
                }
            }
            GameDebuger.Log(tStringBuilder.toString(), null);
        }
    }
};
JsTypes.push(BattleDemoConfigController);
var BattleDemoConfigItemController = {
    fullname: "BattleDemoConfigItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mOnItemClickHandler = null;
            this.mSelected = false;
            this._BattleDemoS1ConfigDto = null;
            MonolessViewController$1.ctor.call(this, BattleDemoConfigItem.ctor);
        },
        BattleDemoS1ConfigDto$$: "AppDto.FighterConfigDto",
        get_BattleDemoS1ConfigDto: function (){
            return this._BattleDemoS1ConfigDto;
        },
        set_BattleDemoS1ConfigDto: function (value){
            this._BattleDemoS1ConfigDto = value;
        },
        Open: function (pBattleDemoS1ConfigDto, pOnItemClickHandler){
            this.UpdateData(pBattleDemoS1ConfigDto, pOnItemClickHandler);
        },
        RegistCustomEvent: function (){
            UIEventListener.Get(this.get_View().get_gameObject()).onClick = $CreateDelegate(this, this.OnItemClick);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelType_UIInput.onChange, $CreateDelegate(this, this.OnTypeInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelId_UIInput.onChange, $CreateDelegate(this, this.OnIdInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelPlayerId_UIInput.onChange, $CreateDelegate(this, this.OnNameInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelActiveSkill_UIInput.onChange, $CreateDelegate(this, this.OnActiveSkillInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelAttack_UIInput.onChange, $CreateDelegate(this, this.OnAttackInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelAttackMagic_UIInput.onChange, $CreateDelegate(this, this.OnAttackMagicInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelDefence_UIInput.onChange, $CreateDelegate(this, this.OnDefenceInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelDefenceMagic_UIInput.onChange, $CreateDelegate(this, this.OnDefenceMagicInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelHP_UIInput.onChange, $CreateDelegate(this, this.OnHPInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelSpeed_UIInput.onChange, $CreateDelegate(this, this.OnSpeedInputChange));
        },
        OnDispose: function (){
            this.set_Selected(false);
        },
        OnItemClick: function (go){
            if (null != this.mOnItemClickHandler)
                this.mOnItemClickHandler(this, this.get_BattleDemoS1ConfigDto());
        },
        OnTypeInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelType_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().characterType = tTempInt;
        },
        OnNameInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelPlayerId_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().playerId = tTempInt;
        },
        OnIdInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelId_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this)){
                this.get_BattleDemoS1ConfigDto().characterId = tTempInt;
                this.get_BattleDemoS1ConfigDto().id = tTempInt;
            }
        },
        OnActiveSkillInputChange: function (){
            this.get_BattleDemoS1ConfigDto().activeSkillIds = this.get_View().LabelActiveSkill_UIInput.get_value();
        },
        OnAttackInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelAttack_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().phyAttack = tTempInt;
        },
        OnAttackMagicInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelAttackMagic_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().magicAttack = tTempInt;
        },
        OnDefenceInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelDefence_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().phyDefence = tTempInt;
        },
        OnDefenceMagicInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelDefenceMagic_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().magicDefence = tTempInt;
        },
        OnHPInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelHP_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().hp = tTempInt;
        },
        OnSpeedInputChange: function (){
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelSpeed_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this))
                this.get_BattleDemoS1ConfigDto().speed = tTempInt;
        },
        UpdateData: function (pBattleDemoS1ConfigDto, pOnItemClickHandler){
            this.set_BattleDemoS1ConfigDto(null == pBattleDemoS1ConfigDto ? (new AppDto.FighterConfigDto.ctor()) : pBattleDemoS1ConfigDto);
            this.mOnItemClickHandler = pOnItemClickHandler;
            this.UpdateAllUI();
        },
        UpdateAllUI: function (){
            this.set_Selected(false);
            if (null == this.get_BattleDemoS1ConfigDto())
                return;
            this.get_View().LabelType_UIInput.set_value(this.get_BattleDemoS1ConfigDto().characterType.toString());
            this.get_View().LabelId_UIInput.set_value(this.get_BattleDemoS1ConfigDto().id.toString());
            this.get_View().LabelPlayerId_UIInput.set_value(this.get_BattleDemoS1ConfigDto().playerId.toString());
            this.get_View().LabelActiveSkill_UIInput.set_value((null == this.get_BattleDemoS1ConfigDto().activeSkillIds) ? System.String.Empty : this.get_BattleDemoS1ConfigDto().activeSkillIds.toString());
            this.get_View().LabelAttack_UIInput.set_value(this.get_BattleDemoS1ConfigDto().phyAttack.toString());
            this.get_View().LabelAttackMagic_UIInput.set_value(this.get_BattleDemoS1ConfigDto().magicAttack.toString());
            this.get_View().LabelDefence_UIInput.set_value(this.get_BattleDemoS1ConfigDto().phyDefence.toString());
            this.get_View().LabelDefenceMagic_UIInput.set_value(this.get_BattleDemoS1ConfigDto().magicDefence.toString());
            this.get_View().LabelHP_UIInput.set_value(this.get_BattleDemoS1ConfigDto().hp.toString());
            this.get_View().LabelSpeed_UIInput.set_value(this.get_BattleDemoS1ConfigDto().speed.toString());
        },
        Selected$$: "System.Boolean",
        get_Selected: function (){
            return this.mSelected;
        },
        set_Selected: function (value){
            if (this.mSelected != value){
                this.get_View().SelectedSprite.SetActive(value);
                this.mSelected = value;
            }
        }
    }
};
JsTypes.push(BattleDemoConfigItemController);
var BattleDemoEasyConfigController = {
    fullname: "BattleDemoEasyConfigController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mBattleDemoS1ConfigDtoListEnemy = null;
            this.mBattleDemoS1ConfigDtoListFriend = null;
            this.mBattleDemoS1ItemControllerEnemyList = null;
            this.mBattleDemoS1ItemControllerFriendList = null;
            this.mSelectedEnemeyBattleDemoS1ItemController = null;
            this.mSelectedFriendBattleDemoS1ItemController = null;
            this.mSelectedBattleConfigKey = null;
            this.mSelectedEnemyJobKey = null;
            this.mSelectedFriendJobKey = null;
            this.mFightersConfigDtoJSON = null;
            this.mFightersConfigDtoJSONKey = null;
            MonoViewController$1.ctor.call(this, BattleDemoEasyConfigView.ctor);
        },
        FightersConfigDtoJSONKey$$: "System.String",
        get_FightersConfigDtoJSONKey: function (){
            if (System.String.IsNullOrEmpty(this.mFightersConfigDtoJSONKey))
                this.mFightersConfigDtoJSONKey = "FightersConfigDtoJSON_EASY_" + ModelManager.get_Player().GetPlayerId().toString();
            return this.mFightersConfigDtoJSONKey;
        },
        AfterInitView: function (){
            this.InitPopBattleConfig();
            DemoConfigUIHelper.InitializePopListWithMonsterJobDesc(this.get_View().PopEnemyJob_UIPopupList, true);
            DemoConfigUIHelper.InitializePopListWithMonsterJobDesc(this.get_View().PopFriendJob_UIPopupList, true);
            this.mSelectedFriendJobKey = this.get_View().LabelPopEnemyJob_UILabel.get_text();
            this.mSelectedEnemyJobKey = this.get_View().LabelPopFriendJob_UILabel.get_text();
            this.InitMonsterListUI();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseButton_UIButton.onClick, ProxyBattleDemoConfigModule.CloseEasyConfig);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PopBattleConfig_UIPopupList.onChange, $CreateDelegate(this, this.OnPopBattleConfigChangeHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PopEnemyJob_UIPopupList.onChange, $CreateDelegate(this, this.OnPopEnemyJobChangeHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PopFriendJob_UIPopupList.onChange, $CreateDelegate(this, this.OnPopFriendJobChangeHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BattleButton_UIButton.onClick, $CreateDelegate(this, this.OnBtnBattleClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnAddEnemy_UIButton.onClick, $CreateDelegate(this, this.OnBtnAddEnemyClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnDeleteEnemy_UIButton.onClick, $CreateDelegate(this, this.OnBtnDeleteEnemyClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnCopyEnemy_UIButton.onClick, $CreateDelegate(this, this.OnBtnCopyEnemyClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnAddFriend_UIButton.onClick, $CreateDelegate(this, this.OnBtnAddFriendClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnDeleteFriend_UIButton.onClick, $CreateDelegate(this, this.OnBtnDeleteFriendClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnCopyFriend_UIButton.onClick, $CreateDelegate(this, this.OnBtnCopyFriendClick));
        },
        OnDispose: function (){
        },
        OnPopBattleConfigChangeHandler: function (){
            this.get_View().PopBattleConfig_UIPopupList.GetComponentInChildren$1(UILabel.ctor).set_text(this.get_View().PopBattleConfig_UIPopupList.get_value());
            var tTargetValue = this.get_View().PopBattleConfig_UIPopupList.get_value();
            if (this.mSelectedBattleConfigKey == tTargetValue)
                return;
            this.mSelectedBattleConfigKey = tTargetValue;
            this.InitMonsterListUI();
        },
        OnPopEnemyJobChangeHandler: function (){
            this.get_View().LabelPopEnemyJob_UILabel.set_text(this.get_View().PopEnemyJob_UIPopupList.get_value());
            this.mSelectedEnemyJobKey = this.get_View().PopEnemyJob_UIPopupList.get_value();
        },
        OnPopFriendJobChangeHandler: function (){
            this.get_View().LabelPopFriendJob_UILabel.set_text(this.get_View().PopFriendJob_UIPopupList.get_value());
            this.mSelectedFriendJobKey = this.get_View().PopFriendJob_UIPopupList.get_value();
        },
        OnBtnBattleClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 0, true))
                return;
            this.UpdateBattleDemoS1ConfigDtoListByItemList();
            this.EnterBattle();
        },
        OnBtnAddEnemyClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            var tTempInt = 0;
            tTempInt = ModelManager.get_BattleDemoConfig().GetMonsterIdByJobDesc(this.mSelectedEnemyJobKey);
            if (tTempInt > 0)
                this.AddBattleDemoS1ItemController(this.get_View().GridEnemy_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Int32$$Int32(tTempInt, tTempInt), true);
        },
        OnBtnDeleteEnemyClick: function (){
            (function (){
                var $1 = $Ref(this, "mSelectedEnemeyBattleDemoS1ItemController");
                var $res = this.RemoveBattleDemoS1ItemController($1, true);
                return $res;
            }).call(this);
        },
        OnBtnCopyEnemyClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            this.CopyBattleDemoS1ItemController(this.mSelectedEnemeyBattleDemoS1ItemController, true);
        },
        OnBtnAddFriendClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            var tTempInt = 0;
            tTempInt = ModelManager.get_BattleDemoConfig().GetMonsterIdByJobDesc(this.mSelectedFriendJobKey);
            if (tTempInt > 0)
                this.AddBattleDemoS1ItemController(this.get_View().GridFriend_UIGrid, DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Int32$$Int32(tTempInt, tTempInt), true);
        },
        OnBtnDeleteFriendClick: function (){
            (function (){
                var $1 = $Ref(this, "mSelectedFriendBattleDemoS1ItemController");
                var $res = this.RemoveBattleDemoS1ItemController($1, true);
                return $res;
            }).call(this);
        },
        OnBtnCopyFriendClick: function (){
            if (ModelManager.get_BattleDemoConfig().IsPlayerCountMaxForRequest(this.get_View().GridEnemy_UIGrid, this.get_View().GridFriend_UIGrid, 1, true))
                return;
            this.CopyBattleDemoS1ItemController(this.mSelectedFriendBattleDemoS1ItemController, true);
        },
        UpdateData: function (){
            this.UpdateAllUI();
        },
        Open: function (){
        },
        UpdateAllUI: function (){
        },
        UpdateList: function (pUIGrid, pListDataProvider){
        },
        DisposeDataAndUI: function (){
            if (null != this.mBattleDemoS1ItemControllerFriendList)
                this.mBattleDemoS1ItemControllerFriendList.Clear();
            if (null != this.mBattleDemoS1ItemControllerEnemyList)
                this.mBattleDemoS1ItemControllerEnemyList.Clear();
            if (null != this.mBattleDemoS1ConfigDtoListEnemy)
                this.mBattleDemoS1ConfigDtoListEnemy.Clear();
            if (null != this.mBattleDemoS1ConfigDtoListFriend)
                this.mBattleDemoS1ConfigDtoListFriend.Clear();
            if (null != this.mSelectedEnemeyBattleDemoS1ItemController)
                this.mSelectedEnemeyBattleDemoS1ItemController = null;
            if (null != this.mSelectedFriendBattleDemoS1ItemController)
                this.mSelectedFriendBattleDemoS1ItemController = null;
            GameObjectExt.RemoveChildren$$Transform(this.get_View().GridEnemy_UIGrid.get_transform());
            GameObjectExt.RemoveChildren$$Transform(this.get_View().GridFriend_UIGrid.get_transform());
        },
        InitPopBattleConfig: function (){
            this.get_View().PopBattleConfig_UIPopupList.Clear();
            var tDic = ModelManager.get_BattleDemoConfig().get_BattleConfigDic();
            if (null == tDic || tDic.get_Count() <= 0){
                GameDebuger.LogError("InitPopBattleConfig failed , BattleConfigDic == null ! ", null);
                return;
            }
            var tEnum = tDic.GetEnumerator();
            this.mSelectedBattleConfigKey = System.String.Empty;
            while (tEnum.MoveNext()){
                if (System.String.IsNullOrEmpty(this.mSelectedBattleConfigKey)){
                    this.mSelectedBattleConfigKey = tEnum.get_Current().get_Key();
                    this.get_View().PopBattleConfig_UIPopupList.set_value(this.mSelectedBattleConfigKey);
                }
                this.get_View().PopBattleConfig_UIPopupList.AddItem$$String(tEnum.get_Current().get_Key());
            }
        },
        InitMonsterListUI: function (){
            this.DisposeDataAndUI();
            var tFightersConfigDto = this.LoadBattleConfig(this.mSelectedBattleConfigKey);
            this.InitMonsterListUI$$FightersConfigDto(tFightersConfigDto);
        },
        LoadBattleConfig: function (pConfigKey){
            var tEnemyIDList = null;
            var tFriendIDList = null;
            if ((function (){
                var $1 = $Ref(null, tEnemyIDList);
                var $2 = $Ref(null, tFriendIDList);
                var $res = ModelManager.get_BattleDemoConfig().GetMonsterIDListByConfigId(pConfigKey, $1, $2);
                tEnemyIDList = $1.Value;
                tFriendIDList = $2.Value;
                return $res;
            }).call(this))
                return DemoSimulateHelper.SimulateFightersConfigDtoByIDList(tEnemyIDList, tFriendIDList);
            else
                return null;
        },
        CreateFightersConfigDto: function (){
            var tFightersConfigDto = new AppDto.FightersConfigDto.ctor();
            tFightersConfigDto.ateam = DemoSimulateHelper.SimulateFighterConfigDtoList(true);
            tFightersConfigDto.bteam = DemoSimulateHelper.SimulateFighterConfigDtoList(false);
            return tFightersConfigDto;
        },
        InitMonsterListUI$$FightersConfigDto: function (pFightersConfigDto){
            if (null == pFightersConfigDto){
                GameDebuger.LogError(System.String.Format$$String$$Object("InitMonsterListUI failed , null == pFightersConfigDto , mSelectedBattleConfigKey : {0}", this.mSelectedBattleConfigKey), null);
                return;
            }
            this.InitMonsterListUI$$UIGrid$$List$1$FighterConfigDto(this.get_View().GridFriend_UIGrid, pFightersConfigDto.ateam);
            this.InitMonsterListUI$$UIGrid$$List$1$FighterConfigDto(this.get_View().GridEnemy_UIGrid, pFightersConfigDto.bteam);
        },
        InitMonsterListUI$$UIGrid$$List$1$FighterConfigDto: function (pUIGrid, pBattleDemoS1ConfigDtoList){
            if (UnityEngine.Object.op_Equality(null, pUIGrid) || null == pBattleDemoS1ConfigDtoList || pBattleDemoS1ConfigDtoList.get_Count() <= 0)
                return;
            for (var tCounter = 0; tCounter < pBattleDemoS1ConfigDtoList.get_Count(); tCounter++){
                this.AddBattleDemoS1ItemController(pUIGrid, pBattleDemoS1ConfigDtoList.get_Item$$Int32(tCounter), false);
            }
            pUIGrid.Reposition();
            this.ResetPositionDelay(pUIGrid.GetComponentInParent$1(UIScrollView.ctor));
        },
        UpdateBattleDemoS1ConfigDtoListByItemList: function (){
            this.mBattleDemoS1ConfigDtoListEnemy = this.UpdateBattleDemoS1ConfigDtoListByItemList$$Boolean(true);
            this.mBattleDemoS1ConfigDtoListFriend = this.UpdateBattleDemoS1ConfigDtoListByItemList$$Boolean(false);
        },
        UpdateBattleDemoS1ConfigDtoListByItemList$$Boolean: function (pIsEnemy){
            var tItemList = pIsEnemy ? this.mBattleDemoS1ItemControllerEnemyList : this.mBattleDemoS1ItemControllerFriendList;
            if (null == tItemList || tItemList.get_Count() <= 0)
                return null;
            var tBattleDemoS1ConfigDtoList = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
            var $it8 = tItemList.GetEnumerator();
            while ($it8.MoveNext()){
                var tItem = $it8.get_Current();
                if (null != tItem)
                    tBattleDemoS1ConfigDtoList.Add(tItem.get_BattleDemoS1ConfigDto());
            }
            return tBattleDemoS1ConfigDtoList;
        },
        EnterBattle: function (){
            if (null == this.mBattleDemoS1ConfigDtoListEnemy || this.mBattleDemoS1ConfigDtoListEnemy.get_Count() <= 0 || null == this.mBattleDemoS1ConfigDtoListFriend || this.mBattleDemoS1ConfigDtoListFriend.get_Count() <= 0){
                GameDebuger.LogError("敌我都必须最少配置1个！", null);
                return;
            }
            var tFightersConfigDto = new AppDto.FightersConfigDto.ctor();
            tFightersConfigDto.ateam = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(AppDto.FighterConfigDto.ctor, this.mBattleDemoS1ConfigDtoListFriend);
            tFightersConfigDto.bteam = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(AppDto.FighterConfigDto.ctor, this.mBattleDemoS1ConfigDtoListEnemy);
            ModelManager.get_BattleDemoConfig().EnterBattle(ModelManager.get_BattleDemoConfig().BattleSceneId, tFightersConfigDto, $CreateAnonymousDelegate(this, function (){
                this.SaveFightersConfigDtoJSON(tFightersConfigDto);
                ProxyBattleDemoConfigModule.CloseEasyConfig();
            }));
        },
        SaveFightersConfigDtoJSON: function (pFightersConfigDto){
            this.mFightersConfigDtoJSON = LITJson.JsonMapper.ToJson$$Object(pFightersConfigDto);
            PlayerPrefsExt.SetPlayerString(this.get_FightersConfigDtoJSONKey(), this.mFightersConfigDtoJSON);
        },
        AddBattleDemoS1ItemController: function (pParent, pBattleDemoS1ConfigDto, pResetPosition){
            var tBattleDemoS1ItemController = this.AddCachedChild$2$$GameObject$$String$$String(BattleDemoEasyConfigItemController.ctor, BattleDemoEasyConfigItem.ctor, pParent.get_gameObject(), "BattleDemoEasyConfigItem" /* BattleDemoEasyConfigItem.NAME */, "");
            var item = tBattleDemoS1ItemController.get_gameObject();
            item.get_transform().SetAsFirstSibling();
            tBattleDemoS1ItemController.UpdateData(pBattleDemoS1ConfigDto, $CreateDelegate(this, this.OnItemClickHandler));
            if (pResetPosition){
                pParent.Reposition();
                this.ResetPositionDelay(pParent.get_transform().GetComponentInParent$1(UIScrollView.ctor));
            }
            if (UnityEngine.Object.op_Equality(pParent, this.get_View().GridEnemy_UIGrid)){
                if (null == this.mBattleDemoS1ItemControllerEnemyList)
                    this.mBattleDemoS1ItemControllerEnemyList = new System.Collections.Generic.List$1.ctor(BattleDemoEasyConfigItemController.ctor);
                this.mBattleDemoS1ItemControllerEnemyList.Add(tBattleDemoS1ItemController);
            }
            else {
                if (null == this.mBattleDemoS1ItemControllerFriendList)
                    this.mBattleDemoS1ItemControllerFriendList = new System.Collections.Generic.List$1.ctor(BattleDemoEasyConfigItemController.ctor);
                this.mBattleDemoS1ItemControllerFriendList.Add(tBattleDemoS1ItemController);
            }
            return tBattleDemoS1ItemController;
        },
        CopyBattleDemoS1ItemController: function (pSelectedBattleDemoS1ItemController, pResetPosition){
            if (null == pSelectedBattleDemoS1ItemController){
                TipManager.AddTip("请先选择要拷贝的Item！", false, false, "");
                return;
            }
            this.AddBattleDemoS1ItemController(pSelectedBattleDemoS1ItemController.get_gameObject().GetComponentInParent$1(UIGrid.ctor), pSelectedBattleDemoS1ItemController.get_BattleDemoS1ConfigDto(), true);
        },
        RemoveBattleDemoS1ItemController: function (pBattleDemoS1ItemController, pResetPosition){
            if (null == pBattleDemoS1ItemController.Value){
                TipManager.AddTip("请先选择要删除的Item！", false, false, "");
                return;
            }
            var tBattleDemoS1ItemControllerList = null;
            if (UnityEngine.Object.op_Inequality(null, pBattleDemoS1ItemController.Value.get_gameObject())){
                var tUIGrid = pBattleDemoS1ItemController.Value.get_transform().GetComponentInParent$1(UIGrid.ctor);
                var tUIScrollView = pBattleDemoS1ItemController.Value.get_transform().GetComponentInParent$1(UIScrollView.ctor);
                this.RemoveCachedChild$2(BattleDemoEasyConfigItemController.ctor, BattleDemoEasyConfigItem.ctor, pBattleDemoS1ItemController.Value);
                if (UnityEngine.Object.op_Inequality(null, tUIGrid)){
                    if (pResetPosition){
                        tUIGrid.Reposition();
                        this.ResetPositionDelay(tUIScrollView);
                    }
                    tBattleDemoS1ItemControllerList = UnityEngine.Object.op_Equality(tUIGrid, this.get_View().GridEnemy_UIGrid) ? this.mBattleDemoS1ItemControllerEnemyList : this.mBattleDemoS1ItemControllerFriendList;
                }
            }
            if (null != tBattleDemoS1ItemControllerList)
                tBattleDemoS1ItemControllerList.Remove(pBattleDemoS1ItemController.Value);
            pBattleDemoS1ItemController.Value = null;
        },
        ResetPositionDelay: function (pUIScrollView){
            if (UnityEngine.Object.op_Equality(null, pUIScrollView))
                return;
            this.AddOrResetCDTask("ResetPositionDelay", 0.3, null, $CreateAnonymousDelegate(this, function (){
                this.RemoveCDTask("ResetPositionDelay");
                if (BaseView.IsViewDestroy(this.get_View()) || UnityEngine.Object.op_Equality(null, pUIScrollView))
                    return;
                GameDebuger.TODO("ResetPositionDelay : " + pUIScrollView.toString());
                pUIScrollView.ResetPosition();
            }), 0.1, false);
        },
        OnItemClickHandler: function (pBattleDemoS1ItemController, pBattleDemoS1ConfigDto){
            GameDebuger.TODO(System.String.Format$$String$$Object$$Object("OnItemClickHandler pBattleDemoS1ItemController:{0},pBattleDemoS1ConfigDto:{1}", pBattleDemoS1ItemController, pBattleDemoS1ConfigDto));
            if (this.mSelectedEnemeyBattleDemoS1ItemController == pBattleDemoS1ItemController){
                return;
            }
            else {
                if (null == pBattleDemoS1ItemController || UnityEngine.Object.op_Equality(null, pBattleDemoS1ItemController.get_gameObject()))
                    return;
                var tUIGrid = pBattleDemoS1ItemController.get_gameObject().GetComponentInParent$1(UIGrid.ctor);
                if (UnityEngine.Object.op_Equality(null, tUIGrid))
                    return;
                if (UnityEngine.Object.op_Equality(tUIGrid, this.get_View().GridEnemy_UIGrid)){
                    if (null != this.mSelectedEnemeyBattleDemoS1ItemController)
                        this.mSelectedEnemeyBattleDemoS1ItemController.set_Selected(false);
                    this.mSelectedEnemeyBattleDemoS1ItemController = pBattleDemoS1ItemController;
                    this.mSelectedEnemeyBattleDemoS1ItemController.set_Selected(true);
                }
                else {
                    if (null != this.mSelectedFriendBattleDemoS1ItemController)
                        this.mSelectedFriendBattleDemoS1ItemController.set_Selected(false);
                    this.mSelectedFriendBattleDemoS1ItemController = pBattleDemoS1ItemController;
                    this.mSelectedFriendBattleDemoS1ItemController.set_Selected(true);
                }
            }
        }
    }
};
JsTypes.push(BattleDemoEasyConfigController);
var BattleDemoEasyConfigItemController = {
    fullname: "BattleDemoEasyConfigItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mOnItemClickHandler = null;
            this.mSelected = false;
            this._BattleDemoS1ConfigDto = null;
            MonolessViewController$1.ctor.call(this, BattleDemoEasyConfigItem.ctor);
        },
        BattleDemoS1ConfigDto$$: "AppDto.FighterConfigDto",
        get_BattleDemoS1ConfigDto: function (){
            return this._BattleDemoS1ConfigDto;
        },
        set_BattleDemoS1ConfigDto: function (value){
            this._BattleDemoS1ConfigDto = value;
        },
        Open: function (pBattleDemoS1ConfigDto, pOnItemClickHandler){
            this.UpdateData(pBattleDemoS1ConfigDto, pOnItemClickHandler);
        },
        AfterInitView: function (){
            DemoConfigUIHelper.InitializePopListWithCharacterType(this.get_View().PopCharacterType_UIPopupList);
        },
        RegistCustomEvent: function (){
            UIEventListener.Get(this.get_View().get_gameObject()).onClick = $CreateDelegate(this, this.OnItemClick);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LabelId_UIInput.onChange, $CreateDelegate(this, this.OnIdInputChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PopJob_UIPopupList.onChange, $CreateDelegate(this, this.OnPopJobChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PopCharacterType_UIPopupList.onChange, $CreateDelegate(this, this.OnPopCharacterTypeChange));
        },
        OnDispose: function (){
            this.set_Selected(false);
        },
        OnItemClick: function (go){
            if (null != this.mOnItemClickHandler)
                this.mOnItemClickHandler(this, this.get_BattleDemoS1ConfigDto());
        },
        OnPopJobChange: function (){
            if (!this.get_IDChangable())
                return;
            if (this.get_View().LabelPopJob_UILabel.get_text() == this.get_View().PopJob_UIPopupList.get_value())
                return;
            this.get_View().LabelPopJob_UILabel.set_text(this.get_View().PopJob_UIPopupList.get_value());
            var tTargetValue = this.get_View().PopJob_UIPopupList.get_value();
            var tTempInt = 0;
            if (this.get_BattleDemoS1ConfigDto().characterType == AppDto.GeneralCharactor.CharactorType.Monster)
                tTempInt = ModelManager.get_BattleDemoConfig().GetMonsterIdByJobDesc(tTargetValue);
            else
                tTempInt = ModelManager.get_BattleDemoConfig().GetCharacterIdByCharacterName(tTargetValue);
            if (tTempInt > 0){
                this.get_BattleDemoS1ConfigDto().characterId = tTempInt;
                this.get_BattleDemoS1ConfigDto().id = tTempInt;
                this.UpdateAllUI();
            }
        },
        OnPopCharacterTypeChange: function (){
            if (!this.get_IDChangable())
                return;
            if (this.get_View().LabelPopCharacterType_UILabel.get_text() == this.get_View().PopCharacterType_UIPopupList.get_value())
                return;
            this.get_View().LabelPopCharacterType_UILabel.set_text(this.get_View().PopCharacterType_UIPopupList.get_value());
            var tTargetValue = this.get_View().PopCharacterType_UIPopupList.get_value();
            var tTempInt = ModelManager.get_BattleDemoConfig().GetCharacterTypeByTypeDesc(tTargetValue);
            if (tTempInt != AppDto.GeneralCharactor.CharactorType.Unknown){
                if ((this.get_BattleDemoS1ConfigDto().characterType == AppDto.GeneralCharactor.CharactorType.Monster && tTempInt != AppDto.GeneralCharactor.CharactorType.Monster) || (this.get_BattleDemoS1ConfigDto().characterType != AppDto.GeneralCharactor.CharactorType.Monster && tTempInt == AppDto.GeneralCharactor.CharactorType.Monster)){
                    this.UpdatePopJob(tTempInt);
                }
                this.get_BattleDemoS1ConfigDto().characterType = tTempInt;
                this.UpdateAllUI();
            }
        },
        OnIdInputChange: function (){
            if (!this.get_IDChangable())
                return;
            var tTempInt = 0;
            if ((function (){
                var $1 = $Ref(null, tTempInt);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().LabelId_UIInput.get_value(), $1);
                tTempInt = $1.Value;
                return $res;
            }).call(this)){
                this.get_BattleDemoS1ConfigDto().characterId = tTempInt;
                this.get_BattleDemoS1ConfigDto().id = tTempInt;
                this.UpdateAllUI();
            }
        },
        UpdateData: function (pBattleDemoS1ConfigDto, pOnItemClickHandler){
            this.set_BattleDemoS1ConfigDto(null == pBattleDemoS1ConfigDto ? (new AppDto.FighterConfigDto.ctor()) : pBattleDemoS1ConfigDto);
            this.mOnItemClickHandler = pOnItemClickHandler;
            this.UpdatePopJob(this.get_BattleDemoS1ConfigDto().characterType);
            this.UpdateAllUI();
        },
        UpdateAllUI: function (){
            this.set_Selected(false);
            var tIcon = System.String.Empty;
            var tJobDec = "未知";
            var tTypeDesc = "未知";
            var tId = System.String.Empty;
            if (null != this.get_BattleDemoS1ConfigDto()){
                var tGeneralCharactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.get_BattleDemoS1ConfigDto().characterId);
                if (null != tGeneralCharactor)
                    tIcon = tGeneralCharactor.texture.toString();
                tId = this.get_BattleDemoS1ConfigDto().id.toString();
                tJobDec = ModelManager.get_BattleDemoConfig().GetJobDescKeyByID(this.get_BattleDemoS1ConfigDto());
                tTypeDesc = ModelManager.get_BattleDemoConfig().GetCharacterTypeDescByTypeID(this.get_BattleDemoS1ConfigDto().characterType);
            }
            this.get_View().LabelId_UIInput.set_value(tId);
            this.get_View().PopJob_UIPopupList.set_value(tJobDec);
            this.get_View().PopCharacterType_UIPopupList.set_value(tTypeDesc);
            UIHelper.SetPetIcon(this.get_View().HeadIcon_UISprite, tIcon, false);
            this.get_View().LabelId_UIInput.set_enabled((function ($p3){
                this.get_View().PopCharacterType_UIPopupList.set_enabled($p3);
                return $p3;
            }).call(this, (function ($p2){
                this.get_View().PopJob_UIPopupList.set_enabled($p2);
                return $p2;
            }).call(this, this.get_IDChangable())));
        },
        UpdatePopJob: function (pCharacterType){
            if (pCharacterType == AppDto.GeneralCharactor.CharactorType.Monster)
                DemoConfigUIHelper.InitializePopListWithMonsterJobDesc(this.get_View().PopJob_UIPopupList, false);
            else
                DemoConfigUIHelper.InitializePopListWithCharacterNames(this.get_View().PopJob_UIPopupList, false);
        },
        Selected$$: "System.Boolean",
        get_Selected: function (){
            return this.mSelected;
        },
        set_Selected: function (value){
            if (this.mSelected != value){
                this.get_View().SelectedSprite.SetActive(value);
                this.mSelected = value;
            }
        },
        IDChangable$$: "System.Boolean",
        get_IDChangable: function (){
            return null == this.get_BattleDemoS1ConfigDto() || this.get_BattleDemoS1ConfigDto().id != ModelManager.get_Player().GetPlayerId();
        }
    }
};
JsTypes.push(BattleDemoEasyConfigItemController);
var BattleDemoConfigModel = {
    fullname: "BattleDemoConfigModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleDemoConfigModel.MAX_PLAYER = 40;
            BattleDemoConfigModel.DEFAULT_SCENE_ID = 2010;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.DemoBattleMode = BATTLE_DEMO_MODEL_S1.Battle;
            this.BattleSceneId = 2010 /* DEFAULT_SCENE_ID */;
            this.BattleCameraId = 0;
            this.mMonsterJobIdDic = null;
            this.mBattleConfigDic = null;
            this.mMainRolePropertyList = null;
            this.mCharacterTypeDic = null;
            this.mCharacterNameDic = null;
            System.Object.ctor.call(this);
        },
        MonsterJobIdDic$$: "System.Collections.Generic.Dictionary`2[[System.String],[AppDto.Monster]]",
        get_MonsterJobIdDic: function (){
            if (null == this.mMonsterJobIdDic){
                this.mMonsterJobIdDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, AppDto.Monster.ctor);
                var tMonsterList = DataCache.getArrayByCls$1(AppDto.Monster.ctor);
                if (null == tMonsterList || tMonsterList.get_Count() <= 0)
                    return null;
                var tMonster = null;
                for (var tCounter = 0; tCounter < tMonsterList.get_Count(); tCounter++){
                    tMonster = tMonsterList.get_Item$$Int32(tCounter);
                    if (null == tMonster)
                        continue;
                    this.mMonsterJobIdDic.Add(this.GetJobDescKey(tMonster.id, tMonster.shortDesc), tMonster);
                }
            }
            return this.mMonsterJobIdDic;
        },
        BattleConfigDic$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.Collections.Generic.Dictionary`2[[System.Int32],[System.Collections.Generic.List`1[[System.Int32]]]]]]",
        get_BattleConfigDic: function (){
            if (null == this.mBattleConfigDic){
                this.mBattleConfigDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.Dictionary$2.ctor);
                var tBattleConfig = DataCache.GetStaticConfigValues(21002 /* AppStaticConfigs.BATTLE_CONFIG */, "战斗配置1|1_2_3#4_5_6;战斗配置2|2_1_3#4_5_6;战斗配置3|3_1_2#4_5_6;战斗配置4|4_2_3#1_5_6");
                if (System.String.IsNullOrEmpty(tBattleConfig))
                    return null;
                var tGroupsStrs = tBattleConfig.Split$$Char$Array([";"]);
                if (null == tGroupsStrs || tGroupsStrs.length <= 0)
                    return null;
                var tGroupString;
                var tGroupIdStrs;
                var tIDListDic;
                var tIDList;
                var tIDStrs,tIDStrs2;
                var tCounter2,tLen2,tCounter3;
                for (var tCounter = 0,tLen = tGroupsStrs.length; tCounter < tLen; tCounter++){
                    tGroupString = tGroupsStrs[tCounter];
                    if (System.String.IsNullOrEmpty(tGroupString))
                        continue;
                    tGroupIdStrs = tGroupString.Split$$Char$Array(["|"]);
                    if (null == tGroupIdStrs || tGroupIdStrs.length <= 1)
                        continue;
                    tIDListDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Collections.Generic.List$1.ctor);
                    tIDStrs = tGroupIdStrs[1].Split$$Char$Array(["#"]);
                    if (null == tIDStrs || tIDStrs.length != 2)
                        continue;
                    for (tCounter3 = 0; tCounter3 < 2; tCounter3++){
                        tIDList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                        tIDStrs2 = tIDStrs[tCounter3].Split$$Char$Array(["_"]);
                        if (null == tIDStrs2 || tIDStrs2.length <= 0)
                            continue;
                        for (tCounter2 = 0, tLen2 = tIDStrs2.length; tCounter2 < tLen2; tCounter2++){
                            tIDList.Add(StringHelper.ToInt(tIDStrs2[tCounter2]));
                        }
                        tIDListDic.Add(tCounter3, tIDList);
                    }
                    this.mBattleConfigDic.Add(tGroupIdStrs[0], tIDListDic);
                }
            }
            return this.mBattleConfigDic;
        },
        MainRolePropertyList$$: "System.Collections.Generic.List`1[[AppDto.FighterConfigDto]]",
        get_MainRolePropertyList: function (){
            if (null == this.mMainRolePropertyList){
                this.mMainRolePropertyList = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
                var mMainRoleProperties = DataCache.GetStaticConfigValues(21003 /* AppStaticConfigs.MAIN_ROLE_PROPERTIES */, "1#1_1117_1116|1406|598|506|414|6583|796;2#1_2712_5358|1411|464|532|509|4744|678;3#1712_4103_1616_1212|420|616|748|742|7467|663;4#1712_1512_5364|420|384|1527|958|5706|461;5#1712_1512_1315|456|464|1075|774|4650|970");
                if (System.String.IsNullOrEmpty(mMainRoleProperties))
                    return null;
                var tGroupStrs = mMainRoleProperties.Split$$Char$Array([";"]);
                if (null == tGroupStrs || tGroupStrs.length <= 0)
                    return null;
                var tValuesStrs,tValuesStrs2;
                for (var tCounter = 0,tLen = tGroupStrs.length; tCounter < tLen; tCounter++){
                    tValuesStrs = tGroupStrs[tCounter].Split$$Char$Array(["#"]);
                    if (null == tValuesStrs || tValuesStrs.length < 2)
                        continue;
                    tValuesStrs2 = tValuesStrs[1].Split$$Char$Array(["|"]);
                    if (null == tValuesStrs2 || tValuesStrs2.length < 7)
                        continue;
                    this.mMainRolePropertyList.Add(DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto$$Int32$$Int64$$Int64$$Int32$$String$$String$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32(0, 0, 0, 0, System.String.Empty, tValuesStrs2[0].Replace$$Char$$Char("_", ","), 0, StringHelper.ToInt(tValuesStrs2[1]), StringHelper.ToInt(tValuesStrs2[2]), StringHelper.ToInt(tValuesStrs2[3]), StringHelper.ToInt(tValuesStrs2[4]), StringHelper.ToInt(tValuesStrs2[5]), StringHelper.ToInt(tValuesStrs2[6])));
                }
            }
            return this.mMainRolePropertyList;
        },
        CharacterTypeDic$$: "System.Collections.Generic.Dictionary`2[[System.String],[AppDto.GeneralCharactor+CharactorType]]",
        get_CharacterTypeDic: function (){
            if (null == this.mCharacterTypeDic){
                this.mCharacterTypeDic = (function (){
                    var $v4 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, AppDto.GeneralCharactor.CharactorType.ctor);
                    $v4.Add("玩家", AppDto.GeneralCharactor.CharactorType.MainCharactor);
                    $v4.Add("伙伴", AppDto.GeneralCharactor.CharactorType.Crew);
                    $v4.Add("宠物", AppDto.GeneralCharactor.CharactorType.Pet);
                    $v4.Add("怪物", AppDto.GeneralCharactor.CharactorType.Monster);
                    return $v4;
                }).call(this);
            }
            return this.mCharacterTypeDic;
        },
        CharacterNameDic$$: "System.Collections.Generic.Dictionary`2[[System.String],[System.Int32]]",
        get_CharacterNameDic: function (){
            if (null == this.mCharacterNameDic){
                this.mCharacterNameDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Int32.ctor);
                var tGeneralCharactorList = DataCache.getArrayByCls$1(AppDto.GeneralCharactor.ctor);
                if (null == tGeneralCharactorList)
                    return null;
                tGeneralCharactorList.ForEach($CreateAnonymousDelegate(this, function (pGeneralCharactor){
                    this.mCharacterNameDic.Add(pGeneralCharactor.name, pGeneralCharactor.id);
                }));
            }
            return this.mCharacterNameDic;
        },
        Setup: function (){
            this.RegisterEvent();
        },
        Dispose: function (){
            this.RemoveEvent();
        },
        RegisterEvent: function (){
        },
        RemoveEvent: function (){
        },
        EnterBattle: function (pSceneId, pFightersConfigDto, pFinishCallBack){
            if (ServiceRequestAction.SimulateNet){
                this.OnEnterBattleSuccess(DemoSimulateHelper.SimulateVideo(pFightersConfigDto), null);
                if (null != pFinishCallBack)
                    pFinishCallBack();
            }
            else {
                var compressString = LITJson.JsonMapper.ToJson$$Object(pFightersConfigDto);
                GameDebuger.Log(System.String.Format$$String$$Object$$Object("EnterBattle pSceneId：{0},pFightersConfigDto：{1}", pSceneId.toString(), compressString), null);
                compressString = ZipLibUtils.CompressString(compressString);
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_Enter(compressString), "Battle_Enter", $CreateAnonymousDelegate(this, function (e){
                    if (null != pFinishCallBack)
                        pFinishCallBack();
                    GameDebuger.TODO("if (null == e)\n                    {\n                        GameDebuger.LogError(\'EnterBattle failed , request EnterBattleCommand success but the response is null or not type of Video!\');\n                        return;\n                    }\n                    OnEnterBattleSuccess(e as Video);");
                }), null);
            }
        },
        OnEnterBattleSuccess: function (pVideo, pFinishCallBack){
            if (null == pVideo){
                GameDebuger.LogError("OnEnterBattleSuccess failed , request EnterBattleCommand success but the response is null or not type of Video!", null);
                return;
            }
            BattleNetworkManager.get_Instance().HandleDemoVideo(pVideo);
            if (null != pFinishCallBack)
                pFinishCallBack();
        },
        GetMonsterIdByJobDesc: function (pJobDesc){
            if (System.String.IsNullOrEmpty(pJobDesc)){
                GameDebuger.LogError("GetMonsterIdByJob failed , pJobDesc IsNullOrEmpty !", null);
                return 0;
            }
            var tId = 0;
            var tMonster = null;
            if ((function (){
                var $1 = $Ref(null, tMonster);
                var $res = this.get_MonsterJobIdDic().TryGetValue(pJobDesc, $1);
                tMonster = $1.Value;
                return $res;
            }).call(this))
                tId = tMonster.id;
            else
                GameDebuger.LogError(System.String.Format$$String$$Object("GetMonsterIdByJob failed , pJobDesc:{0}", pJobDesc), null);
            return tId;
        },
        GetJobDescKeyByID: function (pFighterConfigDto){
            if (pFighterConfigDto.characterType == AppDto.GeneralCharactor.CharactorType.Monster){
                var tMonster = DataCache.getDtoByCls$1(AppDto.Monster.ctor, (pFighterConfigDto.id | 0));
                if (null != tMonster)
                    return this.GetJobDescKey(tMonster.id, tMonster.shortDesc);
            }
            else {
                var tGeneralCharactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, pFighterConfigDto.characterId);
                if (null != tGeneralCharactor)
                    return tGeneralCharactor.name;
            }
            return "未知";
        },
        GetJobDescKey: function (pMonsterId, pJodDesc){
            return System.String.Format$$String$$Object$$Object("{0}_{1}", pMonsterId, pJodDesc);
        },
        GetMonsterIDListByConfigId: function (pConfigKey, pEnemyIDList, pFriendIDList){
            pEnemyIDList.Value = null;
            pFriendIDList.Value = null;
            if (System.String.IsNullOrEmpty(pConfigKey))
                return false;
            var tAllIDList;
            if (!(function (){
                var $1 = $Ref(null, tAllIDList);
                var $res = this.get_BattleConfigDic().TryGetValue(pConfigKey, $1);
                tAllIDList = $1.Value;
                return $res;
            }).call(this))
                return false;
            if (null == tAllIDList || tAllIDList.get_Count() <= 0)
                return false;
            pEnemyIDList.Value = tAllIDList.get_Item$$TKey(0);
            pFriendIDList.Value = tAllIDList.get_Item$$TKey(1);
            return true;
        },
        GetFighterConfigDtoByCharacterId: function (pCharacterId){
            var tFighterConfigDto = null;
            try{
                tFighterConfigDto = this.get_MainRolePropertyList().get_Item$$Int32(pCharacterId % 5);
            }
            catch(e){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("GetFighterConfigDtoByCharacterId failed , pCharacterId:{0} , e:{1}", pCharacterId, e), null);
            }
            return tFighterConfigDto;
        },
        GetCharacterTypeByTypeDesc: function (pCharacterTypeDesc){
            if (System.String.IsNullOrEmpty(pCharacterTypeDesc)){
                GameDebuger.LogError("GetCharacterTypeByTypeDesc failed , pCharacterTypeDesc IsNullOrEmpty !", null);
                return 0;
            }
            var tType = AppDto.GeneralCharactor.CharactorType.Unknown;
            if (!(function (){
                var $1 = $Ref(null, tType);
                var $res = this.get_CharacterTypeDic().TryGetValue(pCharacterTypeDesc, $1);
                tType = $1.Value;
                return $res;
            }).call(this))
                GameDebuger.LogError(System.String.Format$$String$$Object("GetCharacterTypeByTypeDesc failed , pCharacterTypeDesc:{0}", pCharacterTypeDesc), null);
            return tType;
        },
        GetCharacterTypeDescByTypeID: function (pCharacterType){
            var tEnum = this.get_CharacterTypeDic().GetEnumerator();
            while (tEnum.MoveNext()){
                if (tEnum.get_Current().get_Value() == pCharacterType)
                    return tEnum.get_Current().get_Key();
            }
            return "未知";
        },
        GetCharacterIdByCharacterName: function (pCharacterName){
            var tGeneralCharactorList = DataCache.getArrayByCls$1(AppDto.GeneralCharactor.ctor);
            var tGeneralCharactor = null;
            for (var tCounter = 0; tCounter < tGeneralCharactorList.get_Count(); tCounter++){
                tGeneralCharactor = tGeneralCharactorList.get_Item$$Int32(tCounter);
                if (tGeneralCharactor.name == pCharacterName)
                    return tGeneralCharactor.id;
            }
            return 0;
        },
        IsPlayerCountMaxForRequest: function (pUIGridA, pUIGridB, pAddCount, pShowTip){
            var tTargetCount = pUIGridA.get_transform().get_childCount() + pUIGridB.get_transform().get_childCount();
            tTargetCount += pAddCount;
            if (tTargetCount > 40 /* MAX_PLAYER */){
                if (pShowTip)
                    TipManager.AddTip(System.String.Format$$String$$Object("由配置界面进入战斗的敌我总数不得超过{0}", AppStringHelper.WrapColor$$String$$Color(40 /* MAX_PLAYER */.toString(), ColorConstantV3.Color_Red2)), false, false, "");
                return true;
            }
            return false;
        }
    }
};
JsTypes.push(BattleDemoConfigModel);
var BATTLE_DEMO_MODEL_S1 = {
    fullname: "BATTLE_DEMO_MODEL_S1",
    staticDefinition: {
        Battle: 0,
        Watch: 1
    },
    Kind: "Enum"
};
JsTypes.push(BATTLE_DEMO_MODEL_S1);
var AppDto$FighterConfigDto = {
    fullname: "AppDto.FighterConfigDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.characterType = 0;
            this.hp = 0;
            this.activeSkillIds = null;
            this.phyAttack = 0;
            this.phyDefence = 0;
            this.magicAttack = 0;
            this.magicDefence = 0;
            this.speed = 0;
            this.characterId = 0;
            this.playerId = 0;
            System.Object.ctor.call(this);
        },
        toString: function (){
            return System.String.Format$$String$$Object$Array("[FighterConfigDto] id:{0},characterType:{1},hp:{2},activeSkillIds:{3},phyAttack:{4},phyDefence:{5},magicAttack:{6},magicDefence:{7},speed:{8},characterId:{9},playerId:{10}", [this.id, this.characterType, this.hp, this.activeSkillIds, this.phyAttack, this.phyDefence, this.magicAttack, this.magicDefence, this.speed, this.characterId, this.playerId]);
        }
    }
};
JsTypes.push(AppDto$FighterConfigDto);
var AppDto$FightersConfigDto = {
    fullname: "AppDto.FightersConfigDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ateam = null;
            this.bteam = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppDto$FightersConfigDto);
var BattleDemoEasyConfigItem = {
    fullname: "BattleDemoEasyConfigItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleDemoEasyConfigItem.NAME = "BattleDemoEasyConfigItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.PopJob_UIPopupList = null;
            this.LabelId_UILabel = null;
            this.LabelId_UIInput = null;
            this.SelectedSprite = null;
            this.HeadIcon_UISprite = null;
            this.PopCharacterType_UIPopupList = null;
            this.LabelPopJob_UILabel = null;
            this.LabelPopCharacterType_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.PopJob_UIPopupList = root.Find("PopJob").GetComponent$1(UIPopupList.ctor);
            this.LabelId_UILabel = root.Find("LabelId").GetComponent$1(UILabel.ctor);
            this.LabelId_UIInput = root.Find("LabelId").GetComponent$1(UIInput.ctor);
            this.SelectedSprite = root.Find("SelectedSprite").get_gameObject();
            this.HeadIcon_UISprite = root.Find("HeadIcon").GetComponent$1(UISprite.ctor);
            this.PopCharacterType_UIPopupList = root.Find("PopCharacterType").GetComponent$1(UIPopupList.ctor);
            this.LabelPopJob_UILabel = root.Find("PopJob/LabelPopJob").GetComponent$1(UILabel.ctor);
            this.LabelPopCharacterType_UILabel = root.Find("PopCharacterType/LabelPopCharacterType").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(BattleDemoEasyConfigItem);
var BattleDemoEasyConfigView = {
    fullname: "BattleDemoEasyConfigView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleDemoEasyConfigView.NAME = "BattleDemoEasyConfigView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseButton_UIButton = null;
            this.BattleButton_UIButton = null;
            this.PopFriendJob_UIPopupList = null;
            this.BtnAddEnemy_UIButton = null;
            this.BtnDeleteEnemy_UIButton = null;
            this.BtnCopyEnemy_UIButton = null;
            this.PopEnemyJob_UIPopupList = null;
            this.PopBattleConfig_UIPopupList = null;
            this.BtnAddFriend_UIButton = null;
            this.BtnDeleteFriend_UIButton = null;
            this.BtnCopyFriend_UIButton = null;
            this.GridEnemy_UIGrid = null;
            this.GridFriend_UIGrid = null;
            this.EnemyScrollViewEnemy_UIScrollView = null;
            this.FriendScrollViewFriend_UIScrollView = null;
            this.LabelPopBattleConfig_UILabel = null;
            this.LabelPopFriendJob_UILabel = null;
            this.LabelPopEnemyJob_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseButton_UIButton = root.Find("CloseButton").GetComponent$1(UIButton.ctor);
            this.BattleButton_UIButton = root.Find("CntrOptionBtns/BattleButton").GetComponent$1(UIButton.ctor);
            this.PopFriendJob_UIPopupList = root.Find("CntrFriend/CntrFighterOptionBtns/PopFriendJob").GetComponent$1(UIPopupList.ctor);
            this.BtnAddEnemy_UIButton = root.Find("CntrEnemy/CntrFighterOptionBtns/BtnAddEnemy").GetComponent$1(UIButton.ctor);
            this.BtnDeleteEnemy_UIButton = root.Find("CntrEnemy/CntrFighterOptionBtns/BtnDeleteEnemy").GetComponent$1(UIButton.ctor);
            this.BtnCopyEnemy_UIButton = root.Find("CntrEnemy/CntrFighterOptionBtns/BtnCopyEnemy").GetComponent$1(UIButton.ctor);
            this.PopEnemyJob_UIPopupList = root.Find("CntrEnemy/CntrFighterOptionBtns/PopEnemyJob").GetComponent$1(UIPopupList.ctor);
            this.PopBattleConfig_UIPopupList = root.Find("CntrOptionBtns/PopBattleConfig").GetComponent$1(UIPopupList.ctor);
            this.BtnAddFriend_UIButton = root.Find("CntrFriend/CntrFighterOptionBtns/BtnAddFriend").GetComponent$1(UIButton.ctor);
            this.BtnDeleteFriend_UIButton = root.Find("CntrFriend/CntrFighterOptionBtns/BtnDeleteFriend").GetComponent$1(UIButton.ctor);
            this.BtnCopyFriend_UIButton = root.Find("CntrFriend/CntrFighterOptionBtns/BtnCopyFriend").GetComponent$1(UIButton.ctor);
            this.GridEnemy_UIGrid = root.Find("CntrListEnemy/EnemyScrollViewEnemy/GridEnemy").GetComponent$1(UIGrid.ctor);
            this.GridFriend_UIGrid = root.Find("CntrListFriend/FriendScrollViewFriend/GridFriend").GetComponent$1(UIGrid.ctor);
            this.EnemyScrollViewEnemy_UIScrollView = root.Find("CntrListEnemy/EnemyScrollViewEnemy").GetComponent$1(UIScrollView.ctor);
            this.FriendScrollViewFriend_UIScrollView = root.Find("CntrListFriend/FriendScrollViewFriend").GetComponent$1(UIScrollView.ctor);
            this.LabelPopBattleConfig_UILabel = root.Find("CntrOptionBtns/PopBattleConfig/LabelPopBattleConfig").GetComponent$1(UILabel.ctor);
            this.LabelPopFriendJob_UILabel = root.Find("CntrFriend/CntrFighterOptionBtns/PopFriendJob/LabelPopFriendJob").GetComponent$1(UILabel.ctor);
            this.LabelPopEnemyJob_UILabel = root.Find("CntrEnemy/CntrFighterOptionBtns/PopEnemyJob/LabelPopEnemyJob").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(BattleDemoEasyConfigView);
var ProxyBattleDemoModule = {
    fullname: "ProxyBattleDemoModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyBattleDemoModule.NAME_BattleSkillSelect = "BattleSkillSelectView";
            ProxyBattleDemoModule.NAME_BattleSummon = "BattleSummonView";
        },
        Open: function (video){
            var module = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleDemoView" /* BattleDemoView.NAME */, UILayerType.BaseModule, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleDemoController.ctor, module);
            controller.Open(video);
        },
        Hide: function (){
            UIModuleManager.get_Instance().HideModule("BattleDemoView" /* BattleDemoView.NAME */);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("BattleDemoView" /* BattleDemoView.NAME */, true);
        },
        OpenSkillSelect: function (mc, OnSkillSelect){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleSkillSelectView" /* NAME_BattleSkillSelect */, UILayerType.DefaultModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleSkillSelectController.ctor, ui);
            controller.Open(mc, OnSkillSelect);
        },
        OpenGuideSkillSelect: function (mc, OnSkillSelect){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleSkillSelectView" /* NAME_BattleSkillSelect */, UILayerType.DefaultModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleSkillSelectController.ctor, ui);
            controller.OpenGuide(mc, OnSkillSelect);
        },
        CloseSkillSelect: function (){
            UIModuleManager.get_Instance().CloseModule("BattleSkillSelectView" /* NAME_BattleSkillSelect */, true);
        },
        HideSkillSelect: function (){
            UIModuleManager.get_Instance().HideModule("BattleSkillSelectView" /* NAME_BattleSkillSelect */);
        },
        OpenStuntSelect: function (mc, skills, spendSpRate, OnStuntSelect){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleSkillSelectView" /* NAME_BattleSkillSelect */, UILayerType.DefaultModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleSkillSelectController.ctor, ui);
            controller.OpenStunt(mc, skills, spendSpRate, OnStuntSelect);
        },
        CloseStuntSelect: function (){
            UIModuleManager.get_Instance().CloseModule("BattleSkillSelectView" /* NAME_BattleSkillSelect */, true);
        },
        HideStuntSelect: function (){
            UIModuleManager.get_Instance().HideModule("BattleSkillSelectView" /* NAME_BattleSkillSelect */);
        },
        OpenSummon: function (onSelectDelegate){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleSummonView" /* NAME_BattleSummon */, UILayerType.DefaultModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleSummonController.ctor, ui);
            controller.Open(onSelectDelegate);
        },
        CloseSummon: function (){
            UIModuleManager.get_Instance().CloseModule("BattleSummonView" /* NAME_BattleSummon */, true);
        },
        HideSummon: function (){
            UIModuleManager.get_Instance().HideModule("BattleSummonView" /* NAME_BattleSummon */);
        },
        OpenBattleOrderListView: function (orderType, targetId, pOrderSelectedHandler){
            var view = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleOrderListView" /* BattleOrderListView.NAME */, UILayerType.ThreeModule, false, true);
            var com = GameObjectExt.GetMissingComponent$1(BattleOrderListViewController.ctor, view);
            com.Open(orderType, targetId, pOrderSelectedHandler);
        },
        HideBattleOrderListView: function (){
            UIModuleManager.get_Instance().HideModule("BattleOrderListView" /* BattleOrderListView.NAME */);
        },
        CloseBattleOrderListView: function (){
            UIModuleManager.get_Instance().CloseModule("BattleOrderListView" /* BattleOrderListView.NAME */, true);
        },
        IsBattleOrderListViewOpening: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("BattleOrderListView" /* BattleOrderListView.NAME */);
        },
        OpenBattleOrderEditorView: function (orderType){
            var view = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("BattleOrderEditorView" /* BattleOrderEditorView.NAME */, 51 /* UILayerType.ThreeModule + 1 */, true, false);
            var com = GameObjectExt.GetMissingComponent$1(BattleOrderEditorViewController.ctor, view);
            com.Open();
            com.set_orderType(orderType);
            com.setData();
            GameDebuger.TODO("CloseBattleBuffTipsView();");
        },
        IsBattleOrderEditorViewOpening: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("BattleOrderEditorView" /* BattleOrderEditorView.NAME */);
        },
        CloseBattleOrderEditorView: function (){
            UIModuleManager.get_Instance().CloseModule("BattleOrderEditorView" /* BattleOrderEditorView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyBattleDemoModule);
var BattleActionQueueController = {
    fullname: "BattleActionQueueController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mActionQueueNameItemDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, BattleActionQueueItemController.ctor);
            this.mBattleActionQueueItemController = null;
            MonolessViewController$1.ctor.call(this, BattleActionQueueView.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, $CreateDelegate(this, this.OnQueueUpdate));
        },
        RemoveCustomEvent: function (){
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, $CreateDelegate(this, this.OnQueueUpdate));
        },
        UpdateData: function (){
            this.UpdateAllUI();
        },
        UpdateAllUI: function (){
        },
        OnQueueUpdate: function (pCharacterUID){
            var tVideoRoundList = BattleInstController.get_Instance().get__videoRounds();
            if (null == tVideoRoundList || tVideoRoundList.get_Count() <= 0)
                return;
            var tMaxQueueNameActionNum = ModelManager.get_BattleDemo().get_MaxQueueNameActionNum();
            var tVideoRound = null;
            var tValidList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var tFirstBattleActionQueueItemController = null;
            var tBattleActionQueueItemController = null;
            var tSkillShortDesc = System.String.Empty;
            for (var tCounter = 0; tCounter < tVideoRoundList.get_Count(); tCounter++){
                tVideoRound = tVideoRoundList.get_Item$$Int32(tCounter);
                if (!BattleInstController.get_Instance().IsBattleValid$$VideoRound(tVideoRound))
                    continue;
                tValidList.Add(tVideoRound.GetHashCode());
                tSkillShortDesc = DemoSkillHelper.GetVideoRoundSkillShortDesc(tVideoRound);
                tBattleActionQueueItemController = this.AddActionItem(tVideoRound.GetHashCode(), tVideoRound.id, tVideoRound.name, tSkillShortDesc);
                if (tValidList.get_Count() == 1)
                    tFirstBattleActionQueueItemController = tBattleActionQueueItemController;
                else
                    tBattleActionQueueItemController.set_Flashing(false);
                if (tValidList.get_Count() >= tMaxQueueNameActionNum)
                    break;
            }
            var tInvalidList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var tEnum = this.mActionQueueNameItemDic.GetEnumerator();
            while (tEnum.MoveNext()){
                if (tValidList.Contains(tEnum.get_Current().get_Key()))
                    continue;
                tInvalidList.Add(tEnum.get_Current().get_Key());
            }
            if (tInvalidList.get_Count() > 0){
                for (var tCounter = 0; tCounter < tInvalidList.get_Count(); tCounter++){
                    this.RemoveActionItem(tInvalidList.get_Item$$Int32(tCounter));
                }
            }
            this.UpdateFirstItemForShowing($CreateAnonymousDelegate(this, function (){
                if (null == tFirstBattleActionQueueItemController)
                    return;
                tFirstBattleActionQueueItemController.set_Flashing(true);
            }));
        },
        AddActionItem: function (pUniqueKey, pPlayerUID, pPlayerName, pSkillShortDesc){
            var tBattleActionQueueItemController = null;
            if (!(function (){
                var $1 = $Ref(null, tBattleActionQueueItemController);
                var $res = this.mActionQueueNameItemDic.TryGetValue(pUniqueKey, $1);
                tBattleActionQueueItemController = $1.Value;
                return $res;
            }).call(this)){
                tBattleActionQueueItemController = this.AddCachedChild$2$$GameObject$$String$$String(BattleActionQueueItemController.ctor, BattleActionQueueItem.ctor, this.get_View().CntrNamesGrid_UIGrid.get_gameObject(), "BattleActionQueueItem" /* BattleActionQueueItem.NAME */, "");
                this.mActionQueueNameItemDic.Add(pUniqueKey, tBattleActionQueueItemController);
                tBattleActionQueueItemController.UpdateData(pPlayerUID, pPlayerName, pSkillShortDesc);
            }
            tBattleActionQueueItemController.get_transform().SetAsLastSibling();
            return tBattleActionQueueItemController;
        },
        UpdateFirstItemForShowing: function (pRepositionCallBack){
            UIHelper.RepositionDelay(this.get_View().CntrNamesGrid_UIGrid, pRepositionCallBack);
        },
        UpdateCurrentShowingItem: function (pBattleActionQueueItemController){
            if (null != this.mBattleActionQueueItemController)
                this.mBattleActionQueueItemController.set_Flashing(false);
            this.mBattleActionQueueItemController = pBattleActionQueueItemController;
            if (null == this.mBattleActionQueueItemController)
                return;
            this.mBattleActionQueueItemController.set_Flashing(true);
        },
        RemoveActionItem: function (pUniqueKey){
            if (null == this.mActionQueueNameItemDic || this.mActionQueueNameItemDic.get_Count() <= 0)
                return;
            var tBattleActionQueueItemController = null;
            if ((function (){
                var $1 = $Ref(null, tBattleActionQueueItemController);
                var $res = this.mActionQueueNameItemDic.TryGetValue(pUniqueKey, $1);
                tBattleActionQueueItemController = $1.Value;
                return $res;
            }).call(this)){
                this.mActionQueueNameItemDic.Remove(pUniqueKey);
                this.RemoveCachedChild$2(BattleActionQueueItemController.ctor, BattleActionQueueItem.ctor, tBattleActionQueueItemController);
            }
        }
    }
};
JsTypes.push(BattleActionQueueController);
var BattleActionQueueItemController = {
    fullname: "BattleActionQueueItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mFlashing = true;
            MonolessViewController$1.ctor.call(this, BattleActionQueueItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        UpdateData: function (pPlayerUID, pPlayerName, pSkillShortDesc){
            this.UpdateAllUI(pPlayerUID, pSkillShortDesc);
        },
        UpdateAllUI: function (pPlayerUID, pSkillShortDesc){
            var tIcon = System.String.Empty;
            var tName = System.String.Empty;
            var tColor = UnityEngine.Color.get_clear();
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(pPlayerUID);
            if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                var tVideoSoldier = tMonsterController.videoSoldier;
                if (null != tVideoSoldier){
                    tIcon = tVideoSoldier.get_charactor().texture.toString();
                    tName = tVideoSoldier.name;
                    tColor = this.GetQueueNameItemColor(pPlayerUID);
                }
            }
            this.get_View().LabelName_UILabel.set_text(tName);
            this.get_View().SpriteType_UISprite.set_color(tColor);
            this.get_View().SpriteType_TweenAlpha.set_enabled(false);
            this.get_View().LabelDesc_UILabel.set_text(pSkillShortDesc);
            this.get_View().SpriteDescBG_UISprite.ResetAnchors();
            UIHelper.SetPetIcon(this.get_View().SpriteHead_UISprite, tIcon, false);
        },
        GetQueueNameItemColor: function (pPlayerUID){
            if (pPlayerUID == ModelManager.get_Player().GetPlayerId())
                return UnityEngine.Color.op_Addition(ColorConstantV3.Color_Green_Strong, new UnityEngine.Color.ctor$$Single$$Single$$Single(0.01, 0, 0));
            if (MonsterManager.get_Instance().IsEnemy(pPlayerUID))
                return UnityEngine.Color.op_Addition(ColorConstantV3.Color_PaleRed, new UnityEngine.Color.ctor$$Single$$Single$$Single(0.01, 0, 0));
            return UnityEngine.Color.op_Addition(ColorConstantV3.Color_ChatNameBlue, new UnityEngine.Color.ctor$$Single$$Single$$Single(0.01, 0, 0));
        },
        Flashing$$: "System.Boolean",
        get_Flashing: function (){
            return this.mFlashing;
        },
        set_Flashing: function (value){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            if (this.mFlashing != value){
                this.mFlashing = value;
                this.get_View().SpriteHightLight.SetActive(this.mFlashing);
                if (this.mFlashing)
                    this.get_View().SpriteHightLight_TweenAlpha.PlayForward();
            }
        }
    }
};
JsTypes.push(BattleActionQueueItemController);
var BattleDemoController = {
    fullname: "BattleDemoController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleDemoController.SKILL_COMMMON_CD_COOLDOWN = "BATTLE_SKILL_COMMMON_CD_COOLDOWN_ID_{0}";
            BattleDemoController.PLAYER_Y_Rotation = 100;
            BattleDemoController.ENEMY_Y_Rotation = -80 /* -80f */;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._battleNetworkHandler = null;
            this._winId = 0;
            this._oldBattlePetList = null;
            this._waitingExit = false;
            this._isDead = false;
            this._retreatTipFlag = false;
            this._Result = BattleDemoController.BattleResult.NULL;
            this._battleLaunchTimer = null;
            this._battleRound = 0;
            this.mEffectForManualBtn = null;
            this.mBattleSkillPointController = null;
            this.mBattleActionQueueController = null;
            this.mBattleOptionController = null;
            this.mBattleTotalDamageHealController = null;
            this.mBattleFormationController = null;
            MonoViewController$1.ctor.call(this, BattleDemoView.ctor);
        },
        Open: function (video){
            ModelManager.get_BattleDemo().InitFightInfo();
            ModelManager.get_BattleDemo()._gameVideo = video;
            GameDebuger.TODO("_watchTeamId = watchTeamId;");
            this._battleRound = video.currentRound;
            GameDebuger.TODO("if (IsNeedSynSettingVideo() && !IsGuideCatchPetBattle() && !IsGuideHeroAndPetBattle())\n        {\n            ModelManager.BattleDemo.isAIManagement = ModelManager.SystemData.autoFramToggle;\n        }\n            else");
            ModelManager.get_BattleDemo().set_isAIManagement(false);
            GameDebuger.TODO("if (ModelManager.BattleDemo._gameVideo is GuideVideo)\n        {\n            _guideBattle = true;\n            ModelManager.BattleDemo.isAIManagement = false;\n            TalkingDataHelper.OnEventSetp(\'StartBattle\', \'Begin\');\n        }\n        else\n        {\n            _guideBattle = false;\n        }");
            GameDebuger.TODO("mIsWatchMode = _watchTeamId > 0;");
            BattleLaunchTimer.MAX_INSTRUCTION_TIME = ModelManager.get_BattleDemo()._gameVideo.readyTime;
            GameDebuger.TODO("PetPropertyInfo battlePetInfo = ModelManager.Pet.GetBattlePetInfo();\n        if (battlePetInfo != null)\n        {\n            if ((battlePetInfo.petDto.lifePoint >= 0 && battlePetInfo.petDto.lifePoint <= 50) && !ModelManager.Pet.isZhenShenPet(battlePetInfo))\n            {\n                TipManager.AddTip(\"参战宠物寿命≤50，无法出战\");\n            }\n        }        \n");
            this.InitlializeBattleInfo();
        },
        InitlializeBattleInfo: function (){
            this._battleNetworkHandler = new BattleNetworkHandler.ctor();
            this._battleNetworkHandler.Setup(this);
            ModelManager.get_BattleDemo().Setup();
            ModelManager.get_BattleDemoConfig().Setup();
            BattleInstController.get_Instance().Setup();
            BattleActionPlayerPoolManager.get_Instance().Setup(this.get_gameObject());
            this._oldBattlePetList = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            GameDebuger.TODO("_readyRound = 0;");
            this._retreatTipFlag = false;
            this.AdjustGameContingent();
            this.StartGameVideo();
        },
        AfterInitView: function (){
            this.get_BattleActionQueueController().UpdateData();
            this.get_BattleTotalDamageHealController().UpdateData();
            this.InitBattleLaunchTimer();
        },
        CheckBattleOver: function (e){
            if (null == e)
                return;
            GameDebuger.Log(e.id + "" + e.message, null);
            if (e.id == 2001 /* AppErrorCodes.BATTLE_ID_NOT_FOUND */){
                ModelManager.get_BattleDemo()._lockUI = true;
                if (ModelManager.get_BattleDemo()._isGameOver == false){
                    this.ExitBattle();
                }
            }
            else {
                TipManager.AddTip(e.message, false, false, "");
                ModelManager.get_BattleDemo()._lockUI = false;
            }
        },
        StartGameVideo: function (){
            var info = this.GetHeroBattlePlayerInfo();
            if (info != null){
                ModelManager.get_BattleDemo()._itemUsedCount = info.useItemCount;
                for (var i = 0,len = info.allPetSoldierIds.get_Count(); i < len; i++){
                    this.AddOldBattlePetList(info.allPetSoldierIds.get_Item$$Int32(i));
                }
            }
            this.ShowTeamMonsters(MonsterController.MonsterSide.Enemy);
            this.ShowTeamMonsters(MonsterController.MonsterSide.Player);
            this.ShowBattleUI();
            this.get_BattleOptionController().UpdateDefaultSkillIcon();
            this.get_BattleOptionController().UpdatePlayerAndPetDefaultSkill();
            this.PlayGameVideo();
            GameDebuger.TODO("if ((ModelManager.Player.IsAutoFram || ModelManager.BattleDemo.isAIManagement) && !mIsWatchMode && !_guideBattle)");
            if ((ModelManager.get_Player().get_IsAutoFram() || ModelManager.get_BattleDemo().get_isAIManagement())){
                this.get_BattleOptionController().InvokeAutoButtonClickDelay();
            }
            LoginManager.get_Instance().add_OnReloginSuccess($CreateDelegate(this, this.HandleOnReloginSuccess));
        },
        ChooseTargetPetHandler: function (target){
            this.ChooseTargetPet(target);
        },
        ChooseTargetPet: function (target){
            if (!ModelManager.get_BattleDemo().CanUseCommand(ModelManager.get_BattleDemo().get_choosePet(), true)){
                return false;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return false;
            }
            if (ModelManager.get_BattleDemo().get_battleState() != BattleDemoModel.BattleSceneStat.ON_SELECT_TARGET || UnityEngine.Object.op_Equality(ModelManager.get_BattleDemo().get_choosePet(), null)){
                return false;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            ModelManager.BattleDemo.choosePet.NeedReady = false;\n            ModelManager.BattleDemo.choosePet = null;\n            target.PlayTargetClickEffect();\n            OnActionRequestSuccess(null);\n\n            return true;\n        }");
            if (UnityEngine.Object.op_Equality(ModelManager.get_BattleDemo().get_choosePet(), null) || ModelManager.get_BattleDemo().get_choosePet().battleTargetSelector == null){
                return false;
            }
            if (!ModelManager.get_BattleDemo().get_choosePet().battleTargetSelector.CanSetTarget(ModelManager.get_BattleDemo().get_choosePet(), target)){
                return false;
            }
            if (!ModelManager.get_BattleDemo().get_choosePet().battleTargetSelector.CanSetCaptureTarget(ModelManager.get_BattleDemo().get_choosePet(), target)){
                return false;
            }
            GameDebuger.Log("Set Target Success", null);
            ModelManager.get_BattleDemo().get_choosePet().SetSkillTarget$$Int64(target.GetId());
            var targetSelector = ModelManager.get_BattleDemo().get_choosePet().battleTargetSelector;
            GameDebuger.Log(ModelManager.get_BattleDemo().get_choosePet().battleTargetSelector.getSelectParam(), null);
            var requestInfo = null;
            if (targetSelector.IsItemSkill()){
                requestInfo = AppServices.Services.Battle_UseItem(ModelManager.get_BattleDemo()._gameVideo.id, targetSelector.GetSkillLogicId(), targetSelector.IsMainCharactor(), targetSelector.GetTargetSoldierId());
            }
            else if (targetSelector.IsCommandSkill()){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("[TEMP]对目标使用指令，ID：{0}，Name：{1}", targetSelector.GetSkillId(), targetSelector.GetSkill().name), null);
                var tBattleOrderInfo = As(targetSelector.SkillParam, BattleOrderInfo.ctor);
                if (null == tBattleOrderInfo)
                    return false;
                var battleId = BattleManager.get_Instance().GetCurrentGameVideoId();
                var tTargetId = targetSelector.GetTargetSoldierId();
                if (tBattleOrderInfo.isClearButton)
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_Order(battleId, tTargetId, tBattleOrderInfo.orderName), "", null, null);
                else if (tBattleOrderInfo.isAllClearButton)
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_ClearOrder(battleId), "", null, null);
                else {
                    if (!System.String.IsNullOrEmpty(tBattleOrderInfo.orderName)){
                        ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_Order(battleId, tTargetId, tBattleOrderInfo.orderName), "", null, null);
                    }
                }
                target.PlayTargetClickEffect();
                this.OnCancelButtonClick();
                this.OnBtnCommandClick();
                return true;
            }
            else {
                requestInfo = AppServices.Services.Battle_Attack(ModelManager.get_BattleDemo()._gameVideo.id, ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO, targetSelector.GetTargetSoldierId(), targetSelector.GetSkillId());
            }
            var waitNextAction = ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO && UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyPet(), null);
            ModelManager.get_BattleDemo()._lockUI = true;
            if (waitNextAction){
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    DemoSimulateHelper.SimulateDefaultSkill$$BattleTargetSelector(targetSelector);
                    ModelManager.get_BattleDemo()._lockUI = false;
                    ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
                    GameDebuger.TODO("ModelManager.BattleDemo.choosePet.UpdateSkillCD();");
                    ModelManager.get_BattleDemo().UpdateOptionTarget(null);
                    ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.PET;
                    target.PlayTargetClickEffect();
                    GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.BATTLE_READY);
                    GameDebuger.TODO("if (IsGuideHeroAndPetBattle())\n                    {\n                        UIModuleManager.Instance.SendOpenEvent(GuideAttackButton, this);\n                    }");
                }), $CreateAnonymousDelegate(this, function (e){
                    this.CheckBattleOver(e);
                }));
            }
            else {
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    DemoSimulateHelper.SimulateDefaultSkill$$BattleTargetSelector(targetSelector);
                    this.OnRequestSkillTargetSuccessCallBack(target);
                }), $CreateAnonymousDelegate(this, function (e){
                    this.CheckBattleOver(e);
                }));
            }
            return true;
        },
        OnRequestSkillTargetSuccessCallBack: function (pTarget){
            ModelManager.get_BattleDemo()._lockUI = false;
            if (UnityEngine.Object.op_Equality(null, pTarget))
                return;
            ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
            GameDebuger.TODO("ModelManager.BattleDemo.choosePet.UpdateSkillCD();");
            ModelManager.get_BattleDemo().UpdateOptionTarget(null);
            pTarget.PlayTargetClickEffect();
            this.OnActionRequestSuccess();
        },
        ShowBattleReport: function (){
            this.ExitBattleWithoutReport();
        },
        HideBattleUI: function (){
            GameDebuger.TODO("if (IsGuideHeroAndPetBattle())\n        {\n            NewBieGuideManager.Instance.FinishGuide(NewBieGuideManager.Key_GuideHeroAndPetBattle);\n            }");
            this.Hide();
        },
        Hide: function (){
            GameDebuger.TODO("View.MainUI.gameObject.SetActive(false);");
        },
        SetBattleStat: function (stat){
            GameDebuger.LogBattleInfo(System.String.Format$$String$$Object("SetBattleStat stat:{0}", stat));
            var lastBattleState = ModelManager.get_BattleDemo().get_battleState();
            ModelManager.get_BattleDemo().set_battleState(stat);
            GameDebuger.Log("SetBattleStat " + stat, null);
            GameDebuger.TODO("if (mIsWatchMode)\n        {\n            return;\n        }");
            if (stat == BattleDemoModel.BattleSceneStat.BATTLE_READY || stat == BattleDemoModel.BattleSceneStat.ON_WAITING){
                this.ShowTargetSelect(null, "");
                this.ShowTip(null);
                if (ModelManager.get_BattleDemo().get_isAIManagement() == false){
                    ProxyBattleDemoModule.HideSkillSelect();
                }
                MonsterManager.get_Instance().HideSelectEffect();
                this.ShowRoundWating(false);
                this.get_BattleOptionController().ShowActionWaitTip();
                this.UpdateBattleButtonView();
                this.get_BattleOptionController().UpdateDefaultSkillIcon();
                GameDebuger.TODO("if (_battleRound == 0)\n            {\n                if (_guideBattle)\n                {\n                    Invoke(\'DelayActiveHeroBattleGuide\', 0.1f);\n                }\n\n                if (IsGuideCatchPetBattle())\n                {\n                    Invoke(\'DelayActiveCatchPetBattleGuide\', 0.1f);\n                }\n\n                if (IsGuideHeroAndPetBattle())\n                {\n                    Invoke(\'DelayActiveHeroAndPetBattleGuide\', 0.1f);\n                }\n            }\n\n            if (_battleRound == 1)\n            {\n                Invoke(\'DelaySendGuideUseLastSelectSkillEvent\', 0.1f);\n            }\n\n            if (_battleRound == 2)\n            {\n                UIModuleManager.Instance.SendOpenEvent(GuideAutoBattle, this);\n                }");
            }
            else if (stat == BattleDemoModel.BattleSceneStat.ON_PROGRESS){
                GameDebuger.TODO("if (IsGuideCatchPetBattle())\n            {\n                NewBieGuideManager.Instance.FinishGuide(NewBieGuideManager.Key_GuideCatchPetBattle);\n            }");
                GameDebuger.TODO("if (lastBattleState != BattleSceneStat.FINISH_COMMAND && !_guideBattle)");
                if (lastBattleState != BattleDemoModel.BattleSceneStat.FINISH_COMMAND){
                    GameDebuger.TODO("ModelManager.BattleDemo.isAIManagement = true;");
                }
                MonsterManager.get_Instance().UpdateMonsterNeedReady$$Boolean$$Func$2$MonsterController$Boolean(false, null);
                this.ShowTargetSelect(null, "");
                this._battleLaunchTimer.Hide();
                MonsterManager.get_Instance().HideSelectEffect();
                this.ShowRoundWating(false);
                this.ShowTip(null);
                this.UpdateBattleButtonView();
                GameDebuger.TODO("ProxyManager.ItemUse.Close();\n            ProxyBattleModule.CloseMagicEquipSelect();");
                ProxyBattleDemoModule.CloseSummon();
                ProxyBattleDemoModule.HideSkillSelect();
            }
            else if (stat == BattleDemoModel.BattleSceneStat.FINISH_COMMAND){
                MonsterManager.get_Instance().UpdateMonsterNeedReady$$Boolean$$Func$2$MonsterController$Boolean(false, $CreateAnonymousDelegate(this, function (mc){
                    return mc.IsPlayerCtrlCharactor();
                }));
                this.ShowTargetSelect(null, "");
                if (ModelManager.get_BattleDemo().get_isAIManagement() == false){
                    ProxyBattleDemoModule.HideSkillSelect();
                }
                this._battleLaunchTimer.Hide();
                this.ShowTip(null);
                this.ShowRoundWating(true);
                this.UpdateBattleButtonView();
                MonsterManager.get_Instance().HideSelectEffect();
                this.get_BattleSkillPointController().UpdateSkillPointUI$$Boolean(false);
            }
            else if (stat == BattleDemoModel.BattleSceneStat.GAME_OVER){
                GameDebuger.TODO("CheckIfMaxRoundReached();");
                GameDebuger.TODO("ModelManager.Pet.OverGameChangeNullPetInfo();");
            }
            else if (stat == BattleDemoModel.BattleSceneStat.ON_COMMAND_ENTER){
                this.get_BattleOptionController().HideAllButton(true);
                MonsterManager.get_Instance().HideSelectEffect();
            }
            else if (stat == BattleDemoModel.BattleSceneStat.ON_COMMAND_EXIT){
                this.get_BattleOptionController().HideAllButton(false);
                MonsterManager.get_Instance().ShowSelectEffect(ModelManager.get_BattleDemo().get_choosePet());
            }
        },
        OnActionRequestSuccess: function (){
            this.ShowRoundWating(true);
            this._battleLaunchTimer.Hide();
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.FINISH_COMMAND);
            if (ServiceRequestAction.SimulateNet)
                DemoSimulateHelper.SimulateRoundStart();
        },
        SwitchPet: function (soldier){
            GameDebuger.TODO("int count = CanCallBattlePetCount - GetOldBattlePetCount() - 1;\n\n        MonsterController oldPet = GetPlayerPet(soldier.playerId);\n        if (oldPet != null)\n        {\n            oldPet.LeaveBattle();\n        }\n\n        MonsterController.MonsterSide side = GetMonsterSide(soldier.playerId);\n        float yRotation = PLAYER_Y_Rotation;\n        if (side == MonsterController.MonsterSide.Enemy)\n        {\n            yRotation = ENEMY_Y_Rotation;\n        }\n\n        MonsterController mc = CreateMonster(soldier, yRotation,\n            BattlePositionCalculator.GetMonsterPosition(soldier, side), side);\n        mc.PlaySummonEffect();\n\n        mc.gameObject.name = mc.gameObject.name + \'_\' + soldier.id;\n\n        //触发宠物召唤喊话\n        BattleInstController .Instance.TriggerMonsterShount(mc.GetId(), ShoutConfig.BattleShoutTypeEnum_Summon, true);\n\n        if (soldier.playerId == ModelManager.Player.GetPlayerId())\n        {\n            if (count > 0)\n            {\n                TipManager.AddTip(string.Format(\'本场战斗还能召唤{0}只宠物\', count));\n            }\n\n            ModelManager.Pet.ChangeBattleTempPetByUID(soldier.id);\n\n            if (GetMyPet() != null)\n            {\n                SetDefaultSkillIcon(View.PetDefaultSkillSprite_UISprite, View.PetDefaultSkillIconGroup,\n                    View.PetDefaultSkillIcon_UISprite, View.PetDefaultSkillNameLabel_UILabel,\n                    GetMyPet().videoSoldier.defaultSkillId);\n\n                _lastPetSkillId = 0;\n                UpdateDefaultSkillIcon();\n            }\n        }");
        },
        SetDefaultSkillIcon: function (sprite, iconGroup, iconSprite, label, skillId){
            var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillId);
            if (null == skill){
                GameDebuger.LogError("SetDefaultSkillIcon failed , Skill is null ,skillId " + skillId.toString(), null);
                return;
            }
            sprite.get_gameObject().SetActive(false);
            iconGroup.SetActive(true);
            label.set_text(skill.name);
            UIHelper.SetSkillIcon(iconSprite, skill.icon, false);
        },
        IsNeedSynSettingVideo: function (){
            return ModelManager.get_BattleDemo()._gameVideo.needPlayerAutoBattle;
        },
        GetGameVideoId: function (){
            return ModelManager.get_BattleDemo()._gameVideo.id;
        },
        PlayGameVideo: function (){
            BattleInstController.get_Instance().PlayGameVideo(ModelManager.get_BattleDemo()._gameVideo);
        },
        ShowTeamMonsters: function (side){
            var videoTeam = null;
            if (side == MonsterController.MonsterSide.Player){
                videoTeam = ModelManager.get_BattleDemo()._gameVideo.ateam;
            }
            else {
                videoTeam = ModelManager.get_BattleDemo()._gameVideo.bteam;
            }
            this.CreateMonsters(videoTeam.teamSoldiers, side);
        },
        CreateMonsters: function (strikers, side){
            if (strikers == null || strikers.get_Count() <= 0)
                return false;
            var yRotation = 100 /* PLAYER_Y_Rotation */;
            if (side == MonsterController.MonsterSide.Enemy){
                yRotation = -80 /* ENEMY_Y_Rotation */;
            }
            var mcIndex = 1;
            for (var i = 0,len = strikers.get_Count(); i < len; i++){
                var soldier = strikers.get_Item$$Int32(i);
                if (this.ContainMonster(soldier.id) == false){
                    var mc = this.CreateMonster(soldier, yRotation, BattlePositionCalculator.GetMonsterPosition(soldier, side, 0), side);
                    mc.get_gameObject().set_name(mc.get_gameObject().get_name() + "_" + mcIndex);
                    mcIndex++;
                }
            }
            return true;
        },
        CreateMonster: function (monsterData, yRotation, position, side){
            var go = new UnityEngine.GameObject.ctor();
            var mc = go.AddComponent$1(MonsterController.ctor);
            if (UnityEngine.Object.op_Equality(mc, null)){
                GameDebuger.Log("Add MonsterController component failed!!!!", null);
                return null;
            }
            GameObjectExt.AddPoolChild(LayerManager.get_Root().BattleActors, go, 0, 0, 0);
            mc.get_transform().set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, yRotation, 0));
            mc.get_transform().set_localScale(UnityEngine.Vector3.get_one());
            mc.get_transform().set_localPosition(position);
            GameDebuger.TODO("NpcAppearanceDto npcAppearanceDto = null;\n\n        if (ModelManager.BattleDemo._gameVideo is NpcMonsterVideo)\n        {\n            npcAppearanceDto = (ModelManager.BattleDemo._gameVideo as NpcMonsterVideo).npcAppearanceDto;\n            if (npcAppearanceDto != null && npcAppearanceDto.soldierId != monsterData.id)\n            {\n                npcAppearanceDto = null;\n            }\n        }");
            var showFashion = true;
            GameDebuger.TODO("var pvpVideo = ModelManager.BattleDemo._gameVideo as PvpVideo;\n        if (pvpVideo != null && pvpVideo.type == PvpVideo.PvpTypeEnum_Challenge)\n        {\n            showFashion = false;\n        }");
            GameDebuger.TODO("mc.InitMonster(monsterData, side, npcAppearanceDto, showFashion);");
            mc.InitMonster(monsterData, side, showFashion);
            GameDebuger.Log(mc.GetDebugInfo(), null);
            if (mc.IsPlayerPet()){
                this.AddOldBattlePetList(mc.GetId());
            }
            MonsterManager.get_Instance().AddMonsterController(mc);
            return mc;
        },
        RemoveMonster: function (mc){
            MonsterManager.get_Instance().RemoveMonsterController(mc);
            if (mc.IsPlayerPet()){
                this.AddOldBattlePetList(mc.GetId());
            }
            this.UpdateBattleButtonView();
        },
        AddOldBattlePetList: function (id){
            if (this._oldBattlePetList.Contains(id) == false){
                this._oldBattlePetList.Add(id);
            }
        },
        IsPlayerTeamLeaderId: function (playerId){
            return this.ContainPlayer$$List$1$VideoSoldier$$Int64(ModelManager.get_BattleDemo()._gameVideo.ateam.teamSoldiers, playerId);
        },
        ContainMonster: function (id){
            var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(id);
            return UnityEngine.Object.op_Inequality(mc, null);
        },
        ContainPlayer$$Int64: function (pPlayerId){
            return this.ContainPlayer$$List$1$VideoSoldier$$Int64(ModelManager.get_BattleDemo()._gameVideo.ateam.teamSoldiers, pPlayerId) || this.ContainPlayer$$List$1$VideoSoldier$$Int64(ModelManager.get_BattleDemo()._gameVideo.bteam.teamSoldiers, pPlayerId);
        },
        ContainPlayer$$List$1$VideoSoldier$$Int64: function (pBattleEntities, pPlayerId){
            if (null == pBattleEntities || pBattleEntities.get_Count() <= 0 || pPlayerId <= 0)
                return false;
            var tVideoSoldier;
            for (var tCounter = 0; tCounter < pBattleEntities.get_Count(); tCounter++){
                tVideoSoldier = pBattleEntities.get_Item$$Int32(tCounter);
                if (null != tVideoSoldier && tVideoSoldier.id == pPlayerId)
                    return true;
            }
            return false;
        },
        RegistCustomEvent: function (){
            GameEventCenter.AddListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_FIGHT_CHOOSETARGETPET, $CreateDelegate(this, this.ChooseTargetPetHandler));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, $CreateDelegate(this, this.SetBattleStat));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_FIGHT_REMOVEMONSTER, $CreateDelegate(this, this.RemoveMonster));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_FIGHT_EXIT_BATTLE_WITHOUT_REPORT, $CreateDelegate(this, this.ExitBattleWithoutReport));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_FIGHT_EXITBATTLE, $CreateDelegate(this, this.ExitBattle));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SET_READY_STATE, $CreateDelegate(this, this.SetReadyState));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_FIGHT_CHECKGAMESTATE, $CreateDelegate(this, this.CheckGameState));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_FIGHT_DESTROY, $CreateDelegate(this, this.Destory));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(AppDto.VideoRound.ctor, GameEvent.BATTLE_FIGHT_VIDEOROUND, $CreateDelegate(this, this.UpdateBattleRound$$VideoRound));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int32.ctor, GameEvent.BATTLE_FIGHT_BATTLE_ROUND_PLAY_FINISH, $CreateDelegate(this, this.BattleRoundPlayFinish));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.String.ctor, GameEvent.BATTLE_UI_SHOW_TIP, $CreateDelegate(this, this.ShowTip));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, $CreateDelegate(this, this.CheckBattleOver));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW, $CreateDelegate(this, this.UpdateBattleButtonView));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_UI_EXIT_BATTLE, $CreateDelegate(this, this.ExitBattle));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK, $CreateDelegate(this, this.OnCancelButtonClick));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_UI_ACTION_REQUEST_SUCCESS, $CreateDelegate(this, this.OnActionRequestSuccess));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL, $CreateDelegate(this, this.OnHideAutoRoundTimeLabel));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_AUTO_BTN_STATUS_CHANGE, $CreateDelegate(this, this.OnAutoBtnStatusChange));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Collections.Generic.List$1.ctor, GameEvent.BATTLE_FIGHT_RETREAT_BATTLE, $CreateDelegate(this, this.RetreatBattle));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(AppDto.Skill.ctor, System.String.ctor, GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, $CreateDelegate(this, this.ShowTargetSelect));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(AppDto.Skill.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_SHOW_SKILL_TIP, $CreateDelegate(this, this.OnShowSkillTip));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RetreatButton_UIButton.onClick, $CreateDelegate(this, this.OnRetreatButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CancelButton_UIButton.onClick, $CreateDelegate(this, this.OnCancelButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().AutoButton_UIButton.onClick, $CreateDelegate(this, this.OnAutoButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ManualButton_UIButton.onClick, $CreateDelegate(this, this.OnManualButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnCommand_UIButton.onClick, $CreateDelegate(this, this.OnBtnCommandClick));
        },
        RemoveEvent: function (){
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_FIGHT_CHOOSETARGETPET, $CreateDelegate(this, this.ChooseTargetPetHandler));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, $CreateDelegate(this, this.SetBattleStat));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_FIGHT_REMOVEMONSTER, $CreateDelegate(this, this.RemoveMonster));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_FIGHT_EXIT_BATTLE_WITHOUT_REPORT, $CreateDelegate(this, this.ExitBattleWithoutReport));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_FIGHT_EXITBATTLE, $CreateDelegate(this, this.ExitBattle));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SET_READY_STATE, $CreateDelegate(this, this.SetReadyState));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_FIGHT_CHECKGAMESTATE, $CreateDelegate(this, this.CheckGameState));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_FIGHT_DESTROY, $CreateDelegate(this, this.Destory));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(AppDto.VideoRound.ctor, GameEvent.BATTLE_FIGHT_VIDEOROUND, $CreateDelegate(this, this.UpdateBattleRound$$VideoRound));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int32.ctor, GameEvent.BATTLE_FIGHT_BATTLE_ROUND_PLAY_FINISH, $CreateDelegate(this, this.BattleRoundPlayFinish));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.String.ctor, GameEvent.BATTLE_UI_SHOW_TIP, $CreateDelegate(this, this.ShowTip));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, $CreateDelegate(this, this.CheckBattleOver));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW, $CreateDelegate(this, this.UpdateBattleButtonView));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_UI_EXIT_BATTLE, $CreateDelegate(this, this.ExitBattle));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK, $CreateDelegate(this, this.OnCancelButtonClick));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_UI_ACTION_REQUEST_SUCCESS, $CreateDelegate(this, this.OnActionRequestSuccess));
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL, $CreateDelegate(this, this.OnHideAutoRoundTimeLabel));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_AUTO_BTN_STATUS_CHANGE, $CreateDelegate(this, this.OnAutoBtnStatusChange));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Collections.Generic.List$1.ctor, GameEvent.BATTLE_FIGHT_RETREAT_BATTLE, $CreateDelegate(this, this.RetreatBattle));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(AppDto.Skill.ctor, System.String.ctor, GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, $CreateDelegate(this, this.ShowTargetSelect));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(AppDto.Skill.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_SHOW_SKILL_TIP, $CreateDelegate(this, this.OnShowSkillTip));
        },
        OnDispose: function (){
            ProxyTipsModule.CloseSkillTips();
            if (UnityEngine.Object.op_Inequality(null, this.mEffectForManualBtn)){
                this.mEffectForManualBtn.Dispose();
                this.mEffectForManualBtn = null;
            }
            this.RemoveEvent();
        },
        OnShowSkillTip: function (pSkill, pShow){
            if (pShow){
                if (null == pSkill)
                    return;
                ProxyTipsModule.ShowSkillTips$$Object$$GameObject$$String(pSkill, this.get_View().CntrSkillTip, "");
            }
            else
                ProxyTipsModule.CloseSkillTips();
        },
        ShowRoundWating: function (show){
            this.get_View().RoundWatingSprite.get_gameObject().SetActive(show);
        },
        GetHeroBattlePlayerInfo: function (){
            if (ModelManager.get_BattleDemo()._gameVideo.playerInfos != null){
                for (var i = 0,len = ModelManager.get_BattleDemo()._gameVideo.playerInfos.get_Count(); i < len; i++){
                    var info = ModelManager.get_BattleDemo()._gameVideo.playerInfos.get_Item$$Int32(i);
                    if (info.playerId == ModelManager.get_Player().GetPlayerId()){
                        return info;
                    }
                }
            }
            return null;
        },
        InitBattleLaunchTimer: function (){
            this._battleLaunchTimer = GameObjectExt.GetMissingComponent$1(BattleLaunchTimer.ctor, this.get_View().RoundTimeLabel_UILabel.get_gameObject());
            this._battleLaunchTimer.autoRoundTimeLabel = this.get_BattleOptionController().get_autoRoundTimeLabel();
            GameDebuger.TODO("if (!mIsWatchMode && !_guideBattle)");
            this._battleLaunchTimer.add_OnAutoTimeFinish($CreateDelegate(this, this.HandleOnAutoTimeFinish));
            this._battleLaunchTimer.add_OnFinishedDelegate($CreateDelegate(this, this.OnLaunchTimeFinishDelegate));
        },
        AdjustGameContingent: function (){
            GameDebuger.TODO("if (mIsWatchMode)\n        {\n            if (ModelManager.BattleDemo._gameVideo.bteam.id == _watchTeamId)\n            {\n                VideoTeam temp = ModelManager.BattleDemo._gameVideo.ateam;\n                ModelManager.BattleDemo._gameVideo.ateam = ModelManager.BattleDemo._gameVideo.bteam;\n                ModelManager.BattleDemo._gameVideo.bteam = temp;\n            }\n        }\n        else");
            var playerId = ModelManager.get_Player().GetPlayerId();
            if (this.ContainPlayer$$List$1$VideoSoldier$$Int64(ModelManager.get_BattleDemo()._gameVideo.bteam.teamSoldiers, playerId)){
                var temp = ModelManager.get_BattleDemo()._gameVideo.ateam;
                ModelManager.get_BattleDemo()._gameVideo.ateam = ModelManager.get_BattleDemo()._gameVideo.bteam;
                ModelManager.get_BattleDemo()._gameVideo.bteam = temp;
            }
            GameDebuger.TODO("if (ModelManager.BattleDemo._gameVideo.ateam.formation == null)\n        {\n            GameDebuger.LogError(\'ateam阵法设置为null， 请联系服务器端检查，此处强行设置阵型为1\');\n            ModelManager.BattleDemo._gameVideo.ateam.formationId = 1;\n        }\n\n        if (ModelManager.BattleDemo._gameVideo.bteam.formation == null)\n        {\n            GameDebuger.LogError(\'bteam阵法设置为null， 请联系服务器端检查，此处强行设置阵型为1\');\n            ModelManager.BattleDemo._gameVideo.bteam.formationId = 1;\n        }");
            ModelManager.get_BattleDemo()._gameVideo.ateam.teamSoldiers.Sort$$Comparison$1($CreateDelegate(this, this.OnVideoSoldierSort));
            ModelManager.get_BattleDemo()._gameVideo.bteam.teamSoldiers.Sort$$Comparison$1($CreateDelegate(this, this.OnVideoSoldierSort));
            GameDebuger.TODO("if (ModelManager.BattleDemo._gameVideo is PvpVideo && ((PvpVideo)ModelManager.BattleDemo._gameVideo).type == PvpVideo.PvpTypeEnum_Arena /**&& !mIsWatchMode*/)\n        {\n            VideoSoldier leader = GetTeamLeader(ModelManager.BattleDemo._gameVideo.enemyTeam);\n            if (leader != null)\n            {\n                string nameStr = string.Format(\'{0}（{1}级）\', leader.name, leader.level);\n                nameStr = nameStr.WrapColor(ColorConstantV3.Color_Green);\n                TipManager.AddTip(string.Format(\'你进入了与{0}的切磋战斗\', nameStr));\n            }\n        }");
        },
        GetTeamLeader: function (team){
            GameDebuger.TODO("for (int i = 0; i < team.fighters.Count; i++)\n        {\n            VideoSoldier videoSoldier = team.fighters[i];\n            if ((GeneralCharactor.CharactorType)videoSoldier.charactorType == GeneralCharactor.CharactorType.MainCharactor &&\n                videoSoldier.id == videoSoldier.leaderPlayerId)\n            {\n                return videoSoldier;\n            }\n        }");
            return null;
        },
        OnVideoSoldierSort: function (x, y){
            if (x.position > y.position){
                return 1;
            }
            if (x.position < y.position){
                return -1 /* -1 */;
            }
            return 0;
        },
        ExitBattle: function (){
            if (this._waitingExit){
                return;
            }
            if (ModelManager.get_BattleDemo()._isGameOver == false){
                GameDebuger.TODO("if (mIsWatchMode)\n            {\n                ServiceRequestAction.requestServer(CommandService.exitWatchBattle(_gameVideo.id));\n            }\n            else");
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_Leave(ModelManager.get_BattleDemo()._gameVideo.id), "", null, null);
            }
            this._waitingExit = true;
            this._battleNetworkHandler.StopNotifyListener();
            this._Result = BattleDemoController.BattleResult.NoResult;
            BattleInstController.get_Instance().ShowBattleResult();
        },
        ExitBattleWithoutReport: function (){
            this._waitingExit = true;
            this.OnFinishFadeOut();
        },
        OnFinishFadeOut: function (){
            GameDebuger.TODO("if (_guideBattle)\n        {\n            TalkingDataHelper.OnEventSetp(\'StartBattle\', \'End\');\n        }");
            this.Destory();
            BattleManager.get_Instance().BattleDestroy(this._Result, this._isDead, ModelManager.get_BattleDemo()._gameVideo);
        },
        CheckGameState: function (){
            GameDebuger.Log("CheckGameState " + ModelManager.get_BattleDemo().get_battleState(), null);
            if (ModelManager.get_BattleDemo()._isGameOver && ModelManager.get_BattleDemo().get_battleState() != BattleDemoModel.BattleSceneStat.GAME_OVER){
                this.HideBattleUI();
                GameDebuger.Log("Game Over", null);
                this.SetBattleStat(BattleDemoModel.BattleSceneStat.GAME_OVER);
                this.CheckResult();
                this.ShowBattleReport();
            }
            else {
                ModelManager.get_BattleDemo()._lockUI = false;
                this.CheckNextRound();
            }
        },
        CheckNextRound: function (){
            MonsterManager.get_Instance().UpdateBuffState();
            GameDebuger.TODO("UpdateMagicManaInRoundStart();");
            GameEventCenter.SendEvent$1$$Event$1$$T(System.Int32.ctor, GameEvent.BATTLE_FIGHT_BATTLE_ROUND_PLAY_FINISH, BattleInstController.get_Instance().get__playRoundIndex());
            BattleInstController.get_Instance().CheckNextRound();
        },
        CheckResult: function (){
            if (this._Result == BattleDemoController.BattleResult.NULL){
                this._Result = this.IsPlayerTeamLeaderId(this._winId) ? BattleDemoController.BattleResult.WIN : BattleDemoController.BattleResult.LOSE;
            }
            var myHero = MonsterManager.get_Instance().GetMyHero();
            if (UnityEngine.Object.op_Equality(myHero, null) || myHero.IsDead()){
                this._isDead = true;
            }
            else {
                this._isDead = false;
            }
        },
        BattleRoundPlayFinish: function (round){
            GameDebuger.TODO("if (_readyRound > round || _guideBattle)\n        {\n            SetReadyState(null);\n        }\n        else");
            var tPreFinishActionUID = ModelManager.get_BattleDemo().PreFinishedActionPlayerUID();
            if (tPreFinishActionUID <= 0){
                GameDebuger.LogError("Get PreFinishedActionPlayerUID failed !", null);
                return;
            }
            BattleNetworkManager.get_Instance().HandlerSoldierReadyNotify$$Int64$$Int64$$Single$$Boolean(ModelManager.get_BattleDemo()._gameVideo.id, tPreFinishActionUID, ModelManager.get_BattleDemo().get_CommonCD(), true);
            BattleInstController.get_Instance().RemoveRound(BattleInstController.get_Instance().get__playRound().id);
            if (ServiceRequestAction.SimulateNet){
                if (BattleInstController.get_Instance().get__playRoundIndex() == BattleInstController.get_Instance().get__videoRounds().get_Count()){
                    GameDebuger.LogError(System.String.Format$$String$$Object$$Object("[单机/非错误]模拟大回合开始，_playRoundIndex：{0}，_videoRounds.Count：{1}", BattleInstController.get_Instance().get__playRoundIndex(), BattleInstController.get_Instance().get__videoRounds().get_Count()), null);
                    DemoSimulateHelper.SimulateRoundStart();
                }
            }
            if (!ModelManager.get_BattleDemo().IsPlayerMyHeroOrPet(tPreFinishActionUID))
                return;
            GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, tPreFinishActionUID, ModelManager.get_BattleDemo().get_CommonCD(), ModelManager.get_BattleDemo().get_CommonCD());
            this.ShowRoundWating(true);
            this.SetBattleStat(BattleDemoModel.BattleSceneStat.ON_WAITING);
            this.AddOrResetCDTask(System.String.Format$$String$$Object("BATTLE_SKILL_COMMMON_CD_COOLDOWN_ID_{0}" /* SKILL_COMMMON_CD_COOLDOWN */, tPreFinishActionUID), ModelManager.get_BattleDemo().get_CommonCD(), $CreateAnonymousDelegate(this, function (pRemain){
                ModelManager.get_BattleDemo().CurrentCommonCDLeft = pRemain;
            }), $CreateAnonymousDelegate(this, function (){
                ModelManager.get_BattleDemo().CurrentCommonCDLeft = 0;
                GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SET_READY_STATE, false);
                MonsterManager.get_Instance().UpdateOptionState(tPreFinishActionUID, MonsterOptionStateManager.MonsterOptionState.Enable);
            }), 0.1, false);
            GameDebuger.TODO("ServiceRequestAction.requestServer(CommandService.roundReady(_gameVideo.id));");
        },
        SetReadyState: function (pIsBattleStartedJustNow){
            ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.HERO;
            if (pIsBattleStartedJustNow)
                this.UpdateBattleLaunchTimer();
            this.ShowRoundWating(false);
            GameDebuger.TODO("if (!mIsWatchMode)\n            {\n                MonsterManager.Instance.UpdateMonsterNeedReadyLogic(_guideBattle);\n            }");
            MonsterManager.get_Instance().UpdateMonsterNeedReadyLogic(false);
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.BATTLE_READY);
            GameDebuger.TODO("UpdateBattleRound(_battleRound + 1);");
            this.UpdateBattleRound$$Int32(BattleInstController.get_Instance().get__playRoundIndex());
        },
        UpdateBattleLaunchTimer: function (){
            GameDebuger.TODO("if (!_guideBattle)");
            GameDebuger.TODO("if (ModelManager.BattleDemo._gameVideo.currentRoundCommandOptRemainSec != 0)\n                {\n                    _battleLaunchTimer.LaunchTimer(ModelManager.BattleDemo._gameVideo.currentRoundCommandOptRemainSec, ModelManager.BattleDemo._gameVideo.cancelAutoSec,\n                        ModelManager.BattleDemo.isAIManagement);\n                    ModelManager.BattleDemo._gameVideo.currentRoundCommandOptRemainSec = 0;\n                }\n                else");
            var tReadyTimeInSec = ((ModelManager.get_BattleDemo()._gameVideo.readyTime / 1000) | 0);
            this._battleLaunchTimer.LaunchTimer(tReadyTimeInSec, tReadyTimeInSec, ModelManager.get_BattleDemo().get_isAIManagement());
        },
        Destory: function (){
            ModelManager.get_BattleDemo().Dispose();
            BattleStatusEffectManager.get_Instance().Dispose();
            LoginManager.get_Instance().remove_OnReloginSuccess($CreateDelegate(this, this.HandleOnReloginSuccess));
            GameDebuger.TODO("if (IsNeedSynSettingVideo())\n        {\n            ModelManager.SystemData.SaveAutoFramToggle(ModelManager.BattleDemo.isAIManagement);\n        }");
            this._battleNetworkHandler.StopNotifyListener();
            ProxyBattleDemoModule.CloseSkillSelect();
            ProxyMainUIModule.CloseBattleBuffTipsView();
            ProxyBattleDemoModule.CloseBattleOrderListView();
            ProxyBattleDemoModule.Close();
            MonsterManager.get_Instance().DisposeMonsterList();
            this.ResetCamera();
            AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(false);
            if (UnityEngine.Object.op_Inequality(this._battleLaunchTimer, null)){
                this._battleLaunchTimer.remove_OnAutoTimeFinish($CreateDelegate(this, this.HandleOnAutoTimeFinish));
                this._battleLaunchTimer.remove_OnFinishedDelegate($CreateDelegate(this, this.OnLaunchTimeFinishDelegate));
                this._battleLaunchTimer.DestroyIt();
            }
            BattleActionPlayerPoolManager.get_Instance().Dispose();
        },
        DestroyBattle: function (){
            this._waitingExit = true;
            this._battleNetworkHandler.StopNotifyListener();
            this.AddOrResetCDTask("DelayDestroyBattle", 0.5, null, $CreateDelegate(this, this.DelayDestroyBattle), 0.1, false);
        },
        DelayDestroyBattle: function (){
            GameDebuger.TODO("if (_guideBattle)\n        {\n            //TalkingDataHelper.OnEventSetp(\'StartBattle\', \'End\');\n        }");
            BattleManager.get_Instance().BattleDestroy(this._Result, this._isDead, ModelManager.get_BattleDemo()._gameVideo);
        },
        HandleOnReloginSuccess: function (){
            LoginManager.get_Instance().remove_OnReloginSuccess($CreateDelegate(this, this.HandleOnReloginSuccess));
            this.ExitBattle();
        },
        ResetCamera: function (){
            LayerManager.get_Root().SceneCameraAnimator.set_enabled(false);
        },
        HandleOnAutoTimeFinish: function (){
            if (ModelManager.get_BattleDemo().get_isAIManagement()){
                this.OnAutoButtonClick();
            }
        },
        OnLaunchTimeFinishDelegate: function (){
            GameDebuger.TODO("ModelManager.BattleDemo.isAIManagement = true;\n        OnAutoButtonClick();");
        },
        ShowTargetSelect: function (skill, pTipContent){
            if (skill == null){
                GameDebuger.Log("ShowTargetSelect , TargetSelectSprite_UISprite SetActive false , because skill == null !", null);
                this.get_View().TargetSelectSprite.SetActive(false);
            }
            else {
                UIHelper.SetPetIcon(this.get_View().SpriteHead_UISprite, ModelManager.get_BattleDemo().get_choosePet().videoSoldier.get_charactor().texture.toString(), false);
                this.get_View().SkillNameLabel_UILabel.set_text(skill.name);
                this.get_View().TargetSelectSprite.SetActive(true);
                this.get_View().SelectTipLabel_UILabel.set_text(pTipContent);
            }
        },
        ShowTip: function (tip){
            if (System.String.IsNullOrEmpty(tip)){
                this.get_View().TipSprite.SetActive(false);
            }
            else {
                this.get_View().TipLabel_UILabel.set_text(tip);
                this.get_View().TipSprite.SetActive(true);
            }
        },
        ShowBattleUI: function (){
            this.get_BattleFormationController().ShowFormationInfo(MonsterController.MonsterSide.None);
            this.get_BattleFormationController().UpdateIcon$$Int32$$Int32(ModelManager.get_BattleDemo()._gameVideo.ateam.formationId, ModelManager.get_BattleDemo()._gameVideo.bteam.formationId);
            GameDebuger.TODO("ShowMonsterStatus(null);");
            this.UpdateBattleButtonView();
            this.ShowTip("");
            this.ShowTargetSelect(null, "");
            this.ShowRoundWating(false);
            this.UpdateBattleRound$$VideoRound(null);
            GameDebuger.TODO("if (mIsWatchMode)\n        {\n            BattleOptionController.UpdateExitBtnStatus(true);\n            View.BottomRightAnchor_Transform.gameObject.SetActive(false);\n            View.BottomButtonGrid_UIGrid.gameObject.SetActive(false);\n        }\n        else");
            this.get_BattleOptionController().UpdateExitBtnStatus(false);
            this.get_BattleOptionController().UpdateOptionRole(ModelManager.get_Player().GetPlayerId());
            this.get_BattleSkillPointController().UpdateData(ModelManager.get_Player().GetPlayerId());
        },
        UpdateBattleRound$$VideoRound: function (videoRound){
            if (videoRound != null){
                GameDebuger.TODO("_battleRound = videoRound.count;");
                this._winId = videoRound.winId;
                ModelManager.get_BattleDemo()._isGameOver = videoRound.over;
            }
            GameDebuger.TODO("int showRound = _battleRound == 0 ? 1 : _battleRound;\n        UpdateBattleRound(showRound);");
            if (BattleInstController.get_Instance().get__playRoundIndex() == 1)
                this.get_BattleSkillPointController().UpdateSkillPointUI$$Boolean(true);
            this.UpdateBattleRound$$Int32(BattleInstController.get_Instance().get__playRoundIndex());
            this._battleLaunchTimer.Hide();
            this.ShowRoundWating(false);
            GameDebuger.TODO("CheckRoundMonsterShout();\n        if (_battleRound == 3 && IsGuideHeroAndPetBattle())\n        {\n            UIModuleManager.Instance.SendOpenEvent(GuideAutoSkillSetting, this);\n        }");
        },
        UpdateBattleRound$$Int32: function (round){
            round = round <= 0 ? 1 : round;
            this.get_View().RoundLabel_UILabel.set_text(round.toString());
        },
        OnAutoButtonClick: function (){
            GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_UI_BTN_AUTO_CLICKED, true);
        },
        OnManualButtonClick: function (){
            GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_UI_BTN_AUTO_CLICKED, false);
        },
        OnAutoBtnStatusChange: function (pBtnAutoVisible){
            this.get_View().AutoButton_UIButton.get_gameObject().SetActive(pBtnAutoVisible);
            this.get_View().ManualButton_UIButton.get_gameObject().SetActive(!pBtnAutoVisible);
            this.ShowManualEffect(!pBtnAutoVisible);
        },
        OnBtnCommandClick: function (){
            ProxyBattleDemoModule.OpenBattleOrderListView(1, ModelManager.get_Player().GetPlayerId(), $CreateAnonymousDelegate(this, function (pBattleOrderInfo){
                if (null == pBattleOrderInfo)
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK);
                else
                    this.get_BattleOptionController().UseSpecialSkill(BattleManager.GetCommandSkillId(), pBattleOrderInfo.orderName, 0, 0, "请选择指挥标记目标", pBattleOrderInfo);
            }));
        },
        OnCancelButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            var skillId = ModelManager.get_BattleDemo().get_choosePet().GetBattleTargetSelector().GetSkillId();
            this.ShowTargetSelect(null, "");
            this.ShowTip(null);
            if (skillId != BattleManager.GetNormalAttackSkillId() && skillId != BattleManager.GetProtectSkillId() && skillId != BattleManager.GetCaptureSkillId() && skillId != BattleManager.GetUseItemSkillId() && skillId != BattleManager.GetCommandSkillId()){
                var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillId);
                GameDebuger.TODO("if (skill is EquipmentSkill)\n            {\n                BattleOptionController.OnStuntButtonClick();\n            }\n            else");
                this.get_BattleOptionController().OnSkillButtonClick();
                GameDebuger.TODO("else if (skill is MagicEquipmentSkill)\n            {\n                OnMagicEquipButtonClick();\n            }");
            }
            else {
                GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.BATTLE_READY);
            }
        },
        OnRetreatButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            GameDebuger.TODO("if (ModelManager.BattleDemo._gameVideo is PvpVideo && ModelManager.BattleDemo.actionState == BattleDemoModel.ActionState.HERO)\n        {\n            if ((ModelManager.BattleDemo._gameVideo as PvpVideo).type == PvpVideo.PvpTypeEnum_Challenge)\n            {\n                ProxyWindowModule.OpenConfirmWindow(\'在竞技场中逃跑视为战败，确定要逃跑吗？\', \'\', delegate\n                    {\n                        DoRetreatButtonClick();\n                    });\n                return;\n            }\n        }");
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO && !this._retreatTipFlag){
                ProxyWindowModule.OpenConfirmWindow("逃跑会导致战斗失败，是否继续逃跑？", "", $CreateAnonymousDelegate(this, function (){
                    this._retreatTipFlag = true;
                    this.DoRetreatButtonClick();
                }), null, 3, null, null, 0, true, false);
                return;
            }
            this.DoRetreatButtonClick();
        },
        DoRetreatButtonClick: function (){
            if (!ModelManager.get_BattleDemo().CanUseCommand(ModelManager.get_BattleDemo().get_choosePet(), true)){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            this.get_BattleOptionController().CancelAutoButton();
            var requestInfo = AppServices.Services.Battle_Escape(ModelManager.get_BattleDemo()._gameVideo.id);
            var waitNextAction = ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO && UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyPet(), null);
            ModelManager.get_BattleDemo()._lockUI = true;
            if (waitNextAction){
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    this.EscapeWithWaitNextActionCallBack();
                }), $CreateAnonymousDelegate(this, function (e){
                    this.CheckBattleOver(e);
                }));
            }
            else {
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    this.EscapeWithNoWaitNextActionCallBack();
                }), $CreateAnonymousDelegate(this, function (e){
                    this.CheckBattleOver(e);
                }));
            }
        },
        RetreatBattle: function (playerId, retreatSoldiers){
            if (playerId == ModelManager.get_Player().GetPlayerId()){
                this._winId = 0;
                ModelManager.get_BattleDemo()._isGameOver = true;
                this._Result = BattleDemoController.BattleResult.Retreat;
                this.HideBattleUI();
                this.SetBattleStat(BattleDemoModel.BattleSceneStat.GAME_OVER);
                this.RetreatOtherMonster(retreatSoldiers, true);
            }
            else {
                this.RetreatOtherMonster(retreatSoldiers, false);
            }
        },
        RetreatOtherMonster: function (retreatSoldiers, exitBattle){
            var count = 0;
            if (retreatSoldiers != null){
                for (var i = 0,len = retreatSoldiers.get_Count(); i < len; i++){
                    var retreatSoldier = retreatSoldiers.get_Item$$Int32(i);
                    var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(retreatSoldier);
                    if (UnityEngine.Object.op_Inequality(mc, null)){
                        if (mc.IsCrew() || mc.IsMonster() || (mc.IsPet() && mc.IsDead())){
                            mc.RetreatFromBattle(MonsterController.RetreatMode.Flash, 0.5 * count);
                            count++;
                        }
                        else {
                            mc.RetreatFromBattle(MonsterController.RetreatMode.Normal, 0);
                        }
                    }
                }
            }
            if (count > 0){
                if (exitBattle){
                    this.AddOrResetCDTask("DestroyBattle", 0.5 * count, null, $CreateDelegate(this, this.DestroyBattle), 0.1, false);
                }
                else {
                    this.AddOrResetCDTask("AfterRetreatOtherMonster", 0.5 * count, null, $CreateDelegate(this, this.AfterRetreatOtherMonster), 0.1, false);
                }
            }
            else {
                if (exitBattle){
                    this.DestroyBattle();
                }
                else {
                    this.AfterRetreatOtherMonster();
                }
            }
        },
        AfterRetreatOtherMonster: function (){
            BattleInstController.get_Instance().CheckFinish();
        },
        EscapeWithWaitNextActionCallBack: function (){
            ModelManager.get_BattleDemo()._lockUI = false;
            ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
            ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.PET;
            this.SetBattleStat(BattleDemoModel.BattleSceneStat.BATTLE_READY);
        },
        EscapeWithNoWaitNextActionCallBack: function (){
            ModelManager.get_BattleDemo()._lockUI = false;
            if (UnityEngine.Object.op_Equality(null, ModelManager.get_BattleDemo().get_choosePet()))
                GameDebuger.LogError("战斗数据有误，没有已选操作对象！", null);
            else
                ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
            this.OnActionRequestSuccess();
        },
        BattleSkillPointController$$: "BattleSkillPointController",
        get_BattleSkillPointController: function (){
            if (null == this.mBattleSkillPointController){
                this.mBattleSkillPointController = this.AddCachedChild$2$$GameObject$$String$$String(BattleSkillPointController.ctor, BattleSkillPointView.ctor, this.get_View().PositionSkillPointUI, "BattleSkillPointView" /* BattleSkillPointView.NAME */, "");
            }
            return this.mBattleSkillPointController;
        },
        BattleActionQueueController$$: "BattleActionQueueController",
        get_BattleActionQueueController: function (){
            if (null == this.mBattleActionQueueController){
                this.mBattleActionQueueController = this.AddCachedChild$2$$GameObject$$String$$String(BattleActionQueueController.ctor, BattleActionQueueView.ctor, this.get_View().CntrTopProgress, "BattleActionQueueView" /* BattleActionQueueView.NAME */, "");
            }
            return this.mBattleActionQueueController;
        },
        BattleOptionController$$: "BattleOptionController",
        get_BattleOptionController: function (){
            if (null == this.mBattleOptionController)
                this.mBattleOptionController = this.AddCachedChild$2$$GameObject$$String$$String(BattleOptionController.ctor, BattleOptionView.ctor, this.get_View().CntrOption, "BattleOptionView" /* BattleOptionView.NAME */, "");
            return this.mBattleOptionController;
        },
        UpdateBattleButtonView: function (){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            GameDebuger.TODO("if (!mIsWatchMode)");
            this.get_BattleOptionController().SetAutoMode(ModelManager.get_BattleDemo().get_isAIManagement(), ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.ON_PROGRESS, ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.FINISH_COMMAND, ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.ON_COMMAND_ENTER, ModelManager.get_BattleDemo().actionState);
            GameDebuger.TODO("if (_guideBattle && ModelManager.BattleDemo.battleState == BattleDemoModel.BattleSceneStat.ON_PROGRESS)\n        {\n            View.Anchor_BottomRight_Transform.gameObject.SetActive(false);\n        }\n        else");
            this.get_View().Anchor_BottomRight.SetActive(true);
        },
        OnHideAutoRoundTimeLabel: function (){
            this._battleLaunchTimer.HideAutoRoundTimeLabel();
        },
        BattleTotalDamageHealController$$: "BattleTotalDamageHealController",
        get_BattleTotalDamageHealController: function (){
            if (null == this.mBattleTotalDamageHealController)
                this.mBattleTotalDamageHealController = this.AddCachedChild$2$$GameObject$$String$$String(BattleTotalDamageHealController.ctor, BattleTotalDamageHealView.ctor, this.get_View().CntrDamageHealInfoUI, "BattleTotalDamageHealView" /* BattleTotalDamageHealView.NAME */, "");
            return this.mBattleTotalDamageHealController;
        },
        BattleFormationController$$: "BattleFormationController",
        get_BattleFormationController: function (){
            if (null == this.mBattleFormationController)
                this.mBattleFormationController = this.AddCachedChild$2$$GameObject$$String$$String(BattleFormationController.ctor, BattleFormationView.ctor, this.get_View().CntrFormation, "BattleFormationView" /* BattleFormationView.NAME */, "");
            return this.mBattleFormationController;
        },
        ShowManualEffect: function (pShow){
            if (pShow){
                if (UnityEngine.Object.op_Equality(null, this.mEffectForManualBtn))
                    this.mEffectForManualBtn = SurroundUIEffect.Begin("ui_eff_1007_03_Effect" /* GameEffectConst.EFFECT_SURROUND */, this._view.ManualButton_UIButton.get_sprite(), 4, false, 1, 1, null);
                else
                    this.mEffectForManualBtn.SetActive(true);
            }
            else {
                if (UnityEngine.Object.op_Equality(null, this.mEffectForManualBtn))
                    return;
                this.mEffectForManualBtn.SetActive(false);
            }
        }
    }
};
JsTypes.push(BattleDemoController);
var BattleFormationController = {
    fullname: "BattleFormationController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, BattleFormationView.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PlayerFormationIconButton_UIButton.onClick, $CreateDelegate(this, this.OnPlayerFormationClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().EnemyFormationIconButton_UIButton.onClick, $CreateDelegate(this, this.OnEnemyFormationClick));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(MonsterController.MonsterSide.ctor, GameEvent.BATTLE_UI_SHOW_FORMATION, $CreateDelegate(this, this.ShowFormationInfo));
        },
        RemoveCustomEvent: function (){
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(MonsterController.MonsterSide.ctor, GameEvent.BATTLE_UI_SHOW_FORMATION, $CreateDelegate(this, this.ShowFormationInfo));
        },
        OnPlayerFormationClick: function (){
            this.ShowFormationInfo(MonsterController.MonsterSide.Player);
        },
        OnEnemyFormationClick: function (){
            this.ShowFormationInfo(MonsterController.MonsterSide.Enemy);
        },
        UpdateData: function (){
        },
        UpdateIcon$$Int32$$Int32: function (pFormationA, pFormationB){
            this.UpdateIcon$$String$$String("formation_" + pFormationA.toString(), "formation_" + pFormationB.toString());
        },
        UpdateIcon$$String$$String: function (pIconA, pIconB){
            UIHelper.SetOtherIcon(this.get_View().PlayerFormationIconSprite_UISprite, pIconA, false);
            UIHelper.SetOtherIcon(this.get_View().EnemyFormationIconSprite_UISprite, pIconB, false);
        },
        ShowFormationInfo: function (side){
            MonsterManager.get_Instance().HideMonsterPosition();
            if (side != MonsterController.MonsterSide.Player && side != MonsterController.MonsterSide.Enemy){
                this.get_View().FormationGroup.SetActive(false);
                return;
            }
            var formation = this.GetFormation(side);
            var fromationGrade = this.GetFormationGrade(side);
            var sEffect = this.GetEffectStr(formation, fromationGrade);
            if (side == MonsterController.MonsterSide.Player){
                MonsterManager.get_Instance().ShowMonsterPosition(side, $CreateDelegate(this, this.GetFormation));
                this.get_View().FormationGroup.SetActive(true);
                this.get_View().FormationGroup_UISprite.set_pivot(0);
                this.get_View().FormationGroup_UIAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(140, 1);
                var enemyFormation = this.GetFormation(MonsterController.MonsterSide.Enemy);
                var debuffStr = "";
                var formationDebuff = this.GetFormationDebuffDic(formation);
                if (formationDebuff.ContainsKey(enemyFormation.id)){
                    debuffStr = AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object(" (克制+{0}%)", formationDebuff.get_Item$$TKey(enemyFormation.id) * 100), "0fff32");
                }
                if (debuffStr == ""){
                    formationDebuff = this.GetFormationDebuffDic(enemyFormation);
                    if (formationDebuff.ContainsKey(formation.id)){
                        debuffStr = AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object(" (被克制-{0}%)", formationDebuff.get_Item$$TKey(formation.id) * 100), "fd614c");
                    }
                }
                this.get_View().FormationInfoLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$String(formation.name, "0FFF32" /* ColorConstant.Color_Tip_Item_Str */) + debuffStr + "\n" + sEffect);
                this.get_View().FormationGroup_UIAnchor.Update();
                this.get_View().FormationInfoLabel_UILabel.UpdateAnchors();
            }
            else if (side == MonsterController.MonsterSide.Enemy){
                MonsterManager.get_Instance().ShowMonsterPosition(side, $CreateDelegate(this, this.GetFormation));
                this.get_View().FormationGroup.SetActive(true);
                this.get_View().FormationGroup_UISprite.set_pivot(2);
                this.get_View().FormationGroup_UIAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-130 /* -130f */, 1);
                var enemyFormation = this.GetFormation(MonsterController.MonsterSide.Player);
                var debuffStr = "";
                var formationDebuff = this.GetFormationDebuffDic(formation);
                if (formationDebuff.ContainsKey(enemyFormation.id)){
                    debuffStr = AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object(" (克制+{0}%)", formationDebuff.get_Item$$TKey(enemyFormation.id) * 100), "0fff32");
                }
                if (debuffStr == ""){
                    formationDebuff = this.GetFormationDebuffDic(enemyFormation);
                    if (formationDebuff.ContainsKey(formation.id)){
                        debuffStr = AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object(" (被克制-{0}%)", formationDebuff.get_Item$$TKey(formation.id) * 100), "fd614c");
                    }
                }
                this.get_View().FormationInfoLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$String(formation.name, "0FFF32" /* ColorConstant.Color_Tip_Item_Str */) + debuffStr + "\n" + sEffect);
                this.get_View().FormationGroup_UIAnchor.Update();
                this.get_View().FormationInfoLabel_UILabel.UpdateAnchors();
            }
        },
        GetFormation: function (side){
            var tFormation = null;
            if (side == MonsterController.MonsterSide.Player){
                tFormation = ModelManager.get_BattleDemo()._gameVideo.ateam.get_formation();
            }
            else if (side == MonsterController.MonsterSide.Enemy){
                tFormation = ModelManager.get_BattleDemo()._gameVideo.bteam.get_formation();
            }
            if (null == tFormation)
                tFormation = DemoSimulateHelper.SimulateFormation$$Int32(side);
            return tFormation;
        },
        GetFormationGrade: function (side){
            GameDebuger.TODO("if (side == MonsterController.MonsterSide.Player)\n        {\n            return ModelManager.BattleDemo. _gameVideo.ateam.formationGrade;\n        }\n        if (side == MonsterController.MonsterSide.Enemy)\n        {\n            return ModelManager.BattleDemo._gameVideo.bteam.formationGrade;\n        }");
            return 1;
        },
        GetEffectStr: function (formation, grade){
            var sEffect = formation.messageBox;
            GameDebuger.TODO("//替换站位1-5的效果\n        for (int pos = 0; pos < 5; ++pos)\n        {\n            var effectInfo = ModelManager.Player.GetFormationEffectInfo(formation.id, pos, grade);\n            if (effectInfo == null)\n                continue;\n            for (int i = 0; i < effectInfo.names.Length; ++i)\n            {\n                sEffect = sEffect.Replace(\'{\' + (pos + 1).ToString() +\n                    effectInfo.names[i] + \'}, effectInfo.values[i].ToString() + \'%\');\n            }\n        }");
            return sEffect;
        },
        GetFormationDebuffDic: function (formation){
            var debuff = formation.debuffTargetsStr;
            var dic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Single.ctor);
            if (System.String.IsNullOrEmpty(debuff) == false){
                var debuffSplit = debuff.Split$$Char$Array([","]);
                for (var i = 0,len = debuffSplit.length; i < len; i++){
                    var str = debuffSplit[i];
                    var subSplit = str.Split$$Char$Array([":"]);
                    if (!dic.ContainsKey(System.Int32.Parse$$String(subSplit[0]))){
                        dic.Add(System.Int32.Parse$$String(subSplit[0]), System.Single.Parse$$String(subSplit[1]));
                    }
                }
            }
            return dic;
        }
    }
};
JsTypes.push(BattleFormationController);
var BattleOptionController = {
    fullname: "BattleOptionController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mSkillButtonCellControllerList = new System.Collections.Generic.List$1.ctor(SkillButtonCellController.ctor);
            this._isPetautoSkillSelect = false;
            this.mCurrentSelectedCharacterUID = 0;
            this.mDefaultSkillController = null;
            this.mPlayerDefaultSkillController = null;
            this.mPetDefaultSkillController = null;
            MonolessViewController$1.ctor.call(this, BattleOptionView.ctor);
        },
        AfterInitView: function (){
            this.get_View().BottomButtonGrid_TweenPosition.duration = 0.5 /* BattleSkillPointController.SKILL_HIDE_DURATION */;
            this.get_View().BtnConfig_TweenPosition.duration = 0.5 /* BattleSkillPointController.SKILL_HIDE_DURATION */;
            this.get_View().BottomRightAnchor_TweenPosition.duration = 0.5 /* BattleSkillPointController.SKILL_HIDE_DURATION */;
        },
        RegistCustomEvent: function (){
            GameDebuger.TODO("EventDelegate.Set(View.ProtectButton.onClick, OnProtectButtonClick);");
            GameDebuger.TODO("EventDelegate.Set(View.CatchButton.onClick, OnCatchButtonClick);");
            GameDebuger.TODO("EventDelegate.Set(View.MagicButton_UIButton.onClick, OnMagicEquipButtonClick);");
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().SkillButton_UIButton.onClick, $CreateDelegate(this, this.OnSkillButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().StuntButton_UIButton.onClick, $CreateDelegate(this, this.OnStuntButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ItemButton_UIButton.onClick, $CreateDelegate(this, this.OnItemButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnConfig_UIButton.onClick, $CreateDelegate(this, this.OnBtnConfigClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().DefenseButton_UIButton.onClick, $CreateDelegate(this, this.OnDefenseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ExitButton_UIButton.onClick, $CreateDelegate(this, this.OnExitButtonClick));
            this.get_DefaultSkillController().set_OnClickHandler($CreateDelegate(this, this.OnDefaultSkillClick));
            this.get_PlayerDefaultSkillController().set_OnClickHandler($CreateDelegate(this, this.OnPlayerDefaultSkillClick));
            this.get_PetDefaultSkillController().set_OnClickHandler($CreateDelegate(this, this.OnPetDefaultSkillClick));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(UnityEngine.Transform.ctor, GameEvent.BATTLE_UI_UPDATE_POSITION, $CreateDelegate(this, this.OnTranPositionUpdate));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, $CreateDelegate(this, this.OnBattleCommonCD));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_BTN_AUTO_CLICKED, $CreateDelegate(this, this.OnBtnAutoClicked));
            GameEventCenter.AddListener$4$$Event$4$$Action$4(MonsterController.ctor, AppDto.Skill.ctor, System.Boolean.ctor, System.Object.ctor, GameEvent.BATTLE_UI_TARGET_SELECTED, $CreateDelegate(this, this.ChoosePet));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(MonsterController.ctor, AppDto.Skill.ctor, GameEvent.BATTLE_UI_SKILL_SELECTED, $CreateDelegate(this, this.OnSkillSelected));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_HIDE_ALL_BUTTON, $CreateDelegate(this, this.HideAllBtnIncludeAutoUI));
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(this, this.OnClickUIGo));
        },
        OnDispose: function (){
            this.mSkillButtonCellControllerList.Clear();
        },
        RemoveCustomEvent: function (){
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(UnityEngine.Transform.ctor, GameEvent.BATTLE_UI_UPDATE_POSITION, $CreateDelegate(this, this.OnTranPositionUpdate));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, $CreateDelegate(this, this.OnBattleCommonCD));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_BTN_AUTO_CLICKED, $CreateDelegate(this, this.OnBtnAutoClicked));
            GameEventCenter.RemoveListener$4$$Event$4$$Action$4(MonsterController.ctor, AppDto.Skill.ctor, System.Boolean.ctor, System.Object.ctor, GameEvent.BATTLE_UI_TARGET_SELECTED, $CreateDelegate(this, this.ChoosePet));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(MonsterController.ctor, AppDto.Skill.ctor, GameEvent.BATTLE_UI_SKILL_SELECTED, $CreateDelegate(this, this.OnSkillSelected));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_HIDE_ALL_BUTTON, $CreateDelegate(this, this.HideAllBtnIncludeAutoUI));
            UICamera.onClick = $RemoveDelegate(UICamera.onClick, $CreateDelegate(this, this.OnClickUIGo));
        },
        OnClickUIGo: function (go){
            GameEventCenter.SendEvent$1$$Event$1$$T(MonsterController.MonsterSide.ctor, GameEvent.BATTLE_UI_SHOW_FORMATION, MonsterController.MonsterSide.None);
            GameDebuger.TODO("ShowMonsterStatus(null);");
            if (this.get_View().AutoSkillSelectGroup.get_activeInHierarchy()){
                var uiPanel = UIPanel.Find$$Transform(go.get_transform());
                if (UnityEngine.Object.op_Equality(uiPanel, null) || UnityEngine.Object.op_Inequality(uiPanel, this.get_View().AutoSkillSelectGroup_UIPanel)){
                    this.HideAutoSkillSelect();
                }
            }
        },
        OnTranPositionUpdate: function (pTransform){
            if (BaseView.IsViewDestroy(this.get_View()) || UnityEngine.Object.op_Equality(null, pTransform))
                return;
            NGUIMath.OverlayPosition$$Transform$$Transform(pTransform, this.get_View().SkillButton_UIButton.get_transform());
        },
        OnBtnAutoClicked: function (pIsAutoClicked){
            if (pIsAutoClicked)
                this.OnAutoButtonClick();
            else
                this.OnManualButtonClick();
        },
        SetAutoMode: function (auto, inProcess, inFinishCommand, pIsInCommandSelect, actionState){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_UI_AUTO_BTN_STATUS_CHANGE, !auto);
            var hide = auto || inProcess || inFinishCommand;
            this.HideOperateButton(hide, !(inProcess || inFinishCommand), false);
            var commandOpen = true;
            GameDebuger.TODO("bool functionOpenEnum_BattleTrick = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleTrick,\n            false, \", null);");
            var functionOpenEnum_BattleTrick = true;
            var functionOpenEnum_BattleCall = true;
            GameDebuger.TODO("if (actionState == BattleDemoModel.ActionState.HERO)\n        {\n            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CharactorCommand, false, \", null);\n        }\n        else\n        {\n            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PetCommand, false, \", null);\n        }\n\n        bool functionOpenEnum_CatchPet = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CatchPet, false, \", null);\n        bool functionOpenEnum_BattleCall = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleCall, false, \", null);\n        bool functionOpenEnum_MagicSystem = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_MagicEquipment, false, \", null);");
            if (!hide){
                GameDebuger.TODO("View.CatchButton.gameObject.SetActive(actionState == BattleDemoModel.ActionState.ActionState.HERO && commandOpen &&\n                functionOpenEnum_CatchPet);");
                GameDebuger.TODO("View.SummonButton_UIButton.gameObject.SetActive(actionState == BattleDemoModel.ActionState.HERO && commandOpen &&functionOpenEnum_BattleCall);");
                this.get_View().StuntButton_UIButton.get_gameObject().SetActive(commandOpen && functionOpenEnum_BattleTrick);
                GameDebuger.TODO("View.MagicButton_UIButton.gameObject.SetActive(actionState == BattleDemoModel.ActionState.HERO && commandOpen &&\n                functionOpenEnum_MagicSystem);");
            }
            if (UnityEngine.Object.op_Inequality(null, MonsterManager.get_Instance().GetMyPet()))
                this.get_PetDefaultSkillController().Show();
            else
                this.get_PetDefaultSkillController().Hide();
            auto = auto && !inFinishCommand;
            if (!auto){
                this.HideAutoSkillSelect();
            }
            else {
                if (this._isPetautoSkillSelect && UnityEngine.Object.op_Equality(MonsterManager.get_Instance().GetMyPet(), null)){
                    this.HideAutoSkillSelect();
                }
            }
            this.repositionNow();
        },
        repositionNow: function (){
            this.get_View().BottomButtonGrid_UIGrid.Reposition();
            this.get_View().BottomButtonGrid2_UIGrid.Reposition();
        },
        HideAutoSkillSelect: function (){
            if (this.get_View().AutoSkillSelectGroup.get_activeInHierarchy()){
                GameObjectExt.RemoveChildren$$GameObject(this.get_View().AutoSkillSelectGrid_UIGrid.get_gameObject());
                this.get_View().AutoSkillSelectBg_UISprite.set_height(UnityEngine.Mathf.CeilToInt(0.3333333 /* 1 / 3f */) * 85 + 43);
                this.get_View().AutoSkillSelectGroup.SetActive(false);
                this._isPetautoSkillSelect = false;
            }
        },
        HideOperateButton: function (hide, pAutoUIRelated, pAlsoHideMainRole){
            if (hide){
                this.get_DefaultSkillController().Hide();
            }
            var commandOpen = true;
            GameDebuger.TODO("if (ModelManager.BattleDemo.actionState == BattleDemoModel.ActionState.HERO)\n        {\n            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CharactorCommand, false, \", null);\n        }\n        else\n        {\n            commandOpen = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PetCommand, false, \", null);\n        }\n\n        bool functionOpenEnum_CatchPet = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CatchPet, false, \", null);\n\n        bool functionOpenEnum_BattleProtect = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleDefend,\n            false, \", null);\n        bool functionOpenEnum_BattleCall = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleCall, false, \", null);\n        bool functionOpenEnum_MagicEquip = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_MagicEquipment, false, \", null);");
            GameDebuger.TODO("bool functionOpenEnum_BattleTrick = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleTrick,\n            false, \", null);\n        bool functionOpenEnum_BattleItems = FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_BattleItems,\n            false, \", null);");
            var functionOpenEnum_BattleTrick = true;
            var functionOpenEnum_BattleItems = true;
            var functionOpenEnum_Retreatable = ModelManager.get_BattleDemo()._gameVideo.retreatable;
            var functionOpenEnum_BattleCall = true;
            GameDebuger.TODO("View.AttackButton.gameObject.SetActive(!hide);\n        View.ProtectButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_BattleProtect);\n        View.CatchButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_CatchPet);\n        View.MagicButton_UIButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_MagicEquip);");
            GameDebuger.TODO("View.SummonButton_UIButton.gameObject.SetActive(!hide && commandOpen && functionOpenEnum_BattleCall);");
            GameDebuger.TODO("View.DefenseButton_UIButton.gameObject.SetActive(!hide);");
            this.get_View().DefenseButton_UIButton.get_gameObject().SetActive(false);
            GameDebuger.TODO("View.RetreatButton_UIButton.gameObject.SetActive(!hide && functionOpenEnum_Retreatable);");
            GameDebuger.TODO("View.RetreatButton_UIButton.gameObject.SetActive(functionOpenEnum_Retreatable);//DEMO让逃跑一直可用。2017-02-25 16:47:03");
            this.ShowItemBtnEffect(hide, pAutoUIRelated);
            GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(System.Boolean.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_ON_OPTION_BUTTON_HIDE, hide, pAlsoHideMainRole);
        },
        UpdateDefaultSkillIcon: function (){
            var defaultSkillId = 0;
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                if (ModelManager.get_BattleDemo()._lastPlayerSkillId > 10){
                    defaultSkillId = ModelManager.get_BattleDemo()._lastPlayerSkillId;
                }
            }
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                if (ModelManager.get_BattleDemo()._lastPetSkillId > 10){
                    defaultSkillId = ModelManager.get_BattleDemo()._lastPetSkillId;
                }
            }
            if (defaultSkillId == 0 || ModelManager.get_BattleDemo().get_isAIManagement())
                this.get_DefaultSkillController().Hide();
            else {
                if (ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.BATTLE_READY || ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.ON_WAITING)
                    this.get_DefaultSkillController().Show();
                this.get_DefaultSkillController().UpdateData$$Int32(defaultSkillId);
            }
        },
        UpdatePlayerAndPetDefaultSkill: function (){
            if (UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyHero(), null))
                this.get_PlayerDefaultSkillController().UpdateData$$Int32(MonsterManager.get_Instance().GetMyHero().videoSoldier.defaultSkillId);
            if (UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyPet(), null))
                this.get_PetDefaultSkillController().UpdateData$$Int32(MonsterManager.get_Instance().GetMyPet().videoSoldier.defaultSkillId);
        },
        OnPlayerDefaultSkillClick: function (pSkillButtonCellController, pSkill){
            this.OpenAutoSkillSelect(MonsterManager.get_Instance().GetMyHero());
        },
        OnPetDefaultSkillClick: function (pSkillButtonCellController, pSkill){
            this.OpenAutoSkillSelect(MonsterManager.get_Instance().GetMyPet());
        },
        OpenAutoSkillSelect: function (mc){
            this.get_View().AutoSkillSelectGroup.SetActive(true);
            GameObjectExt.RemoveChildren$$GameObject(this.get_View().AutoSkillSelectGrid_UIGrid.get_gameObject());
            var tip = "";
            var skillIds = null;
            if (mc.IsPet()){
                this._isPetautoSkillSelect = true;
                GameDebuger.TODO("PetPropertyInfo petPropertyInfo = ModelManager.Pet.GetPetInfoByUID(mc.GetId());");
                tip = "选择宠物自动技能";
                GameDebuger.TODO("skillIds = petPropertyInfo.GetBattleSkillList();");
                skillIds = (function (){
                    var $v5 = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                    $v5.Add(mc.videoSoldier.defaultSkillId);
                    return $v5;
                }).call(this);
            }
            else {
                this._isPetautoSkillSelect = false;
                tip = "选择人物自动技能";
                skillIds = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                skillIds.AddRange(mc.GetSkillIds());
            }
            skillIds = DemoSimulateHelper.GetMainCharacterSkillIDList(mc.videoSoldier);
            if (null == skillIds)
                skillIds = (function (){
                    var $v6 = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                    $v6.Add(mc.videoSoldier.defaultSkillId);
                    return $v6;
                }).call(this);
            GameDebuger.TODO("skillIds.Add(BattleManager.GetNormalAttackSkillId());");
            skillIds.Add(BattleManager.GetDefenseSkillId());
            this.get_View().AutoSkillSelectTipLabel_UILabel.set_text(tip);
            this.mSkillButtonCellControllerList.Clear();
            var showCount = 0;
            var clickAction = $CreateAnonymousDelegate(this, function (cell, skill){
                cell.set_OnClickHandler($CreateAnonymousDelegate(this, function (pSkillButtonCellController, pSkill){
                    this.OnSkillSelected(mc, skill);
                }));
            });
            for (var i = 0,len = skillIds.get_Count(); i < len; i++){
                var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillIds.get_Item$$Int32(i));
                if (skill != null && skill.skillType != 1 /* (int)Skill.SkillType.Passive */){
                    var tSkillButtonCellController = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().AutoSkillSelectGrid_UIGrid.get_gameObject(), "SkillButtonCell" /* SkillButtonCell.NAME */, "");
                    tSkillButtonCellController.set_ButtonLabelSpacingAdjustEnable(false);
                    this.mSkillButtonCellControllerList.Add(tSkillButtonCellController);
                    var go = tSkillButtonCellController.get_gameObject();
                    go.set_tag("AutoSkillSelectIcon");
                    var skillId = skill.id;
                    if (skillId < 10){
                        skillId += 9000;
                    }
                    go.set_name(skillId.toString());
                    tSkillButtonCellController.UpdateData$$Skill(skill);
                    tSkillButtonCellController.UpdateCD(ModelManager.get_BattleDemo().CurrentCommonCDLeft, ModelManager.get_BattleDemo().get_CommonCD());
                    clickAction(tSkillButtonCellController, skill);
                    showCount++;
                }
            }
            this.get_View().AutoSkillSelectBg_UISprite.set_height(UnityEngine.Mathf.CeilToInt(showCount / 3) * 85 + 43);
            this.get_View().AutoSkillSelectGrid_UIGrid.set_repositionNow(true);
            this.get_View().AutoSkillSelectTipLabel_UILabel.UpdateAnchors();
        },
        OnDefaultSkillClick: function (pSkillButtonCellController, pSkill){
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                this.SelectSkill(MonsterManager.get_Instance().GetMyHero(), DataCache.getDtoByCls$1(AppDto.Skill.ctor, ModelManager.get_BattleDemo()._lastPlayerSkillId));
            }
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                this.SelectSkill(MonsterManager.get_Instance().GetMyPet(), DataCache.getDtoByCls$1(AppDto.Skill.ctor, ModelManager.get_BattleDemo()._lastPetSkillId));
            }
        },
        OnDefenseButtonClick: function (){
            if (!ModelManager.get_BattleDemo().CanUseCommand(ModelManager.get_BattleDemo().get_choosePet(), true)){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            this.CancelAutoButton();
            var requestInfo = AppServices.Services.Battle_Defence(ModelManager.get_BattleDemo()._gameVideo.id, ModelManager.get_BattleDemo().get_choosePet().GetId());
            var waitNextAction = ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO && UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyPet(), null);
            ModelManager.get_BattleDemo()._lockUI = true;
            if (waitNextAction){
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    ModelManager.get_BattleDemo()._lockUI = false;
                    ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
                    ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.PET;
                    GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.BATTLE_READY);
                }), $CreateAnonymousDelegate(this, function (e){
                    GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, e);
                }));
            }
            else {
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    ModelManager.get_BattleDemo()._lockUI = false;
                    ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ACTION_REQUEST_SUCCESS);
                }), $CreateAnonymousDelegate(this, function (e){
                    GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, e);
                }));
            }
        },
        OnAutoButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            GameDebuger.TODO("if (IsGuideHeroAndPetBattle() && (battleState == BattleSceneStat.ON_PROGRESS || battleState == BattleSceneStat.ON_WAITING))\n        {\n            return;\n        }");
            this.CancelTimerOnAutoButtonClick();
            ModelManager.get_BattleDemo()._lockUI = true;
            ServiceRequestAction.requestServerWithSimulate(AppServices.Services.Battle_Auto(ModelManager.get_BattleDemo()._gameVideo.id), "", $CreateAnonymousDelegate(this, function (e){
                ModelManager.get_BattleDemo()._lockUI = false;
                ModelManager.get_BattleDemo().set_isAIManagement(true);
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW);
                if (ModelManager.get_BattleDemo().get_battleState() != BattleDemoModel.BattleSceneStat.ON_PROGRESS){
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ACTION_REQUEST_SUCCESS);
                }
                else {
                    GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_PROGRESS);
                }
            }), $CreateAnonymousDelegate(this, function (e){
                GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, e);
            }));
        },
        OnManualButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            this.CancelTimerOnAutoButtonClick();
            if (ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.ON_WAITING){
                return;
            }
            ModelManager.get_BattleDemo()._lockUI = true;
            ServiceRequestAction.requestServerWithSimulate(AppServices.Services.Battle_CancelAuto(ModelManager.get_BattleDemo()._gameVideo.id), "", $CreateAnonymousDelegate(this, function (e){
                ModelManager.get_BattleDemo()._lockUI = false;
                ModelManager.get_BattleDemo().set_isAIManagement(false);
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW);
                if (ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.ON_PROGRESS || ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.ON_WAITING || ModelManager.get_BattleDemo().get_battleState() == BattleDemoModel.BattleSceneStat.FINISH_COMMAND){
                    TipManager.AddTip("下回合开始时显示操作菜单", false, false, "");
                }
                else {
                    this.ShowActionWaitTip();
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_HIDE_AUTO_ROUND_TIME_LABEL);
                }
            }), $CreateAnonymousDelegate(this, function (e){
                GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, e);
                ModelManager.get_BattleDemo()._lockUI = true;
            }));
        },
        OnSkillButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            this.CancelAutoButton();
            var count = 0;
            var mc = this.GetCurrentActionMonster();
            if (mc.IsPet()){
                GameDebuger.TODO("PetPropertyInfo petPropertyInfo = ModelManager.Pet.GetPetInfoByUID(mc.GetId());\n\n            List<int> skills = petPropertyInfo.GetBattleSkillList();\n\n            for (int i = 0, len = skills.Count; i < len; i++)\n            {\n                Skill skill = DataCache.getDtoByCls<Skill>(skills[i]);\n                if (skill != null && skill.activeSkill)\n                {\n                    count++;\n                }\n            }");
                count = mc.GetAllSkillIds().get_Count();
            }
            else {
                count = 1;
            }
            if (count > 0){
                GameDebuger.TODO("if (IsGuideBattle)\n            {\n                ProxyBattleModule.OpenGuideSkillSelect(GetCurrentActionMonster(), OnSkillSelectDelegate);\n            }\n            else");
                ProxyBattleDemoModule.OpenSkillSelect(this.GetCurrentActionMonster(), $CreateDelegate(this, this.OnSkillSelectDelegate));
                GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_SELECT_SKILL);
                GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvent.BATTLE_UI_SHOW_TIP, null);
            }
            else {
                TipManager.AddTip("你的宠物不会主动法术", false, false, "");
            }
        },
        OnStuntButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            var skills = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            GameDebuger.LogError("[TEMP]获取背包中的装备技能，这个等背包和装备系统差不多了再搞。", null);
            GameDebuger.TODO("List<BagItemDto> equips = ModelManager.Backpack.GetBodyEquip();\n        for (int i = 0, len = equips.Count; i < len; i++)\n        {\n            BagItemDto dto = equips[i];\n            EquipmentExtraDto extraDto = dto.extra as EquipmentExtraDto;\n\n            if (extraDto != null && extraDto.activeSkillIds != null)\n            {\n                skills.AddRange(extraDto.activeSkillIds.ToArray());\n            }\n        }");
            if (skills.get_Count() > 0){
                var actionMonster = this.GetCurrentActionMonster();
                ProxyBattleDemoModule.OpenStuntSelect(actionMonster, skills, actionMonster.videoSoldier.spendSpDiscountRate, $CreateDelegate(this, this.OnSkillSelectDelegate));
                GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_SELECT_SKILL);
                GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvent.BATTLE_UI_SHOW_TIP, null);
            }
            else {
                TipManager.AddTip("你的装备没有附带特技", false, false, "");
            }
        },
        OnSkillSelectDelegate: function (skill){
            GameDebuger.Log("OnSkillSelectDelegate", null);
            GameDebuger.TODO("if (skill != null && skill.battleType == Skill.BattleType_PVP && !BattleManager.Instance.IsCurrentPvpBattle())\n        {\n            TipManager.AddTip(\'只能在玩家对战中使用\');\n        }");
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                if (skill != null){
                    ModelManager.get_BattleDemo()._lastPlayerSkillId = skill.id;
                }
                this.ChoosePet(MonsterManager.get_Instance().GetMyHero(), skill, true, null);
            }
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                if (skill != null){
                    ModelManager.get_BattleDemo()._lastPetSkillId = skill.id;
                }
                this.ChoosePet(MonsterManager.get_Instance().GetMyPet(), skill, true, null);
            }
            GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(AppDto.Skill.ctor, System.String.ctor, GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, skill, "请选择技能目标");
        },
        OnDefaultSkillSelectDelegate: function (mc, skill){
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            GameDebuger.Log("OnDefaultSkillSelectDelegate", null);
            if (skill != null){
                var playerSkillId = 0;
                var tIsPet = false;
                if (mc.IsPlayerMainCharactor()){
                    MonsterManager.get_Instance().GetMyHero().videoSoldier.defaultSkillId = skill.id;
                    this.get_PlayerDefaultSkillController().UpdateData$$Skill(skill);
                    ModelManager.get_Player().SetPlayerDefaultSkillId(skill.id);
                }
                var petSkillId = 0;
                if (mc.IsPlayerPet()){
                    tIsPet = true;
                    MonsterManager.get_Instance().GetMyPet().videoSoldier.defaultSkillId = skill.id;
                    this.get_PetDefaultSkillController().UpdateData$$Skill(skill);
                    ModelManager.get_Player().SetPetDefaultSkillId(skill.id);
                }
                if (UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyHero(), null)){
                    playerSkillId = MonsterManager.get_Instance().GetMyHero().videoSoldier.defaultSkillId;
                }
                if (UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyPet(), null)){
                    petSkillId = MonsterManager.get_Instance().GetMyPet().videoSoldier.defaultSkillId;
                }
                if (!ModelManager.get_BattleDemo().IsSkillPointEnoughToUseSkill(mc.GetId(), skill))
                    TipManager.AddTip(System.String.Format$$String$$Object("行动点不足，暂时无法使用{0}", AppStringHelper.WrapColor$$String$$Color(skill.name, ColorConstantV3.Color_Blue)), false, false, "");
                if (tIsPet)
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_PetDefaultSkill(ModelManager.get_BattleDemo()._gameVideo.id, petSkillId, mc.GetId()), "", null, null);
                else
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_PlayerDefaultSkill(ModelManager.get_BattleDemo()._gameVideo.id, playerSkillId), "", null, null);
                DemoSimulateHelper.SimulateDefaultSkill$$Int64$$Int32$$Int32(mc.GetId(), playerSkillId, petSkillId);
            }
            else
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK);
        },
        OnExitButtonClick: function (){
            if (ModelManager.get_BattleDemo()._isGameOver){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW);
            this.CancelTimerOnAutoButtonClick();
            ModelManager.get_BattleDemo()._lockUI = true;
            GameDebuger.TODO("if (mIsWatchMode)\n        {\n            ServiceRequestAction.requestServer(CommandService.exitWatchBattle(ModelManager.BattleDemo._gameVideo.id));\n        }\n        else");
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Battle_Leave(ModelManager.get_BattleDemo()._gameVideo.id), "", null, null);
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_EXIT_BATTLE);
            GameDebuger.Log("OnExitButtonClick", null);
        },
        OnItemButtonClick: function (){
            if (!ModelManager.get_BattleDemo().CanUseCommand(ModelManager.get_BattleDemo().get_choosePet(), true)){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            var battleType = 0;
            GameDebuger.TODO("if (ModelManager.BattleDemo._gameVideo is PvpVideo)\n        {\n            battleType = (ModelManager.BattleDemo._gameVideo as PvpVideo).type;\n        }");
            ProxyItemUseModule.OpenBattleItem(ModelManager.get_BattleDemo()._itemUsedCount, this.GetCurrentActionMonster().GetCharactorType(), battleType, $CreateDelegate(this, this.OnBattleSelectCallback));
        },
        OnBattleSelectCallback: function (packItem){
            if (null == packItem)
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK);
            else {
                GameDebuger.TODO("var props = packItem.item as Props;\n        if (props != null)\n            skill.skillAiId = props.targetType;");
                this.UseSpecialSkill(BattleManager.GetUseItemSkillId(), packItem.get_item().name, packItem.index, 0, "请选择使用目标", null);
            }
        },
        UseSpecialSkill: function (pSkillId, pSkillName, pLogicId, pSkillAiId, pTipContent, pSkillAdditionParam){
            this.CancelAutoButton();
            var skill = new AppDto.Skill.ctor();
            skill.id = pSkillId;
            skill.logicId = pLogicId;
            skill.name = pSkillName;
            skill.skillAiId = pSkillAiId;
            this.ChoosePet(this.GetCurrentActionMonster(), skill, false, pSkillAdditionParam);
            GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(AppDto.Skill.ctor, System.String.ctor, GameEvent.BATTLE_UI_SHOW_TARGET_SELECT, skill, pTipContent);
        },
        HideAllBtnIncludeAutoUI: function (pHide){
            this.HideAllButton(pHide);
            this.HideAutoSkillRelatedUI(pHide);
        },
        HideAllButton: function (hide){
            this.HideOperateButton(hide, false, true);
        },
        CancelAutoButton: function (){
            if (ModelManager.get_BattleDemo().get_isAIManagement()){
                ModelManager.get_BattleDemo().set_isAIManagement(false);
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW);
                this.CancelTimerOnAutoButtonClick();
            }
        },
        OnBtnConfigClick: function (){
            ProxyBattleConfigModule.OpenAutoConfig();
        },
        ChoosePet: function (pet, skill, pForbidenTip, pSkillAdditionParam){
            ModelManager.get_BattleDemo().UpdateOptionTarget(pet);
            if (UnityEngine.Object.op_Equality(ModelManager.get_BattleDemo().get_choosePet(), null))
                return;
            if (!ModelManager.get_BattleDemo().CanUseCommand(ModelManager.get_BattleDemo().get_choosePet(), pForbidenTip))
                return;
            if (!ModelManager.get_BattleDemo().get_choosePet().CanChoose(skill, pForbidenTip)){
                return;
            }
            this.UpdateDefaultSkillIcon();
            if (skill == null){
                if (ModelManager.get_BattleDemo().get_isAIManagement() == false){
                    if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                        GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvent.BATTLE_UI_SHOW_TIP, "请下达人物指令");
                    }
                    else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                        GameEventCenter.SendEvent$1$$Event$1$$T(System.String.ctor, GameEvent.BATTLE_UI_SHOW_TIP, "请下达宠物指令");
                    }
                }
                skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, BattleManager.GetNormalAttackSkillId());
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_UPDATE_BATTLE_BUTTON_VIEW);
            }
            else {
                GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.BATTLE_UI_SHOW_TIP, null);\n            HideAllButton(true);");
            }
            if (this.mCurrentSelectedCharacterUID != pet.GetId()){
                this.mCurrentSelectedCharacterUID = pet.GetId();
                GameEventCenter.SendEvent$1$$Event$1$$T(System.Int64.ctor, GameEvent.BATTLE_UI_SELECTED_OPTION_ROLE_CHANGED, this.mCurrentSelectedCharacterUID);
            }
            ModelManager.get_BattleDemo().get_choosePet().SetSelectSkill(skill, pSkillAdditionParam);
            var count = this.ShowSelectEffect();
            if (count == 0){
                if (skill != null && skill.id == BattleManager.GetCaptureSkillId()){
                    TipManager.AddTip("当前没有可捕捉的目标", false, false, "");
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ON_CANCEL_BUTTON_CLICK);
                    return;
                }
            }
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_SELECT_TARGET);
        },
        ShowSelectEffect: function (){
            var count = 0;
            if (!ModelManager.get_BattleDemo().get_isAIManagement()){
                count = MonsterManager.get_Instance().ShowSelectEffect(ModelManager.get_BattleDemo().get_choosePet());
                GameDebuger.TODO("UIModuleManager.Instance.SendOpenEvent(GuideShowSelectEffect, this);");
            }
            return count;
        },
        UpdateExitBtnStatus: function (pVisible){
            this.get_View().ExitButton_UIButton.get_gameObject().SetActive(pVisible);
        },
        GetCurrentActionMonster: function (){
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                return MonsterManager.get_Instance().GetMyHero();
            }
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                return MonsterManager.get_Instance().GetMyPet();
            }
            return null;
        },
        ShowActionWaitTip: function (){
            var tMonsterController = this.GetCurrentActionMonster();
            this.ChoosePet(tMonsterController, tMonsterController.GetLastSelectedSkill(), false, null);
        },
        InvokeAutoButtonClickDelay: function (){
            this.CancelTimerOnAutoButtonClick();
            this.AddOrResetCDTask("OnAutoButtonClick", 4, null, $CreateDelegate(this, this.OnAutoButtonClick), 0.1, false);
        },
        CancelTimerOnAutoButtonClick: function (){
            this.RemoveCDTask("OnAutoButtonClick");
        },
        autoRoundTimeLabel$$: "UILabel",
        get_autoRoundTimeLabel: function (){
            return this.get_View().AutoRoundTimeLabel_UILabel;
        },
        UpdateOptionRole: function (pCurrentSelectedCharacterUID){
        },
        DefaultSkillController$$: "SkillButtonCellController",
        get_DefaultSkillController: function (){
            if (null == this.mDefaultSkillController){
                this.mDefaultSkillController = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().DefaultSkillButton, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
                this.mDefaultSkillController.set_ButtonLabelSpacingAdjustEnable(false);
                this.mDefaultSkillController.set_NameLabelVisible(false);
            }
            return this.mDefaultSkillController;
        },
        PlayerDefaultSkillController$$: "SkillButtonCellController",
        get_PlayerDefaultSkillController: function (){
            if (null == this.mPlayerDefaultSkillController){
                this.mPlayerDefaultSkillController = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().PlayerDefaultSkillButton, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
                this.mPlayerDefaultSkillController.set_ButtonLabelSpacingAdjustEnable(false);
                this.mPlayerDefaultSkillController.set_NameLabelVisible(false);
            }
            return this.mPlayerDefaultSkillController;
        },
        PetDefaultSkillController$$: "SkillButtonCellController",
        get_PetDefaultSkillController: function (){
            if (null == this.mPetDefaultSkillController){
                this.mPetDefaultSkillController = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().PetDefaultSkillButton, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
                this.mPetDefaultSkillController.set_ButtonLabelSpacingAdjustEnable(false);
                this.mPetDefaultSkillController.set_NameLabelVisible(false);
            }
            return this.mPetDefaultSkillController;
        },
        OnBattleCommonCD: function (pPlayerUID, pPassedTime, pTotalTime){
            this.get_DefaultSkillController().UpdateCD(pPassedTime, pTotalTime);
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO)
                this.get_PlayerDefaultSkillController().UpdateCD(pPassedTime, pTotalTime);
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET)
                this.get_PetDefaultSkillController().UpdateCD(pPassedTime, pTotalTime);
            if (null != this.mSkillButtonCellControllerList && this.mSkillButtonCellControllerList.get_Count() > 0){
                for (var tCounter = 0; tCounter < this.mSkillButtonCellControllerList.get_Count(); tCounter++){
                    this.mSkillButtonCellControllerList.get_Item$$Int32(tCounter).UpdateCD(pPassedTime, pTotalTime);
                }
            }
        },
        OnSkillSelected: function (pMonsterController, pSkill){
            this.SelectSkill(pMonsterController, pSkill);
        },
        SelectSkill: function (pMonsterController, pSkill){
            if (!ModelManager.get_BattleDemo().CanUseCommand(null, true)){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                this.ChoosePet(pMonsterController, pSkill, true, null);
            }
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                this.ChoosePet(pMonsterController, pSkill, true, null);
            }
        },
        ShowItemBtnEffect: function (pHide, pAutoUIRelated){
            if (pHide){
                this.get_View().BottomButtonGrid_TweenPosition.PlayForward();
                if (pAutoUIRelated)
                    this.HideAutoSkillRelatedUI(false);
            }
            else {
                this.get_View().BottomButtonGrid_TweenPosition.PlayReverse();
                if (pAutoUIRelated)
                    this.HideAutoSkillRelatedUI(true);
            }
        },
        HideAutoSkillRelatedUI: function (pHide){
            if (pHide){
                this.get_View().BtnConfig_TweenPosition.PlayReverse();
                this.get_View().BottomRightAnchor_TweenPosition.PlayReverse();
            }
            else {
                this.get_View().BtnConfig_TweenPosition.PlayForward();
                this.get_View().BottomRightAnchor_TweenPosition.PlayForward();
            }
        }
    }
};
JsTypes.push(BattleOptionController);
var BattleOrderCellController = {
    fullname: "BattleOrderCellController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleOrderCellController.btnState = 0;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._OnCellSelect = null;
            this._info = null;
            this.mSelected = true;
            MonolessViewController$1.ctor.call(this, BattleOrderCell.ctor);
        },
        AfterInitView: function (){
            this._view.smallAddSprite.get_gameObject().SetActive(false);
            this.set_Selected(false);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.OrderButton.onClick, $CreateDelegate(this, this.OnClickOrderButton));
        },
        setData: function (inf, OnCellSelect){
            this.set_info(inf);
            this._OnCellSelect = OnCellSelect;
            this._view.smallAddSprite.get_gameObject().SetActive(this.get_info().isAddButton);
            if (this._info.isClearButton){
                this._view.btnLabel.set_useFloatSpacing(true);
                this._view.btnLabel.set_text(AppStringHelper.WrapColor$$String$$String("清除指令", "FB2929" /* ColorConstantV3.Color_Red_Str */));
            }
            else if (this._info.isAllClearButton){
                this._view.btnLabel.set_useFloatSpacing(true);
                this._view.btnLabel.set_text(AppStringHelper.WrapColor$$String$$String("全部清除", "FB2929" /* ColorConstantV3.Color_Red_Str */));
            }
            else {
                this._view.btnLabel.set_useFloatSpacing(false);
                this._view.btnLabel.set_text(this._info.orderName);
            }
        },
        info$$: "BattleOrderInfo",
        get_info: function (){
            return this._info;
        },
        set_info: function (value){
            this._info = value;
        },
        OnClickOrderButton: function (){
            if (this._OnCellSelect != null){
                this._OnCellSelect(this);
            }
        },
        Selected$$: "System.Boolean",
        get_Selected: function (){
            return this.mSelected;
        },
        set_Selected: function (value){
            if (this.mSelected != value){
                this.mSelected = value;
                this.get_View().SpriteSelected.SetActive(this.mSelected);
            }
        }
    }
};
JsTypes.push(BattleOrderCellController);
var BattleOrderEditorCellController = {
    fullname: "BattleOrderEditorCellController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleOrderEditorCellController.ORDER = 1;
            BattleOrderEditorCellController.CLEAR = 2;
            BattleOrderEditorCellController.ADD = 3;
            BattleOrderEditorCellController.btnState = 0;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._OnCellSelect = null;
            this._info = null;
            MonolessViewController$1.ctor.call(this, BattleOrderEditorCell.ctor);
        },
        AfterInitView: function (){
            this._view.bigAddSprite.get_gameObject().SetActive(false);
            this._view.smallAddSprite.get_gameObject().SetActive(false);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.OrderButton.onClick, $CreateDelegate(this, this.OnClickOrderButton));
        },
        setData: function (inf, OnCellSelect){
            this.set_info(inf);
            this._OnCellSelect = OnCellSelect;
            this._view.btnLabel.set_text(this.get_info().orderName);
            this._view.panSprite.get_gameObject().SetActive(this.get_info().canEdit);
            this._view.bigAddSprite.get_gameObject().SetActive(this.get_info().isAddButton);
        },
        info$$: "BattleOrderInfo",
        get_info: function (){
            return this._info;
        },
        set_info: function (value){
            this._info = value;
        },
        OnClickOrderButton: function (){
            if (this._OnCellSelect != null){
                this._OnCellSelect(this);
            }
        }
    }
};
JsTypes.push(BattleOrderEditorCellController);
var BattleOrderEditorViewController = {
    fullname: "BattleOrderEditorViewController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleOrderEditorViewController.battleOrderItemCellPath = "BattleOrderEditorCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.cellPools = new System.Collections.Generic.List$1.ctor(BattleOrderEditorCellController.ctor);
            this._orderType = 1;
            MonoViewController$1.ctor.call(this, BattleOrderEditorView.ctor);
        },
        Open: function (){
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn.onClick, $CreateDelegate(this, this.OnClickCloseButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().enemyButton.onClick, $CreateDelegate(this, this.OnClickEnemyButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().myButton.onClick, $CreateDelegate(this, this.OnClickMyButton));
            GameEventCenter.AddListener$$Event$$Action(GameEvent.BATTLE_UI_ONORDERLISTUPDATE, $CreateDelegate(this, this.setData));
        },
        setData: function (){
            var tempList = null;
            if (this._orderType == 1){
                tempList = ModelManager.get_BattleDemo().getMyOrderList();
            }
            else if (this._orderType == 2){
                tempList = ModelManager.get_BattleDemo().getEnemyOrderList();
            }
            var dataList = new System.Collections.Generic.List$1.ctor(BattleOrderInfo.ctor);
            for (var i = 0; i < tempList.get_Count(); i++){
                if (!System.String.IsNullOrEmpty(tempList.get_Item$$Int32(i).orderName) || (tempList.get_Item$$Int32(i).isAddButton && dataList.get_Count() < 10)){
                    dataList.Add(tempList.get_Item$$Int32(i));
                }
            }
            for (var i = 0; i < dataList.get_Count(); i++){
                if ((i + 1) > this.cellPools.get_Count()){
                    var com = this.AddCachedChild$2$$GameObject$$String$$String(BattleOrderEditorCellController.ctor, BattleOrderEditorCell.ctor, this.get_View().itemGrid.get_gameObject(), "BattleOrderEditorCell" /* BattleOrderEditorCell.NAME */, "");
                    this.cellPools.Add(com);
                }
                this.cellPools.get_Item$$Int32(i).setData(dataList.get_Item$$Int32(i), $CreateDelegate(this, this.OnItemCellSelect));
            }
            for (var i = 0; i < this.cellPools.get_Count(); i++){
                this.cellPools.get_Item$$Int32(i).get_gameObject().SetActive(i < dataList.get_Count());
            }
            this.get_View().itemGrid.Reposition();
            if (dataList.get_Count() > 8){
                this.get_View().ScrollView.SetDragAmount(0, 1, false);
            }
            else {
                this.get_View().ScrollView.ResetPosition();
            }
            this.btnShowLogic();
        },
        OnItemCellSelect: function (cell){
            if (null != cell){
                var info = cell.get_info();
                if (info != null){
                    if (info.isAddButton){
                        ProxyWindowModule.OpenInputWindow(0, 8, "指 令", "输入指令：(最多4个字)", "请输入指令", "", $CreateAnonymousDelegate(this, function (str){
                            if (!System.String.IsNullOrEmpty(str)){
                                ModelManager.get_BattleDemo().modifyOrderItemData(info.type, 0, str, true);
                            }
                        }), null, 3, "确定", "取消", 0, UILayerType.Dialogue, 0);
                    }
                    else {
                        if (info.canEdit){
                            ProxyWindowModule.OpenInputWindow(0, 8, "指 令", "输入指令：(最多4个字)", "", info.orderName, $CreateAnonymousDelegate(this, function (str){
                                ModelManager.get_BattleDemo().modifyOrderItemData(info.type, info.index, str, false);
                            }), null, 3, "确定", "取消", 0, UILayerType.Dialogue, 0);
                        }
                    }
                }
            }
        },
        OnClickCloseButton: function (){
            ProxyBattleDemoModule.CloseBattleOrderEditorView();
        },
        OnClickEnemyButton: function (){
            this._orderType = 2;
            this.setData();
        },
        OnClickMyButton: function (){
            this._orderType = 1;
            this.setData();
        },
        btnShowLogic: function (){
            this.get_View().myButton.set_normalSprite(this._orderType == 1 ? "little-button-selected" : "little-button");
            this.get_View().enemyButton.set_normalSprite(this._orderType == 2 ? "little-button-selected" : "little-button");
        },
        orderType$$: "System.Int32",
        get_orderType: function (){
            return this._orderType;
        },
        set_orderType: function (value){
            this._orderType = value;
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this.cellPools.Clear();
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.BATTLE_UI_ONORDERLISTUPDATE, $CreateDelegate(this, this.setData));
        }
    }
};
JsTypes.push(BattleOrderEditorViewController);
var BattleOrderListViewController = {
    fullname: "BattleOrderListViewController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleOrderListViewController.battleOrderItemCellPath = "BattleOrderCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.cellPools = new System.Collections.Generic.List$1.ctor(BattleOrderCellController.ctor);
            this.mOrderSelectedHandler = null;
            this._orderType = 1;
            this._targetId = 0;
            this.mSelectedOrderCell = null;
            MonoViewController$1.ctor.call(this, BattleOrderListView.ctor);
        },
        Open: function (orderType, targetId, pOrderSelectedHandler){
            this._orderType = orderType;
            this._targetId = targetId;
            this.mOrderSelectedHandler = pOrderSelectedHandler;
            var tempList = null;
            if (this._orderType == 1){
                tempList = ModelManager.get_BattleDemo().getMyOrderList();
            }
            else if (this._orderType == 2){
                tempList = ModelManager.get_BattleDemo().getEnemyOrderList();
            }
            var dataList = new System.Collections.Generic.List$1.ctor(BattleOrderInfo.ctor);
            for (var i = 0; i < tempList.get_Count(); i++){
                if (!System.String.IsNullOrEmpty(tempList.get_Item$$Int32(i).orderName) || tempList.get_Item$$Int32(i).isAddButton || tempList.get_Item$$Int32(i).isClearButton || tempList.get_Item$$Int32(i).isAllClearButton){
                    dataList.Add(tempList.get_Item$$Int32(i));
                }
            }
            for (var i = 0; i < dataList.get_Count(); i++){
                if ((i + 1) > this.cellPools.get_Count()){
                    var com = this.AddCachedChild$2$$GameObject$$String$$String(BattleOrderCellController.ctor, BattleOrderCell.ctor, this.get_View().itemGrid.get_gameObject(), "BattleOrderCell" /* BattleOrderCell.NAME */, "");
                    this.cellPools.Add(com);
                }
                this.cellPools.get_Item$$Int32(i).setData(dataList.get_Item$$Int32(i), $CreateDelegate(this, this.OnItemCellSelect));
            }
            for (var i = 0; i < this.cellPools.get_Count(); i++){
                this.cellPools.get_Item$$Int32(i).get_gameObject().SetActive(i < dataList.get_Count());
            }
            this.get_View().itemGrid.Reposition();
            var newLen = dataList.get_Count() - 7;
            if (newLen <= 1){
                this.get_View().ContentBg.set_height(298);
            }
            else if (newLen == 2 || newLen == 3){
                this.get_View().ContentBg.set_height(364);
            }
            else if (newLen == 4 || newLen == 5){
                this.get_View().ContentBg.set_height(434);
            }
            else if (newLen == 6){
                this.get_View().ContentBg.set_height(500);
            }
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_COMMAND_ENTER);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BgCollider_UIEventTrigger.onClick, $CreateDelegate(this, this.OnClickBgCollider));
        },
        OnDispose: function (){
        },
        OnClickBgCollider: function (){
            this.CloseView(null);
        },
        OnItemCellSelect: function (cell){
            this.set_SelectedOrderCell(cell);
            if (cell.get_info() != null){
                if (cell.get_info().isAddButton){
                    ProxyBattleDemoModule.OpenBattleOrderEditorView(cell.get_info().type);
                    ProxyBattleDemoModule.HideBattleOrderListView();
                }
                else {
                    var battleId = BattleManager.get_Instance().GetCurrentGameVideoId();
                    if (cell.get_info().isClearButton){
                        this.OnSelectedOrder(cell.get_info());
                    }
                    else if (cell.get_info().isAllClearButton){
                        this.ClearAllOrder(cell.get_info());
                    }
                    else {
                        if (!System.String.IsNullOrEmpty(cell.get_info().orderName)){
                            this.OnSelectedOrder(cell.get_info());
                        }
                    }
                }
            }
        },
        ClearAllOrder: function (pBattleOrderInfo){
            this.OnSelectedOrder(pBattleOrderInfo);
        },
        CloseView: function (pBattleOrderInfo){
            ProxyBattleDemoModule.HideBattleOrderListView();
            GameDebuger.TODO("ProxyMainUIModule.CloseBattleBuffTipsView();");
            if (null != this.mOrderSelectedHandler)
                this.mOrderSelectedHandler(pBattleOrderInfo);
        },
        OnSelectedOrder: function (pBattleOrderInfo){
            this.CloseView(pBattleOrderInfo);
            if (null != this.mOrderSelectedHandler)
                this.mOrderSelectedHandler(pBattleOrderInfo);
        },
        SelectedOrderCell$$: "BattleOrderCellController",
        get_SelectedOrderCell: function (){
            return this.mSelectedOrderCell;
        },
        set_SelectedOrderCell: function (value){
            if (this.mSelectedOrderCell != value){
                if (null != this.mSelectedOrderCell)
                    this.mSelectedOrderCell.set_Selected(false);
                this.mSelectedOrderCell = value;
                if (null != this.mSelectedOrderCell)
                    this.mSelectedOrderCell.set_Selected(true);
            }
        }
    }
};
JsTypes.push(BattleOrderListViewController);
var BattleSkillPointController = {
    fullname: "BattleSkillPointController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleSkillPointController.SKILL_HIDE_DURATION = 0.5;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mCurrentSelectedCharacterUID = 0;
            this.mNextCharacterUID = 0;
            this.mMainPlayerUID = 0;
            this.mEffectForNextBtn = null;
            this.mEffectForBuff = null;
            this.mSkillCellDic = null;
            this.mSelectedSkillButtonCellController = null;
            this.mSuperSkill = null;
            this.mHideAllSkill = false;
            this.mSPSelectEffectTweener = null;
            MonolessViewController$1.ctor.call(this, BattleSkillPointView.ctor);
        },
        AfterInitView: function (){
            this.InitSkillDic();
            this.mMainPlayerUID = ModelManager.get_Player().GetPlayerId();
            this.UpdateBtnStatus$$Boolean(false);
            this.get_View().CntrNext_TweenPosition.duration = 0.5 /* SKILL_HIDE_DURATION */;
        },
        RegistCustomEvent: function (){
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, $CreateDelegate(this, this.OnSkillPointUpdate));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Int32.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_ADD_TIME_UPDATE, $CreateDelegate(this, this.OnSkillPointAddSpeedUpdate));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.BATTLE_UI_SELECTED_OPTION_ROLE_CHANGED, $CreateDelegate(this, this.UpdateOptionRole));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_UI_SP_UPDATED, $CreateDelegate(this, this.UpdateSP));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_FIGHT_MC_DEAD, $CreateDelegate(this, this.UpdateBtnStatus$$MonsterController));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, MonsterOptionStateManager.MonsterOptionState.ctor, GameEvent.BATTLE_FIGHT_MONSTER_OPTION_STATE_CHANGED, $CreateDelegate(this, this.OnMonsterOptionStateChanged));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, $CreateDelegate(this, this.OnBuffStatusChanged));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Boolean.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_ON_OPTION_BUTTON_HIDE, $CreateDelegate(this, this.OnHideOptionBtn));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, $CreateDelegate(this, this.OnQueueUpdate));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_UI_CD_STATUS_UPDATE, $CreateDelegate(this, this.OnCDStatusUpdate));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_HIDE_ALL_BUTTON, $CreateDelegate(this, this.OnHideAllBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnNextHead_UIButton.onClick, $CreateDelegate(this, this.OnOptionHeadBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnSummon_UIButton.onClick, $CreateDelegate(this, this.OnSummonButtonClick));
        },
        RemoveCustomEvent: function (){
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, $CreateDelegate(this, this.OnSkillPointUpdate));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Int32.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_ADD_TIME_UPDATE, $CreateDelegate(this, this.OnSkillPointAddSpeedUpdate));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.BATTLE_UI_SELECTED_OPTION_ROLE_CHANGED, $CreateDelegate(this, this.UpdateOptionRole));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_UI_SP_UPDATED, $CreateDelegate(this, this.UpdateSP));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_FIGHT_MC_DEAD, $CreateDelegate(this, this.UpdateBtnStatus$$MonsterController));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, MonsterOptionStateManager.MonsterOptionState.ctor, GameEvent.BATTLE_FIGHT_MONSTER_OPTION_STATE_CHANGED, $CreateDelegate(this, this.OnMonsterOptionStateChanged));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, AppDto.SkillBuff.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_BUFF_STATUS_CHANGED, $CreateDelegate(this, this.OnBuffStatusChanged));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Boolean.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_ON_OPTION_BUTTON_HIDE, $CreateDelegate(this, this.OnHideOptionBtn));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, $CreateDelegate(this, this.OnQueueUpdate));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(MonsterController.ctor, GameEvent.BATTLE_UI_CD_STATUS_UPDATE, $CreateDelegate(this, this.OnCDStatusUpdate));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Boolean.ctor, GameEvent.BATTLE_UI_HIDE_ALL_BUTTON, $CreateDelegate(this, this.OnHideAllBtn));
        },
        OnDispose: function (){
            this.mHideAllSkill = false;
            if (UnityEngine.Object.op_Inequality(null, this.mEffectForNextBtn)){
                this.mEffectForNextBtn.Dispose();
                this.mEffectForNextBtn = null;
            }
            if (UnityEngine.Object.op_Inequality(null, this.mEffectForBuff)){
                this.mEffectForBuff.Dispose();
                this.mEffectForBuff = null;
            }
        },
        UpdateData: function (pCharacterUID){
            this.mCurrentSelectedCharacterUID = pCharacterUID;
            this.SetupTimerForHero(MonsterManager.get_Instance().GetMyHero());
            this.SetupTimerForHero(MonsterManager.get_Instance().GetMyPet());
            this.UpdateSkillDic$$Int64(pCharacterUID);
        },
        UpdateSkillPointUI$$Boolean: function (pUpdateBarAlso){
            this.UpdateSkillPointUI$$Int64$$Boolean(this.mCurrentSelectedCharacterUID, pUpdateBarAlso);
        },
        SetupTimerForHero: function (pMonsterController){
            if (UnityEngine.Object.op_Equality(null, pMonsterController) || null == pMonsterController.videoSoldier)
                return;
            this.UpdateSkillPointUI$$Int64$$Boolean(pMonsterController.videoSoldier.id, false);
        },
        UpdateSkillPointUI$$Int64$$Boolean: function (pCharacterUID, pUpdateBarAlso){
            var tVideoSoldier = ModelManager.get_BattleDemo().GetVideoSoldier(pCharacterUID);
            if (null == tVideoSoldier){
                GameDebuger.LogError("UpdateOptionRole failed for GetVideoSoldier failed , pCharacterUID:" + pCharacterUID.toString(), null);
                return;
            }
            this.OnSkillPointUpdate(pCharacterUID, tVideoSoldier.actionPoint);
            if (pUpdateBarAlso)
                this.OnSkillPointAddSpeedUpdate(pCharacterUID, tVideoSoldier.time, false);
        },
        OnSkillPointUpdate: function (pCharacterId, pSkillPoint){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            if (this.mCurrentSelectedCharacterUID != pCharacterId)
                return;
            this.UpdateEnergyUI(pSkillPoint, 7 /* BattleDemoModel.MAX_SKILL_POINT */);
        },
        UpdateEnergyUI: function (pCurSkillPoint, pTotalSkillPoint){
            this.UpdateCurEnergyUI(pCurSkillPoint, pTotalSkillPoint);
        },
        UpdateCurEnergyUI: function (pCurSkillPoint, pTotalSkillPoint){
            this.get_View().LabelCurPoint_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", pCurSkillPoint, pTotalSkillPoint));
        },
        OnSkillPointAddSpeedUpdate: function (pCharacterId, pTimeToAddOnePoint, pForceToReset){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            this.UpdateSkillPointAddSpeed(pCharacterId, pTimeToAddOnePoint / 1000, pForceToReset);
        },
        UpdateEnergyBarUIByValue: function (pProgress){
            this.get_View().SpriteProgress_UISprite.set_fillAmount(pProgress);
        },
        UpdateSkillPointAddSpeed: function (pPlayerUID, pDuration, pForceToReset){
            if (pDuration <= 0 || pPlayerUID <= 0){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("[错误]GetCdTask failed , pDuration <= 0 or pPlayerUID <= 0! pDuration:{0},pPlayerUID:{1}", pDuration, pPlayerUID), null);
                return null;
            }
            var tCdTask = null;
            var tCurProgressValue = 0;
            var tOnCdUpdate = $CreateAnonymousDelegate(this, function (pRemainTime){
                if (BaseView.IsViewDestroy(this.get_View()) || this.mCurrentSelectedCharacterUID != pPlayerUID)
                    return;
                this.UpdateEnergyBarUIByValue(tCurProgressValue + ((pDuration - pRemainTime) / pDuration));
            });
            var tOnCdFinish = $CreateAnonymousDelegate(this, function (){
                if (ServiceRequestAction.SimulateNet){
                    GameDebuger.LogError(System.String.Format$$String$$Object("[单机/非错误]模拟技能点增加，正式时要干掉本方法，pPlayerUID：{0}", pPlayerUID), null);
                    if (BaseView.IsViewDestroy(this.get_View()))
                        return;
                    var tVideoSoldier = ModelManager.get_BattleDemo().GetVideoSoldier(pPlayerUID);
                    if (tVideoSoldier.actionPoint < 7){
                        ModelManager.get_BattleDemo().UpdateSkillPoint$$Int64$$Int32$$Boolean(pPlayerUID, tVideoSoldier.actionPoint + 1, true);
                    }
                }
            });
            tCdTask = this.AddOrResetCDTask("UpdateEnergyBarUI_" + pPlayerUID.toString(), pDuration, tOnCdUpdate, tOnCdFinish, 0.01, false);
            if (null == tCdTask){
                GameDebuger.LogError("GetCdTask failed , tCdTask is null !", null);
                return null;
            }
            if (pForceToReset){
                tCdTask.Reset(pDuration, tOnCdUpdate, tOnCdFinish, 0.01, false);
            }
            else {
                if (pDuration == tCdTask.totalTime || tCdTask.remainTime <= 0)
                    return tCdTask;
                var tLeftDuration = (tCdTask.remainTime * pDuration) / tCdTask.totalTime;
                tCurProgressValue = (tCdTask.totalTime - tCdTask.remainTime) / tCdTask.totalTime;
                tCdTask.Reset(pDuration, tOnCdUpdate, tOnCdFinish, 0.01, false);
                tCdTask.remainTime = tLeftDuration;
            }
            return tCdTask;
        },
        UpdateSP: function (pCharacterUID, pCurrentSP){
            if (pCharacterUID != this.mCurrentSelectedCharacterUID)
                return;
            this.get_View().LabelCurSP_UILabel.set_text(System.String.Format$$String$$Object("SP:{0}", pCurrentSP));
            var tIsSPEnough = DemoSkillHelper.IsSPEnoughToUseSuperSkill(MonsterManager.get_Instance().GetMonsterFromSoldierID(pCharacterUID));
            this.mSuperSkill.ShowUsableEffect(tIsSPEnough);
        },
        UpdateLabelSPVisible: function (pVisible){
            this.get_View().LabelCurSP_UILabel.get_gameObject().SetActive(pVisible);
        },
        OnOptionHeadBtnClick: function (){
            var tMonsterController = null;
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                tMonsterController = MonsterManager.get_Instance().GetMyPet();
                if (UnityEngine.Object.op_Equality(null, tMonsterController)){
                    TipManager.AddTip("没有宠物，无法切换！", false, false, "");
                    return;
                }
                else {
                    ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.PET;
                    GameEventCenter.SendEvent$4$$Event$4$$T1$$T2$$T3$$T4(MonsterController.ctor, AppDto.Skill.ctor, System.Boolean.ctor, System.Object.ctor, GameEvent.BATTLE_UI_TARGET_SELECTED, tMonsterController, null, false, null);
                }
            }
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.HERO;
                GameEventCenter.SendEvent$4$$Event$4$$T1$$T2$$T3$$T4(MonsterController.ctor, AppDto.Skill.ctor, System.Boolean.ctor, System.Object.ctor, GameEvent.BATTLE_UI_TARGET_SELECTED, MonsterManager.get_Instance().GetMyHero(), null, false, null);
            }
        },
        UpdateOptionRole: function (pCharacterUID){
            this.mCurrentSelectedCharacterUID = pCharacterUID;
            this.UpdateEnergyBarUIByValue(0);
            this.UpdateSkillPointUI$$Boolean(false);
            this.UpdateOptionRoleUI(pCharacterUID);
            this.UpdateLabelSPVisible(this.mCurrentSelectedCharacterUID == this.mMainPlayerUID);
            this.UpdateNextHeroEffectEnable();
            this.UpdateSkillDic$$Int64(pCharacterUID);
        },
        UpdateOptionRoleUI: function (pCurrentSelectedCharacterUID){
            this.mCurrentSelectedCharacterUID = this.mNextCharacterUID = 0;
            var tCurVideoSoldier = null;
            var tNextVideoSoldier = null;
            if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO){
                tCurVideoSoldier = MonsterManager.get_Instance().GetMyHero();
                tNextVideoSoldier = MonsterManager.get_Instance().GetMyPet();
            }
            else if (ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.PET){
                tCurVideoSoldier = MonsterManager.get_Instance().GetMyPet();
                tNextVideoSoldier = MonsterManager.get_Instance().GetMyHero();
            }
            else {
                GameDebuger.LogError("UpdateOptionRoleUI failed, unknow actionState :" + ModelManager.get_BattleDemo().actionState.toString(), null);
                return;
            }
            this.mCurrentSelectedCharacterUID = UnityEngine.Object.op_Inequality(null, tCurVideoSoldier) ? tCurVideoSoldier.GetId() : 0;
            this.mNextCharacterUID = UnityEngine.Object.op_Inequality(null, tNextVideoSoldier) ? tNextVideoSoldier.GetId() : 0;
            this.UpdatePetIcon(this.get_View().SpriteCurrentHead_UISprite, tCurVideoSoldier);
            this.UpdatePetIcon(this.get_View().SpriteNextHead_UISprite, tNextVideoSoldier);
        },
        UpdatePetIcon: function (pIconUISprite, pMonsterController){
            if (UnityEngine.Object.op_Inequality(null, pMonsterController) && null != pMonsterController.videoSoldier && null != pMonsterController.videoSoldier.get_charactor()){
                pIconUISprite.set_enabled(true);
                UIHelper.SetPetIcon(pIconUISprite, pMonsterController.videoSoldier.get_charactor().texture.toString(), false);
            }
            else
                pIconUISprite.set_enabled(false);
        },
        ShowNextHideEffect: function (pHide){
            if (pHide)
                this.get_View().CntrNext_TweenPosition.PlayForward();
            else
                this.get_View().CntrNext_TweenPosition.PlayReverse();
        },
        OnCDStatusUpdate: function (pMonsterController){
            if (UnityEngine.Object.op_Equality(null, pMonsterController) || pMonsterController.GetId() != this.mCurrentSelectedCharacterUID)
                return;
            this.UpdateCurrentRoleStatus$$Int64(this.mCurrentSelectedCharacterUID);
        },
        OnQueueUpdate: function (pCharacterUID){
            this.UpdateCurrentRoleStatus$$Int64(this.mCurrentSelectedCharacterUID);
        },
        UpdateCurrentRoleStatus$$Int64: function (pCharacterUID){
            var tStatusTip = System.String.Empty;
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(pCharacterUID);
            if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                if (tMonsterController.get_IsInCD()){
                    var tSkill = tMonsterController.GetLastSelectedSkill();
                    if (null != tSkill){
                        if (BattleManager.GetUseItemSkillId() == tSkill.id)
                            tStatusTip = "使用物品中";
                        else
                            tStatusTip = "技能吟唱中";
                    }
                }
                else {
                    var tQueueIndex = BattleInstController.get_Instance().GetVideoRoundIndexByPlayerUID(pCharacterUID);
                    if (tQueueIndex >= 0)
                        tStatusTip = System.String.Format$$String$$Object("行动顺序:{0}", tQueueIndex + 1);
                }
            }
            this.UpdateCurrentRoleStatus$$String(tStatusTip);
        },
        UpdateCurrentRoleStatus$$String: function (pStatusTip){
            if (System.String.IsNullOrEmpty(pStatusTip)){
                this.get_View().LabelOptionStatus_UILabel.set_alpha(0);
            }
            else {
                this.get_View().LabelOptionStatus_UILabel.set_alpha(1);
                this.get_View().LabelOptionStatus_UILabel.set_text(pStatusTip);
            }
        },
        OnSummonButtonClick: function (){
            if (!ModelManager.get_BattleDemo().CanUseCommand(null, true)){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            ProxyBattleDemoModule.OpenSummon($CreateDelegate(this, this.OnSummonPet));
        },
        OnSummonPet: function (petId){
            if (!ModelManager.get_BattleDemo().CanUseCommand(ModelManager.get_BattleDemo().get_choosePet(), true)){
                return;
            }
            if (ModelManager.get_BattleDemo()._lockUI){
                return;
            }
            GameDebuger.TODO("if (_guideBattle)\n        {\n            return;\n        }");
            GameDebuger.TODO("GeneralRequestInfo requestInfo = CommandService.changePet(ModelManager.BattleDemo._gameVideo.id, petId, _battleRound);");
            var requestInfo = null;
            var waitNextAction = ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO && UnityEngine.Object.op_Inequality(MonsterManager.get_Instance().GetMyPet(), null);
            ModelManager.get_BattleDemo()._lockUI = true;
            if (waitNextAction){
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    ModelManager.get_BattleDemo()._lockUI = false;
                    ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
                    ModelManager.get_BattleDemo().actionState = BattleDemoModel.ActionState.PET;
                    GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.BATTLE_READY);
                }), $CreateAnonymousDelegate(this, function (e){
                    GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, e);
                }));
            }
            else {
                ServiceRequestAction.requestServerWithSimulate(requestInfo, "", $CreateAnonymousDelegate(this, function (e){
                    ModelManager.get_BattleDemo()._lockUI = false;
                    ModelManager.get_BattleDemo().get_choosePet().NeedReady = false;
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ACTION_REQUEST_SUCCESS);
                }), $CreateAnonymousDelegate(this, function (e){
                    GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ErrorResponse.ctor, GameEvent.BATTLE_FIGHT_CHECK_BATTLE_OVER, e);
                }));
            }
        },
        UpdateBtnStatus$$MonsterController: function (pDeadPet){
            var tDeadPetUID = pDeadPet.GetId();
            if (tDeadPetUID == MonsterManager.get_Instance().GetMyPetId()){
                if (this.mCurrentSelectedCharacterUID == tDeadPetUID)
                    this.OnOptionHeadBtnClick();
                else
                    this.UpdateBtnStatus$$Boolean(true);
            }
            else if (tDeadPetUID == MonsterManager.get_Instance().GetMyHeroId()){
                GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_UI_HIDE_ALL_BUTTON, true);
            }
        },
        UpdateBtnStatus$$Boolean: function (pSummonVisible){
            this.get_View().BtnNextHead_UIButton.get_gameObject().SetActive(!pSummonVisible);
            this.get_View().BtnSummon_UIButton.get_gameObject().SetActive(pSummonVisible);
        },
        OnMonsterOptionStateChanged: function (pMonsterUID, pNowOptionState){
            if (this.mNextCharacterUID != pMonsterUID)
                return;
            if (pNowOptionState == MonsterOptionStateManager.MonsterOptionState.Enable){
                if (ModelManager.get_BattleDemo().get_AutoChangeRoleEnable()){
                    var tMonsterOptionStateManager = MonsterManager.get_Instance().GetMonsterOptionStateByUID(this.mCurrentSelectedCharacterUID);
                    if (null == tMonsterOptionStateManager || tMonsterOptionStateManager.get_OptionState() == MonsterOptionStateManager.MonsterOptionState.Disable){
                        this.OnOptionHeadBtnClick();
                        return;
                    }
                }
                this.ShowOptionEnableEffectForNextHeroBtn(true);
            }
            else
                this.ShowOptionEnableEffectForNextHeroBtn(false);
        },
        ShowOptionEnableEffectForNextHeroBtn: function (pShow){
            if (pShow){
                if (UnityEngine.Object.op_Equality(null, this.mEffectForNextBtn))
                    this.mEffectForNextBtn = SurroundUIEffect.Begin("ui_eff_1007_03_Effect" /* GameEffectConst.EFFECT_SURROUND */, this._view.SpriteNextHead_UISprite, 4, false, 1, 1, null);
                else
                    this.mEffectForNextBtn.SetActive(true);
            }
            else {
                if (UnityEngine.Object.op_Equality(null, this.mEffectForNextBtn))
                    return;
                this.mEffectForNextBtn.SetActive(false);
            }
        },
        UpdateNextHeroEffectEnable: function (){
            var tEnable = false;
            var tMonsterOptionStateManager = MonsterManager.get_Instance().GetMonsterOptionStateByUID(this.mNextCharacterUID);
            if (null != tMonsterOptionStateManager)
                tEnable = tMonsterOptionStateManager.get_OptionState() == MonsterOptionStateManager.MonsterOptionState.Enable;
            this.ShowOptionEnableEffectForNextHeroBtn(tEnable);
        },
        ShowSPSelectEffect: function (pShow){
            if (pShow){
                if (null == this.mSPSelectEffectTweener)
                    this.mSPSelectEffectTweener = DG.Tweening.TweenSettingsExtensions.SetLoops$1$$T$$Int32(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.DOTween.ToAlpha($CreateAnonymousDelegate(this, function (){
                        return this.get_View().SpriteSP_UISprite.get_color();
                    }), $CreateAnonymousDelegate(this, function (x){
                        this.get_View().SpriteSP_UISprite.set_color(x);
                    }), 0, 1), 28), -1 /* -1 */);
                else
                    DG.Tweening.TweenExtensions.Restart(this.mSPSelectEffectTweener, true);
            }
            else {
                if (null != this.mSPSelectEffectTweener)
                    DG.Tweening.TweenExtensions.Pause$1(DG.Tweening.Tweener.ctor, this.mSPSelectEffectTweener);
                this.get_View().SpriteSP_UISprite.set_alpha(1);
            }
        },
        OnBuffStatusChanged: function (pMonsterUID, pBuff, pIsBuffAdded){
            if (pMonsterUID != this.mCurrentSelectedCharacterUID || null == pBuff)
                return;
            this.ShowBuffEffect(pBuff, pIsBuffAdded);
        },
        ShowBuffEffect: function (pSkillBuff, pIsBuffAdded){
            if (null == pSkillBuff)
                return;
            var tSurroundEffectName = ModelManager.get_BattleDemo().GetUIEffectForBuff(pSkillBuff);
            if (System.String.IsNullOrEmpty(tSurroundEffectName)){
                GameDebuger.Log("ShowBuffEffect failed , tSurroundEffectName IsNullOrEmpty ", null);
                return;
            }
            this.ShowBUFFEffect(tSurroundEffectName, pIsBuffAdded);
        },
        ShowBUFFEffect: function (pBuffEffectName, pShow){
            if (pShow){
                if (UnityEngine.Object.op_Inequality(null, this.mEffectForBuff)){
                    if (this.mEffectForBuff.GetEffectName() == pBuffEffectName){
                        this.mEffectForBuff.SetActive(true);
                        return;
                    }
                    this.mEffectForBuff.Dispose();
                }
                this.mEffectForBuff = SurroundUIEffect.Begin(pBuffEffectName, this._view.BtnCurrentHead_UIButton.get_sprite(), 4, false, 1, 1, null);
            }
            else {
                if (UnityEngine.Object.op_Inequality(null, this.mEffectForBuff))
                    this.mEffectForBuff.SetActive(false);
                this.CheckMoreEffect();
            }
        },
        CheckMoreEffect: function (){
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(this.mCurrentSelectedCharacterUID);
            if (UnityEngine.Object.op_Equality(null, tMonsterController))
                return;
            var tSkillBuff = tMonsterController.GetNeedUIEffectBuff();
            if (null != tSkillBuff)
                this.ShowBuffEffect(tSkillBuff, true);
        },
        InitSkillDic: function (){
            this.mSkillCellDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, SkillButtonCellController.ctor);
            var tSkillButtonCellController = null;
            for (var tCounter = 0,tLen = this.get_View().CntrSkill_Transform.get_childCount(); tCounter < tLen; tCounter++){
                tSkillButtonCellController = this.AddSkillCell(this.get_View().CntrSkill_Transform.GetChild(tCounter).get_gameObject());
                tSkillButtonCellController.set_IsSuperSkill(false);
                this.mSkillCellDic.Add(tCounter, tSkillButtonCellController);
            }
            this.mSuperSkill = this.AddSkillCell(this.get_View().PositionSpecialSkill);
            this.mSuperSkill.set_IsSuperSkill(true);
        },
        AddSkillCell: function (pParent){
            var tSkillButtonCellController = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, pParent, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
            tSkillButtonCellController.set_ButtonLabelSpacingAdjustEnable(false);
            tSkillButtonCellController.set_OnClickHandler($CreateDelegate(this, this.OnSkillItemClickHandler));
            tSkillButtonCellController.set_NameLabelVisible(false);
            return tSkillButtonCellController;
        },
        OnSkillItemClickHandler: function (pSkillButtonCellController, pSkill){
            var tMonsterController = ModelManager.get_BattleDemo().get_choosePet();
            if (UnityEngine.Object.op_Equality(null, tMonsterController) || null == pSkillButtonCellController)
                return;
            if (!pSkillButtonCellController.get_IsActionPointEnoughToUseSkill()){
                TipManager.AddTip("当前行动点不足！", false, false, "");
                return;
            }
            this.set_SelectedSkillButtonCellController(pSkillButtonCellController);
            this.ShowSPSelectEffect(null != this.get_SelectedSkillButtonCellController() && this.get_SelectedSkillButtonCellController().get_IsSuperSkill());
            GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(MonsterController.ctor, AppDto.Skill.ctor, GameEvent.BATTLE_UI_SKILL_SELECTED, ModelManager.get_BattleDemo().get_choosePet(), pSkill);
        },
        UpdateSkillDic$$Int64: function (pCharacterUID){
            var tSkillIDList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var tSuperSkillId = 0;
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(pCharacterUID);
            if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                tSkillIDList = tMonsterController.GetSkillIds();
                tSuperSkillId = tMonsterController.GetSuperSkill();
            }
            this.UpdateSkillDic$$List$1$Int32(tSkillIDList);
            this.UpdateSuperSkill(tSuperSkillId);
        },
        UpdateSkillDic$$List$1$Int32: function (pSkillIDList){
            if (null == this.mSkillCellDic || this.mSkillCellDic.get_Count() <= 0)
                return;
            var tEnum = this.mSkillCellDic.GetEnumerator();
            var tSkillId,tIndex;
            var tSkillButtonCellController = null;
            var tLastSelectedSkillButtonCellController = null;
            var tSkillSelected = false;
            while (tEnum.MoveNext()){
                tIndex = tEnum.get_Current().get_Key();
                tSkillButtonCellController = tEnum.get_Current().get_Value();
                tSkillId = (null != pSkillIDList && pSkillIDList.get_Count() > tIndex) ? pSkillIDList.get_Item$$Int32(tIndex) : 0;
                tSkillButtonCellController.UpdateData$$Int32(tSkillId);
                tSkillButtonCellController.UpdateCD(ModelManager.get_BattleDemo().CurrentCommonCDLeft, ModelManager.get_BattleDemo().get_CommonCD());
                if (tSkillSelected)
                    continue;
                if (tSkillButtonCellController.get_IsActionPointEnoughToUseSkill()){
                    tSkillSelected = true;
                    this.OnSkillItemClickHandler(tSkillButtonCellController, tSkillButtonCellController.get_Skill());
                    continue;
                }
                else
                    tSkillButtonCellController.set_Selected(false);
                var tLastSelectedSkillId = ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO ? ModelManager.get_BattleDemo()._lastPlayerSkillId : ModelManager.get_BattleDemo()._lastPetSkillId;
                if (tLastSelectedSkillId == tSkillId)
                    tLastSelectedSkillButtonCellController = tSkillButtonCellController;
            }
            if (!tSkillSelected){
                if (null != tLastSelectedSkillButtonCellController)
                    tSkillButtonCellController = tLastSelectedSkillButtonCellController;
                else {
                    tEnum = this.mSkillCellDic.GetEnumerator();
                    tEnum.MoveNext();
                    tSkillButtonCellController = tEnum.get_Current().get_Value();
                }
                this.OnSkillItemClickHandler(tSkillButtonCellController, tSkillButtonCellController.get_Skill());
            }
        },
        SelectedSkillButtonCellController$$: "SkillButtonCellController",
        get_SelectedSkillButtonCellController: function (){
            return this.mSelectedSkillButtonCellController;
        },
        set_SelectedSkillButtonCellController: function (value){
            if (this.mSelectedSkillButtonCellController == value)
                return;
            if (null != this.mSelectedSkillButtonCellController)
                this.mSelectedSkillButtonCellController.set_Selected(false);
            this.mSelectedSkillButtonCellController = value;
            if (null != this.mSelectedSkillButtonCellController)
                this.mSelectedSkillButtonCellController.set_Selected(true);
        },
        UpdateSelectedSkill: function (pSkillId, pIndex, pSkillButtonCellController){
            var tSelected = pSkillButtonCellController.get_IsActionPointEnoughToUseSkill();
            var tLastSelectedSkillId = ModelManager.get_BattleDemo().actionState == BattleDemoModel.ActionState.HERO ? ModelManager.get_BattleDemo()._lastPlayerSkillId : ModelManager.get_BattleDemo()._lastPetSkillId;
            if (tLastSelectedSkillId <= 0)
                tSelected = pIndex == 0;
            else if (pSkillId > 0)
                tSelected = pSkillId == tLastSelectedSkillId;
            if (tSelected)
                this.OnSkillItemClickHandler(pSkillButtonCellController, pSkillButtonCellController.get_Skill());
            else
                pSkillButtonCellController.set_Selected(false);
        },
        UpdateSuperSkill: function (pSkillId){
            this.mSuperSkill.UpdateData$$Int32(pSkillId);
        },
        OnHideAllBtn: function (pHideAllBtn){
            this.ShowAllSkillHideEffect(true, false);
        },
        OnHideOptionBtn: function (pHideAllSkill, pAlsoHideMainRole){
            this.ShowAllSkillHideEffect(pHideAllSkill, pAlsoHideMainRole);
            this.ShowNextHideEffect(pHideAllSkill);
        },
        ShowAllSkillHideEffect: function (pHideAllSkill, pAlsoHideMainRole){
            if (this.mHideAllSkill == pHideAllSkill)
                return;
            if (null == this.mSkillCellDic || this.mSkillCellDic.get_Count() <= 0)
                return;
            this.mHideAllSkill = pHideAllSkill;
            if (!this.mHideAllSkill)
                this.get_View().SpriteBG_UIWidget.set_alpha(1);
            var tEnum = this.mSkillCellDic.GetEnumerator();
            var tSkillButtonCellController = null;
            var tTargetPosition = UnityEngine.Vector3.get_zero();
            while (tEnum.MoveNext()){
                tSkillButtonCellController = tEnum.get_Current().get_Value();
                tTargetPosition = pHideAllSkill ? this.get_View().BtnCurrentHead_UIButton.get_transform().get_position() : tSkillButtonCellController.get_transform().get_parent().get_position();
                tSkillButtonCellController.TweenHide(tTargetPosition, 0.5 /* SKILL_HIDE_DURATION */, null, true);
            }
            tTargetPosition = pHideAllSkill ? this.get_View().BtnCurrentHead_UIButton.get_transform().get_position() : this.mSuperSkill.get_transform().get_parent().get_position();
            this.mSuperSkill.TweenHide(tTargetPosition, 0.5 /* SKILL_HIDE_DURATION */, $CreateAnonymousDelegate(this, function (pAlsoHideMainRole2){
                if (BaseView.IsViewDestroy(this.get_View()))
                    return;
                if (pAlsoHideMainRole2)
                    this.get_View().SpriteBG_UIWidget.set_alpha(0);
            }), pAlsoHideMainRole);
        }
    }
};
JsTypes.push(BattleSkillPointController);
var BattleTotalDamageHealController = {
    fullname: "BattleTotalDamageHealController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, BattleTotalDamageHealView.ctor);
        },
        AfterInitView: function (){
            this.get_View().CntrLeftDamageInfoUI.SetActive(false);
        },
        RegistCustomEvent: function (){
            GameEventCenter.AddListener$2$$Event$2$$Action$2(MonsterController.MonsterSide.ctor, System.Int32.ctor, GameEvent.BATTLE_UI_UPDATE_ACTION_TOTAL_DAMAGE_OR_HEAL, $CreateDelegate(this, this.UpdateActionTotalDamageOrHealInfoUI$$MonsterSide$$Int32));
        },
        RemoveCustomEvent: function (){
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(MonsterController.MonsterSide.ctor, System.Int32.ctor, GameEvent.BATTLE_UI_UPDATE_ACTION_TOTAL_DAMAGE_OR_HEAL, $CreateDelegate(this, this.UpdateActionTotalDamageOrHealInfoUI$$MonsterSide$$Int32));
        },
        OnDispose: function (){
        },
        UpdateData: function (){
            this.UpdateAllUI();
        },
        UpdateAllUI: function (){
        },
        UpdateActionTotalDamageOrHealInfoUI$$MonsterSide$$Int32: function (pMonsterSide, pDamageOrHeal){
            if (pDamageOrHeal > 0)
                this.UpdateActionTotalDamageOrHealInfoUI$$Int32$$Int32(0, pDamageOrHeal);
            else if (pDamageOrHeal < 0)
                this.UpdateActionTotalDamageOrHealInfoUI$$Int32$$Int32(-pDamageOrHeal, 0);
            else
                this.UpdateActionTotalDamageOrHealInfoUI$$Int32$$Int32(0, 0);
            this.ShowDamageHealEffect();
        },
        UpdateActionTotalDamageOrHealInfoUI$$Int32$$Int32: function (pTotalDamage, pTotalHeal){
            if (pTotalDamage > 0){
                this.get_View().CntrLeftDamageInfoUI.SetActive(true);
                this.get_View().LabelDamageInfo_UILabel.get_gameObject().SetActive(true);
                this.get_View().LabelHealInfo_UILabel.get_gameObject().SetActive(false);
                this.get_View().LabelDamageInfo_UILabel.set_text(pTotalDamage.toString());
            }
            else if (pTotalHeal > 0){
                this.get_View().CntrLeftDamageInfoUI.SetActive(true);
                this.get_View().LabelDamageInfo_UILabel.get_gameObject().SetActive(false);
                this.get_View().LabelHealInfo_UILabel.get_gameObject().SetActive(true);
                this.get_View().LabelHealInfo_UILabel.set_text(pTotalHeal.toString());
            }
            else {
                this.get_View().CntrLeftDamageInfoUI.SetActive(false);
            }
        },
        ShowDamageHealEffect: function (){
            if (this.get_View().CntrLeftDamageInfoUI.get_activeInHierarchy()){
                this.get_View().CntrLeftDamageInfoUIBG_UISprite.set_alpha(1);
                this.get_View().CntrLeftDamageInfoUI_TweenAlpha.ResetToBeginning();
                this.get_View().CntrLeftDamageInfoUI_TweenAlpha.PlayForward();
            }
        }
    }
};
JsTypes.push(BattleTotalDamageHealController);
var SkillButtonCellController = {
    fullname: "SkillButtonCellController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mUsableEffect = null;
            this.mSelected = true;
            this.mNameLabelVisible = true;
            this.mIsSuperSkill = true;
            this.mCDEnable = false;
            this.mCostEnable = false;
            this.mNamePosition = SkillButtonCellController.PivotPosition.CenterBottom;
            this.mDragEnable = true;
            this.mGray = false;
            this.mShowSuperSkillSubscript = false;
            this.mShowEnableEffect = false;
            this._OnClickHandler = null;
            this._Skill = null;
            this._IsActionPointEnoughToUseSkill = false;
            MonolessViewController$1.ctor.call(this, SkillButtonCell.ctor);
        },
        OnClickHandler$$: "System.Action`2[[SkillButtonCellController],[AppDto.Skill]]",
        get_OnClickHandler: function (){
            return this._OnClickHandler;
        },
        set_OnClickHandler: function (value){
            this._OnClickHandler = value;
        },
        Skill$$: "AppDto.Skill",
        get_Skill: function (){
            return this._Skill;
        },
        set_Skill: function (value){
            this._Skill = value;
        },
        IsActionPointEnoughToUseSkill$$: "System.Boolean",
        get_IsActionPointEnoughToUseSkill: function (){
            return this._IsActionPointEnoughToUseSkill;
        },
        set_IsActionPointEnoughToUseSkill: function (value){
            this._IsActionPointEnoughToUseSkill = value;
        },
        AfterInitView: function (){
            this.InitUI();
        },
        RegistCustomEvent: function (){
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, $CreateDelegate(this, this.OnBattleCommonCD));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().SkillButtonCell_UIButton.onClick, $CreateDelegate(this, this.OnBtnClickHandler));
            UIEventListener.Get(this.get_View().SkillButtonCell_UIButton.get_gameObject()).onTooltip = $CreateDelegate(this, this.OnBtnTipHandler);
            this.get_View().EnableEffect_TweenAlpha.SetOnFinished$$Callback($CreateDelegate(this, this.RevertShowEnableStatus));
        },
        RemoveCustomEvent: function (){
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.BATTLE_UI_SKILL_COMMON_CD, $CreateDelegate(this, this.OnBattleCommonCD));
            this.get_View().EnableEffect_TweenAlpha.onFinished.Clear();
        },
        OnDispose: function (){
            this.InitUI();
            GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(AppDto.Skill.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_SHOW_SKILL_TIP, this.get_Skill(), false);
            this.set_OnClickHandler(null);
            this.set_Skill(null);
            if (UnityEngine.Object.op_Inequality(null, this.mUsableEffect)){
                this.mUsableEffect.Dispose();
                this.mUsableEffect = null;
            }
        },
        OnBtnClickHandler: function (){
            if (null != this.get_OnClickHandler())
                this.get_OnClickHandler()(this, this.get_Skill());
        },
        OnBattleCommonCD: function (pPlayerUID, pPassedTime, pTotalTime){
            this.UpdateCD(pPassedTime, pTotalTime);
        },
        OnBtnTipHandler: function (go, pShow){
            GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(AppDto.Skill.ctor, System.Boolean.ctor, GameEvent.BATTLE_UI_SHOW_SKILL_TIP, this.get_Skill(), pShow);
        },
        UpdateData$$Int32: function (pSkillId){
            var tSkill = null;
            if (pSkillId > 0)
                tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, pSkillId);
            this.UpdateData$$Skill(tSkill);
        },
        UpdateData$$Skill: function (pSkill){
            this.set_Skill(pSkill);
            this.set_IsActionPointEnoughToUseSkill(DemoSkillHelper.IsActionPointEnoughToUseSkill(ModelManager.get_BattleDemo().get_choosePet(), pSkill));
            this.UpdateAllUI(pSkill);
        },
        Hide: function (){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            this.get_View().get_gameObject().SetActive(false);
        },
        Show: function (){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            this.get_View().get_gameObject().SetActive(true);
        },
        ButtonLabelSpacingAdjustEnable$$: "System.Boolean",
        get_ButtonLabelSpacingAdjustEnable: function (){
            return null != this.get_View() && this.get_View().SkillIconGroup_ButtonLabelSpacingAdjust.get_enabled();
        },
        set_ButtonLabelSpacingAdjustEnable: function (value){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            this.get_View().SkillIconGroup_ButtonLabelSpacingAdjust.set_enabled(value);
        },
        TweenHide: function (pTargetPosition, pDuration, pCallback, pAutoRelated){
            if (BaseView.IsViewDestroy(this.get_View()))
                return;
            var tTweenPosition = TweenPosition.Begin$$GameObject$$Single$$Vector3$$Boolean(this.get_View().get_gameObject(), pDuration, pTargetPosition, true);
            if (null != pCallback)
                tTweenPosition.SetOnFinished$$Callback($CreateAnonymousDelegate(this, function (){
                    pCallback(pAutoRelated);
                }));
        },
        InitUI: function (){
            this.get_View().SkillMask_UISprite.get_gameObject().SetActive(false);
            this.set_Selected(false);
            this.set_IsSuperSkill(false);
            this.set_NameLabelVisible(false);
            this.set_CDEnable(true);
            this.set_CostEnable(true);
            this.set_IsActionPointEnoughToUseSkill(false);
            this.set_NamePosition(SkillButtonCellController.PivotPosition.CenterBottom);
            this.set_DragEnable(false);
            this.set_Gray(false);
            this.set_ShowSuperSkillSubscript(false);
        },
        UpdateAllUI: function (pSkill){
            if (null == pSkill){
                this.get_View().SkillIconGroup_UIWidget.set_alpha(0);
            }
            else {
                this.get_View().SkillIconGroup_UIWidget.set_alpha(1);
                var tIcon = pSkill.icon;
                var tName = pSkill.name;
                if (this.get_NameLabelVisible())
                    this.get_View().NameLabel_UILabel.set_text(tName);
                UIHelper.SetSkillIcon(this.get_View().SkillIcon_UISprite, tIcon, false);
                this.UpdateUseCost();
            }
        },
        UpdateUseCost: function (){
            if (!this.get_CostEnable())
                return;
            var tPointCost = 0;
            if (null != this.get_Skill()){
                if (this.get_IsSuperSkill()){
                    var tMonsterController = ModelManager.get_BattleDemo().get_choosePet();
                    if (UnityEngine.Object.op_Inequality(null, tMonsterController))
                        tPointCost = DemoSkillHelper.GetSkillSP(tMonsterController.videoSoldier, this.get_Skill().id);
                }
                else
                    tPointCost = DemoSkillHelper.GetSkillActionPoint(this.get_Skill());
            }
            this.get_View().LabelPoint_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color(tPointCost.toString(), this.get_IsActionPointEnoughToUseSkill() ? ColorConstantV3.Color_White : ColorConstantV3.Color_Red2));
        },
        UpdateCD: function (pRemainTime, pTotalDuration){
            if (!this.get_CDEnable() || BaseView.IsViewDestroy(this.get_View()))
                return;
            this.get_View().SkillMask_UISprite.get_gameObject().SetActive(true);
            var tCDName = System.String.Format$$String$$Object("SKILL_CD_COOL_DOWN_INSTANCEID_{0}", this.get_View().get_gameObject().GetInstanceID().toString());
            var tOnCdUpdate = $CreateAnonymousDelegate(this, function (pRemain){
                if (BaseView.IsViewDestroy(this.get_View()))
                    this.RemoveCDTask(tCDName);
                else {
                    this.UpdateSpriteFillAmount(pRemain / pTotalDuration);
                    this.get_View().LabelCD_UILabel.set_text(UnityEngine.Mathf.CeilToInt(pRemain).toString());
                }
            });
            var tOnCdFinish = $CreateAnonymousDelegate(this, function (){
                this.RemoveCDTask(tCDName);
                if (BaseView.IsViewDestroy(this.get_View()))
                    return;
                this.set_ShowEnableEffect(true);
                this.get_View().SkillMask_UISprite.get_gameObject().SetActive(false);
                this.get_View().LabelCD_UILabel.set_text(System.String.Empty);
            });
            var tCdTask = this.AddOrResetCDTask(tCDName, pTotalDuration, tOnCdUpdate, tOnCdFinish, 0.01, false);
            tCdTask.remainTime = pRemainTime;
        },
        UpdateSpriteFillAmount: function (pFillAmount){
            this.get_View().SkillMask_UISprite.set_fillAmount(pFillAmount);
        },
        Selected$$: "System.Boolean",
        get_Selected: function (){
            return this.mSelected;
        },
        set_Selected: function (value){
            if (this.mSelected != value){
                this.mSelected = value;
                this.get_View().SpriteSelected.SetActive(this.mSelected);
            }
        },
        NameLabelVisible$$: "System.Boolean",
        get_NameLabelVisible: function (){
            return this.mNameLabelVisible;
        },
        set_NameLabelVisible: function (value){
            if (this.mNameLabelVisible != value){
                this.mNameLabelVisible = value;
                this.get_View().NameLabel_UILabel.get_gameObject().SetActive(this.mNameLabelVisible);
            }
        },
        IsSuperSkill$$: "System.Boolean",
        get_IsSuperSkill: function (){
            return this.mIsSuperSkill;
        },
        set_IsSuperSkill: function (value){
            if (this.mIsSuperSkill != value){
                this.mIsSuperSkill = value;
                this.UpdateBySuperSkill(this.mIsSuperSkill);
            }
        },
        UpdateBySuperSkill: function (pIsSuperSkill){
            if (pIsSuperSkill){
                GameDebuger.LogError("[TEMP]设置奥义的背景图", null);
            }
            else {
                this.get_View().get_transform().set_localScale(UnityEngine.Vector3.get_one());
            }
        },
        CDEnable$$: "System.Boolean",
        get_CDEnable: function (){
            return this.mCDEnable;
        },
        set_CDEnable: function (value){
            if (this.mCDEnable != value){
                this.mCDEnable = value;
                this.get_View().CntrCD.SetActive(this.mCDEnable);
            }
        },
        CostEnable$$: "System.Boolean",
        get_CostEnable: function (){
            return this.mCostEnable;
        },
        set_CostEnable: function (value){
            if (this.mCostEnable != value){
                this.mCostEnable = value;
                this.get_View().CntrPoint.SetActive(this.mCostEnable);
            }
        },
        ShowUsableEffect: function (pShow){
            if (pShow){
                if (UnityEngine.Object.op_Equality(null, this.mUsableEffect))
                    this.mUsableEffect = SurroundUIEffect.Begin("ui_eff_1007_03_Effect" /* GameEffectConst.EFFECT_SURROUND */, this._view.SkillIcon_UISprite, 4, false, 1, 1, null);
                else
                    this.mUsableEffect.SetActive(true);
            }
            else {
                if (UnityEngine.Object.op_Equality(null, this.mUsableEffect))
                    return;
                this.mUsableEffect.SetActive(false);
            }
        },
        NamePosition$$: "SkillButtonCellController+PivotPosition",
        get_NamePosition: function (){
            return this.mNamePosition;
        },
        set_NamePosition: function (value){
            if (this.mNamePosition != value){
                this.mNamePosition = value;
                this.UpdateNamePosition(this.mNamePosition);
            }
        },
        UpdateNamePosition: function (pPivotPosition){
            var tParent = this.get_View().NamePositionCenterDown_Transform;
            switch (pPivotPosition){
                case SkillButtonCellController.PivotPosition.Bottom:
                    tParent = this.get_View().NamePositionDown_Transform;
                    break;
                case SkillButtonCellController.PivotPosition.CenterBottom:
                    tParent = this.get_View().NamePositionDown_Transform;
                    break;
                default:
                    tParent = this.get_View().NamePositionCenterDown_Transform;
                    break;
            }
            this.get_View().NameLabel_UILabel.get_transform().set_position(tParent.get_position());
        },
        DragEnable$$: "System.Boolean",
        get_DragEnable: function (){
            return this.mDragEnable;
        },
        set_DragEnable: function (value){
            if (this.mDragEnable != value){
                this.mDragEnable = value;
                this.get_View().SkillButtonCell_UIDragScrollView.set_enabled(this.mDragEnable);
            }
        },
        Gray$$: "System.Boolean",
        get_Gray: function (){
            return this.mGray;
        },
        set_Gray: function (value){
            if (this.mGray != value){
                this.mGray = value;
                this.get_View().SkillIcon_UISprite.set_isGrey(this.mGray);
                this.get_View().SkillButtonCell_UIButton.set_isEnabled(!this.mGray);
            }
        },
        ShowSuperSkillSubscript$$: "System.Boolean",
        get_ShowSuperSkillSubscript: function (){
            return this.mShowSuperSkillSubscript;
        },
        set_ShowSuperSkillSubscript: function (value){
            if (this.mShowSuperSkillSubscript != value){
                this.mShowSuperSkillSubscript = value;
                this.get_View().SpriteSuper_UISprite.set_alpha(this.mShowSuperSkillSubscript ? 1 : 0);
            }
        },
        ShowEnableEffect$$: "System.Boolean",
        get_ShowEnableEffect: function (){
            return this.mShowEnableEffect;
        },
        set_ShowEnableEffect: function (value){
            if (this.mShowEnableEffect != value){
                this.mShowEnableEffect = value;
                this.get_View().EnableEffect.SetActive(this.mShowEnableEffect);
                if (this.mShowEnableEffect){
                    this.get_View().EnableEffect_TweenAlpha.ResetToBeginning();
                    this.get_View().EnableEffect_TweenAlpha.PlayForward();
                }
            }
        },
        RevertShowEnableStatus: function (){
            this.set_ShowEnableEffect(false);
        }
    }
};
JsTypes.push(SkillButtonCellController);
var BattleInstController = {
    fullname: "BattleInstController",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleInstController.SYMBOL_INVALID_VIDEO_ROUND = 0;
            BattleInstController.mInstance = new BattleInstController.ctor();
        },
        Instance$$: "BattleInstController",
        get_Instance: function (){
            return BattleInstController.mInstance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._actionList = null;
            this._currentInst = null;
            this._currentInstPlayer = null;
            this._gameVideo = null;
            this._instIndex = 0;
            this._playing = false;
            this._pool = null;
            this._typeMap = null;
            this._skillPlayTimeHelper = null;
            this._startCheckTime = 0;
            this.__playRoundIndex = 0;
            this.__videoRounds = null;
            this.__playRound = null;
            System.Object.ctor.call(this);
        },
        _playRoundIndex$$: "System.Int32",
        get__playRoundIndex: function (){
            return this.__playRoundIndex;
        },
        set__playRoundIndex: function (value){
            this.__playRoundIndex = value;
        },
        _videoRounds$$: "System.Collections.Generic.List`1[[AppDto.VideoRound]]",
        get__videoRounds: function (){
            return this.__videoRounds;
        },
        set__videoRounds: function (value){
            this.__videoRounds = value;
        },
        _playRound$$: "AppDto.VideoRound",
        get__playRound: function (){
            return this.__playRound;
        },
        set__playRound: function (value){
            this.__playRound = value;
        },
        Setup: function (){
            this._actionList = new System.Collections.Generic.List$1.ctor(AppDto.VideoAction.ctor);
            this._typeMap = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, System.Type.ctor);
            this._typeMap.Add(Typeof(AppDto.VideoAction.ctor), Typeof(GameVideoActionPlayer.ctor));
            this._typeMap.Add(Typeof(AppDto.VideoSkillAction.ctor), Typeof(GameVideoGeneralActionPlayer.ctor));
            this._typeMap.Add(Typeof(VideoShoutAction.ctor), Typeof(GameVideoShoutActionPlayer.ctor));
            this._pool = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, BaseBattleInstPlayer.ctor);
            this.set__videoRounds(new System.Collections.Generic.List$1.ctor(AppDto.VideoRound.ctor));
            this._skillPlayTimeHelper = new SkillPlayTimeHelper.ctor();
            GameDebuger.TODO("_monsterShoutHelper = new MonsterShoutHelper();");
            this._instIndex = 0;
            this._playing = false;
            this._startCheckTime = 0;
        },
        PlayGameVideo: function (gv){
            this._gameVideo = gv;
            GameDebuger.TODO("if (_gameVideo is VideoRecord)\n        {\n            VideoRecord record = _gameVideo as VideoRecord;\n            if (record.rounds != null)\n            {\n                _videoRounds = record.rounds.videoRounds;\n            }\n        }");
            this.set__playRoundIndex(0);
            GameDebuger.TODO("_monsterShoutHelper.UpdateRoundStartShout(gv.startStates);\n        _monsterShoutHelper.TriggerRoundStart();");
            this.CheckNextRound();
        },
        IsAutoPlayMode: function (){
            return false;
        },
        PlayNextRound: function (){
            if (this.get__videoRounds().get_Count() > this.get__playRoundIndex()){
                var videoRound = this.get__videoRounds().get_Item$$Int32(this.get__playRoundIndex());
                this.set__playRoundIndex(this.get__playRoundIndex() + 1);
                if (!this.IsBattleValid$$VideoRound(videoRound))
                    return this.PlayNextRound();
                this.PlayGameRound(videoRound);
                return true;
            }
            return false;
        },
        CheckMeiMonster: function (){
            var list = MonsterManager.get_Instance().GetMonsterList(MonsterController.MonsterSide.Enemy, false);
            var hasAntiMei = this.HasAntiMeiFaction();
            for (var i = 0; i < list.get_Count(); i++){
                var mc = list.get_Item$$Int32(i);
                GameDebuger.TODO("if (mc.IsMonster() && mc.videoSoldier.monster.mei)\n            {\n                string shoutStr = \'方寸、盘丝、金山、普陀、蓬莱和地府的弟子不在眼前，真是轻松愉快啊！\';\n\n                if (hasAntiMei)\n                {\n                    shoutStr = \'有方寸、盘丝、金山、普陀、蓬莱和地府的弟子在，真是不爽，还是跑路算了！\';\n                }\n                mc.Shout(shoutStr);\n            }");
            }
        },
        HasAntiMeiFaction: function (){
            var list = MonsterManager.get_Instance().GetMonsterList(MonsterController.MonsterSide.Player, true);
            var tFactionType = AppDto.Faction.FactionType.Unknown;
            for (var i = 0; i < list.get_Count(); i++){
                var mc = list.get_Item$$Int32(i);
                tFactionType = mc.videoSoldier.factionId;
                GameDebuger.TODO("if (tFactionType == Faction.FactionType.FangCun\n                || tFactionType == Faction.FactionType.PanSi\n                || tFactionType == Faction.FactionType.HuaSheng\n                || tFactionType == Faction.FactionType.PuTuo\n                || tFactionType == Faction.FactionType.PengLai\n                || tFactionType == Faction.FactionType.Difu)\n            {\n                return true;\n            }");
            }
            return false;
        },
        PlayGameRound: function (gameRound){
            this._startCheckTime = System.DateTime.get_Now().get_Ticks();
            this.set__playRound(gameRound);
            ModelManager.get_BattleDemo().CurrentVideoRound = this.get__playRound();
            GameDebuger.TODO("_monsterShoutHelper.UpdateMonsterShoutList(gameRound.shoutStates);");
            GameDebuger.TODO("if (gameRound.count == 1)\n        {\n            CheckMeiMonster();\n        }");
            GameDebuger.TODO("if (gameRound.readyAction != null && gameRound.readyAction.targetStateGroups.Count > 0)\n        {\n            _actionList.Add(gameRound.readyAction);\n        }");
            var tIsProgressStateSetted = false;
            for (var i = 0,count = gameRound.skillActions.get_Count(); i < count; i++){
                var action = gameRound.skillActions.get_Item$$Int32(i);
                this._actionList.Add(action);
                if (!tIsProgressStateSetted && action.actionSoldierId == ModelManager.get_Player().GetPlayerId()){
                    tIsProgressStateSetted = true;
                    if (ModelManager.get_BattleDemo().IsPlayerMyHeroOrPet(-1))
                        GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_PROGRESS);
                }
            }
            GameDebuger.TODO("if (gameRound.endAction != null && gameRound.endAction.targetStateGroups.Count > 0)\n        {\n            _actionList.Add(gameRound.endAction);\n        }");
            GameDebuger.TODO("BattleController.Instance.UpdateBattleRound(gameRound);");
            GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.VideoRound.ctor, GameEvent.BATTLE_FIGHT_VIDEOROUND, gameRound);
            GameDebuger.Log(" winId=" + gameRound.winId + " isGameOver=" + gameRound.over, null);
            this.LogBattleInfo(gameRound.debugInfo);
            if (this._playing == false){
                this.PlayNextInst();
            }
        },
        LogBattleInfo: function (debugInfo){
            if (debugInfo != null && GameDebuger.debugIsOn){
                GameDebuger.LogBattleInfo("回合:" + debugInfo.round);
                GameDebuger.LogBattleInfo("准备信息:");
                for (var i = 0,len = debugInfo.readyInfo.get_Count(); i < len; i++){
                    var info = debugInfo.readyInfo.get_Item$$Int32(i);
                    GameDebuger.LogBattleInfo(info);
                }
                GameDebuger.LogBattleInfo("过程信息:");
                for (var i = 0,len = debugInfo.progressInfo.get_Count(); i < len; i++){
                    var info = debugInfo.progressInfo.get_Item$$Int32(i);
                    GameDebuger.LogBattleInfo(info);
                }
            }
        },
        PlayNextInst: function (){
            if (this._instIndex < this._actionList.get_Count()){
                this._playing = true;
                this._currentInst = this._actionList.get_Item$$Int32(this._instIndex);
                this._instIndex++;
                if (this._currentInstPlayer != null){
                    this._currentInstPlayer.Destroy();
                }
                this._currentInstPlayer = this.GetInstPlayer(this._currentInst);
                if (this._currentInstPlayer != null){
                    this._currentInstPlayer.Excute(this._currentInst);
                }
                else {
                    GameDebuger.LogError("不能找到对应的ActionPlayer " + this._currentInst, null);
                }
            }
            else {
                this._playing = false;
                if (this.IsPunishRound(this.get__playRoundIndex())){
                    TipManager.AddTip("战斗时间过长，下回合起双方将接受神罚", false, false, "");
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_CHECKGAMESTATE);
                }
                else {
                    GameDebuger.TODO("if (_playRound.afterEndAction != null && _playRound.afterEndAction.targetStateGroups.Count > 0)\n                {\n                    TipManager.AddTip(\'神罚降世，全体气血减少5%\');\n\n                    //播放天雷特效\n                    OneShotSceneEffect.Begin(GameEffectConst.GetGameEffectPath(GameEffectConst.Effect_TianLei), Vector3.zero, 2f); \n\n                    //提示后，延迟1后执行动作\n                    string timerName = \'PunishDelayTimer\';\n                    JSTimer.Instance.CancelCd(timerName);\n                    JSTimer.Instance.SetupCoolDown(timerName, 1f, null, ()=>{\n                        _actionList.Add(_playRound.afterEndAction);\n                        _playRound.afterEndAction = null;\n                        PlayNextInst();\n                    });\n                }\n                else");
                    GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_CHECKGAMESTATE);
                }
            }
        },
        IsPunishRound: function (round){
            GameDebuger.TODO("if (_gameVideo is PvpVideo)\n        {\n            PvpVideo pvpVideo = _gameVideo as PvpVideo;\n            if (pvpVideo.punishRound > 0 && pvpVideo.punishRound == round)\n            {\n                //只执行一次\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else");
            return false;
        },
        CheckFinish: function (){
            if (this._currentInstPlayer != null){
                this._currentInstPlayer.CheckFinish();
            }
        },
        CheckNextRound: function (){
            if (this._playing){
                return;
            }
            if (BattleManager.DEBUG){
                if (this._startCheckTime > 0){
                    var passTime = System.DateTime.get_Now().get_Ticks() - this._startCheckTime;
                    var elapsedSpan = new System.TimeSpan.ctor$$Int64(passTime);
                    var playTime = this._skillPlayTimeHelper.GetVideoRoundPlayTime(this.get__playRound());
                    GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object("回合{0} 预估播放时长={1}S 真实播放时长={2}S", 1, playTime, elapsedSpan.get_TotalSeconds()), null);
                    this._startCheckTime = 0;
                }
            }
            var playNextRound = this.PlayNextRound();
            if (playNextRound == false){
                if (this.get__playRoundIndex() > 0){
                    GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_BATTLE_ROUND_PLAY_FINISH, _playRoundIndex);");
                }
                else {
                    GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SET_READY_STATE, true);
                }
            }
        },
        RemoveRound: function (pActionPlayerUID){
            if (null == this.get__videoRounds() || this.get__videoRounds().get_Count() <= 0)
                return;
            var tVideoRound = null;
            for (var tCounter = 0; tCounter < this.get__videoRounds().get_Count(); tCounter++){
                tVideoRound = this.get__videoRounds().get_Item$$Int32(tCounter);
                if (this.IsBattleValid$$VideoRound(tVideoRound) && tVideoRound.id == pActionPlayerUID){
                    tVideoRound.battleId = 0;
                    GameEventCenter.SendEvent$1$$Event$1$$T(System.Int64.ctor, GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, tVideoRound.id);
                    return;
                }
            }
        },
        GetCurrentInst: function (){
            return this._currentInst;
        },
        GetInstPlayer: function (action){
            var type = action.GetType();
            var instPlayer = null;
            (function (){
                var $1 = $Ref(null, instPlayer);
                var $res = this._pool.TryGetValue(type, $1);
                instPlayer = $1.Value;
                return $res;
            }).call(this);
            if (instPlayer == null){
                var playerType;
                if (this._typeMap.ContainsKey(type) == false){
                    playerType = this._typeMap.get_Item$$TKey(Typeof(AppDto.VideoAction.ctor));
                }
                else {
                    playerType = this._typeMap.get_Item$$TKey(type);
                }
                var player = Cast(System.Activator.CreateInstance$$Type(playerType), BaseBattleInstPlayer.ctor);
                this._pool.Add(type, player);
                return player;
            }
            return instPlayer;
        },
        FinishInst: function (){
            MonsterManager.get_Instance().ResetPetMessageState();
            if (this._actionList != null){
                this.PlayNextInst();
            }
        },
        AddVideoRound: function (videoRound){
            this.get__videoRounds().Add(videoRound);
            MonsterManager.get_Instance().UpdateOptionState(videoRound.id, MonsterOptionStateManager.MonsterOptionState.Disable);
            GameEventCenter.SendEvent$1$$Event$1$$T(System.Int64.ctor, GameEvent.BATTLE_FIGHT_QUEUE_UPDATE, videoRound.id);
        },
        IsBattleValid$$VideoRound: function (pVideoRound){
            return null != pVideoRound && this.IsBattleValid$$Int64(pVideoRound.battleId);
        },
        IsBattleValid$$Int64: function (pBattleId){
            return pBattleId != 0;
        },
        GetVideoRoundIndexByPlayerUID: function (pPlayerUID){
            if (null == this.get__videoRounds() || this.get__videoRounds().get_Count() <= 0)
                return -1 /* -1 */;
            var tVideoRound = null;
            var tIndex = 0;
            for (var tCounter = 0; tCounter < this.get__videoRounds().get_Count(); tCounter++){
                tVideoRound = this.get__videoRounds().get_Item$$Int32(tCounter);
                if (!this.IsBattleValid$$Int64(tVideoRound.battleId))
                    continue;
                if (tVideoRound.id == pPlayerUID)
                    return tIndex;
                tIndex++;
            }
            return -1 /* -1 */;
        },
        ShowBattleResult: function (){
            if (this._playing){
                var lastRoundIndex = this.get__videoRounds().get_Count();
                if (this.get__playRoundIndex() != lastRoundIndex){
                    this.set__playRoundIndex(lastRoundIndex - 1);
                    var gameRound = this.get__videoRounds().get_Item$$Int32(this.get__playRoundIndex());
                    gameRound.over = true;
                    GameDebuger.TODO("gameRound.readyAction = null;");
                    GameDebuger.TODO("gameRound.endAction = null;");
                    gameRound.skillActions.Clear();
                    this._actionList.Clear();
                    this._instIndex = 0;
                    this.CheckNextRound();
                }
                else {
                    ModelManager.get_BattleDemo()._isGameOver = true;
                    this._instIndex = this._actionList.get_Count();
                }
            }
            else {
                ModelManager.get_BattleDemo()._isGameOver = true;
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_CHECKGAMESTATE);
            }
        },
        Destroy: function (){
            if (this._currentInstPlayer != null){
                this._currentInstPlayer.Destroy();
                this._currentInstPlayer = null;
            }
        }
    }
};
JsTypes.push(BattleInstController);
var BattleManager = {
    fullname: "BattleManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleManager.DEBUG = true;
            BattleManager.BARRAGE_VIDEO_TIMER = "BARRAGE_VIDEO_TIMER";
            BattleManager._instance = new BattleManager.ctor();
            BattleManager.NeedBattleMap = false;
        },
        Instance$$: "BattleManager",
        get_Instance: function (){
            return BattleManager._instance;
        },
        GetUseItemSkillId: function (){
            return DataCache.GetStaticConfigValue(21004 /* AppStaticConfigs.USE_ITEM_SKILL_ID */, 2);
        },
        GetRetreatSkillId: function (){
            return DataCache.GetStaticConfigValue(21005 /* AppStaticConfigs.ESCAPE_SKILL_ID */, 3);
        },
        GetDefenseSkillId: function (){
            GameDebuger.TODO("return DataCache.GetStaticConfigValue (AppStaticConfigs.DEFAULT_DEFENSE_SKILL_ID, 99);");
            return 99;
        },
        GetProtectSkillId: function (){
            GameDebuger.TODO("return DataCache.GetStaticConfigValue (AppStaticConfigs.DEFAULT_PROTECT_SKILL_ID, 98);");
            return 98;
        },
        GetCaptureSkillId: function (){
            GameDebuger.TODO("return DataCache.GetStaticConfigValue (AppStaticConfigs.DEFAULT_CAPTURE_SKILL_ID, 97);");
            return 97;
        },
        GetSummonSkillId: function (){
            GameDebuger.TODO("return DataCache.GetStaticConfigValue (AppStaticConfigs.DEFAULT_SUMMON_SKILL_ID, 96);");
            return 96;
        },
        GetNormalAttackSkillId: function (){
            GameDebuger.TODO("return DataCache.GetStaticConfigValue (AppStaticConfigs.DEFAULT_ACTIVE_SKILL_ID, 95);");
            return 1;
        },
        GetCommandSkillId: function (){
            GameDebuger.LogError("[TEMP]指令技能ID配表", null);
            return 88;
        },
        IsStuntSkill: function (pSkill){
            GameDebuger.LogError("[TEMP]检测是否装备特技", null);
            return null != pSkill && pSkill.id % 2 == 0;
        },
        CheckUseInBattle: function (){
            if (BattleManager.get_Instance().IsInBattle()){
                TipManager.AddTip("战斗中无法使用此功能", false, false, "");
                return false;
            }
            else {
                return true;
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._barrageVideoBeginStamp = 0;
            this._nextGameVideo = null;
            this._currentGameVideo = null;
            this._watchTeamId = 0;
            this._needRefreshBattle = false;
            this._isInBattle = false;
            this._isVideotrap = false;
            this.NeedPlayPlot = false;
            this._waitingRequestVideo = false;
            this.OnBattleFinishCallback = null;
            this.OnBattleEnterCallback = null;
            System.Object.ctor.call(this);
        },
        add_OnBattleFinishCallback: function (value){
            this.OnBattleFinishCallback = $CombineDelegates(this.OnBattleFinishCallback, value);
        },
        remove_OnBattleFinishCallback: function (value){
            this.OnBattleFinishCallback = $RemoveDelegate(this.OnBattleFinishCallback, value);
        },
        add_OnBattleEnterCallback: function (value){
            this.OnBattleEnterCallback = $CombineDelegates(this.OnBattleEnterCallback, value);
        },
        remove_OnBattleEnterCallback: function (value){
            this.OnBattleEnterCallback = $RemoveDelegate(this.OnBattleEnterCallback, value);
        },
        IsInBattle: function (){
            return this._isInBattle;
        },
        isVideotrap: function (){
            return this._isVideotrap;
        },
        PlayBattle: function (gv, watchTeamId, needRefreshBattle, isVideotrap){
            GameDebuger.TODO("_barrageVideo = barrageVideo;");
            this._isVideotrap = isVideotrap;
            GameDebuger.TODO("if (TeamModel.ShowDebugInfo) {\n            GameDebuger.Log (string.Format (\"PlayBattle gvId:{0} type:{1} watchTeamId:{2}\", gv.id, gv.ToString(), watchTeamId).WrapColorWithLog ());\n        }        \n");
            if (gv == null){
                GameDebuger.Log("Can\'t get Video", null);
                this._isInBattle = false;
                return;
            }
            GameDebuger.Log(System.String.Format$$String$$Object$$Object("PlayBattle ateam.Count:{0},bteam.Count:{1}", gv.ateam.teamSoldiers.get_Count(), gv.bteam.teamSoldiers.get_Count()), null);
            if (WorldManager.IsWaitingEnter){
                GameDebuger.Log(System.String.Format$$String$$Object("当前正在进入场景， 先暂存战斗{0}", gv.id), null);
                this._nextGameVideo = gv;
                this._watchTeamId = watchTeamId;
                return;
            }
            this._isInBattle = true;
            if (UnityEngine.Object.op_Inequality(WorldManager.get_Instance().GetHeroView(), null)){
                WorldManager.get_Instance().GetHeroView().StopAndIdle();
            }
            ProxyWorldMapModule.CloseAllModule();
            ModelManager.get_Player().StopAutoNav();
            GameDebuger.TODO("ProxyManager.ActorPopo.CloseAll();\n        if (MainUIViewController.Instance != null)\n        {\n            MainUIViewController.Instance.HideBtnInBattle(false);\n        }\n        ProxyManager.Tournament.Hide();\n        ProxyManager.Tournament.HideV2();\n        ProxyManager.GuildCompetition.OnClickExplandHorBtn(false);\n        ProxyManager.CampWar.OnClickExplandHorBtn(false);\n        ProxyManager.Escort.OnClickExplandHorBtn(false);\n        ProxyManager.SnowWorldBossExpand.Hide();\n        ProxyManager.DaTang.IsOpenTips(true);\n\n        //  进入战斗，关闭副本评级界面\n        ProxyManager.InstanceZones.CloseRank();        \n");
            if (this._currentGameVideo != null){
                var waitingExitBattle = (this._nextGameVideo == null);
                GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object("当前有其它战斗{0}在进行，先暂存战斗{1} waitingExitBattle={2}", this._currentGameVideo.id, gv.id, waitingExitBattle), null);
                this._nextGameVideo = gv;
                this._watchTeamId = watchTeamId;
                if (waitingExitBattle){
                    if (BattleManager.get_Instance().IsInBattle()){
                        GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_EXITBATTLE);
                    }
                    else {
                        this._currentGameVideo = null;
                        this.CheckNextBattle();
                    }
                }
                else {
                    if (BattleManager.get_Instance().IsInBattle()){
                        this._currentGameVideo = null;
                        this.CheckNextBattle();
                    }
                }
                return;
            }
            this.NeedPlayPlot = false;
            this._currentGameVideo = gv;
            this._watchTeamId = watchTeamId;
            this._needRefreshBattle = needRefreshBattle;
            GameDebuger.Log(this.GetBattleInfo(), null);
            GameDebuger.TODO("if (ModelManager.SystemData.battleMapToggle && _currentGameVideo.mapId != 0)");
            if (this._currentGameVideo.mapId != 0){
                BattleManager.NeedBattleMap = true;
                WorldManager.get_Instance().HideScene();
                SceneFadeEffectController.Show$$Video$$Action$1$Int32$$Action(this._currentGameVideo, $CreateDelegate(this, this.OnBattleMapLoaded), $CreateDelegate(this, this.OnFadeOutFinish));
            }
            else {
                BattleManager.NeedBattleMap = false;
                WorldManager.get_Instance().HideScene();
                this.OnBattleMapLoaded(0);
            }
            GameDebuger.TODO("if (_barrageVideo != null && _isVideotrap == true)\n        {\n            JSTimer.Instance.SetupTimer(BARRAGE_VIDEO_TIMER, onBarrageVideoTimerUpdate);\n            _barrageVideoBeginStamp = SystemTimeManager.Instance.GetUTCTimeStamp();\n        }");
        },
        OnBattleMapLoaded: function (sceneResId){
            if (this._needRefreshBattle){
                this._waitingRequestVideo = true;
                GameDebuger.TODO("ServiceRequestAction.requestServer(CommandService.getVideo(_currentGameVideo.id), \", delegate(GeneralResponse e)\n                {\n                    Video video = e as Video;\n\n                    _waitingRequestVideo = false;\n                    GameDebuger.Log(\'CommandService.getVideo response \' + video);\n\n                    if (video == null || _isInBattle == false)  //防止在服务器返回过程中，玩家进行切换人物等操作 强制关闭关卡\n                    {\n                        _isInBattle = false;\n                        _currentGameVideo = null;\n                        WorldManager.Instance.ResumeScene();\n            //                  NGUIFadeInOut.FadeIn ();\n                    }\n                    else\n                    {\n                        _currentGameVideo = video;\n                        StartBattleVideo();\n                    }\n                }, errorResponse =>\n                {\n                    _waitingRequestVideo = false;\n                    _isInBattle = false;\n                    _currentGameVideo = null;\n                    WorldManager.Instance.ResumeScene();\n            //              NGUIFadeInOut.FadeIn ();\n                });");
            }
            else {
                this.StartBattleVideo();
            }
        },
        StartBattleVideo: function (){
            if (this.OnBattleEnterCallback != null){
                this.OnBattleEnterCallback();
            }
            GameDebuger.TODO("ModelManager.Arena.CheckAndTipSupportCrew ();");
            SceneHelper.ToggleSceneEffect(false);
            GameDebuger.TODO("if (_currentGameVideo is GuideVideo)\n        {\n            UIModuleManager.Instance.HideModule(MainUIView.NAME);\n        }");
            GameDebuger.TODO("if (ModelManager.Player.GetPlayer() != null)\n        {\n            ModelManager.Player.GetPlayer().curGameVideo = null;\n        }");
            ProxyBattleDemoModule.Open(this._currentGameVideo);
            GameDebuger.TODO("if (ModelManager.SystemData.battleMapToggle && _currentGameVideo.mapId != 0)");
            if (this._currentGameVideo.mapId != 0){
                WorldManager.get_Instance().PlayCameraAnimator(this._currentGameVideo.mapId, this._currentGameVideo.cameraId - 1);
            }
            this.PlayBattleMusic();
        },
        PlayBattleMusic: function (){
            GameDebuger.TODO("if (_currentGameVideo is PvpVideo)\n        {\n            AudioManager.Instance.PlayMusic(\'music_battle_pvp\');\n        }\n        else if (_currentGameVideo is GuideVideo)\n        {\n            AudioManager.Instance.PlayMusic(\'music_battle_boss\');\n        }\n        else\n        {\n            if (_currentGameVideo is TollgateVideo)\n            {\n                TollgateVideo tollgateVideo = _currentGameVideo as TollgateVideo;\n                if (tollgateVideo.tollgate != null && !string.IsNullOrEmpty(tollgateVideo.tollgate.music))\n                {\n                    AudioManager.Instance.PlayMusic(tollgateVideo.tollgate.music);\n                }\n                else\n                {\n                    AudioManager.Instance.PlayMusic(\'music_battle_pve\');\n                }\n            }\n            else");
            AudioManager.get_Instance().PlayMusic("music_battle_pve", true);
            GameDebuger.TODO("}");
        },
        OnFadeOutFinish: function (){
        },
        CheckNextBattle: function (){
            if (this._nextGameVideo != null){
                var tempWatchId = this._watchTeamId;
                var tempGameVideo = this._nextGameVideo;
                this._watchTeamId = 0;
                this._nextGameVideo = null;
                this.PlayBattle(tempGameVideo, tempWatchId, true, false);
                return true;
            }
            else {
                return false;
            }
        },
        CheckResumeBattle: function (){
        },
        BattleDestroy: function (battleResult, youDead, gameVideo){
            GameDebuger.TODO("BarrageVideoDestory();");
            this._isInBattle = false;
            var go = UnityEngine.GameObject.Find("BattleStage");
            if (UnityEngine.Object.op_Inequality(go, null)){
                UnityEngine.Object.Destroy$$Object(go);
            }
            UnityEngine.PlayerPrefs.Save();
            if (this._nextGameVideo == null){
                GameDebuger.TODO("\nif (MainUIViewController.Instance != null)\n            {\n                MainUIViewController.Instance.HideBtnInBattle(true);\n            }\n            ProxyManager.Tournament.Show();\n            ProxyManager.Tournament.ShowV2();\n            ProxyManager.GuildCompetition.OnClickExplandHorBtn(true);\n            ProxyManager.CampWar.OnClickExplandHorBtn(true);\n            ProxyManager.Escort.OnClickExplandHorBtn(true);\n            ProxyManager.SnowWorldBossExpand.Show();\n            ProxyManager.DaTang.IsOpenTips(false);            \n");
                if (this._watchTeamId == 0){
                    GameDebuger.TODO("ModelManager.SiegeBattle.Resume();");
                    ModelManager.get_Player().CleanPlayerSp();
                    GameDebuger.TODO("if (_currentGameVideo is TollgateVideo && !IsTeamMemberBattle(_currentGameVideo) && battleResult == BattleDemoController.BattleResult.WIN)\n                {\n                    if (GamePlotManager.Instance.TriggerPlot(Plot.PlotTriggerType_TollgateWin, (_currentGameVideo as TollgateVideo).tollgateId))\n                    {\n                        NeedPlayPlot = true;\n                    }\n                }");
                    GameDebuger.TODO("if (_currentGameVideo is GuideVideo)\n                {\n                    if (GamePlotManager.Instance.TriggerPlot(Plot.PlotTriggerType_PlotPlayOver, 1))\n                    {\n                        NeedPlayPlot = true;\n                    }\n                }");
                    GameDebuger.TODO("if (_currentGameVideo is PvpVideo)\n                {\n                    PvpVideo pvpVideo = _currentGameVideo as PvpVideo;\n                    if (pvpVideo.type == PvpVideo.PvpTypeEnum_Challenge)\n                    {\n                        ProxyManager.Arena.Open();\n                    }\n                }\n                else");
                    if (battleResult == BattleDemoController.BattleResult.LOSE){
                        GameDebuger.TODO("if (_currentGameVideo is TollgateVideo)\n                            ProxyManager.LoseGuide.Open(ModelManager.MissionData.IsCurrentMainMissionTollgate(_currentGameVideo as TollgateVideo));\n                        else\n                            ProxyManager.LoseGuide.Open();                        \n\n\n\t\t\t\t\t    if (_currentGameVideo is HundredGrassVideo)\n\t\t\t\t\t    {\n\t\t\t\t\t        string tips = \'{0}失败，{1}进度不变\';\n                            HundredGrassVideo v = _currentGameVideo as HundredGrassVideo;\n                            switch (v.type)\n                            {\n                                case HundredGrassInteractResultNotify.InteractTypeEnum_Water:\n                                    tips = string.Format(tips, \'浇水\', \'浇水\');\n                                    break;\n                                case HundredGrassInteractResultNotify.InteractTypeEnum_Fertilize:\n                                    tips = string.Format(tips, \'施肥\', \'施肥\');\n                                    break;\n                                case HundredGrassInteractResultNotify.InteractTypeEnum_Disinsect:\n                                    tips = string.Format(tips, \'除虫\', \'除虫\');\n                                    break;\n                                default:;\n                                    tips = string.Format(tips, \'未知\', \'未知\');\n                                    break;\n                            }\n                            TipManager.AddTip(tips, false, true);\n                        }");
                    }
                    else if (battleResult == BattleDemoController.BattleResult.Retreat){
                        TipManager.AddTip("由于你逃跑了，战斗失败", false, false, "");
                    }
                    else {
                    }
                }
                if (this.NeedPlayPlot == false && this._nextGameVideo == null){
                    WorldManager.get_Instance().ResumeScene();
                }
                GameDebuger.TODO("SceneHelper.ToggleSceneEffect(ModelManager.SystemData.sceneEffectToggle);");
                GameDebuger.TODO("ModelManager.Team.Resume();");
                if (this.OnBattleFinishCallback != null){
                    GameDebuger.TODO("ModelManager.Team.IsLeaderAutoInBattle = false;");
                    this.OnBattleFinishCallback(battleResult, this._watchTeamId == 0);
                }
                GameDebuger.TODO("if (_watchTeamId == 0)\n            {\n                if (_currentGameVideo is NpcMonsterVideo)\n                {\n                    NpcMonsterVideo tVideo = _currentGameVideo as NpcMonsterVideo;\n                    switch (tVideo.npcSceneMonsterBronType)\n                    {\n                        case NpcMonsterVideo.NpcSceneMonsterBronType_WorldGhost:                    // 世界Boss鬼姬 10个限制 (不论输赢，计算一次)\n                            ModelManager.SceneMonster.HandleOnWorldGhostBattleFinshCallback();\n                            break;\n                    }\n\n                    if (battleResult == BattleDemoController.BattleResult.WIN)\n                    {\n                        switch (tVideo.npcSceneMonsterBronType)\n                        {\n                            case NpcMonsterVideo.NpcSceneMonsterBronType_Star:                      //  星宿10个限制\n                                ModelManager.SceneMonster.HandleOnBattleFinishCallback();\n                                break;\n                            case NpcMonsterVideo.NpcSceneMonsterBronType_WorldBoss:                 // 上古神兽 5个限制\n                                ModelManager.SceneMonster.HandleOnBossBattleFinishCallback();\n                                break;\n                            case NpcMonsterVideo.NpcSceneMonsterBronType_DatangMatchless:           //大唐无双\n                                ModelManager.Tang.AfterBattle(tVideo);\n                                break;\n                        }\n                    }\n                }\n            }");
                this._currentGameVideo = null;
            }
            else {
                this._currentGameVideo = null;
                if (this.CheckNextBattle() == false){
                    if (this.OnBattleFinishCallback != null){
                        GameDebuger.TODO("ModelManager.Team.IsLeaderAutoInBattle = false;");
                        this.OnBattleFinishCallback(battleResult, this._watchTeamId == 0);
                    }
                    GameDebuger.TODO("ModelManager.Marry.IsEmotionalBreakdown();");
                }
            }
            GameDebuger.TODO("@ProxyManager.ActorPopo.CloseAll();");
        },
        IsTeamMemberBattle: function (video){
            var soldier = this.GetTeamLeader(video.ateam);
            if (soldier != null && soldier.playerId != ModelManager.get_Player().GetPlayerId()){
                return true;
            }
            else {
                return false;
            }
        },
        GetTeamLeader: function (team){
            GameDebuger.TODO("for (int i = 0; i < team.fighters.Count; i++)\n        {\n            VideoSoldier videoSoldier = team.fighters[i];\n            if (videoSoldier.characterType == (int)GeneralCharactor.CharactorType.MainCharactor &&\n            videoSoldier.playerId == videoSoldier.leaderPlayerId)\n            {\n                return videoSoldier;\n            }\n        }");
            return null;
        },
        GetCurrentGameVideo: function (){
            return this._currentGameVideo;
        },
        GetCurrentGameVideoId: function (){
            if (this._currentGameVideo == null)
                return 0;
            return this._currentGameVideo.id;
        },
        GetBattleInfo: function (){
            var info = "";
            if (this._currentGameVideo != null){
                info += " 当前战斗:" + this._currentGameVideo.id;
            }
            return info;
        },
        ExitBattle: function (){
            if (BattleManager.get_Instance().IsInBattle()){
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_EXITBATTLE);
            }
        },
        Destroy: function (){
            GameDebuger.TODO("if (BattleController.Instance != null)\n        {\n            BattleController.Instance.Destory();\n        }");
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_DESTROY);
            GameDebuger.TODO("SceneFadeEffectController.Close();");
            var go = UnityEngine.GameObject.Find("BattleStage");
            if (UnityEngine.Object.op_Inequality(go, null)){
                UnityEngine.Object.Destroy$$Object(go);
            }
            UnityEngine.PlayerPrefs.Save();
            if (this._currentGameVideo != null){
                LayerManager.get_Instance().SwitchLayerMode(UIMode.GAME);
            }
            this._isInBattle = false;
            this._currentGameVideo = null;
            this._nextGameVideo = null;
            this._waitingRequestVideo = false;
        },
        PlayGuideBattle: function (){
            var video = new GuideVideo.ctor();
            video.id = 1;
            video.ateam = this.CreateVideoTeam(1, 2);
            GameDebuger.TODO("video.myTeam.playerIds.Add(ModelManager.Player.GetPlayerId());");
            video.needPlayerAutoBattle = false;
            this.AddSoilder(video.ateam, 1001, 1, "孙悟空", 1, 7766, 9999, 0, 0, 0, 0, 20019, AppDto.GeneralCharactor.CharactorType.MainCharactor, true);
            this.AddSoilder(video.ateam, 1002, 7, "落日剑客", 1, 10468, 9999, 0, 0, 0, 0, 20001, AppDto.GeneralCharactor.CharactorType.Crew, false);
            this.AddSoilder(video.ateam, 1003, 2, "明月", 1, 5000, 9999, 0, 0, 0, 0, 4, AppDto.GeneralCharactor.CharactorType.MainCharactor, false);
            this.AddSoilder(video.ateam, 1004, 3, "太子", 1, 4000, 9999, 0, 0, 0, 0, 3, AppDto.GeneralCharactor.CharactorType.MainCharactor, false);
            this.AddSoilder(video.ateam, 1005, 4, "剑侠", 1, 4000, 9999, 0, 0, 0, 0, 1, AppDto.GeneralCharactor.CharactorType.MainCharactor, false);
            this.AddSoilder(video.ateam, 1006, 8, "灵狐", 1, 4000, 9999, 0, 0, 0, 0, 6, AppDto.GeneralCharactor.CharactorType.MainCharactor, false);
            this.AddSoilder(video.ateam, 1007, 5, "熊猫", 1, 4000, 9999, 0, 0, 0, 0, 5, AppDto.GeneralCharactor.CharactorType.MainCharactor, false);
            this.AddSoilder(video.ateam, 1008, 6, "飞燕", 1, 4000, 9999, 0, 0, 0, 0, 2, AppDto.GeneralCharactor.CharactorType.MainCharactor, false);
            video.bteam = this.CreateVideoTeam(2, 7);
            this.AddSoilder(video.bteam, 2001, 7, "魔族侍从", 1, 968, 9999, 0, 0, 12130, 0, 0, AppDto.GeneralCharactor.CharactorType.Monster, false);
            this.AddSoilder(video.bteam, 2002, 8, "魔族侍从", 1, 952, 9999, 0, 0, 12370, 0, 0, AppDto.GeneralCharactor.CharactorType.Monster, false);
            this.AddSoilder(video.bteam, 2003, 4, "吸血鬼", 1, 12153, 9999, 0, 0, 12380, 0, 0, AppDto.GeneralCharactor.CharactorType.Monster, false);
            this.AddSoilder(video.bteam, 2004, 5, "鬼姬", 1, 6749, 9999, 0, 0, 12240, 0, 0, AppDto.GeneralCharactor.CharactorType.Monster, false);
            this.AddSoilder(video.bteam, 2005, 6, "地狱火魂", 1, 6219, 9999, 0, 0, 12310, 0, 0, AppDto.GeneralCharactor.CharactorType.Monster, false);
            this.AddSoilder(video.bteam, 2006, 1, "魔族将军", 1, 22222, 9999, 0, 0, 10001, 0, 0, AppDto.GeneralCharactor.CharactorType.Monster, false);
            this.PlayBattle(video, 0, false, false);
        },
        CreateVideoTeam: function (teamId, formationId){
            var team = new AppDto.VideoTeam.ctor();
            team.formationId = formationId;
            team.teamSoldiers = new System.Collections.Generic.List$1.ctor(AppDto.VideoSoldier.ctor);
            GameDebuger.TODO("team.playerIds = new List<long>();");
            GameDebuger.TODO("team.id = teamId;");
            return team;
        },
        AddSoilder: function (team, id, position, name, grade, hp, mp, sp, magicMana, monsterId, monsterType, charactorId, charactorType, isHero){
            var soldier = new AppDto.VideoSoldier.ctor();
            soldier.id = id;
            soldier.name = name;
            soldier.hp = soldier.maxHp = hp;
            GameDebuger.TODO("soldier.mp = soldier.maxMp = mp;");
            soldier.sp = soldier.maxSp = sp;
            GameDebuger.TODO("soldier.magicMana = /**soldier.magicMana =*/ magicMana;");
            GameDebuger.LogError("[TODO]magicMana => skillPoint", null);
            soldier.actionPoint = magicMana;
            soldier.monsterId = monsterId;
            GameDebuger.TODO("soldier.monsterType = monsterType;");
            soldier.grade = grade;
            soldier.charactorId = charactorId;
            soldier.charactorType = charactorType;
            soldier.defaultSkillId = 1;
            var formation = team.get_formation();
            soldier.position = formation.monsterPosition.get_Item$$Int32(position - 1);
            if (isHero){
                soldier.id = ModelManager.get_Player().GetPlayerId();
                soldier.factionId = ModelManager.get_Player().GetPlayer().factionId;
                soldier.playerDressInfo = new AppDto.PlayerDressInfo.ctor();
                soldier.playerDressInfo.charactorId = charactorId;
            }
            else {
                if (charactorType == AppDto.GeneralCharactor.CharactorType.MainCharactor){
                    soldier.playerDressInfo = new AppDto.PlayerDressInfo.ctor();
                    soldier.playerDressInfo.charactorId = charactorId;
                    GameDebuger.TODO("soldier.playerDressInfo.wpmodel = NewBieGuideManager.GetNewBieWeapon(charactorId);");
                }
            }
            team.teamSoldiers.Add(soldier);
        },
        PlayGuideVideoRound: function (index){
            var vr = null;
            switch (index){
                case 1:
                    vr = this.GetGuideRound1();
                    break;
                case 2:
                    vr = this.GetGuideRound2();
                    break;
                case 3:
                    vr = this.GetGuideRound3();
                    break;
            }
            if (vr != null){
                BattleInstController.get_Instance().AddVideoRound(vr);
                BattleInstController.get_Instance().CheckNextRound();
            }
        },
        GetPlayerDefaultSkillId: function (){
            GameDebuger.TODO("\nFaction faction = ModelManager.Player.GetPlayer().faction;\n        return faction.defaultSkillId;        \n");
            return 1;
        },
        GetGuideRound1: function (){
            var videoRound = new AppDto.VideoRound.ctor();
            videoRound.battleId = 1;
            GameDebuger.TODO("videoRound.count = 1;");
            GameDebuger.TODO("videoRound.over = false;");
            videoRound.skillActions = new System.Collections.Generic.List$1.ctor(AppDto.VideoSkillAction.ctor);
            var skillAction_2001 = this.NewVideoSkillAction(2001, 1, 10);
            this.AddVideoTargetState(skillAction_2001, 1, 1003, -514 /* -514 */, 4486, false, false, false, 0);
            var skillAction_2002 = this.NewVideoSkillAction(2002, 1, 10);
            this.AddVideoTargetState(skillAction_2002, 1, 1002, -547 /* -547 */, 9921, false, false, false, 0);
            var skillAction_2003 = this.NewVideoSkillAction(2003, 1, 10);
            this.AddVideoTargetState(skillAction_2003, 1, 1005, -539 /* -539 */, 3461, false, false, false, 0);
            var skillAction_2004 = this.NewVideoSkillAction(2004, 1, 10);
            this.AddVideoTargetState(skillAction_2004, 1, 1006, -528 /* -528 */, 3472, false, false, false, 0);
            var skillAction_2005 = this.NewVideoSkillAction(2005, 5355, 10);
            this.AddVideoTargetState(skillAction_2005, 1, 1008, -541 /* -541 */, 3459, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2005, 2, 1004, -541 /* -541 */, 3459, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2005, 3, 1001, -541 /* -541 */, 7225, false, false, false, 0);
            var skillAction_2006 = this.NewVideoSkillAction(2006, 5505, 10);
            this.AddVideoTargetState(skillAction_2006, 1, 1003, -1035 /* -1035 */, 3451, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 2, 1002, -1048 /* -1048 */, 8873, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 3, 1001, -1067 /* -1067 */, 6158, false, false, false, 0);
            var skillAction_1001 = this.NewVideoSkillAction(1001, 1111, 10);
            this.AddVideoTargetState(skillAction_1001, 1, 2006, -2166 /* -2166 */, 20056, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1001, 2, 2005, -2411 /* -2411 */, 3808, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1001, 3, 2003, -2344 /* -2344 */, 9809, false, false, false, 0);
            var skillAction_1002 = this.NewVideoSkillAction(1002, 1112, 10);
            this.AddVideoTargetState(skillAction_1002, 1, 2006, -801 /* -801 */, 19255, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1002, 2, 2006, -891 /* -891 */, 18364, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1002, 3, 2006, -981 /* -981 */, 17383, false, false, false, 0);
            var skillAction_1003 = this.NewVideoSkillAction(1003, 1511, 10);
            this.AddVideoTargetState(skillAction_1003, 1, 2001, -968 /* -968 */, 0, true, true, false, 0);
            this.AddVideoTargetState(skillAction_1003, 2, 2002, -952 /* -952 */, 0, true, true, false, 0);
            this.AddVideoTargetState(skillAction_1003, 3, 2006, -616 /* -616 */, 16767, false, false, false, 0);
            var skillAction_1004 = this.NewVideoSkillAction(1004, 1411, 10);
            this.AddVideoTargetState(skillAction_1004, 1, 2003, -954 /* -954 */, 8855, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1004, 2, 2004, -926 /* -926 */, 5823, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1004, 3, 2006, -629 /* -629 */, 16138, false, false, false, 0);
            var skillAction_1008 = this.NewVideoSkillAction(1008, 1311, 10);
            this.AddVideoTargetState(skillAction_1008, 1, 2003, -645 /* -645 */, 8210, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1008, 2, 2004, -621 /* -621 */, 5202, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1008, 3, 2006, -443 /* -443 */, 15695, false, false, false, 0);
            var skillAction_1005 = this.NewVideoSkillAction(1005, 1211, 10);
            this.AddVideoTargetState(skillAction_1005, 1, 2003, -675 /* -675 */, 7535, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1005, 2, 2004, -628 /* -628 */, 4574, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1005, 3, 2006, -483 /* -483 */, 15212, false, false, false, 0);
            var skillAction_1006 = this.NewVideoSkillAction(1006, 1911, 10);
            this.AddVideoTargetState(skillAction_1006, 1, 2003, -657 /* -657 */, 6878, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1006, 2, 2004, -635 /* -635 */, 3939, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1006, 3, 2006, -454 /* -454 */, 14758, false, false, false, 0);
            var skillAction_1007 = this.NewVideoSkillAction(1007, 1711, 10);
            this.AddVideoTargetState(skillAction_1007, 1, 2003, -978 /* -978 */, 5900, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1007, 2, 2004, -997 /* -997 */, 2942, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1007, 3, 2006, -676 /* -676 */, 14082, false, false, false, 0);
            videoRound.skillActions.Add(skillAction_2001);
            videoRound.skillActions.Add(skillAction_2002);
            videoRound.skillActions.Add(skillAction_2003);
            videoRound.skillActions.Add(skillAction_2004);
            videoRound.skillActions.Add(skillAction_2005);
            videoRound.skillActions.Add(this.NewVideoShoutAction(2006, "真是不自量力，竟然妄想与战神大人作对！"));
            videoRound.skillActions.Add(skillAction_2006);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1001, "我无法发挥全部力量，这场战斗就靠你们了！"));
            videoRound.skillActions.Add(skillAction_1001);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1002, "我体内的武士之魂不允许我不战而败！"));
            videoRound.skillActions.Add(skillAction_1002);
            videoRound.skillActions.Add(skillAction_1003);
            videoRound.skillActions.Add(skillAction_1004);
            videoRound.skillActions.Add(skillAction_1008);
            videoRound.skillActions.Add(skillAction_1005);
            videoRound.skillActions.Add(skillAction_1006);
            videoRound.skillActions.Add(skillAction_1007);
            return videoRound;
        },
        GetGuideRound2: function (){
            var videoRound = new AppDto.VideoRound.ctor();
            videoRound.battleId = 1;
            GameDebuger.TODO("videoRound.count = 2;");
            GameDebuger.TODO("videoRound.over = false;");
            videoRound.skillActions = new System.Collections.Generic.List$1.ctor(AppDto.VideoSkillAction.ctor);
            var skillAction_2003 = this.NewVideoSkillAction(2003, 1, 10);
            this.AddVideoTargetState(skillAction_2003, 1, 1005, -539 /* -539 */, 2922, false, false, false, 0);
            var skillAction_2004 = this.NewVideoSkillAction(2004, 1, 10);
            this.AddVideoTargetState(skillAction_2004, 1, 1006, -471 /* -471 */, 3001, false, false, false, 0);
            var skillAction_2005 = this.NewVideoSkillAction(2005, 5355, 10);
            this.AddVideoTargetState(skillAction_2005, 1, 1007, -584 /* -584 */, 3416, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2005, 2, 1004, -584 /* -584 */, 2875, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2005, 3, 1001, -584 /* -584 */, 6641, false, false, false, 0);
            var skillAction_2006 = this.NewVideoSkillAction(2006, 5507, 10);
            this.AddVideoTargetState(skillAction_2006, 1, 1003, -1501 /* -1501 */, 1950, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 2, 1002, -1516 /* -1516 */, 7357, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 3, 1004, -1527 /* -1527 */, 1348, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 4, 1005, -1564 /* -1564 */, 1358, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 5, 1006, -1576 /* -1576 */, 1425, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 6, 1007, -1589 /* -1589 */, 1827, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 7, 1008, -1535 /* -1535 */, 1924, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 8, 1001, -1542 /* -1542 */, 5099, false, false, false, 0);
            var skillAction_1001 = this.NewVideoSkillAction(1001, 1111, 10);
            this.AddVideoTargetState(skillAction_1001, 1, 2006, -2178 /* -2178 */, 11904, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1001, 2, 2003, -2324 /* -2324 */, 3576, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1001, 3, 2005, -2784 /* -2784 */, 1024, false, false, false, 0);
            var skillAction_1002 = this.NewVideoSkillAction(1002, 1116, 10);
            this.AddVideoTargetState(skillAction_1002, 1, 2006, -1024 /* -1024 */, 10880, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1002, 2, 2005, -1024 /* -1024 */, 0, true, true, false, 0);
            this.AddVideoTargetState(skillAction_1002, 3, 2004, -1024 /* -1024 */, 1918, false, false, false, 0);
            var skillAction_1003 = this.NewVideoSkillAction(1003, 1511, 10);
            this.AddVideoTargetState(skillAction_1003, 1, 2003, -838 /* -838 */, 2738, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1003, 2, 2004, -853 /* -853 */, 1065, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1003, 3, 2006, -645 /* -645 */, 10235, false, false, false, 0);
            var skillAction_1004 = this.NewVideoSkillAction(1004, 1412, 10);
            this.AddVideoTargetState(skillAction_1004, 1, 2003, -1369 /* -1369 */, 1369, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1004, 2, 2003, -1369 /* -1369 */, 0, true, false, false, 0);
            var skillAction_1008 = this.NewVideoSkillAction(1008, 1315, 10);
            this.AddVideoTargetState(skillAction_1008, 1, 2004, 0, 1065, false, false, false, 109);
            var skillAction_1005 = this.NewVideoSkillAction(1005, 1212, 10);
            this.AddVideoTargetState(skillAction_1005, 1, 1002, 1268, 8625, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1005, 2, 1005, 1268, 2626, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1005, 3, 1006, 1268, 2693, false, false, false, 0);
            var skillAction_1006 = this.NewVideoSkillAction(1006, 1914, 10);
            this.AddVideoTargetState(skillAction_1006, 1, 2006, -1500 /* -1500 */, 8735, false, false, false, 0);
            this.AddVideoTargetState(skillAction_1006, 1, 1006, 750, 3443, false, false, false, 0);
            var skillAction_1007 = this.NewVideoSkillAction(1007, 1712, 10);
            this.AddVideoTargetState(skillAction_1007, 1, 2004, -1065 /* -1065 */, 0, true, false, false, 0);
            videoRound.skillActions.Add(this.NewVideoShoutAction(2003, "明明可以为我族效力！"));
            videoRound.skillActions.Add(skillAction_2003);
            videoRound.skillActions.Add(this.NewVideoShoutAction(2004, "真是不知好歹！"));
            videoRound.skillActions.Add(skillAction_2004);
            videoRound.skillActions.Add(skillAction_2005);
            videoRound.skillActions.Add(this.NewVideoShoutAction(2006, "战神大人的计划不允许任何人破坏！"));
            videoRound.skillActions.Add(skillAction_2006);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1001, "那样的计划天理不容！"));
            videoRound.skillActions.Add(skillAction_1001);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1002, "集结大家的力量，一定可以渡过难关！"));
            videoRound.skillActions.Add(skillAction_1002);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1003, "就让这大雨冲刷掉世间的黑暗！"));
            videoRound.skillActions.Add(skillAction_1003);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1004, "正义的飞剑将惩罚世间的罪恶！"));
            videoRound.skillActions.Add(skillAction_1004);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1008, "有我在，休想行动！"));
            videoRound.skillActions.Add(skillAction_1008);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1005, "我会在背后守护大家！"));
            videoRound.skillActions.Add(skillAction_1005);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1006, "每个人都有存在的价值与意义！"));
            videoRound.skillActions.Add(skillAction_1006);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1007, "伴随火焰消散吧！"));
            videoRound.skillActions.Add(skillAction_1007);
            return videoRound;
        },
        GetGuideRound3: function (){
            var videoRound = new AppDto.VideoRound.ctor();
            videoRound.battleId = 1;
            GameDebuger.TODO("videoRound.count = 3;");
            videoRound.over = true;
            videoRound.winId = ModelManager.get_Player().GetPlayerId();
            videoRound.skillActions = new System.Collections.Generic.List$1.ctor(AppDto.VideoSkillAction.ctor);
            var skillAction_2006 = this.NewVideoSkillAction(2006, 5506, 10);
            this.AddVideoTargetState(skillAction_2006, 1, 1006, -3443 /* -3443 */, 0, true, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 2, 1001, -4444 /* -4444 */, 655, false, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 3, 1003, -1950 /* -1950 */, 0, true, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 4, 1004, -1348 /* -1348 */, 0, true, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 5, 1005, -2626 /* -2626 */, 0, true, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 6, 1007, -1827 /* -1827 */, 0, true, false, false, 0);
            this.AddVideoTargetState(skillAction_2006, 7, 1008, -1924 /* -1924 */, 0, true, false, false, 0);
            var skillAction_1002 = this.NewVideoSkillAction(1002, 5508, 10);
            this.AddVideoTargetState(skillAction_1002, 1, 2006, -8735 /* -8735 */, 0, true, false, true, 0);
            videoRound.skillActions.Add(this.NewVideoShoutAction(2006, "愚蠢的家伙们！接受吾辈的制裁！"));
            videoRound.skillActions.Add(skillAction_2006);
            videoRound.skillActions.Add(this.NewVideoShoutAction(1002, "该接受制裁的，是你才对！"));
            videoRound.skillActions.Add(skillAction_1002);
            return videoRound;
        },
        NewVideoShoutAction: function (actionSoldierId, shoutContent){
            GameDebuger.TODO("VideoShoutAction action = new VideoShoutAction();\n        action.actionSoldierId = actionSoldierId;\n        action.shoutContent = shoutContent;\n        action.targetStateGroups = new List<VideoTargetStateGroup>();\n        return action;");
            return null;
        },
        NewVideoSkillAction: function (actionSoldierId, skillid, mpSpent){
            var action = new AppDto.VideoSkillAction.ctor();
            action.actionSoldierId = actionSoldierId;
            action.skillId = skillid;
            GameDebuger.TODO("action.mpSpent = mpSpent;");
            return action;
        },
        NewVideoTargetState: function (id, hp, currentHp, currentSp, dead, leave, crit){
            var state = new AppDto.VideoActionTargetState.ctor();
            state.id = id;
            state.dead = dead;
            state.leave = leave;
            state.crit = crit;
            state.hp = hp;
            state.currentHp = currentHp;
            state.currentSp = currentSp;
            return state;
        },
        NewVideoBuffAddTargetState: function (id, dead, leave, buffId){
            var state = new AppDto.VideoBuffAddTargetState.ctor();
            state.id = id;
            state.dead = dead;
            state.leave = leave;
            GameDebuger.TODO("state.round = 2;");
            state.battleBuffId = buffId;
            return state;
        },
        AddVideoTargetState: function (skillAction, groupIndex, id, hp, currentHp, dead, leave, crit, buffId){
            if (skillAction.targetStateGroups == null){
                skillAction.targetStateGroups = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetStateGroup.ctor);
            }
            if (groupIndex > skillAction.targetStateGroups.get_Count()){
                var group = new AppDto.VideoTargetStateGroup.ctor();
                skillAction.targetStateGroups.Add(group);
                group.targetStates = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetState.ctor);
            }
            skillAction.targetStateGroups.get_Item$$Int32(groupIndex - 1).targetStates.Add(this.NewVideoTargetState(id, hp, currentHp, 0, dead, leave, crit));
            if (buffId > 0){
                skillAction.targetStateGroups.get_Item$$Int32(groupIndex - 1).targetStates.Add(this.NewVideoBuffAddTargetState(id, dead, leave, buffId));
            }
        },
        IsCurrentPvpBattle: function (){
            GameDebuger.TODO("return _currentGameVideo is PvpVideo;");
            return false;
        },
        IsChallengePvpBattle: function (){
            if (!this.IsCurrentPvpBattle())
                return false;
            GameDebuger.TODO("PvpVideo video = _currentGameVideo as PvpVideo;\n        if (video.type == PvpVideo.PvpTypeEnum_Challenge)\n            return true;");
            return false;
        },
        IsSupportBarrage: function (){
            GameDebuger.TODO("if (_currentGameVideo is PvpVideo)\n        {\n            PvpVideo pvpVideo = _currentGameVideo as PvpVideo;\n            if (pvpVideo.type != PvpVideo.PvpTypeEnum_Challenge\n            && pvpVideo.type != PvpVideo.PvpTypeEnum_SiegeBattle)\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else if (_currentGameVideo is NpcMonsterVideo)\n        {\n            NpcMonsterVideo npcMonsterVideo = _currentGameVideo as NpcMonsterVideo;\n            if (npcMonsterVideo.npcSceneMonsterBronType == NpcMonsterVideo.NpcSceneMonsterBronType_WorldBoss)\n            {\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        }\n        else\n        {");
            return false;
            GameDebuger.TODO("}");
        }
    }
};
JsTypes.push(BattleManager);
var BattleNetworkHandler = {
    fullname: "BattleNetworkHandler",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._listener = null;
            System.Object.ctor.call(this);
        },
        Setup: function (pBattleDemoController){
            this.StartNotifyListener();
        },
        StartNotifyListener: function (){
            if (this._listener == null){
                this._listener = new MultipleNotifyListener.ctor();
                this._listener.AddNotify(Typeof(AppDto.FighterReadyNotifyDto.ctor));
                this._listener.AddNotify(Typeof(AppDto.ActionPointNotifyDto.ctor));
                this._listener.AddNotify(Typeof(AppDto.ActionPointSpeedNotifyDto.ctor));
                this._listener.AddNotify(Typeof(AppDto.ActionQueueAddNotifyDto.ctor));
                this._listener.AddNotify(Typeof(AppDto.ActionQueueRemoveNotifyDto.ctor));
                this._listener.AddNotify(Typeof(AppDto.VideoRound.ctor));
                this._listener.Start($CreateDelegate(this, this.HandleNotify));
            }
        },
        StopNotifyListener: function (){
            if (this._listener != null){
                this._listener.Stop();
            }
            this._listener = null;
        },
        HandleNotify: function (dto){
            if (Is(dto, AppDto.FighterReadyNotifyDto.ctor)){
                BattleNetworkManager.get_Instance().HandlerSoldierReadyNotify$$FighterReadyNotifyDto(As(dto, AppDto.FighterReadyNotifyDto.ctor));
            }
            else if (Is(dto, AppDto.ActionPointNotifyDto.ctor)){
                BattleNetworkManager.get_Instance().HandlerActionPointNotifyDto(As(dto, AppDto.ActionPointNotifyDto.ctor));
            }
            else if (Is(dto, AppDto.ActionPointSpeedNotifyDto.ctor)){
                BattleNetworkManager.get_Instance().HandlerActionPointSpeedNotifyDto(As(dto, AppDto.ActionPointSpeedNotifyDto.ctor));
            }
            else if (Is(dto, AppDto.ActionQueueAddNotifyDto.ctor)){
            }
            else if (Is(dto, AppDto.ActionQueueRemoveNotifyDto.ctor)){
            }
            else if (Is(dto, AppDto.VideoRound.ctor)){
                BattleNetworkManager.get_Instance().HanderVideoRound(As(dto, AppDto.VideoRound.ctor));
            }
            GameDebuger.TODO("else if (dto is BattleSoldierReadyNotify)\n        {\n        //            BattleController.Instance.HandlerSoldierReadyNotify(dto as BattleSoldierReadyNotify);\n                  BattleNetworkManager.Instance.HandlerSoldierReadyNotify(dto as BattleSoldierReadyNotify);\n        }\n        else if (dto is VideoSoldierUpdateNotify)\n        {\n        //            BattleController.Instance.UpdateSoldiers(dto as VideoSoldierUpdateNotify);\n                  BattleNetworkManager.Instance.UpdateSoldiers(dto as VideoSoldierUpdateNotify);\n        }\n        else if (dto is BattleWatchExit)\n        {\n        //            BattleController.Instance.ExitBattleWithoutReport();\n                  GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_EXITBATTLEWITHOUTREPORT);\n        }\n        else if (dto is BattleForceExitNotify)\n        {\n        //          BattleController.Instance.ExitBattleWithoutReport();\n                  GameEventCenter.SendEvent(GameEvent.BATTLE_FIGHT_EXITBATTLEWITHOUTREPORT);\n        }");
        },
        ShowBattleResult: function (){
            BattleInstController.get_Instance().ShowBattleResult();
        }
    }
};
JsTypes.push(BattleNetworkHandler);
var BattleNetworkManager = {
    fullname: "BattleNetworkManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleNetworkManager.mInstance = new BattleNetworkManager.ctor();
        },
        Instance$$: "BattleNetworkManager",
        get_Instance: function (){
            return BattleNetworkManager.mInstance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        HandleDemoVideo: function (pVideo){
            if (ModelManager.get_BattleDemoConfig().BattleCameraId == 0){
                pVideo.mapId = 0;
            }
            else {
                pVideo.mapId = ModelManager.get_BattleDemoConfig().BattleSceneId;
                pVideo.cameraId = ModelManager.get_BattleDemoConfig().BattleCameraId;
            }
            var watchTeamId = 0;
            if (ModelManager.get_BattleDemoConfig().DemoBattleMode != BATTLE_DEMO_MODEL_S1.Battle){
                watchTeamId = pVideo.bteam.id;
            }
            BattleManager.get_Instance().PlayBattle(pVideo, watchTeamId, false, false);
        },
        HandlerSoldierReadyNotify$$FighterReadyNotifyDto: function (notify){
            GameDebuger.LogBattleInfo(System.String.Format$$String$$Object$Array("收到战士准备就绪通知，玩家id:{0}，技能id：{1}，吟唱时间：{2}，当前时间：{3}", [notify.id.toString(), notify.skillId.toString(), notify.releaseTime.toString(), SystemTimeManager.get_Instance().GetServerTime().ToString$$String("o")]));
            this.HandlerSoldierReadyNotify$$Int64$$Int64$$Single$$Boolean(notify.battleId, notify.id, notify.releaseTime / 1000, false);
        },
        HandlerSoldierReadyNotify$$Int64$$Int64$$Single$$Boolean: function (pBattleId, pId, pReleaseTime, pPlayReverse){
            if (!ModelManager.get_BattleDemo().IsSameBattle(pBattleId))
                return;
            var mc = MonsterManager.get_Instance().GetMonsterFromSoldierID(pId);
            if (UnityEngine.Object.op_Inequality(mc, null)){
                mc.NeedReady = false;
                mc.set_IsInCD(true);
                mc.UpdateSkillCD(pReleaseTime, pPlayReverse, $CreateAnonymousDelegate(this, function (){
                    mc.set_IsInCD(false);
                }));
            }
        },
        HandlerActionPointNotifyDto: function (pActionPointNotifyDto){
            if (null == pActionPointNotifyDto || !ModelManager.get_BattleDemo().IsSameBattle(pActionPointNotifyDto.battleId))
                return;
            GameDebuger.LogBattleInfo(System.String.Format$$String$$Object$$Object$$Object("收到行动点增加通知。玩家id:{0}，行动点：{1}，当前时间：{2}", pActionPointNotifyDto.id.toString(), pActionPointNotifyDto.actionPoint.toString(), SystemTimeManager.get_Instance().GetServerTime().ToString$$String("o")));
            ModelManager.get_BattleDemo().UpdateSkillPoint$$Int64$$Int32$$Boolean(pActionPointNotifyDto.id, pActionPointNotifyDto.actionPoint, true);
        },
        HandlerActionPointSpeedNotifyDto: function (pActionPointNotifyDto){
            if (null == pActionPointNotifyDto || !ModelManager.get_BattleDemo().IsSameBattle(pActionPointNotifyDto.battleId))
                return;
            GameDebuger.LogBattleInfo(System.String.Format$$String$$Object$$Object$$Object("收到行动点增加速度变化通知，玩家playerId:{0}，速度式时间：{1}，当前时间：{2}", pActionPointNotifyDto.playerId.toString(), pActionPointNotifyDto.time.toString(), SystemTimeManager.get_Instance().GetServerTime().ToString$$String("o")));
            ModelManager.get_BattleDemo().UpdateSkillPointAddSpeed(pActionPointNotifyDto.playerId, pActionPointNotifyDto.time, true);
        },
        HanderVideoRound: function (pVideoRound){
            GameDebuger.LogBattleInfo("HanderVideoRound");
            if (null == pVideoRound){
                GameDebuger.LogError("战斗回合数据VideoRound有误，pVideoRound == null ！", null);
                return;
            }
            if (!ModelManager.get_BattleDemo().IsSameBattle(pVideoRound.battleId)){
                return;
            }
            if (null == pVideoRound.skillActions || pVideoRound.skillActions.get_Count() <= 0){
                GameDebuger.LogError(System.String.Format$$String$$Object("[错误]战斗回合数据 VideoRound 有误，VideoRound.skillActions 长度{0}问题！", (pVideoRound.skillActions != null) ? "有" : "无"), null);
                return;
            }
            var tVideoSkillAction = pVideoRound.skillActions.get_Item$$Int32(0);
            if (ModelManager.get_BattleDemo().ShowTip){
                var tString = System.String.Format$$String$$Object$Array("收到回合数据通知，battleId:{0}，是否结束：{1}，actionSoldierId:{2},首技能id：{3}，首技能名字：{4}，中了BUFF的目标的ID：{5}，当前时间：{6}", [pVideoRound.battleId.toString(), pVideoRound.over.toString(), tVideoSkillAction.actionSoldierId, tVideoSkillAction.skillId, tVideoSkillAction.get_skill().name, ModelManager.get_BattleDemo().HasBuff(tVideoSkillAction), SystemTimeManager.get_Instance().GetServerTime().ToString$$String("o")]);
                GameDebuger.LogBattleInfo(tString);
            }
            GameDebuger.TODO("if (pVideoRound.count == 0)\n        {\n            return;\n        }");
            BattleInstController.get_Instance().AddVideoRound(pVideoRound);
            if (BattleManager.get_Instance().IsInBattle()){
                BattleInstController.get_Instance().CheckNextRound();
                GameDebuger.Log("GameVideoRound Notify in Battle", null);
            }
            else {
                GameDebuger.Log("GameVideoRound Notify notin Battle", null);
            }
        }
    }
};
JsTypes.push(BattleNetworkManager);
var MonsterManager = {
    fullname: "MonsterManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            MonsterManager.mInstance = new MonsterManager.ctor();
        },
        Instance$$: "MonsterManager",
        get_Instance: function (){
            return MonsterManager.mInstance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._monsterList = new System.Collections.Generic.List$1.ctor(MonsterController.ctor);
            System.Object.ctor.call(this);
        },
        AddMonsterController: function (pMonsterController){
            if (null == this._monsterList)
                this._monsterList = new System.Collections.Generic.List$1.ctor(MonsterController.ctor);
            if (!this._monsterList.Contains(pMonsterController))
                this._monsterList.Add(pMonsterController);
            return pMonsterController;
        },
        RemoveMonsterController: function (pMonsterController){
            if (null == this._monsterList || this._monsterList.get_Count() <= 0)
                return;
            this._monsterList.Remove(pMonsterController);
        },
        DisposeMonsterList: function (){
            if (null == this._monsterList)
                return;
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                mc.DestroyMe();
            }
            this._monsterList.Clear();
        },
        UpdateMonsterNeedReady$$Boolean$$Func$2$MonsterController$Boolean: function (pNeedReady, pConditionToUpdateNeedReady){
            if (null == this._monsterList || this._monsterList.get_Count() <= 0)
                return;
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var tMonsterController = this._monsterList.get_Item$$Int32(i);
                this.UpdateMonsterNeedReady$$MonsterController$$Boolean$$Func$2$MonsterController$Boolean(tMonsterController, pNeedReady, pConditionToUpdateNeedReady);
            }
        },
        UpdateMonsterNeedReady$$MonsterController$$Boolean$$Func$2$MonsterController$Boolean: function (pMonsterController, pNeedReady, pConditionToUpdateNeedReady){
            if (UnityEngine.Object.op_Equality(null, pMonsterController))
                return;
            if (null == pConditionToUpdateNeedReady || (null != pConditionToUpdateNeedReady && pConditionToUpdateNeedReady(pMonsterController)))
                pMonsterController.NeedReady = pNeedReady;
            GameDebuger.TODO("pMonsterController.UpdateSkillCD();");
        },
        UpdateMonsterNeedReadyLogic: function (pGuideBattle){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (mc.IsPet() || mc.IsChild() || mc.IsMainCharactor()){
                    if (pGuideBattle){
                        if (mc.IsPlayerCtrlCharactor()){
                            mc.NeedReady = true;
                        }
                        else {
                            mc.NeedReady = false;
                        }
                    }
                    else {
                        mc.NeedReady = true;
                    }
                }
                else {
                    mc.NeedReady = false;
                }
            }
        },
        GetMonsterList: function (side, includeDead){
            var ml = new System.Collections.Generic.List$1.ctor(MonsterController.ctor);
            if (this._monsterList == null){
                return ml;
            }
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (UnityEngine.Object.op_Equality(mc, null) || (mc.side != side && side != MonsterController.MonsterSide.None) || (mc.IsDead() && !includeDead)){
                    continue;
                }
                ml.Add(mc);
            }
            return ml;
        },
        ShowSelectEffect: function (choosePet){
            var count = 0;
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (choosePet.battleTargetSelector.CanSetTarget(choosePet, mc)){
                    mc.ShowSelectEffect(choosePet.battleTargetSelector.IsCoupleSKill());
                    count++;
                }
                else {
                    mc.HideSelectEffect();
                }
            }
            return count;
        },
        HideSelectEffect: function (){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                mc.HideSelectEffect();
            }
        },
        GetFirstSelectMonsterUIWidget: function (){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (mc.IsShowSelectEffect()){
                    return mc.GetSelectEffectUIWidget();
                }
            }
            return null;
        },
        GetRandomSelectMonster: function (){
            var tempList = new System.Collections.Generic.List$1.ctor(MonsterController.ctor);
            for (var i = 0; i < this._monsterList.get_Count(); i++){
                if (this._monsterList.get_Item$$Int32(i).IsShowSelectEffect()){
                    tempList.Add(this._monsterList.get_Item$$Int32(i));
                }
            }
            if (tempList.get_Count() > 0){
                return tempList.get_Item$$Int32(UnityEngine.Random.Range$$Int32$$Int32(0, tempList.get_Count()));
            }
            return null;
        },
        GetMyHero: function (){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (mc.IsPlayerMainCharactor()){
                    return mc;
                }
            }
            return null;
        },
        GetMyHeroId: function (){
            var tMonsterController = this.GetMyHero();
            if (UnityEngine.Object.op_Inequality(null, tMonsterController))
                return tMonsterController.GetId();
            return 0;
        },
        GetMyPet: function (){
            if (this._monsterList != null && this._monsterList.get_Count() > 0){
                for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                    var mc = this._monsterList.get_Item$$Int32(i);
                    if (UnityEngine.Object.op_Inequality(mc, null)){
                        if (mc.IsPlayerPet()){
                            return mc;
                        }
                    }
                }
            }
            return null;
        },
        GetMyPetId: function (){
            var tMonsterController = this.GetMyPet();
            if (UnityEngine.Object.op_Inequality(null, tMonsterController))
                return tMonsterController.GetId();
            return 0;
        },
        GetPlayerPet: function (playerId){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (mc.IsPet() && mc.GetPlayerId() == playerId || mc.IsChild() && mc.GetPlayerId() == playerId){
                    return mc;
                }
            }
            return null;
        },
        GetPlayerMainCharactor: function (playerId){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (UnityEngine.Object.op_Inequality(mc, null) && mc.IsMainCharactor() && mc.GetPlayerId() == playerId){
                    return mc;
                }
            }
            return null;
        },
        GetMonsterFromSoldierID: function (id){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if (mc.GetId() == id)
                    return mc;
            }
            return null;
        },
        GetMonsterOptionStateByUID: function (id){
            var tMonsterController = this.GetMonsterFromSoldierID(id);
            if (UnityEngine.Object.op_Inequality(null, tMonsterController))
                return tMonsterController.get_MonsterOptionStateManager();
            return null;
        },
        UpdateBuffState: function (){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                GameDebuger.TODO("if (mc && mc.side == MonsterController.MonsterSide.Player)\n                mc.battleTargetSelector = null;");
                mc.UpdateBuffState();
            }
        },
        ResetPetMessageState: function (){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                mc.ClearMessageEffect(true);
            }
        },
        ShowMonsterName: function (pShow){
            if (null == this._monsterList)
                return;
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                mc.ShowMonsterName(pShow, false);
            }
        },
        showOrder: function (order){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                if ((mc.GetId() == order.targetSoldierId && !order.clearAll) || order.clearAll){
                    mc.showOrder(order.command);
                }
            }
        },
        ShowMonsterPosition: function (side, pGetFormationFunc){
            var formation = pGetFormationFunc(side);
            var monsterList = this.GetMonsterList(side, true);
            for (var i = 0,len = monsterList.get_Count(); i < len; i++){
                var mc = monsterList.get_Item$$Int32(i);
                mc.ShowPosition(formation);
            }
        },
        HideMonsterPosition: function (){
            for (var i = 0,len = this._monsterList.get_Count(); i < len; i++){
                var mc = this._monsterList.get_Item$$Int32(i);
                mc.HidePosition();
            }
        },
        IsInCD: function (pPlayerUID){
            var tMonsterController = this.GetMonsterFromSoldierID(pPlayerUID);
            return UnityEngine.Object.op_Inequality(null, tMonsterController) && tMonsterController.get_IsInCD();
        },
        IsEnemy: function (pPlayerUID){
            var tMonsterController = this.GetMonsterFromSoldierID(pPlayerUID);
            return UnityEngine.Object.op_Inequality(null, tMonsterController) && tMonsterController.side == MonsterController.MonsterSide.Enemy;
        },
        UpdateOptionState: function (pMonsterUID, pMonsterOptionState){
            var tMonsterOptionStateManager = this.GetMonsterOptionStateByUID(pMonsterUID);
            if (null != tMonsterOptionStateManager)
                tMonsterOptionStateManager.set_OptionState(pMonsterOptionState);
        }
    }
};
JsTypes.push(MonsterManager);
var BattleDemoModel = {
    fullname: "BattleDemoModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BattleDemoModel.MAX_SKILL_POINT = 7;
            BattleDemoModel.CD_FOR_INTERRUPT = 0.5;
            BattleDemoModel.ENEMY_ORDER_INFO = "enemy_order_info";
            BattleDemoModel.MY_ORDER_INFO = "my_order_info";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ShowTip = true;
            this.mIsAIManagement = true;
            this._isGameOver = false;
            this.mBattleState = BattleDemoModel.BattleSceneStat.BATTLE_READY;
            this.actionState = BattleDemoModel.ActionState.HERO;
            this._gameVideo = null;
            this.CurrentVideoRound = null;
            this.mSealBuffID = 0;
            this.mMaxQueueNameActionNum = 0;
            this.mMaxQueueDuration = 0;
            this.mCommonCD = 0;
            this.CurrentCommonCDLeft = 0;
            this.mAllVideoSoldierDic = null;
            this._lockUI = false;
            this._lastPetSkillId = 0;
            this._lastPlayerSkillId = 0;
            this._itemUsedCount = 0;
            this._enemyOrderList = null;
            this._myOrderList = null;
            this.LastOrderListOpenState = false;
            this._choosePet = null;
            System.Object.ctor.call(this);
        },
        isAIManagement$$: "System.Boolean",
        get_isAIManagement: function (){
            return this.mIsAIManagement;
        },
        set_isAIManagement: function (value){
            if (this.mIsAIManagement != value){
                this.mIsAIManagement = value;
            }
        },
        battleState$$: "BattleDemoModel+BattleSceneStat",
        get_battleState: function (){
            return this.mBattleState;
        },
        set_battleState: function (value){
            if (this.mBattleState != value){
                this.mBattleState = value;
            }
        },
        SealBuffID$$: "System.Int32",
        get_SealBuffID: function (){
            if (this.mSealBuffID <= 0){
                GameDebuger.LogError("[TEMP]封印BUFF类型，客户端暂时写死，等待服务端生成配置", null);
                this.mSealBuffID = 1;
            }
            return this.mSealBuffID;
        },
        MaxQueueNameActionNum$$: "System.Int32",
        get_MaxQueueNameActionNum: function (){
            if (this.mMaxQueueNameActionNum <= 0){
                GameDebuger.TODO("UI名字队列上允许存在的最多行动数目。");
                this.mMaxQueueNameActionNum = 4;
            }
            return this.mMaxQueueNameActionNum;
        },
        MaxQueueDuration$$: "System.Int32",
        get_MaxQueueDuration: function (){
            if (this.mMaxQueueDuration <= 0){
                GameDebuger.TODO("UI队列上允许存在的最长等待播放时长。");
                this.mMaxQueueDuration = DemoSimulateHelper.SIMULATE_QUEUE_DELAY << 2;
            }
            return this.mMaxQueueDuration;
        },
        CommonCD$$: "System.Single",
        get_CommonCD: function (){
            if (this.mCommonCD <= 0){
                this.mCommonCD = DataCache.GetStaticConfigValue(21000 /* AppStaticConfigs.SKILL_CD_TIME */, 5000) / 1000;
            }
            return this.mCommonCD;
        },
        AllVideoSoldierList$$: "System.Collections.Generic.Dictionary`2[[System.Int64],[AppDto.VideoSoldier]]",
        get_AllVideoSoldierList: function (){
            if (null == this._gameVideo)
                return null;
            if (null == this.mAllVideoSoldierDic || this.mAllVideoSoldierDic.get_Count() <= 0){
                this.mAllVideoSoldierDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, AppDto.VideoSoldier.ctor);
                if (null != this._gameVideo.ateam){
                    var tVideoSoldierList = this._gameVideo.ateam.teamSoldiers;
                    if (null != tVideoSoldierList && tVideoSoldierList.get_Count() > 0){
                        for (var tCounter = 0; tCounter < tVideoSoldierList.get_Count(); tCounter++){
                            this.mAllVideoSoldierDic.Add(tVideoSoldierList.get_Item$$Int32(tCounter).id, tVideoSoldierList.get_Item$$Int32(tCounter));
                        }
                    }
                }
                if (null != this._gameVideo.bteam){
                    var tVideoSoldierList = this._gameVideo.bteam.teamSoldiers;
                    if (null != tVideoSoldierList && tVideoSoldierList.get_Count() > 0){
                        for (var tCounter = 0; tCounter < tVideoSoldierList.get_Count(); tCounter++){
                            if (this.mAllVideoSoldierDic.ContainsKey(tVideoSoldierList.get_Item$$Int32(tCounter).id))
                                continue;
                            this.mAllVideoSoldierDic.Add(tVideoSoldierList.get_Item$$Int32(tCounter).id, tVideoSoldierList.get_Item$$Int32(tCounter));
                        }
                    }
                }
            }
            return this.mAllVideoSoldierDic;
        },
        IsSameBattle: function (pBattleUID){
            var tIsSameBattle = pBattleUID > 0 && null != this._gameVideo && this._gameVideo.id == pBattleUID;
            if (tIsSameBattle)
                return true;
            GameDebuger.LogError(System.String.Format$$String$$Object("[Error]IsSameBattle is false ! pBattleUID :{0}", pBattleUID), null);
            return false;
        },
        choosePet$$: "MonsterController",
        get_choosePet: function (){
            return this._choosePet;
        },
        set_choosePet: function (value){
            this._choosePet = value;
        },
        Setup: function (){
            this.RegisterEvent();
        },
        Dispose: function (){
            this.CurrentVideoRound = null;
            this.mAllVideoSoldierDic = null;
            this.RemoveEvent();
            this.LastOrderListOpenState = false;
            this._myOrderList = null;
            this._enemyOrderList = null;
        },
        InitFightInfo: function (){
            this._isGameOver = false;
            this.set_battleState(BattleDemoModel.BattleSceneStat.BATTLE_READY);
        },
        RegisterEvent: function (){
        },
        RemoveEvent: function (){
        },
        GetVideoSoldier: function (pFighterUID){
            if (pFighterUID <= 0 || null == this.get_AllVideoSoldierList())
                return null;
            var tVideoSoldier = null;
            (function (){
                var $1 = $Ref(null, tVideoSoldier);
                var $res = this.get_AllVideoSoldierList().TryGetValue(pFighterUID, $1);
                tVideoSoldier = $1.Value;
                return $res;
            }).call(this);
            return tVideoSoldier;
        },
        AutoChangeRoleEnable$$: "System.Boolean",
        get_AutoChangeRoleEnable: function (){
            GameDebuger.LogError("[TEMP]系统设置中是否设置了自动切换。", null);
            return true;
        },
        UpdateOptionTarget: function (pMonsterController){
            this.set_choosePet(pMonsterController);
            GameEventCenter.SendEvent$1$$Event$1$$T(MonsterController.ctor, GameEvent.BATTLE_FIGHT_OPTION_TARGET_SELECTED, pMonsterController);
        },
        ExitCommandState: function (){
            if (this.get_battleState() == BattleDemoModel.BattleSceneStat.ON_COMMAND_ENTER)
                GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_COMMAND_EXIT);
        },
        IsInActionQueue: function (pPlayerUID){
            var tCurrentIndex = BattleInstController.get_Instance().get__playRoundIndex();
            var tVideoRoundList = BattleInstController.get_Instance().get__videoRounds();
            if (null == tVideoRoundList || tVideoRoundList.get_Count() <= tCurrentIndex)
                return false;
            var tVideoRound;
            for (var tCounter = tCurrentIndex; tCounter < tVideoRoundList.get_Count(); tCounter++){
                tVideoRound = tVideoRoundList.get_Item$$Int32(tCounter);
                if (!BattleInstController.get_Instance().IsBattleValid$$VideoRound(tVideoRound))
                    continue;
                if (tVideoRound.id == pPlayerUID)
                    return true;
            }
            return false;
        },
        IsSkillPointEnoughToUseSkill: function (pCharacterUID, pSkill){
            if (pCharacterUID <= 0)
                return false;
            if (null == pSkill)
                return true;
            var tSkillPointHas = this.GetSkillPoint(pCharacterUID);
            return pSkill.actionPoint <= tSkillPointHas;
        },
        GetSkillPoint: function (pCharacterUID){
            if (pCharacterUID <= 0 || null == this._gameVideo)
                return 0;
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(pCharacterUID);
            if (UnityEngine.Object.op_Equality(null, tMonsterController) || null == tMonsterController.videoSoldier)
                return 0;
            return tMonsterController.videoSoldier.actionPoint;
        },
        UpdateSkillPoint$$Int64$$Int32$$Boolean: function (pCharacterUID, pSkillPoint, pSendUpdateEvent){
            if (this.UpdateSkillPoint$$Int64$$Int32$$VideoTeam$$Boolean(pCharacterUID, pSkillPoint, this._gameVideo.ateam, pSendUpdateEvent))
                return;
            else
                this.UpdateSkillPoint$$Int64$$Int32$$VideoTeam$$Boolean(pCharacterUID, pSkillPoint, this._gameVideo.bteam, pSendUpdateEvent);
        },
        UpdateSkillPoint$$Int64$$Int32$$VideoTeam$$Boolean: function (pCharacterUID, pSkillPoint, pVideoTeam, pSendUpdateEvent){
            if (pCharacterUID <= 0 || null == pVideoTeam)
                return false;
            var tVideoSoldierList = pVideoTeam.teamSoldiers;
            if (null == tVideoSoldierList || tVideoSoldierList.get_Count() <= 0)
                return false;
            var tVideoSoldier;
            for (var tCounter = 0; tCounter < tVideoSoldierList.get_Count(); tCounter++){
                tVideoSoldier = tVideoSoldierList.get_Item$$Int32(tCounter);
                if (null != tVideoSoldier && tVideoSoldier.id == pCharacterUID){
                    if (pSkillPoint == tVideoSoldier.actionPoint)
                        continue;
                    tVideoSoldier.actionPoint = pSkillPoint;
                    if (pSendUpdateEvent){
                        GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(System.Int64.ctor, System.Int32.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_UPDATE, tVideoSoldier.id, pSkillPoint);
                        GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Int32.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_ADD_TIME_UPDATE, tVideoSoldier.id, tVideoSoldier.time, true);
                    }
                    return true;
                }
            }
            return false;
        },
        UpdateSkillPointAddSpeed: function (pCharacterUID, pTimeToAddOnePoint, pSendUpdateEvent){
            var tVideoSoldier = this.GetVideoSoldier(pCharacterUID);
            tVideoSoldier.time = pTimeToAddOnePoint;
            if (pSendUpdateEvent)
                GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Int32.ctor, System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SKILL_POINT_ADD_TIME_UPDATE, tVideoSoldier.id, pTimeToAddOnePoint, false);
        },
        PreFinishedActionPlayerUID: function (){
            var tPreActionUID = this.CurrentVideoRound.skillActions.get_Item$$Int32(0).actionSoldierId;
            return tPreActionUID;
        },
        DealCDForInterrupttedByDebuff: function (pPreActionUID){
            if (!this.IsInActionQueue(pPreActionUID) || !MonsterManager.get_Instance().IsInCD(pPreActionUID)){
                GameDebuger.Log(System.String.Format$$String$$Object("DealCDForInterrupttedByDebuff canceled , IsInAllActionQueueDic({0}) == false || IsInCD({0}) == false ", pPreActionUID), null);
                return;
            }
            BattleNetworkManager.get_Instance().HandlerSoldierReadyNotify$$Int64$$Int64$$Single$$Boolean(this._gameVideo.id, pPreActionUID, 0.5 /* CD_FOR_INTERRUPT */, true);
            this.ResetOptionStateForInterruptted(pPreActionUID);
        },
        ResetOptionStateForInterruptted: function (pPreActionUID){
            if (!this.IsPlayerMyHeroOrPet(pPreActionUID))
                return;
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.BATTLE_READY);
        },
        IsPlayerMyHeroOrPet: function (pUID){
            if (pUID < 0)
                pUID = ModelManager.get_BattleDemo().PreFinishedActionPlayerUID();
            if (pUID == ModelManager.get_Player().GetPlayerId())
                return true;
            var tMonsterController = MonsterManager.get_Instance().GetMyPet();
            if (UnityEngine.Object.op_Inequality(null, tMonsterController) && tMonsterController.GetId() == pUID)
                return true;
            return false;
        },
        HasBuff: function (pVideoSkillAction){
            if (null == pVideoSkillAction)
                return 0;
            var targetStateGroups = pVideoSkillAction.targetStateGroups;
            if (null == targetStateGroups || targetStateGroups.get_Count() <= 0)
                return 0;
            var tVideoTargetStateGroup = targetStateGroups.get_Item$$Int32(0);
            if (null == tVideoTargetStateGroup)
                return 0;
            var tTargetStates = tVideoTargetStateGroup.targetStates;
            if (null == tTargetStates || tTargetStates.get_Count() <= 0)
                return 0;
            for (var tCounter = 0; tCounter < tTargetStates.get_Count(); tCounter++){
                if (Is(tTargetStates.get_Item$$Int32(tCounter), AppDto.VideoBuffAddTargetState.ctor))
                    return tTargetStates.get_Item$$Int32(tCounter).id;
            }
            return 0;
        },
        CanUseCommand: function (pMonsterController, pShowTip){
            var tTipContent = System.String.Empty;
            if (this.IsOptionTargetDead())
                tTipContent = "操作目标已死亡，操作无法执行！";
            else if (this.CurrentCommonCDLeft > 0)
                tTipContent = "技能正在冷却，暂时无法使用";
            else if (this._isGameOver || this.get_battleState() == BattleDemoModel.BattleSceneStat.ON_WAITING)
                tTipContent = "当前无法操作！";
            else if (UnityEngine.Object.op_Inequality(null, pMonsterController) && pMonsterController.FindBuffByGroup(AppDto.SkillBuff.BuffGroup.SEAL) > 0)
                tTipContent = "正在封印状态，无法使用技能！";
            if (!System.String.IsNullOrEmpty(tTipContent)){
                if (pShowTip)
                    TipManager.AddTip(tTipContent, false, false, "");
                return false;
            }
            return true;
        },
        IsOptionTargetDead: function (){
            var tMonsterController = null;
            if (this.actionState == BattleDemoModel.ActionState.HERO)
                tMonsterController = MonsterManager.get_Instance().GetMyHero();
            else if (this.actionState == BattleDemoModel.ActionState.PET)
                tMonsterController = MonsterManager.get_Instance().GetMyPet();
            if (UnityEngine.Object.op_Equality(null, tMonsterController)){
                GameDebuger.Log(System.String.Format$$String$$Object("IsOptionTargetDead failed , null == tMonsterController , actionState:{0}", this.actionState), null);
                return true;
            }
            return tMonsterController.dead;
        },
        getEnemyOrderList: function (){
            if (this._enemyOrderList == null){
                this._enemyOrderList = new System.Collections.Generic.List$1.ctor(BattleOrderInfo.ctor);
                var dic = DataCache.getDicByCls$1(AppDto.TeamCommand.ctor);
                var info;
                var targetItem;
                var $it9 = dic.GetEnumerator();
                while ($it9.MoveNext()){
                    var pair = $it9.get_Current();
                    if (pair.get_Key() == 2){
                        targetItem = pair.get_Value();
                        if (targetItem != null){
                            for (var i = 0; i < targetItem.command.get_Count(); i++){
                                info = new BattleOrderInfo.ctor();
                                info.type = 2;
                                info.index = i;
                                info.orderName = targetItem.command.get_Item$$Int32(i);
                                this._enemyOrderList.Add(info);
                            }
                        }
                    }
                }
                for (var i = 5; i < 13; i++){
                    info = new BattleOrderInfo.ctor();
                    info.type = 2;
                    info.index = i;
                    info.canEdit = true;
                    if (i == 10){
                        info.isClearButton = true;
                        info.canEdit = false;
                    }
                    if (i == 11){
                        info.isAllClearButton = true;
                        info.canEdit = false;
                    }
                    if (i == 12){
                        info.isAddButton = true;
                        info.canEdit = false;
                    }
                    this._enemyOrderList.Add(info);
                }
                var orders = PlayerPrefsExt.GetPlayerString("enemy_order_info" /* ENEMY_ORDER_INFO */).Split$$Char$Array([","]);
                for (var i = 0; i < orders.length; i++){
                    var added = false;
                    if (!System.String.IsNullOrEmpty(orders[i])){
                        for (var j = 0; j < this._enemyOrderList.get_Count(); j++){
                            if (this._enemyOrderList.get_Item$$Int32(j).canEdit && System.String.IsNullOrEmpty(this._enemyOrderList.get_Item$$Int32(j).orderName) && added == false){
                                this._enemyOrderList.get_Item$$Int32(j).orderName = orders[i];
                                added = true;
                            }
                        }
                    }
                }
            }
            return this._enemyOrderList;
        },
        getMyOrderList: function (){
            if (this._myOrderList == null){
                this._myOrderList = new System.Collections.Generic.List$1.ctor(BattleOrderInfo.ctor);
                var dic = DataCache.getDicByCls$1(AppDto.TeamCommand.ctor);
                var info;
                var targetItem;
                var $it10 = dic.GetEnumerator();
                while ($it10.MoveNext()){
                    var pair = $it10.get_Current();
                    if (pair.get_Key() == 1){
                        targetItem = pair.get_Value();
                        if (targetItem != null){
                            for (var i = 0; i < targetItem.command.get_Count(); i++){
                                info = new BattleOrderInfo.ctor();
                                info.type = 1;
                                info.index = i;
                                info.orderName = targetItem.command.get_Item$$Int32(i);
                                this._myOrderList.Add(info);
                            }
                        }
                    }
                }
                for (var i = 5; i < 13; i++){
                    info = new BattleOrderInfo.ctor();
                    info.type = 1;
                    info.index = i;
                    info.canEdit = true;
                    if (i == 10){
                        info.isClearButton = true;
                        info.canEdit = false;
                    }
                    if (i == 11){
                        info.isAllClearButton = true;
                        info.canEdit = false;
                    }
                    if (i == 12){
                        info.isAddButton = true;
                        info.canEdit = false;
                    }
                    this._myOrderList.Add(info);
                }
                var orders = PlayerPrefsExt.GetPlayerString("my_order_info" /* MY_ORDER_INFO */).Split$$Char$Array([","]);
                for (var i = 0; i < orders.length; i++){
                    var added = false;
                    if (!System.String.IsNullOrEmpty(orders[i])){
                        for (var j = 0; j < this._myOrderList.get_Count(); j++){
                            if (this._myOrderList.get_Item$$Int32(j).canEdit && System.String.IsNullOrEmpty(this._myOrderList.get_Item$$Int32(j).orderName) && added == false){
                                this._myOrderList.get_Item$$Int32(j).orderName = orders[i];
                                added = true;
                            }
                        }
                    }
                }
            }
            return this._myOrderList;
        },
        modifyOrderItemData: function (orderType, index, orderName, add){
            if (orderType == 1){
                for (var i = 0; i < this._myOrderList.get_Count(); i++){
                    if (add){
                        if (System.String.IsNullOrEmpty(this._myOrderList.get_Item$$Int32(i).orderName) && this._myOrderList.get_Item$$Int32(i).canEdit){
                            this._myOrderList.get_Item$$Int32(i).orderName = orderName;
                            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ONORDERLISTUPDATE);
                            this.setOrderToLocal(this._myOrderList, "my_order_info" /* MY_ORDER_INFO */);
                            return;
                        }
                    }
                    else {
                        if (this._myOrderList.get_Item$$Int32(i).index == index){
                            this._myOrderList.get_Item$$Int32(i).orderName = orderName;
                            this.setOrderToLocal(this._myOrderList, "my_order_info" /* MY_ORDER_INFO */);
                        }
                    }
                }
            }
            else {
                for (var i = 0; i < this._enemyOrderList.get_Count(); i++){
                    if (add){
                        if (System.String.IsNullOrEmpty(this._enemyOrderList.get_Item$$Int32(i).orderName) && this._enemyOrderList.get_Item$$Int32(i).canEdit){
                            this._enemyOrderList.get_Item$$Int32(i).orderName = orderName;
                            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ONORDERLISTUPDATE);
                            this.setOrderToLocal(this._enemyOrderList, "enemy_order_info" /* ENEMY_ORDER_INFO */);
                            return;
                        }
                    }
                    else {
                        if (this._enemyOrderList.get_Item$$Int32(i).index == index){
                            this._enemyOrderList.get_Item$$Int32(i).orderName = orderName;
                            this.setOrderToLocal(this._enemyOrderList, "enemy_order_info" /* ENEMY_ORDER_INFO */);
                        }
                    }
                }
            }
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_UI_ONORDERLISTUPDATE);
        },
        setOrderToLocal: function (lists, mark){
            var strs = new Array(5);
            if (lists != null){
                var j = 0;
                for (var i = 0; i < lists.get_Count(); i++){
                    if (lists.get_Item$$Int32(i).canEdit){
                        if (!System.String.IsNullOrEmpty(lists.get_Item$$Int32(i).orderName)){
                            strs[j] = lists.get_Item$$Int32(i).orderName;
                            j++;
                        }
                    }
                }
                var infoStr = System.String.Join$$String$$String$Array(",", strs);
                PlayerPrefsExt.SetPlayerString(mark, infoStr);
            }
        },
        GetUIEffectForBuff: function (pSkillBuff){
            if (null != pSkillBuff)
                return pSkillBuff.uiSurroudEffect;
            else
                return System.String.Empty;
        }
    }
};
JsTypes.push(BattleDemoModel);
var BattleOrderInfo = {
    fullname: "BattleOrderInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.index = 0;
            this.type = 0;
            this.orderName = "";
            this.canEdit = false;
            this.isAddButton = false;
            this.isClearButton = false;
            this.isAllClearButton = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattleOrderInfo);
var MonsterOptionStateManager = {
    fullname: "MonsterOptionStateManager",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Class",
    definition: {
        ctor: function (pMonsterController){
            this.mMonsterController = null;
            this.mMonsterUID = 0;
            this.mOptionState = MonsterOptionStateManager.MonsterOptionState.Disable;
            System.Object.ctor.call(this);
            this.mMonsterController = pMonsterController;
            this.mMonsterUID = this.mMonsterController.GetId();
        },
        OptionState$$: "MonsterOptionStateManager+MonsterOptionState",
        get_OptionState: function (){
            return this.mOptionState;
        },
        set_OptionState: function (value){
            if (this.mOptionState != value){
                if (value == MonsterOptionStateManager.MonsterOptionState.Enable){
                    if (!this.get_OptionEnableEnable())
                        return;
                }
                this.mOptionState = value;
                GameEventCenter.SendEvent$2$$Event$2$$T1$$T2(System.Int64.ctor, MonsterOptionStateManager.MonsterOptionState.ctor, GameEvent.BATTLE_FIGHT_MONSTER_OPTION_STATE_CHANGED, this.mMonsterUID, this.mOptionState);
            }
        },
        OptionEnableEnable$$: "System.Boolean",
        get_OptionEnableEnable: function (){
            return UnityEngine.Object.op_Inequality(null, this.mMonsterController) && !this.mMonsterController.dead;
        },
        Dispose: function (){
            this.set_OptionState(MonsterOptionStateManager.MonsterOptionState.Disable);
            this.mMonsterController = null;
            this.mMonsterUID = 0;
        }
    }
};
JsTypes.push(MonsterOptionStateManager);
var BattleActionQueueItem = {
    fullname: "BattleActionQueueItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleActionQueueItem.NAME = "BattleActionQueueItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.SpriteType_UISprite = null;
            this.LabelName_UILabel = null;
            this.SpriteHightLight_TweenAlpha = null;
            this.LabelDesc_UILabel = null;
            this.SpriteHead_UISprite = null;
            this.SpriteDescBG_UISprite = null;
            this.SpriteType_TweenAlpha = null;
            this.SpriteHightLight = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.SpriteType_UISprite = root.Find("SpriteType").GetComponent$1(UISprite.ctor);
            this.LabelName_UILabel = root.Find("LabelName").GetComponent$1(UILabel.ctor);
            this.SpriteHightLight_TweenAlpha = root.Find("SpriteHightLight").GetComponent$1(TweenAlpha.ctor);
            this.LabelDesc_UILabel = root.Find("CntrDesc/LabelDesc").GetComponent$1(UILabel.ctor);
            this.SpriteHead_UISprite = root.Find("SpriteHead").GetComponent$1(UISprite.ctor);
            this.SpriteDescBG_UISprite = root.Find("CntrDesc/SpriteDescBG").GetComponent$1(UISprite.ctor);
            this.SpriteType_TweenAlpha = root.Find("SpriteType").GetComponent$1(TweenAlpha.ctor);
            this.SpriteHightLight = root.Find("SpriteHightLight").get_gameObject();
        }
    }
};
JsTypes.push(BattleActionQueueItem);
var BattleActionQueueView = {
    fullname: "BattleActionQueueView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleActionQueueView.NAME = "BattleActionQueueView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CntrNamesGrid_UIGrid = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CntrNamesGrid_UIGrid = root.Find("CntrNames/CntrNamesGrid").GetComponent$1(UIGrid.ctor);
        }
    }
};
JsTypes.push(BattleActionQueueView);
var BattleDemoView = {
    fullname: "BattleDemoView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleDemoView.NAME = "BattleDemoView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.RoundTimeLabel_UILabel = null;
            this.RoundWatingSprite = null;
            this.RoundInfoGroup = null;
            this.CancelButton_UIButton = null;
            this.TipSprite = null;
            this.TipLabel_UILabel = null;
            this.Anchor_BottomRight_Transform = null;
            this.Anchor_Top_Transform = null;
            this.Anchor_TopLeft_Transform = null;
            this.Anchor_Center_Transform = null;
            this.Anchor_Bottom_Transform = null;
            this.RetreatButton_UIButton = null;
            this.PositionSkillPointUI = null;
            this.TargetSelectSprite = null;
            this.SpriteHead_UISprite = null;
            this.SkillNameLabel_UILabel = null;
            this.CntrTopProgress = null;
            this.Anchor_BottomRight = null;
            this.CntrDamageHealInfoUI = null;
            this.CntrFormation = null;
            this.RoundLabel_UILabel = null;
            this.AutoButton_UIButton = null;
            this.ManualButton_UIButton = null;
            this.ContainerAutoableBtn = null;
            this.ContainerCommand = null;
            this.BtnCommand_UIButton = null;
            this.CntrOption = null;
            this.CntrSkillTip = null;
            this.SelectTipLabel_UILabel = null;
            this.CntrHead = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.RoundTimeLabel_UILabel = root.Find("MainUI/Anchor_Top/CntrTopTip/RoundTimeLabel").GetComponent$1(UILabel.ctor);
            this.RoundWatingSprite = root.Find("MainUI/Anchor_Top/CntrTopTip/RoundWatingSprite").get_gameObject();
            this.RoundInfoGroup = root.Find("MainUI/Anchor_Top/CntrTopTip/RoundInfoGroup").get_gameObject();
            this.CancelButton_UIButton = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CancelButton").GetComponent$1(UIButton.ctor);
            this.TipSprite = root.Find("MainUI/Anchor_Center/TipSprite").get_gameObject();
            this.TipLabel_UILabel = root.Find("MainUI/Anchor_Center/TipSprite/TipLabel").GetComponent$1(UILabel.ctor);
            this.Anchor_BottomRight_Transform = root.Find("MainUI/Anchor_BottomRight");
            this.Anchor_Top_Transform = root.Find("MainUI/Anchor_Top");
            this.Anchor_TopLeft_Transform = root.Find("MainUI/Anchor_TopLeft");
            this.Anchor_Center_Transform = root.Find("MainUI/Anchor_Center");
            this.Anchor_Bottom_Transform = root.Find("MainUI/Anchor_Bottom");
            this.RetreatButton_UIButton = root.Find("MainUI/Anchor_TopLeft/TopLeftGroup/RetreatButton").GetComponent$1(UIButton.ctor);
            this.PositionSkillPointUI = root.Find("MainUI/Anchor_BottomRight/PositionSkillPointUI").get_gameObject();
            this.TargetSelectSprite = root.Find("MainUI/Anchor_Center/TargetSelectSprite").get_gameObject();
            this.SpriteHead_UISprite = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CntrHead/SpriteHead").GetComponent$1(UISprite.ctor);
            this.SkillNameLabel_UILabel = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CntrTip/SkillNameLabel").GetComponent$1(UILabel.ctor);
            this.CntrTopProgress = root.Find("MainUI/Anchor_Top/CntrTopProgress").get_gameObject();
            this.Anchor_BottomRight = root.Find("MainUI/Anchor_BottomRight").get_gameObject();
            this.CntrDamageHealInfoUI = root.Find("MainUI/Anchor_Top/CntrTopTip/CntrDamageHealInfoUI").get_gameObject();
            this.CntrFormation = root.Find("MainUI/Anchor_Top/CntrTopTip/CntrFormation").get_gameObject();
            this.RoundLabel_UILabel = root.Find("MainUI/Anchor_Top/CntrTopTip/RoundInfoGroup/RoundLabel").GetComponent$1(UILabel.ctor);
            this.AutoButton_UIButton = root.Find("MainUI/Anchor_TopLeft/TopLeftGroup/ContainerAutoableBtn/AutoButton").GetComponent$1(UIButton.ctor);
            this.ManualButton_UIButton = root.Find("MainUI/Anchor_TopLeft/TopLeftGroup/ContainerAutoableBtn/ManualButton").GetComponent$1(UIButton.ctor);
            this.ContainerAutoableBtn = root.Find("MainUI/Anchor_TopLeft/TopLeftGroup/ContainerAutoableBtn").get_gameObject();
            this.ContainerCommand = root.Find("MainUI/Anchor_TopLeft/ContainerCommand").get_gameObject();
            this.BtnCommand_UIButton = root.Find("MainUI/Anchor_TopLeft/ContainerCommand/BtnCommand").GetComponent$1(UIButton.ctor);
            this.CntrOption = root.Find("MainUI/Anchor_BottomRight/CntrOption").get_gameObject();
            this.CntrSkillTip = root.Find("MainUI/Anchor_Bottom/CntrSkillTip").get_gameObject();
            this.SelectTipLabel_UILabel = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CntrTip/SelectTipLabel").GetComponent$1(UILabel.ctor);
            this.CntrHead = root.Find("MainUI/Anchor_Center/TargetSelectSprite/CntrHead").get_gameObject();
        }
    }
};
JsTypes.push(BattleDemoView);
var BattleFormationView = {
    fullname: "BattleFormationView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleFormationView.NAME = "BattleFormationView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.EnemyFormationIconSprite_UISprite = null;
            this.EnemyFormationIconButton_UIButton = null;
            this.PlayerFormationIconSprite_UISprite = null;
            this.PlayerFormationIconButton_UIButton = null;
            this.FormationGroup_UIAnchor = null;
            this.FormationGroup_UISprite = null;
            this.FormationGroup = null;
            this.FormationInfoLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.EnemyFormationIconSprite_UISprite = root.Find("MainContainer/EnemyFormationIconButton/EnemyFormationIconSprite").GetComponent$1(UISprite.ctor);
            this.EnemyFormationIconButton_UIButton = root.Find("MainContainer/EnemyFormationIconButton").GetComponent$1(UIButton.ctor);
            this.PlayerFormationIconSprite_UISprite = root.Find("MainContainer/PlayerFormationIconButton/PlayerFormationIconSprite").GetComponent$1(UISprite.ctor);
            this.PlayerFormationIconButton_UIButton = root.Find("MainContainer/PlayerFormationIconButton").GetComponent$1(UIButton.ctor);
            this.FormationGroup_UIAnchor = root.Find("FormationGroup").GetComponent$1(UIAnchor.ctor);
            this.FormationGroup_UISprite = root.Find("FormationGroup").GetComponent$1(UISprite.ctor);
            this.FormationGroup = root.Find("FormationGroup").get_gameObject();
            this.FormationInfoLabel_UILabel = root.Find("FormationGroup/FormationInfoLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(BattleFormationView);
var BattleOptionView = {
    fullname: "BattleOptionView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleOptionView.NAME = "BattleOptionView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BottomButtonGrid_UIGrid = null;
            this.DefenseButton_UIButton = null;
            this.ItemButton_UIButton = null;
            this.DefaultSkillButton = null;
            this.PlayerDefaultSkillButton = null;
            this.PetDefaultSkillButton = null;
            this.AutoSkillSelectGroup = null;
            this.AutoSkillSelectBg_UISprite = null;
            this.AutoSkillSelectGrid_UIGrid = null;
            this.AutoSkillSelectTipLabel_UILabel = null;
            this.AutoRoundTimeLabel_UILabel = null;
            this.ExitButton_UIButton = null;
            this.BottomButtonGrid2_UIGrid = null;
            this.SkillButton_UIButton = null;
            this.StuntButton_UIButton = null;
            this.AutoSkillSelectGroup_UIPanel = null;
            this.BottomRightBg = null;
            this.BottomButtonGrid_TweenPosition = null;
            this.BtnConfig_UIButton = null;
            this.BtnConfig_TweenPosition = null;
            this.BottomRightAnchor_TweenPosition = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BottomButtonGrid_UIGrid = root.Find("BottomButtonGrid").GetComponent$1(UIGrid.ctor);
            this.DefenseButton_UIButton = root.Find("BottomButtonGrid2/DefenseButton").GetComponent$1(UIButton.ctor);
            this.ItemButton_UIButton = root.Find("BottomButtonGrid/ItemButton").GetComponent$1(UIButton.ctor);
            this.DefaultSkillButton = root.Find("RightButtonGrid/DefaultSkillButton").get_gameObject();
            this.PlayerDefaultSkillButton = root.Find("BottomRightAnchor/PlayerDefaultSkillButton").get_gameObject();
            this.PetDefaultSkillButton = root.Find("BottomRightAnchor/PetDefaultSkillButton").get_gameObject();
            this.AutoSkillSelectGroup = root.Find("BottomRightAnchor/AutoSkillSelectGroup").get_gameObject();
            this.AutoSkillSelectBg_UISprite = root.Find("BottomRightAnchor/AutoSkillSelectGroup/AutoSkillSelectBg").GetComponent$1(UISprite.ctor);
            this.AutoSkillSelectGrid_UIGrid = root.Find("BottomRightAnchor/AutoSkillSelectGroup/AutoSkillSelectGrid").GetComponent$1(UIGrid.ctor);
            this.AutoSkillSelectTipLabel_UILabel = root.Find("BottomRightAnchor/AutoSkillSelectGroup/AutoSkillSelectTipLabel").GetComponent$1(UILabel.ctor);
            this.AutoRoundTimeLabel_UILabel = root.Find("BottomRightAnchor/AutoRoundTimeLabel").GetComponent$1(UILabel.ctor);
            this.ExitButton_UIButton = root.Find("ExitButton").GetComponent$1(UIButton.ctor);
            this.BottomButtonGrid2_UIGrid = root.Find("BottomButtonGrid2").GetComponent$1(UIGrid.ctor);
            this.SkillButton_UIButton = root.Find("BottomButtonGrid2/SkillButton").GetComponent$1(UIButton.ctor);
            this.StuntButton_UIButton = root.Find("BottomButtonGrid/StuntButton").GetComponent$1(UIButton.ctor);
            this.AutoSkillSelectGroup_UIPanel = root.Find("BottomRightAnchor/AutoSkillSelectGroup").GetComponent$1(UIPanel.ctor);
            this.BottomRightBg = root.Find("BottomRightAnchor/BottomRightBg").get_gameObject();
            this.BottomButtonGrid_TweenPosition = root.Find("BottomButtonGrid").GetComponent$1(TweenPosition.ctor);
            this.BtnConfig_UIButton = root.Find("BtnConfig").GetComponent$1(UIButton.ctor);
            this.BtnConfig_TweenPosition = root.Find("BtnConfig").GetComponent$1(TweenPosition.ctor);
            this.BottomRightAnchor_TweenPosition = root.Find("BottomRightAnchor").GetComponent$1(TweenPosition.ctor);
        }
    }
};
JsTypes.push(BattleOptionView);
var BattleOrderCell = {
    fullname: "BattleOrderCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleOrderCell.NAME = "BattleOrderCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OrderButton = null;
            this.btnLabel = null;
            this.smallAddSprite = null;
            this.SpriteSelected = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.OrderButton = root.Find("OrderButton").GetComponent$1(UIButton.ctor);
            this.btnLabel = root.Find("OrderButton/btnLabel").GetComponent$1(UILabel.ctor);
            this.smallAddSprite = root.Find("smallAddSprite").GetComponent$1(UISprite.ctor);
            this.SpriteSelected = root.Find("SpriteSelected").get_gameObject();
        }
    }
};
JsTypes.push(BattleOrderCell);
var BattleOrderEditorCell = {
    fullname: "BattleOrderEditorCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleOrderEditorCell.NAME = "BattleOrderEditorCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OrderButton = null;
            this.panSprite = null;
            this.bigAddSprite = null;
            this.smallAddSprite = null;
            this.btnLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.OrderButton = root.Find("OrderButton").GetComponent$1(UIButton.ctor);
            this.panSprite = root.Find("panSprite").GetComponent$1(UISprite.ctor);
            this.bigAddSprite = root.Find("bigAddSprite").GetComponent$1(UISprite.ctor);
            this.smallAddSprite = root.Find("smallAddSprite").GetComponent$1(UISprite.ctor);
            this.btnLabel = root.Find("OrderButton/btnLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(BattleOrderEditorCell);
var BattleOrderEditorView = {
    fullname: "BattleOrderEditorView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleOrderEditorView.NAME = "BattleOrderEditorView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn = null;
            this.enemyButton = null;
            this.myButton = null;
            this.itemGrid = null;
            this.ScrollView = null;
            this.enemyButtonLabel = null;
            this.myButtonLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseBtn = root.Find("ContentBg/CloseBtn").GetComponent$1(UIButton.ctor);
            this.enemyButton = root.Find("ContentBg/enemyButton").GetComponent$1(UIButton.ctor);
            this.myButton = root.Find("ContentBg/myButton").GetComponent$1(UIButton.ctor);
            this.itemGrid = root.Find("ContentBg/ScrollView/itemGrid").GetComponent$1(UIGrid.ctor);
            this.ScrollView = root.Find("ContentBg/ScrollView").GetComponent$1(UIScrollView.ctor);
            this.enemyButtonLabel = root.Find("ContentBg/enemyButton/enemyButtonLabel").GetComponent$1(UILabel.ctor);
            this.myButtonLabel = root.Find("ContentBg/myButton/myButtonLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(BattleOrderEditorView);
var BattleOrderListView = {
    fullname: "BattleOrderListView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleOrderListView.NAME = "BattleOrderListView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.itemGrid = null;
            this.ContentBg = null;
            this.BgCollider_UIEventTrigger = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.itemGrid = root.Find("ContentBg/itemGrid").GetComponent$1(UIGrid.ctor);
            this.ContentBg = root.Find("ContentBg").GetComponent$1(UISprite.ctor);
            this.BgCollider_UIEventTrigger = root.Find("BgCollider").GetComponent$1(UIEventTrigger.ctor);
        }
    }
};
JsTypes.push(BattleOrderListView);
var BattleSkillPointView = {
    fullname: "BattleSkillPointView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleSkillPointView.NAME = "BattleSkillPointView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BtnCurrentHead_UIButton = null;
            this.SpriteCurrentHead_UISprite = null;
            this.LabelCurSP_UILabel = null;
            this.LabelCurPoint_UILabel = null;
            this.SpriteProgress_UISprite = null;
            this.BtnSummon_UIButton = null;
            this.BtnNextHead_UIButton = null;
            this.SpriteNextHead_UISprite = null;
            this.PositionSpecialSkill = null;
            this.CntrSkill_Transform = null;
            this.SpritePoint_UISprite = null;
            this.SpriteSP_UISprite = null;
            this.CntrNext_TweenPosition = null;
            this.LabelOptionStatus_UILabel = null;
            this.SpriteBG_UIWidget = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BtnCurrentHead_UIButton = root.Find("SpriteBG/CntrChanger/BtnCurrentHead").GetComponent$1(UIButton.ctor);
            this.SpriteCurrentHead_UISprite = root.Find("SpriteBG/CntrChanger/BtnCurrentHead/SpriteCurrentHead").GetComponent$1(UISprite.ctor);
            this.LabelCurSP_UILabel = root.Find("SpriteBG/CntrChanger/CntrLabel/LabelCurSP").GetComponent$1(UILabel.ctor);
            this.LabelCurPoint_UILabel = root.Find("SpriteBG/CntrChanger/CntrLabel/LabelCurPoint").GetComponent$1(UILabel.ctor);
            this.SpriteProgress_UISprite = root.Find("SpriteBG/CntrChanger/BtnCurrentHead/SpriteProgress").GetComponent$1(UISprite.ctor);
            this.BtnSummon_UIButton = root.Find("SpriteBG/CntrChanger/CntrNext/BtnSummon").GetComponent$1(UIButton.ctor);
            this.BtnNextHead_UIButton = root.Find("SpriteBG/CntrChanger/CntrNext/BtnNextHead").GetComponent$1(UIButton.ctor);
            this.SpriteNextHead_UISprite = root.Find("SpriteBG/CntrChanger/CntrNext/BtnNextHead/SpriteNextHead").GetComponent$1(UISprite.ctor);
            this.PositionSpecialSkill = root.Find("SpriteBG/CntrSkillList/PositionSpecialSkill").get_gameObject();
            this.CntrSkill_Transform = root.Find("SpriteBG/CntrSkillList/CntrSkill");
            this.SpritePoint_UISprite = root.Find("SpriteBG/CntrChanger/CntrLabel/LabelCurPoint/SpritePoint").GetComponent$1(UISprite.ctor);
            this.SpriteSP_UISprite = root.Find("SpriteBG/CntrChanger/CntrLabel/LabelCurSP/SpriteSP").GetComponent$1(UISprite.ctor);
            this.CntrNext_TweenPosition = root.Find("SpriteBG/CntrChanger/CntrNext").GetComponent$1(TweenPosition.ctor);
            this.LabelOptionStatus_UILabel = root.Find("SpriteBG/CntrChanger/CntrLabel/LabelOptionStatus").GetComponent$1(UILabel.ctor);
            this.SpriteBG_UIWidget = root.Find("SpriteBG").GetComponent$1(UIWidget.ctor);
        }
    }
};
JsTypes.push(BattleSkillPointView);
var BattleTotalDamageHealView = {
    fullname: "BattleTotalDamageHealView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleTotalDamageHealView.NAME = "BattleTotalDamageHealView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CntrLeftDamageInfoUI = null;
            this.LabelDamageInfo_UILabel = null;
            this.LabelHealInfo_UILabel = null;
            this.CntrLeftDamageInfoUIBG_UISprite = null;
            this.CntrLeftDamageInfoUI_TweenAlpha = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CntrLeftDamageInfoUI = root.Find("CntrLeftDamageInfoUI").get_gameObject();
            this.LabelDamageInfo_UILabel = root.Find("CntrLeftDamageInfoUI/LabelDamageInfo").GetComponent$1(UILabel.ctor);
            this.LabelHealInfo_UILabel = root.Find("CntrLeftDamageInfoUI/LabelHealInfo").GetComponent$1(UILabel.ctor);
            this.CntrLeftDamageInfoUIBG_UISprite = root.Find("CntrLeftDamageInfoUI/CntrLeftDamageInfoUIBG").GetComponent$1(UISprite.ctor);
            this.CntrLeftDamageInfoUI_TweenAlpha = root.Find("CntrLeftDamageInfoUI").GetComponent$1(TweenAlpha.ctor);
        }
    }
};
JsTypes.push(BattleTotalDamageHealView);
var SkillButtonCell = {
    fullname: "SkillButtonCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SkillButtonCell.NAME = "SkillButtonCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.SkillIconGroup_UIWidget = null;
            this.SkillIconGroup = null;
            this.NameLabel_UILabel = null;
            this.SkillIcon_UISprite = null;
            this.SkillButtonCell_UIButton = null;
            this.SkillIconGroup_ButtonLabelSpacingAdjust = null;
            this.LabelCD_UILabel = null;
            this.SpriteSelected = null;
            this.CntrPoint = null;
            this.LabelPoint_UILabel = null;
            this.SkillMask_UISprite = null;
            this.CntrCD = null;
            this.SkillSprite_UISprite = null;
            this.NamePositionCenterDown_Transform = null;
            this.NamePositionDown_Transform = null;
            this.SkillButtonCell_UIDragScrollView = null;
            this.CntrSubscript = null;
            this.SpriteSuper_UISprite = null;
            this.EnableEffect = null;
            this.EnableEffect_TweenAlpha = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.SkillIconGroup_UIWidget = root.Find("SkillIconGroup").GetComponent$1(UIWidget.ctor);
            this.SkillIconGroup = root.Find("SkillIconGroup").get_gameObject();
            this.NameLabel_UILabel = root.Find("SkillIconGroup/NamePositionCenterDown/NameLabel").GetComponent$1(UILabel.ctor);
            this.SkillIcon_UISprite = root.Find("SkillIconGroup/SkillIcon").GetComponent$1(UISprite.ctor);
            this.SkillButtonCell_UIButton = root.GetComponent$1(UIButton.ctor);
            this.SkillIconGroup_ButtonLabelSpacingAdjust = root.Find("SkillIconGroup").GetComponent$1(ButtonLabelSpacingAdjust.ctor);
            this.LabelCD_UILabel = root.Find("SkillIconGroup/CntrCD/LabelCD").GetComponent$1(UILabel.ctor);
            this.SpriteSelected = root.Find("SkillIconGroup/SpriteSelected").get_gameObject();
            this.CntrPoint = root.Find("SkillIconGroup/CntrPoint").get_gameObject();
            this.LabelPoint_UILabel = root.Find("SkillIconGroup/CntrPoint/LabelPoint").GetComponent$1(UILabel.ctor);
            this.SkillMask_UISprite = root.Find("SkillIconGroup/CntrCD/SkillMask").GetComponent$1(UISprite.ctor);
            this.CntrCD = root.Find("SkillIconGroup/CntrCD").get_gameObject();
            this.SkillSprite_UISprite = root.Find("SkillIconGroup/SkillSprite").GetComponent$1(UISprite.ctor);
            this.NamePositionCenterDown_Transform = root.Find("SkillIconGroup/NamePositionCenterDown");
            this.NamePositionDown_Transform = root.Find("SkillIconGroup/NamePositionDown");
            this.SkillButtonCell_UIDragScrollView = root.GetComponent$1(UIDragScrollView.ctor);
            this.CntrSubscript = root.Find("SkillIconGroup/CntrSubscript").get_gameObject();
            this.SpriteSuper_UISprite = root.Find("SkillIconGroup/CntrSubscript/SpriteSuper").GetComponent$1(UISprite.ctor);
            this.EnableEffect = root.Find("SkillIconGroup/CntrEnableEffect/EnableEffect").get_gameObject();
            this.EnableEffect_TweenAlpha = root.Find("SkillIconGroup/CntrEnableEffect/EnableEffect").GetComponent$1(TweenAlpha.ctor);
        }
    }
};
JsTypes.push(SkillButtonCell);
var DemoConfigUIHelper = {
    fullname: "DemoConfigUIHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        InitializePopListWithMonsterJobDesc: function (pUIPopupList, pSelectFirst){
            DemoConfigUIHelper.InitializePopList$1(AppDto.Monster.ctor, pUIPopupList, ModelManager.get_BattleDemoConfig().get_MonsterJobIdDic(), pSelectFirst);
        },
        InitializePopListWithCharacterNames: function (pUIPopupList, pSelectFirst){
            DemoConfigUIHelper.InitializePopList$1(System.Int32.ctor, pUIPopupList, ModelManager.get_BattleDemoConfig().get_CharacterNameDic(), pSelectFirst);
        },
        InitializePopListWithCharacterType: function (pUIPopupList){
            DemoConfigUIHelper.InitializePopList$1(AppDto.GeneralCharactor.CharactorType.ctor, pUIPopupList, ModelManager.get_BattleDemoConfig().get_CharacterTypeDic(), true);
        },
        InitializePopList$1: function (T, pUIPopupList, pDataProvider, pSelectFirst){
            pUIPopupList.Clear();
            var tDataProvider = pDataProvider;
            if (null == tDataProvider || tDataProvider.get_Count() <= 0){
                GameDebuger.LogError(System.String.Format$$String$$Object("InitializePopList {0} failed , pDataProvider is null !", pUIPopupList), null);
                return;
            }
            var tEnum = tDataProvider.GetEnumerator();
            var tInited = false;
            while (tEnum.MoveNext()){
                pUIPopupList.AddItem$$String(tEnum.get_Current().get_Key());
                if (!pSelectFirst || tInited)
                    continue;
                tInited = true;
                pUIPopupList.set_value(tEnum.get_Current().get_Key());
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DemoConfigUIHelper);
var DemoSimulateHelper = {
    fullname: "DemoSimulateHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            DemoSimulateHelper.SKILL_COUNT_TO_SIMULATE_IF_FAILED = 8;
            DemoSimulateHelper.SIMULATE_QUEUE_DELAY = 5000;
            DemoSimulateHelper.SIMULATE_SKILL_CD = 1500;
            DemoSimulateHelper.SIMULATE_FIGHTER_READY_TIME = 30000;
            DemoSimulateHelper.SIMULATE_BATTLE_ID = System.DateTime.get_Now().get_Ticks();
            DemoSimulateHelper.tVideoSoldierList = null;
        },
        SimulateFighterConfigDtoList: function (pIsFriend){
            var tSimulateListLength = 2;
            var tFighterConfigDtoList = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
            var tSkillIdList = DemoSimulateHelper.GetSuitableSkillIdList();
            var tMonsterList = DemoSimulateHelper.SimulateMonsterList();
            var tStartSkillIndex,tStartMonsterIndex;
            var tMonster;
            for (var tCounter = 0; tCounter < tSimulateListLength; tCounter++){
                tStartSkillIndex = pIsFriend ? (tSkillIdList.get_Count() - 1) : 0;
                tStartMonsterIndex = pIsFriend ? (tMonsterList.get_Count() - 1) : 0;
                tMonster = tMonsterList.get_Item$$Int32(tStartMonsterIndex);
                try{
                    tFighterConfigDtoList.Add(DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Monster$$Int32(tMonster, 1));
                }
                catch(e){
                    GameDebuger.LogException(e, null);
                }
                tSkillIdList.RemoveAt(tStartSkillIndex);
                tMonsterList.RemoveAt(tStartMonsterIndex);
            }
            DemoSimulateHelper.AddPlayerMainCharacter(tFighterConfigDtoList, pIsFriend);
            return tFighterConfigDtoList;
        },
        SimulateFighterConfigDtoListByIDList: function (pIDList, pIsFriend){
            if (null == pIDList || pIDList.get_Count() <= 0){
                GameDebuger.LogError("SimulateFighterConfigDtoListByIDList failed , pIDList is invalid !", null);
                return null;
            }
            var tFighterConfigDtoList = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
            var tID;
            for (var tCounter = 0; tCounter < pIDList.get_Count(); tCounter++){
                tID = pIDList.get_Item$$Int32(tCounter);
                tFighterConfigDtoList.Add(DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Int32$$Int32(tID, 1));
            }
            DemoSimulateHelper.AddPlayerMainCharacter(tFighterConfigDtoList, pIsFriend);
            return tFighterConfigDtoList;
        },
        SimulateFightersConfigDtoByIDList: function (pEnemyIDList, pFriendIDList){
            var tFightersConfigDto = new AppDto.FightersConfigDto.ctor();
            tFightersConfigDto.ateam = DemoSimulateHelper.SimulateFighterConfigDtoListByIDList(pEnemyIDList, true);
            tFightersConfigDto.bteam = DemoSimulateHelper.SimulateFighterConfigDtoListByIDList(pFriendIDList, false);
            return tFightersConfigDto;
        },
        AddPlayerMainCharacter: function (pFighterConfigDtoList, pIsFriend){
            var tFighterConfigDto = pFighterConfigDtoList.get_Item$$Int32(0);
            GameDebuger.TODO("tFighterConfigDto.characterType = (int)GeneralCharactor.CharactorType.Pet;");
            if (pIsFriend){
                GameDebuger.TODO("tFighterConfigDto.playerId = ModelManager.Player.GetPlayerId();");
                pFighterConfigDtoList.Add(DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto$$PlayerDto(ModelManager.get_Player().GetPlayer()));
            }
            else
                GameDebuger.TODO("tFighterConfigDto.playerId = pFighterConfigDtoList[1].id;");
        },
        SimulateFighterConfigDtoByPlayerDto$$PlayerDto: function (pPlayerDto){
            var tCharacterId = 0;
            var tCharacterName = System.String.Empty;
            if (null != pPlayerDto){
                tCharacterId = pPlayerDto.charactorId;
                tCharacterName = pPlayerDto.name;
            }
            return DemoSimulateHelper.SimulateFighterConfigDtoByCharacterInfo(pPlayerDto.id, tCharacterId, tCharacterName);
        },
        SimulateFighterConfigDtoByScenePlayerDto: function (pScenePlayerDto){
            var tCharacterId = 0;
            var tCharacterName = System.String.Empty;
            var tPlayerUID = 0;
            if (null != pScenePlayerDto){
                tCharacterId = pScenePlayerDto.charactorId;
                tCharacterName = pScenePlayerDto.name;
                tPlayerUID = pScenePlayerDto.id;
            }
            return DemoSimulateHelper.SimulateFighterConfigDtoByCharacterInfo(tPlayerUID, tCharacterId, tCharacterName);
        },
        SimulateFighterConfigDtoByCharacterInfo: function (pPlayerUID, pCharacterId, pName){
            var tFighterConfigDto = ModelManager.get_BattleDemoConfig().GetFighterConfigDtoByCharacterId(pCharacterId);
            if (null == tFighterConfigDto)
                return null;
            if (pCharacterId < 0)
                return DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto$$Int32$$Int64$$Int64$$Int32$$String$$String$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32(1 /* (int)GeneralCharactor.CharactorType.MainCharactor */, 1000001, 1000001, UnityEngine.Random.Range$$Int32$$Int32(1, 4), "你自己", tFighterConfigDto.activeSkillIds, 0, tFighterConfigDto.phyAttack, tFighterConfigDto.magicAttack, tFighterConfigDto.phyDefence, tFighterConfigDto.magicDefence, tFighterConfigDto.hp, tFighterConfigDto.speed);
            else
                return DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto$$Int32$$Int64$$Int64$$Int32$$String$$String$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32(1 /* (int)GeneralCharactor.CharactorType.MainCharactor */, pPlayerUID, pPlayerUID, pCharacterId, pName, tFighterConfigDto.activeSkillIds, 0, tFighterConfigDto.phyAttack, tFighterConfigDto.magicAttack, tFighterConfigDto.phyDefence, tFighterConfigDto.magicDefence, tFighterConfigDto.hp, tFighterConfigDto.speed);
        },
        SimulateFighterConfigDtoByPlayerDto$$Int32$$Int64$$Int64$$Int32$$String$$String$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32: function (pPlayerType, pFighterId, pPlayerId, pCharacterId, pName, pActiveSkill, pPassiveSkill, pAttack, pAttackMagic, pDefence, pDefenceMagic, pHP, pSpeed){
            var tFighterConfigDto = new AppDto.FighterConfigDto.ctor();
            tFighterConfigDto.characterType = pPlayerType;
            tFighterConfigDto.id = pFighterId;
            tFighterConfigDto.playerId = pPlayerId;
            tFighterConfigDto.characterId = pCharacterId;
            tFighterConfigDto.activeSkillIds = pActiveSkill;
            tFighterConfigDto.phyAttack = pAttack;
            tFighterConfigDto.magicAttack = pAttackMagic;
            tFighterConfigDto.phyDefence = pDefence;
            tFighterConfigDto.magicDefence = pDefenceMagic;
            tFighterConfigDto.hp = pHP;
            tFighterConfigDto.speed = pSpeed;
            return tFighterConfigDto;
        },
        SimulateFighterConfigDtoByMonster$$Int32$$Int32: function (pMonsterId, pCharacterId){
            var tMonster = DataCache.getDtoByCls$1(AppDto.Monster.ctor, pMonsterId);
            if (null == tMonster){
                GameDebuger.LogError(System.String.Format$$String$$Object("SimulateFighterConfigDtoByMonster failed, null == tMonster , tMonsterId:{0}", pMonsterId), null);
                return null;
            }
            return DemoSimulateHelper.SimulateFighterConfigDtoByMonster$$Monster$$Int32(tMonster, pCharacterId);
        },
        SimulateFighterConfigDtoByMonster$$Monster$$Int32: function (pMonster, pCharacterId){
            return DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto$$Int32$$Int64$$Int64$$Int32$$String$$String$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32(5 /* (int)GeneralCharactor.CharactorType.Monster */, pMonster.id, 0, pCharacterId, pMonster.name, DemoSimulateHelper.ListToString(pMonster.activeSkillIds), 0, StringHelper.ToInt(pMonster.attack), StringHelper.ToInt(pMonster.magicAttack), StringHelper.ToInt(pMonster.defense), StringHelper.ToInt(pMonster.magicDefense), StringHelper.ToInt(pMonster.hp), StringHelper.ToInt(pMonster.speed));
        },
        SimulateVideo: function (pFightersConfigDto){
            var tDemoVideo = new AppDto.DemoVideo.ctor();
            tDemoVideo.id = DemoSimulateHelper.SIMULATE_BATTLE_ID;
            tDemoVideo.retreatable = true;
            tDemoVideo.readyTime = DemoSimulateHelper.SIMULATE_FIGHTER_READY_TIME;
            tDemoVideo.ateam = DemoSimulateHelper.SimulateVideoTeam(pFightersConfigDto.ateam);
            tDemoVideo.bteam = DemoSimulateHelper.SimulateVideoTeam(pFightersConfigDto.bteam);
            return tDemoVideo;
        },
        SimulateMonster: function (pId, pName, pNameType, levelFormula, spellLevelFormula){
            var tMonster = DataCache.getDtoByCls$1(AppDto.Monster.ctor, pId);
            if (null == tMonster){
                return null;
                GameDebuger.LogError(System.String.Format$$String$$Object("DataCache.getDtoByCls<Monster>({0}) failed , simulate this !", pId), null);
                tMonster = new AppDto.Monster.ctor();
                tMonster.id = pId;
                tMonster.name = pName;
            }
            return tMonster;
        },
        SimulateMonsterList: function (){
            var tMonsterList = DataCache.getArrayByCls$1(AppDto.Monster.ctor);
            if (null == tMonsterList || tMonsterList.get_Count() <= 0){
                GameDebuger.LogError("DataCache.getArrayByCls<Monster>() failed !", null);
                return null;
            }
            return CollectionExtension.ToList$1(AppDto.Monster.ctor, tMonsterList);
        },
        ListToString: function (pList){
            if (null == pList || pList.get_Count() <= 0)
                return System.String.Empty;
            var tStringBuilder = new System.Text.StringBuilder.ctor();
            for (var tCounter = 0; tCounter < pList.get_Count(); tCounter++){
                if (tCounter == 0)
                    tStringBuilder = tStringBuilder.Append$$String(pList.get_Item$$Int32(tCounter).toString());
                else
                    tStringBuilder = tStringBuilder.AppendFormat$$String$$Object(",{0}", pList.get_Item$$Int32(tCounter).toString());
            }
            return tStringBuilder.toString();
        },
        StringToList: function (pFormattedString){
            if (System.String.IsNullOrEmpty(pFormattedString))
                return null;
            var tStrings = pFormattedString.Split$$Char$Array([","]);
            var tList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var tIntParsed = 0;
            for (var tCounter = 0,tLen = tStrings.length; tCounter < tLen; tCounter++){
                if ((function (){
                    var $1 = $Ref(null, tIntParsed);
                    var $res = System.Int32.TryParse$$String$$Int32(tStrings[tCounter], $1);
                    tIntParsed = $1.Value;
                    return $res;
                }).call(this))
                    tList.Add(tIntParsed);
            }
            return tList;
        },
        SimulateVideoTeam: function (pEnemyFighterConfigDtoList){
            var tVideoTeam = new AppDto.VideoTeam.ctor();
            var tPlayerIdList = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
            var tTeamSoldiers = new System.Collections.Generic.List$1.ctor(AppDto.VideoSoldier.ctor);
            if (null != pEnemyFighterConfigDtoList && pEnemyFighterConfigDtoList.get_Count() > 0){
                var tFighterConfigDto = null;
                var tVideoSoldier = null;
                for (var tCounter = 0; tCounter < pEnemyFighterConfigDtoList.get_Count(); tCounter++){
                    tFighterConfigDto = pEnemyFighterConfigDtoList.get_Item$$Int32(tCounter);
                    if (null == tFighterConfigDto)
                        continue;
                    tVideoSoldier = DemoSimulateHelper.SimulateVideoSoldier(tFighterConfigDto, tCounter + 1);
                    if (tVideoSoldier.charactorType == 4 /* (int)GeneralCharactor.CharactorType.Pet */)
                        tVideoSoldier.position += 5;
                    tPlayerIdList.Add(tVideoSoldier.id);
                    tTeamSoldiers.Add(tVideoSoldier);
                }
            }
            tVideoTeam.playerIds = tPlayerIdList;
            tVideoTeam.teamSoldiers = tTeamSoldiers;
            tVideoTeam.formationId = 1;
            tVideoTeam.set_formation(DemoSimulateHelper.SimulateFormation$$Int32(tVideoTeam.formationId));
            return tVideoTeam;
        },
        SimulateFormation$$Int32: function (pId){
            return DemoSimulateHelper.SimulateFormation$$Int32$$String$$String$$String$$List$1$Int32$$List$1$Int32$$String$$String(pId, "阵法名字" + pId.toString(), "阵法描述" + pId.toString(), System.String.Empty, (function (){
                var $v7 = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                $v7.Add(1);
                $v7.Add(2);
                $v7.Add(3);
                $v7.Add(4);
                $v7.Add(5);
                return $v7;
            }).call(this), (function (){
                var $v8 = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                $v8.Add(1);
                $v8.Add(2);
                $v8.Add(3);
                $v8.Add(4);
                $v8.Add(5);
                return $v8;
            }).call(this), "阵法信息" + pId.toString(), "位置信息" + pId.toString());
        },
        SimulateFormation$$Int32$$String$$String$$String$$List$1$Int32$$List$1$Int32$$String$$String: function (pId, pName, pDescription, pDebuffTargetsStr, pPlayerPosition, pMonsterPosition, pMessageBox, pPosEffectStr){
            GameDebuger.LogError(System.String.Format$$String$$Object("[TEMP]缺少数据表Formation，暂时模拟之，pId：{0}", pId), null);
            var tFormation = new AppDto.Formation.ctor();
            tFormation.id = pId;
            tFormation.name = pName;
            tFormation.description = pDescription;
            tFormation.debuffTargetsStr = pDebuffTargetsStr;
            tFormation.playerPosition = pPlayerPosition;
            tFormation.monsterPosition = pMonsterPosition;
            tFormation.messageBox = pMessageBox;
            tFormation.posEffectStr = pPosEffectStr;
            return tFormation;
        },
        SimulateVideoSoldier: function (pFighterConfigDto, pPosition){
            var tVideoSoldier = new AppDto.VideoSoldier.ctor();
            if (pFighterConfigDto.characterType == AppDto.GeneralCharactor.CharactorType.MainCharactor)
                tVideoSoldier.id = pFighterConfigDto.id;
            else
                tVideoSoldier.id = System.DateTime.get_Now().get_Ticks();
            tVideoSoldier.name = (pFighterConfigDto.id == ModelManager.get_Player().GetPlayerId()) ? ModelManager.get_Player().GetPlayerName() : ("C" + pFighterConfigDto.id).toString();
            tVideoSoldier.playerId = pFighterConfigDto.playerId;
            tVideoSoldier.charactorType = pFighterConfigDto.characterType;
            tVideoSoldier.defaultSkillId = DemoSimulateHelper.GetSkillFromSkillIdsStr(pFighterConfigDto.activeSkillIds);
            tVideoSoldier.skillIds = DemoSimulateHelper.StringToList(pFighterConfigDto.activeSkillIds);
            tVideoSoldier.hp = pFighterConfigDto.hp;
            tVideoSoldier.maxHp = pFighterConfigDto.hp;
            var tMonster = DemoSimulateHelper.SimulateMonster((tVideoSoldier.id | 0), tVideoSoldier.name, 1, "", "");
            if (null != tMonster)
                tVideoSoldier.monsterId = tMonster.id;
            tVideoSoldier.set_monster(tMonster);
            tVideoSoldier.position = pPosition;
            tVideoSoldier.actionPoint = 2;
            tVideoSoldier.time = UnityEngine.Random.Range$$Int32$$Int32(3000, 10000);
            tVideoSoldier.charactorId = pFighterConfigDto.characterId;
            return tVideoSoldier;
        },
        SimulateActionQueueAddNotifyDto: function (pVideoSoldier, pTimeToPlay){
            var tActionQueueAddNotifyDto = new AppDto.ActionQueueAddNotifyDto.ctor();
            tActionQueueAddNotifyDto.battleId = DemoSimulateHelper.SIMULATE_BATTLE_ID;
            tActionQueueAddNotifyDto.id = pVideoSoldier.id;
            tActionQueueAddNotifyDto.name = pVideoSoldier.name;
            tActionQueueAddNotifyDto.time = pTimeToPlay;
            tActionQueueAddNotifyDto.durationTime = DemoSimulateHelper.SIMULATE_QUEUE_DELAY;
            return tActionQueueAddNotifyDto;
        },
        SimulateActionQueueRemoveNotifyDto: function (pCharacterUID){
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(pCharacterUID);
            var tVideoSoldier = null;
            if (UnityEngine.Object.op_Equality(null, tMonsterController)){
                if (null == DemoSimulateHelper.tVideoSoldierList || DemoSimulateHelper.tVideoSoldierList.get_Count() <= 0){
                    TipManager.AddTip("当前没有在队列中的对象", false, false, "");
                    return null;
                }
                tVideoSoldier = DemoSimulateHelper.tVideoSoldierList.get_Item$$Int32(0);
                DemoSimulateHelper.tVideoSoldierList.RemoveAt(0);
            }
            else
                tVideoSoldier = tMonsterController.videoSoldier;
            var tActionQueueRemoveNotifyDto = new AppDto.ActionQueueRemoveNotifyDto.ctor();
            tActionQueueRemoveNotifyDto.battleId = DemoSimulateHelper.SIMULATE_BATTLE_ID;
            tActionQueueRemoveNotifyDto.id = tVideoSoldier.id;
            return tActionQueueRemoveNotifyDto;
        },
        TestFighterReadyNotifyDto: function (){
            GameDebuger.LogError("[单机/非错误]模拟全部准备就绪，正式时删除。 当前本地服务器时间:" + SystemTimeManager.get_Instance().GetServerTime().ToString$$String("o"), null);
            if (null == ModelManager.get_BattleDemo().get_AllVideoSoldierList()){
                TipManager.AddTip("当前没有战斗对象", false, false, "");
                return;
            }
            var tVideoSoldierList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(AppDto.VideoSoldier.ctor, ModelManager.get_BattleDemo().get_AllVideoSoldierList().get_Values());
            var tPreDateTime = SystemTimeManager.get_Instance().GetServerTime().AddMilliseconds(DemoSimulateHelper.SIMULATE_SKILL_CD);
            GameDebuger.Log(System.String.Format$$String$$Object$$Object("tPreDateTime GetServerTime :{0}, tPreDateTime:{1}", SystemTimeManager.get_Instance().GetServerTime().ToString$$String("o"), tPreDateTime.ToString$$String("o")), null);
            var tVideoSoldier;
            var tFighterReadyNotifyDto;
            var tVideoRound = null;
            var tAddToQueueDelay = function (pCDTime, pVideoSoldier, pDelay){
                var tAddToActionQueueTimerName = "AddToActionQueue_" + pVideoSoldier.id.toString();
                JSTimer.get_Instance().CancelCd(tAddToActionQueueTimerName);
                GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object("tAddToQueueDelay :{0},pCDTime:{1}, pDelay:{2}", tPreDateTime.ToString$$String("o"), pCDTime, DateUtil.UnixTimeStampToDateTime(pDelay).ToString$$String("o")), null);
                JSTimer.get_Instance().SetupCoolDown(tAddToActionQueueTimerName, pCDTime, null, function (){
                    tVideoRound = DemoSimulateHelper.SimulateVideoRound(pVideoSoldier.id);
                    BattleNetworkManager.get_Instance().HanderVideoRound(tVideoRound);
                }, 0.1, false);
            };
            for (var tCounter = 0; tCounter < tVideoSoldierList.get_Count(); tCounter++){
                tVideoSoldier = tVideoSoldierList.get_Item$$Int32(tCounter);
                if (ServiceRequestAction.SimulateNet){
                    var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(tVideoSoldier.id);
                    if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                        if (tMonsterController.dead)
                            continue;
                        if (DemoSimulateHelper.HasType1Buff(tMonsterController.GetBuffs())){
                            GameDebuger.LogError("[单机/非错误]单机时有封印BUFF的跳过行动回合", null);
                            continue;
                        }
                    }
                }
                tFighterReadyNotifyDto = DemoSimulateHelper.SimulateFighterReadyNotifyDto(tVideoSoldier);
                BattleNetworkManager.get_Instance().HandlerSoldierReadyNotify$$FighterReadyNotifyDto(tFighterReadyNotifyDto);
                tAddToQueueDelay(tFighterReadyNotifyDto.releaseTime / 1000, tVideoSoldier, DateUtil.DateTimeToUnixTimestamp(tPreDateTime));
                GameDebuger.Log(System.String.Format$$String$$Object("tPreDateTime :{0}", tPreDateTime.ToString$$String("o")), null);
                tPreDateTime = tPreDateTime.AddMilliseconds(DemoSimulateHelper.SIMULATE_QUEUE_DELAY);
            }
        },
        HasType1Buff: function (pVideoBuffAddTargetStateList){
            if (null == pVideoBuffAddTargetStateList || pVideoBuffAddTargetStateList.get_Count() <= 0)
                return false;
            var tVideoBuffAddTargetState;
            for (var tCounter = 0; tCounter < pVideoBuffAddTargetStateList.get_Count(); tCounter++){
                tVideoBuffAddTargetState = pVideoBuffAddTargetStateList.get_Item$$Int32(tCounter);
                if (null != tVideoBuffAddTargetState && tVideoBuffAddTargetState.get_battleBuff().group == 1 /* (int)SkillBuff.BuffGroup.SEAL */)
                    return true;
            }
            return false;
        },
        SimulateSkill: function (pId){
            var tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, pId);
            if (null == tSkill){
                GameDebuger.LogError(System.String.Format$$String$$Object("DataCache.getDtoByCls<Skill>({0}) failed , simulate this !", pId), null);
                tSkill = new AppDto.Skill.ctor();
                tSkill.id = pId;
                tSkill.name = "S" + tSkill.id.toString();
                tSkill.icon = ((pId < 1000) ? (tSkill.id + 1000) : pId).toString();
                tSkill.skillType = 2 /* (int)Skill.SkillType.Phy */;
            }
            return tSkill;
        },
        GetSkillFromSkillIdsStr: function (pSkillIdsStr){
            if (System.String.IsNullOrEmpty(pSkillIdsStr))
                return 0;
            return System.Int32.Parse$$String(pSkillIdsStr.Split$$Char$Array([","])[0]);
        },
        GetSuitableSkillId: function (){
            var tSuitableSkillIdList = DemoSimulateHelper.GetSuitableSkillIdList();
            if (null == tSuitableSkillIdList || tSuitableSkillIdList.get_Count() <= 0)
                return 0;
            return tSuitableSkillIdList.get_Item$$Int32((tSuitableSkillIdList.get_Count() >> 1) - 1);
        },
        GetSuitableSkillIdList: function (){
            var tSkillList = DataCache.getArrayByCls$1(AppDto.Skill.ctor);
            if (null == tSkillList || tSkillList.get_Count() <= 0)
                return null;
            var tSkillIdList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var tSkill;
            for (var tCounter = 0; tCounter < tSkillList.get_Count(); tCounter++){
                tSkill = tSkillList.get_Item$$Int32(tCounter);
                tSkillIdList.Add(tSkill.id);
            }
            return tSkillIdList;
        },
        GetMainCharacterSkillIDList: function (pVideoSoldier){
            if (null == pVideoSoldier || null == pVideoSoldier.skillIds || pVideoSoldier.skillIds.get_Count() <= 0){
                GameDebuger.LogError(System.String.Format$$String$$Object("GetMainCharacterSkillIDList failed , null == pVideoSoldier  or pVideoSoldier.skillIds is invalid ,pVideoSoldier:{0} !", pVideoSoldier), null);
                return DemoSimulateHelper.SimulateSkillList(8 /* SKILL_COUNT_TO_SIMULATE_IF_FAILED */);
            }
            return pVideoSoldier.skillIds;
        },
        SimulateSkillList: function (pSkillListLength){
            GameDebuger.LogError("[TEMP]SimulateSkillList", null);
            if (pSkillListLength <= 0)
                return null;
            else {
                var tSkillList = DataCache.getArrayByCls$1(AppDto.Skill.ctor);
                if (null == tSkillList){
                    GameDebuger.LogError("SimulateSkillList failed for DataCache.getArrayByCls<Skill>() is null ! ", null);
                    return null;
                }
                var tSkillIdList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                for (var tCounter = 0,tLen = (tSkillList.get_Count() > pSkillListLength ? pSkillListLength : tSkillList.get_Count()); tCounter < tLen; tCounter++){
                    tSkillIdList.Add(tSkillList.get_Item$$Int32(tCounter).id);
                }
                return tSkillIdList;
            }
        },
        SimulateRoundStart: function (){
            DemoSimulateHelper.TestFighterReadyNotifyDto();
        },
        SimulateVideoRound: function (pAttackId){
            var tCurAttackId = 0;
            var tDefenderId = 0;
            var tVideoSoldier = null;
            (function (){
                var $1 = $Ref(null, tCurAttackId);
                var $2 = $Ref(null, tDefenderId);
                var $3 = $Ref(null, tVideoSoldier);
                var $res = DemoSimulateHelper.SimulateActionPlayerInfo($1, $2, $3, pAttackId);
                tCurAttackId = $1.Value;
                tDefenderId = $2.Value;
                tVideoSoldier = $3.Value;
                return $res;
            }).call(this);
            var tVideoRound = new AppDto.VideoRound.ctor();
            tVideoRound.battleId = DemoSimulateHelper.SIMULATE_BATTLE_ID;
            tVideoRound.skillActions = DemoSimulateHelper.SimulateVideoSkillActionList(tCurAttackId);
            tVideoRound.id = tCurAttackId;
            tVideoRound.name = tVideoSoldier.name;
            return tVideoRound;
        },
        SimulateFighterReadyNotifyDto: function (pVideoSoldier){
            var tFighterReadyNotifyDto = new AppDto.FighterReadyNotifyDto.ctor();
            tFighterReadyNotifyDto.battleId = DemoSimulateHelper.SIMULATE_BATTLE_ID;
            tFighterReadyNotifyDto.id = pVideoSoldier.id;
            tFighterReadyNotifyDto.releaseTime = DemoSimulateHelper.SIMULATE_SKILL_CD;
            tFighterReadyNotifyDto.skillId = pVideoSoldier.defaultSkillId;
            return tFighterReadyNotifyDto;
        },
        SimulateVideoSkillActionList: function (pAttackId){
            var tVideoSkillActionList = new System.Collections.Generic.List$1.ctor(AppDto.VideoSkillAction.ctor);
            for (var tCounter = 0; tCounter < 1; tCounter++){
                tVideoSkillActionList.Add(DemoSimulateHelper.SimulateVideoSkillAction(pAttackId));
            }
            return tVideoSkillActionList;
        },
        SimulateActionPlayerInfo: function (tCurAttackId, tDefenderId, tVideoSoldier, pAttackId){
            tCurAttackId.Value = ModelManager.get_Player().GetPlayerId();
            tDefenderId.Value = ModelManager.get_BattleDemo()._gameVideo.bteam.teamSoldiers.get_Item$$Int32(0).id;
            if (pAttackId > 0){
                tCurAttackId.Value = pAttackId;
                if (MonsterManager.get_Instance().IsEnemy(pAttackId))
                    tDefenderId.Value = ModelManager.get_BattleDemo()._gameVideo.ateam.teamSoldiers.get_Item$$Int32(UnityEngine.Random.Range$$Int32$$Int32(0, ModelManager.get_BattleDemo()._gameVideo.ateam.teamSoldiers.get_Count())).id;
                else
                    tDefenderId.Value = ModelManager.get_BattleDemo()._gameVideo.bteam.teamSoldiers.get_Item$$Int32(UnityEngine.Random.Range$$Int32$$Int32(0, ModelManager.get_BattleDemo()._gameVideo.bteam.teamSoldiers.get_Count())).id;
            }
            tVideoSoldier.Value = MonsterManager.get_Instance().GetMonsterFromSoldierID(tCurAttackId.Value).videoSoldier;
            return true;
        },
        SimulateVideoSkillAction: function (pAttackId){
            var tCurAttackId = 0;
            var tDefenderId = 0;
            var tVideoSoldier = null;
            (function (){
                var $1 = $Ref(null, tCurAttackId);
                var $2 = $Ref(null, tDefenderId);
                var $3 = $Ref(null, tVideoSoldier);
                var $res = DemoSimulateHelper.SimulateActionPlayerInfo($1, $2, $3, pAttackId);
                tCurAttackId = $1.Value;
                tDefenderId = $2.Value;
                tVideoSoldier = $3.Value;
                return $res;
            }).call(this);
            var tVideoSkillAction = new AppDto.VideoSkillAction.ctor();
            tVideoSkillAction.actionSoldierId = tCurAttackId;
            tVideoSkillAction.skillId = tVideoSoldier.defaultSkillId;
            tVideoSkillAction.set_skill(DemoSimulateHelper.SimulateSkill(tVideoSkillAction.skillId));
            tVideoSkillAction.targetStateGroups = DemoSimulateHelper.SimulateVideoTargetStateGroupList(tDefenderId);
            return tVideoSkillAction;
        },
        SimulateVideoTargetStateGroup: function (pDefenderId, pBuffId, pAdd){
            var tVideoTargetStateGroup = new AppDto.VideoTargetStateGroup.ctor();
            tVideoTargetStateGroup.targetStates = DemoSimulateHelper.SimulateVideoActionTargetStateList(pDefenderId, pBuffId, pAdd);
            return tVideoTargetStateGroup;
        },
        SimulateVideoTargetStateGroupList: function (pDefenderId){
            var tVideoTargetStateGroupList = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetStateGroup.ctor);
            if (UnityEngine.Random.Range$$Int32$$Int32(0, 100) < 20)
                tVideoTargetStateGroupList.Add(DemoSimulateHelper.SimulateVideoTargetStateGroup(pDefenderId, 1, true));
            else
                tVideoTargetStateGroupList.Add(DemoSimulateHelper.SimulateVideoTargetStateGroup(pDefenderId, 0, false));
            return tVideoTargetStateGroupList;
        },
        SimulateVideoActionTargetState: function (pDefenderId){
            var tVideoActionTargetState = new AppDto.VideoActionTargetState.ctor();
            tVideoActionTargetState.crit = UnityEngine.Random.Range$$Int32$$Int32(0, 100) < 25;
            tVideoActionTargetState.currentHp = 1000;
            tVideoActionTargetState.currentSp = 1000;
            tVideoActionTargetState.hp = -100 /* -100 */;
            tVideoActionTargetState.dead = false;
            tVideoActionTargetState.id = pDefenderId;
            return tVideoActionTargetState;
        },
        SimulateVideoBuffAddTargetState: function (pDefenderId, pbattleBuffId){
            var tVideoActionTargetState = new AppDto.VideoBuffAddTargetState.ctor();
            tVideoActionTargetState.battleBuffId = pbattleBuffId;
            tVideoActionTargetState.dead = false;
            tVideoActionTargetState.id = pDefenderId;
            tVideoActionTargetState.durationTime = 2000;
            return tVideoActionTargetState;
        },
        SimulateVideoBuffRemoveTargetState: function (pDefenderId, pBuffId){
            var tVideoActionTargetState = new AppDto.VideoBuffRemoveTargetState.ctor();
            tVideoActionTargetState.buffId = (function (){
                var $v9 = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                $v9.Add(pBuffId);
                return $v9;
            }).call(this);
            tVideoActionTargetState.dead = false;
            tVideoActionTargetState.id = pDefenderId;
            return tVideoActionTargetState;
        },
        SimulateVideoActionTargetStateList: function (pDefenderId, pBuffId, pAdd){
            var tVideoTargetStateGroupList = new System.Collections.Generic.List$1.ctor(AppDto.VideoTargetState.ctor);
            for (var tCounter = 0; tCounter < 1; tCounter++){
                if (pBuffId > 0){
                    if (pAdd)
                        tVideoTargetStateGroupList.Add(As(DemoSimulateHelper.SimulateVideoBuffAddTargetState(pDefenderId, pBuffId), AppDto.VideoTargetState.ctor));
                    else
                        tVideoTargetStateGroupList.Add(As(DemoSimulateHelper.SimulateVideoBuffRemoveTargetState(pDefenderId, pBuffId), AppDto.VideoTargetState.ctor));
                }
                else
                    tVideoTargetStateGroupList.Add(As(DemoSimulateHelper.SimulateVideoActionTargetState(pDefenderId), AppDto.VideoTargetState.ctor));
            }
            return tVideoTargetStateGroupList;
        },
        SimulateCharactorDto$$Int64$$String$$Int32: function (pId, pName, pCharacterId){
            var tCharactorDto = new AppDto.CharactorDto.ctor();
            tCharactorDto.id = tCharactorDto.playerId = pId;
            tCharactorDto.charactorId = pCharacterId;
            tCharactorDto.name = pName;
            GameDebuger.TODO("tCharactorDto.properties = SimulateShortBattlePropertyDto();");
            return tCharactorDto;
        },
        SimulateCharactorDto$$PlayerDto: function (pPlayerDto){
            if (null == pPlayerDto)
                return DemoSimulateHelper.SimulateCharactorDto$$Int64$$String$$Int32(0, System.String.Empty, 0);
            else
                return DemoSimulateHelper.SimulateCharactorDto$$Int64$$String$$Int32(pPlayerDto.id, pPlayerDto.name, pPlayerDto.charactorId);
        },
        SimulateBuff: function (pBuffId){
            GameDebuger.LogError("SimulateBuff pBuffId:" + pBuffId.toString(), null);
            var tBuff = new AppDto.SkillBuff.ctor();
            tBuff.id = pBuffId;
            tBuff.animation = 101;
            tBuff.icon = "101";
            tBuff.animationMount = "Mount_Shadow";
            tBuff.description = "<特殊状态>虚弱：防御和灵力降低，不能进行任何行动";
            tBuff.name = "虚弱";
            return tBuff;
        },
        SimulatePVP: function (pScenePlayerDto, pFinishCallBack){
            if (null == pScenePlayerDto || pScenePlayerDto.charactorId < 0){
                GameDebuger.LogError(System.String.Format$$String$$Object("目标错误！null == pScenePlayerDto:{0} || pScenePlayerDto.charactorId < 0", pScenePlayerDto), null);
                return;
            }
            var tFighterConfigDto = DemoSimulateHelper.SimulateFighterConfigDtoByScenePlayerDto(pScenePlayerDto);
            var tMyFighterConfigDto = DemoSimulateHelper.SimulateFighterConfigDtoByPlayerDto$$PlayerDto(ModelManager.get_Player().GetPlayer());
            var tFightersConfigDto = new AppDto.FightersConfigDto.ctor();
            tFightersConfigDto.ateam = (function (){
                var $v10 = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
                $v10.Add(tFighterConfigDto);
                return $v10;
            }).call(this);
            tFightersConfigDto.bteam = (function (){
                var $v11 = new System.Collections.Generic.List$1.ctor(AppDto.FighterConfigDto.ctor);
                $v11.Add(tMyFighterConfigDto);
                return $v11;
            }).call(this);
            ModelManager.get_BattleDemoConfig().EnterBattle(ModelManager.get_BattleDemoConfig().BattleSceneId, tFightersConfigDto, pFinishCallBack);
        },
        SimulateDefaultSkill$$BattleTargetSelector: function (pBattleTargetSelector){
            if (!ServiceRequestAction.SimulateNet)
                return;
            DemoSimulateHelper.SimulateDefaultSkill$$MonsterController$$Int32(ModelManager.get_BattleDemo().get_choosePet(), pBattleTargetSelector.GetSkillId());
        },
        SimulateDefaultSkill$$MonsterController$$Int32: function (pMonsterController, pSkillId){
            if (!ServiceRequestAction.SimulateNet)
                return;
            if (UnityEngine.Object.op_Inequality(null, pMonsterController))
                pMonsterController.videoSoldier.defaultSkillId = pSkillId;
        },
        SimulateDefaultSkill$$Int64$$Int32$$Int32: function (pPlayerUID, pPlayerSkillId, pPetSkillId){
            if (!ServiceRequestAction.SimulateNet)
                return;
            var tMonsterController = MonsterManager.get_Instance().GetMonsterFromSoldierID(pPlayerUID);
            DemoSimulateHelper.SimulateDefaultSkill$$MonsterController$$Int32(tMonsterController, pPlayerSkillId <= 0 ? pPetSkillId : pPlayerSkillId);
        },
        SimulateTeamCommand: function (pId){
            GameDebuger.LogError(System.String.Format$$String$$Object("[TEMP]缺少数据表TeamCommand，前端暂时模拟之，pId：{0}", pId), null);
            var tTempNameFormat = "C_{0}_{1}";
            var tTeamCommand = new AppDto.TeamCommand.ctor();
            tTeamCommand.id = pId;
            tTeamCommand.command = (function (){
                var $v12 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v12.Add(System.String.Format$$String$$Object$$Object(tTempNameFormat, pId, 1));
                $v12.Add(System.String.Format$$String$$Object$$Object(tTempNameFormat, pId, 2));
                $v12.Add(System.String.Format$$String$$Object$$Object(tTempNameFormat, pId, 3));
                return $v12;
            }).call(this);
            return tTeamCommand;
        },
        SimulateTeamCommandDic: function (){
            var tTeamCommandDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, AppDto.TeamCommand.ctor);
            for (var tCounter = 0; tCounter < 5; tCounter++){
                tTeamCommandDic.Add(tCounter, DemoSimulateHelper.SimulateTeamCommand(tCounter));
            }
            return tTeamCommandDic;
        },
        SimulateBagItemDtoList: function (pItemLength){
            GameDebuger.LogError("[TEMP]模拟物品列表！", null);
            var tBagItemDtoList = new System.Collections.Generic.List$1.ctor(AppDto.BagItemDto.ctor);
            for (var tCounter = 0; tCounter < pItemLength; tCounter++){
                tBagItemDtoList.Add(DemoSimulateHelper.SimulateBagItemDto(tCounter));
            }
            return tBagItemDtoList;
        },
        SimulateBagItemDto: function (pItemID){
            var tBagItemDto = new AppDto.BagItemDto.ctor();
            tBagItemDto.itemId = pItemID;
            tBagItemDto.set_item(DemoSimulateHelper.SimulateAppItem(pItemID));
            return tBagItemDto;
        },
        SimulateAppItem: function (pItemID){
            var tAppItem = new AppDto.AppItem.ctor();
            tAppItem.id = pItemID;
            tAppItem.name = "物品" + pItemID.toString();
            return tAppItem;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DemoSimulateHelper);
var DemoSkillHelper = {
    fullname: "DemoSkillHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetSkillActionPoint: function (pSkill){
            return null != pSkill ? pSkill.actionPoint : 0;
        },
        GetSkillActionPointLimitTip$$Int64$$Int32: function (pMonsterUID, tSkillId){
            var tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, tSkillId);
            tSkillId = tSkillId < 10 ? (tSkillId + 3000) : tSkillId;
            var limitTip = "";
            if (!ModelManager.get_BattleDemo().IsSkillPointEnoughToUseSkill(pMonsterUID, tSkill))
                limitTip = System.String.Format$$String$$Object("需要{0}技能点", tSkill.actionPoint);
            return limitTip;
        },
        GetSkillActionPointLimitTip$$Int64$$Skill: function (pMonsterUID, pSkill){
            var limitTip = "";
            if (null != pSkill){
                if (!ModelManager.get_BattleDemo().IsSkillPointEnoughToUseSkill(pMonsterUID, pSkill))
                    limitTip = System.String.Format$$String$$Object("需要{0}技能点", pSkill.actionPoint);
            }
            return limitTip;
        },
        IsActionPointEnoughToUseSkill: function (pMonsterController, pSkill){
            if (UnityEngine.Object.op_Equality(null, pMonsterController))
                return false;
            return ModelManager.get_BattleDemo().IsSkillPointEnoughToUseSkill(pMonsterController.GetId(), pSkill);
        },
        GetSkillSP: function (pVideoSoldier, tSkillId){
            var tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, tSkillId);
            var tSPCost = 0;
            if (!System.String.IsNullOrEmpty(tSkill.spendSpFormula)){
                tSPCost = ExpressionManager.DoSkillFormula("spendSpFormula" + tSkill.id, tSkill.spendSpFormula, pVideoSoldier);
                tSPCost = (((tSPCost * pVideoSoldier.spendSpDiscountRate)) | 0);
            }
            return tSPCost;
        },
        GetSkillSPLimitTip: function (pMonsterController, pSkill){
            var limitTip = "";
            if (null != pSkill && !System.String.IsNullOrEmpty(pSkill.spendSpFormula)){
                var value = ExpressionManager.DoSkillFormula("spendSpFormula" + pSkill.id, pSkill.spendSpFormula, pMonsterController.videoSoldier);
                value = (((value * pMonsterController.videoSoldier.spendSpDiscountRate)) | 0);
                if (pMonsterController.get_currentSP() < System.Math.Abs$$Int32(value)){
                    limitTip = System.String.Format$$String$$Object("需要{0}愤怒", System.Math.Abs$$Int32(value));
                }
            }
            return limitTip;
        },
        IsSPEnoughToUseSuperSkill: function (pMonsterController){
            if (UnityEngine.Object.op_Equality(null, pMonsterController))
                return false;
            var tSuperSkillId = pMonsterController.GetSuperSkill();
            if (tSuperSkillId <= 0)
                return false;
            var tLimitTip = DemoSkillHelper.GetSkillSPLimitTip(pMonsterController, DataCache.getDtoByCls$1(AppDto.Skill.ctor, tSuperSkillId));
            return System.String.IsNullOrEmpty(tLimitTip);
        },
        GetVideoRoundSkillShortDesc: function (pVideoRound){
            if (null == pVideoRound)
                return System.String.Empty;
            if (null == pVideoRound.skillActions || pVideoRound.skillActions.get_Count() <= 0){
                GameDebuger.LogError(System.String.Format$$String$$Object("[错误]战斗回合数据 VideoRound 有误，VideoRound.skillActions 长度{0}问题！", (pVideoRound.skillActions != null) ? "有" : "无"), null);
                return System.String.Empty;
            }
            var tVideoSkillAction = pVideoRound.skillActions.get_Item$$Int32(0);
            if (null == tVideoSkillAction || null == tVideoSkillAction.get_skill())
                return System.String.Empty;
            return tVideoSkillAction.get_skill().name;
        },
        GetSkillCD$$Int32: function (pSkillId){
            var tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, pSkillId);
            return DemoSkillHelper.GetSkillCD$$Skill(tSkill);
        },
        GetSkillCD$$Skill: function (pSkill){
            GameDebuger.LogError("[TEMP]技能冷却时间", null);
            if (null == pSkill)
                return 0;
            return pSkill.fixReleaseTime;
        },
        IsSuperSkill$$Skill: function (pSkill){
            GameDebuger.LogError("[TEMP]是否奥义技能", null);
            return null != pSkill && pSkill.id % 3 == 0;
        },
        IsSuperSkill$$Int32: function (pSkillId){
            var tSkill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, pSkillId);
            return DemoSkillHelper.IsSuperSkill$$Skill(tSkill);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DemoSkillHelper);
var CameraConst = {
    fullname: "CameraConst",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            CameraConst.BattleCameraLocalPosition = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-13.65 /* -13.65f */, 16.5, 22);
            CameraConst.BattleCameraLocalEulerAngles = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(30, 150, 0);
            CameraConst.BattleCameraFieldOfView = 20;
            CameraConst.BattleCameraOrthographicSize = 6.4699;
            CameraConst.WorldCameraLocalPosition = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 14.4, -24.5 /* -24.5f */);
            CameraConst.WorldCameraLocalEulerAngles = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(30, 0, 0);
            CameraConst.WorldCameraFieldOfView = 20;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(CameraConst);
var CameraController = {
    fullname: "CameraController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            CameraController.Instance = null;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._cameraMove = null;
            this._cameraShake = null;
            this._sceneCameraAnimator = null;
            this._battleCameraAnimator = null;
            this._action = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        CameraMove$$: "CameraMove",
        get_CameraMove: function (){
            return this._cameraMove;
        },
        CameraShake$$: "CameraShake",
        get_CameraShake: function (){
            return this._cameraShake;
        },
        Awake: function (){
            CameraController.Instance = this;
            var sceneCamGo = LayerManager.get_Root().SceneCameraTrans.get_gameObject();
            this._cameraMove = GameObjectExt.GetMissingComponent$1(CameraMove.ctor, sceneCamGo);
            if (UnityEngine.Object.op_Inequality(this._cameraMove, null)){
                this._cameraMove.height = CameraConst.WorldCameraLocalPosition.y;
                this._cameraMove.distance = CameraConst.WorldCameraLocalPosition.z;
                this._cameraMove.rotation = CameraConst.WorldCameraLocalEulerAngles;
            }
            this._cameraShake = GameObjectExt.GetMissingComponent$1(CameraShake.ctor, sceneCamGo);
            this._sceneCameraAnimator = LayerManager.get_Root().SceneCameraAnimator;
            this._battleCameraAnimator = LayerManager.get_Root().BattleCameraAnimator;
        },
        SetActive: function (state){
            this.get_gameObject().SetActive(state);
        },
        FollowTarget: function (target){
            this._cameraMove.Follow(target);
        },
        SyncTargetPos: function (){
            this._cameraMove.SyncTargetPos();
        },
        ResetCamera: function (){
            this._cameraMove.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
            this._cameraMove.target = null;
            this._cameraMove.followTarget = false;
        },
        PlayCameraAnimator: function (sceneId, cameraId){
            if (UnityEngine.Object.op_Equality(this._sceneCameraAnimator, null) || UnityEngine.Object.op_Equality(this._battleCameraAnimator, null))
                return;
            this._sceneCameraAnimator.set_enabled(true);
            this._battleCameraAnimator.set_enabled(true);
            this._action = System.String.Format$$String$$Object$$Object("camera_{0}_{1}", sceneId, cameraId);
            this._sceneCameraAnimator.Play$$String$$Int32$$Single(this._action, 0, 0);
            this._battleCameraAnimator.Play$$String$$Int32$$Single(this._action, 0, 0);
        },
        ChangeMode: function (mode){
            this._cameraMove.ResetPos();
            if (mode == UIMode.GAME){
                this._cameraMove.canScale = true;
                this._cameraMove.followTarget = true;
            }
            else {
                this._cameraMove.canScale = false;
                this._cameraMove.followTarget = false;
            }
        },
        LockScale: function (lockScale){
            this._cameraMove.lockScale = lockScale;
        }
    }
};
JsTypes.push(CameraController);
var CharacterHeadHud = {
    fullname: "CharacterHeadHud",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (_headFollowerTrans, _headFollowerOffset, _headName){
            this._headHUDView = null;
            this.headFollowerOffset = new UnityEngine.Vector3.ctor();
            this.headFollowerTrans = null;
            this.headName = null;
            System.Object.ctor.call(this);
            this.ResetHudFollower(_headFollowerTrans, _headFollowerOffset, _headName);
            this.LoadPrefab();
        },
        headHUDView$$: "ModelHeadHUDView",
        get_headHUDView: function (){
            return this._headHUDView;
        },
        ResetHudFollower: function (_headFollowerTrans, _headFollowerOffset, _headName){
            this.headFollowerTrans = _headFollowerTrans;
            this.headFollowerOffset = _headFollowerOffset;
            this.headName = _headName;
            if (this._headHUDView != null && UnityEngine.Object.op_Inequality(this._headHUDView.get_gameObject(), null)){
                this.SetHeadFollower();
            }
        },
        LoadPrefab: function (){
            this.TryLoadHeadPrefab();
            this.ResetHeadPrefab();
        },
        TryLoadHeadPrefab: function (){
            if (this._headHUDView == null || UnityEngine.Object.op_Equality(this._headHUDView.get_gameObject(), null)){
                var hudPrefab = null;
                hudPrefab = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("ModelHeadHUDView", LayerManager.get_Root().SceneUIHUDPanel.get_gameObject());
                hudPrefab.set_name(this.headName);
                this._headHUDView = BaseView.Create$1$$GameObject(ModelHeadHUDView.ctor, hudPrefab);
                this.SetHeadFollower();
            }
        },
        SetHeadFollower: function (){
            this._headHUDView.follower.gameCamera = LayerManager.get_Root().SceneCamera;
            this._headHUDView.follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
            this._headHUDView.follower.target = this.headFollowerTrans;
            this._headHUDView.follower.offset = this.headFollowerOffset;
            this._headHUDView.follower.set_enabled(true);
            this._headHUDView.follower.set_AlwaysVisible(true);
        },
        ResetHeadPrefab: function (){
            if (this._headHUDView != null && UnityEngine.Object.op_Inequality(this._headHUDView.get_gameObject(), null)){
                var transForms = this._headHUDView.get_gameObject().GetComponentsInChildren$1(UnityEngine.Transform.ctor);
                for (var i = 0; i < transForms.length; i++){
                    transForms[i].get_gameObject().SetActive(true);
                }
                var monoBehaviours = this._headHUDView.get_gameObject().GetComponentsInChildren$1(UnityEngine.MonoBehaviour.ctor);
                for (var i = 0; i < monoBehaviours.length; i++){
                    monoBehaviours[i].set_enabled(true);
                }
            }
        },
        Despawn: function (){
            if (this._headHUDView != null){
                this._headHUDView.follower.target = null;
                this.headFollowerTrans = null;
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnUI(this._headHUDView.get_gameObject());
                this._headHUDView = null;
            }
        },
        SetHeadHudActive: function (active){
            if (this._headHUDView != null){
                this._headHUDView.get_gameObject().SetActive(active);
            }
        }
    }
};
JsTypes.push(CharacterHeadHud);
var CharacterTitleHud = {
    fullname: "CharacterTitleHud",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (_TitleFollowerTrans, _titleFollowerOffset, _titleName){
            this._titleHUDView = null;
            this.titleFollowerTrans = null;
            this.titleFollowerOffset = new UnityEngine.Vector3.ctor();
            this.titleName = null;
            System.Object.ctor.call(this);
            this.ResetHudFollower(_TitleFollowerTrans, _titleFollowerOffset, _titleName);
            this.LoadPrefab();
        },
        titleHUDView$$: "ModelTitleHUDView",
        get_titleHUDView: function (){
            return this._titleHUDView;
        },
        ResetHudFollower: function (_TitleFollowerTrans, _titleFollowerOffset, _titleName){
            this.titleFollowerTrans = _TitleFollowerTrans;
            this.titleFollowerOffset = _titleFollowerOffset;
            this.titleName = _titleName;
            if (this._titleHUDView != null && UnityEngine.Object.op_Inequality(this._titleHUDView.get_gameObject(), null)){
                this.SetTitleFollower();
            }
        },
        LoadPrefab: function (){
            this.TryLoadTitlePrefab();
            this.ResetTitlePrefab();
        },
        TryLoadTitlePrefab: function (){
            if (this._titleHUDView == null || UnityEngine.Object.op_Equality(this._titleHUDView.get_gameObject(), null)){
                var titleHud = null;
                var loadFinish = false;
                var i = 5;
                while (loadFinish == false && i > 0){
                    i--;
                    loadFinish = true;
                    try{
                        titleHud = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("ModelTitleHUDView", LayerManager.get_Root().SceneHudTextPanel.get_gameObject());
                        titleHud.set_name(this.titleName);
                        this._titleHUDView = BaseView.Create$1$$GameObject(ModelTitleHUDView.ctor, titleHud);
                        this.SetTitleFollower();
                    }
                    catch(ex){
                        loadFinish = false;
                        UnityEngine.Object.Destroy$$Object(titleHud);
                        GameDebuger.LogException(ex, null);
                    }
                }
            }
        },
        SetTitleFollower: function (){
            this._titleHUDView.follower.gameCamera = LayerManager.get_Root().SceneCamera;
            this._titleHUDView.follower.uiCamera = LayerManager.get_Root().SceneHUDCamera;
            this._titleHUDView.follower.target = this.titleFollowerTrans;
            this._titleHUDView.follower.offset = this.titleFollowerOffset;
            this._titleHUDView.follower.set_enabled(true);
        },
        ResetTitlePrefab: function (){
            if (this._titleHUDView != null && UnityEngine.Object.op_Inequality(this._titleHUDView.get_gameObject(), null)){
                var transForms = this._titleHUDView.get_gameObject().GetComponentsInChildren$1(UnityEngine.Transform.ctor);
                for (var i = 0; i < transForms.length; i++){
                    transForms[i].get_gameObject().SetActive(true);
                }
                var monoBehaviours = this._titleHUDView.get_gameObject().GetComponentsInChildren$1(UnityEngine.MonoBehaviour.ctor);
                for (var i = 0; i < monoBehaviours.length; i++){
                    monoBehaviours[i].set_enabled(true);
                }
            }
        },
        Despawn: function (){
            if (this._titleHUDView != null){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnUI(this._titleHUDView.get_gameObject());
                this._titleHUDView = null;
            }
        },
        SetTitleHudActive: function (active){
            if (this._titleHUDView != null){
                this._titleHUDView.get_gameObject().SetActive(active);
            }
        }
    }
};
JsTypes.push(CharacterTitleHud);
var RequestLoadingTip = {
    fullname: "RequestLoadingTip",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            RequestLoadingTip._instance = null;
        },
        Setup: function (){
            var prefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("RequestLoadingTipPrefab"), UnityEngine.GameObject.ctor);
            if (UnityEngine.Object.op_Inequality(prefab, null)){
                var parent = LayerManager.get_Root().LockScreenPanel.get_cachedGameObject();
                if (UnityEngine.Object.op_Equality(parent, null)){
                    UnityEngine.Debug.LogError$$Object("RequestLoadingTip Setup not find parent");
                    return;
                }
                var loadingTip = NGUITools.AddChild$$GameObject$$GameObject(parent, prefab);
                loadingTip.set_name("RequestLoadingTip");
                RequestLoadingTip._instance = GameObjectExt.GetMissingComponent$1(RequestLoadingTip.ctor, loadingTip);
                RequestLoadingTip._instance.InitView();
            }
        },
        Show: function (tip, showCircle, boxCollider, autoCloseTime){
            if (UnityEngine.Object.op_Inequality(RequestLoadingTip._instance, null)){
                if (showCircle || boxCollider){
                    RequestLoadingTip._instance._Show(tip, showCircle, boxCollider, autoCloseTime);
                }
            }
        },
        Stop: function (tip){
            if (UnityEngine.Object.op_Inequality(RequestLoadingTip._instance, null)){
                RequestLoadingTip._instance._Stop(tip);
            }
        },
        Reset: function (){
            if (UnityEngine.Object.op_Inequality(RequestLoadingTip._instance, null)){
                RequestLoadingTip._instance._Reset();
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._loadingCount = 0;
            this._mGo = null;
            this._tipList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this._view = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        InitView: function (){
            this._mGo = this.get_gameObject();
            this._view = BaseView.Create$1$$GameObject(RequestLoadingTipPrefab.ctor, this._mGo);
            this._mGo.SetActive(false);
        },
        _Show: function (tip, showCircle, boxCollider, autoCloseTime){
            this._loadingCount++;
            this._view.LoadingGroup_Transform.get_gameObject().SetActive(showCircle);
            this._view.BlackSprite_BoxCollider.set_enabled(boxCollider);
            this._tipList.Add(tip);
            if (showCircle){
                this.UpdateTip();
            }
            this._mGo.SetActive(true);
            if (autoCloseTime > 0){
                this.CancelInvoke$$String("_Reset");
                this.Invoke("_Reset", autoCloseTime);
            }
        },
        UpdateTip: function (){
            var tips = "";
            tips = System.String.Join$$String$$String$Array("\n\n", this._tipList.ToArray());
            this._view.TipLabel_UILabel.set_text(tips);
        },
        _Stop: function (tip){
            this._loadingCount--;
            if (this._tipList.Contains(tip)){
                this._tipList.Remove(tip);
            }
            GameDebuger.Log("RequestLoadingTipStop " /* "RequestLoadingTipStop" + " " */ + this._loadingCount, null);
            if (this._loadingCount > 0){
                this.UpdateTip();
                return;
            }
            this._Reset();
        },
        _Reset: function (){
            this._tipList.Clear();
            this._loadingCount = 0;
            this._mGo.SetActive(false);
            this.CancelInvoke$$String("_Reset");
        }
    }
};
JsTypes.push(RequestLoadingTip);
var RequestLoadingTipPrefab = {
    fullname: "RequestLoadingTipPrefab",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            RequestLoadingTipPrefab.NAME = "RequestLoadingTipPrefab";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.LoadingGroup_Transform = null;
            this.TipLabel_UILabel = null;
            this.CircleSprite_UISprite = null;
            this.BgSprite_UISprite = null;
            this.BlackSprite_BoxCollider = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.LoadingGroup_Transform = root.Find("LoadingGroup");
            this.TipLabel_UILabel = root.Find("LoadingGroup/TipLabel").GetComponent$1(UILabel.ctor);
            this.CircleSprite_UISprite = root.Find("LoadingGroup/CircleSprite").GetComponent$1(UISprite.ctor);
            this.BgSprite_UISprite = root.Find("LoadingGroup/BgSprite").GetComponent$1(UISprite.ctor);
            this.BlackSprite_BoxCollider = root.Find("BlackSprite").GetComponent$1(UnityEngine.BoxCollider.ctor);
        }
    }
};
JsTypes.push(RequestLoadingTipPrefab);
var SceneFadeEffectController = {
    fullname: "SceneFadeEffectController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            SceneFadeEffectController.NAME = "SceneFadeEffectPrefab";
            SceneFadeEffectController.SpeedFactor = 1;
            SceneFadeEffectController._instance = null;
        },
        Show$$SceneDto$$Action$1$Int32$$Action: function (sceneDto, onFinishMap, onFinishFadeOut){
            SceneFadeEffectController.Show$$Int32$$Boolean$$Int32$$Boolean$$Action$1$Int32$$Action(sceneDto.get_sceneMap().resId, true, sceneDto.id, false, onFinishMap, onFinishFadeOut);
        },
        Show$$Video$$Action$1$Int32$$Action: function (battleVideo, onFinishMap, onFinishFadeOut){
            SceneFadeEffectController.Show$$Int32$$Boolean$$Int32$$Boolean$$Action$1$Int32$$Action(battleVideo.mapId, false, battleVideo.mapId, true, onFinishMap, onFinishFadeOut);
        },
        Show$$Int32$$Boolean$$Int32$$Boolean$$Action$1$Int32$$Action: function (sceneResId, is2dMap, callbackVal, isBattleScene, onFinishMap, onFinishFadeOut){
            var module = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("SceneFadeEffectPrefab" /* NAME */, UILayerType.SceneChange, false, true);
            if (UnityEngine.Object.op_Equality(SceneFadeEffectController._instance, null)){
                SceneFadeEffectController._instance = GameObjectExt.GetMissingComponent$1(SceneFadeEffectController.ctor, module);
            }
            SceneFadeEffectController._instance.ReSetViewStyle(is2dMap);
            SceneFadeEffectController._instance.FadeIn(sceneResId, is2dMap, callbackVal, isBattleScene, onFinishMap, onFinishFadeOut);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._callbackVal = 0;
            this._finishLoadMap = false;
            this._isBattleScene = false;
            this._maxLoadingValue = 0;
            this._onFinishFadeOut = null;
            this._onFinishLoadMap = null;
            this._sceneResId = 0;
            this._is2dMap = false;
            MonoViewController$1.ctor.call(this, SceneFadeEffectPrefab.ctor);
        },
        AfterInitView: function (){
            this.get_View().bgTexture.set_mainTexture(UnityEngine.Resources.Load$1$$String(UnityEngine.Texture.ctor, "Textures/LoadingBG/loadingBG"));
            GameDebuger.TODO("\n        if (_modelController == null)\n        {\n            _modelController = ModelDisplayController.GenerateUICom(View.loadingSliderThumb);\n            _modelController.Init(200, 200, new Vector3(-16.5f, -33.9f, 8.5f), 1f, ModelHelper.Anim_run, false);\n            _modelController.SetOrthographic(1.2f);\n            _modelController.SetupModel(2000);\n            _modelController.transform.localPosition = new Vector3(-20f, 56f, 0f);\n        }\n");
        },
        ReSetViewStyle: function (is2dMap){
            this.get_View().bgTexture.get_gameObject().SetActive(!is2dMap);
            GameDebuger.TODO("View.tipBg_Transform.gameObject.SetActive (!is2dMap);");
            this.get_View().loadingSliderThumb.get_gameObject().SetActive(!is2dMap);
        },
        FadeIn: function (sceneResId, is2dMap, callbakVal, isBattleScene, onFinishMap, onFinishFadeOut){
            this._sceneResId = sceneResId;
            this._is2dMap = is2dMap;
            this._callbackVal = callbakVal;
            this._isBattleScene = isBattleScene;
            this._onFinishLoadMap = onFinishMap;
            this._onFinishFadeOut = onFinishFadeOut;
            this.get_View().tipLbl.set_text(LoadingTipManager.GetLoadingTip());
            if (is2dMap){
                this.get_View().alphaTween.get_gameObject().SetActive(false);
                this.get_View().loadingSlider.get_gameObject().SetActive(false);
                if (isBattleScene){
                    WorldMapLoader.get_Instance().LoadBattleMap(sceneResId, $CreateDelegate(this, this.OnLoad2DMapFinish), null);
                }
                else {
                    WorldMapLoader.get_Instance().LoadWorldMap(sceneResId, $CreateDelegate(this, this.OnLoad2DMapFinish), null);
                }
            }
            else {
                this.get_View().alphaTween.get_gameObject().SetActive(true);
                this.get_View().loadingSlider.get_gameObject().SetActive(true);
                this._finishLoadMap = false;
                this.UpdateSliderInfo(0.05);
                EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().alphaTween.onFinished, $CreateDelegate(this, this.LoadSceneMap));
                this.get_View().alphaTween.PlayForward();
                GameDebuger.TODO("\n             if (_modelController != null)\n                {\n                    _modelController.PlayAnimation(ModelHelper.Anim_run);\n                }            \n            ");
            }
        },
        LoadSceneMap: function (){
            this._maxLoadingValue = UnityEngine.Random.Range$$Single$$Single(0.7, 0.9);
            if (this._isBattleScene){
                WorldMapLoader.get_Instance().LoadBattleMap(this._sceneResId, $CreateDelegate(this, this.OnLoadMapFinish), null);
            }
            else {
                WorldMapLoader.get_Instance().LoadWorldMap(this._sceneResId, $CreateDelegate(this, this.OnLoadMapFinish), null);
            }
            JSTimer.get_Instance().StartCoroutine$$IEnumerator(this.UpdateSliderProc());
        },
        UpdateSliderProc: function*(){
            while (!this._finishLoadMap){
                var nextValue = this.get_View().loadingSlider.get_value() + _jsComManager.dT * 1 /* SpeedFactor */;
                this.UpdateSliderInfo(nextValue);
                yield(null);
            }
            this.UpdateSliderInfo(this._maxLoadingValue);
            var asynOp = AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(true);
            if (asynOp != null){
                while (!asynOp.get_isDone()){
                    var nextValue = this.get_View().loadingSlider.get_value() + _jsComManager.dT * 1 /* SpeedFactor */;
                    this.UpdateSliderInfo(nextValue);
                    yield(null);
                }
            }
            this.UpdateSliderInfo(1);
            this.FadeOut();
        },
        OnLoadMapFinish: function (){
            if (this._onFinishLoadMap != null)
                this._onFinishLoadMap(this._callbackVal);
            this._onFinishLoadMap = null;
            this._finishLoadMap = true;
        },
        OnLoad2DMapFinish: function (){
            this.OnLoadMapFinish();
            this.Close();
        },
        UpdateSliderInfo: function (percent){
            this.get_View().loadingSlider.set_value(percent);
            this.get_View().loadingLbl.set_text(this.get_View().loadingSlider.get_value().ToString$$String("P0"));
        },
        FadeOut: function (){
            this.get_View().alphaTween.PlayReverse();
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().alphaTween.onFinished, $CreateDelegate(this, this.Close));
        },
        Close: function (){
            UIModuleManager.get_Instance().HideModule("SceneFadeEffectPrefab" /* NAME */);
            if (this._onFinishFadeOut != null)
                this._onFinishFadeOut();
        }
    }
};
JsTypes.push(SceneFadeEffectController);
var SceneFadeEffectPrefab = {
    fullname: "SceneFadeEffectPrefab",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SceneFadeEffectPrefab.NAME = "SceneFadeEffectPrefab";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.bgTexture = null;
            this.loadingSlider = null;
            this.tipLbl = null;
            this.alphaTween = null;
            this.loadingLbl = null;
            this.loadingSliderThumb = null;
            this.tipBg_Transform = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.bgTexture = root.Find("bgTexture").GetComponent$1(UITexture.ctor);
            this.loadingSlider = root.Find("loadingSlider").GetComponent$1(UISlider.ctor);
            this.tipLbl = root.Find("tipBg/tipLbl").GetComponent$1(UILabel.ctor);
            this.alphaTween = root.Find("fadeBg").GetComponent$1(TweenAlpha.ctor);
            this.loadingLbl = root.Find("loadingSlider/LoadingLabel").GetComponent$1(UILabel.ctor);
            this.loadingSliderThumb = root.Find("loadingSlider/loadingSliderThumb");
            this.tipBg_Transform = root.Find("tipBg");
        }
    }
};
JsTypes.push(SceneFadeEffectPrefab);
var CurrencyExchange = {
    fullname: "CurrencyExchange",
    baseTypeName: "System.Object",
    staticDefinition: {
        IngotToCopper: function (ingot){
            return Cast(System.Math.Ceiling$$Double(ingot * 1 * (ModelManager.get_Player().get_ServerGrade() * DataCache.GetStaticConfigValue(220 /* AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR1 */, 0) + DataCache.GetStaticConfigValue(221 /* AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR2 */, 0))), System.Int64.ctor);
        },
        RedPacketIngotToCopper: function (ingot){
            return UnityEngine.Mathf.FloorToInt(ingot * 1.1 * (ModelManager.get_Player().get_ServerGrade() * DataCache.GetStaticConfigValue(220 /* AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR1 */, 0) + DataCache.GetStaticConfigValue(221 /* AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR2 */, 0)));
        },
        CopperToIngot: function (copper){
            var value = copper * 1 / (ModelManager.get_Player().get_ServerGrade() * DataCache.GetStaticConfigValue(220 /* AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR1 */, 0) + DataCache.GetStaticConfigValue(221 /* AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR2 */, 0));
            return ((System.Math.Ceiling$$Double(value)) | 0);
        },
        SilverToIngot: function (silver){
            return ((System.Math.Ceiling$$Double(silver * 1 / DataCache.GetStaticConfigValue(222 /* AppStaticConfigs.INGOT_CONVERT_SILVER */, 0))) | 0);
        },
        ContributeToCopper: function (contribute){
            return contribute * DataCache.GetStaticConfigValue(9100 /* AppStaticConfigs.ASSIST_SKILL_CONTRIBUTE_TO_COPPER */, 0);
        },
        ItemNeedToIngot: function (itemId, needCount, costCount){
            costCount.Value = needCount;
            var _ingot = 0;
            GameDebuger.TODO("if (itemId < 100)\n        {\n            //GeneralItem value = DataCache.getDtoByCls<GeneralItem>(itemId);\n            if (itemId == AppVirtualItem.VirtualItemEnum_COPPER)\n            {\n                // 铜币 不足\n                if (ModelManager.Player.isEnoughCopper(needCount) == false)\n                {\n                    costCount = (int)ModelManager.Player.GetWealth().copper;\n                    long needCopper = needCount - ModelManager.Player.GetWealth().copper;\n                    _ingot = CurrencyExchange.CopperToIngot(needCopper);\n                }\n            }\n            else if (itemId == AppVirtualItem.VirtualItemEnum_SILVER)\n            {\n                // 银币 不足\n                if (ModelManager.Player.isEnoughSilver(needCount) == false)\n                {\n                    costCount = ModelManager.Player.GetWealth().silver;\n                    long needCopper = needCount - ModelManager.Player.GetWealth().silver;\n                    _ingot = CurrencyExchange.SilverToIngot((int)needCopper);\n                }\n            }\n        }\n        else\n        {\n            int itemCount = ModelManager.Backpack.GetItemCount(itemId);\n            Props value = DataCache.getDtoByCls<GeneralItem>(itemId) as Props;\n            if (itemCount < needCount)\n            {\n                costCount = itemCount;\n                _ingot = value.buyPrice * (needCount - itemCount);\n            }\n        }");
            return _ingot;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(CurrencyExchange);
var ModelStyleInfo = {
    fullname: "ModelStyleInfo",
    baseTypeName: "System.Object",
    staticDefinition: {
        ToInfo$$CharacterEntity: function (characterEntity){
            var info = new ModelStyleInfo.ctor();
            info.defaultModelId = characterEntity.modelId;
            info.mainTexture = characterEntity.modelId;
            info.mutateTexture = characterEntity.mutateTexture;
            info.mutateColorParam = characterEntity.mutateColor;
            info.weaponId = characterEntity.wpModel;
            info.set_hallowSpriteId(characterEntity.hallowSpriteId);
            info.set_ModelScale(characterEntity.scale);
            info.showShadow = true;
            return info;
        },
        ToInfo$$ScenePlayerDto: function (playerDto){
            var charactorInfo = playerDto.get_charactor();
            var info = new ModelStyleInfo.ctor();
            info.defaultModelId = charactorInfo.modelId;
            info.mainTexture = charactorInfo.texture;
            info.mutateTexture = charactorInfo.mutateTexture;
            info.mutateColorParam = charactorInfo.mutateColor;
            var isSelf = playerDto.id == ModelManager.get_Player().GetPlayerId();
            if (isSelf){
                info.weaponEffLv = 3;
                info.rideEffect = true;
            }
            else {
                GameDebuger.TODO("if (playerDto.dressInfoDto != null)\n                info.weaponEffLv = ModelManager.Equipment.IsDefaultWeaponEffect(playerDto.dressInfoDto.weaponEffect) ? 1 : 3;\n            else    //针对GM指令 机器人的情况\n                info.weaponEffLv = 3;");
                info.rideEffect = false;
            }
            if (isSelf){
                info.weaponEffId = 0;
                GameDebuger.TODO("info.weaponId = ModelManager.Backpack.GetCurrentWeaponModel();\n            info.hallowSpriteId = ModelManager.Backpack.GetCurrentHallowSpriteId();");
            }
            GameDebuger.TODO("else if (playerDto.dressInfoDto != null)\n        {\n            info.weaponId = playerDto.dressInfoDto.wpmodel;\n            info.weaponEffId = playerDto.dressInfoDto.weaponEffect;\n            info.hallowSpriteId = playerDto.dressInfoDto.hallowSpriteId;\n        }");
            GameDebuger.TODO("if (playerDto.transformModelId != 0)\n        {\n            info.TransformModelId = playerDto.transformModelId;\n        }\n        else if (playerDto.dressInfoDto != null)\n        {\n            if (playerDto.dressInfoDto.showDress\n                && playerDto.dressInfoDto.fashionDressIds != null\n                && playerDto.dressInfoDto.fashionDressIds.Count > 0)\n            {\n                info.SetupFashionIds(playerDto.dressInfoDto.fashionDressIds);\n            }\n\n        info.mutateColorParam = PlayerModel.GetDyeColorParams(playerDto.dressInfoDto);\n        }");
            info.SetModelInfoScale(info.GetModelInfoId());
            info.showShadow = true;
            GameDebuger.TODO("if (playerDto.playerShortRide != null \n        && playerDto.playerShortRide.status == PlayerRideDto.RideStatus_Riding\n        && !info.IsTransformModel\n        && playerDto.playerShortRide.rideMount != null)\n        {\n            RideMountNotify rideMount = playerDto.playerShortRide.rideMount;\n            SetRideMount(info, rideMount, playerDto.playerShortRide.level);\n        }\n        else");
            info.rideId = 0;
            return info;
        },
        ToInfo$$GeneralCharactor: function (charactor){
            var info = new ModelStyleInfo.ctor();
            if (charactor != null){
                info.defaultModelId = charactor.modelId;
                info.mainTexture = charactor.texture;
                info.mutateTexture = charactor.mutateTexture;
                info.mutateColorParam = charactor.mutateColor;
            }
            return info;
        },
        ToInfoWithNpcAppearanceDto: function (soldier, showFashion){
            var info = ModelStyleInfo.ToInfo$$VideoSoldier$$Boolean(soldier, showFashion);
            GameDebuger.TODO("if (npcAppearanceDto != null)\n        {\n\n            //if (DataCache.GetStaticConfigValue(AppStaticConfigs.WORLD_GHOST_BOSS_MONSTER_ID, 47001) == npcAppearanceDto.soldierId)   //monster_com表中数据 TODO 问服务端这47001是独立的还是哪里有关联的\n            //{\n            //    //世界Boss鬼姬 血量低于20% 狂暴\n            //    if(null !=ModelManager.SnowWorldBoss.worldGhostInfoDto)\n            //    {\n            //        WorldGhostInfoDto tWorldGhostInfoDto = ModelManager.SnowWorldBoss.worldGhostInfoDto;\n            //        if(tWorldGhostInfoDto.bossHp / tWorldGhostInfoDto.bossMaxHp - 0.2 < 0)\n            //        {\n            //            int id = DataCache.GetStaticConfigValue(AppStaticConfigs.WORLD_GHOST_BOSS_FURY_MODEL, 34002);  //世界Boss鬼姬狂暴的模型Id 见导表NpcAppearanceDto                                                                                                                       \n            //            npcAppearanceDto = DataCache.getDtoByCls<NpcAppearanceDto>(id);\n            //        }\n            //    }    \n            //}\n\n            info.weaponId = npcAppearanceDto.wpmodel;\n            info.mutateColorParam = npcAppearanceDto.mutateColor;\n            info.mutateTexture = npcAppearanceDto.mutateTexture;\n            info.defaultModelId = npcAppearanceDto.modelId;\n            info.mainTexture = npcAppearanceDto.modelId;\n            info.ornamentId = npcAppearanceDto.ornamentId;\n        if (npcAppearanceDto.scale > 0)\n        {\n        info.ModelScale = npcAppearanceDto.scale;\n        }\n        }");
            return info;
        },
        ToInfo$$VideoSoldier$$Boolean: function (soldier, showFashion){
            var info = new ModelStyleInfo.ctor();
            if (soldier.playerDressInfo != null && soldier.playerDressInfo.charactorId != 0){
                if (soldier.playerDressInfo.transformModelId > 0){
                    info.set_TransformModelId(soldier.playerDressInfo.transformModelId);
                }
                else {
                    GameDebuger.TODO("if (soldier.character != null && (soldier.character is Pet || soldier.character is Crew))\n                {\n                    info = ToInfo(soldier.character);\n                    if (soldier.character is Pet)\n                    {\n                        info.ornamentId = soldier.playerDressInfo.ornamentId;\n                        info.ornamentColorParam =\n                            PetModel.GetOrnmentDyeColorStr(soldier.playerDressInfo.petOrnamentDyeCaseId);\n\n                        var petDyeCase = DataCache.getDtoByCls<PetDyeCase>(soldier.playerDressInfo.dyeCaseId);\n\n                        if (petDyeCase != null)\n                        {\n                            info.mutateColorParam = PetModel.GetDyeColorStr(soldier.playerDressInfo.dyeCaseId);\n                            if (!petDyeCase.changeColor)\n                            {\n                                info.mutateTexture = 0;\n                            }\n                        }\n                        else\n                        {\n                            if (!soldier.mutate)\n                            {\n                                info.mutateTexture = 0;\n                            }\n                        }\n                    }\n                }\n                else");
                    var charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, soldier.playerDressInfo.charactorId);
                    info.defaultModelId = charactor.modelId;
                    info.mainTexture = charactor.texture;
                    info.weaponId = soldier.playerDressInfo.wpmodel;
                    info.weaponEffId = soldier.playerDressInfo.weaponEffect;
                    GameDebuger.TODO("info.hallowSpriteId = soldier.playerDressInfo.hallowSpriteId;");
                    var isSelf = soldier.id == ModelManager.get_Player().GetPlayerId();
                    if (isSelf){
                        info.weaponEffLv = 3;
                    }
                    else {
                        GameDebuger.TODO("info.weaponEffLv = ModelManager.Equipment.IsDefaultWeaponEffect(soldier.playerDressInfo.weaponEffect) ? 1 : 3;");
                    }
                    if (soldier.playerDressInfo.showDress && soldier.playerDressInfo.fashionDressIds.get_Count() > 0){
                        info.SetupFashionIds(soldier.playerDressInfo.fashionDressIds);
                    }
                    info.mutateColorParam = PlayerModel.GetDyeColorParams$$PlayerDressInfo(soldier.playerDressInfo);
                }
            }
            else {
                if (soldier.get_charactor() != null){
                    info = ModelStyleInfo.ToInfo$$GeneralCharactor(soldier.get_charactor());
                    GameDebuger.TODO("if (soldier.mutate == false)\n                {\n                    info.mutateTexture = 0;\n                    info.mutateColorParam = \";\n                }");
                }
                GameDebuger.TODO("else\n            {\n                if (soldier.monster.modelId > 0)\n                {\n                    info.defaultModelId = soldier.monster.modelId;\n                }\n                else if (soldier.monster.pet != null)\n                {\n                    info.defaultModelId = soldier.monster.pet.modelId;\n                }\n\n                if (soldier.monster.texture > 0)\n                {\n                    info.mainTexture = soldier.monster.texture;\n                }\n                else if (soldier.monster.pet != null)\n                {\n                    info.mainTexture = soldier.monster.pet.texture;\n                }\n\n                if (soldier.monster.mutateTexture > 0)\n                {\n                    info.mutateTexture = soldier.monster.mutateTexture;\n                }\n                else if (soldier.monster.pet != null)\n                {\n                    info.mutateTexture = soldier.monster.pet.mutateTexture;\n                }\n\n                if (soldier.monster.mutateColor != \")\n                {\n                    info.mutateColorParam = soldier.monster.mutateColor;\n                }\n                else if (soldier.monster.pet != null)\n                {\n                    info.mutateColorParam = soldier.monster.pet.mutateColor;\n                }\n\n                info.weaponId = soldier.monster.wpmodel;\n\n                if (soldier.monster.pet != null && soldier.monsterType != Monster.MonsterType_Mutate)\n                {\n                    info.mutateTexture = 0;\n                    info.mutateColorParam = \'\';\n                }\n\n            //这里判断下， 如果>0才设置，==0表示这个设置不起作用， 让后续的设置\n            if (soldier.monster.scale > 0)\n            {\n            info.ModelScale = soldier.monster.scale;\n            }\n            }");
            }
            if (!showFashion){
                info.SetupFashionIds(null);
            }
            if (info.get_ModelScale() == 0){
                info.SetModelInfoScale(info.GetModelInfoId());
            }
            info.RemoveRoundAndFootEff();
            return info;
        },
        ToInfo$$BaseNpcInfo: function (baseNpcInfo){
            var info = new ModelStyleInfo.ctor();
            info.defaultModelId = baseNpcInfo.modelId;
            info.mainTexture = baseNpcInfo.texture == 0 ? baseNpcInfo.modelId : baseNpcInfo.texture;
            info.mutateColorParam = baseNpcInfo.mutateColor;
            info.mutateTexture = baseNpcInfo.mutateTexture;
            info.weaponId = baseNpcInfo.wpmodel;
            var playerDressInfo = baseNpcInfo.playerDressInfo;
            GameDebuger.TODO("RideMountNotify rideMountNotify = baseNpcInfo.rideMountNotify;\n        if (playerDressInfo != null)\n            BaseNpcInfoToInfoSetPlayer(info, playerDressInfo, rideMountNotify, baseNpcInfo.rideLevel);");
            info.set_ModelScale(baseNpcInfo.scale);
            info.showShadow = true;
            info.shadowScale = 1;
            info.ornamentId = baseNpcInfo.ornamentId;
            ModelStyleInfo.BaseNpcInfoToInfoSetNpc(baseNpcInfo, info);
            return info;
        },
        BaseNpcInfoToInfoSetNpc: function (baseNpcInfo, info){
            if (Is(baseNpcInfo.get_npcStateDto().get_npc(), AppDto.NpcDoubleTeleport.ctor)){
                info._specialModelResKey = "portal" /* PathHelper.Portal_PREFAB_PATH */;
            }
            GameDebuger.TODO("if (baseNpcInfo.npcStateDto.npc is NpcScenePreciousBox)\n        {\n            info._specialModelResKey = PathHelper.Chest_PREFAB_PATH;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneBridalSedanBox)\n        {\n            info._specialModelResKey = PathHelper.SedanBox_PREFAB_PATH;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneBridalSedanSweet)\n        {\n            info._specialModelResKey = PathHelper.MarrigeSweetBox_PREFAB_PATH;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneBridalSedanPetBox)\n        {\n            info._specialModelResKey = PathHelper.SedanPetBox_PREFAB_PATH;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneGoldBox)\n        {\n            info._specialModelResKey = PathHelper.WorldBoss_Chest_PREFAB_PATH;\n            info.ModelScale = 1.5f;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneMarriageSweetBox)\n        {\n            info._specialModelResKey = PathHelper.MarrigeSweetBox_PREFAB_PATH;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneWorldBossPreciousBox)\n        {\n            info._specialModelResKey = PathHelper.WorldBoss_Chest_PREFAB_PATH;\n            info.ModelScale = 1.5f;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneGuildCompBox)\n        {\n            info._specialModelResKey = PathHelper.WorldBoss_Chest_PREFAB_PATH;\n            info.ModelScale = 1.5f;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneMazeBox)\n        {\n            NpcSceneMazeBox boxNpc = baseNpcInfo.npcStateDto.npc as NpcSceneMazeBox;\n            if (boxNpc.boxType == NpcSceneMazeBox.MazeBoxType_Box)\n            {\n                info._specialModelResKey = PathHelper.Chest_PREFAB_PATH;\n                info.shadowScale = 2f;\n            }\n            else\n            {\n                info._specialModelResKey = PathHelper.WorldBoss_Chest_PREFAB_PATH;\n                info.ModelScale = 1.5f;\n                info.shadowScale = 2f;\n            }\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneGrass)\n        {\n            //NpcSceneGrass grassNpc = baseNpcInfo.npcStateDto.npc as NpcSceneGrass;\n            info._specialModelResKey = PathHelper.Grass_PREFAB_PATH;\n            info.ModelScale = 1.5f;\n            info.shadowScale = 2f;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneTeleport)\n        {\n            info._specialModelResKey = PathHelper.Portal_PREFAB_PATH;\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneMythLandBox)\n        {\n            var tNpcSceneMythLandBox = baseNpcInfo.npcStateDto.npc as NpcSceneMythLandBox;\n            info._specialModelResKey = string.Format(PathHelper.Dreamland_Chest_PREFAB_PATH,\n                tNpcSceneMythLandBox.boxType);\n        }\n        else if (baseNpcInfo.npcStateDto.npc is NpcSceneWorldGhostBox)\n        {\n            //世界Boss箱子\n            info._specialModelResKey = PathHelper.WorldBoss_Chest_PREFAB_PATH;\n            info.ModelScale = 1.5f;\n            info.shadowScale = 2f;\n        }");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._modelScale = 0;
            this._specialModelResKey = null;
            this.shadowScale = 1;
            this.showShadow = false;
            this.defaultModelId = 0;
            this.mainTexture = 0;
            this.mutateColorParam = "";
            this.mutateTexture = 0;
            this.ornamentId = 0;
            this.ornamentColorParam = null;
            this.rideId = 0;
            this.rideMutateColorParam = null;
            this.rideOrnamentId = 0;
            this.rideOrnamentColorParam = null;
            this.rideMaxEffect = false;
            this.rideEffect = false;
            this._transformModelId = 0;
            this.useFashionDefaultModel = false;
            this.weaponId = 0;
            this.weaponEffLv = 1;
            this.weaponEffId = 0;
            this.mHallowSpriteId = 0;
            this._SoulModelId = null;
            System.Object.ctor.call(this);
        },
        ModelScale$$: "System.Single",
        get_ModelScale: function (){
            return this._modelScale;
        },
        set_ModelScale: function (value){
            if (value > 0)
                this._modelScale = value;
            else
                this._modelScale = 1;
        },
        DefaultModelResKey$$: "System.String",
        get_DefaultModelResKey: function (){
            if (!System.String.IsNullOrEmpty(this._specialModelResKey))
                return this._specialModelResKey;
            if (this._transformModelId != 0)
                return ModelHelper.GetCharacterPrefabPath(this._transformModelId);
            GameDebuger.TODO("if (_fashionTransformModel != null)\n                return _fashionTransformModel.modelId;");
            return ModelHelper.GetCharacterPrefabPath(this.defaultModelId);
        },
        GetModelInfoId: function (){
            if (this._transformModelId != 0)
                return this._transformModelId;
            GameDebuger.TODO("if (_fashionTransformModel != null)\n            return int.Parse(_fashionTransformModel.modelId.Replace(\'pet_\', \'\'));");
            return this.defaultModelId;
        },
        SetModelInfoScale: function (modelId){
            var model = DataCache.getDtoByCls$1(AppDto.Model.ctor, modelId);
            if (model != null){
                this.set_ModelScale(model.scale);
            }
            else {
                GameDebuger.LogWarning("SetModelInfoScale NullError modelId=" + modelId, null);
            }
        },
        hallowSpriteId$$: "System.Int32",
        get_hallowSpriteId: function (){
            return this.mHallowSpriteId;
        },
        set_hallowSpriteId: function (value){
            if (this.mHallowSpriteId != value){
                this.mHallowSpriteId = value;
                this.UpdateSoulModel();
            }
        },
        SoulModelId$$: "System.String",
        get_SoulModelId: function (){
            return this._SoulModelId;
        },
        set_SoulModelId: function (value){
            this._SoulModelId = value;
        },
        UpdateSoulModel: function (){
            GameDebuger.TODO("SoulModelId = HallowUtil.GetSoulModel(hallowSpriteId);");
        },
        IsTransformModel$$: "System.Boolean",
        get_IsTransformModel: function (){
            GameDebuger.TODO("return _transformModelId != 0 || _fashionTransformModel != null;");
            return this._transformModelId != 0;
        },
        IsFashionModel$$: "System.Boolean",
        get_IsFashionModel: function (){
            GameDebuger.TODO("return _fashionHead != null\n                   || _fashionBody != null\n                   || _fashionWeapon != null;");
            return false;
        },
        IsSpecialModel$$: "System.Boolean",
        get_IsSpecialModel: function (){
            return !System.String.IsNullOrEmpty(this._specialModelResKey);
        },
        HasStyleModel$$: "System.Boolean",
        get_HasStyleModel: function (){
            return this.get_IsTransformModel() || this.get_IsFashionModel() || this.get_IsSpecialModel() || this.defaultModelId != 0;
        },
        HasRide$$: "System.Boolean",
        get_HasRide: function (){
            return this.rideId != 0;
        },
        TransformModelId$$: "System.Int32",
        get_TransformModelId: function (){
            return this._transformModelId;
        },
        set_TransformModelId: function (value){
            this._transformModelId = value;
            if (value != 0){
                this.weaponId = 0;
                this.defaultModelId = 0;
                this.set_hallowSpriteId(0);
                this.mainTexture = value;
                this.mutateTexture = 0;
                this.mutateColorParam = "";
            }
        },
        FashionHeadResKey$$: "System.String",
        get_FashionHeadResKey: function (){
            GameDebuger.TODO("if (_fashionHead != null)\n            {\n                return _fashionHead.modelId;\n            }\n            if (_fashionWeapon != null || useFashionDefaultModel)\n            {\n                return \'pet_\' + defaultModelId + \'_01_head\';\n            }");
            return "";
        },
        FashionBodyResKey$$: "System.String",
        get_FashionBodyResKey: function (){
            GameDebuger.TODO("if (_fashionBody != null)\n            {\n                return _fashionBody.modelId;\n            }\n            if (_fashionWeapon != null || useFashionDefaultModel)\n            {\n                return \'pet_\' + defaultModelId + \'_01_body\';\n            }");
            return "";
        },
        RideResKey$$: "System.String",
        get_RideResKey: function (){
            if (this.rideId > 0){
                return "ride_pet_" + this.rideId;
            }
            return "";
        },
        SetupFashionIds: function (fashionIds){
            GameDebuger.TODO("//重新设置时装列表时,先清空时装信息\n        _fashionHead = null;\n        _fashionBody = null;\n        _fashionWeapon = null;\n        _fashionFootprint = null;\n        _fashionSurroundEffect = null;\n        _fashionTransformModel = null;\n\n        if (fashionIds != null)\n        {\n            for (int i = 0; i < fashionIds.Count; i++)\n            {\n                UpdateFashionPart(fashionIds[i]);\n            }\n        }\n        //现在改为变身时装和其他时装是共存的（足迹和氛围）\n        //if (_fashionTransformModel != null) //如果有变身时装 其他时装都不显示\n        //{\n        //    _fashionHead = null;\n        //    _fashionBody = null;\n        //    _fashionWeapon = null;\n        //    _fashionFootprint = null;\n        //    _fashionSurroundEffect = null;\n        //}\n        SetModelInfoScale(GetModelInfoId());");
        },
        RemoveRoundAndFootEff: function (){
            GameDebuger.TODO("_fashionFootprint = null;\n        _fashionSurroundEffect = null;");
        }
    }
};
JsTypes.push(ModelStyleInfo);
var PlayerGameState = {
    fullname: "PlayerGameState",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PlayerGameState.IsAutoFram = false;
            PlayerGameState.FollowTargetNpc = null;
        },
        Save: function (){
            PlayerGameState.IsAutoFram = ModelManager.get_Player().get_IsAutoFram();
            PlayerGameState.FollowTargetNpc = WorldManager.get_Instance().GetTargetNpc();
        },
        Reset: function (){
            PlayerGameState.IsAutoFram = false;
            PlayerGameState.FollowTargetNpc = null;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PlayerGameState);
var PlayerPropertyInfo = {
    fullname: "PlayerPropertyInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor$$CharactorDto: function (dto){
            this.playerDto = null;
            this.EqAps = null;
            this.RideAps = null;
            this.sp = 0;
            System.Object.ctor.call(this);
            this.playerDto = dto;
            this.EqAps = new Int32Array(5);
            this.RideAps = new Int32Array(5);
        },
        ctor$$PlayerPropertyInfo: function (playerInfo){
            this.playerDto = null;
            this.EqAps = null;
            this.RideAps = null;
            this.sp = 0;
            System.Object.ctor.call(this);
            this.playerDto = new AppDto.CharactorDto.ctor();
            this.EqAps = new Int32Array(5);
            this.RideAps = new Int32Array(5);
            GameDebuger.TODO("ResetPlayerInfo(playerInfo);");
        }
    }
};
JsTypes.push(PlayerPropertyInfo);
var IPlayerModel = {
    fullname: "IPlayerModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IPlayerModel);
var PlayerModel = {
    fullname: "PlayerModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PlayerModel.stream = null;
            PlayerModel.DEFENSE_FORMATION_INDEX = 0;
        },
        Stream$$: "UniRx.IObservable`1[[IPlayerModel]]",
        get_Stream: function (){
            if (PlayerModel.stream == null)
                PlayerModel.stream = new UniRx.Subject$1.ctor(IPlayerModel.ctor);
            return PlayerModel.stream;
        },
        GetDyeColorParams$$PlayerSimpleDressInfoDto: function (dressInfo){
            if (dressInfo == null)
                return "";
            return PlayerModel.GetDyeColorParams$$Int32$$Int32$$Int32(dressInfo.hairDyeId, dressInfo.dressDyeId, dressInfo.accoutermentDyeId);
        },
        GetDyeColorParams$$PlayerDressInfo: function (dressInfo){
            if (dressInfo == null)
                return "";
            return PlayerModel.GetDyeColorParams$$Int32$$Int32$$Int32(dressInfo.hairDyeId, dressInfo.dressDyeId, dressInfo.accoutermentDyeId);
        },
        GetDyeColorParams$$Int32$$Int32$$Int32: function (hairId, clothId, decorationId){
            if (hairId == 0 && clothId == 0 && decorationId == 0)
                return "";
            var colorParams = new Array(3);
            var colorSchemeIds = new Int32Array([hairId, clothId, decorationId]);
            for (var i = 0; i < colorParams.length; ++i){
                GameDebuger.TODO("if(colorSchemeIds[i] != 0)\r\n                colorParams[i] = DataCache.getDtoByCls<Dye>(colorSchemeIds[i]).colorStr;\r\n            else");
                colorParams[i] = "0,1,1,0";
            }
            return System.String.Join$$String$$String$Array(";", colorParams);
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel", "IPlayerModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._playerDto = null;
            this._playerPropertyInfo = null;
            this._totalSpellExp = 0;
            this.teamDisposible = null;
            this.tempRideId = 0;
            this._serverGradeDto = null;
            this._nextServerGradeOpenTime = 0;
            this._acquiredFormationIds = null;
            this._formationCaseIds = null;
            this.ActiveCaseIndex = -1 /* -1 */;
            this.CurSelectCaseIndex = -1 /* -1 */;
            this._formationPosInfoDic = null;
            this._formationPositiveEffectDic = null;
            this._formationNegativeEffectDic = null;
            this.convertRateDic = null;
            this.autoAddPoint = false;
            this.tipsList = null;
            this._transformModelId = 0;
            this._playerDefaultSkillId = 0;
            this._petDefaultSkillId = 0;
            this._stopUpgrade = false;
            this.mNextChangeFactionTime = 0;
            this.mChangeEmbedEndTime = 0;
            this._IsAutoFram = false;
            System.Object.ctor.call(this);
            this.teamDisposible = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ITeamData.ctor, TeamDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (s){
                if (s == null)
                    return;
                if (s.get_LeaderID() != ModelManager.get_IPlayer().GetPlayerId())
                    this.StopAutoNav();
            }));
        },
        TotalSpellExp$$: "System.Int64",
        get_TotalSpellExp: function (){
            return this._totalSpellExp;
        },
        ReserveExp$$: "System.Int32",
        get_ReserveExp: function (){
            GameDebuger.TODO("return _playerDto.subWealth.reserveExp;");
            return 0;
        },
        isEnoughVigour: function (needVigour, tip){
            GameDebuger.TODO("if(_playerDto.subWealth.vigour >= needVigour){\r\n            return true;\r\n        }\r\n        else{\r\n            if (tip)\r\n            {\r\n                //TipManager.AddTip(\'活力不足\');\r\n                      ProxyManager.Tips.Open(\'增加活力\', 10007, 1, (ingot) =>\r\n                      {\r\n                          //ModelManager.BackpackModel.UsePropByItemId(item.itemId);\r\n                          ServiceRequestAction.requestServer(BackpackService.fastGainVigour());\r\n                      });\r\n            }\r\n            return false;\r\n        }");
            return true;
        },
        Vigour$$: "System.Int32",
        get_Vigour: function (){
            GameDebuger.TODO("return _playerDto.subWealth.vigour;");
            return 0;
        },
        set_Vigour: function (value){
            GameDebuger.TODO("_playerDto.subWealth.vigour = value;");
        },
        VigourMax$$: "System.Int32",
        get_VigourMax: function (){
            return this.GetPlayerLevel() * 20 + 50;
        },
        UpdateServerGradeDto: function (serverGradeDto){
            if (serverGradeDto == null){
                UnityEngine.Debug.LogError$$Object("GameServerGradeDto is null");
                return;
            }
            this._serverGradeDto = serverGradeDto;
            this._nextServerGradeOpenTime = this.GetNextServerOpenTime(serverGradeDto);
        },
        ServerGrade$$: "System.Int32",
        get_ServerGrade: function (){
            return this._serverGradeDto.serverGrade;
        },
        NextServerGradeOpenTime$$: "System.Int64",
        get_NextServerGradeOpenTime: function (){
            return this._nextServerGradeOpenTime;
        },
        GetNextServerOpenTime: function (serverGradeDto){
            var serverGradeList = DataCache.getArrayByCls$1(AppDto.GameServerGrade.ctor);
            if (serverGradeList == null)
                return -1 /* -1L */;
            var nextGradeIndex = -1 /* -1 */;
            for (var i = 0; i < serverGradeList.get_Count(); ++i){
                if (serverGradeList.get_Item$$Int32(i).grade == serverGradeDto.serverGrade){
                    nextGradeIndex = i + 1;
                    break;
                }
            }
            if (nextGradeIndex != -1 /* -1 */ && nextGradeIndex < serverGradeList.get_Count()){
                var daySpan = serverGradeList.get_Item$$Int32(nextGradeIndex).id;
                return serverGradeDto.openTime + daySpan * 86400000;
            }
            else
                return -1 /* -1L */;
        },
        IsVip: function (){
            GameDebuger.TODO("return _playerDto.vipExpiredTime > SystemTimeManager.Instance.GetUTCTimeStamp();");
            return false;
        },
        BuyVip: function (vipId){
            TipManager.AddTip("测试期间未开放VIP", false, false, "");
            return;
        },
        SetupTempPlayerDto: function (playerDto){
            this._playerDto = playerDto;
            PlayerPrefsExt.PLAYER_PREFIX = this._playerDto.id.toString();
        },
        Setup: function (data){
            this._playerDto = As(data, AppDto.PlayerDto.ctor);
            PlayerPrefsExt.PLAYER_PREFIX = this._playerDto.id.toString();
            XinGeSdk.RegisterWithAccount(System.String.Format$$String$$Object$$Object("{0}_{1}", GameSetting.BundleId, this._playerDto.id));
            GameDebuger.TODO("_festivalDto = null;\r\n        _festivalReward = null;");
            SystemTimeManager.get_Instance().remove_OnChangeNextDay($CreateDelegate(this, this.OnChangeNextDay));
            SystemTimeManager.get_Instance().add_OnChangeNextDay($CreateDelegate(this, this.OnChangeNextDay));
            GameDebuger.TODO("ModelManager.DailyPush.InitDefaultPush();");
        },
        OnChangeNextDay: function (){
            GameDebuger.TODO("ModelManager.Arena.ResetRemainTimes();");
            this.ResetAddPointPlanChangeTimes();
            GameDebuger.TODO("_festivalDto = null;\r\n        _festivalReward = null;");
        },
        SetupFromAfterLogin: function (afterLoginDto){
            if (afterLoginDto.sceneId != 0){
                this._playerDto.sceneId = afterLoginDto.sceneId;
            }
            this._playerPropertyInfo = new PlayerPropertyInfo.ctor$$CharactorDto(afterLoginDto.charactor);
            this.InitConvertRateDic(this._playerPropertyInfo.playerDto.factionId);
            GameDebuger.TODO("/** 本次储备经验，可为null表示没有 */\r\n        _reserveExpDto = afterLoginDto.reserveExpDto;\r\n\r\n        /** 总储备经验 */\r\n        _playerDto.subWealth.reserveExp = afterLoginDto.reserverExp;\r\n\r\n        /** 服务器等级信息 */\r\n        UpdateServerGradeDto(afterLoginDto.gameServerGradeDto);\r\n\r\n        /** 玩家阵法信息 */\r\n        SetupFormationInfo(afterLoginDto);\r\n\r\n        /** 师傅名字 */\r\n        MasterName = afterLoginDto.masterName;\r\n\r\n        /** 玩家称谓信息 */\r\n        SetupTitleInfo(afterLoginDto.titleDtoList);\r\n        // SetupMaterTitleInfo(afterLoginDto.titleDtoList);\r\n\r\n        _guildInfo = afterLoginDto.guildInfo;\r\n\r\n        _showItemsCount = afterLoginDto.showItemsCount;\r\n\r\n        //提升 因为需要获取活力VigourMax需要用到_playerPropertyInfo。\r\n        PromoteManager.Instance.Setup();\r\n\r\n        CheckPlayerHasPotentialPoint();\r\n\r\n        _playerDefaultSkillId = afterLoginDto.playerDefaultSkillId;\r\n        _petDefaultSkillId = afterLoginDto.petDefaultSkillId;\r\n\r\n        _stopUpgrade = afterLoginDto.stopUpgrade;\r\n        _merits = afterLoginDto.merits;\r\n\r\n        _totalSpellExp = afterLoginDto.spellsInfo.totalExp;\r\n\r\n        mNextChangeFactionTime = afterLoginDto.nextChangeFactionTime;\r\n\r\n        mChangeEmbedEndTime = afterLoginDto.changeEmbedEndTime;");
        },
        Dispose: function (){
            this._playerDto = null;
            TalkingDataHelper.DisposeAccount();
            this._playerPropertyInfo = null;
            GameDebuger.TODO("_festivalDto = null;");
            if (UnityEngine.Object.op_Inequality(SystemTimeManager.get_Instance(), null)){
                SystemTimeManager.get_Instance().remove_OnChangeNextDay($CreateDelegate(this, this.OnChangeNextDay));
            }
            this.teamDisposible.Dispose();
            PlayerModel.stream = UniRx.SubjectExtensions.CloseOnceNull$1(IPlayerModel.ctor, PlayerModel.stream);
            GameDebuger.TODO("_delayDuelLoseNotifySta = false;");
        },
        GetPlayer: function (){
            return this._playerDto;
        },
        FactionID$$: "System.Int32",
        get_FactionID: function (){
            return this._playerDto != null ? this._playerDto.factionId : -1 /* -1 */;
        },
        GetPlayerName: function (){
            return this._playerDto.name;
        },
        UpdatePlayerName: function (nickName){
            GameDebuger.TODO("_playerDto.nickname = nickName;\r\n              GameEventCenter.SendEvent(GameEvent.Player_OnPlayerNicknameUpdate, nickName);");
            this._playerPropertyInfo.playerDto.name = nickName;
            ServerManager.get_Instance().UpdateAccountPlayer(this._playerDto);
            TalkingDataHelper.SetNickname(nickName);
        },
        GetPlayerGender: function (){
            GameDebuger.TODO("return _playerDto.gender;");
            return 1;
        },
        GetPlayerLevel: function (){
            if (this._playerPropertyInfo == null || null == this._playerPropertyInfo.playerDto)
                return 0;
            else
                return this._playerPropertyInfo.playerDto.level;
        },
        GetPlayerId: function (){
            if (this._playerDto == null){
                return 0;
            }
            else {
                return this._playerDto.id;
            }
        },
        GetPlayerExp: function (){
            if (this._playerPropertyInfo == null)
                return 0;
            else
                return this._playerPropertyInfo.playerDto.exp;
        },
        isEnoughIngot: function (needIngot, openPayModule, tip){
            GameDebuger.TODO("if (_playerDto.wealth.ingot >= needIngot || !ServiceRequestActionMgr.ServerRequestCheck) {\r\n            return true;\r\n        }\r\n        else{\r\n            if (openPayModule)\r\n            {\r\n                ProxyManager.Pay.OpenPay();\r\n            }\r\n            if (!string.IsNullOrEmpty(tip))\r\n            {\r\n                TipManager.AddTip(tip);\r\n            }\r\n            return false;\r\n        }");
            return false;
        },
        isEnoughVoucher: function (needVoucher, openPayModule, tip){
            GameDebuger.TODO("if (_playerDto.wealth.voucher >= needVoucher || !ServiceRequestActionMgr.ServerRequestCheck)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            if (openPayModule)\r\n            {\r\n                ProxyManager.Pay.OpenPay();\r\n            }\r\n            if (!string.IsNullOrEmpty(tip))\r\n            {\r\n                TipManager.AddTip(tip);\r\n            }\r\n            return false;\r\n        }");
            return false;
        },
        isEnoughForbidIngot: function (needForbidIngot, openPayModule, tip){
            GameDebuger.TODO("int forbidIngot = _playerDto.wealth.ingot - _playerDto.wealth.forbidIngot;\r\n        if (forbidIngot >= needForbidIngot || !ServiceRequestActionMgr.ServerRequestCheck)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            if (openPayModule)\r\n            {\r\n                ProxyManager.Pay.OpenPay();\r\n            }\r\n            if (!string.IsNullOrEmpty(tip))\r\n            {\r\n                TipManager.AddTip(tip);\r\n            }\r\n            return false;\r\n        }");
            return false;
        },
        isEnoughExpCurrency: function (expCurrency, openPayModule, tip){
            GameDebuger.TODO("if (_playerDto.wealth.expCurrency >= expCurrency || !ServiceRequestActionMgr.ServerRequestCheck)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            if (!string.IsNullOrEmpty(tip))\r\n            {\r\n                TipManager.AddTip(tip);\r\n            }\r\n            return false;\r\n        }");
            return false;
        },
        hasEnoughMoneyChangeName: function (){
            GameDebuger.TODO("if (_playerDto.wealth.ingot >= GetMoneyCost() || !ServiceRequestActionMgr.ServerRequestCheck)\r\n        {\r\n            return true;\r\n        }\r\n        else\r\n        {\r\n            return false;\r\n        }");
            return false;
        },
        GetMoneyCost: function (){
            var lv = ModelManager.get_Player().GetPlayerLevel();
            var RENAME_FACTOR1 = DataCache.GetStaticConfigValue(201 /* AppStaticConfigs.RENAME_FACTOR1 */, 0);
            var RENAME_FACTOR2 = DataCache.GetStaticConfigValue(202 /* AppStaticConfigs.RENAME_FACTOR2 */, 0);
            var RENAME_FACTOR3 = DataCache.GetStaticConfigValue(203 /* AppStaticConfigs.RENAME_FACTOR3 */, 0);
            var money = RENAME_FACTOR1 + (lv - RENAME_FACTOR2) * RENAME_FACTOR3;
            return money;
        },
        isEnoughCopper: function (needCopper, openPayModule, tip){
            GameDebuger.TODO("if(_playerDto.wealth.copper >= needCopper || !ServiceRequestActionMgr.ServerRequestCheck){\r\n            return true;\r\n        }\r\n        else{\r\n            if (openPayModule)\r\n            {\r\n                ProxyManager.Pay.OpenCopper();\r\n            }\r\n            if (!string.IsNullOrEmpty(tip))\r\n            {\r\n                TipManager.AddTip(tip);\r\n            }\r\n            return false;\r\n        }");
            return false;
        },
        isEnoughSilver: function (needSilver, openPayModule, tip){
            GameDebuger.TODO("if(_playerDto.wealth.silver >= needSilver || !ServiceRequestActionMgr.ServerRequestCheck){\r\n            return true;\r\n        }\r\n        else{\r\n            if (openPayModule)\r\n            {\r\n                ProxyManager.Pay.OpenSilver();\r\n            }\r\n            if (!string.IsNullOrEmpty(tip))\r\n            {\r\n                TipManager.AddTip(tip);\r\n            }\r\n            return false;\r\n        }");
            return false;
        },
        isEnoughScore: function (needScore, tip){
            GameDebuger.TODO("if(_playerDto.wealth.score >= needScore || !ServiceRequestActionMgr.ServerRequestCheck){\r\n            return true;\r\n        }\r\n        else{\r\n            if (tip) TipManager.AddTip(string.Format(\'你的{0}不足\', ItemIconConst.GetIconConstByItemId(AppVirtualItem.VirtualItemEnum_SCORE)));\r\n            return false;\r\n        }");
            return false;
        },
        isEnoughContribute: function (needContribute, openPayModule, tip){
            GameDebuger.TODO("if (_playerDto.wealth.contribute >= needContribute || !ServiceRequestActionMgr.ServerRequestCheck)\r\n        {\r\n                  return true;\r\n              }\r\n              else\r\n              {\r\n                  if (openPayModule)\r\n                  {\r\n                ProxyManager. Guide.OpenGuildContributeExchange();\r\n                  }\r\n\r\n                  if (!string.IsNullOrEmpty(tip))\r\n                  {\r\n                      //TipManager.AddTip(string.Format(\'你的{0}不足\', ItemIconConst.GetIconConstByItemId(AppVirtualItem.VirtualItemEnum_CONTRIBUTE)));\r\n                      TipManager.AddTip(tip);\r\n                  }\r\n                  return false;\r\n              }");
            return false;
        },
        CheckOutSatiationState: function (){
            GameDebuger.TODO("if(_playerDto.subWealth.satiation > 0){\r\n            ModelManager.PlayerBuff.ToggleSatiationBuffTip(true);\r\n        }else\r\n            ModelManager.PlayerBuff.ToggleSatiationBuffTip(false);\r\n\r\n        if(_playerDto.subWealth.satiation <= 10)\r\n            PromoteManager.Instance.SetState(PromoteType.SATIATION,true);\r\n        else if(_playerDto.subWealth.satiation >= 20)\r\n            PromoteManager.Instance.SetState(PromoteType.SATIATION,false);\r\n\r\n        if (_playerDto.subWealth.satiation < 30) {\r\n            if(ModelManager.Backpack.GetDto() != null)\r\n                ProxyManager.MainUI.OpenSatiationPropsUseView ();\r\n        }");
        },
        GetReplenishSatiationFee: function (){
            GameDebuger.TODO("int count = MaxSatiationVal - _playerDto.subWealth.satiation;\r\n              return (long)Math.Floor((ModelManager.Player.ServerGrade * DataCache.GetStaticConfigValue(AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR1) + DataCache.GetStaticConfigValue(AppStaticConfigs.INGOT_CONVERT_COPPER_FACTOR2)) / 10.0 * count);");
            return 0;
        },
        MaxSatiationVal$$: "System.Int32",
        get_MaxSatiationVal: function (){
            GameDebuger.TODO("AppVirtualItem info = DataCache.getDtoByCls<GeneralItem>(AppVirtualItem.VirtualItemEnum_SATIATION) as AppVirtualItem;\r\n                     return info == null?0:(int)info.carryLimit;");
            return 0;
        },
        isFullSatiation: function (){
            GameDebuger.TODO("if(_playerDto.subWealth.satiation >= MaxSatiationVal){\r\n            return true;\r\n        }");
            return false;
        },
        UseVoucher: function (cost){
            if (cost > 0){
                GameDebuger.TODO("_playerDto.wealth.voucher -= cost;\r\n            if (_playerDto.wealth.voucher < 0)\r\n                _playerDto.wealth.voucher = 0;\r\n\r\n            TipManager.AddLostCurrencyTip(cost, ItemIconConst.Voucher);\r\n\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnWealthChanged, _playerDto.wealth);");
            }
        },
        UseIngot: function (cost){
            if (cost > 0){
                GameDebuger.TODO("_playerDto.wealth.ingot -= cost;\r\n            if(_playerDto.wealth.ingot < 0)\r\n                _playerDto.wealth.ingot = 0;\r\n\r\n            TipManager.AddLostCurrencyTip(cost, ItemIconConst.Ingot);\r\n\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnWealthChanged, _playerDto.wealth);");
            }
        },
        UseSilver: function (cost){
            if (cost > 0){
                GameDebuger.TODO("_playerDto.wealth.silver -= cost;\r\n            if(_playerDto.wealth.silver < 0)\r\n                _playerDto.wealth.silver = 0;\r\n\r\n            TipManager.AddLostCurrencyTip(cost, ItemIconConst.Silver);\r\n\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnWealthChanged, _playerDto.wealth);");
            }
        },
        UseCopper: function (cost, showTip){
            if (cost > 0){
                GameDebuger.TODO("_playerDto.wealth.copper -= cost;\r\n            if(_playerDto.wealth.copper < 0)\r\n                _playerDto.wealth.copper = 0;\r\n\r\n                     if (showTip)\r\n                     {\r\n                         TipManager.AddLostCurrencyTip(cost, ItemIconConst.Copper);\r\n                     }\r\n\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnWealthChanged, _playerDto.wealth);");
            }
        },
        SetupFormationInfo: function (afterLoginDto){
            GameDebuger.TODO("\r\n\t\t_acquiredFormationIds = afterLoginDto.acquiredFormationIds;\r\n\t\t_formationCaseIds = afterLoginDto.formationCaseIds;\r\n\t\tActiveCaseIndex = afterLoginDto.activeFormationCaseNum;\r\n\t\tCurSelectCaseIndex = afterLoginDto.activeFormationCaseNum;\r\n");
            this._formationPosInfoDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int32.ctor, UnityEngine.Vector3.ctor, 12);
            this._formationPosInfoDic.Add(1, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-12 /* -12f */, -64 /* -64f */, 0));
            this._formationPosInfoDic.Add(2, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-74 /* -74f */, -102 /* -102f */, 0));
            this._formationPosInfoDic.Add(3, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(52, -26 /* -26f */, 0));
            this._formationPosInfoDic.Add(4, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-140 /* -140f */, -140 /* -140f */, 0));
            this._formationPosInfoDic.Add(5, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(118, 12, 0));
            this._formationPosInfoDic.Add(11, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(56, -90 /* -90f */, 0));
            this._formationPosInfoDic.Add(12, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-5 /* -5f */, -128 /* -128f */, 0));
            this._formationPosInfoDic.Add(13, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(120, -52 /* -52f */, 0));
            this._formationPosInfoDic.Add(14, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(125, -116 /* -116f */, 0));
            var formationList = DataCache.getArrayByCls$1(AppDto.Formation.ctor);
            GameDebuger.TODO("\r\n        _formationEffectInfoDic = new Dictionary<int, List<FormationEffectInfo>>(formationList.Count);\r\n\t\tfor(int fi=0;fi<formationList.Count;++fi){\r\n\t\t\tFormation formation = formationList[fi];\r\n\t\t\tif(!string.IsNullOrEmpty(formation.posEffectStr)){\r\n\t\t\t\t_formationEffectInfoDic.Add(formation.id,new List<FormationEffectInfo>(5));\r\n\t\t\t\tstring[] posSection = formation.posEffectStr.Split(\'|\');\r\n\t\t\t\tfor(int pi=0;pi<posSection.Length;++pi){\r\n\t\t\t\t\tFormationEffectInfo effInfo = new FormationEffectInfo(posSection[pi]);\r\n\t\t\t\t\t_formationEffectInfoDic[formation.id].Add(effInfo);;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n");
            this._formationPositiveEffectDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int32.ctor, System.Collections.Generic.Dictionary$2.ctor, formationList.get_Count());
            this._formationNegativeEffectDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int32.ctor, System.Collections.Generic.Dictionary$2.ctor, formationList.get_Count());
            for (var i = 0; i < formationList.get_Count(); ++i){
                var formation = formationList.get_Item$$Int32(i);
                var effectArray = formation.debuffTargetsStr.Split$$Char$Array([","]);
                this._formationPositiveEffectDic.Add(formation.id, new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Single.ctor, System.Collections.Generic.List$1.ctor, effectArray.length));
                for (var j = 0; j < effectArray.length; ++j){
                    var param = effectArray[j].Split$$Char$Array([":"]);
                    var id = System.Int32.Parse$$String(param[0]);
                    var val = System.Single.Parse$$String(param[1]);
                    if (!this._formationPositiveEffectDic.get_Item$$TKey(formation.id).ContainsKey(val)){
                        this._formationPositiveEffectDic.get_Item$$TKey(formation.id).Add(val, new System.Collections.Generic.List$1.ctor$$Int32(System.Int32.ctor, 4));
                    }
                    this._formationPositiveEffectDic.get_Item$$TKey(formation.id).get_Item$$TKey(val).Add(id);
                    if (!this._formationNegativeEffectDic.ContainsKey(id)){
                        this._formationNegativeEffectDic.Add(id, new System.Collections.Generic.Dictionary$2.ctor(System.Single.ctor, System.Collections.Generic.List$1.ctor));
                    }
                    if (!this._formationNegativeEffectDic.get_Item$$TKey(id).ContainsKey(val)){
                        this._formationNegativeEffectDic.get_Item$$TKey(id).Add(val, new System.Collections.Generic.List$1.ctor$$Int32(System.Int32.ctor, 4));
                    }
                    this._formationNegativeEffectDic.get_Item$$TKey(id).get_Item$$TKey(val).Add(formation.id);
                }
            }
        },
        GetFormationPositiveEffectInfo: function (formationId){
            var strBuilder = new System.Text.StringBuilder.ctor();
            strBuilder.AppendLine$$String(System.String.Format$$String$$Object("#f{0} 克制下列阵法", formationId));
            var effectDic = this._formationPositiveEffectDic.get_Item$$TKey(formationId);
            var str1 = new System.Text.StringBuilder.ctor();
            var str2 = new System.Text.StringBuilder.ctor();
            var $it11 = effectDic.GetEnumerator();
            while ($it11.MoveNext()){
                var pair = $it11.get_Current();
                var infoBuilder = pair.get_Key() == 0.05 ? str1 : str2;
                var percent = pair.get_Key() * 100;
                infoBuilder.AppendLine$$String(System.String.Format$$String$$Object("克制 {0}", AppStringHelper.WrapColor$$String$$String((percent + "%"), "1D8E00" /* ColorConstantV3.Color_Green_Strong_Str */)));
                for (var i = 0,imax = pair.get_Value().get_Count(); i < imax; ++i){
                    var formation = DataCache.getDtoByCls$1(AppDto.Formation.ctor, pair.get_Value().get_Item$$Int32(i));
                    infoBuilder.AppendFormat$$String$$Object$$Object("#f{0} {1} ", formation.id, formation.name);
                }
                infoBuilder.AppendLine();
            }
            strBuilder.Append$$String(str1.toString());
            strBuilder.Append$$String(str2.toString());
            return strBuilder.toString();
        },
        GetFormationNegativeEffectInfo: function (formationId){
            var strBuilder = new System.Text.StringBuilder.ctor();
            strBuilder.AppendLine$$String(System.String.Format$$String$$Object("#f{0} 被下列阵法克制", formationId));
            var effectDic = this._formationNegativeEffectDic.get_Item$$TKey(formationId);
            var str1 = new System.Text.StringBuilder.ctor();
            var str2 = new System.Text.StringBuilder.ctor();
            var $it12 = effectDic.GetEnumerator();
            while ($it12.MoveNext()){
                var pair = $it12.get_Current();
                var infoBuilder = pair.get_Key() == 0.05 ? str1 : str2;
                var percent = pair.get_Key() * 100;
                infoBuilder.AppendLine$$String(System.String.Format$$String$$Object("被克 {0}", AppStringHelper.WrapColor$$String$$String((percent + "%"), "c30000")));
                for (var i = 0,imax = pair.get_Value().get_Count(); i < imax; ++i){
                    var formation = DataCache.getDtoByCls$1(AppDto.Formation.ctor, pair.get_Value().get_Item$$Int32(i));
                    infoBuilder.AppendFormat$$String$$Object$$Object("#f{0} {1} ", formation.id, formation.name);
                }
                infoBuilder.AppendLine();
            }
            strBuilder.Append$$String(str1.toString());
            strBuilder.Append$$String(str2.toString());
            return strBuilder.toString();
        },
        GetAllFormationInfo: function (){
            var allFormationList = DataCache.getArrayByCls$1(AppDto.Formation.ctor);
            var result = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(AppDto.Formation.ctor, allFormationList);
            result.Sort$$Comparison$1($CreateAnonymousDelegate(this, function (a, b){
                var hasA = this._acquiredFormationIds.Contains(a.id);
                var hasB = this._acquiredFormationIds.Contains(b.id);
                if (hasA && !hasB)
                    return -1 /* -1 */;
                else if (!hasA && hasB)
                    return 1;
                else {
                    return a.id.CompareTo$$Int32(b.id);
                }
            }));
            return result;
        },
        GetFormationPos: function (pos){
            if (this._formationPosInfoDic.ContainsKey(pos)){
                return this._formationPosInfoDic.get_Item$$TKey(pos);
            }
            return UnityEngine.Vector3.get_zero();
        },
        GetActiveFormationId: function (){
            return this.GetFormationCaseId(this.ActiveCaseIndex);
        },
        GetAcquiredFormationIdList: function (){
            return this._acquiredFormationIds;
        },
        HasFormation: function (formationId){
            if (this._acquiredFormationIds == null)
                return false;
            return this._acquiredFormationIds.Contains(formationId);
        },
        GetFormationCaseId: function (caseIndex){
            if (caseIndex < this._formationCaseIds.get_Count())
                return this._formationCaseIds.get_Item$$Int32(caseIndex);
            return -1 /* -1 */;
        },
        SetFormationCaseId: function (caseIndex, newFormationId){
            GameDebuger.TODO("\r\nServiceRequestAction.requestServer(CrewService.changeFormation(caseIndex,newFormationId),\"PlayerChangeFormation\",(e)=>{\r\n            if(caseIndex < _formationCaseIds.Count){\r\n                _formationCaseIds[caseIndex] = newFormationId;\r\n\r\n                GameEventCenter.SendEvent(GameEvent.Player_OnFormationChange);\r\n            }\r\n        });        \r\n");
        },
        LearnNewFormation: function (itemDto, newFormation, free){
            GameDebuger.TODO("\r\nServiceRequestAction.requestServer(PlayerService.learnFormation(itemDto.index,free),\'LearnFormation\',(e)=>{\r\n            LearnFormationDto learnFormatinDto = e as LearnFormationDto;\r\n            _formationCaseIds = learnFormatinDto.formationCaseIds;\r\n\r\n            int defaultCapacity = DataCache.GetStaticConfigValue(AppStaticConfigs.FORMATION_DEFAULT_CAPACITY,4);\r\n            if(_acquiredFormationIds.Count < defaultCapacity){\r\n                TipManager.AddTip(string.Format(\'你学会了{0}\',newFormation.name.WrapColor(ColorConstant.Color_Tip_LostCurrency_Str)), true);\r\n            }else{\r\n                if(free){\r\n                    for(int i=0;i<_acquiredFormationIds.Count;++i){\r\n                        int originFormationId = _acquiredFormationIds[i];\r\n                        if(!learnFormatinDto.formationIds.Contains(originFormationId))\r\n                        {\r\n                            Formation replaceFormation = DataCache.getDtoByCls<Formation>(originFormationId);\r\n                            TipManager.AddTip(string.Format(\'你学会了{0}，但遗忘了{1}\',\r\n                                                            newFormation.name.WrapColor(ColorConstant.Color_Tip_LostCurrency_Str),\r\n                                                            replaceFormation.name.WrapColor(ColorConstant.Color_Tip_LostCurrency_Str)), true);\r\n                            break;\r\n                        }\r\n                    }\r\n                }else{\r\n                    int ingotCount = DataCache.GetStaticConfigValue(AppStaticConfigs.FORMATION_OVER_DEFAULT_CAPACITY,200);\r\n                    TipManager.AddTip(string.Format(\'消耗了{0}{1}，你学会了{2}\',ingotCount.ToString().WrapColor(ColorConstant.Color_Tip_LostCurrency_Str),\r\n                                                    ItemIconConst.Ingot,\r\n                                                    newFormation.name.WrapColor(ColorConstant.Color_Tip_LostCurrency_Str)), true);\r\n                }\r\n            }\r\n\r\n            _acquiredFormationIds = learnFormatinDto.formationIds;\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnFormationChange);\r\n\r\n            //首次学会阵型自动使用\r\n            if (GetAcquiredFormationIdList().Count == 2)\r\n            {\r\n                if (ModelManager.Team.HasTeam())\r\n                {\r\n                    if (ModelManager.Team.IsTeamLeader())\r\n                    {\r\n                        ModelManager.Team.ChangeTeamFormation(newFormation.id);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    ModelManager.Player.SetFormationCaseId(ModelManager.Player.ActiveCaseIndex, newFormation.id);\r\n                }\r\n            }\r\n        });        \r\n");
        },
        GetPropertyByType: function (type){
            return this.GetPropertyByID(type);
        },
        GetPropertyByID: function (Id){
            var proList = this._playerPropertyInfo.playerDto.properties;
            var a = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.CharacterPropertyDto.ctor, proList, $CreateAnonymousDelegate(this, function (s){
                return s.propId == Id;
            }));
            return a == null ? 0 : a.propValue;
        },
        SetPropertyByID: function (id, value){
            var proList = this._playerPropertyInfo.playerDto.properties;
            var a = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.CharacterPropertyDto.ctor, proList, $CreateAnonymousDelegate(this, function (s){
                return s.propId == id;
            }));
            a.propValue = value;
        },
        GetThirdProType: function (){
            var retDic = new System.Collections.Generic.Dictionary$2.ctor(AppDto.CharacterAbility.Type.ctor, System.Collections.Generic.List$1.ctor);
            var cpDto = this._playerPropertyInfo.playerDto.properties;
            retDic.set_Item$$TKey(AppDto.CharacterAbility.Type.COMMON, new System.Collections.Generic.List$1.ctor(AppDto.CharacterPropertyDto.ctor));
            retDic.set_Item$$TKey(AppDto.CharacterAbility.Type.PHYSICAL, new System.Collections.Generic.List$1.ctor(AppDto.CharacterPropertyDto.ctor));
            retDic.set_Item$$TKey(AppDto.CharacterAbility.Type.MAGIC, new System.Collections.Generic.List$1.ctor(AppDto.CharacterPropertyDto.ctor));
            retDic.set_Item$$TKey(AppDto.CharacterAbility.Type.ASSIST, new System.Collections.Generic.List$1.ctor(AppDto.CharacterPropertyDto.ctor));
            retDic.set_Item$$TKey(AppDto.CharacterAbility.Type.EXCEPTION, new System.Collections.Generic.List$1.ctor(AppDto.CharacterPropertyDto.ctor));
            for (var i = 0; i < cpDto.get_Count(); i++){
                var ca = this.GetCharacterAbilityByID(cpDto.get_Item$$Int32(i).propId);
                if (ca.type == 1){
                    retDic.get_Item$$TKey(AppDto.CharacterAbility.Type.COMMON).Add(cpDto.get_Item$$Int32(i));
                    continue;
                }
                else if (ca.type == 2){
                    retDic.get_Item$$TKey(AppDto.CharacterAbility.Type.PHYSICAL).Add(cpDto.get_Item$$Int32(i));
                    continue;
                }
                else if (ca.type == 3){
                    retDic.get_Item$$TKey(AppDto.CharacterAbility.Type.MAGIC).Add(cpDto.get_Item$$Int32(i));
                    continue;
                }
                else if (ca.type == 4){
                    retDic.get_Item$$TKey(AppDto.CharacterAbility.Type.ASSIST).Add(cpDto.get_Item$$Int32(i));
                    continue;
                }
                else if (ca.type == 5){
                    retDic.get_Item$$TKey(AppDto.CharacterAbility.Type.EXCEPTION).Add(cpDto.get_Item$$Int32(i));
                    continue;
                }
            }
            return retDic;
        },
        GetCharacterAbilityByID: function (id){
            var ca = DataCache.getDtoByCls$1(AppDto.CharacterAbility.ctor, id);
            return ca;
        },
        GetConvertDic: function (ID){
            var retStr = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.String.ctor);
            var bpcList = DataCache.getArrayByCls$1(AppDto.BasePropertyTransform.ctor);
            for (var i = 0; i < bpcList.get_Count(); i++){
                var bpc = DataCache.getDtoByCls$1(AppDto.BasePropertyTransform.ctor, i + 1);
                if (bpc.jobId == ID)
                    retStr.Add(bpc.propertyId, bpc.battleProperty);
                else
                    continue;
            }
            return retStr;
        },
        GetRateDic$$: "System.Collections.Generic.Dictionary`2[[System.Int32],[System.Collections.Generic.Dictionary`2[[System.Int32],[System.Single]]]]",
        get_GetRateDic: function (){
            return this.convertRateDic;
        },
        InitConvertRateDic: function (id){
            if (this.convertRateDic == null)
                this.convertRateDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Collections.Generic.Dictionary$2.ctor);
            var temp = this.GetConvertDic(id);
            var $it13 = temp.GetEnumerator();
            while ($it13.MoveNext()){
                var kvp = $it13.get_Current();
                this.convertRateDic.Add(kvp.get_Key(), new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Single.ctor));
                var dic = this.Rate(kvp.get_Value());
                var $it14 = dic.GetEnumerator();
                while ($it14.MoveNext()){
                    var item = $it14.get_Current();
                    this.convertRateDic.get_Item$$TKey(kvp.get_Key()).Add(item.get_Key(), item.get_Value());
                }
            }
        },
        Rate: function (str){
            var retDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Single.ctor);
            var strList = str.Split$$Char$Array([","]);
            for (var i = 0; i < strList.length; i++){
                var item = strList[i].Split$$Char$Array([":"]);
                retDic.Add(System.Int32.Parse$$String(item[0]), System.Single.Parse$$String(item[1]));
            }
            return retDic;
        },
        CheckDelayShow: function (){
            GameDebuger.TODO("if(_lastBpNotify != null)\r\n        {\r\n            UpdatePlayerBp(_lastBpNotify,false);\r\n            _lastBpNotify = null;\r\n        }");
            GameDebuger.TODO("if(_lastExpNotify != null)\r\n        {\r\n            if (_lastExpNotify.upgarded)\r\n            {\r\n                GameEventCenter.SendEvent(GameEvent.Player_OnPlayerGradeUpdate);\r\n            }\r\n\r\n            FunctionOpenViewController.CheckNeedOpenView(_lastExpNotify.oldLevel,_lastExpNotify.level);\r\n            _lastExpNotify = null;\r\n\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnPlayerExpUpdate);\r\n        }\r\n\r\n        //  国宝信息输出信息Delay\r\n        if (_delayDuelLoseNotifySta) {\r\n            _delayDuelLoseNotifySta = false;\r\n\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnPlayerExpUpdate);\r\n        }        \r\n");
        },
        CleanPlayerSp: function (){
            if (this._playerPropertyInfo != null){
                this._playerPropertyInfo.sp = 0;
                GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.Player_OnPlayerPropertyUpdate);");
            }
        },
        PrintBpChangeTips: function (changeVal, title){
            if (changeVal > 0)
                TipManager.AddTip(AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object$$Object("{0} +{1}", title, changeVal), "0FFF32" /* ColorConstant.Color_Tip_GainCurrency_Str */), false, false, "");
            else if (changeVal < 0)
                TipManager.AddTip(AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object$$Object("{0} {1}", title, changeVal), "fc7b6a" /* ColorConstant.Color_Tip_LostCurrency_Str */), false, false, "");
        },
        UpdateHpMpSp: function (hp, mp, sp){
            GameDebuger.TODO("_playerPropertyInfo.playerDto.properties.hp = hp;\r\n        _playerPropertyInfo.playerDto.properties.mp = mp;");
            this._playerPropertyInfo.sp = sp;
            GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.Player_OnPlayerPropertyUpdate);");
        },
        ResetPlayerPerAp: function (itemIndex, apType, resetPoint, useIngot, onSuccess){
            GameDebuger.TODO("\r\nServiceRequestAction.requestServer(PlayerService.resetPerAptitude(itemIndex,apType,useIngot),\"ResetPlayerAp\",(e)=>{\r\n            if(apType == AptitudeProperties.AptitudeType_Constitution)\r\n                _playerPropertyInfo.playerDto.aptitudeProperties.constitution -= resetPoint;\r\n            else if(apType == AptitudeProperties.AptitudeType_Intelligent)\r\n                _playerPropertyInfo.playerDto.aptitudeProperties.intelligent -= resetPoint;\r\n            else if(apType == AptitudeProperties.AptitudeType_Strength)\r\n                _playerPropertyInfo.playerDto.aptitudeProperties.strength -= resetPoint;\r\n            else if(apType == AptitudeProperties.AptitudeType_Stamina)\r\n                _playerPropertyInfo.playerDto.aptitudeProperties.stamina -= resetPoint;\r\n            else if(apType == AptitudeProperties.AptitudeType_Dexterity)\r\n                _playerPropertyInfo.playerDto.aptitudeProperties.dexterity -= resetPoint;\r\n            \r\n            _playerPropertyInfo.playerDto.potential +=resetPoint;\r\n            TipManager.AddTip(string.Format(\'你的{0}属性减掉了{1}点，潜力点增加{2}点\',\r\n                                            ItemHelper.AptitudeTypeName(apType).WrapColor(ColorConstant.Color_Tip_LostCurrency_Str),\r\n                                            resetPoint.ToString().WrapColor(ColorConstant.Color_Tip_LostCurrency_Str),\r\n                                            resetPoint.ToString().WrapColor(ColorConstant.Color_Tip_GainCurrency_Str)));\r\n//          CalculatePlayerBp();\r\n            CheckPlayerHasPotentialPoint();\r\n            GameEventCenter.SendEvent(GameEvent.Player_OnPlayerPropertyUpdate);\r\n\r\n            if(onSuccess != null)\r\n                onSuccess();\r\n        });        \r\n");
        },
        GetPlayerPropertyInfo: function (){
            return this._playerPropertyInfo;
        },
        HasCustomAptitude: function (){
            return this._playerPropertyInfo.playerDto.hasCustomAptitude;
        },
        UpdatePlayerPotential: function (potential, extraPotential){
            if (this._playerPropertyInfo == null)
                return;
            this._playerPropertyInfo.playerDto.potential = potential;
            this._playerPropertyInfo.playerDto.extraPotential = extraPotential;
            GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.Player_OnPlayerPropertyUpdate);");
        },
        UpdatePlayerEqAps: function (){
            GameDebuger.TODO("List<BagItemDto> equips = ModelManager.Backpack.GetBodyEquip();\r\n        if(equips != null && equips.Count > 0){\r\n        int[] eqAps = new int[5];\r\n        for (int i=0,len=equips.Count;i<len; i++)\r\n        {\r\n        BagItemDto itemDto = equips[i];\r\n        //Equipment equipmentInfo = itemDto.item as Equipment;\r\n        EquipmentExtraDto eqExtraDto = itemDto.extra as EquipmentExtraDto;\r\n\r\n                // 耐久为0不计算属性\r\n                if(eqExtraDto.duration <= 0)\r\n                    continue;\r\n\r\n                //装备资质属性\r\n                for(int index = 0;index < eqExtraDto.aptitudeProperties.Count;index++)\r\n                {\r\n                    if(eqExtraDto.aptitudeProperties[index].aptitudeType != AptitudeProperties.MP_TYPE)\r\n                    {\r\n                        int n = eqExtraDto.aptitudeProperties[index].aptitudeType - 1;\r\n                        if(n < eqAps.Length)\r\n                        {\r\n                            eqAps[n] = eqAps[n] + eqExtraDto.aptitudeProperties[index].value;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //装备认证属性\r\n                for(int index = 0;index < eqExtraDto.certificateProperties.Count;index++)\r\n                {\r\n                    if(eqExtraDto.certificateProperties[index].aptitudeType != AptitudeProperties.MP_TYPE)\r\n                    {\r\n                        int n = eqExtraDto.certificateProperties[index].aptitudeType - 1;\r\n                        if(n < eqAps.Length)\r\n                        {\r\n                            eqAps[n] = eqAps[n] + eqExtraDto.certificateProperties[index].value;\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n\r\n        //更新人物装备资质属性数值\r\n        eqAps.CopyTo(_playerPropertyInfo.EqAps,0);\r\n        }else{\r\n        //没有装备时清空人物装备资质属性\r\n        for(int i=0;i<_playerPropertyInfo.EqAps.Length;++i){\r\n        _playerPropertyInfo.EqAps[i] = 0;\r\n        }\r\n        }");
        },
        AutoAddPoint$$: "System.Boolean",
        get_AutoAddPoint: function (){
            this.autoAddPoint = PlayerPrefsExt.GetBool$$String(System.String.Format$$String$$Object("{0}AutoAddPoint", this.GetPlayerName()));
            return this.autoAddPoint;
        },
        set_AutoAddPoint: function (value){
            this.autoAddPoint = value;
            PlayerPrefsExt.SetBool(System.String.Format$$String$$Object("{0}AutoAddPoint", this.GetPlayerName()), this.autoAddPoint);
        },
        APPlandic$$: "System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int32]]",
        get_APPlandic: function (){
            var retDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            for (var i = 0; i < 5; i++){
                var temp = PlayerPrefsExt.GetPlayerInt(System.String.Format$$String$$Object$$Object("{0}{1}", this.GetPlayerName(), i + 101), 0);
                retDic.Add(i + 101, temp);
            }
            return retDic;
        },
        SetAPPlan: function (propertyID, point){
            var name = this.GetPlayerName();
            PlayerPrefsExt.SetPlayerInt(System.String.Format$$String$$Object$$Object("{0}{1}", name, propertyID), point);
        },
        CalulateTotalPoint: function (){
            var totalPoint = 0;
            for (var i = 0; i < 5; i++){
                totalPoint += ((this.GetPropertyByID(i + 101)) | 0);
            }
            return totalPoint;
        },
        GetAptitudeTips: function (){
            var tipsList = DataCache.getArrayByCls$1(AppDto.AptitudeTips.ctor);
            return tipsList.FindAll($CreateAnonymousDelegate(this, function (s){
                return s.factionId == this._playerPropertyInfo.playerDto.charactorType;
            }));
        },
        CanResetPoint$$: "System.Int32",
        get_CanResetPoint: function (){
            return 10 + this.GetPlayerLevel();
        },
        TipsList$$: "System.Collections.Generic.List`1[[AppDto.AptitudeTips]]",
        get_TipsList: function (){
            if (this.tipsList == null)
                this.tipsList = DataCache.getArrayByCls$1(AppDto.AptitudeTips.ctor).FindAll($CreateAnonymousDelegate(this, function (s){
                    return s.factionId == this._playerPropertyInfo.playerDto.charactorType;
                }));
            return this.tipsList;
        },
        RecommendIndex$$: "System.Int32",
        get_RecommendIndex: function (){
            return PlayerPrefsExt.GetPlayerInt(System.String.Format$$String$$Object("{0}RecommendAddPointIndex", this.GetPlayerName()), 0);
        },
        set_RecommendIndex: function (value){
            PlayerPrefsExt.SetPlayerInt(System.String.Format$$String$$Object("{0}RecommendAddPointIndex", this.GetPlayerName()), value);
        },
        SetSecondProperty: function (propertyID, addPoint){
            var dicTemp = this.get_GetRateDic();
            var influenceDic;
            (function (){
                var $1 = $Ref(null, influenceDic);
                var $res = dicTemp.TryGetValue(propertyID, $1);
                influenceDic = $1.Value;
                return $res;
            }).call(this);
            if (influenceDic != null){
                var $it15 = influenceDic.GetEnumerator();
                while ($it15.MoveNext()){
                    var item = $it15.get_Current();
                    var num = this.GetPropertyByID(item.get_Key());
                    this.SetPropertyByID(item.get_Key(), num + item.get_Value() * addPoint);
                }
            }
        },
        GetAddPointPlanOpenCount: function (){
            var openCount = 1;
            var playerLv = this.GetPlayerLevel();
            if (playerLv >= DataCache.GetStaticConfigValue(3011 /* AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_TWO_LEVEL */, 40) && playerLv < DataCache.GetStaticConfigValue(3012 /* AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_THREE_LEVEL */, 90))
                openCount = 2;
            else if (playerLv >= DataCache.GetStaticConfigValue(3012 /* AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_THREE_LEVEL */, 90))
                openCount = 3;
            return openCount;
        },
        GetAddPointPlanOpenLevel: function (openCount){
            if (openCount == 2)
                return DataCache.GetStaticConfigValue(3011 /* AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_TWO_LEVEL */, 40);
            else if (openCount == 3)
                return DataCache.GetStaticConfigValue(3012 /* AppStaticConfigs.MAIN_CHARACTOR_DISPOSABLE_POINT_PLAN_THREE_LEVEL */, 90);
            return 0;
        },
        GetActivedAddPointPlanId: function (){
            return this._playerPropertyInfo.playerDto.pointPlan;
        },
        ResetAddPointPlanChangeTimes: function (){
            if (this._playerPropertyInfo != null && null != this._playerPropertyInfo.playerDto)
                this._playerPropertyInfo.playerDto.changeTimes = 0;
        },
        CheckPlayerHasPotentialPoint: function (){
            GameDebuger.TODO("if(_playerPropertyInfo.playerDto.potential >= 1)\r\n            PromoteManager.Instance.SetState(PromoteType.PLAYERADDPOINT,true);\r\n        else\r\n            PromoteManager.Instance.SetState(PromoteType.PLAYERADDPOINT,false);        \r\n");
        },
        CheckOutDoubleExp: function (){
            GameDebuger.TODO("\r\nif(_doubleExpStateDto != null && _doubleExpStateDto.openPoint > 0){\r\n            ModelManager.PlayerBuff.ToggleDoubleExpBuffTip(true);\r\n            return true;\r\n        }\r\n        ModelManager.PlayerBuff.ToggleDoubleExpBuffTip(false);\r\n        return false;        \r\n");
            return false;
        },
        FreezeDoubleExp: function (){
            GameDebuger.TODO("\r\nif (!FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_OnhookDoublePoint))\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(_doubleExpStateDto != null && _doubleExpStateDto.openPoint == 0)\r\n        {\r\n            TipManager.AddTip(\"当前双倍点数为0\");\r\n            return;\r\n        }\r\n        \r\n        ServiceRequestAction.requestServer(PatrolService.freezeDoubleExp(),\"FreezeDoubleExp\", \r\n        (e) => {\r\n            DoubleExpDto expDto = e as DoubleExpDto;\r\n            TipManager.AddTip(\"当前双倍点数已结算到本周剩余双倍点数\");\r\n            UpdateDoubleExpDto(expDto);\r\n        });        \r\n");
        },
        ReceiveDoubleExp: function (){
            GameDebuger.TODO("if (!FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_OnhookDoublePoint))\r\n        {\r\n            return;\r\n        }\r\n\r\n        if(_doubleExpStateDto != null)\r\n        {\r\n            if(_doubleExpStateDto.openPoint >= DataCache.GetStaticConfigValue(AppStaticConfigs.OPEN_MAX_DOUBLE_EXP_POINT,120)){\r\n                TipManager.AddTip(string.Format(\"最多领取{0}点双倍点数\",_doubleExpStateDto.openPoint));\r\n                return;\r\n            }\r\n            else if(_doubleExpStateDto.point == 0){\r\n                TipManager.AddTip(\"本周的双倍点数已领完\");\r\n                return;\r\n            }\r\n        }\r\n        \r\n        ServiceRequestAction.requestServer(PatrolService.receiveDoubleExp(),\"ReceiveDoubleExp\", \r\n                                           (e) => {\r\n            DoubleExpDto expDto = e as DoubleExpDto;\r\n            int point = expDto.point;\r\n            if(_doubleExpStateDto != null)\r\n                point = _doubleExpStateDto.point - expDto.point;\r\n            \r\n            TipManager.AddTip(string.Format(\"你领取了{0}点双倍点数，快去奋勇杀敌吧！\",point));\r\n            UpdateDoubleExpDto(expDto);\r\n        });        \r\n");
        },
        IsAutoFram$$: "System.Boolean",
        get_IsAutoFram: function (){
            return this._IsAutoFram;
        },
        set_IsAutoFram: function (value){
            this._IsAutoFram = value;
        },
        StartAutoFram: function (){
            if (JoystickModule.get_DisableMove()){
                GameDebuger.TODO("if (ModelManager.BridalSedan.IsMe())\r\n            {\r\n                TipManager.AddTip(\'你正在乘坐花轿，不能到处乱跑哦！\');\r\n            }\r\n            else");
                TipManager.AddTip("你正在组队无法进行挂机操作", false, false, "");
                return;
            }
            this.set_IsAutoFram(true);
            var heroView = WorldManager.get_Instance().GetHeroView();
            if (UnityEngine.Object.op_Implicit(heroView)){
                heroView.SetAutoFram(true);
                heroView.SetPatrolFlag(true);
            }
            GameDebuger.TODO("ServiceRequestAction.requestServer(SceneService.patrolBegin());");
        },
        StopAutoFram: function (needStop){
            if (this.get_IsAutoFram()){
                this.set_IsAutoFram(false);
                var heroView = WorldManager.get_Instance().GetHeroView();
                if (UnityEngine.Object.op_Implicit(heroView)){
                    heroView.SetAutoFram(false);
                    heroView.SetPatrolFlag(false);
                    if (needStop){
                        heroView.StopAndIdle();
                    }
                }
                GameDebuger.TODO("ServiceRequestAction.requestServer(SceneService.patrolEnd());");
            }
        },
        StartAutoNav: function (){
            GameDebuger.TODO("\r\nif (ModelManager.Team.IsFollowLeader()) {\r\n            return;\r\n        }        \r\n");
            var heroView = WorldManager.get_Instance().GetHeroView();
            if (UnityEngine.Object.op_Implicit(heroView)){
                heroView.SetNavFlag(true);
            }
        },
        StopAutoNav: function (){
            WorldManager.get_Instance().CleanTargetNpc();
            if (this.get_IsAutoFram() == false){
                var heroView = WorldManager.get_Instance().GetHeroView();
                if (UnityEngine.Object.op_Implicit(heroView)){
                    heroView.SetNavFlag(false);
                }
            }
        },
        StopAutoRun: function (){
            if (this.get_IsAutoFram()){
                this.StopAutoFram(true);
            }
            else {
                this.StopAutoNav();
                var heroView = WorldManager.get_Instance().GetHeroView();
                if (UnityEngine.Object.op_Inequality(heroView, null)){
                    heroView.StopAndIdle();
                }
            }
        },
        TransformModelId$$: "System.Int32",
        get_TransformModelId: function (){
            return this._transformModelId;
        },
        UpdateTransformModelId: function (modelId){
            this._transformModelId = modelId;
            GameDebuger.TODO("\r\n        GameEventCenter.SendEvent(GameEvent.Player_OnModelChange);\r\n");
        },
        GetPartDyeId: function (dyePartType){
            GameDebuger.TODO("\r\nif(dyePartType == Dye.DyePartTypeEnum_Hair)\r\n            return _playerDto.dressInfoDto.hairDyeId;\r\n        else if(dyePartType == Dye.DyePartTypeEnum_Clothes)\r\n            return _playerDto.dressInfoDto.dressDyeId;\r\n        else if(dyePartType == Dye.DyePartTypeEnum_Ornaments)\r\n            return _playerDto.dressInfoDto.accoutermentDyeId;\r\n       \r\n");
            return 0;
        },
        UpdateDyeIds: function (hairId, clothId, decorationId){
            GameDebuger.TODO("\r\nServiceRequestAction.requestServer(PlayerService.dye(clothId,hairId,decorationId));\r\n        _playerDto.dressInfoDto.hairDyeId = hairId;\r\n        _playerDto.dressInfoDto.dressDyeId = clothId;\r\n        _playerDto.dressInfoDto.accoutermentDyeId = decorationId;        \r\n");
        },
        GetPlayerDefaultSkillId: function (){
            return this._playerDefaultSkillId;
        },
        SetPlayerDefaultSkillId: function (skillId){
            this._playerDefaultSkillId = skillId;
        },
        GetPetDefaultSkillId: function (){
            return this._petDefaultSkillId;
        },
        SetPetDefaultSkillId: function (skillId){
            this._petDefaultSkillId = skillId;
        },
        StopUpgrade$$: "System.Boolean",
        get_StopUpgrade: function (){
            return this._stopUpgrade;
        },
        set_StopUpgrade: function (value){
            this._stopUpgrade = value;
        },
        NeedShowFlyTip$$: "System.Boolean",
        get_NeedShowFlyTip: function (){
            var tFlyGrade = DataCache.GetStaticConfigValue(13201 /* AppStaticConfigs.FLY_MISSION_MIN_GRADE */, 0);
            if (this.GetPlayerLevel() >= tFlyGrade){
                var tFlyMissionId = DataCache.GetStaticConfigValue(13200 /* AppStaticConfigs.FLY_MISSION */, 0);
                GameDebuger.TODO("MissionDataModel.MissionSta tMissionSta = ModelManager.MissionData.GetMissionStaByID(tFlyMissionId);\r\n                if (tMissionSta != MissionDataModel.MissionSta.FINISHED && tMissionSta != MissionDataModel.MissionSta.ACCEPTED_F)\r\n                {\r\n                    return true;\r\n                }");
            }
            return false;
        },
        UpdatePlayerBanTime: function (banExpieAt){
            if (this._playerDto != null){
                GameDebuger.TODO("\r\n_playerDto.banExpireAt = banExpieAt;            \r\n");
            }
        },
        IsPlayerBandMode: function (tip){
            GameDebuger.TODO("if (_playerDto == null || _playerDto.banExpireAt == 0)\r\n        {\r\n            return false;\r\n        }\r\n        else\r\n        {\r\n            if (tip)\r\n            {\r\n                long leftTime = (_playerDto.banExpireAt - SystemTimeManager.Instance.GetUTCTimeStamp())/1000;\r\n                TipManager.AddTip(string.Format(\"由于你违反用户协议需要在此地闭关修炼，剩余时间{0}\", DateUtil.GetMinutes(leftTime)));\r\n            }\r\n            return true;\r\n        }        \r\n");
            return false;
        },
        experienceType$$: "System.Int32",
        get_experienceType: function (){
            GameDebuger.TODO("\r\nreturn _playerDto.experienceType;            \r\n");
            return 0;
        },
        set_experienceType: function (value){
            GameDebuger.TODO("_playerDto.experienceType = value; ");
        },
        NextChangeFactionTime$$: "System.Int64",
        get_NextChangeFactionTime: function (){
            return this.mNextChangeFactionTime;
        },
        set_NextChangeFactionTime: function (value){
            this.mNextChangeFactionTime = value;
        },
        ChangeEmbedEndTime$$: "System.Int64",
        get_ChangeEmbedEndTime: function (){
            return this.mChangeEmbedEndTime;
        },
        set_ChangeEmbedEndTime: function (value){
            this.mChangeEmbedEndTime = value;
        },
        ApResetSucess: function (){
            GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.Player_OnApReset);");
        },
        closedLocation$$: "System.Boolean",
        get_closedLocation: function (){
            if (this._playerDto != null){
                GameDebuger.TODO("\r\nreturn _playerDto.closedLocation;                \r\n");
                return false;
            }
            else
                return true;
        },
        set_closedLocation: function (value){
            GameDebuger.TODO("\r\nServiceRequestAction.requestServer(PlayerService.closeLocation(value), \"\", (e) =>\r\n            {\r\n                if(_playerDto!=null)\r\n                _playerDto.closedLocation = value;\r\n            });            \r\n");
        }
    }
};
JsTypes.push(PlayerModel);
var WeaponConfig = {
    fullname: "WeaponConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.list = new System.Collections.Generic.List$1.ctor(WeaponBindConfig.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WeaponConfig);
var WeaponBindConfig = {
    fullname: "WeaponBindConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.key = "";
            this.localPosition = UnityEngine.Vector3.get_zero();
            this.localEulerAngles = UnityEngine.Vector3.get_zero();
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WeaponBindConfig);
var WorldManager = {
    fullname: "WorldManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            WorldManager._instance = new WorldManager.ctor();
            WorldManager.FirstEnter = true;
            WorldManager.IsWaitingEnter = false;
        },
        Instance$$: "WorldManager",
        get_Instance: function (){
            return WorldManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._worldModel = null;
            this._worldView = null;
            this._listener = null;
            this.stream = new UniRx.Subject$1.ctor(IWorldModel.ctor);
            this._teamObservable = null;
            this._oldSceneId = 0;
            this._needDelayLoadScene = false;
            this._isEntering = -1 /* -1 */;
            this.firstRequest = false;
            this.firstEnterRequestCallBack = null;
            this._waitingSceneDto = null;
            this._targetNpc = null;
            this.dialogFunctionID = 0;
            this._toTargetCallback = null;
            this.OnSceneChanged = null;
            this.OnHeroPosChange = null;
            this.OnFadeOutFinishEvt = null;
            System.Object.ctor.call(this);
            this._worldModel = WorldModel.Create();
            this._worldView = new WorldView.ctor(this._worldModel);
            this._listener = new WorldNotifyListener.ctor(this._worldModel);
            this._teamObservable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ITeamData.ctor, TeamDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (s){
                if (s == null)
                    return;
                var memberDto = s.GetTeamMemberDtoByPlayerID(ModelManager.get_IPlayer().GetPlayerId());
                if (this._worldModel != null){
                    if (memberDto != null){
                        this._worldModel.ChangePlayerTeamStatus(memberDto.id, memberDto.memberStatus, s.get_TeamUniqueId());
                    }
                    else {
                        this._worldModel.ChangePlayerTeamStatus(ModelManager.get_IPlayer().GetPlayerId(), AppDto.TeamMemberDto.TeamMemberStatus.NoTeam, 0);
                    }
                }
            }));
            this._teamObservable = UniRx.SubjectExtensions.CombineRelease(this._teamObservable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IWorldModelData.ctor, WorldModel.get_Stream(), $CreateAnonymousDelegate(this, function (d){
                if (d != null)
                    this._worldView.TryUpdatePlayerViewTeamStatus$$IEnumerable$1$Int64(d.get_WorldViewData().get_LatestPlayerChageTeamStatusSet());
            })));
        },
        WorkdModelStream$$: "UniRx.IObservable`1[[IWorldModel]]",
        get_WorkdModelStream: function (){
            return this.stream;
        },
        add_OnSceneChanged: function (value){
            this.OnSceneChanged = $CombineDelegates(this.OnSceneChanged, value);
        },
        remove_OnSceneChanged: function (value){
            this.OnSceneChanged = $RemoveDelegate(this.OnSceneChanged, value);
        },
        add_OnHeroPosChange: function (value){
            this.OnHeroPosChange = $CombineDelegates(this.OnHeroPosChange, value);
        },
        remove_OnHeroPosChange: function (value){
            this.OnHeroPosChange = $RemoveDelegate(this.OnHeroPosChange, value);
        },
        Dispose: function (){
            if (this._teamObservable != null)
                this._teamObservable.Dispose();
            this.stream = UniRx.SubjectExtensions.CloseOnceNull$1(IWorldModel.ctor, this.stream);
        },
        CanFlyable: function (){
            var sceneDto = this._worldModel.GetSceneDto();
            if (sceneDto != null){
                return sceneDto.get_sceneMap().flyable;
            }
            return true;
        },
        GetModel: function (){
            return this._worldModel;
        },
        GetView: function (){
            return this._worldView;
        },
        GetNpcViewManager: function (){
            return this._worldView.GetNpcViewManager();
        },
        GetHeroView: function (){
            return this._worldView.GetHeroView();
        },
        GetHeroWorldPos: function (){
            var heroView = this._worldView.GetHeroView();
            return UnityEngine.Object.op_Inequality(heroView, null) ? heroView.get_cachedTransform().get_position() : UnityEngine.Vector3.get_zero();
        },
        IsInActivityScene: function (){
            return false;
        },
        isEntering$$: "System.Boolean",
        get_isEntering: function (){
            return this._isEntering != -1 /* -1 */;
        },
        FirstEnterScene: function (){
            if (this._waitingSceneDto != null){
                this.EnterWithSceneDto(this._waitingSceneDto);
            }
            else {
                WorldManager.get_Instance().Enter(ModelManager.get_Player().GetPlayer().sceneId, false, false, false, PlayerGameState.FollowTargetNpc);
            }
        },
        Enter: function (sceneId, isTeleport, isAutoFramEnter, checkSameScene, targetNpc){
            JSTimer.get_Instance().CancelCd("__waitTimeForNextMission");
            if (!WorldManager.FirstEnter){
                if (!this.CanFlyable()){
                    TipManager.AddTip("此地插翅难飞", false, false, "");
                    ModelManager.get_Player().StopAutoNav();
                    return;
                }
            }
            if (BattleManager.get_Instance().IsInBattle()){
                if (!WorldManager.FirstEnter){
                    TipManager.AddTip("战斗中不能传送", false, false, "");
                }
                return;
            }
            GameDebuger.Log("RequestServer Enter Scene: " + sceneId, null);
            var oldSceneId = this._worldModel.GetSceneId();
            if (sceneId == oldSceneId && checkSameScene && !WorldManager.FirstEnter){
                GameDebuger.Log("WorldManager.Enter same scene", null);
                return;
            }
            if (this.get_isEntering()){
                if (this._isEntering != sceneId){
                    GameDebuger.Log("WorldManager.Enter isEntering", null);
                    TipManager.AddTip("正在进入其它地图", false, false, "");
                }
                return;
            }
            if (WorldManager.IsWaitingEnter == true && this.firstRequest == false){
                GameDebuger.Log("WorldManager.Enter IsWaitingEnter", null);
                TipManager.AddTip("正在进入其它地图", false, false, "");
                return;
            }
            this._isEntering = sceneId;
            this._targetNpc = targetNpc;
            if (WorldManager.FirstEnter){
                this.RequestLoginScene(sceneId);
            }
            else {
                if (JoystickModule.get_DisableMove()){
                    GameDebuger.TODO("\n                if (ModelManager.BridalSedan.IsMe())\n                {\n                    TipManager.AddTip(\'你正在乘坐花轿，不能到处乱跑哦！\');\n                }\n                else");
                    TipManager.AddTip("你正在组队无法跳转场景", false, false, "");
                    this._isEntering = -1 /* -1 */;
                    return;
                }
                if (!isAutoFramEnter){
                    ModelManager.get_Player().StopAutoFram(false);
                }
                else {
                    ModelManager.get_Player().set_IsAutoFram(true);
                }
                var heroView = this.GetHeroView();
                if (UnityEngine.Object.op_Inequality(heroView, null))
                    heroView.StopAndIdle();
                if (isTeleport){
                    this.RequestEnterScene(sceneId);
                }
                else {
                    GameDebuger.TODO("if (ModelManager.MissionData.IsInSpecialInstanceZonesScene())\n                {\n                    ProxyManager.Window.OpenConfirmWindow(\'你当前的特殊任务还没完成，离开副本后将自动放弃，是否进行传送？\', \'副本特殊任务\', () => {\n                        RequestFlyScene(sceneId);\n                    }, () => {\n                        _isEntering = -1;\n                    });\n                }\n                //  神器迷宫中传送\n                else if (ModelManager.ArtifactMaze.IsInArtifactMazeScene()\n                    && !ModelManager.ArtifactMaze.IsInArtifactMazeScene(sceneId))\n                {\n                    ProxyManager.Window.OpenConfirmWindow(\'你当前的特殊任务还没完成，离开迷宫后将自动放弃，是否进行传送？\' + \'(队长离开后所有未开启的宝箱将消失)\'.WrapColor(ColorConstantV3.Color_Red_Str), \'迷宫特殊任务\', () => {\n                        RequestFlyScene(sceneId);\n                    }, () => {\n                        _isEntering = -1;\n                    });\n                }\n                //  帮派竞赛活动传送处理\n                else if (ModelManager.GuildCompetitionData.IsInActivityScene() && ModelManager.GuildCompetitionData.IsRunningActivity())\n                {\n                    if (!ModelManager.Team.HasTeam() || ModelManager.Team.IsAway())\n                    {\n                        string tMsgStr = ModelManager.GuildCompetitionData.GetLeaveGuildCompetitionSceneStr();\n\n                        ProxyManager.Window.OpenConfirmWindow(tMsgStr, ModelManager.GuildCompetitionData.titleStr, () => {\n                            RequestFlyScene(sceneId);\n                        }, () => {\n                            _isEntering = -1;\n                        });\n                    }\n                    else\n                    {\n                        TipManager.AddTip(GuildCompetitionDataModel.notAllowedTransferStr);\n                        _isEntering = -1;\n                    }\n                }\n                else if (ModelManager.CampWarData.IsInActivityScene() && ModelManager.CampWarData.IsActivityRacing())\n                {\n                    if (!ModelManager.Team.HasTeam() || ModelManager.Team.IsAway())\n                    {\n                        string tMsgStr = ModelManager.CampWarData.GetLeaveCampWarSceneStr();\n\n                        ProxyManager.Window.OpenConfirmWindow(tMsgStr, ModelManager.CampWarData.titleStr, () => {\n                            RequestFlyScene(sceneId);\n                        }, () => {\n                            _isEntering = -1;\n                        }, UIWidget.Pivot.Left, \'确认\', \'取消\', 60);\n                    }\n                    else\n                    {\n                        TipManager.AddTip(CampWarDataModel.notAllowedTransferStr);\n                        _isEntering = -1;\n                    }\n                }\n                else if (ModelManager.Escort.IsInActivityScene() && ModelManager.Escort.IsActivityRacing() && ModelManager.Escort.IsOwnEscortMissioning()) {\n                ModelManager.Escort.MissionFailWindown((b) => {\n                if (b) {\n                            RequestFlyScene(sceneId);\n                } else {\n                _isEntering = -1;\n                }\n                });\n                } \n                else if(ModelManager.Tang.IsInActivityScene()&&FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_DatangMatchless))\n                {\n                    if (ModelManager.Team.IsTeamLeader())\n                    {\n                        if (ModelManager.Tang.RemainingTime >= 1)\n                        {\n                            TipManager.AddTip(\'您是活动队伍中的队长，身负重任，不能直接离开!!\');\n                            _isEntering = -1;\n                        }          \n                    }      \n                    else\n                    {\n                        string tMsgStr = \'离开{0}活动副本将被视为逃兵，活动进度重置，你确定要离开吗?\';\n                        ProxyManager.Window.OpenConfirmWindow(string.Format(tMsgStr, \'大唐无双\'.WrapColor(ColorConstantV3.Color_ChatBlue_Str)), \'大唐无双\', () =>\n                        {\n                            RequestFlyScene(sceneId);\n                        }, () =>\n                        {\n                            _isEntering = -1;\n                        });\n                    }\n                        \n                }\n                else");
                    this.RequestFlyScene(sceneId);
                }
            }
        },
        RequestLoginScene: function (sceneId){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Scene_Login(System.String.Empty), "", null, $CreateDelegate(this, this.RequestEnterFail));
        },
        RequestEnterScene: function (sceneId){
            GameDebuger.TODO("RequestEnterScene sceneId:" + sceneId.toString());
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Scene_Fly(sceneId, System.String.Empty), "", null, $CreateDelegate(this, this.RequestEnterFail));
        },
        RequestFlyScene: function (sceneId){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Scene_Fly(sceneId, System.String.Empty), "", null, $CreateDelegate(this, this.RequestEnterFail));
        },
        RequestEnterFail: function (error){
            TipManager.AddTip(error.message, false, false, "");
            this._isEntering = -1 /* -1 */;
            if (WorldManager.FirstEnter){
                ExitGameScript.OpenReloginTipWindow(System.String.Format$$String$$Object("首次场景进入请求失败，请重新登陆(原因={0})", error.message), false, false);
            }
        },
        FirstEnterSceneRequest: function (callBack){
            this.firstEnterRequestCallBack = callBack;
            this.firstRequest = true;
            try{
                WorldManager.get_Instance().Enter(ModelManager.get_Player().GetPlayer().sceneId, false, false, false, PlayerGameState.FollowTargetNpc);
            }
            catch(ex){
                this.firstEnterRequestCallBack();
                this.firstEnterRequestCallBack = null;
                throw $CreateException(ex, new Error());
            }
            finally{
                this.firstRequest = false;
            }
        },
        OnRequestTimeout: function (){
            this._isEntering = -1 /* -1 */;
        },
        EnterWithSceneDto: function (sceneDto){
            this._isEntering = -1 /* -1 */;
            if (sceneDto == null){
                GameDebuger.LogError("SceneDto is null", null);
                if (this.firstEnterRequestCallBack != null){
                    this.firstEnterRequestCallBack();
                    this.firstEnterRequestCallBack = null;
                }
                return;
            }
            GameDebuger.Log("EnterWithSceneDto = " + sceneDto.id + " " + sceneDto.name, null);
            if (WorldManager.IsWaitingEnter == true){
                this._waitingSceneDto = sceneDto;
                this.CleanTargetNpc();
                if (this.firstEnterRequestCallBack != null){
                    this.firstEnterRequestCallBack();
                    this.firstEnterRequestCallBack = null;
                }
                else {
                    GameDebuger.LogError("正在载入其它地图", null);
                }
                return;
            }
            this._waitingSceneDto = null;
            GameDebuger.TODO("ProxyManager.Dialogue.CloseNpcDialogue();");
            ProxyWorldMapModule.CloseMiniMap();
            ModelManager.get_Player().GetPlayer().sceneId = sceneDto.id;
            this._worldModel.SetupSceneDto(sceneDto);
            this._listener.Start();
            this._worldView.Destroy();
            if (BattleManager.get_Instance().IsInBattle()){
                GameDebuger.Log("在战斗中，延迟加载场景", null);
                this._needDelayLoadScene = true;
            }
            else {
                GameDebuger.Log(System.String.Format$$String$$Object$$Object("EnterWithSceneDto sceneId={0} oldSceneId={1}", sceneDto.id, this._oldSceneId), null);
                if (WorldManager.FirstEnter){
                    WorldManager.FirstEnter = false;
                    TipManager.AddTip(System.String.Format$$String$$Object("欢迎进入{0}服务器", AppStringHelper.WrapColor$$String$$Color(ServerManager.get_Instance().GetServerInfo().name, ColorConstant.Color_Name)), false, false, "");
                    GameCheatManager.get_Instance().Setup();
                }
                WorldManager.IsWaitingEnter = true;
                JoystickModule.get_Instance().EnabledJoystick(false);
                if (sceneDto.id != this._oldSceneId){
                    SceneFadeEffectController.Show$$SceneDto$$Action$1$Int32$$Action(sceneDto, $CreateDelegate(this, this.OnLoadMapFinish), $CreateDelegate(this, this.OnFadeOutFinish));
                }
                else {
                    GameDebuger.Log("相同场景ID但SceneDto发生了变更，更新WorldView的数据", null);
                    this.OnLoadMapFinish(sceneDto.id);
                    JSTimer.get_Instance().SetupCoolDown("DelayFadeOutFinish", 0.1, null, $CreateDelegate(this, this.OnFadeOutFinish), 0.1, false);
                }
            }
            if (this.OnSceneChanged != null){
                this.OnSceneChanged(sceneDto);
            }
        },
        SetOldSceneId: function (sceneId){
            this._oldSceneId = sceneId;
        },
        PlayWorldMusic: function (){
            AudioManager.get_Instance().PlayMusic(this._worldModel.GetWorldMusic(), true);
        },
        Reset: function (){
            this._isEntering = -1 /* -1 */;
            WorldManager.IsWaitingEnter = false;
            this._waitingSceneDto = null;
        },
        Destroy: function (){
            this.Reset();
            this._oldSceneId = 0;
            this._worldModel.SetupSceneDto(null);
            this._listener.Stop();
            this._worldView.Destroy();
            CameraController.Instance.ResetCamera();
        },
        IsDestroy: function (){
            return this._oldSceneId == 0;
        },
        OnLoadMapFinish: function (sceneId){
            this._oldSceneId = sceneId;
            WorldManager.IsWaitingEnter = false;
            if (this._waitingSceneDto != null){
                return;
            }
            this.PlayWorldMusic();
            CameraController.Instance.ResetCamera();
            this._worldView.InitView();
            LayerManager.get_Instance().SwitchLayerMode(UIMode.GAME);
            GameDebuger.TODO("if (ModelManager.MissionData.GetPlayerMissionDtoByMissionID(2002) != null)\n        {\n            NewBieGuideManager.Instance.ActiveGuide(NewBieGuideManager.Key_GuideMainMissionMainView);\n        }\n\n        //如果玩家还没有选择是否是经验玩家， 则先打开选择，忽略后面的签到弹出\n        if (!ProxyManager.NewbieGuide.OpenNewBieExperienced())\n        {\n            //这里除了签到弹出的检查， 还内嵌了检查战斗的逻辑， 很特殊的处理， 要注意\n            ModelManager.CheckinReward.JudgePopupSignView();\n        }");
            if (this.IsInBanScene() || ModelManager.get_Player().IsPlayerBandMode(false)){
                UIModuleManager.get_Instance().CloseOtherModuleWhenNpcDialogue();
            }
        },
        IsInBanScene: function (){
            return this._worldModel.GetSceneId() == DataCache.GetStaticConfigValue(432 /* AppStaticConfigs.BAN_SCENE_ID */, 0);
        },
        add_OnFadeOutFinishEvt: function (value){
            this.OnFadeOutFinishEvt = $CombineDelegates(this.OnFadeOutFinishEvt, value);
        },
        remove_OnFadeOutFinishEvt: function (value){
            this.OnFadeOutFinishEvt = $RemoveDelegate(this.OnFadeOutFinishEvt, value);
        },
        OnFadeOutFinish: function (){
            if (this._waitingSceneDto != null){
                this.EnterWithSceneDto(this._waitingSceneDto);
                return;
            }
            this.ResumeWalkToNpc();
            JoystickModule.get_Instance().EnabledJoystick(true);
            if (this.OnFadeOutFinishEvt != null)
                this.OnFadeOutFinishEvt();
        },
        HideScene: function (){
            LayerManager.get_Instance().SwitchLayerMode(UIMode.BATTLE);
        },
        ResumeScene: function (){
            if (this._worldModel.GetSceneDto() != null){
                this.PlayWorldMusic();
                if (this._needDelayLoadScene){
                    WorldManager.IsWaitingEnter = true;
                    this._worldView.Destroy();
                    SceneFadeEffectController.Show$$SceneDto$$Action$1$Int32$$Action(this._worldModel.GetSceneDto(), $CreateDelegate(this, this.OnLoadMapFinish), $CreateDelegate(this, this.OnFadeOutFinish));
                    this._needDelayLoadScene = false;
                }
                LayerManager.get_Instance().SwitchLayerMode(UIMode.GAME);
                if (WorldManager.FirstEnter){
                    this.Enter(ModelManager.get_Player().GetPlayer().sceneId, false, false, true, null);
                }
            }
        },
        PlayCameraAnimator: function (sceneId, cameraId){
            if (cameraId > 0){
                CameraController.Instance.PlayCameraAnimator(sceneId, cameraId);
            }
        },
        SyncWithServer: function (){
            var heroView = this.GetHeroView();
            if (UnityEngine.Object.op_Inequality(heroView, null))
                heroView.SyncWithServer();
        },
        PlanWalk: function (targetX, targetZ){
            if (!BattleManager.get_Instance().IsInBattle()){
                if (!JoystickModule.get_DisableMove())
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Scene_PlanWalk(this._worldModel.GetSceneId(), targetX, targetZ), "", null, null);
            }
        },
        VerifyWalk: function (toX, toY){
            if (!BattleManager.get_Instance().IsInBattle()){
                if (!JoystickModule.get_DisableMove())
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Scene_VerifyWalk(this._worldModel.GetSceneId(), toX, toY), "", null, null);
                if (this.OnHeroPosChange != null)
                    this.OnHeroPosChange(toX, toY);
            }
        },
        CleanTargetNpc: function (){
            this._targetNpc = null;
        },
        GetTargetNpc: function (){
            return this._targetNpc;
        },
        ResumeWalkToNpc: function (){
            if (this._targetNpc != null){
                GameDebuger.TODO("if (ModelManager.MissionData.heroCharacterControllerEnable)\n            {\n                WalkToByNpc(_targetNpc, dialogFunctionID);\n            }\n            else");
                this.WalkToByNpc(this._targetNpc, this.dialogFunctionID, this._toTargetCallback);
            }
        },
        WalkToByNpcId: function (npcId, dialogFunctionID){
            var target = DataCache.getDtoByCls$1(AppDto.Npc.ctor, npcId);
            this.WalkToByNpc(target, dialogFunctionID, null);
        },
        WalkToByNpc: function (npc, functionID, toTargetCallback){
            if (npc == null){
                GameDebuger.LogError("Npc is null,can not to find", null);
                return;
            }
            if (BattleManager.get_Instance().IsInBattle()){
                TipManager.AddTip("战斗中，不能进行传送", false, false, "");
                return;
            }
            this.dialogFunctionID = functionID;
            this._toTargetCallback = toTargetCallback;
            GameDebuger.TODO("ModelManager.MissionData.HeroCharacterControllerEnable(toTargetCallback == null, functionID);");
            if (this._worldModel.GetSceneId() == npc.sceneId){
                ModelManager.get_Player().StartAutoNav();
                JoystickModule.get_Instance().EnabledJoystick(true);
                var npcUnit;
                GameDebuger.TODO("if(npc is NpcSceneDatangMatchlessMonster)\n                npcUnit = _worldView.GetNpcViewManager().GetTangNpcUnit(npc.id);    \n            else");
                npcUnit = this._worldView.GetNpcViewManager().GetNpcUnit$$Int64(npc.id);
                if (npcUnit != null){
                    this._targetNpc = npc;
                    npcUnit.Trigger();
                }
                else {
                    if (UnityEngine.Object.op_Equality(this.GetHeroView(), null) || UnityEngine.Object.op_Equality(this.GetHeroView().get_cachedTransform(), null)){
                        return;
                    }
                    var tPlayerPos = this.GetHeroView().get_cachedTransform().get_position();
                    var tLastNpcPos = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(npc.x, tPlayerPos.y, npc.z);
                    tLastNpcPos = SceneHelper.GetSceneStandPosition(tLastNpcPos, UnityEngine.Vector3.get_zero());
                    var tDis = UnityEngine.Vector3.Distance(tPlayerPos, tLastNpcPos);
                    if (tDis < 1){
                        if (toTargetCallback != null){
                            toTargetCallback();
                            this.GetHeroView().SetNavFlag(false);
                        }
                    }
                    else {
                        this.GetHeroView().WalkToPoint(tLastNpcPos, toTargetCallback, true);
                        this._targetNpc = npc;
                    }
                }
            }
            else {
                this.Enter(npc.sceneId, false, false, true, npc);
            }
        },
        CheckPlayerAtBattleScope: function (playerId){
            if (this._worldView != null){
                if (this._worldModel.GetSceneId() != 1001){
                    return false;
                }
                var heroView = this._worldView.GetHeroView();
                if (UnityEngine.Object.op_Equality(heroView, null)){
                    return false;
                }
                var playerView = this._worldView.GetPlayerView(playerId);
                if (UnityEngine.Object.op_Equality(playerView, null)){
                    return false;
                }
                return SceneHelper.CheckAtBattleScope(heroView.get_transform().get_position()) && SceneHelper.CheckAtBattleScope(playerView.get_transform().get_position());
            }
            else {
                return false;
            }
        },
        GetClientPlayerDto: function (playerID, callback){
            GameDebuger.TODO("ServiceRequestAction.requestServer(SceneService.playerInfo(playerID), \", (e) => {\n            ScenePlayerDto serDto = e as ScenePlayerDto;\n            \n            if (callback != null) {\n                callback(serDto);\n            }\n        });");
        }
    }
};
JsTypes.push(WorldManager);
var WorldNotifyListener = {
    fullname: "WorldNotifyListener",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (worldModel){
            this._multiListener = null;
            this._worldModel = null;
            System.Object.ctor.call(this);
            this._worldModel = worldModel;
        },
        HandleNotify: function (dto){
            if (Is(dto, AppDto.SceneObjectNotify.ctor)){
                var tSceneObjectDto = (As(dto, AppDto.SceneObjectNotify.ctor)).obj;
                GameDebuger.Log("SceneObjectNotify" + tSceneObjectDto.name, null);
                if (tSceneObjectDto.objType == AppDto.SceneObjectDto.SceneObjectType.Player)
                    this._worldModel.HandlePlayerSceneObjectNotify(As(tSceneObjectDto, AppDto.ScenePlayerDto.ctor));
                else
                    WorldManager.get_Instance().GetNpcViewManager().AddDynamicCommonNpc(As(tSceneObjectDto, AppDto.SceneNpcDto.ctor));
            }
            else if (Is(dto, AppDto.SceneObjectRemoveNotify.ctor)){
                var tSceneObjectRemoveNotify = As(dto, AppDto.SceneObjectRemoveNotify.ctor);
                GameDebuger.Log("tSceneObjectRemoveNotify" + tSceneObjectRemoveNotify.objId, null);
                if (tSceneObjectRemoveNotify.objType == AppDto.SceneObjectDto.SceneObjectType.Player)
                    this._worldModel.HandleSceneObjectRemoveNotify(As(dto, AppDto.SceneObjectRemoveNotify.ctor));
                else
                    WorldManager.get_Instance().GetNpcViewManager().RemoveDynamicCommonNpc(tSceneObjectRemoveNotify.objId);
            }
            else if (Is(dto, AppDto.SceneObjectWalkNotify.ctor)){
                var tSceneObjectWalkNotify = As(dto, AppDto.SceneObjectWalkNotify.ctor);
                GameDebuger.Log("tSceneObjectWalkNotify " + tSceneObjectWalkNotify.id, null);
                if (tSceneObjectWalkNotify.objType == AppDto.SceneObjectDto.SceneObjectType.Player)
                    this._worldModel.HandleSceneObjectWalkNotify(As(dto, AppDto.SceneObjectWalkNotify.ctor));
                else
                    this._worldModel.HandleNpcWalkPointNotify(As(dto, AppDto.SceneObjectWalkNotify.ctor));
            }
            else if (Is(dto, AppDto.SceneObjectTeleportNotify.ctor)){
                GameDebuger.Log("tSceneObjectWalkNotify " + (As(dto, AppDto.SceneObjectTeleportNotify.ctor)).id.toString(), null);
                this._worldModel.HandleSceneObjectTeleportNotify(As(dto, AppDto.SceneObjectTeleportNotify.ctor));
            }
        },
        Start: function (){
            if (this._multiListener == null){
                this._multiListener = new MultipleNotifyListener.ctor();
                this._multiListener.AddNotify(Typeof(AppDto.SceneObjectNotify.ctor));
                this._multiListener.AddNotify(Typeof(AppDto.SceneObjectWalkNotify.ctor));
                this._multiListener.AddNotify(Typeof(AppDto.SceneObjectTeleportNotify.ctor));
                this._multiListener.AddNotify(Typeof(AppDto.SceneObjectRemoveNotify.ctor));
                GameDebuger.TODO("_multiListener.AddNotify(typeof(WeaponNotify));\n            _multiListener.AddNotify(typeof(HallowSpriteNotify));\n            _multiListener.AddNotify(typeof(SceneNpcStateDto));\n            _multiListener.AddNotify(typeof(NpcBattleNotify));\n            _multiListener.AddNotify(typeof(PlayersEnterScreenNotify));\n            _multiListener.AddNotify(typeof(PlayersLeaveScreenNotify));\n            //  进出帮派Notify\n            _multiListener.AddNotify(typeof(PlayerJoinLeaveGuildNotify));\n            _multiListener.AddNotify(typeof(NpcWalkPointNotify));\n            _multiListener.AddNotify(typeof(FashionDressChangeNotify));\n            //门派&角色转换\n            _multiListener.AddNotify(typeof(FactionCharactorChangeNotify));\n            //坐骑\n            _multiListener.AddNotify(typeof(PlayerRideChangeNotify));\n            //  护送国宝速度变更\n            _multiListener.AddNotify(typeof(PlayerShipmentChangeNotify));\n\n            _multiListener.AddNotify(typeof(IndentureFinishNotify));");
                this._multiListener.Start($CreateDelegate(this, this.HandleNotify));
            }
        },
        Stop: function (){
            if (this._multiListener != null){
                this._multiListener.Stop();
                this._multiListener = null;
            }
        }
    }
};
JsTypes.push(WorldNotifyListener);
var IWorldModel = {
    fullname: "IWorldModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldModel);
var WorldModel = {
    fullname: "WorldModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            WorldModel.stream = null;
        },
        Stream$$: "UniRx.IObservableExpand`1[[IWorldModelData]]",
        get_Stream: function (){
            if (WorldModel.stream == null)
                WorldModel.stream = new UniRx.Subject$1.ctor(IWorldModelData.ctor);
            return WorldModel.stream;
        },
        Create: function (){
            var model = new WorldModel.ctor();
            model.Init();
            return model;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel", "IWorldModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._sceneDto = null;
            this._data = null;
            this._disposable = null;
            this._NpcsDic = null;
            System.Object.ctor.call(this);
        },
        NpcsDic$$: "System.Collections.Generic.Dictionary`2[[System.Int64],[AppDto.SceneNpcDto]]",
        get_NpcsDic: function (){
            return this._NpcsDic;
        },
        set_NpcsDic: function (value){
            this._NpcsDic = value;
        },
        Init: function (){
            this._data = new WorldModel.WorldModelData.ctor();
            this.set_NpcsDic(new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, AppDto.SceneNpcDto.ctor));
            if (WorldModel.stream == null)
                WorldModel.stream = new UniRx.Subject$1.ctor(IWorldModelData.ctor);
            var d = UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.TeamSceneNotify.ctor, GenericNotifyListener$1.get_Stream(), $CreateAnonymousDelegate(this, function (noti){
                this._data.UpdateWithSceneNotify(noti);
                WorldModel.stream.OnNext(this._data);
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        GetSceneName: function (){
            return this.GetSceneDto().name;
        },
        DumpPlayerDicInfo: function (){
            var debugInfo = new System.Text.StringBuilder.ctor();
            var $it16 = this._data._playersDic.get_Values().GetEnumerator();
            while ($it16.MoveNext()){
                var playerDto = $it16.get_Current();
                GameDebuger.TODO("debugInfo.AppendLine(string.Format(\'playId:{0} status:{1} index:{2} inBattle:{3} teamUID:{4} haseCode:{5}\',\n                                               playerDto.id,\n                                               playerDto.teamStatus,\n                                               playerDto.teamIndex,\n                                               playerDto.inBattle, playerDto.teamUniqueId,\n                                               playerDto.GetHashCode()));");
                debugInfo.AppendLine$$String(System.String.Format$$String$$Object$$Object("playId:{0} haseCode:{1}", playerDto.id, playerDto.GetHashCode()));
            }
            return debugInfo.toString();
        },
        GetSceneDto: function (){
            return this._sceneDto;
        },
        GetSceneId: function (){
            if (this._sceneDto == null)
                return 0;
            return this._sceneDto.id;
        },
        GetBattleSceneName: function (){
            var battleSceneName = "Battle_" + this._sceneDto.get_sceneMap().battleMapId;
            return battleSceneName;
        },
        GetWorldMusic: function (){
            if (this._sceneDto == null || System.String.IsNullOrEmpty(this._sceneDto.get_sceneMap().music)){
                if (ModelManager.get_Player().GetPlayer() == null){
                    return "";
                }
                else {
                    var sceneId = ModelManager.get_Player().GetPlayer().sceneId;
                    var sceneMap = DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, sceneId);
                    if (sceneMap == null || System.String.IsNullOrEmpty(sceneMap.music)){
                        return "music_world_1001";
                    }
                    else {
                        return sceneMap.music;
                    }
                }
            }
            else {
                return this._sceneDto.get_sceneMap().music;
            }
        },
        GetPlayersDic: function (){
            return this._data._playersDic;
        },
        GetPlayerDto: function (playerId){
            if (this._sceneDto != null){
                if (this._data._playersDic.ContainsKey(playerId))
                    return this._data._playersDic.get_Item$$TKey(playerId);
            }
            return null;
        },
        GetPlayerBattleStatus: function (playerId){
            GameDebuger.TODO("if (_sceneDto != null)\n        {\n            if (_playersDic.ContainsKey(playerId))\n                return _playersDic[playerId].inBattle;\n        }");
            return false;
        },
        GetTeamLeader: function (teamUID){
            var $it17 = this._data._playersDic.get_Values().GetEnumerator();
            while ($it17.MoveNext()){
                var player = $it17.get_Current();
                if (teamUID == player.teamId && player.teamStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */)
                    return player;
            }
            return null;
        },
        SetupSceneDto: function (sceneDto){
            this._sceneDto = sceneDto;
            this._data._playersDic.Clear();
            if (this._sceneDto != null){
                var ownPlayerId = ModelManager.get_Player().GetPlayerId();
                if (null == this._sceneDto.objects)
                    GameDebuger.Log("场景中没有玩家数据！", null);
                else {
                    if (null != this._sceneDto && null != this._sceneDto.objects){
                        for (var i = 0; i < this._sceneDto.objects.get_Count(); i++){
                            var playerDto = As(this._sceneDto.objects.get_Item$$Int32(i), AppDto.ScenePlayerDto.ctor);
                            if (null == playerDto)
                                continue;
                            this._data._playersDic.Add(playerDto.id, playerDto);
                            if (playerDto.id == ownPlayerId){
                                GameDebuger.TODO("ModelManager.Player.UpdateTransformModelId(playerDto.transformModelId);");
                            }
                            WorldModel.stream.OnNext(this._data);
                        }
                    }
                }
            }
        },
        UpdatePlayer: function (playerDto){
            if (this._data._playersDic.ContainsKey(playerDto.id)){
                this._data._playersDic.set_Item$$TKey(playerDto.id, playerDto);
                WorldModel.stream.OnNext(this._data);
                GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ScenePlayerDto.ctor, GameEvent.World_OnUpdatePlayer, playerDto);
                return true;
            }
            return false;
        },
        AddPlayer: function (playerDto){
            if (!this.UpdatePlayer(playerDto)){
                this._data._playersDic.Add(playerDto.id, playerDto);
                GameEventCenter.SendEvent$1$$Event$1$$T(AppDto.ScenePlayerDto.ctor, GameEvent.World_OnAddPlayer, playerDto);
            }
        },
        RemovePlayer: function (id){
            var remove = this._data._playersDic.Remove(id);
            if (remove){
                WorldModel.stream.OnNext(this._data);
                GameEventCenter.SendEvent$1$$Event$1$$T(System.Int64.ctor, GameEvent.World_OnRemovePlayer, id);
            }
            return remove;
        },
        UpdatePlayerPos: function (playerId, x, z){
            if (this._data._playersDic.ContainsKey(playerId)){
                var playerDto = this._data._playersDic.get_Item$$TKey(playerId);
                playerDto.x = x;
                playerDto.z = z;
                WorldModel.stream.OnNext(this._data);
                GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnUpdatePlayerPos, playerId, x, z);
            }
        },
        ChangePlayerTeamStatus: function (playerId, teamStatus, teamUID){
            GameUtil.LogTeam("ChangePlayerTeamStatus");
            var p = null;
            (function (){
                var $1 = $Ref(null, p);
                var $res = this._data._playersDic.TryGetValue(playerId, $1);
                p = $1.Value;
                return $res;
            }).call(this);
            if (p != null){
                p.teamStatus = teamStatus;
                p.teamId = teamUID;
                this._data.latestPlayerChageTeamStatusSet.Clear();
                this._data.latestPlayerChageTeamStatusSet.Add(p.id);
                WorldModel.stream.OnNext(this._data);
            }
        },
        ChangePlayerBattleStatus: function (playerId, inBattle){
            if (this._data._playersDic.ContainsKey(playerId)){
                GameDebuger.TODO("_playersDic[playerId].inBattle = inBattle;\n            GameEventCenter.SendEvent(GameEvent.World_OnChangeBattleStatus, playerId, inBattle);");
                WorldModel.stream.OnNext(this._data);
            }
        },
        HandlePlayerSceneObjectNotify: function (pScenePlayerDto){
            if (this._sceneDto == null)
                return;
            if (pScenePlayerDto.sceneId == this._sceneDto.id){
                this.AddPlayer(pScenePlayerDto);
                GameDebuger.Log(System.String.Format$$String$$Object$$Object("Player EnterScene: id:{0} name:{1}", pScenePlayerDto.id, pScenePlayerDto.name), null);
            }
        },
        HandleSceneObjectRemoveNotify: function (notify){
            if (this._sceneDto == null)
                return;
            if (notify.sceneId == this._sceneDto.id){
                if (this.RemovePlayer(notify.objId)){
                    GameDebuger.Log(System.String.Format$$String$$Object$$Object("Player LeaveScene: id:{0} sceneId:{1}", notify.objId, notify.sceneId), null);
                }
            }
        },
        HandleSceneObjectWalkNotify: function (notify){
            if (this._sceneDto == null)
                return;
            if (notify.sceneId == this._sceneDto.id){
                this.UpdatePlayerPos(notify.id, notify.x, notify.z);
            }
        },
        HandleNpcWalkPointNotify: function (notify){
            if (this._sceneDto == null)
                return;
            GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object("NpcWalkPointNotify npcid={0} x={1} z={2}", notify.id, notify.x, notify.z), null);
            this.UpdateNpcPos(notify.id, notify.x, notify.z);
        },
        HandleSceneObjectTeleportNotify: function (notify){
            if (this._data._playersDic.ContainsKey(notify.id)){
                var playerDto = this._data._playersDic.get_Item$$TKey(notify.id);
                playerDto.x = notify.x;
                playerDto.z = notify.z;
                if (playerDto.teamStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */){
                    var $it18 = this._data._playersDic.get_Values().GetEnumerator();
                    while ($it18.MoveNext()){
                        var player = $it18.get_Current();
                        if (playerDto.teamId == player.teamId && player.teamStatus == 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */){
                            player.x = notify.x;
                            player.z = notify.z;
                            GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnChangePlayerPos, player.id, player.x, player.z);
                        }
                    }
                }
                WorldModel.stream.OnNext(this._data);
                GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnChangePlayerPos, notify.id, notify.x, notify.z);
            }
        },
        HandlePlayerTitleChangeRefresh: function (pUserId, pBeforeName, pNewName){
            GameDebuger.TODO("if (_playersDic.ContainsKey(pUserId))\n        {\n            _playersDic[pUserId].titleName = _playersDic[pUserId].titleName.Replace(pBeforeName, pNewName);\n\n                  GameEventCenter.SendEvent(GameEvent.World_OnChangePlayerTitle, pUserId);\n        }");
        },
        UpdateNpcPos: function (npcUuid, x, z){
            if (this.get_NpcsDic() != null && this.get_NpcsDic().get_Count() > 0){
                for (var index = 0; index < this.get_NpcsDic().get_Count(); index++){
                    if (this.get_NpcsDic().get_Item$$TKey(index).id == npcUuid){
                        this.get_NpcsDic().get_Item$$TKey(index).x = x;
                        this.get_NpcsDic().get_Item$$TKey(index).z = z;
                        GameEventCenter.SendEvent$3$$Event$3$$T1$$T2$$T3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnUpdateNpcPos, npcUuid, x, z);
                    }
                }
            }
        },
        Dispose: function (){
            this._data.Dispose();
            this._data = null;
        }
    }
};
JsTypes.push(WorldModel);
var IWorldViewData = {
    fullname: "IWorldViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldViewData);
var IWorldModelData = {
    fullname: "IWorldModelData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldModelData);
var NpcViewDataManager = {
    fullname: "NpcViewDataManager",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (_master){
            this.master = null;
            this._npcs = null;
            this._alwaysShowList = null;
            this._quadTree = null;
            this._setupNpcList = null;
            this._npcs = null;
            this._alwaysShowList = null;
            System.Object.ctor.call(this);
            this.master = _master;
            this._npcs = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int64.ctor, BaseNpcUnit.ctor, 50);
            this.set_npcs(new ReadOnlyDictionary$2.ctor(System.Int64.ctor, BaseNpcUnit.ctor, this._npcs));
            this.set_setupNpcList(new System.Collections.Generic.List$1.ctor$$Int32(System.Int64.ctor, 25));
            this._alwaysShowList = new System.Collections.Generic.List$1.ctor$$Int32(BaseNpcUnit.ctor, 10);
            this.set_alwaysShowList(new System.Collections.ObjectModel.ReadOnlyCollection$1.ctor(BaseNpcUnit.ctor, this._alwaysShowList));
        },
        quadTree$$: "QuadTree`1[[BaseNpcUnit]]",
        get_quadTree: function (){
            return this._quadTree;
        },
        set_quadTree: function (value){
            this._quadTree = value;
        },
        setupNpcList$$: "System.Collections.Generic.List`1[[System.Int64]]",
        get_setupNpcList: function (){
            return this._setupNpcList;
        },
        set_setupNpcList: function (value){
            this._setupNpcList = value;
        },
        npcs$$: "ReadOnlyDictionary`2[[System.Int64],[BaseNpcUnit]]",
        get_npcs: function (){
            return this._npcs;
        },
        set_npcs: function (value){
            this._npcs = value;
        },
        alwaysShowList$$: "System.Collections.ObjectModel.ReadOnlyCollection`1[[BaseNpcUnit]]",
        get_alwaysShowList: function (){
            return this._alwaysShowList;
        },
        set_alwaysShowList: function (value){
            this._alwaysShowList = value;
        },
        Setup: function (){
            this.set_quadTree(new QuadTree$1.ctor$$Vector2$$Int32(BaseNpcUnit.ctor, new UnityEngine.Vector2.ctor$$Single$$Single(10, 10), 5));
        },
        AddNpc: function (baseNpcUnit){
            this._npcs.Add(baseNpcUnit.GetNpcUID(), baseNpcUnit);
            this.get_quadTree().Insert(baseNpcUnit);
        },
        RemoveNpc: function (npcUID){
            var baseNpcUnit = this._npcs.get_Item$$TKey(npcUID);
            if (baseNpcUnit == null)
                return;
            if (this._alwaysShowList.Contains(baseNpcUnit)){
                this._alwaysShowList.Remove(baseNpcUnit);
            }
            else {
                this.get_quadTree().Remove(baseNpcUnit);
                this.get_setupNpcList().Remove(npcUID);
            }
            baseNpcUnit.Destroy();
            this._npcs.Remove(npcUID);
        },
        AddToAlwaysShow: function (baseNpcUnit){
            if (this._alwaysShowList.Contains(baseNpcUnit) || this._npcs.ContainsKey(baseNpcUnit.GetNpcUID()) == false)
                return;
            this.get_quadTree().Remove(baseNpcUnit);
            this._alwaysShowList.Add(baseNpcUnit);
        },
        Dispose: function (){
            if (this._npcs != null){
                var $it19 = this._npcs.get_Values().GetEnumerator();
                while ($it19.MoveNext()){
                    var npcUnit = $it19.get_Current();
                    npcUnit.Destroy();
                }
                this._npcs.Clear();
            }
            this.get_setupNpcList().Clear();
            this.set_quadTree(null);
        }
    }
};
JsTypes.push(NpcViewDataManager);
var NpcViewManager = {
    fullname: "NpcViewManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            NpcViewManager.EnableTrigger = true;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isInit = false;
            this._npcIsReady = false;
            this._unitWaitingTrigger = null;
            this.offsetDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, AppDto.SceneNpcDto.ctor);
            this.lastPos = UnityEngine.Vector3.get_zero();
            this._isInitGold = false;
            this._npcViewPool = null;
            this._npcViewDataManager = null;
            System.Object.ctor.call(this);
            this.set_npcViewPool(new NpcViewPool.ctor(this));
            this.set_npcViewDataManager(new NpcViewDataManager.ctor(this));
        },
        npcViewPool$$: "NpcViewPool",
        get_npcViewPool: function (){
            return this._npcViewPool;
        },
        set_npcViewPool: function (value){
            this._npcViewPool = value;
        },
        npcViewDataManager$$: "NpcViewDataManager",
        get_npcViewDataManager: function (){
            return this._npcViewDataManager;
        },
        set_npcViewDataManager: function (value){
            this._npcViewDataManager = value;
        },
        _npcs$$: "ReadOnlyDictionary`2[[System.Int64],[BaseNpcUnit]]",
        get__npcs: function (){
            return this.get_npcViewDataManager().get_npcs();
        },
        Setup: function (heroView){
            this.get_npcViewDataManager().Setup();
            this._unitWaitingTrigger = new UnitWaitingTrigger.ctor();
            this._unitWaitingTrigger.SetHeroPlayer(heroView);
            NpcViewManager.EnableTrigger = true;
            this._npcIsReady = false;
            this.InitStaticNpc();
            this.InitOtherNpc();
            this.InitDynamicNpc();
            this.StartQuadCheck();
            GameDebuger.TODO("if (!FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PreciousBox, false))\n        {\n            GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeePreciousBox); //预防加了多次\n            GameEventCenter.AddListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeePreciousBox);\n        }\n\n        if (!FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_GoldBox, false))\n        {\n            GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeeGoldBox); //预防加了多次\n            GameEventCenter.AddListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeeGoldBox);\n        }");
        },
        InitStaticNpc: function (){
            var npcs = DataCache.getArrayByCls$1(AppDto.Npc.ctor);
            var sceneId = WorldManager.get_Instance().GetModel().GetSceneId();
            if (null == npcs)
                GameDebuger.LogError("没有NPC数据", null);
            else {
                for (var i = 0,len = npcs.get_Count(); i < len; i++){
                    var npc = npcs.get_Item$$Int32(i);
                    if (npc.sceneId == sceneId){
                        if (Is(npc, AppDto.NpcDoubleTeleport.ctor) || Is(npc, AppDto.NpcGeneral.ctor)){
                            this.AddNpcUnit$$Npc(npc);
                        }
                    }
                }
            }
        },
        InitDynamicNpc: function (){
            GameDebuger.TODO("var tShowNpcInfoDtoList = ModelManager.MissionNpc.GetShowMonsterNpcInfoDtoList();\n        for (int i = 0, len = tShowNpcInfoDtoList.Count; i < len; i++)\n        {\n            AddNpcUnit(tShowNpcInfoDtoList[i]);\n        }");
        },
        InitOtherNpc: function (){
            if (WorldManager.get_Instance() != null && WorldManager.get_Instance().GetModel() != null && WorldManager.get_Instance().GetModel().GetSceneDto() != null){
                var list = WorldManager.get_Instance().GetModel().get_NpcsDic();
                if (list != null && list.get_Count() > 0){
                    for (var i = 0,len = list.get_Count(); i < len; i++){
                        var npcState = list.get_Item$$TKey(i);
                        this.AddNpcUnit$$SceneNpcDto(npcState);
                    }
                }
            }
        },
        StartLoadNpcs: function (){
            this._npcIsReady = true;
            var $it20 = this.get__npcs().get_Values().GetEnumerator();
            while ($it20.MoveNext()){
                var npcUnit = $it20.get_Current();
                this.SetupNpc(npcUnit);
            }
        },
        StartQuadCheck: function (){
            JSTimer.get_Instance().SetupTimer("NpcViewManager_QuadTree_Check", $CreateAnonymousDelegate(this, function (){
                var pos = WorldManager.get_Instance().GetHeroWorldPos();
                this.get_npcViewDataManager().get_quadTree().DrawTree(0.5);
                var bounds2 = MathHelper.Bounds2D$$Single$$Single$$Single$$Single(pos.x, pos.z, 30, 30);
                QuadTree$1.DrawBounds(bounds2, UnityEngine.Color.get_red(), 0.5, 1);
                if (this.QuadCanUpdate(pos) == false)
                    return;
                var bounds = MathHelper.Bounds2D$$Single$$Single$$Single$$Single(pos.x, pos.z, 30, 30);
                var visualList = this.get_npcViewDataManager().get_quadTree().Query$$Bounds(bounds);
                var setupNpcList = this.get_npcViewDataManager().get_setupNpcList();
                visualList.AddRange(this.get_npcViewDataManager().get_alwaysShowList());
                this.QuadRemove(visualList, setupNpcList);
                this.QuadSetup(visualList, setupNpcList);
            }), 0.5, false);
        },
        QuadCanUpdate: function (heroPos){
            if (UnityEngine.Vector3.op_Equality(heroPos, UnityEngine.Vector3.get_zero()))
                return false;
            if (UnityEngine.Vector3.op_Equality(this.lastPos, UnityEngine.Vector3.get_zero())){
                this.lastPos = heroPos;
            }
            else {
                if (UnityEngine.Vector3.Distance(this.lastPos, heroPos) < 1)
                    return false;
                else
                    this.lastPos = heroPos;
            }
            return true;
        },
        QuadRemove: function (visualList, setupNpcList){
            for (var i = 0; i < setupNpcList.get_Count(); i++){
                var item;
                if ((function (){
                    var $1 = $Ref(null, item);
                    var $res = this.get__npcs().TryGetValue(setupNpcList.get_Item$$Int32(i), $1);
                    item = $1.Value;
                    return $res;
                }).call(this)){
                    if (visualList.Contains(item) == false){
                        item.Destroy();
                        setupNpcList.RemoveAt(i);
                        i--;
                    }
                }
            }
        },
        QuadSetup: function (visualList, setupNpcList){
            for (var i = 0; i < visualList.get_Count(); i++){
                var item = visualList.get_Item$$Int32(i);
                if (setupNpcList.Contains(item.GetNpcUID()) == false){
                    setupNpcList.Add(item.GetNpcUID());
                    this.SetupNpc(item);
                }
            }
        },
        AddDynamicCommonNpc: function (npcState){
            WorldManager.get_Instance().GetModel().get_NpcsDic().Add(npcState.id, npcState);
            this.AddNpcUnit$$SceneNpcDto(npcState);
        },
        RemoveDynamicCommonNpc: function (npcUID){
            var commonNpcStates = WorldManager.get_Instance().GetModel().get_NpcsDic();
            commonNpcStates.Remove(npcUID);
            this.RemoveNpc(npcUID);
        },
        CanSeeGoldBox: function (){
            GameDebuger.TODO("if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_GoldBox, false))\n        {\n            GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeeGoldBox);\n\n            var commonNpcStates = WorldManager.Instance.GetModel().NpcsDic;\n            for (int i = 0, len = commonNpcStates.Count; i < len; i++)\n            {\n                var npcState = commonNpcStates[i];\n                if (npcState.npc is NpcSceneGoldBox)\n                {\n                    var box = (NpcSceneGoldBox)npcState.npc;\n                    if (box != null)\n                    {\n                        int playerLv = ModelManager.Player.GetPlayerLevel();\n                        if (playerLv >= box.minGrade && playerLv <= box.maxGrade)\n                        {\n                            AddNpcUnit(npcState);\n                        }\n                    }\n                }\n            }\n        }");
        },
        CanSeePreciousBox: function (){
            GameDebuger.TODO("if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PreciousBox, false))\n        {\n            if (ModelManager.AssistSkill.HidePreciousBox) return;\n            GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeePreciousBox);\n            var commonNpcStates = WorldManager.Instance.GetModel().NpcsDic;\n            for (int i = 0, len = commonNpcStates.Count; i < len; i++)\n            {\n                var npcState = commonNpcStates[i];\n                if (npcState.npc is NpcScenePreciousBox)\n                {\n                    var box = (NpcScenePreciousBox)npcState.npc;\n                    if (string.IsNullOrEmpty(box.visibleGrade))\n                    {\n                        AddNpcUnit(npcState);\n                    }\n                    else\n                    {\n                        var lvSteps = box.visibleGrade.ParseToList<int>(\',\', int.Parse);\n                        if (lvSteps != null)\n                        {\n                            int playerLv = ModelManager.Player.GetPlayerLevel();\n                            if (playerLv >= lvSteps[0] && playerLv <= lvSteps[1])\n                            {\n                                AddNpcUnit(npcState);\n                            }\n                        }\n                    }\n                }\n            }\n        }");
        },
        ShowOrHideGoldBox: function (show){
            GameDebuger.TODO("if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_GoldBox, false))");
            if (true){
                if (!this._isInitGold){
                    this._isInitGold = true;
                    this.CanSeeGoldBox();
                    return;
                }
                var commonNpcStates = WorldManager.get_Instance().GetModel().get_NpcsDic();
                for (var i = 0,len = commonNpcStates.get_Count(); i < len; i++){
                    var npcState = commonNpcStates.get_Item$$TKey(i);
                    GameDebuger.TODO("if (npcState.npc is NpcSceneGoldBox)\n                {\n                    var tBoxUnit = GetNpcUnit(npcState.id);\n                    if (tBoxUnit != null)\n                    {\n                        tBoxUnit.SetUnitActive(!show);\n                    }\n                }");
                }
            }
            else {
                if (!this._isInitGold)
                    return;
                var commonNpcStates = WorldManager.get_Instance().GetModel().get_NpcsDic();
                for (var i = 0,len = commonNpcStates.get_Count(); i < len; i++){
                    var npcState = commonNpcStates.get_Item$$TKey(i);
                    GameDebuger.TODO("if (npcState.npc is NpcSceneGoldBox)\n                {\n                    var tBoxUnit = GetNpcUnit(npcState.id);\n                    if (tBoxUnit != null)\n                    {\n                        tBoxUnit.SetUnitActive(false);\n                    }\n                }");
                }
            }
        },
        ShowOrHidePreciousBox: function (show){
            GameDebuger.TODO("if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PreciousBox, false))");
            if (true){
                if (!this._isInit){
                    this._isInit = true;
                    this.CanSeePreciousBox();
                    return;
                }
                var commonNpcStates = WorldManager.get_Instance().GetModel().get_NpcsDic();
                for (var i = 0,len = commonNpcStates.get_Count(); i < len; i++){
                    var npcState = commonNpcStates.get_Item$$TKey(i);
                    GameDebuger.TODO("if (npcState.npc is NpcScenePreciousBox)\n                {\n                    var tBoxUnit = GetNpcUnit(npcState.id);\n                    if (tBoxUnit != null)\n                    {\n                        tBoxUnit.SetUnitActive(!show);\n                    }\n                }");
                }
            }
            else {
                if (!this._isInit)
                    return;
                var commonNpcStates = WorldManager.get_Instance().GetModel().get_NpcsDic();
                for (var i = 0,len = commonNpcStates.get_Count(); i < len; i++){
                    var npcState = commonNpcStates.get_Item$$TKey(i);
                    GameDebuger.TODO("if (npcState.npc is NpcScenePreciousBox)\n                {\n                    var tBoxUnit = GetNpcUnit(npcState.id);\n                    if (tBoxUnit != null)\n                    {\n                        tBoxUnit.SetUnitActive(false);\n                    }\n                }");
                }
            }
        },
        HideMatchmaker: function (hide){
            GameDebuger.TODO("if (_npcs.ContainsKey(ProxyDialogueModule.Matchmaker_NPC_ID))\n        {\n            _npcs[ProxyDialogueModule.Matchmaker_NPC_ID].SetModelActive(hide);\n        }\n        else\n        {\n            GameDebuger.Log(\'没有找到红娘\');\n        }");
        },
        SetNpcState$$List$1$Int32: function (npcIdList){
            if (null == npcIdList)
                return;
            var $it21 = this.get__npcs().GetEnumerator();
            while ($it21.MoveNext()){
                var baseNpcUnit = $it21.get_Current();
                baseNpcUnit.get_Value().SetUnitActive(false);
                for (var i = 0; i < npcIdList.get_Count(); i++){
                    if (this.get__npcs().ContainsKey(npcIdList.get_Item$$Int32(i)))
                        this.get__npcs().get_Item$$TKey(npcIdList.get_Item$$Int32(i)).SetUnitActive(true);
                }
            }
        },
        SetNPCActive: function (){
            if (null == this.get__npcs())
                return;
            var $it22 = this.get__npcs().GetEnumerator();
            while ($it22.MoveNext()){
                var baseNpcUnit = $it22.get_Current();
                baseNpcUnit.get_Value().SetUnitActive(true);
            }
        },
        SetNpcState$$Int32$$Boolean: function (npcId, state){
            if (this.get__npcs().ContainsKey(npcId)){
                this.get__npcs().get_Item$$TKey(npcId).SetModelActive(state);
            }
            else {
                GameDebuger.Log("没有找到npc:" + npcId, null);
            }
        },
        AddNpcUnit$$Npc: function (npc){
            var npcStateDto = new AppDto.SceneNpcDto.ctor();
            npcStateDto.x = npc.x;
            npcStateDto.z = npc.z;
            npcStateDto.npcId = npc.id;
            npcStateDto.id = npc.id;
            this.AddNpcUnit$$SceneNpcDto(npcStateDto);
        },
        AddNpcUnit$$SceneNpcDto: function (npcStateDto){
            if (npcStateDto == null){
                GameDebuger.LogError("NpcViewManager.AddNpcUnit npcStateDto = null", null);
            }
            else if (null == npcStateDto.get_npc())
                GameDebuger.LogError(System.String.Format$$String$$Object("AddNpcUnit failed for npc == null ,npcId:{0}", npcStateDto.npcId), null);
            else {
                var npcInfo = new BaseNpcInfo.ctor();
                npcInfo.set_npcStateDto(npcStateDto);
                npcInfo.name = npcStateDto.get_npc().name;
                npcInfo.submitIndex = 0;
                this.AddNpcUnit$$BaseNpcInfo$$Boolean(npcInfo, true);
            }
        },
        AddNpcUnit$$BaseNpcInfo$$Boolean: function (npcInfo, needCheckOffset){
            if (this._unitWaitingTrigger == null){
                return;
            }
            GameDebuger.TODO("var stateDto = WorldManager.Instance.GetModel().GetSceneNpcState(npcInfo.npcStateDto.npcId);\n        if (stateDto != null)\n        {\n            //  是否任务指定NPCID\n            ModelManager.MissionData.missionTypeFactionTrialDelegate.SetMissionSpecifyNpc(stateDto);\n\n            npcInfo.playerDressInfo = stateDto.playerDressInfo;\n            npcInfo.rideMountNotify = stateDto.rideMountNotify;\n            npcInfo.rideLevel = stateDto.rideLevel;\n            npcInfo.name = stateDto.nickname;\n        }");
            var npcState = null;
            if (needCheckOffset){
                npcState = this.overlapOffset(npcInfo.get_npcStateDto());
            }
            else {
                npcState = npcInfo.get_npcStateDto();
            }
            var npc = npcState.get_npc();
            var sceneId = WorldManager.get_Instance().GetModel().GetSceneId();
            if (npc.sceneId != sceneId){
                npc.sceneId = sceneId;
            }
            if (this.get__npcs().ContainsKey(npcState.id)){
                this.get__npcs().get_Item$$TKey(npcState.id).UpdateNpc(npcState);
                return;
            }
            npcInfo.AdjustAppearance();
            var npcUnit = this.CreateNpcUnit(npcInfo, npc);
            if (npcUnit != null){
                npcUnit.Init(npcInfo);
                this.get_npcViewDataManager().AddNpc(npcUnit);
                if (Is(npcUnit, TriggerNpcUnit.ctor)){
                    this._unitWaitingTrigger.AddTriggerUnit(As(npcUnit, TriggerNpcUnit.ctor));
                }
                GameDebuger.TODO("if (npc is NpcPeriod)\n                npcUnit.SetUnitActive(WorldManager.Instance.GetModel().GetSceneNpcShowState(npcInfo.npcStateDto.npcId));");
            }
        },
        SetupNpc: function (npcUnit){
            var npc = npcUnit.GetNpc();
            npcUnit.Setup(this);
            GameDebuger.TODO("if (!(npc is NpcGeneral && (NpcGeneral.NpcGeneralKindEnum)((npc as NpcGeneral).kind) == NpcGeneral.NpcGeneralKindEnum.Area))");
            npcUnit.Load();
        },
        CreateNpcUnit: function (npcInfo, npc){
            var npcState = npcInfo.get_npcStateDto();
            var npcUnit = null;
            if (Is(npc, AppDto.NpcDoubleTeleport.ctor)){
                npcUnit = new DoubleTeleportUnit.ctor();
            }
            else if (Is(npc, AppDto.NpcGeneral.ctor)){
                GameDebuger.TODO("if (npc is NpcPeriod)\n            {\n                if ((npc as NpcPeriod).open)\n                    npcUnit = new NpcPeriodUnit();\n            }\n            else");
                npcUnit = new GeneralUnit.ctor();
            }
            GameDebuger.TODO("else if (npc is NpcSceneTeleport)\n        {\n            npcUnit = new NpcSceneTeleportUnit();\n        }\n        //  随机生成的明雷怪 or  场景公共怪\n        else if (npc is NpcVariable)\n        {\n            npcUnit = new MonsterUnit();\n        }\n        else if (npcState.npc is NpcScenePreciousBox)\n        {\n\n            if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_PreciousBox, false));\n            {\n                var box = npcState.npc as NpcScenePreciousBox;\n                if (!ModelManager.AssistSkill.HidePreciousBox)\n                {\n                    _isInit = true;\n                    if (string.IsNullOrEmpty(box.visibleGrade))\n                    {\n                        npcUnit = new PreciousBoxUnit();\n                    }\n                    else\n                    {\n                        var lvSteps = box.visibleGrade.ParseToList<int>(\',\', int.Parse);\n                        if (lvSteps != null)\n                        {\n                            int playerLv = ModelManager.Player.GetPlayerLevel();\n                            if (playerLv >= lvSteps[0] && playerLv <= lvSteps[1])\n                            {\n                                npcUnit = new PreciousBoxUnit();\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        else if (npcState.npc is NpcSceneMarriageSweetBox)\n        {\n            npcUnit = new MarrySweetBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneBridalSedanBox)\n        {\n            npcUnit = new BridalSedanBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneBridalSedanPetBox)\n        {\n            npcUnit = new BridalSedanPetBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneGoldBox)\n        {\n                if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_GoldBox, false));\n            {\n                var box = (NpcSceneGoldBox)npcState.npc;\n                if (box != null)\n                {\n                    int playerLv = ModelManager.Player.GetPlayerLevel();\n                    if (playerLv >= box.minGrade && playerLv <= box.maxGrade)\n                    {\n                        npcUnit = new NpcSceneGoldBoxUnit();\n                    }\n                }\n            }\n        }\n        else if (npcState.npc is NpcSceneBridalSedanSweet)\n        {\n            npcUnit = new BridalSedanSweetBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneWorldBossPreciousBox)\n        {\n            //var box = npcState.npc as NpcSceneWorldBossPreciousBox;\n            npcUnit = new WorldBossPreciousBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneGuildCompBox)\n        {\n            //var box = npcState.npc as NpcSceneGuildCompBox;\n            npcUnit = new NpcSceneGuildCompBoxUnit();\n        }\n        else if (npcState.npc is NpcCampWarPeach)\n        {\n            //var box = npcState.npc as NpcCampWarPeach;\n            npcUnit = new NpcSceneCampWarPeachBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneMazeBox)\n        {\n            npcUnit = new NpcSceneMazeBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneGrass)\n        {\n            npcUnit = new NpcSceneGrassUnit();\n        }\n        else if (npc is NpcSceneWorldGhostBox)\n        {\n            //世界Boss 宝箱做处理\n            //var box = npcState.npc as NpcSceneWorldGhostBox;\n            npcUnit = new NpcSceneWorldGhostBoxUnit();\n        }\n        else if (npcState.npc is NpcSceneBabyMonster)\n        {\n            var baby = npcState.npc as NpcSceneBabyMonster;\n\n            if (string.IsNullOrEmpty(baby.visibleGrade))\n            {\n                npcUnit = new MonsterUnit();\n            }\n            else\n            {\n                var lvs = baby.visibleGrade.Split(\',\');\n                if (lvs.Length == 2)\n                {\n                    int playerLv = ModelManager.Player.GetPlayerLevel();\n                    if (playerLv >= int.Parse(lvs[0]) && playerLv <= int.Parse(lvs[1]))\n                    {\n                        npcUnit = new MonsterUnit();\n                    }\n                }\n                else\n                {\n                    TipManager.AddTip(string.Format(\'NpcSceneBabyMonster.visibleGrade数据异常 ID={0}\', baby.id));\n                    npcUnit = new MonsterUnit();\n                }\n            }\n        }");
            return npcUnit;
        },
        RemoveNpc: function (npcUID){
            if (this._unitWaitingTrigger == null){
                return;
            }
            if (this.get__npcs().ContainsKey(npcUID)){
                if (Is(this.get__npcs().get_Item$$TKey(npcUID), TriggerNpcUnit.ctor)){
                    if (this._unitWaitingTrigger != null){
                        this._unitWaitingTrigger.RemoveTriggerUnit(As(this.get__npcs().get_Item$$TKey(npcUID), TriggerNpcUnit.ctor));
                    }
                    var npcstate = (As(this.get__npcs().get_Item$$TKey(npcUID), TriggerNpcUnit.ctor)).getNpcState();
                    if (npcstate != null){
                        var key = UnityEngine.Mathf.RoundToInt(npcstate.x).toString();
                        if (this.offsetDic != null){
                            if (this.offsetDic.ContainsKey(key)){
                                this.offsetDic.Remove(key);
                            }
                        }
                    }
                }
                this.get_npcViewDataManager().RemoveNpc(npcUID);
            }
        },
        HandlerMissionNpcStatus: function (npcStatus, needReverse){
            if (System.String.IsNullOrEmpty(npcStatus)){
                return;
            }
            var sceneId = WorldManager.get_Instance().GetModel().GetSceneId();
            var status = npcStatus.Split$$Char$Array([","]);
            for (var i = 0,len = status.length; i < len; i++){
                var npcs = status[i];
                var npcSplits = npcs.Split$$Char$Array([":"]);
                var npcId = System.Int32.Parse$$String(npcSplits[0]);
                var show = npcSplits[1] == "1";
                if (show){
                    var npc = DataCache.getDtoByCls$1(AppDto.Npc.ctor, npcId);
                    if (npc != null){
                        if (npc.sceneId == sceneId){
                            this.AddNpcUnit$$Npc(npc);
                        }
                    }
                }
                else {
                    this.RemoveNpc(npcId);
                }
            }
        },
        Tick: function (){
            if (NpcViewManager.EnableTrigger){
                if (this._unitWaitingTrigger != null){
                    this._unitWaitingTrigger.Tick();
                }
            }
        },
        TriggerTeleport: function (go){
            var npcUnit = this.GetNpcUnit$$GameObject(go);
            if (npcUnit != null){
                npcUnit.Trigger();
            }
        },
        GetNpcUnit$$Int64: function (npcUID){
            var unit = null;
            (function (){
                var $1 = $Ref(null, unit);
                var $res = this.get__npcs().TryGetValue(npcUID, $1);
                unit = $1.Value;
                return $res;
            }).call(this);
            return unit;
        },
        GetTangNpcUnit: function (npcID){
            var unit = null;
            var $it23 = this.get__npcs().get_Values().GetEnumerator();
            while ($it23.MoveNext()){
                var basenpc = $it23.get_Current();
                if (basenpc.getNpcState().npcId == npcID)
                    return basenpc;
            }
            return unit;
        },
        GetNpcUnit$$GameObject: function (go){
            var $it24 = this.get__npcs().get_Values().GetEnumerator();
            while ($it24.MoveNext()){
                var npcUnit = $it24.get_Current();
                if (UnityEngine.Object.op_Equality(npcUnit.GetUnitGO(), go)){
                    return npcUnit;
                }
            }
            return null;
        },
        GetNpcUnits: function (){
            return this.get__npcs();
        },
        RefinishMissionFlag: function (){
            if (BattleManager.get_Instance().IsInBattle()){
                return;
            }
            if (this.get__npcs() == null || this.get__npcs().get_Count() <= 0){
                return;
            }
            JSTimer.get_Instance().CancelCd("RefinishMissionFlag");
            JSTimer.get_Instance().SetupCoolDown("RefinishMissionFlag", 0.3, null, $CreateAnonymousDelegate(this, function (){
                this.DoRefinishMissionFlag();
            }), 0.1, false);
        },
        DoRefinishMissionFlag: function (){
            var $it25 = this.get__npcs().get_Values().GetEnumerator();
            while ($it25.MoveNext()){
                var tBaseNpcUnit = $it25.get_Current();
                var npc = tBaseNpcUnit.GetNpc();
                GameDebuger.TODO("if (npc is NpcSceneMonster == false && npc is NpcDoubleTeleport == false)");
                if (Is(npc, AppDto.NpcDoubleTeleport.ctor) == false){
                    tBaseNpcUnit.SetMissionNpcMark(false);
                }
            }
        },
        DoReFinishSignleMissionFlag: function (npc){
            if (this.get__npcs().ContainsKey(npc.id)){
                var tBaseNpcUnit = this.get__npcs().get_Item$$TKey(npc.id);
                var tNpc = tBaseNpcUnit.GetNpc();
                GameDebuger.TODO("if (tNpc is NpcSceneMonster == false && tNpc is NpcDoubleTeleport == false)");
                if (Is(tNpc, AppDto.NpcDoubleTeleport.ctor) == false){
                    tBaseNpcUnit.SetMissionNpcMark(true);
                }
            }
        },
        IsDynamicCommonNpc: function (id){
            var commonNpcStates = WorldManager.get_Instance().GetModel().get_NpcsDic();
            return null != commonNpcStates && commonNpcStates.ContainsKey(id);
            return false;
        },
        ResetWaitingTrigger: function (){
            if (this._unitWaitingTrigger != null){
                this._unitWaitingTrigger.Reset();
            }
        },
        overlapOffset: function (npcState){
            var xStr = UnityEngine.Mathf.RoundToInt(npcState.x).toString();
            var key = xStr;
            if (this.offsetDic.ContainsKey(key)){
                var distance = UnityEngine.Mathf.Abs$$Single(this.offsetDic.get_Item$$TKey(key).z - npcState.z);
                if (this.offsetDic.get_Item$$TKey(key).id != npcState.id && npcState.get_npc().type == AppDto.Npc.NpcType.Monster && distance < 3){
                    var isOffset = false;
                    key = UnityEngine.Mathf.RoundToInt(npcState.x + 1).toString();
                    if (SceneHelper.IsCanWalkScope(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(npcState.x + 1, 0, npcState.z)) && (this.offsetDic.ContainsKey(key) == false)){
                        npcState.x += 1;
                        isOffset = true;
                        this.offsetDic.set_Item$$TKey(key, npcState);
                    }
                    key = UnityEngine.Mathf.RoundToInt(npcState.x - 1).toString();
                    if (SceneHelper.IsCanWalkScope(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(npcState.x - 1, 0, npcState.z)) && this.offsetDic.ContainsKey(key) == false && isOffset == false){
                        npcState.x -= 1;
                        this.offsetDic.set_Item$$TKey(key, npcState);
                        isOffset = true;
                    }
                    key = UnityEngine.Mathf.RoundToInt(npcState.x + 2).toString();
                    if (SceneHelper.IsCanWalkScope(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(npcState.x + 2, 0, npcState.z)) && this.offsetDic.ContainsKey(key) == false && isOffset == false){
                        npcState.x += 2;
                        this.offsetDic.set_Item$$TKey(key, npcState);
                        isOffset = true;
                    }
                    key = UnityEngine.Mathf.RoundToInt(npcState.x - 2).toString();
                    if (SceneHelper.IsCanWalkScope(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(npcState.x - 2, 0, npcState.z)) && this.offsetDic.ContainsKey(key) == false && isOffset == false){
                        npcState.x -= 2;
                        this.offsetDic.set_Item$$TKey(key, npcState);
                        isOffset = true;
                    }
                    if (isOffset == false){
                        if (SceneHelper.IsCanWalkScope(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(npcState.x + 1, 0, npcState.z))){
                            npcState.x += 1;
                        }
                    }
                }
            }
            else {
                this.offsetDic.set_Item$$TKey(key, npcState);
            }
            return npcState;
        },
        Dispose: function (){
            JSTimer.get_Instance().CancelCd("RefinishMissionFlag");
            JSTimer.get_Instance().CancelTimer("NpcViewManager_QuadTree_Check");
            if (this._unitWaitingTrigger != null){
                this._unitWaitingTrigger.Destroy();
                this._unitWaitingTrigger = null;
            }
            if (this.offsetDic != null){
                this.offsetDic.Clear();
            }
            GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerGradeUpdate, CanSeePreciousBox);");
            this._isInit = false;
            this.get_npcViewDataManager().Dispose();
        }
    }
};
JsTypes.push(NpcViewManager);
var BaseNpcInfo = {
    fullname: "BaseNpcInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = null;
            this._npcStateDto = null;
            this.playerDressInfo = null;
            this.modelId = 0;
            this.wpmodel = 0;
            this.mutateColor = null;
            this.texture = 0;
            this.mutateTexture = 0;
            this.ornamentId = 0;
            this.scale = 1;
            this.submitIndex = -1 /* -1 */;
            this.rideLevel = 0;
            System.Object.ctor.call(this);
        },
        npcStateDto$$: "AppDto.SceneNpcDto",
        get_npcStateDto: function (){
            return this._npcStateDto;
        },
        set_npcStateDto: function (value){
            this._npcStateDto = value;
            GameDebuger.TODO("if (value is WorldBossNpcStateDto)\n            {\n                string npcName = \";\n\n                WorldBossNpcStateDto bossNpc = _npcStateDto as WorldBossNpcStateDto;\n                if (bossNpc.times == 0)\n                {\n                    npcName = \'{0}{1}（{3}星）\';\n                }\n                else\n                {\n                    npcName = \'{0}{1}（{3}星）\';\n                }\n\n                string prefix = \'\';\n                List<WorldBossRankConfig> rankConfig = DataCache.getArrayByCls<WorldBossRankConfig>();\n                for (int index = 0; index < rankConfig.Count; index++)\n                {\n                    if (rankConfig[index].minRank <= bossNpc.rank && bossNpc.rank <= rankConfig[index].maxRank)\n                    {\n                        prefix = rankConfig[index].prefix;\n                        break;\n                    }\n                }\n                name = string.Format(npcName, prefix, _npcStateDto.npc.name, bossNpc.rank);\n            }");
        },
        AdjustAppearance: function (){
            this.scale = 1;
            if (System.String.IsNullOrEmpty(this.name)){
                this.name = this._npcStateDto.get_npc().name;
            }
            if (this.playerDressInfo != null && this.playerDressInfo.charactorId != 0){
                if (this.playerDressInfo.transformModelId > 0){
                    this.modelId = this.playerDressInfo.transformModelId;
                    this.texture = this.modelId;
                    this.wpmodel = 0;
                    this.mutateTexture = 0;
                    this.mutateColor = "";
                    this.ornamentId = 0;
                }
                else {
                    var generalCharactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, this.playerDressInfo.charactorId);
                    this.modelId = generalCharactor.modelId;
                    this.texture = generalCharactor.texture;
                    this.wpmodel = this.playerDressInfo.wpmodel;
                    this.mutateColor = PlayerModel.GetDyeColorParams$$PlayerDressInfo(this.playerDressInfo);
                }
            }
            else {
                if (this.get_npcStateDto().get_npc() != null){
                    this.scale = this.get_npcStateDto().get_npc().scale;
                }
                GameDebuger.TODO("NpcSceneMonster sceneMonster = npcStateDto.npc as NpcSceneMonster;\n            if (sceneMonster != null && sceneMonster.npcAppearance != null)\n            {\n                modelId = sceneMonster.npcAppearance.modelId;\n                mutateColor = sceneMonster.npcAppearance.mutateColor;\n                wpmodel = sceneMonster.npcAppearance.wpmodel;\n                mutateTexture = sceneMonster.npcAppearance.mutateTexture;\n                ornamentId = sceneMonster.npcAppearance.ornamentId;\n                scale = sceneMonster.npcAppearance.scale;\n                texture = sceneMonster.modelId;\n            }\n            else");
                this.modelId = this.get_npcStateDto().get_npc().modelId;
                this.mutateColor = this.get_npcStateDto().get_npc().mutateColor;
                this.mutateTexture = this.get_npcStateDto().get_npc().mutateTexture;
                this.ornamentId = this.get_npcStateDto().get_npc().ornamentId;
                this.texture = this.modelId;
                GameDebuger.TODO("NpcVariable npcVariable = npcStateDto.npc as NpcVariable;\n                if (npcVariable != null)\n                {\n                    wpmodel = npcVariable.wpmodel;\n                }");
                GameDebuger.TODO("NpcGeneral npcGeneral = npcStateDto.npc as NpcGeneral;\n                if (npcGeneral != null)\n                {\n                    wpmodel = npcGeneral.wpmodel;\n                }");
            }
            GameDebuger.TODO("else if (npcAppearance != null)\n        {\n            modelId = npcAppearance.modelId;\n            mutateColor = npcAppearance.mutateColor;\n            wpmodel = npcAppearance.wpmodel;\n            mutateTexture = npcAppearance.mutateTexture;\n            ornamentId = npcAppearance.ornamentId;\n            texture = modelId;\n            scale = npcAppearance.scale;\n        }");
            var model = DataCache.getDtoByCls$1(AppDto.Model.ctor, this.modelId);
            if (this.scale == 0){
                this.scale = 1;
            }
            if (model != null){
                var modelScale = model.scale == 0 ? 1 : model.scale;
                this.scale = this.scale * modelScale;
            }
        }
    }
};
JsTypes.push(BaseNpcInfo);
var BaseNpcUnit = {
    fullname: "BaseNpcUnit",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IQuadObject$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._unitGo = null;
            this._unitTrans = null;
            this._boxCollider = null;
            this.titleHud = null;
            this.headHud = null;
            this._modelDisplayer = null;
            this._isModelActive = true;
            this._master = null;
            this._acceptSignGO = null;
            this._completeSignGO = null;
            this._changeMissionMark = false;
            this._waitReMarkSta = false;
            this._tMissionSignRoot = null;
            this.BoundsChanged = null;
            this._boundsChange = null;
            this.__npcInfo = null;
            this._selfActive = false;
            System.Object.ctor.call(this);
        },
        _npcInfo$$: "BaseNpcInfo",
        get__npcInfo: function (){
            return this.__npcInfo;
        },
        set__npcInfo: function (value){
            this.__npcInfo = value;
        },
        selfActive$$: "System.Boolean",
        get_selfActive: function (){
            return this._selfActive;
        },
        set_selfActive: function (value){
            this._selfActive = value;
        },
        Init: function (npcInfo){
            this.set__npcInfo(npcInfo);
            this.set_selfActive(true);
        },
        Setup: function (master){
            this._master = master;
            this._unitGo = this._master.get_npcViewPool().SpawnPlayerView().get_gameObject();
            this._unitGo.set_name(System.String.Format$$String$$Object$$Object$$Object("{0}_{1}_{2}", this.get__npcInfo().get_npcStateDto().get_npc().GetType().get_Name(), this.get__npcInfo().get_npcStateDto().get_npc().id, this.GetNpcModel()));
            this._unitTrans = this._unitGo.get_transform();
            this._isModelActive = true;
            this._modelDisplayer = new ModelDisplayer.ctor(this._unitGo, $CreateDelegate(this, this.OnLoadModelFinish), false);
            this.SetUnitActive(this.get_selfActive());
        },
        Load: function (){
            this.UpdateNpcPosition();
            var checker = GameObjectExt.GetMissingComponent$1(ModelVisibleChecker.ctor, this._unitGo);
            checker.Setup($CreateDelegate(this, this.OnVisible), $CreateDelegate(this, this.OnInvisible), 2);
            this.SetUnitActive(this.get_selfActive());
        },
        OnVisible: function (){
            if (this._modelDisplayer != null){
                var lookInfo = ModelStyleInfo.ToInfo$$BaseNpcInfo(this.get__npcInfo());
                this._modelDisplayer.SetLookInfo(lookInfo);
            }
        },
        OnInvisible: function (){
            if (this._modelDisplayer != null)
                this._modelDisplayer.Destory();
            this.CleanUpHUDView();
        },
        OnLoadModelFinish: function (){
            if (this.NeedTrigger()){
                this.SetupBoxCollider();
                if (!(Is(this, DoubleTeleportUnit.ctor) || Is(this, NpcSceneTeleportUnit.ctor))){
                    if (!(Is(this, PreciousBoxUnit.ctor))){
                        this.SetMissionNpcMark(true);
                        this._waitReMarkSta = false;
                    }
                }
            }
            if (this._waitReMarkSta){
                this.SetMissionNpcMark(false);
            }
            this.AfterInit();
            this.CheckInWeddingMode();
            this.TrySetRideAnimation();
        },
        GetNpc: function (){
            return this.get__npcInfo().get_npcStateDto().get_npc();
        },
        GetNpcUID: function (){
            return this.get__npcInfo().get_npcStateDto().id;
        },
        getNpcState: function (){
            return this.get__npcInfo().get_npcStateDto();
        },
        GetUnitGO: function (){
            return this._unitGo;
        },
        GetNpcCollider: function (){
            return this._boxCollider;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.75, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 1, 1));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        GetNpcModel: function (){
            return this.get__npcInfo().modelId;
        },
        GetNpcScale: function (){
            if (this.get__npcInfo().scale == 0){
                return 1;
            }
            else {
                return this.get__npcInfo().scale;
            }
        },
        DestroyMissionMark: function (){
            if (UnityEngine.Object.op_Inequality(this._acceptSignGO, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(this._acceptSignGO);
                this._acceptSignGO = null;
            }
            if (UnityEngine.Object.op_Inequality(this._completeSignGO, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(this._completeSignGO);
                this._completeSignGO = null;
            }
        },
        SetMissionNpcMark: function (resetChangeSta){
            this._waitReMarkSta = this._modelDisplayer != null ? !this._modelDisplayer.IsAnimatorReady() : true;
            if (this._waitReMarkSta){
                return;
            }
            var tNpc = this.get__npcInfo().get_npcStateDto().get_npc();
            GameDebuger.TODO("\nMissionNpcModel.NpcMissionMark tNpcMissionMark = ModelManager.MissionNpc.GetNpcMissionMarkByNpcInternal(tNpc, _npcInfo.submitIndex);\n        _changeMissionMark = resetChangeSta ? true : _lastNpcMissionMark != tNpcMissionMark;\n\n        if (_changeMissionMark)\n        {\n            _lastNpcMissionMark = tNpcMissionMark;\n\n            if (tNpcMissionMark == MissionNpcModel.NpcMissionMark.Nothing)\n            {\n                SetAcceptMissionSign(false);\n                SetSubmitMissionSign(false, false);\n            }\n            else if (tNpcMissionMark == MissionNpcModel.NpcMissionMark.Accept)\n            {\n                SetAcceptMissionSign(true);\n                SetSubmitMissionSign(false, false);\n            }\n            else if (tNpcMissionMark == MissionNpcModel.NpcMissionMark.Process)\n            {\n                //  进行中任务 | 灰色\n                SetAcceptMissionSign(false);\n                SetSubmitMissionSign(true, true);\n            }\n            else if (tNpcMissionMark == MissionNpcModel.NpcMissionMark.Submit)\n            {\n                // 可提交任务 | 金黄色\n                SetAcceptMissionSign(false);\n                SetSubmitMissionSign(true, false);\n            }\n            else\n            {\n                SetAcceptMissionSign(false);\n                SetSubmitMissionSign(false, false);\n            }\n\n            SetNPCMissionFlag(false);\n        }        \n");
        },
        SetNPCMissionFlag: function (refreshMark){
            if (this.headHud == null){
                return;
            }
            var active = false;
            var mainMission = false;
            if (this._changeMissionMark || refreshMark){
                GameDebuger.TODO("\n   if (_lastNpcMissionMark == MissionNpcModel.NpcMissionMark.MainAccept\n                || _lastNpcMissionMark == MissionNpcModel.NpcMissionMark.MainProcess\n                || _lastNpcMissionMark == MissionNpcModel.NpcMissionMark.MainSubmit)\n            {\n                active = true;\n                mainMission = true;\n            }\n            else if (_lastNpcMissionMark == MissionNpcModel.NpcMissionMark.Battle)\n            {\n                active = true;\n            }            \n");
            }
            this.headHud.get_headHUDView().missionTypeSprite.set_enabled(active);
            if (active){
                this.headHud.get_headHUDView().missionTypeSprite.set_spriteName(mainMission ? "mission_ThreadOfNPC" : "mission_BattleOfNPC");
            }
        },
        SetAcceptMissionSign: function (active){
            if (UnityEngine.Object.op_Equality(this._acceptSignGO, null)){
                if (active && this._modelDisplayer.IsAnimatorReady()){
                    if (UnityEngine.Object.op_Equality(this._tMissionSignRoot, null)){
                        this._tMissionSignRoot = this._modelDisplayer.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
                    }
                    if (UnityEngine.Object.op_Inequality(this._tMissionSignRoot, null)){
                        AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync("acceptSign" /* PathHelper.ACCEPTMISSION_PREFAB_PATH */, $CreateAnonymousDelegate(this, function (go){
                            if (UnityEngine.Object.op_Equality(go, null) || UnityEngine.Object.op_Equality(this._tMissionSignRoot, null))
                                return;
                            var missionSignGO = GameObjectExt.AddPoolChild(this._tMissionSignRoot.get_gameObject(), go, 0, 0, 0);
                            missionSignGO.get_transform().set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1.8, 1.8, 1.8));
                            GameObjectExt.GetMissingComponent$1(AutoRotation.ctor, missionSignGO);
                            this._acceptSignGO = missionSignGO;
                        }), null, 89);
                    }
                }
            }
            else {
                this._acceptSignGO.SetActive(active);
            }
        },
        SetSubmitMissionSign: function (active, isGrey){
            if (UnityEngine.Object.op_Equality(this._completeSignGO, null)){
                if (active && this._modelDisplayer.IsAnimatorReady()){
                    if (UnityEngine.Object.op_Equality(this._tMissionSignRoot, null)){
                        this._tMissionSignRoot = this._modelDisplayer.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
                    }
                    if (UnityEngine.Object.op_Inequality(this._tMissionSignRoot, null)){
                        AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync("completeSign" /* PathHelper.SUBMITMISSION_PREFAB_PATH */, $CreateAnonymousDelegate(this, function (go){
                            if (UnityEngine.Object.op_Equality(go, null) || UnityEngine.Object.op_Equality(this._tMissionSignRoot, null))
                                return;
                            var missionSignGO = GameObjectExt.AddPoolChild(this._tMissionSignRoot.get_gameObject(), go, 0, 0, 0);
                            missionSignGO.get_transform().set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1.8, 1.8, 1.8));
                            GameObjectExt.GetMissingComponent$1(AutoRotation.ctor, missionSignGO);
                            this._completeSignGO = missionSignGO;
                            var renderer = this._completeSignGO.get_transform().Find("Dummy001/Box01").GetComponent$1(UnityEngine.SkinnedMeshRenderer.ctor);
                            if (UnityEngine.Object.op_Inequality(renderer, null)){
                                var mainColor = UnityEngine.Color32.op_Implicit$$Color32(isGrey ? new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(114, 114, 114, 255) : new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(226, 170, 0, 255));
                                var rimColor = UnityEngine.Color32.op_Implicit$$Color32(isGrey ? new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(156, 156, 156, 255) : new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(255, 144, 4, 255));
                                renderer.get_material().set_color(mainColor);
                                renderer.get_material().SetColor$$String$$Color("_RimColor", rimColor);
                            }
                        }), null, 89);
                    }
                }
            }
            else {
                this._completeSignGO.get_gameObject().SetActive(active);
                var renderer = this._completeSignGO.get_transform().Find("Dummy001/Box01").GetComponent$1(UnityEngine.SkinnedMeshRenderer.ctor);
                if (UnityEngine.Object.op_Inequality(renderer, null)){
                    var mainColor = UnityEngine.Color32.op_Implicit$$Color32(isGrey ? new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(114, 114, 114, 255) : new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(226, 170, 0, 255));
                    var rimColor = UnityEngine.Color32.op_Implicit$$Color32(isGrey ? new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(156, 156, 156, 255) : new UnityEngine.Color32.ctor$$Byte$$Byte$$Byte$$Byte(255, 144, 4, 255));
                    renderer.get_material().set_color(mainColor);
                    renderer.get_material().SetColor$$String$$Color("_RimColor", rimColor);
                }
            }
        },
        DoAction: function (action, checkSameAnim){
            this._modelDisplayer.PlayAnimation(action, false, checkSameAnim);
        },
        UpdateNpc: function (npcState){
            this.get__npcInfo().set_npcStateDto(npcState);
            this.UpdateNpcPosition();
        },
        UpdateNpcPosition: function (){
            if (UnityEngine.Object.op_Inequality(this._unitGo, null)){
                var position = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.get__npcInfo().get_npcStateDto().x, 0, this.get__npcInfo().get_npcStateDto().z), UnityEngine.Vector3.get_zero());
                this.SetPos(position);
                this._unitTrans.set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, this.get__npcInfo().get_npcStateDto().get_npc().rotateY, 0));
            }
        },
        SetPos: function (pos){
            if (UnityEngine.Object.op_Inequality(this._unitGo, null)){
                this._unitTrans.set_position(pos);
                if (this._boundsChange != null)
                    this._boundsChange(this);
            }
        },
        GetPos: function (){
            if (UnityEngine.Object.op_Inequality(this._unitGo, null))
                return this._unitGo.get_transform().get_position();
            else
                return SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.get__npcInfo().get_npcStateDto().x, 0, this.get__npcInfo().get_npcStateDto().z), UnityEngine.Vector3.get_zero());
        },
        NeedTrigger: function (){
            return false;
        },
        AfterInit: function (){
        },
        Trigger: function (){
        },
        Destroy: function (){
            this._tMissionSignRoot = null;
            this.DestroyMissionMark();
            this.CleanUpHUDView();
            if (this._modelDisplayer != null){
                this._modelDisplayer.Destory();
                this._modelDisplayer = null;
            }
            this._boxCollider = null;
            if (UnityEngine.Object.op_Inequality(this._unitGo, null)){
                GameDebuger.TODO("_master.npcViewPool.DespawnPlayerView(_unitGo);");
                this._unitGo = null;
                this._unitTrans = null;
            }
        },
        CleanUpHUDView: function (){
            if (this.titleHud != null){
                this.titleHud.Despawn();
                this.titleHud = null;
            }
            if (this.headHud != null){
                this.headHud.Despawn();
                this.headHud = null;
            }
        },
        SetUnitActive: function (active){
            this.set_selfActive(active);
            if (UnityEngine.Object.op_Inequality(this._unitGo, null))
                this._unitGo.SetActive(active);
            this.SetHUDActive(active);
        },
        SetModelActive: function (active){
            this._isModelActive = active;
            if (this._modelDisplayer != null)
                this._modelDisplayer.SetActive(active);
            this.SetHUDActive(active);
        },
        SetHUDActive: function (active){
            if (this.headHud != null){
                this.headHud.SetHeadHudActive(active);
            }
            if (this.titleHud != null){
                this.titleHud.SetTitleHudActive(active);
            }
        },
        IsVisible: function (){
            return this.get_selfActive();
        },
        CheckInWeddingMode: function (){
            GameDebuger.TODO("if (ModelManager.Marry.WeddingInfo != null)\n        {\n            if (_npcInfo.npcStateDto.id == ProxyDialogueModule.Matchmaker_NPC_ID)\n            {\n                if (_modelDisplayer != null)\n                    _modelDisplayer.SetActive(false);\n                SetHUDActive(false);\n            }\n        }        \n");
        },
        CheckHaveRide: function (){
            GameDebuger.TODO("if (_npcInfo.rideMountNotify != null && _npcInfo.rideMountNotify.mountId > 0\n            && _npcInfo.playerDressInfo != null && _npcInfo.playerDressInfo.transformModelId == 0)\n        {\n            return true;\n        }");
            return false;
        },
        TrySetRideAnimation: function (){
            if (this.CheckHaveRide()){
                this._modelDisplayer.PlayAnimation("idle" /* ModelHelper.Anim_idle */, false, false);
                this.UpdateNpcPosition();
            }
        },
        add__boundsChange: function (value){
            this._boundsChange = $CombineDelegates(this._boundsChange, value);
        },
        remove__boundsChange: function (value){
            this._boundsChange = $RemoveDelegate(this._boundsChange, value);
        },
        GetHashCode: function (){
            return this.GetNpcUID().GetHashCode();
        }
    }
};
JsTypes.push(BaseNpcUnit);
var TriggerNpcUnit = {
    fullname: "TriggerNpcUnit",
    baseTypeName: "BaseNpcUnit",
    staticDefinition: {
        cctor: function (){
            TriggerNpcUnit.SOUND_LOCKED = false;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._heroView = null;
            this._isRunning = false;
            this._mAgent = null;
            this.enabled = false;
            this.touch = false;
            this.waitingTrigger = false;
            this.walk = false;
            BaseNpcUnit.ctor.call(this);
            this.Reset();
        },
        Reset: function (){
            this.enabled = true;
            this.waitingTrigger = false;
            this.touch = false;
        },
        SetupHeroView: function (heroView){
            this._heroView = heroView;
        },
        NeedClose: function (){
            return false;
        },
        AfterInit: function (){
            BaseNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitNpcAnimation();
        },
        InitPlayerName: function (){
            var npc = this.get__npcInfo().get_npcStateDto().get_npc();
            var mountShadow = this._modelDisplayer.GetMountingPoint("Mount_Shadow" /* ModelHelper.Mount_shadow */);
            if (UnityEngine.Object.op_Inequality(mountShadow, null)){
                if (this.titleHud == null)
                    this.titleHud = new CharacterTitleHud.ctor(mountShadow, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.7 /* -0.7f */, 0), "NpcTitleHUD_" + npc.id);
                else
                    this.titleHud.ResetHudFollower(mountShadow, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.7 /* -0.7f */, 0), "NpcTitleHUD_" + npc.id);
            }
            var mountHUD = this._modelDisplayer.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
            if (UnityEngine.Object.op_Inequality(mountHUD, null)){
                if (this.headHud == null)
                    this.headHud = new CharacterHeadHud.ctor(mountHUD, UnityEngine.Vector3.get_zero(), "NpcHeadHUD_" + npc.id);
                else
                    this.headHud.ResetHudFollower(mountHUD, UnityEngine.Vector3.get_zero(), "NpcHeadHUD_" + npc.id);
                this.headHud.get_headHUDView().runFlagSpriteAnimation.SetEnable(false);
                this.headHud.get_headHUDView().teamFlagSpriteAnimation.SetEnable(false);
                this.headHud.get_headHUDView().teamInfo_UISprite.set_enabled(false);
                this.headHud.get_headHUDView().escortFlag_UISprite.set_enabled(false);
                this.SetNPCMissionFlag(true);
                this.SetNPCFightFlag(this.get__npcInfo().get_npcStateDto().battleId > 0);
            }
            this.UpdatePlayerName();
            this.SetModelActive(this._isModelActive);
        },
        UpdatePlayerName: function (){
            if (this.titleHud != null){
                var npc = this.get__npcInfo().get_npcStateDto().get_npc();
                var appellationStr = "";
                GameDebuger.TODO("if (npc is NpcGeneral)\n            {\n                if (!string.IsNullOrEmpty((npc as NpcGeneral).title))\n                {\n                    appellationStr = (npc as NpcGeneral).title.WrapColor(ColorConstant.Color_Title_Str) + \'\\n\';\n                }\n            }");
                GameDebuger.TODO("else if (npc is NpcVariable)\n            {\n                if (!string.IsNullOrEmpty((npc as NpcVariable).title))\n                {\n                    appellationStr = (npc as NpcVariable).title.WrapColor(ColorConstant.Color_Title_Str) + \'\\n\';\n                }\n            }");
                var npcName = this.get__npcInfo().name;
                GameDebuger.TODO("if (_npcInfo.npcStateDto.npc is NpcSceneWorldBossMonster)\n            {\n                if (_npcInfo.npcStateDto.times == 0)\n                {\n                    npcName = \'{0}{1}（{2}星）\';\n                }\n                else\n                {\n                    npcName = \'{0}{1}分身（{2}星）\';\n                }\n\n                string prefix = \'\';\n                var rankConfig = DataCache.getArrayByCls<WorldBossRankConfig>();\n            if (rankConfig != null)\n            {\n            for (int index = 0; index < rankConfig.Count; index++)\n            {\n            if (rankConfig[index].minRank <= _npcInfo.npcStateDto.rank &&\n            _npcInfo.npcStateDto.rank <= rankConfig[index].maxRank)\n            {\n            prefix = rankConfig[index].prefix;\n            break;\n            }\n            }                   \n            }\n\n                npcName = string.Format(npcName, prefix, _npcInfo.npcStateDto.npc.name, _npcInfo.npcStateDto.rank);\n            }");
                this.titleHud.get_titleHUDView().nameLbl.set_text("[b]" + appellationStr + AppStringHelper.WrapColor$$String$$Color(npcName, ColorConstant.Color_Battle_Enemy_Name));
            }
        },
        SetNPCFightFlag: function (active){
            if (this.headHud != null){
                this.headHud.get_headHUDView().fightFlagSpriteAnimation.SetEnable(active);
            }
        },
        Trigger: function (){
            var effpath = GameEffectConst.GetGameEffectPath("game_eff_2017" /* GameEffectConst.Effect_CharactorClick */);
            if (UnityEngine.Object.op_Equality(this._unitTrans, null))
                OneShotSceneEffect.Begin(effpath, this.GetPos(), 2, 1, null);
            else
                OneShotSceneEffect.BeginFollowEffect(effpath, this._unitTrans, 2, 1, null);
            if (this.enabled == false){
                return;
            }
            if (this.touch){
                this.DoTrigger();
                return;
            }
            var distance = UnityEngine.Vector3.Distance(this._heroView.get_cachedTransform().get_position(), this.GetPos());
            if (distance < this.CheckDistance()){
                this.DoTrigger();
            }
            else {
                this._heroView.WalkToPoint(this.GetPos(), null, true);
                this.waitingTrigger = true;
            }
        },
        CheckDistance: function (){
            return 2;
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            this.PlayNpcSound();
            this.FaceToHero();
            ModelManager.get_Player().StopAutoNav();
        },
        PlayNpcSound: function (){
            if (!AudioManager.get_Instance().get_ToggleDubbing()){
                return;
            }
            GameDebuger.TODO("var npcGeneral = GetNpc() as NpcGeneral;\n        if (npcGeneral == null) return;\n\n        int soundId = npcGeneral.soundId;\n        if (soundId == 0)\n        {\n            //soundId为0则表示此NPC无需配音\n            return;\n        }\n        string objName = \'AudioSound:sound_npc_\' + soundId;\n        if (_unitTrans.FindChild(objName) == null && SOUND_LOCKED == false)\n        {\n            string soundName = \'sound_npc_\' + soundId;\n            ResourcePoolManager.Instance.LoadAudioClip(soundName, asset =>\n            {\n                if (asset != null)\n                {\n                    var audioClip = asset as AudioClip;\n                    var go = new GameObject(objName);\n                    go.transform.parent = _unitTrans;\n\n                    // create the source\n                    var source = go.AddComponent<AudioSource>();\n                    source.clip = audioClip;\n                    source.volume = AudioManager.Instance.DubbingVolume;\n                    source.loop = false;\n                    source.Play();\n                    Object.Destroy(go, audioClip.length);\n                    SOUND_LOCKED = true;\n\n                    JSTimer.Instance.SetupCoolDown(\'soundUnlockTimer\', audioClip.length, null,\n                        delegate { SOUND_LOCKED = false; });\n                }\n                else\n                {\n                    GameDebuger.Log(\'Can not find the sound of \' + soundName);\n                }\n            });\n        }");
        },
        FaceToHero: function (){
            var position = this._heroView.get_cachedTransform().get_position();
            this._unitTrans.LookAt$$Vector3(position);
            this._unitTrans.set_eulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, this._unitTrans.get_eulerAngles().y, 0));
        },
        WalkToPoint: function (targetPoint){
            GameDebuger.TODO("if (_unitGo == null || touch || waitingTrigger || ProxyManager.Dialogue.GetDialogueNpcId() == GetNpcUID())\n        {\n            return;\n        }");
            if (this._unitGo.get_activeInHierarchy()){
                if (UnityEngine.Object.op_Equality(this._mAgent, null)){
                    this._mAgent = GameObjectExt.GetMissingComponent$1(UnityEngine.NavMeshAgent.ctor, this._unitGo);
                    this._mAgent.set_radius(0.4);
                    this._mAgent.set_speed(4 /* ModelHelper.DefaultModelSpeed */);
                    this._mAgent.set_acceleration(1000);
                    this._mAgent.set_angularSpeed(1000);
                    this._mAgent.set_obstacleAvoidanceType(0);
                    this._mAgent.set_autoTraverseOffMeshLink(false);
                    this._mAgent.set_autoRepath(false);
                }
                this._mAgent.set_enabled(true);
                this._mAgent.SetDestination(targetPoint);
                this.walk = true;
                this._master.get_npcViewDataManager().AddToAlwaysShow(this);
            }
            else {
                this.SetPos(targetPoint);
            }
        },
        UpdateWalk: function (){
            if (UnityEngine.Object.op_Inequality(this._mAgent, null)){
                if (this._mAgent.get_enabled()){
                    if (this._mAgent.get_hasPath()){
                        this.PlayRunAnimation();
                    }
                    else {
                        this.PlayIdleAnimation();
                    }
                }
                else {
                    this.PlayIdleAnimation();
                }
            }
        },
        InitNpcAnimation: function (){
            this._isRunning = false;
            this.UpdateWalk();
        },
        PlayRunAnimation: function (){
            if (!this._isRunning){
                this.DoAction("run" /* ModelHelper.Anim_run */, false);
                this._isRunning = true;
            }
        },
        PlayIdleAnimation: function (){
            if (this._isRunning){
                this.DoAction("idle" /* ModelHelper.Anim_idle */, false);
                this._isRunning = false;
            }
        },
        StopAndIdle: function (){
            this._isRunning = false;
            this.walk = false;
        },
        SetUnitActive: function (active){
            this.PlayIdleAnimation();
            if (UnityEngine.Object.op_Inequality(this._mAgent, null)){
                if (this._unitGo.get_activeInHierarchy()){
                    if (UnityEngine.Object.op_Inequality(this._mAgent, null) && this._mAgent.get_isActiveAndEnabled() && this._mAgent.get_hasPath()){
                        this._mAgent.ResetPath();
                        this._mAgent.set_enabled(false);
                    }
                }
            }
            this.StopAndIdle();
            BaseNpcUnit.commonPrototype.SetUnitActive.call(this, active);
        },
        Destroy: function (){
            BaseNpcUnit.commonPrototype.Destroy.call(this);
            this.StopAndIdle();
            TriggerNpcUnit.SOUND_LOCKED = false;
            JSTimer.get_Instance().CancelCd("soundUnlockTimer");
            if (UnityEngine.Object.op_Inequality(this._mAgent, null)){
                GameObjectExt.DestroyLog(this._mAgent);
                this._mAgent = null;
            }
        }
    }
};
JsTypes.push(TriggerNpcUnit);
var UnitWaitingTrigger = {
    fullname: "UnitWaitingTrigger",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._heroView = null;
            this._units = null;
            System.Object.ctor.call(this);
            this._units = new System.Collections.Generic.List$1.ctor(TriggerNpcUnit.ctor);
        },
        SetHeroPlayer: function (heroView){
            this._heroView = heroView;
        },
        AddTriggerUnit: function (unit){
            if (this._units == null || unit == null)
                return;
            this._units.Add(unit);
            unit.SetupHeroView(this._heroView);
        },
        RemoveTriggerUnit: function (unit){
            if (this._units == null || unit == null)
                return;
            this._units.Remove(unit);
        },
        Tick: function (){
            for (var i = 0,len = this._units.get_Count(); i < len; i++){
                var unit = this._units.get_Item$$Int32(i);
                if (unit.enabled == false){
                    continue;
                }
                if (unit.touch){
                    unit.Trigger();
                    if (unit.enabled == false){
                        this.Stop();
                    }
                    break;
                }
                if (unit.waitingTrigger){
                    var direction = UnityEngine.Vector3.op_Subtraction(unit.GetPos(), this._heroView.get_cachedTransform().get_position());
                    if (direction.get_magnitude() < 2){
                        if (unit.NeedClose() == false){
                            this._heroView.StopAndIdle();
                        }
                        unit.touch = true;
                    }
                }
                if (unit.walk){
                    unit.UpdateWalk();
                }
            }
        },
        Stop: function (){
        },
        Play: function (){
            for (var i = 0,len = this._units.get_Count(); i < len; i++){
                var unit = this._units.get_Item$$Int32(i);
                unit.Reset();
            }
        },
        Reset: function (){
            for (var i = 0,len = this._units.get_Count(); i < len; i++){
                var unit = this._units.get_Item$$Int32(i);
                unit.Reset();
            }
        },
        Destroy: function (){
            this.Stop();
            this._heroView = null;
        }
    }
};
JsTypes.push(UnitWaitingTrigger);
var BridalSedanBoxUnit = {
    fullname: "BridalSedanBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
            BridalSedanBoxUnit.PickupSedanBox = "pickupSedanBox";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            ModelManager.get_Player().StopAutoNav();
            this.ShowOpening();
        },
        ShowOpening: function (){
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \", CancelOpen);\n        JSTimer.Instance.SetupCoolDown(PickupSedanBox, 1f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 1f); },\n            () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(\'慢了一步，宝箱已经被别人取走了\');\n                    return;\n                }\n                ModelManager.SceneMonster.NpcFunctionToEnterBattle(_npcInfo.npcStateDto);\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("pickupSedanBox" /* PickupSedanBox */);
            GameDebuger.TODO("ServiceRequestAction.requestServer(AppServices.SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.25, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.6, 0.8));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(BridalSedanBoxUnit);
var BridalSedanPetBoxUnit = {
    fullname: "BridalSedanPetBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
            BridalSedanPetBoxUnit.PickupPetBoxs = "pickupPetBoxs";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            ModelManager.get_Player().StopAutoNav();
            this.ShowOpening();
        },
        ShowOpening: function (){
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'捡钱中...\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(PickupPetBoxs, 1f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 1f); },\n            () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(\'噢噢！铜币不见了！\');\n                    return;\n                }\n                ModelManager.SceneMonster.NpcFunctionToEnterBattle(_npcInfo.npcStateDto);\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("pickupPetBoxs" /* PickupPetBoxs */);
            GameDebuger.TODO("ServiceRequestAction.requestServer(AppServices.SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.25, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.6, 0.8));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(BridalSedanPetBoxUnit);
var BridalSedanSweetBoxUnit = {
    fullname: "BridalSedanSweetBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
            BridalSedanSweetBoxUnit.PickupCandies = "pickupCandies";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            ModelManager.get_Player().StopAutoNav();
            this.ShowOpening();
        },
        ShowOpening: function (){
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'拾取喜糖中...\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(PickupCandies, 1f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 1f); },\n            () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(\'手太慢了，没抢到\');\n                    return;\n                }\n                ModelManager.SceneMonster.NpcFunctionToEnterBattle(_npcInfo.npcStateDto);\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("pickupCandies" /* PickupCandies */);
            GameDebuger.TODO("ServiceRequestAction.requestServer(AppServices.SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.25, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.8, 0.8));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(BridalSedanSweetBoxUnit);
var GeneralUnit = {
    fullname: "GeneralUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        },
        GetAnimateRandomTime: function (){
            return UnityEngine.Random.Range$$Single$$Single(10, 20);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._animateTimer = null;
            TriggerNpcUnit.ctor.call(this);
        },
        NeedTrigger: function (){
            return true;
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
            if (this.IsMainCharactorModel() == false){
                this._animateTimer = JSTimer.get_Instance().SetupTimer("GeneralUnit_" + this._unitGo.GetInstanceID(), $CreateDelegate(this, this.NPCDoAction), GeneralUnit.GetAnimateRandomTime(), false);
            }
        },
        IsMainCharactorModel: function (){
            return this.get__npcInfo().get_npcStateDto().get_npc().modelId < 100;
        },
        DoTrigger: function (){
            TriggerNpcUnit.commonPrototype.DoTrigger.call(this);
            GameDebuger.TODO("if (NewBieGuideManager.Instance.IsForceGuideRunning())\n        {\n            GameDebuger.LogError(\'存在强制类型的引导， 所以不能跟NPC对话\');\n            return;\n        }\n\n        var npcGeneral = _npcInfo.npcStateDto.npc as NpcGeneral;\n        //必须要显示对话框\n        if (!npcGeneral.needDialog && npcGeneral.dialogFunctionIds.Count == 1)\n        {\n            var missionOptionList = ModelManager.MissionNpc.GetMissionOptionListByNpcInternal(npcGeneral);\n            if (missionOptionList.Count == 0)\n            {\n                OpenDefaultDialogueFunction();\n                return;\n            }\n            if (missionOptionList.Count == 1)\n            {\n                if (missionOptionList[0].isExist)\n                {\n                    var sumbitDto = MissionHelper.GetSubmitDtoByMission(missionOptionList[0].mission);\n                    if ((sumbitDto is CollectionItemSubmitDto &&\n                         (sumbitDto as CollectionItemSubmitDto).acceptNpc.npc.id == npcGeneral.id)\n                        ||\n                        (sumbitDto is CollectionItemCategorySubmitDto &&\n                         (sumbitDto as CollectionItemCategorySubmitDto).acceptNpc.npc.id == npcGeneral.id)\n                        ||\n                        (sumbitDto is CollectionPetSubmitDto &&\n                         (sumbitDto as CollectionPetSubmitDto).acceptNpc.npc.id == npcGeneral.id))\n                    {\n                        OpenDefaultDialogueFunction();\n                        return;\n                    }\n                }\n            }\n        }\n\n        //节日仙子/红娘先请求数据再打开对话框\n        if (_npcInfo.npcStateDto.npcId == ProxyDialogueModule.FESTIVAL_NPC_ID)\n        {\n            ModelManager.Player.GetFestivalInfoFromServer(() => { ProxyManager.Dialogue.OpenNpcDialogue(_npcInfo); });\n        }\n        else if (_npcInfo.npcStateDto.npcId == ProxyDialogueModule.Matchmaker_NPC_ID)\n        {\n            ModelManager.Marry.GetMyMarryInfoDtoFromServer(() => { ProxyManager.Dialogue.OpenNpcDialogue(_npcInfo); });\n        }\n           else if(_npcInfo.npcStateDto.npcId == ProxyDialogueModule.SWORNBROTHER_NPC_ID)\n           {\n               ModelManager.BrotherPupil.GetSwornInfo( ()=> { ProxyManager.Dialogue.OpenNpcDialogue(_npcInfo); });                                                                             /// 结拜信息\n           }\n        else if (_npcInfo.npcStateDto.npcId == ModelManager.DuelData.speciteNpcID) {\n        ModelManager.DuelData.CleanDuelInfoDto();\n        ProxyManager.Dialogue.OpenNpcDialogue(_npcInfo);\n        }else if (_npcInfo.npcStateDto.npcId == ModelManager.CSPK.EntranceNPCId) {\n        ModelManager.CSPK.ShowDialogue (_npcInfo);\n        }\n           else if(_npcInfo.npcStateDto.npcId==ProxyDialogueModule.SHOWSTAGEVIEW)\n           {\n               ProxyManager.TalentShow.GetShowMatchDate(_npcInfo);\n           }\n        else\n        {\n            ProxyManager.Dialogue.OpenNpcDialogue(_npcInfo);\n        }");
        },
        OpenDefaultDialogueFunction: function (){
            GameDebuger.TODO("NpcGeneral npcGeneral = _npcInfo.npcStateDto.npc as NpcGeneral;\n        if (npcGeneral.dialogFunctionIds.Count > 0) {\n                  DialogFunction dialogFunction = DataCache.getDtoByCls<DialogFunction> (npcGeneral.dialogFunctionIds [0]);\n                  DialogueHelper.OpenDialogueFunction (_npcInfo.npcStateDto, dialogFunction);\n\t\t}");
        },
        NPCDoAction: function (){
            if (this._animateTimer != null){
                this._animateTimer.Reset($CreateDelegate(this, this.NPCDoAction), GeneralUnit.GetAnimateRandomTime(), false);
            }
            if (this.CheckHaveRide() == false)
                this.DoAction("show" /* ModelHelper.Anim_show */, true);
        },
        Destroy: function (){
            if (this._animateTimer != null){
                this._animateTimer.Cancel();
                this._animateTimer = null;
            }
            TriggerNpcUnit.commonPrototype.Destroy.call(this);
        }
    }
};
JsTypes.push(GeneralUnit);
var NpcPeriodUnit = {
    fullname: "NpcPeriodUnit",
    baseTypeName: "GeneralUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            GeneralUnit.ctor.call(this);
        },
        AfterInit: function (){
            GeneralUnit.commonPrototype.AfterInit.call(this);
        }
    }
};
JsTypes.push(NpcPeriodUnit);
var NpcSceneGoldBoxUnit = {
    fullname: "NpcSceneGoldBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
            NpcSceneGoldBoxUnit.HasKeyContent = "是否使用金宝箱钥匙开启金宝箱？";
            NpcSceneGoldBoxUnit.WithoutKeyContent = "是否花费{0}{1}购买金钥匙开启金宝箱？";
            NpcSceneGoldBoxUnit.OpenWaitTime = 3;
            NpcSceneGoldBoxUnit.OpenGoldBox = "OpenGoldBox";
            NpcSceneGoldBoxUnit.IsOpenByOtherTipStr = "该宝箱已经被捷足先登啦";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            ModelManager.get_Player().StopAutoNav();
            var spendCopper = DataCache.GetStaticConfigValue(12003 /* AppStaticConfigs.SCENE_GOLD_BOX_CONSUME_COPPER */, 200);
            var contentMsgStr = "";
            var hasKey = false;
            GameDebuger.TODO("if (ModelManager.Backpack.CheckHasGoldKey())\n        {\n            contentMsgStr = HasKeyContent;\n            hasKey = true;\n        }\n        else");
            contentMsgStr = System.String.Format$$String$$Object$$Object("是否花费{0}{1}购买金钥匙开启金宝箱？" /* WithoutKeyContent */, spendCopper, "#w1" /* ItemIconConst.Ingot */);
            ProxyWindowModule.OpenConfirmWindow(contentMsgStr, "", $CreateAnonymousDelegate(this, function (){
                this.ShowOpening(spendCopper, hasKey);
            }), null, 4, null, null, 0, true, false);
        },
        ShowOpening: function (spendCopper, hasKey){
            if (!hasKey){
                if (ModelManager.get_Player().isEnoughIngot(spendCopper, true, "")){
                    this.OpenBox();
                }
            }
            else {
                this.OpenBox();
            }
        },
        OpenBox: function (){
            var worldModel = WorldManager.get_Instance().GetModel();
            if (!worldModel.get_NpcsDic().ContainsKey(this.get__npcInfo().get_npcStateDto().id)){
                TipManager.AddTip("该宝箱已经被捷足先登啦" /* IsOpenByOtherTipStr */, false, false, "");
                return;
            }
            GameDebuger.TODO("ModelManager.SceneMonster.NpcFunctionToEnterBattle(_npcInfo.npcStateDto,OnBoxOpened);");
        },
        OnBoxOpened: function (){
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'正在开启金宝箱……\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(OpenGoldBox, OpenWaitTime,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime/ OpenWaitTime); }, () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("OpenGoldBox" /* OpenGoldBox */);
            GameDebuger.TODO("ServiceRequestAction.requestServer(AppServices.SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(NpcSceneGoldBoxUnit);
var MarrySweetBoxUnit = {
    fullname: "MarrySweetBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            ModelManager.get_Player().StopAutoNav();
            this.ShowOpening();
        },
        ShowOpening: function (){
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'拾取喜糖中...\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(\'pickupWeddingCandies\', 1f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 1f); }, \n            () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(\'手太慢了，没抢到\');\n                    return;\n                }\n                ModelManager.SceneMonster.NpcFunctionToEnterBattle(_npcInfo.npcStateDto);\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("pickupWeddingCandies");
            GameDebuger.TODO("ServiceRequestAction.requestServer(AppServices.SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.25, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.8, 0.8));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(MarrySweetBoxUnit);
var MonsterUnit = {
    fullname: "MonsterUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._animateTimer = null;
            TriggerNpcUnit.ctor.call(this);
        },
        NeedTrigger: function (){
            return true;
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
            if (this.IsMainCharactorModel() == false){
                if (this._animateTimer == null){
                    this._animateTimer = JSTimer.get_Instance().SetupTimer("MonsterUnit_" + this._unitGo.GetInstanceID(), $CreateDelegate(this, this.NPCDoAction), this.GetAnimateRandomTime(), false);
                }
            }
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.75 * this.GetNpcScale(), 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.GetNpcScale(), this.GetNpcScale(), this.GetNpcScale()));
            GameDebuger.TODO("bool tIsDreamlandMonster = ModelManager.DreamlandData.IsInDreamlandScene() && _npcInfo.npcStateDto.npc is NpcSceneMythLandMonster;");
            var tIsDreamlandMonster = false;
            this._unitGo.set_tag(tIsDreamlandMonster ? "DreamlandNpc" /* GameTag.Tag_DreamlandNpc */ : "Npc" /* GameTag.Tag_Npc */);
        },
        UpdateNpcPosition: function (){
            GameDebuger.TODO("if (_npcInfo.npcStateDto.npc is NpcDynamicMonster || _npcInfo.npcStateDto.npc is NpcSceneMonster) {\n            //  默认朝向玩家，策划需求加入随机值\n            _npcInfo.npcStateDto.npc.rotateY = Random.rotation.eulerAngles.y;\n        }");
            BaseNpcUnit.commonPrototype.UpdateNpcPosition.call(this);
        },
        IsMainCharactorModel: function (){
            return this.get__npcInfo().get_npcStateDto().get_npc().modelId < 100;
        },
        GetAnimateRandomTime: function (){
            return UnityEngine.Random.Range$$Single$$Single(10, 20);
        },
        Trigger: function (){
            GameDebuger.TODO("if (ModelManager.DreamlandData.IsInDreamlandScene() && _npcInfo.npcStateDto.npc is NpcSceneMythLandMonster) {\n            //  怪物战斗请求（按场景怪物战斗请求方式）\n            ModelManager.DreamlandData.DreamlandMonstert(_npcInfo.npcStateDto);\n        } else {\n            base.Trigger();\n        }");
        },
        DoTrigger: function (){
            var tNormalSta = false;
            GameDebuger.TODO("if (ModelManager.DreamlandData.IsInDreamlandScene()) {\n            if (_npcInfo.npcStateDto.npc is NpcSceneMythLandMonster) {\n                //  幻境怪物 不做操作\n                return;\n            } else if (_npcInfo.npcStateDto.npc is NpcSceneMythLandTransfer) {\n                tNormalSta = true;\n            } else if (_npcInfo.npcStateDto.npc is NpcSceneMythLandBox) {\n                //  幻境宝箱开启处理\n                base.DoTrigger();\n\n                ModelManager.DreamlandData.DreamlandBox(_npcInfo.npcStateDto);\n            }else if(_npcInfo.npcStateDto.npc is NpcSceneWorldGhostBox)\n                  {\n                      //世界Boss宝箱开启处理\n                      base.DoTrigger();\n                  }\n                  else {\n                tNormalSta = true;\n            }\n        }\n        else {\n            tNormalSta = true;\n        }\n\n        if (tNormalSta) {\n            base.DoTrigger();\n                  //    明雷怪物点击回调\n                  ProxyManager.Dialogue.OpenNpcDialogue(_npcInfo);\n        }");
        },
        NPCDoAction: function (){
            if (this._animateTimer != null){
                this._animateTimer.Reset($CreateDelegate(this, this.NPCDoAction), this.GetAnimateRandomTime(), false);
            }
            if (this.CheckHaveRide() == false)
                this.DoAction("show" /* ModelHelper.Anim_show */, true);
        },
        Destroy: function (){
            if (this._animateTimer != null){
                this._animateTimer.Cancel();
                this._animateTimer = null;
            }
            TriggerNpcUnit.commonPrototype.Destroy.call(this);
        }
    }
};
JsTypes.push(MonsterUnit);
var NpcSceneCampWarPeachBoxUnit = {
    fullname: "NpcSceneCampWarPeachBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
            NpcSceneCampWarPeachBoxUnit._coolDownName = "__OpenNpcSceneCampWarPeachBox";
            NpcSceneCampWarPeachBoxUnit._openingBoxStr = "正在采集{0}......";
            NpcSceneCampWarPeachBoxUnit._minScordStr = "活动积分不足{0}，{1}不愿意跟你走！";
            NpcSceneCampWarPeachBoxUnit._openedStr = "{0}正在被他人采集";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            this.ShowOpening();
        },
        ShowOpening: function (){
            var worldModel = WorldManager.get_Instance().GetModel();
            if (!worldModel.get_NpcsDic().ContainsKey(this.get__npcInfo().get_npcStateDto().id)){
                TipManager.AddTip(System.String.Format$$String$$Object("{0}正在被他人采集" /* _openedStr */, AppStringHelper.WrapColor$$String$$String(this.get__npcInfo().name, "0FFF32" /* ColorConstantV3.Color_Green_Str */)), false, false, "");
            }
            else {
                GameDebuger.TODO("CampWarPlayerDto tInfoDto = ModelManager.CampWarData.GetCampWarPlayerInfoDto();\n\n            int tPickScore = (_npcInfo.npcStateDto.npc as NpcCampWarPeach).pickScore;\n            if (tInfoDto != null && tInfoDto.score >= tPickScore) {\n                ModelManager.CampWarData.CampWarOpenBox(_npcInfo.npcStateDto, OnOpenBoxSuccessCallback);\n            } else {\n                TipManager.AddTip(string.Format(_minScordStr, tPickScore.WrapColor(ColorConstantV3.Color_Green_Str), _npcInfo.name.WrapColor(ColorConstantV3.Color_Green_Str)));\n            }");
            }
        },
        CancelOpen: function (){
            TipManager.AddTip(System.String.Format$$String$$Object("你放弃了{0}", AppStringHelper.WrapColor$$String$$String(this.get__npcInfo().name, "0FFF32" /* ColorConstantV3.Color_Green_Str */)), false, false, "");
            JSTimer.get_Instance().CancelCd("__OpenNpcSceneCampWarPeachBox" /* _coolDownName */);
        },
        OnOpenBoxSuccessCallback: function (){
            var tMsg = System.String.Format$$String$$Object("正在采集{0}......" /* _openingBoxStr */, AppStringHelper.WrapColor$$String$$String(this.get__npcInfo().name, "0FFF32" /* ColorConstantV3.Color_Green_Str */));
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, tMsg);//, CancelOpen);\n\n        JSTimer.Instance.SetupCoolDown(_coolDownName, 3f, (remainTime) => {\n            MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3f);\n        }, () => {\n            MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n            \n            /*\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(string.Format(_openedStr, _npcInfo.name.WrapColor(ColorConstantV3.Color_Green_Str)));\n                } else {\n                    ModelManager.CampWarData.CampWarOpenBox(_npcInfo.npcStateDto);\n                }\n                */\n        }, 0);");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            if (UnityEngine.Object.op_Inequality(this._unitGo, null)){
                this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
                this._boxCollider.set_isTrigger(true);
                this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
                this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
                this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
            }
            else {
                UnityEngine.Debug.LogError$$Object("!!!!!! _unitGo = null");
            }
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        },
        Destroy: function (){
            TriggerNpcUnit.commonPrototype.Destroy.call(this);
        }
    }
};
JsTypes.push(NpcSceneCampWarPeachBoxUnit);
var NpcSceneGrassUnit = {
    fullname: "NpcSceneGrassUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._boxCoolDown = 10;
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            this.ShowOpening();
        },
        ShowOpening: function (){
            var taskName = "NpcSceneGrassCoolDown";
            if (JSTimer.get_Instance().IsCdExist(taskName)){
                var remainTime = JSTimer.get_Instance().GetRemainTime(taskName);
                TipManager.AddTip(System.String.Format$$String$$Object("别急，你刚刚才拾取过仙草，还是给别人留点机会吧！{0}秒后可再次采集", (remainTime | 0)), false, false, "");
                return;
            }
            GameDebuger.TODO("if (WorldManager.Instance.GetModel().GetSceneDto().guildId != 0 &&\n            WorldManager.Instance.GetModel().GetSceneDto().guildId != ModelManager.Player.GetGuildId())\n        {\n            TipManager.AddTip(\'少侠不是本帮派成员。\');\n            return;\n        }");
            GameDebuger.TODO("if (!FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_HundredGrassValley, false))\n        {\n            TipManager.AddTip(string.Format(\'少侠等级未达到{0}级。\', FunctionOpenHelper.GetFunctionOpenLv(FunctionOpen.FunctionOpenEnum_HundredGrassValley)));\n            return;\n        }\n\n        MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'正在采集仙草……\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(\'OpenNpcSceneGrass\', 3f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3f); }, () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(string.Format(\'{0}已经消失了\', _npcInfo.name));\n                    return;\n                }\n\n                JSTimer.Instance.SetupCoolDown(taskName, _boxCoolDown, null, null);\n                ServiceRequestAction.requestServer(SceneService.openBox(_npcInfo.npcStateDto.id), \'openBox\', null, e => //出错则立即刷新宝箱CD\n                {\n                    TipManager.AddTip(e.message);\n                    JSTimer.Instance.CancelCd(taskName);\n                });\n\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("OpenNpcSceneGrass");
            GameDebuger.TODO("ServiceRequestAction.requestServer(SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(NpcSceneGrassUnit);
var NpcSceneGuildCompBoxUnit = {
    fullname: "NpcSceneGuildCompBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            this.ShowOpening();
        },
        ShowOpening: function (){
            GameDebuger.TODO("if (ModelManager.GuildCompetitionData.HaveOpenBox())\n        {\n            TipManager.AddTip(string.Format(\'你已开启了一个{0}，留给其他人吧\',_npcInfo.name));\n            return;\n        }\n\n        MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'正在开启宝箱……\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(\'OpenNpcSceneGuildCompBox\', 3f, (remainTime) => {\n            MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3f);\n        }, () => {\n            MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n            WorldModel worldModel = WorldManager.Instance.GetModel();\n            if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n            {\n                TipManager.AddTip(string.Format(\'{0}已经消失了\',_npcInfo.name));\n                return;\n            }\n\n            ModelManager.GuildCompetitionData.GuildCompBox(_npcInfo.npcStateDto);\n        }, 0);");
        },
        CancelOpen: function (){
            TipManager.AddTip("你放弃了宝箱", false, false, "");
            JSTimer.get_Instance().CancelCd("OpenNpcSceneGuildCompBox");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            if (UnityEngine.Object.op_Inequality(this._unitGo, null)){
                this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
                this._boxCollider.set_isTrigger(true);
                this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
                this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
                this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
            }
            else {
                UnityEngine.Debug.LogError$$Object("!!!!!! _unitGo = null");
            }
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(NpcSceneGuildCompBoxUnit);
var NpcSceneMazeBoxUnit = {
    fullname: "NpcSceneMazeBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._boxCoolDown = 120;
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            this.ShowOpening();
        },
        ShowOpening: function (){
            GameDebuger.TODO("_boxCoolDown = DataCache.GetStaticConfigValue(AppStaticConfigs.MAZE_OPEN_BOX_CD, 120);\n        string taskName = \'OpenNpcSceneMazeBoxCoolDown\';\n        NpcSceneMazeBox npcBox = GetNpc() as NpcSceneMazeBox;\n        if (npcBox != null)\n        {\n            taskName = \'OpenNpcSceneMazeBoxCoolDown_\' + npcBox.boxType;\n            //GameDebuger.Log(\'1.设置迷宫宝箱定时器名字: \' + taskName, \'orange\');\n        }\n\n        if (JSTimer.Instance.IsCdExist(taskName))\n        {\n            float remainTime = JSTimer.Instance.GetRemainTime(taskName);\n            TipManager.AddTip(string.Format(\'别急，你刚刚才拾取过宝箱，还是给别人留点机会吧！{0}秒后可再次开启\', (int)remainTime));\n            return;\n        }\n\n        MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'正在开启宝箱……\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(\'OpenNpcSceneMazeBox\', 3f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3f); }, () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(string.Format(\'{0}已经消失了\',_npcInfo.name));\n                    return;\n                }\n\n        JSTimer.Instance.SetupCoolDown(taskName, _boxCoolDown, null, null);\n                //GameDebuger.Log(\'2.开启迷宫宝箱定时器: \' + taskName,\'orange\');\n                ServiceRequestAction.requestServer(SceneService.openBox(_npcInfo.npcStateDto.id),\'openBox\',null,e => //出错则立即刷新宝箱CD\n        {\n                    TipManager.AddTip(e.message);\n                    //GameDebuger.Log(e.message);\n                    JSTimer.Instance.CancelCd(taskName);\n                    //GameDebuger.Log(\'3.取消迷宫宝箱定时器: \' + taskName + \' ,服务器报错:\' + e.message,\'orange\');\n                });\n\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("OpenNpcSceneMazeBox");
            GameDebuger.TODO("ServiceRequestAction.requestServer(SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(NpcSceneMazeBoxUnit);
var NpcSceneWorldGhostBoxUnit = {
    fullname: "NpcSceneWorldGhostBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
            NpcSceneWorldGhostBoxUnit._coolDownName = "openWorldGhostBox";
            NpcSceneWorldGhostBoxUnit._openedStr = "{0}已经消失";
            NpcSceneWorldGhostBoxUnit._openNumLimit = "一人一个宝箱，少侠不要拿多了哦~";
            NpcSceneWorldGhostBoxUnit._openLimit = "必须参与讨伐才有资格开启宝箱，下次再接再厉哦~";
            NpcSceneWorldGhostBoxUnit._openingBoxStr = "正在开启{0}...";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.touch = false;
            this.waitingTrigger = false;
            this.OpenBox();
        },
        OpenBox: function (){
            GameDebuger.TODO("if (!ModelManager.SnowWorldBoss.CanOpenBox)\n        {\n            TipManager.AddTip(string.Format(_openNumLimit, _npcInfo.name));\n            return;\n        }\n        else\n        {\n            //参与战斗次数\n            if (ModelManager.SceneMonster._curWorldGhostCount > 0)\n            {\n                //开启宝箱\n                string tMsg = string.Format(_openingBoxStr, _npcInfo.name.WrapColor(ColorConstantV3.Color_Green_Str));\n                MainUIViewController.Instance.SetMissionUsePropsProgress(true, tMsg, CancelOpen);\n\n                JSTimer.Instance.SetupCoolDown(_coolDownName, 3.0f, remainTime =>\n                {\n                    MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3.0f);\n                    \n                }, () =>\n                {\n                    MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                    //已经消失（被他人开启）\n                    WorldModel worldModel = WorldManager.Instance.GetModel();\n                    if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                    {\n                        TipManager.AddTip(string.Format(_openedStr, _npcInfo.name.WrapColor(ColorConstantV3.Color_Green_Str)));\n                        return;\n                    }\n\n                    ModelManager.SnowWorldBoss.OpenBox(_npcInfo.npcStateDto);\n                }, 0);\n            }\n            else\n            {\n                TipManager.AddTip(_openLimit);\n            }\n        }");
        },
        OpenBoxSuccessCallback: function (){
            var tMsg = System.String.Format$$String$$Object("正在开启{0}..." /* _openingBoxStr */, AppStringHelper.WrapColor$$String$$String(this.get__npcInfo().name, "0FFF32" /* ColorConstantV3.Color_Green_Str */));
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, tMsg);\n\n        JSTimer.Instance.SetupCoolDown(_coolDownName, 3.0f, (remainTime) =>\n        {\n            MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3.0f);\n\n        },() =>\n         {\n             MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n         });");
        },
        CancelOpen: function (){
            TipManager.AddTip("你放弃了宝箱", false, false, "");
            JSTimer.get_Instance().CancelCd("openWorldGhostBox" /* _coolDownName */);
        },
        NeedTrigger: function (){
            return true;
        },
        Destroy: function (){
            TriggerNpcUnit.commonPrototype.Destroy.call(this);
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(NpcSceneWorldGhostBoxUnit);
var PreciousBoxUnit = {
    fullname: "PreciousBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            ModelManager.get_Player().StopAutoNav();
            GameDebuger.TODO("if (ModelManager.Spell.IsCurrSpellMaxExp())\n        {\n\n            ProxyManager.Window.OpenConfirmWindow(string.Format(\'你的[37F605]{0}[-]等级已经达到上限，请更换修炼类型，否则无法获得#exp2\',\n                                                               ModelManager.Spell.GetSelectSpellName()), \", () =>\n                                                               {\n                                                                   //打开修炼界面\n                                                                   ProxyManager.Skill.OpenPracticeSkill();\n                                                               });\n\n        }\n        else\n        {\n            int spendCopper = DataCache.GetStaticConfigValue(AppStaticConfigs.SCENE_PRECIOUS_BOX_CONSUME_COPPER, 35000);\n\n            if (ProxyManager.TreasureMap.openPreciousBoxCount == 0)\n            {\n                ProxyManager.Window.OpenConfirmWindow(string.Format(\'开启银宝箱可获得最高300点修炼经验{0}，是否花费{1}{2}开启？（当前修炼类型：[00ff00]{3}[-]）\', ItemIconConst.Exp2,spendCopper,ItemIconConst.Copper, ModelManager.Spell.GetSelectSpellName()),\n                                                    \",\n                                                    () =>\n                                                    {\n                                                        ShowOpening(spendCopper);\n                                                    });\n            }\n            else\n            {\n                ShowOpening(spendCopper);\n            }\n\n        }");
        },
        ShowOpening: function (spendCopper){
            if (ModelManager.get_Player().isEnoughCopper(spendCopper, true, "")){
                GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'正在开启宝箱……\',CancelOpen);\n            JSTimer.Instance.SetupCoolDown(\'OpenPreciousBox\', 3f,\n                (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime/3f); }, () =>\n                {\n                    MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                    WorldModel worldModel = WorldManager.Instance.GetModel();\n                    if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                    {\n                        TipManager.AddTip(\'银宝箱已经消失了\');\n                        return;\n                    }\n\n                    ProxyManager.TreasureMap.openPreciousBoxCount = 1;\n                    ModelManager.SceneMonster.NpcFunctionToEnterBattle(_npcInfo.npcStateDto);\n                }, 0);");
            }
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("OpenPreciousBox");
            GameDebuger.TODO("ServiceRequestAction.requestServer(AppServices.SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(PreciousBoxUnit);
var WorldBossPreciousBoxUnit = {
    fullname: "WorldBossPreciousBoxUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            TriggerNpcUnit.ctor.call(this);
        },
        DoTrigger: function (){
            this.waitingTrigger = false;
            this.touch = false;
            this.ShowOpening();
        },
        ShowOpening: function (){
            if (JSTimer.get_Instance().IsCdExist("OpenWorldBossPreciousBoxCoolDown")){
                var remainTime = JSTimer.get_Instance().GetRemainTime("OpenWorldBossPreciousBoxCoolDown");
                TipManager.AddTip(System.String.Format$$String$$Object("别急，你刚刚才拾取过宝箱，还是给别人留点机会吧！{0}秒后可再次开启", (remainTime | 0)), false, false, "");
                return;
            }
            GameDebuger.TODO("MainUIViewController.Instance.SetMissionUsePropsProgress(true, \'正在开启宝箱……\', CancelOpen);\n        JSTimer.Instance.SetupCoolDown(\'OpenWorldBossPreciousBox\', 3f,\n            (remainTime) => { MainUIViewController.Instance.SetMissionUsePropsProgress(1 - remainTime / 3f); }, () =>\n            {\n                MainUIViewController.Instance.SetMissionUsePropsProgress(false, \");\n\n                WorldModel worldModel = WorldManager.Instance.GetModel();\n                if (!worldModel.NpcsDic.ContainsKey(_npcInfo.npcStateDto.id))\n                {\n                    TipManager.AddTip(string.Format(\'{0}已经消失了\',_npcInfo.name));\n                    return;\n                }\n\n        JSTimer.Instance.SetupCoolDown(\'OpenWorldBossPreciousBoxCoolDown\', 30f, null, null);\n        ServiceRequestAction.requestServer(SceneService.openBox(_npcInfo.npcStateDto.id),\'openBox\',null,e => //出错则立即刷新宝箱CD\n        {\n                    TipManager.AddTip(e.message);\n                    JSTimer.Instance.CancelCd(\'OpenWorldBossPreciousBoxCoolDown\');\n        });\n\n            }, 0);");
        },
        CancelOpen: function (){
            JSTimer.get_Instance().CancelCd("OpenWorldBossPreciousBox");
            GameDebuger.TODO("ServiceRequestAction.requestServer(SceneService.openBoxCancel(_npcInfo.npcStateDto.id), \'openBoxCancel\');");
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.35, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 0.7, 0.7));
            this._unitGo.set_tag("Npc" /* GameTag.Tag_Npc */);
        },
        AfterInit: function (){
            TriggerNpcUnit.commonPrototype.AfterInit.call(this);
            this.InitPlayerName();
        }
    }
};
JsTypes.push(WorldBossPreciousBoxUnit);
var DoubleTeleportUnit = {
    fullname: "DoubleTeleportUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.waitingForTrigger = false;
            TriggerNpcUnit.ctor.call(this);
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.5, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(2, 1, 2));
            this._unitGo.set_tag("Teleport" /* GameTag.Tag_Teleport */);
        },
        NeedClose: function (){
            return true;
        },
        CheckDistance: function (){
            return 3;
        },
        Reset: function (){
            TriggerNpcUnit.commonPrototype.Reset.call(this);
            this.waitingForTrigger = false;
        },
        DoTrigger: function (){
            TriggerNpcUnit.commonPrototype.DoTrigger.call(this);
            this.enabled = false;
            GameDebuger.Log("DoTrigger DoubleTeleportUnit", null);
            if (UnityEngine.Object.op_Inequality(this._heroView, null)){
                this._heroView.StopAndIdle();
            }
            NpcViewManager.EnableTrigger = false;
            this.enterTeleport();
        },
        CheckTrigger: function (){
            if (this.waitingForTrigger){
                this.enterTeleport();
            }
        },
        enterTeleport: function (){
            GameDebuger.Log("enterTeleport!!", null);
            this.waitingForTrigger = false;
            if (Is(this.get__npcInfo().get_npcStateDto().get_npc(), AppDto.NpcDoubleTeleport.ctor)){
                this.enterDoubleTeleport();
            }
        },
        enterDoubleTeleport: function (){
            if (ModelManager.get_Player().get_IsAutoFram())
                return;
            var npcDoubleTeleport = As(this.get__npcInfo().get_npcStateDto().get_npc(), AppDto.NpcDoubleTeleport.ctor);
            if (npcDoubleTeleport != null)
                WorldManager.get_Instance().Enter(npcDoubleTeleport.toSceneId, true, false, true, null);
        },
        StopTrigger: function (){
        }
    }
};
JsTypes.push(DoubleTeleportUnit);
var NpcSceneTeleportUnit = {
    fullname: "NpcSceneTeleportUnit",
    baseTypeName: "TriggerNpcUnit",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.waitingForTrigger = false;
            TriggerNpcUnit.ctor.call(this);
        },
        NeedTrigger: function (){
            return true;
        },
        SetupBoxCollider: function (){
            this._boxCollider = GameObjectExt.GetMissingComponent$1(UnityEngine.BoxCollider.ctor, this._unitGo);
            this._boxCollider.set_isTrigger(true);
            this._boxCollider.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.5, 0));
            this._boxCollider.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(2, 1, 2));
            this._unitGo.set_tag("Teleport" /* GameTag.Tag_Teleport */);
        },
        NeedClose: function (){
            return true;
        },
        CheckDistance: function (){
            return 3;
        },
        Reset: function (){
            TriggerNpcUnit.commonPrototype.Reset.call(this);
            this.waitingForTrigger = false;
        },
        DoTrigger: function (){
            TriggerNpcUnit.commonPrototype.DoTrigger.call(this);
            this.enabled = false;
            GameDebuger.Log("DoTrigger DoubleTeleportUnit", null);
            if (UnityEngine.Object.op_Inequality(this._heroView, null)){
                this._heroView.StopAndIdle();
            }
            NpcViewManager.EnableTrigger = false;
            this.enterTeleport();
        },
        CheckTrigger: function (){
            if (this.waitingForTrigger){
                this.enterTeleport();
            }
        },
        enterTeleport: function (){
            GameDebuger.Log("enterTeleport!!", null);
            this.waitingForTrigger = false;
            GameDebuger.TODO("if (_npcInfo.npcStateDto.npc is NpcSceneTeleport)\n        {\n            enterDoubleTeleport();\n        }");
        },
        enterDoubleTeleport: function (){
            if (ModelManager.get_Player().get_IsAutoFram())
                return;
            GameDebuger.TODO("var npcSceneTeleport = _npcInfo.npcStateDto.npc as NpcSceneTeleport;\n        if (npcSceneTeleport != null)\n            WorldManager.Instance.Enter(npcSceneTeleport.toSceneId, false);");
        },
        StopTrigger: function (){
        }
    }
};
JsTypes.push(NpcSceneTeleportUnit);
var HeroView = {
    fullname: "HeroView",
    baseTypeName: "PlayerView",
    staticDefinition: {
        cctor: function (){
            HeroView.PlanWalkInterval = 3;
            HeroView.VerifyWalkInterval = 1;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._triggerGo = null;
            this._autoFramTimer = 0;
            this._coolDown = 0;
            this._lastX = 0;
            this._lastZ = 0;
            this._planWalkTimer = 0;
            this._verifyWalkTimer = 0;
            this._IsAutoFram = false;
            PlayerView.ctor.call(this);
        },
        OnTriggerEnter: function (other){
            if (JoystickModule.get_DisableMove()){
                GameDebuger.TODO("if (ModelManager.BridalSedan.IsMe())\n            {\n                TipManager.AddTip(\'你正在乘坐花轿，不能到处乱跑哦！\');\n            }");
                return;
            }
            var triggerGo = other.get_gameObject();
            if (other.CompareTag("Teleport" /* GameTag.Tag_Teleport */)){
                if (UnityEngine.Object.op_Inequality(this._triggerGo, triggerGo)){
                    WorldManager.get_Instance().GetNpcViewManager().TriggerTeleport(triggerGo);
                }
            }
            else if (other.CompareTag("DreamlandNpc" /* GameTag.Tag_DreamlandNpc */)){
                WorldManager.get_Instance().GetNpcViewManager().TriggerTeleport(triggerGo);
            }
            this._triggerGo = triggerGo;
        },
        OnTriggerExit: function (other){
            if (JoystickModule.get_DisableMove())
                return;
            var triggerGo = other.get_gameObject();
            if (other.CompareTag("Teleport" /* GameTag.Tag_Teleport */)){
                var npcUnit = WorldManager.get_Instance().GetNpcViewManager().GetNpcUnit$$GameObject(triggerGo);
                var teleportUnit = As(npcUnit, DoubleTeleportUnit.ctor);
                if (teleportUnit != null){
                    teleportUnit.StopTrigger();
                }
                var npcSceneTeleportUnit = As(npcUnit, NpcSceneTeleportUnit.ctor);
                if (npcSceneTeleportUnit != null){
                    npcSceneTeleportUnit.StopTrigger();
                }
                this._triggerGo = null;
            }
        },
        Update: function (){
            PlayerView.commonPrototype.Update.call(this);
            if (this.get_IsAutoFram()){
                this._autoFramTimer += _jsComManager.dT;
                if (this._autoFramTimer > this._coolDown){
                    this.AutoWalk();
                    this._autoFramTimer = 0;
                    this._coolDown = UnityEngine.Random.Range$$Single$$Single(2, 10);
                    return;
                }
                if (!this.IsRunning()){
                    this.AutoWalk();
                }
            }
            this._verifyWalkTimer += _jsComManager.dT;
            if (this._verifyWalkTimer >= 1 /* VerifyWalkInterval */){
                this._verifyWalkTimer = 0;
                if (this.ValidateHeroPos()){
                    WorldManager.get_Instance().VerifyWalk(this._lastX, this._lastZ);
                }
            }
            if (this._walkWithJoystick){
                this._planWalkTimer += _jsComManager.dT;
                if (this._planWalkTimer >= 3 /* PlanWalkInterval */){
                    this._planWalkTimer = 0;
                    if (this.ValidateHeroPos()){
                        WorldManager.get_Instance().PlanWalk(this._lastX, this._lastZ);
                    }
                }
            }
        },
        WalkWithJoystick: function (forward){
            if (this._walkWithJoystick){
                var heroTrans = this.get_cachedTransform();
                heroTrans.set_rotation(UnityEngine.Quaternion.LookRotation$$Vector3(forward));
                heroTrans.Translate$$Vector3$$Space(UnityEngine.Vector3.op_Multiply$$Vector3$$Single(UnityEngine.Vector3.op_Multiply$$Vector3$$Single(forward, this.get_Speed()), _jsComManager.dT), 0);
                this.PlayRunAnimation();
            }
        },
        MutateTest: function (colorParams){
            if (!System.String.IsNullOrEmpty(colorParams)){
                this._modelDisplayer.UpdateModelHSV(colorParams, 0);
            }
            else {
                this._modelDisplayer.UpdateModelHSV("", 0);
            }
        },
        TextPlayAnimation: function (action){
            this._modelDisplayer.PlayAnimation(action, false, false);
        },
        IsAutoFram$$: "System.Boolean",
        get_IsAutoFram: function (){
            return this._IsAutoFram;
        },
        set_IsAutoFram: function (value){
            this._IsAutoFram = value;
        },
        SetAutoFram: function (b){
            if (this.get_IsAutoFram() != b){
                this.set_IsAutoFram(b);
                if (this.get_IsAutoFram()){
                    this._coolDown = UnityEngine.Random.Range$$Single$$Single(2, 10);
                }
            }
        },
        AutoWalk: function (){
            var walkPoint = WorldManager.get_Instance().GetView().GetRandomNavPoint();
            WorldManager.get_Instance().PlanWalk(walkPoint.x, walkPoint.z);
            this._mAgent.set_enabled(true);
            this._mAgent.SetDestination(walkPoint);
        },
        ValidateHeroPos: function (){
            var newX = this._mTrans.get_position().x;
            var newZ = this._mTrans.get_position().z;
            if (UnityEngine.Mathf.Abs$$Single(this._lastX - newX) > 0.1 || UnityEngine.Mathf.Abs$$Single(this._lastZ - newZ) > 0.1){
                this._lastX = newX;
                this._lastZ = newZ;
                return true;
            }
            return false;
        },
        SyncWithServer: function (){
            if (this.ValidateHeroPos()){
                WorldManager.get_Instance().VerifyWalk(this._lastX, this._lastZ);
            }
        }
    }
};
JsTypes.push(HeroView);
var ModelDisplayer = {
    fullname: "ModelDisplayer",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (root, onLoadModelFinish, uiMode){
            this._alpha = 1;
            this._activeFlag = true;
            this._defaultAnimate = "";
            this._defaultRotation = UnityEngine.Vector3.get_zero();
            this._loadingCount = 0;
            this._mAnimator = null;
            this._mModelGO = null;
            this._mModelTrans = null;
            this._loadingRideCount = 0;
            this._gameobjectList = null;
            this._animatorList = null;
            this._assetHandlerDic = null;
            this._transformList = null;
            this._root = null;
            this._onLoadModelFinish = null;
            this._activeSurroundEffFlag = true;
            this._surroundEffBottom = null;
            this._activeFootPringEffFlag = false;
            this._footprintEffects = null;
            this._footpringRenderers = null;
            this.mSoulEffect = null;
            this.mActiveSoulEffFlag = true;
            this.mSoulAnimatorTimer = null;
            this.mSoulAnimator = null;
            this._uiMode = false;
            this._rideAnimator = null;
            this._rideGO = null;
            this._rideRoleGO = null;
            this._rideassengerGO = null;
            this._waitingInfo = null;
            this._changeMountPosition = false;
            this._hudY = 0;
            this._soulY = 0;
            this.mModelAlphaUpdater = null;
            this._ModelStyleInfo = null;
            System.Object.ctor.call(this);
            this._root = root;
            this._onLoadModelFinish = onLoadModelFinish;
            this._uiMode = uiMode;
            this._animatorList = new System.Collections.Generic.List$1.ctor(UnityEngine.Animator.ctor);
            this._transformList = new System.Collections.Generic.List$1.ctor(UnityEngine.Transform.ctor);
            this._gameobjectList = new System.Collections.Generic.List$1.ctor(UnityEngine.GameObject.ctor);
            this._assetHandlerDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, AssetPipeline.AssetManager.AssetHandler.ctor);
        },
        SoulAnimator$$: "UnityEngine.Animator",
        get_SoulAnimator: function (){
            if (UnityEngine.Object.op_Equality(null, this.mSoulAnimator)){
                if (UnityEngine.Object.op_Inequality(null, this.mSoulEffect)){
                    this.mSoulAnimator = this.mSoulEffect.GetComponent$1(UnityEngine.Animator.ctor);
                }
            }
            return this.mSoulAnimator;
        },
        isRiding$$: "System.Boolean",
        get_isRiding: function (){
            return UnityEngine.Object.op_Inequality(this._rideGO, null);
        },
        isLoading$$: "System.Boolean",
        get_isLoading: function (){
            return this._loadingCount != 0 || this._loadingRideCount != 0;
        },
        RideRoleGo$$: "UnityEngine.Transform",
        get_RideRoleGo: function (){
            return this._rideRoleGO;
        },
        RideassengerGO$$: "UnityEngine.Transform",
        get_RideassengerGO: function (){
            return this._rideassengerGO;
        },
        ModelStyleInfo$$: "ModelStyleInfo",
        get_ModelStyleInfo: function (){
            return this._ModelStyleInfo;
        },
        set_ModelStyleInfo: function (value){
            this._ModelStyleInfo = value;
        },
        SetLookInfo: function (lookInfo){
            if (this._loadingCount > 0){
                this._waitingInfo = lookInfo;
            }
            else {
                this._waitingInfo = null;
                this.set_ModelStyleInfo(lookInfo);
                this.LoadRideModel();
            }
        },
        LoadRideModel: function (){
            this.Clear();
            this.LoadRideModel$$Int32$$String(this.get_ModelStyleInfo().rideId, "ride_pet_801_Model");
        },
        LoadStyleModel: function (){
            if (!this.get_ModelStyleInfo().get_HasStyleModel()){
                if (this._onLoadModelFinish != null){
                    this._onLoadModelFinish();
                }
                this.get_ModelAlphaUpdater().ResetTransparent(this._alpha);
                return;
            }
            if (this.get_ModelStyleInfo().get_IsTransformModel()){
                this._loadingCount = 1;
                this.LoadModel(this.get_ModelStyleInfo().get_DefaultModelResKey(), true, ModelHelper.GetCharacterPrefabPath(2070 /* ModelHelper.DefaultModelId */));
            }
            else if (this.get_ModelStyleInfo().get_IsFashionModel() || this.get_ModelStyleInfo().useFashionDefaultModel){
                var defaultModelBody = "pet_" + this.get_ModelStyleInfo().defaultModelId + "_01_body";
                if (!AssetPipeline.AssetManager.get_Instance().ContainBundleName$$String$$ResGroup(defaultModelBody, 20)){
                    defaultModelBody = "pet_11_01_body";
                }
                var defaultModel_head = "pet_" + this.get_ModelStyleInfo().defaultModelId + "_01_head";
                if (!AssetPipeline.AssetManager.get_Instance().ContainBundleName$$String$$ResGroup(defaultModel_head, 20)){
                    defaultModel_head = "pet_11_01_head";
                }
                this._loadingCount = 2;
                this.LoadModel(this.get_ModelStyleInfo().get_FashionBodyResKey(), true, defaultModelBody);
                this.LoadModel(this.get_ModelStyleInfo().get_FashionHeadResKey(), false, defaultModel_head);
            }
            else {
                this._loadingCount = 1;
                this.LoadModel(this.get_ModelStyleInfo().get_DefaultModelResKey(), true, ModelHelper.GetCharacterPrefabPath(2070 /* ModelHelper.DefaultModelId */));
            }
        },
        LoadModel: function (modelResKey, isBody, defaultModel){
            if (System.String.IsNullOrEmpty(modelResKey)){
                modelResKey = defaultModel;
            }
            if (!AssetPipeline.AssetManager.get_Instance().ContainBundleName$$String$$ResGroup(modelResKey, 20)){
                GameDebuger.LogError("ModelDisplayer Use Default model " + modelResKey, null);
                modelResKey = defaultModel;
            }
            var handler = null;
            if (isBody){
                handler = AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync(modelResKey, $CreateAnonymousDelegate(this, function (go){
                    this.OnLoadModelFinish(modelResKey, go, true);
                }), $CreateAnonymousDelegate(this, function (){
                    this.OnLoadError(modelResKey);
                }), 89);
            }
            else {
                handler = AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync(modelResKey, $CreateAnonymousDelegate(this, function (go){
                    this.OnLoadModelFinish(modelResKey, go, false);
                }), $CreateAnonymousDelegate(this, function (){
                    this.OnLoadError(modelResKey);
                }), 89);
            }
            if (handler != null)
                this._assetHandlerDic.Add(modelResKey, handler);
        },
        OnLoadError: function (modelResKey){
            this._loadingCount--;
            this._assetHandlerDic.Remove(modelResKey);
            if (this._loadingCount <= 0){
                if (this._waitingInfo != null){
                    this.SetLookInfo(this._waitingInfo);
                }
            }
        },
        OnLoadModelFinish: function (modelResKey, obj, isBody){
            this._loadingCount--;
            this._assetHandlerDic.Remove(modelResKey);
            var modelGo = As(obj, UnityEngine.GameObject.ctor);
            if (UnityEngine.Object.op_Equality(modelGo, null))
                return;
            if (UnityEngine.Object.op_Equality(this._root, null)){
                UnityEngine.Debug.LogError$$Object("OnLoadModelFinish _root == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(modelGo, false);
                return;
            }
            if (this.get_ModelStyleInfo() == null){
                UnityEngine.Debug.LogError$$Object("OnLoadModelFinish _petLookInfo == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(modelGo, false);
                return;
            }
            if (isBody){
                if (UnityEngine.Object.op_Inequality(this._mModelGO, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this._mModelGO, false);
                    this._mModelGO = null;
                }
            }
            GameObjectExt.AddPoolChild(this._root, modelGo, 0, 0, 0);
            modelGo.SetActive(this._activeFlag && this._loadingCount <= 0);
            this._gameobjectList.Add(modelGo);
            var modelTrans = modelGo.get_transform();
            this._transformList.Add(modelTrans);
            this.UpdateRotation(this._defaultRotation);
            this.UpdateScale(this.get_ModelStyleInfo().get_ModelScale());
            if (this._loadingCount <= 0){
                this.SetActive(this._activeFlag);
            }
            var playerAnimation = this.GetPlayerAnimation();
            var animator = modelGo.GetComponent$1(UnityEngine.Animator.ctor);
            if (UnityEngine.Object.op_Inequality(animator, null)){
                this._animatorList.Add(animator);
                ModelHelper.PlayAnimation(animator, playerAnimation, false, null, false, 0);
            }
            if (isBody){
                this._mModelGO = modelGo;
                this._mModelTrans = this._mModelGO.get_transform();
                this._mAnimator = animator;
                if (!this.get_ModelStyleInfo().get_HasRide()){
                    this.SetShadowActive(this.get_ModelStyleInfo().showShadow, this.get_ModelStyleInfo().shadowScale);
                }
                this.ModifyModelMount(this._mModelGO, playerAnimation);
                this._surroundEffBottom = null;
                GameDebuger.TODO("if (ModelStyleInfo.FashionSurroundEffect != null)\n            {\n                ModelHelper.SetSurroundEffectActive(_mModelGO, ModelStyleInfo.FashionSurroundEffect.modelId, OnLoadSurroundEffect);\n            }\n            else");
                ModelHelper.SetSurroundEffectActive(this._mModelGO, null, null);
                this._footprintEffects = null;
                this._footpringRenderers = null;
                GameDebuger.TODO("if (ModelStyleInfo.FashionFootprint != null)\n            {\n                ModelHelper.SetFootprintActive(_mModelGO, ModelStyleInfo.FashionFootprint.modelId, OnLoadFootprintEffect);\n            }\n            else");
                ModelHelper.SetFootprintActive(this._mModelGO, null, null);
                this.UpdateHallowSprite();
            }
            GameDebuger.TODO("ModelHelper.ToggleUnitEffect(modelGo, ModelManager.SystemData.unitEffectToggle);");
            if (isBody){
                if (this.get_ModelStyleInfo().get_IsFashionModel()){
                    GameDebuger.TODO("if (ModelStyleInfo.FashionWeapon != null)\n                {\n                    ModelHelper.UpdateModelWeapon(modelGo, ModelStyleInfo.defaultModelId, 0, ModelStyleInfo.weaponEffId, onLoadFinish: OnLoadWeaponFinish);\n                    ModelHelper.UpdateHandModel(modelGo, ModelStyleInfo.FashionBodyResKey, ModelStyleInfo.FashionWeapon.modelId);\n                }\n                else");
                    ModelHelper.UpdateModelWeapon(modelGo, this.get_ModelStyleInfo().defaultModelId, this.get_ModelStyleInfo().weaponId, this.get_ModelStyleInfo().weaponEffLv, this.get_ModelStyleInfo().weaponEffId, this._uiMode, $CreateDelegate(this, this.OnLoadWeaponFinish));
                }
                else if (this.get_ModelStyleInfo().get_IsTransformModel()){
                    if (this.get_ModelStyleInfo().get_TransformModelId() > 0){
                        ModelHelper.SetPetLook(modelGo, this.get_ModelStyleInfo().mainTexture, this.get_ModelStyleInfo().mutateTexture, this.get_ModelStyleInfo().mutateColorParam, this.get_ModelStyleInfo().ornamentId, this.get_ModelStyleInfo().ornamentColorParam, null);
                    }
                }
                else {
                    ModelHelper.SetPetLook(modelGo, this.get_ModelStyleInfo().mainTexture, this.get_ModelStyleInfo().mutateTexture, this.get_ModelStyleInfo().mutateColorParam, this.get_ModelStyleInfo().ornamentId, this.get_ModelStyleInfo().ornamentColorParam, null);
                    ModelHelper.UpdateModelWeapon(modelGo, this.get_ModelStyleInfo().defaultModelId, this.get_ModelStyleInfo().weaponId, this.get_ModelStyleInfo().weaponEffLv, this.get_ModelStyleInfo().weaponEffId, this._uiMode, $CreateDelegate(this, this.OnLoadWeaponFinish));
                }
            }
            if (this._loadingCount <= 0){
                if (this._waitingInfo != null){
                    this.SetLookInfo(this._waitingInfo);
                }
                else {
                    if (UnityEngine.Object.op_Inequality(this._rideRoleGO, null)){
                        for (var i = 0,n = this._gameobjectList.get_Count(); i < n; i++){
                            GameObjectExt.AddPoolChild(this._rideRoleGO.get_gameObject(), this._gameobjectList.get_Item$$Int32(i), 0, 0, 0);
                        }
                    }
                    if (this._onLoadModelFinish != null){
                        this._onLoadModelFinish();
                    }
                    this.get_ModelAlphaUpdater().ResetTransparent(this._alpha);
                }
            }
        },
        OnLoadWeaponFinish: function (wpGo){
            this.get_ModelAlphaUpdater().ResetTransparent(this._alpha);
        },
        UpdateHallowSprite: function (){
            this.mSoulEffect = null;
            if (this.get_CanShowHallowSprite()){
                ModelHelper.SetSoulEffectActive(this._mModelGO, this.get_ModelStyleInfo().get_SoulModelId(), $CreateDelegate(this, this.OnLoadSoulEffect));
            }
            else {
                ModelHelper.SetSoulEffectActive(this._mModelGO, null, null);
            }
        },
        CanShowHallowSprite$$: "System.Boolean",
        get_CanShowHallowSprite: function (){
            if (null != this.get_ModelStyleInfo()){
                GameDebuger.TODO("if (null == ModelStyleInfo.FashionWeapon) //需求：有手持时装时不显示器灵。");
                return !System.String.IsNullOrEmpty(this.get_ModelStyleInfo().get_SoulModelId());
            }
            return false;
        },
        SetSurroundEffectBottomActive: function (active){
            GameDebuger.TODO("if (ModelStyleInfo == null || ModelStyleInfo.FashionSurroundEffect == null)");
            if (this.get_ModelStyleInfo() == null){
                return;
            }
            GameDebuger.TODO("if (_uiMode == false && ModelManager.SystemData.fashionEffectToggle == false)");
            if (this._uiMode == false){
                return;
            }
            if (UnityEngine.Object.op_Equality(this._surroundEffBottom, null)){
                this._activeSurroundEffFlag = active;
            }
            else {
                this._surroundEffBottom.SetActive(active);
            }
        },
        SetSoulEffectActive: function (active){
            if (this.get_ModelStyleInfo() == null || System.String.IsNullOrEmpty(this.get_ModelStyleInfo().get_SoulModelId())){
                return;
            }
            GameDebuger.TODO("if (_uiMode == false && ModelManager.SystemData.hallowSpriteEffectToggle == false)");
            if (this._uiMode == false){
                return;
            }
            if (UnityEngine.Object.op_Equality(this.mSoulEffect, null)){
                this.mActiveSoulEffFlag = active;
            }
            else {
                this.mSoulEffect.SetActive(active);
            }
        },
        SetFootprintActive: function (active){
            GameDebuger.TODO("if (ModelStyleInfo == null || ModelStyleInfo.FashionFootprint == null)");
            if (this.get_ModelStyleInfo() == null){
                return;
            }
            this._activeFootPringEffFlag = active;
            if (this._footprintEffects != null && this._footprintEffects.length > 0){
                for (var i = 0; i < this._footprintEffects.length; i++){
                    if (UnityEngine.Object.op_Inequality(this._footprintEffects[i], null)){
                        if (active){
                            this._footprintEffects[i].Play();
                        }
                        else {
                            this._footprintEffects[i].Stop();
                        }
                    }
                }
            }
            if (this._footpringRenderers != null && this._footpringRenderers.get_Count() > 0){
                for (var i = 0; i < this._footpringRenderers.get_Count(); i++){
                    if (Is(this._footpringRenderers.get_Item$$Int32(i), UnityEngine.TrailRenderer.ctor)){
                        this._footpringRenderers.get_Item$$Int32(i).set_enabled(active);
                    }
                }
            }
        },
        OnLoadSurroundEffect: function (effGo){
            if (UnityEngine.Object.op_Equality(this._root, null)){
                UnityEngine.Debug.LogError$$Object("OnLoadSurroundEffect _root == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                return;
            }
            if (this.get_ModelStyleInfo() == null){
                UnityEngine.Debug.LogError$$Object("OnLoadSurroundEffect ModelStyleInfo == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                return;
            }
            GameDebuger.TODO("if (ModelStyleInfo.FashionSurroundEffect == null)\n        {\n            Debug.LogError(\'OnLoadSurroundEffect FashionSurroundEffect == null\');\n            AssetPipeline.ResourcePoolManager.Instance.DespawnEffect(effGo);\n            return;\n        }");
            if (this._uiMode){
                effGo.set_tag("Untagged" /* GameTag.Tag_Untagged */);
            }
            effGo.SetActive(true);
            var effTrans = effGo.get_transform();
            for (var i = 0,imax = effTrans.get_childCount(); i < imax; ++i){
                var child = effTrans.GetChild(i);
                GameDebuger.TODO("if (child.name.Contains(ModelStyleInfo.FashionSurroundEffect.modelId) && !child.name.Contains(\'_2\'))\n            {\n                if (_uiMode == false)\n                {\n                    child.tag = GameTag.Tag_UnitEffect;\n                    ModelHelper.ToggleFashionEffect(child.gameObject, ModelManager.SystemData.fashionEffectToggle);\n                }\n            }");
            }
            GameDebuger.TODO("var bottom = effGo.transform.Find(ModelStyleInfo.FashionSurroundEffect.modelId + \'_2\');\n        if (bottom != null)\n        {\n            _surroundEffBottom = bottom.gameObject;\n            bool activeSurroundEffFlag = _activeSurroundEffFlag;\n            if (_uiMode == false) //非ＵＩ\n            {\n                _surroundEffBottom.SetActive(true);\n                bottom.tag = GameTag.Tag_UnitEffect;\n                if (_activeSurroundEffFlag)\n                {\n                    ModelHelper.ToggleFashionEffect(bottom.gameObject, ModelManager.SystemData.fashionEffectToggle);\n                }\n                else\n                {\n                    ModelHelper.ToggleFashionEffect(bottom.gameObject, false);\n                }\n            }\n            else\n            {\n                _surroundEffBottom.SetActive(activeSurroundEffFlag);\n            }\n        }\n        else\n        {\n            GameDebuger.Log(\'Can not find SurroundEffect bottom\');\n        }");
        },
        OnLoadSoulEffect: function (effGo){
            if (UnityEngine.Object.op_Equality(this._root, null)){
                UnityEngine.Debug.LogError$$Object("OnLoadSoulEffect _root == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                return;
            }
            if (this.get_ModelStyleInfo() == null){
                UnityEngine.Debug.LogError$$Object("OnLoadSoulEffect ModelStyleInfo == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                return;
            }
            this.mSoulEffect = effGo;
            if (this._uiMode){
                this.mSoulEffect.set_tag("Untagged" /* GameTag.Tag_Untagged */);
            }
            this.mSoulEffect.SetActive(true);
            var $it26 = this.mSoulEffect.get_transform().GetEnumerator();
            while ($it26.MoveNext()){
                var child = $it26.get_Current();
                if (child.get_name().Contains(this.get_ModelStyleInfo().get_SoulModelId())){
                    if (this._uiMode == false){
                        child.set_tag("UnitEffect" /* GameTag.Tag_UnitEffect */);
                        GameDebuger.TODO("ModelHelper.ToggleHallowSpriteEffect(child.gameObject,\n                        ModelManager.SystemData.hallowSpriteEffectToggle);");
                    }
                }
            }
            var tModel = DataCache.getDtoByCls$1(AppDto.Model.ctor, this.get_ModelStyleInfo().get_hallowSpriteId());
            if (null != tModel){
                this.mSoulEffect.get_transform().set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(tModel.scale, tModel.scale, tModel.scale));
            }
            this.UpdateSoulAction();
            this.get_ModelAlphaUpdater().ResetTransparent(this._alpha);
        },
        UpdateSoulAction: function (){
            if (UnityEngine.Object.op_Inequality(null, this.mSoulEffect)){
                if (null == this.mSoulAnimatorTimer){
                    this.mSoulAnimatorTimer = JSTimer.get_Instance().SetupTimer("SoulAnima_" + this.mSoulEffect.GetInstanceID(), $CreateDelegate(this, this.UpdateSoulAction), GeneralUnit.GetAnimateRandomTime(), false);
                }
                else {
                    this.mSoulAnimatorTimer.Reset($CreateDelegate(this, this.UpdateSoulAction), GeneralUnit.GetAnimateRandomTime(), false);
                    ModelHelper.PlayAnimation(this.get_SoulAnimator(), "show" /* ModelHelper.Anim_show */, false, null, true, 0);
                }
            }
        },
        ClearSoul: function (){
            if (UnityEngine.Object.op_Inequality(null, this.mSoulEffect)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this.mSoulEffect, false);
                this.mSoulEffect = null;
            }
            this.mSoulAnimator = null;
            if (null != this.mSoulAnimatorTimer){
                this.mSoulAnimatorTimer.Cancel();
                this.mSoulAnimatorTimer = null;
            }
        },
        OnLoadFootprintEffect: function (effGo){
            if (UnityEngine.Object.op_Equality(this._root, null)){
                UnityEngine.Debug.LogError$$Object("OnLoadFootprintEffect _root == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                return;
            }
            if (this.get_ModelStyleInfo() == null){
                UnityEngine.Debug.LogError$$Object("OnLoadFootprintEffect _petLookInfo == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                return;
            }
            GameDebuger.TODO("if (ModelStyleInfo.FashionFootprint == null)\n        {\n            Debug.LogError(\'OnLoadSurroundEffect FashionFootprint == null\');\n            AssetPipeline.ResourcePoolManager.Instance.DespawnEffect(effGo);\n            return;\n        }");
            if (this._uiMode){
                effGo.set_tag("Untagged" /* GameTag.Tag_Untagged */);
            }
            else {
                effGo.set_tag("UnitEffect" /* GameTag.Tag_UnitEffect */);
            }
            if (this._uiMode == false){
                GameDebuger.TODO("ModelHelper.ToggleFashionEffect(effGo, ModelManager.SystemData.fashionEffectToggle);");
            }
            this._footprintEffects = effGo.GetComponentsInChildren$1$$Boolean(UnityEngine.ParticleSystem.ctor, true);
            if (this._footprintEffects.length == 0){
                UnityEngine.Debug.LogError$$Object("Has nothing find footprint ParticleSystem");
            }
            else {
                for (var i = 0; i < this._footprintEffects.length; i++){
                    this._footprintEffects[i].set_playOnAwake(this._activeFootPringEffFlag);
                    if (this._activeFootPringEffFlag){
                        this._footprintEffects[i].Play();
                    }
                    else {
                        this._footprintEffects[i].Stop();
                    }
                }
            }
            var renderers = effGo.GetComponentsInChildren$1$$Boolean(UnityEngine.Renderer.ctor, true);
            if (renderers.length == 0){
                UnityEngine.Debug.LogError$$Object("Has nothing find footprint Renderer");
            }
            else {
                this._footpringRenderers = new System.Collections.Generic.List$1.ctor$$Int32(UnityEngine.Renderer.ctor, renderers.length);
                for (var i = 0; i < renderers.length; i++){
                    if (!(Is(renderers[i], UnityEngine.ParticleSystemRenderer.ctor))){
                        renderers[i].set_enabled(this._activeFootPringEffFlag);
                        this._footpringRenderers.Add(renderers[i]);
                    }
                }
            }
            GameDebuger.TODO("if (ItemHelper.IsFootDirection(ModelStyleInfo.FashionFootprint))");
            var rotationRoot = this._root.get_name().Contains("ModelRender") ? this._mModelGO : this._root;
            if (UnityEngine.Object.op_Inequality(rotationRoot, null)){
                var prs = GameObjectExt.GetMissingComponent$1(ParticleRotationSync.ctor, effGo);
                prs.target = rotationRoot.get_transform();
            }
        },
        LoadRideModel$$Int32$$String: function (rideId, defaultModel){
            if (UnityEngine.Object.op_Equality(this._root, null))
                return;
            if (rideId > 0){
                var rideName = "ride_pet_" + rideId.toString();
                if (UnityEngine.Object.op_Inequality(this._rideGO, null) && this._rideGO.get_name().Contains(rideName)){
                    this.LoadStyleModel();
                    return;
                }
                var modelResKey = rideName;
                if (!AssetPipeline.AssetManager.get_Instance().ContainBundleName$$String$$ResGroup(modelResKey, 20)){
                    GameDebuger.LogError("ModelDisplayer.LoadRideModel Use Default model " + modelResKey, null);
                    modelResKey = defaultModel;
                }
                this._loadingRideCount = 1;
                var handler = AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync(modelResKey, $CreateAnonymousDelegate(this, function (obj){
                    this.OnLoadRideModelFinish(modelResKey, obj);
                }), $CreateAnonymousDelegate(this, function (){
                    this.OnLoadError(modelResKey);
                }), 89);
                if (handler != null)
                    this._assetHandlerDic.Add(modelResKey, handler);
            }
            else {
                this.CleanRidePet();
                this.LoadStyleModel();
            }
        },
        CleanRidePet: function (){
            if (UnityEngine.Object.op_Inequality(this._rideGO, null)){
                for (var i = 0,n = this._gameobjectList.get_Count(); i < n; i++){
                    GameObjectExt.AddPoolChild(this._root, this._gameobjectList.get_Item$$Int32(i), 0, 0, 0);
                }
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(this._rideGO);
            }
            this._rideGO = null;
            this._rideRoleGO = null;
            this._rideassengerGO = null;
        },
        OnLoadRideModelFinish: function (modelResKey, obj){
            --this._loadingRideCount;
            this._assetHandlerDic.Remove(modelResKey);
            if (UnityEngine.Object.op_Equality(obj, null))
                return;
            if (UnityEngine.Object.op_Equality(this._root, null)){
                UnityEngine.Debug.LogError$$Object("LoadRideModel _root == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(obj);
                return;
            }
            if (this.get_ModelStyleInfo() == null){
                UnityEngine.Debug.LogError$$Object("LoadRideModel ModelStyleInfo == null");
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(obj);
                return;
            }
            var rideGo = As(obj, UnityEngine.GameObject.ctor);
            this.CleanRidePet();
            var mountTF = GameObjectExt.GetChildTransform(rideGo.get_transform(), "Mount_ride" /* ModelHelper.Mount_ride */);
            if (UnityEngine.Object.op_Inequality(mountTF, null)){
                GameObjectExt.AddPoolChild(this._root, rideGo, 0, 0, 0);
                this._rideRoleGO = mountTF;
            }
            else {
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("坐骑锚点不存在，坐骑模型={0}", modelResKey));
            }
            GameDebuger.TODO("Transform mountTF2 = GameObjectExt.GetChildTransform(rideGo.transform, ModelHelper.Mount_ride2);\n        if (mountTF2 != null)\n        {\n            _rideassengerGO = mountTF2;\n        }");
            this._rideGO = rideGo;
            if (UnityEngine.Object.op_Inequality(this._rideGO, null)){
                GameDebuger.TODO("ModelStyleInfo.ModelScale = IsOnSceneFlyMount() ? FlyRideAnimation.skyScale : 1f;");
                this.get_ModelStyleInfo().set_ModelScale(1);
                this._rideAnimator = this._rideGO.GetComponent$1(UnityEngine.Animator.ctor);
                this.PlayAnimation(this._defaultAnimate, false, false);
                this.SetShadowActive(this.get_ModelStyleInfo().showShadow, this.get_ModelStyleInfo().shadowScale);
            }
            ModelHelper.SetRideLook(this._rideGO, this.get_ModelStyleInfo().rideMutateColorParam, this.get_ModelStyleInfo().rideOrnamentId, this.get_ModelStyleInfo().rideOrnamentColorParam, this.get_ModelStyleInfo().rideMaxEffect, this.get_ModelStyleInfo().rideEffect, null);
            this.UpdateRotation(this._defaultRotation);
            this.UpdateScale(this.get_ModelStyleInfo().get_ModelScale());
            this.SetActive(this._activeFlag);
            this.LoadStyleModel();
        },
        UpdateRotation: function (rotation){
            this._defaultRotation = rotation;
            if (UnityEngine.Object.op_Inequality(this._rideGO, null)){
                this._rideGO.get_transform().set_localEulerAngles(rotation);
            }
            else {
                if (this._transformList.get_Count() > 0){
                    for (var i = 0,n = this._transformList.get_Count(); i < n; i++){
                        this._transformList.get_Item$$Int32(i).set_localEulerAngles(rotation);
                    }
                }
            }
        },
        Rotate: function (angle){
            if (UnityEngine.Object.op_Inequality(this._rideGO, null)){
                this._rideGO.get_transform().Rotate$$Vector3$$Single(this._rideGO.get_transform().get_up(), angle);
            }
            else {
                if (this._transformList.get_Count() > 0){
                    for (var i = 0,n = this._transformList.get_Count(); i < n; i++){
                        this._transformList.get_Item$$Int32(i).Rotate$$Vector3$$Single(this._transformList.get_Item$$Int32(i).get_up(), angle);
                    }
                }
            }
        },
        UpdateScale: function (scale){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().set_ModelScale(scale);
            var newScale = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this.get_ModelStyleInfo().get_ModelScale(), this.get_ModelStyleInfo().get_ModelScale(), this.get_ModelStyleInfo().get_ModelScale());
            if (UnityEngine.Object.op_Inequality(this._rideGO, null)){
                this._rideGO.get_transform().set_localScale(newScale);
            }
            else {
                if (this._transformList.get_Count() > 0){
                    for (var i = 0,n = this._transformList.get_Count(); i < n; i++){
                        this._transformList.get_Item$$Int32(i).set_localScale(newScale);
                    }
                }
            }
        },
        SetShadowActive: function (active, scale){
            var shadowParentGO = null;
            if (this.get_ModelStyleInfo().get_HasRide()){
                shadowParentGO = this._rideGO;
            }
            else {
                shadowParentGO = this._mModelGO;
            }
            if (active){
                ModelHelper.SetPetShadow(shadowParentGO, scale);
            }
            else {
                ModelHelper.RemovePetShadow(shadowParentGO);
            }
        },
        GetMountingPoint: function (mount){
            var mountParentGO = this._mModelGO;
            if (mount == "Mount_Shadow" /* ModelHelper.Mount_shadow */){
                if (this.get_ModelStyleInfo().get_HasRide()){
                    mountParentGO = this._rideGO;
                }
                else {
                    mountParentGO = this._mModelGO;
                }
            }
            if (UnityEngine.Object.op_Inequality(mountParentGO, null)){
                var mountTF = ModelHelper.GetMountingPoint(mountParentGO, mount);
                if (UnityEngine.Object.op_Equality(mountTF, null)){
                    return mountParentGO.get_transform();
                }
                return mountTF;
            }
            return null;
        },
        ClearMountingPoint: function (mount){
            var mountParentGO = this._mModelGO;
            if (UnityEngine.Object.op_Inequality(mountParentGO, null)){
                var mountTF = ModelHelper.GetMountingPoint(mountParentGO, mount);
                if (UnityEngine.Object.op_Inequality(mountTF, null)){
                    GameObjectExt.RemoveChildren$$Transform(mountTF);
                }
            }
        },
        UpdateRide: function (rideId){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().rideId = rideId;
            if (rideId == 0)
                this.get_ModelStyleInfo().set_ModelScale(1);
            this.LoadRideModel();
        },
        UpdateWeapon: function (weaponId){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().weaponId = weaponId;
            GameDebuger.TODO("if (_mModelGO != null && !ModelStyleInfo.IsTransformModel && ModelStyleInfo.FashionWeapon == null)");
            ModelHelper.UpdateModelWeapon(this._mModelGO, this.get_ModelStyleInfo().defaultModelId, this.get_ModelStyleInfo().weaponId, this.get_ModelStyleInfo().weaponEffLv, this.get_ModelStyleInfo().weaponEffId, this._uiMode, $CreateDelegate(this, this.OnLoadWeaponFinish));
        },
        UpdateWeaponEff: function (weaponEffId){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().weaponEffId = weaponEffId;
            GameDebuger.TODO("if (_mModelGO != null && !ModelStyleInfo.IsTransformModel && ModelStyleInfo.FashionWeapon == null)");
            ModelHelper.UpdateModelWeapon(this._mModelGO, this.get_ModelStyleInfo().defaultModelId, this.get_ModelStyleInfo().weaponId, this.get_ModelStyleInfo().weaponEffLv, this.get_ModelStyleInfo().weaponEffId, this._uiMode, $CreateDelegate(this, this.OnLoadWeaponFinish));
        },
        UpdateHallowSprite$$Int32: function (pHallowSpriteId){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().set_hallowSpriteId(pHallowSpriteId);
            this.UpdateHallowSprite();
        },
        UpdateModelHSV: function (mutateColor, mutateTexture){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().mutateTexture = mutateTexture;
            this.get_ModelStyleInfo().mutateColorParam = mutateColor;
            if (UnityEngine.Object.op_Inequality(this._mModelGO, null) && !this.get_ModelStyleInfo().get_IsTransformModel() && !this.get_ModelStyleInfo().get_IsFashionModel()){
                ModelHelper.SetPetLook(this._mModelGO, this.get_ModelStyleInfo().mainTexture, this.get_ModelStyleInfo().mutateTexture, this.get_ModelStyleInfo().mutateColorParam, this.get_ModelStyleInfo().ornamentId, this.get_ModelStyleInfo().ornamentColorParam, null);
            }
        },
        UpdateTestModelHSV: function (mutateColor, mutateTexture){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().mutateTexture = mutateTexture;
            this.get_ModelStyleInfo().mutateColorParam = mutateColor;
            if (UnityEngine.Object.op_Inequality(this._mModelGO, null) && !this.get_ModelStyleInfo().get_IsFashionModel()){
                ModelHelper.SetPetLook(this._mModelGO, this.get_ModelStyleInfo().mainTexture, this.get_ModelStyleInfo().mutateTexture, this.get_ModelStyleInfo().mutateColorParam, this.get_ModelStyleInfo().ornamentId, this.get_ModelStyleInfo().ornamentColorParam, null);
            }
        },
        UpdateRideModelHSV: function (mutateColor){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().rideMutateColorParam = mutateColor;
            if (UnityEngine.Object.op_Inequality(this._rideGO, null) && !this.get_ModelStyleInfo().get_IsTransformModel() && !this.get_ModelStyleInfo().get_IsFashionModel()){
                ModelHelper.SetRideLook(this._rideGO, this.get_ModelStyleInfo().rideMutateColorParam, this.get_ModelStyleInfo().rideOrnamentId, this.get_ModelStyleInfo().rideOrnamentColorParam, this.get_ModelStyleInfo().rideMaxEffect, this.get_ModelStyleInfo().rideEffect, null);
            }
        },
        UpdateOrnamentColorParam: function (ornamentColorParam){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().ornamentColorParam = ornamentColorParam;
            if (UnityEngine.Object.op_Inequality(this._mModelGO, null) && !this.get_ModelStyleInfo().get_IsTransformModel()){
                ModelHelper.SetPetLook(this._mModelGO, this.get_ModelStyleInfo().mainTexture, this.get_ModelStyleInfo().mutateTexture, this.get_ModelStyleInfo().mutateColorParam, this.get_ModelStyleInfo().ornamentId, this.get_ModelStyleInfo().ornamentColorParam, null);
            }
        },
        UpdateRideOrnamentColorParam: function (ornamentColorParam){
            if (this.get_ModelStyleInfo() == null)
                return;
            this.get_ModelStyleInfo().rideOrnamentColorParam = ornamentColorParam;
            if (UnityEngine.Object.op_Inequality(this._mModelGO, null) && !this.get_ModelStyleInfo().get_IsTransformModel()){
                ModelHelper.SetRideLook(this._rideGO, this.get_ModelStyleInfo().rideMutateColorParam, this.get_ModelStyleInfo().rideOrnamentId, this.get_ModelStyleInfo().rideOrnamentColorParam, this.get_ModelStyleInfo().rideMaxEffect, this.get_ModelStyleInfo().rideEffect, null);
            }
        },
        DOLocalMove: function (endValue, duration){
            if (UnityEngine.Object.op_Inequality(this._mModelTrans, null)){
                DG.Tweening.ShortcutExtensions.DOLocalMove(this._mModelTrans, endValue, duration, false);
            }
        },
        SetActive: function (active){
            this._activeFlag = active;
            for (var i = 0,n = this._gameobjectList.get_Count(); i < n; i++){
                if (UnityEngine.Object.op_Inequality(this._gameobjectList.get_Item$$Int32(i), null)){
                    this._gameobjectList.get_Item$$Int32(i).SetActive(active);
                }
            }
            if (UnityEngine.Object.op_Inequality(this._rideGO, null)){
                this._rideGO.SetActive(active);
            }
        },
        SetPersonActive: function (active){
            if (this._gameobjectList.get_Count() > 0){
                for (var i = 0,n = this._gameobjectList.get_Count(); i < n; i++){
                    this._gameobjectList.get_Item$$Int32(i).SetActive(active);
                }
            }
        },
        Clear: function (){
            var $it27 = this._assetHandlerDic.GetEnumerator();
            while ($it27.MoveNext()){
                var item = $it27.get_Current();
                var handler = item.get_Value();
                handler.Dispose();
            }
            this._assetHandlerDic.Clear();
            ModelHelper.RemoveSurroundAndFootEffect(this._mModelGO);
            if (UnityEngine.Object.op_Inequality(this._mModelGO, null)){
                var hudTF = GameObjectExt.GetChildTransform(this._mModelGO.get_transform(), "Mount_HUD" /* ModelHelper.Mount_hud */);
                var soulTF = GameObjectExt.GetChildTransform(this._mModelGO.get_transform(), "Mount_Soul" /* ModelHelper.Mount_soul */);
                if (this._hudY != 0 && UnityEngine.Object.op_Inequality(hudTF, null)){
                    hudTF.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(hudTF.get_localPosition().x, this._hudY, hudTF.get_localPosition().z));
                }
                if (this._soulY != 0 && UnityEngine.Object.op_Inequality(soulTF, null)){
                    soulTF.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(soulTF.get_localPosition().x, this._soulY, soulTF.get_localPosition().z));
                }
            }
            this._hudY = 0;
            this._soulY = 0;
            this._changeMountPosition = false;
            this.CleanRidePet();
            this.ClearSoul();
            for (var i = 0,n = this._gameobjectList.get_Count(); i < n; i++){
                if (UnityEngine.Object.op_Inequality(this._gameobjectList.get_Item$$Int32(i), null)){
                    ModelHelper.RemoveAllBindModel(this._gameobjectList.get_Item$$Int32(i));
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(this._gameobjectList.get_Item$$Int32(i));
                }
            }
            this._animatorList.Clear();
            this._gameobjectList.Clear();
            if (null != this.mModelAlphaUpdater){
                this.mModelAlphaUpdater.Dispose();
                this.mModelAlphaUpdater = null;
            }
            this._transformList.Clear();
            this._surroundEffBottom = null;
            this._footprintEffects = null;
            this._footpringRenderers = null;
            this._mModelGO = null;
            this._mModelTrans = null;
            this._mAnimator = null;
            this._rideAnimator = null;
            this._defaultAnimate = "";
            this._defaultRotation = UnityEngine.Vector3.get_zero();
            this._loadingCount = 0;
            this._loadingRideCount = 0;
        },
        Destory: function (){
            this.get_ModelAlphaUpdater().SetTransparent(1);
            if (UnityEngine.Object.op_Inequality(this._mModelGO, null))
                this.AppearEffect();
            this.Clear();
            this.set_ModelStyleInfo(null);
            this._waitingInfo = null;
        },
        PlayAnimateWithCallback: function (animate, crossFade, animClipCallBack, checkSameAnim, layer){
            if (UnityEngine.Object.op_Equality(this._mAnimator, null)){
                if (animClipCallBack != null){
                    animClipCallBack(animate, 0);
                }
                return;
            }
            for (var i = 0,n = this._animatorList.get_Count(); i < n; i++){
                var animator = this._animatorList.get_Item$$Int32(i);
                if (UnityEngine.Object.op_Equality(animator, this._mAnimator)){
                    ModelHelper.PlayAnimation(this._mAnimator, animate, crossFade, animClipCallBack, checkSameAnim, layer);
                }
                else {
                    ModelHelper.PlayAnimation(this._animatorList.get_Item$$Int32(i), animate, crossFade, null, false, 0);
                }
            }
        },
        IsAnimatorReady: function (){
            return UnityEngine.Object.op_Inequality(this._mAnimator, null);
        },
        GetCurrentAnimatorStateInfo: function (layer){
            if (UnityEngine.Object.op_Equality(this._mAnimator, null)){
                return new UnityEngine.AnimatorStateInfo.ctor();
            }
            return this._mAnimator.GetCurrentAnimatorStateInfo(layer);
        },
        PlayAnimation: function (clip, crossFade, checkSameAnim){
            if (System.String.IsNullOrEmpty(clip)){
                return;
            }
            this._defaultAnimate = clip;
            var playerAnimation = this.GetPlayerAnimation();
            if (this.get_ModelStyleInfo() != null && this.get_ModelStyleInfo().get_HasRide()){
                this.ModifyModelMount(this._mModelGO, playerAnimation);
            }
            if (UnityEngine.Object.op_Inequality(this._rideAnimator, null)){
                ModelHelper.PlayAnimation(this._rideAnimator, this._defaultAnimate, crossFade, null, checkSameAnim, 0);
            }
            if (this._animatorList.get_Count() > 0){
                for (var i = 0,n = this._animatorList.get_Count(); i < n; i++){
                    ModelHelper.PlayAnimation(this._animatorList.get_Item$$Int32(i), playerAnimation, crossFade, null, checkSameAnim, 0);
                }
            }
            if (playerAnimation == "run" /* ModelHelper.Anim_run */){
                this.SetSurroundEffectBottomActive(false);
                this.SetFootprintActive(true);
            }
            else {
                this.SetSurroundEffectBottomActive(true);
                this.SetFootprintActive(false);
            }
        },
        GetPlayerAnimation: function (){
            var playerAnimation = this._defaultAnimate;
            if (this.get_ModelStyleInfo() != null && this.get_ModelStyleInfo().get_HasRide()){
                GameDebuger.TODO("int mountType = ModelManager.Mount.getMountType(ModelStyleInfo.rideId);\n            if (mountType == Mount.MountType_Land)\n            {\n                if (_defaultAnimate == ModelHelper.Anim_idle)\n                {\n                    playerAnimation = ModelHelper.Anim_ride_idle;\n                }\n                else if (_defaultAnimate == ModelHelper.Anim_run)\n                {\n                    playerAnimation = ModelHelper.Anim_ride_run;\n                }\n            }\n            else");
                playerAnimation = "idle" /* ModelHelper.Anim_idle */;
            }
            return playerAnimation;
        },
        ModifyModelMount: function (go, animate){
            if (UnityEngine.Object.op_Equality(go, null)){
                return;
            }
            var newStatus = false;
            if (animate == "rideIdle" /* ModelHelper.Anim_ride_idle */ || animate == "rideRun" /* ModelHelper.Anim_ride_run */){
                newStatus = true;
            }
            else {
                newStatus = false;
            }
            if (this._changeMountPosition != newStatus){
                this._changeMountPosition = newStatus;
                var hudTF = GameObjectExt.GetChildTransform(go.get_transform(), "Mount_HUD" /* ModelHelper.Mount_hud */);
                var soulTF = GameObjectExt.GetChildTransform(go.get_transform(), "Mount_Soul" /* ModelHelper.Mount_soul */);
                if (this._hudY == 0 && UnityEngine.Object.op_Inequality(hudTF, null)){
                    this._hudY = hudTF.get_localPosition().y;
                }
                if (this._soulY == 0 && UnityEngine.Object.op_Inequality(soulTF, null)){
                    this._soulY = soulTF.get_localPosition().y;
                }
                if (this._changeMountPosition){
                    if (UnityEngine.Object.op_Inequality(hudTF, null))
                        hudTF.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(hudTF.get_localPosition().x, hudTF.get_localPosition().y + 0.6, hudTF.get_localPosition().z));
                    if (UnityEngine.Object.op_Inequality(soulTF, null))
                        soulTF.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(soulTF.get_localPosition().x, soulTF.get_localPosition().y + 0.6, soulTF.get_localPosition().z));
                }
                else {
                    if (UnityEngine.Object.op_Inequality(hudTF, null))
                        hudTF.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(hudTF.get_localPosition().x, this._hudY, hudTF.get_localPosition().z));
                    if (UnityEngine.Object.op_Inequality(soulTF, null))
                        soulTF.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(soulTF.get_localPosition().x, this._soulY, soulTF.get_localPosition().z));
                }
            }
        },
        OnEnable: function (){
            if (!System.String.IsNullOrEmpty(this._defaultAnimate)){
                this.PlayAnimation(this._defaultAnimate, false, false);
            }
        },
        OnDisable: function (){
        },
        HideEffect: function (){
            var list = this._mModelGO.GetComponentsInChildren$1(UnityEngine.Renderer.ctor);
            for (var index = 0; index < list.length; index++){
                list[index].set_enabled(false);
            }
        },
        AppearEffect: function (){
            var list = this._mModelGO.GetComponentsInChildren$1(UnityEngine.Renderer.ctor);
            for (var index = 0; index < list.length; index++){
                list[index].set_enabled(true);
            }
        },
        ModelAlphaUpdater$$: "ModelAlphaUpdater",
        get_ModelAlphaUpdater: function (){
            if (null == this.mModelAlphaUpdater){
                this.mModelAlphaUpdater = new ModelAlphaUpdater.ctor();
                this.mModelAlphaUpdater.Initialize(this._root, this._uiMode);
            }
            return this.mModelAlphaUpdater;
        }
    }
};
JsTypes.push(ModelDisplayer);
var PlayerView = {
    fullname: "PlayerView",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            PlayerView.LoadingModelDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, PlayerView.ctor);
            PlayerView.PlayerVisibleCount = 0;
            PlayerView.PlayerRideVisibleCount = 0;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isRunning = false;
            this._isVisual = false;
            this._isModelActive = true;
            this._mAgent = null;
            this._mGo = null;
            this._mTrans = null;
            this._characterController = null;
            this._loadingStyleInfo = null;
            this._modelDisplayer = null;
            this._playerDto = null;
            this.headHud = null;
            this.titleHud = null;
            this._toTargetCallback = null;
            this._disposable = null;
            this._escortEffectNames = ["", "game_eff_2021_Effect", "game_eff_2022_Effect"];
            this._escortSpriteNames = ["", "nornal", "advance"];
            this._escortEffectDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, OneShotUIEffect.ctor);
            this._walkWithJoystick = false;
            this.leaderView = null;
            this.inTeamPlayerList = new System.Collections.Generic.List$1.ctor$$Int32(PlayerView.ctor, 5);
            this.loadFinish = false;
            this._IsHero = false;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        toTargetCallback$$: "System.Action",
        set_toTargetCallback: function (value){
            this._toTargetCallback = value;
        },
        SetupPlayerDto: function (dto, isHero){
            this._playerDto = dto;
            this.set_IsHero(isHero);
            if (UnityEngine.Object.op_Equality(this._mGo, null))
                this._mGo = this.get_gameObject();
            if (UnityEngine.Object.op_Equality(this._mTrans, null))
                this._mTrans = this.get_transform();
            if (UnityEngine.Object.op_Equality(this._characterController, null))
                this._characterController = this._mGo.GetComponent$1(UnityEngine.CharacterController.ctor);
            GameDebuger.TODO("ChangeSize(dto.scale, dto.scaleExpireAt);");
            this._isModelActive = true;
            if (this._modelDisplayer == null)
                this._modelDisplayer = new ModelDisplayer.ctor(this._mGo, $CreateDelegate(this, this.OnLoadModelFinish), false);
            if (UnityEngine.Object.op_Equality(this._mAgent, null)){
                this._mAgent = GameObjectExt.GetMissingComponent$1(UnityEngine.NavMeshAgent.ctor, this._mGo);
                this._mAgent.set_radius(0.4);
                this._mAgent.set_speed(dto.moveSpeed);
                this._mAgent.set_acceleration(1000);
                this._mAgent.set_angularSpeed(1000);
                this._mAgent.set_obstacleAvoidanceType(0);
                this._mAgent.set_autoTraverseOffMeshLink(false);
                this._mAgent.set_autoBraking(true);
                this._mAgent.set_autoRepath(false);
            }
            var pos = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(this._playerDto.x, 0, this._playerDto.z), UnityEngine.Vector3.get_zero());
            GameDebuger.Log("新加玩家View " + this._playerDto.name + " 位置=" + pos, null);
            this.ResetPos(pos);
            if (this.get_IsHero()){
                GameDebuger.TODO("GameEventCenter.AddListener(GameEvent.Player_OnPlayerNicknameUpdate, UpdatePlayerNickName);\n            GameEventCenter.AddListener(GameEvent.Player_OnPlayerGradeUpdate, OnHeroGradeUpdate);\n            GameEventCenter.AddListener(GameEvent.Backpack_OnWeaponModelChange, UpdateWeapon);\n            GameEventCenter.AddListener(GameEvent.Backpack_OnHallowSpriteChange, UpdateHallowSprite);");
                GameEventCenter.AddListener$$Event$$Action(GameEvent.Team_OnTeamStateUpdate, $CreateDelegate(this, this.HandleOnTeamStateUpdate));
                this.InitModel();
            }
            else {
                var checker = GameObjectExt.GetMissingComponent$1(ModelVisibleChecker.ctor, this._mGo);
                checker.Setup($CreateDelegate(this, this.OnVisible), $CreateDelegate(this, this.OnInvisible), 2);
            }
        },
        UpdatePlayerDto: function (playerDto){
            this._playerDto = playerDto;
        },
        OnHeroGradeUpdate: function (){
            var effpath = GameEffectConst.GetGameEffectPath("game_eff_2001" /* GameEffectConst.Effect_PlayerUpgrade */);
            OneShotSceneEffect.BeginFollowEffect(effpath, this.get_transform(), 3, 1, null);
            AudioManager.get_Instance().PlaySound("sound_UI_upgrade");
        },
        Update: function (){
            if (UnityEngine.Object.op_Inequality(this.leaderView, null)){
                if (this.leaderView._isRunning){
                    var dest = UnityEngine.Vector3.op_Subtraction(this.leaderView.get_cachedTransform().get_position(), UnityEngine.Vector3.op_Multiply$$Vector3$$Single(UnityEngine.Vector3.op_Multiply$$Single$$Vector3(this._playerDto.teamIndex, this.leaderView.get_cachedTransform().get_forward()), (this._mAgent.get_radius() + 0.5)));
                    if (this._mAgent.get_isActiveAndEnabled()){
                        this._mAgent.SetDestination(dest);
                        this.PlayRunAnimation();
                    }
                    else {
                        this.ResetPos(dest);
                        this.PlayIdleAnimation();
                    }
                }
                else {
                    if (UnityEngine.Object.op_Inequality(this._mAgent, null) && this._mAgent.get_isActiveAndEnabled() && this._mAgent.get_hasPath()){
                        this._mAgent.ResetPath();
                    }
                    this.PlayIdleAnimation();
                }
            }
            else {
                if (this._playerDto.teamStatus == 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */){
                    if (UnityEngine.Object.op_Inequality(this._mAgent, null)){
                        this._mAgent.set_autoBraking(true);
                        this._mAgent.set_stoppingDistance(0);
                        if (this._mAgent.get_isActiveAndEnabled()){
                            this._mAgent.ResetPath();
                        }
                    }
                    this.PlayIdleAnimation();
                }
                else {
                    if (!this._walkWithJoystick){
                        this.UpdatePlayerAnimation();
                    }
                    if (this.get_IsHero() && this.loadFinish){
                    }
                }
            }
        },
        OnVisible: function (){
            if (this._isVisual)
                return;
            if (PlayerView.PlayerVisibleCount + 1 <= GameDisplayManager.MaxPlayerVisibleCount){
                this.InitModel();
            }
        },
        OnInvisible: function (){
            if (!this._isVisual)
                return;
            this.CleanUpModel();
            this.CleanUpHUDView();
        },
        OnEnable: function (){
            if (this._modelDisplayer != null){
                this._modelDisplayer.OnEnable();
            }
        },
        OnDisable: function (){
            if (this._modelDisplayer != null){
                this._modelDisplayer.OnDisable();
            }
        },
        DestroyMe: function (){
            this.CancelInvoke$$String("DelayStopNavFlag");
            this.ClearTeamLeader();
            if (this.get_IsHero()){
                GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.Backpack_OnWeaponModelChange, UpdateWeapon);\n            GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerNicknameUpdate, UpdatePlayerNickName);\n            GameEventCenter.RemoveListener(GameEvent.Player_OnPlayerGradeUpdate, OnHeroGradeUpdate);\n            GameEventCenter.RemoveListener(GameEvent.Backpack_OnHallowSpriteChange, UpdateHallowSprite);\n            //这里不需要如是更新，会走WorldView那里更新，那样更新才能让场景中所有的玩家看到效果。 see:http://oa.cilugame.com/redmine/issues/11069\n            //          GameEventCenter.RemoveListener(GameEvent.Mount_OnPlayerRideDtoUpdate, UpdatePlayerRideDto);\n            //          GameEventCenter.RemoveListener(GameEvent.Mount_OnRidingMountStatusChange, UpdatePlayerRideDto);\n\n            GameEventCenter.RemoveListener(GameEvent.Team_OnTeamStateUpdate, HandleOnTeamStateUpdate);");
            }
            this.CleanUpHUDView();
            this.CleanUpModel();
            this.ResetPos(UnityEngine.Vector3.get_zero());
            this.CleanEscortEff();
            this._playerDto = null;
            WorldManager.get_Instance().GetView().DespawnPlayerView(this);
        },
        ResetPos: function (dest){
            if (UnityEngine.Object.op_Equality(this._mAgent, null) || UnityEngine.Object.op_Equality(this._mTrans, null))
                return;
            this._mAgent.set_enabled(false);
            this._mTrans.set_position(dest);
            this._mAgent.set_enabled(true);
        },
        CleanUpHUDView: function (){
            if (this.titleHud != null){
                this.titleHud.Despawn();
                this.titleHud = null;
            }
            if (this.headHud != null){
                this.headHud.Despawn();
                this.headHud = null;
            }
        },
        CleanEscortEff: function (){
            GameDebuger.TODO("_lastEscortShipmentType = Shipment.ShipmentType_Unknown;");
            var escortList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(OneShotUIEffect.ctor, this._escortEffectDic.get_Values());
            for (var i = escortList.get_Count() - 1; i >= 0; i--){
                escortList.get_Item$$Int32(i).Dispose();
                escortList.set_Item$$Int32(i, null);
            }
            this._escortEffectDic.Clear();
        },
        ChangeToPoint: function (targetPoint){
            if (UnityEngine.Object.op_Equality(this._mAgent, null))
                return;
            this.ResetPos(targetPoint);
            this._walkWithJoystick = false;
            if (this.inTeamPlayerList.get_Count() > 0){
                for (var i = 0; i < this.inTeamPlayerList.get_Count(); ++i){
                    var memberView = this.inTeamPlayerList.get_Item$$Int32(i);
                    var dest = UnityEngine.Vector3.op_Subtraction(this._mTrans.get_position(), UnityEngine.Vector3.op_Multiply$$Vector3$$Single(UnityEngine.Vector3.op_Multiply$$Single$$Vector3(memberView._playerDto.teamIndex, this._mTrans.get_forward()), (this._mAgent.get_radius() + 0.5)));
                    memberView.ChangeToPoint(dest);
                }
            }
        },
        GetWalkPathList: function (){
            return this._mAgent.get_path().get_corners();
        },
        GetNavDestination: function (){
            return this._mAgent.get_destination();
        },
        StopAndIdle: function (){
            if (this.get_IsHero()){
                if (this._isRunning){
                    WorldManager.get_Instance().PlanWalk(this._mTrans.get_position().x, this._mTrans.get_position().z);
                    WorldManager.get_Instance().GetNpcViewManager().ResetWaitingTrigger();
                }
            }
            this._toTargetCallback = null;
            this._walkWithJoystick = false;
            this.PlayIdleAnimation();
            if (UnityEngine.Object.op_Inequality(this._mGo, null) && this._mGo.get_activeInHierarchy()){
                if (UnityEngine.Object.op_Inequality(this._mAgent, null) && this._mAgent.get_isActiveAndEnabled() && this._mAgent.get_hasPath()){
                    this._mAgent.ResetPath();
                }
            }
        },
        DelayStopNavFlag: function (){
            if (this._isRunning){
                return;
            }
            if (!ModelManager.get_Player().get_IsAutoFram()){
                this.SetNavFlag(false);
            }
        },
        DragBeginToWalk: function (){
            this.StopAndIdle();
            ModelManager.get_Player().StopAutoFram(false);
            this.SetNavFlag(false);
            this._walkWithJoystick = true;
        },
        WalkToPoint: function (targetPoint, toTargetCallback, randomRange){
            this._toTargetCallback = toTargetCallback;
            if (UnityEngine.Object.op_Equality(this._mAgent, null))
                return;
            if (this.get_IsHero()){
                if (randomRange){
                    WorldManager.get_Instance().PlanWalk(UnityEngine.Random.Range$$Single$$Single(targetPoint.x - 1, targetPoint.x + 1), UnityEngine.Random.Range$$Single$$Single(targetPoint.z - 1, targetPoint.z + 1));
                }
                else {
                    WorldManager.get_Instance().PlanWalk(targetPoint.x, targetPoint.z);
                }
                ModelManager.get_Player().StopAutoFram(false);
                WorldManager.get_Instance().GetNpcViewManager().ResetWaitingTrigger();
            }
            if (!this._mGo.get_activeInHierarchy() || !this._mAgent.get_isActiveAndEnabled()){
                this.ResetPos(targetPoint);
                this._isRunning = false;
            }
            else {
                this._mAgent.SetDestination(targetPoint);
            }
            this._walkWithJoystick = false;
        },
        UpdateTeamStatus: function (){
            if (this._playerDto.teamStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */){
                this.SetTeamLeaderFlag(true);
                this.leaderView = null;
                this._mAgent.set_autoBraking(true);
                GameDebuger.TODO("SetTeamInfoFlag(ModelManager.GuildCompetitionData.IsInActivityScene());");
            }
            else {
                this.SetTeamLeaderFlag(false);
                this.inTeamPlayerList.Clear();
                this.SetNavFlag(false);
                this.StopAndIdle();
            }
            if (this._playerDto.teamStatus == 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */){
                var leaderDto = WorldManager.get_Instance().GetModel().GetTeamLeader(this._playerDto.teamId);
                if (leaderDto != null){
                    var leaderView = WorldManager.get_Instance().GetView().GetPlayerView(leaderDto.id);
                    if (UnityEngine.Object.op_Inequality(leaderView, null)){
                        this.SetupTeamLeader(leaderView);
                    }
                    else {
                        if (this.get_IsHero()){
                            UnityEngine.Debug.LogError$$Object("场景中找不到队长View");
                        }
                    }
                }
                else {
                    if (this.get_IsHero()){
                        UnityEngine.Debug.LogError$$Object("场景中找不到队长Dto");
                    }
                }
            }
            else {
                this.ClearTeamLeader();
            }
        },
        SetTeamLeaderFlag: function (active){
            if (this.headHud != null){
                this.headHud.get_headHUDView().teamFlagSpriteAnimation.SetEnable(active);
            }
        },
        SetupTeamLeader: function (newLeader){
            if (UnityEngine.Object.op_Inequality(this.leaderView, newLeader)){
                this.leaderView = newLeader;
                this._mAgent.set_autoBraking(false);
                this._mAgent.set_stoppingDistance(0.2);
                this.leaderView.AddTeamMember(this);
            }
            if (UnityEngine.Object.op_Inequality(this.leaderView, null)){
                this._mAgent.set_speed(newLeader.GetPlayerDto().moveSpeed);
                var dest = UnityEngine.Vector3.op_Subtraction(this.leaderView.get_cachedTransform().get_position(), UnityEngine.Vector3.op_Multiply$$Vector3$$Single(UnityEngine.Vector3.op_Multiply$$Single$$Vector3(this._playerDto.teamIndex, this.leaderView.get_cachedTransform().get_forward()), (this._mAgent.get_radius() + 0.5)));
                this.ResetPos(dest);
                this._mTrans.set_rotation(this.leaderView.get_cachedTransform().get_rotation());
                this.SetNavFlag(false);
            }
            this.StopAndIdle();
            if (this._playerDto.id == ModelManager.get_Player().GetPlayerId()){
                ModelManager.get_Player().StopAutoFram(false);
            }
        },
        ClearTeamLeader: function (){
            this._mAgent.set_speed(this._playerDto.moveSpeed);
            if (UnityEngine.Object.op_Inequality(this.leaderView, null)){
                this.leaderView.RemoveTeamMember(this);
                this.leaderView = null;
                this._mAgent.set_autoBraking(true);
                this._mAgent.set_stoppingDistance(0);
                this.StopAndIdle();
            }
        },
        AddTeamMember: function (playerView){
            if (!this.inTeamPlayerList.Contains(playerView)){
                this.inTeamPlayerList.Add(playerView);
            }
        },
        RemoveTeamMember: function (playerView){
            this.inTeamPlayerList.Remove(playerView);
        },
        cachedGameObject$$: "UnityEngine.GameObject",
        get_cachedGameObject: function (){
            if (UnityEngine.Object.op_Equality(this._mGo, null))
                this._mGo = this.get_gameObject();
            return this._mGo;
        },
        cachedTransform$$: "UnityEngine.Transform",
        get_cachedTransform: function (){
            if (UnityEngine.Object.op_Equality(this._mTrans, null))
                this._mTrans = this.get_transform();
            return this._mTrans;
        },
        Speed$$: "System.Single",
        get_Speed: function (){
            return this._mAgent.get_speed();
        },
        CharacterController$$: "UnityEngine.CharacterController",
        get_CharacterController: function (){
            return this._characterController;
        },
        GetPlayerDto: function (){
            return this._playerDto;
        },
        IsHero$$: "System.Boolean",
        get_IsHero: function (){
            return this._IsHero;
        },
        set_IsHero: function (value){
            this._IsHero = value;
        },
        IsVisual: function (){
            return this._isVisual;
        },
        InitModel: function (){
            PlayerView.PlayerVisibleCount++;
            this._isVisual = true;
            if (this._modelDisplayer != null){
                var lookInfo = ModelStyleInfo.ToInfo$$ScenePlayerDto(this._playerDto);
                if (!this.get_IsHero()){
                    if (lookInfo.get_HasRide()){
                        if (PlayerView.PlayerRideVisibleCount + 1 > GameDisplayManager.MaxRideVisibleCount){
                            lookInfo.rideId = 0;
                        }
                        else {
                            PlayerView.PlayerRideVisibleCount++;
                        }
                    }
                }
                if (this.get_IsHero()){
                    this._modelDisplayer.SetLookInfo(lookInfo);
                }
                else {
                    PlayerView.LoadingModelDic.Add(this._playerDto.id, this);
                    this._loadingStyleInfo = lookInfo;
                    this.StopAllCoroutines();
                    this.StartCoroutine$$IEnumerator(this.DelayInitModel());
                }
            }
        },
        DelayInitModel: function*(){
            var delay = 0.2 * PlayerView.LoadingModelDic.get_Count();
            yield(new UnityEngine.WaitForSeconds.ctor(delay));
            if (this._playerDto != null){
                this._modelDisplayer.SetLookInfo(this._loadingStyleInfo);
                PlayerView.LoadingModelDic.Remove(this._playerDto.id);
            }
            this._loadingStyleInfo = null;
        },
        CleanUpModel: function (){
            if (this._isVisual)
                PlayerView.PlayerVisibleCount--;
            this._isVisual = false;
            this._isRunning = false;
            if (this._modelDisplayer != null){
                if (!this.get_IsHero()){
                    if (this._modelDisplayer.get_ModelStyleInfo() != null){
                        if (this._modelDisplayer.get_ModelStyleInfo().get_HasRide()){
                            PlayerView.PlayerRideVisibleCount--;
                        }
                    }
                }
                this._modelDisplayer.Destory();
                if (PlayerView.LoadingModelDic.ContainsKey(this._playerDto.id)){
                    PlayerView.LoadingModelDic.Remove(this._playerDto.id);
                    this._loadingStyleInfo = null;
                    this.StopAllCoroutines();
                }
            }
        },
        OnLoadModelFinish: function (){
            this.InitPlayerName();
            this.InitPlayerAnimation();
            this.loadFinish = true;
            if (this.get_IsHero()){
                this.SetPatrolFlag(ModelManager.get_Player().get_IsAutoFram());
            }
            GameDebuger.TODO("if (ModelManager.Marry.IsIMarry (_playerDto.id) || ModelManager.BridalSedan.IsSedanPlayer (_playerDto.id)) {\n            SetUnitActive (false);\n        } else");
            this.SetUnitActive(this._isModelActive);
        },
        UpdateWeapon: function (model){
            if (this._modelDisplayer != null){
                this._modelDisplayer.UpdateWeapon(model);
            }
        },
        UpdateWeaponEff: function (weaponEffId){
            if (this._modelDisplayer != null){
                this._modelDisplayer.UpdateWeaponEff(weaponEffId);
            }
        },
        UpdateHallowSprite: function (model){
            if (this._modelDisplayer != null){
                this._modelDisplayer.UpdateHallowSprite$$Int32(model);
            }
        },
        HandleOnTeamStateUpdate: function (){
            GameDebuger.TODO("SetTeamInfoFlag(ModelManager.GuildCompetitionData.IsInActivityScene());");
        },
        UpdatePlayerRideDto: function (){
            if (null != this._modelDisplayer){
                GameDebuger.TODO("PlayerRideDto tPlayerRideDto = ModelManager.Mount.GetPlayerRideDto ();\n            if (null != tPlayerRideDto) {\n                _modelDisplayer.UpdateRide (tPlayerRideDto.mountId);\n            }");
            }
        },
        UpdateRide: function (rideId){
            if (this._modelDisplayer != null){
                this._modelDisplayer.UpdateRide(rideId);
            }
        },
        UpdateModelHSV: function (){
            if (this._modelDisplayer != null){
                GameDebuger.TODO("_modelDisplayer.UpdateModelHSV (PlayerModel.GetDyeColorParams (_playerDto.dressInfoDto), 0);");
                this._modelDisplayer.UpdateModelHSV("", 0);
            }
        },
        ChangeSize: function (scale, expireAt){
            if (scale <= 0){
                scale = 1;
            }
            GameDebuger.TODO("_playerDto.scale = scale;\n        _playerDto.scaleExpireAt = expireAt;");
            this._mTrans.set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(scale, scale, scale));
        },
        ChangeView: function (modelId){
            GameDebuger.TODO("_playerDto.transformModelId = modelId;\n        UpdateModel ();");
        },
        UpdateModel: function (){
            if (this._modelDisplayer != null){
                var lookInfo = ModelStyleInfo.ToInfo$$ScenePlayerDto(this._playerDto);
                if (!this.get_IsHero()){
                    if (this._modelDisplayer.get_ModelStyleInfo() != null){
                        if (this._modelDisplayer.get_ModelStyleInfo().get_HasRide()){
                            PlayerView.PlayerRideVisibleCount--;
                        }
                    }
                    if (lookInfo.get_HasRide()){
                        if (PlayerView.PlayerRideVisibleCount + 1 > GameDisplayManager.MaxRideVisibleCount){
                            lookInfo.rideId = 0;
                        }
                        else {
                            PlayerView.PlayerRideVisibleCount++;
                        }
                    }
                }
                if (PlayerView.LoadingModelDic.ContainsKey(this._playerDto.id)){
                    this._loadingStyleInfo = lookInfo;
                }
                else {
                    this._modelDisplayer.SetLookInfo(lookInfo);
                }
            }
        },
        UpdatePlayerMoveSpeed: function (moveSpeed){
            if (UnityEngine.Object.op_Inequality(this._mAgent, null)){
                this._mAgent.set_speed(moveSpeed);
            }
        },
        SetUnitActive: function (active){
            this.SetHUDActive(active);
            if (UnityEngine.Object.op_Inequality(this.get_cachedGameObject(), null))
                this.get_cachedGameObject().SetActive(active);
        },
        SetModelActive: function (active){
            this._isModelActive = active;
            if (this._modelDisplayer != null)
                this._modelDisplayer.SetActive(active);
            this.SetHUDActive(active);
        },
        ShowKnot: function (bridegroomName, brideName){
            var mountHUD = this._modelDisplayer.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
            var path = PathHelper.GetEffectPath("game_eff_tongxinsuo");
            GameDebuger.TODO("KnotEffController.BeginFollowEffect (path, bridegroomName, brideName, mountHUD, 9);");
        },
        UpdatePlayerNickName: function (nickname){
            this._playerDto.name = nickname;
            this.UpdatePlayerName();
        },
        UpdatePlayerName: function (){
            if (this.titleHud != null){
                var colorStr = "39EB3C" /* ColorConstant.Color_Name_Str */;
                GameDebuger.TODO("if (ModelManager.GuildCompetitionData.IsInActivityScene())\n            {\n                colorStr = ModelManager.GuildCompetitionData.GetNameColorStr(_playerDto, colorStr);\n            }\n            else if (ModelManager.CampWarData.IsInActivityScene())\n            {\n                colorStr = ModelManager.CampWarData.GetNameColorStr(_playerDto, colorStr);\n            }");
                var nickName = AppStringHelper.WrapColor$$String$$String(this._playerDto.name, colorStr);
                GameDebuger.TODO("if (ModelManager.CampWarData.IsInActivityScene())\n            {\n                string title = ModelManager.CampWarData.GetCampWarTitleName(_playerDto);\n                nickName = title.WrapColor(ColorConstant.Color_Title_Str) + \'\\n\' + nickName;\n            }else if (ModelManager.CSPK.IsInCSPKSceneAsWatcher(_playerDto))\n            {\n            string title = CSPKModel.WATCHER_TITLE;\n            nickName = title.WrapColor(ColorConstant.Color_Title_Str) + \'\\n\' + nickName;\n            }\n            else\n            {\n                if (_playerDto.titleId != 0)\n                {\n                    _playerDto.titleName = _playerDto.titleName\n                        .Replace(\'{factionName}\', _playerDto.faction.shortName);\n                        .Replace(\'{fereName}\', _playerDto.fereName)\n                        .Replace(\'{masterName}\', _playerDto.masterName);\n                    nickName = _playerDto.titleName.WrapColor(ColorConstant.Color_Title_Str) + \'\\n\' + nickName;\n                }\n            }");
                this.titleHud.get_titleHUDView().nameLbl.set_text("[b]" + nickName);
            }
        },
        UpdatePlayerFereName: function (fereName){
            GameDebuger.TODO("_playerDto.fereName = fereName;\n        UpdatePlayerName ();");
        },
        InitPlayerName: function (){
            var mountShadow = this._modelDisplayer.GetMountingPoint("Mount_Shadow" /* ModelHelper.Mount_shadow */);
            if (UnityEngine.Object.op_Inequality(mountShadow, null)){
                if (this.titleHud == null)
                    this.titleHud = new CharacterTitleHud.ctor(mountShadow, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.5 /* -0.5f */, 0), "PlayerTitleHUD_" + this._playerDto.id);
                else
                    this.titleHud.ResetHudFollower(mountShadow, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.5 /* -0.5f */, 0), "PlayerTitleHUD_" + this._playerDto.id);
                if (this._playerDto.name == ""){
                    this._playerDto.name = this._playerDto.id.toString();
                }
                this.UpdatePlayerName();
            }
            var mountHUD = this._modelDisplayer.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
            if (UnityEngine.Object.op_Inequality(mountHUD, null)){
                if (this.headHud == null){
                    this.headHud = new CharacterHeadHud.ctor(mountHUD, UnityEngine.Vector3.get_zero(), "PlayerHeadHUD_" + this._playerDto.id);
                    this.headHud.get_headHUDView().teamInfo_UISprite.set_enabled(false);
                    this.headHud.get_headHUDView().teamCount_UILabel.set_enabled(false);
                    this.headHud.get_headHUDView().escortFlag_UISprite.set_enabled(false);
                }
                else
                    this.headHud.ResetHudFollower(mountHUD, UnityEngine.Vector3.get_zero(), "PlayerHeadHUD_" + this._playerDto.id);
                this.SetTeamLeaderFlag(this._playerDto.teamStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */);
                this.SetFightFlag(WorldManager.get_Instance().GetModel().GetPlayerBattleStatus(this._playerDto.id));
                GameDebuger.TODO("SetTeamInfoFlag(ModelManager.GuildCompetitionData.IsInActivityScene());\n            ////    国宝场景中刷新\n            SetEscortFlag(ModelManager.Escort.IsInActivityScene());");
                this.headHud.get_headHUDView().runFlagSpriteAnimation.SetEnable(false);
                this.headHud.get_headHUDView().missionTypeSprite.set_enabled(false);
            }
        },
        Shout: function (content){
            var mountHUD = this._modelDisplayer.GetMountingPoint("Mount_HUD" /* ModelHelper.Mount_hud */);
            GameDebuger.TODO("ProxyManager.ActorPopo.Open(_playerDto.id, mountHUD, content, LayerManager.Root.SceneCamera);");
        },
        SetHUDActive: function (active){
            if (this.headHud != null){
                this.headHud.SetHeadHudActive(active);
            }
            if (this.titleHud != null){
                this.titleHud.SetTitleHudActive(active);
            }
        },
        SetPatrolFlag: function (active){
            if (this.headHud != null){
                this.headHud.get_headHUDView().runFlagSpriteAnimation.SetEnable(active);
                if (active){
                    this.headHud.get_headHUDView().runFlagSpriteAnimation.get_sprite().set_spriteName("PatrolFlag_01");
                    this.headHud.get_headHUDView().runFlagSpriteAnimation.set_namePrefix("PatrolFlag_");
                }
            }
        },
        SetNavFlag: function (active){
            if (this.headHud != null){
                this.headHud.get_headHUDView().runFlagSpriteAnimation.SetEnable(active);
                if (active){
                    this.headHud.get_headHUDView().runFlagSpriteAnimation.get_sprite().set_spriteName("NavFlag_01");
                    this.headHud.get_headHUDView().runFlagSpriteAnimation.set_namePrefix("NavFlag_");
                }
            }
        },
        SetFightFlag: function (active){
            if (this.headHud != null){
                this.headHud.get_headHUDView().fightFlagSpriteAnimation.SetEnable(active);
            }
        },
        SetTeamInfoFlag: function (teamdata){
            if (this.headHud != null){
                var finalActive = false;
                var tTeamCount = 0;
                GameDebuger.TODO("if (active && _playerDto.teamStatus == (int)TeamMemberDto.TeamMemberStatus.Leader) {\n                tTeamCount = ModelManager.Team.isOwnTeam(_playerDto.teamId) ?\n                    ModelManager.Team.GetFollowMemberCount() : _playerDto.inTeamPlayerCount;\n                finalActive = tTeamCount > 0;\n            }");
                this.headHud.get_headHUDView().teamInfo_UISprite.set_enabled(finalActive);
                this.headHud.get_headHUDView().teamCount_UILabel.set_enabled(finalActive);
                this.headHud.get_headHUDView().teamCount_UILabel.set_text(finalActive ? AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object("{0}/5", tTeamCount), "0FFF32" /* ColorConstantV3.Color_Green_Str */) : "");
            }
        },
        InitPlayerAnimation: function (){
            if (this._isRunning){
                this._modelDisplayer.PlayAnimation("run" /* ModelHelper.Anim_run */, false, false);
            }
            else {
                this._modelDisplayer.PlayAnimation("idle" /* ModelHelper.Anim_idle */, false, false);
            }
        },
        UpdatePlayerAnimation: function (){
            if (this._mAgent.get_isActiveAndEnabled()){
                if (this._mAgent.get_hasPath()){
                    this.PlayRunAnimation();
                }
                else {
                    this.PlayIdleAnimation();
                }
            }
            else {
                this.PlayIdleAnimation();
            }
        },
        PlayIdleAnimation: function (){
            if (this._isRunning){
                this._modelDisplayer.PlayAnimation("idle" /* ModelHelper.Anim_idle */, false, false);
                this._isRunning = false;
                this.CancelInvoke$$String("DelayStopNavFlag");
                this.Invoke("DelayStopNavFlag", 0.1);
                if (this._toTargetCallback != null){
                    this._toTargetCallback();
                    this._toTargetCallback = null;
                }
            }
        },
        PlayRunAnimation: function (){
            if (!this._isRunning){
                GameUtil.LogFish("PlayRunAnimation----------" + ModelManager.get_Player().GetPlayerName());
                this._modelDisplayer.PlayAnimation("run" /* ModelHelper.Anim_run */, false, false);
                this._isRunning = true;
            }
        },
        IsRunning: function (){
            return this._isRunning;
        }
    }
};
JsTypes.push(PlayerView);
var WorldMapLoader = {
    fullname: "WorldMapLoader",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            WorldMapLoader._instance = null;
        },
        Instance$$: "WorldMapLoader",
        get_Instance: function (){
            WorldMapLoader.CreateInstance();
            return WorldMapLoader._instance;
        },
        CreateInstance: function (){
            if (UnityEngine.Object.op_Equality(WorldMapLoader._instance, null)){
                var go = new UnityEngine.GameObject.ctor$$String("_WorldMapLoader");
                UnityEngine.Object.DontDestroyOnLoad(go);
                WorldMapLoader._instance = go.AddComponent$1(WorldMapLoader.ctor);
                WorldMapLoader._instance.SceneLayer = LayerManager.get_Root().SceneLayer;
                WorldMapLoader._instance.BattleLayer = LayerManager.get_Root().BattleLayer;
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isBattleScene = false;
            this._loadMapFinish = null;
            this._mapId = 0;
            this.BattleLayer = null;
            this.SceneLayer = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        LoadBeforeHandle: function (mapId){
            if (this._isBattleScene){
                if (UnityEngine.Object.op_Equality(this.BattleLayer.get_transform().Find("Battle_" + mapId), null)){
                    GameObjectExt.RemoveChildren$$GameObject(this.BattleLayer);
                    this.SceneLayer.SetActive(false);
                    this.BattleLayer.SetActive(true);
                    return false;
                }
                this.SceneLayer.SetActive(false);
                this.BattleLayer.SetActive(true);
                return true;
            }
            if (UnityEngine.Object.op_Equality(this.SceneLayer.get_transform().Find("World_" + mapId), null)){
                GameObjectExt.RemoveChildren$$GameObject(this.SceneLayer);
                this.SceneLayer.SetActive(true);
                this.BattleLayer.SetActive(false);
                return false;
            }
            this.SceneLayer.SetActive(true);
            this.BattleLayer.SetActive(false);
            return true;
        },
        LoadBattleMap: function (mapId, onFinish, onProgress){
            this.LoadMap(mapId, true, onFinish, onProgress);
        },
        LoadWorldMap: function (resId, onFinish, onProgress){
            this.LoadMap(resId, false, onFinish, onProgress);
        },
        LoadMap: function (mapId, isBattleScene, onFinish, onProgress){
            GameDebuger.Log("LoadMap = " + mapId + ", isBattleScene = " + isBattleScene, null);
            this._loadMapFinish = onFinish;
            this._mapId = mapId;
            this._isBattleScene = isBattleScene;
            if (this.LoadBeforeHandle(mapId)){
                this.OnAllSceneLoaded();
            }
            else {
                if (this._isBattleScene){
                    AssetPipeline.AssetManager.get_Instance().LoadLevelAsync("Battle_" + mapId, true, $CreateDelegate(this, this.OnAllSceneLoaded), onProgress, null);
                }
                else {
                    AssetPipeline.AssetManager.get_Instance().LoadLevelAsync("Scene_" + this._mapId, false, $CreateDelegate(this, this.OnAllSceneLoaded), onProgress, null);
                }
            }
        },
        OnAllSceneLoaded: function (){
            this.WorldMapLayerHandle();
            this.CheckEditorObj();
            this.CheckTerrain();
            this.CheckEffects();
            if (this._loadMapFinish != null){
                this._loadMapFinish();
            }
            this._loadMapFinish = null;
        },
        CheckEditorObj: function (){
            var objs = UnityEngine.GameObject.FindGameObjectsWithTag("EditorOnly");
            for (var i = 0,len = objs.length; i < len; i++){
                var obj = objs[i];
                UnityEngine.Object.Destroy$$Object(obj);
            }
        },
        CheckTerrain: function (){
            var sceneLayer = LayerManager.get_Root().SceneLayer;
            if (UnityEngine.Object.op_Equality(sceneLayer, null)){
                return;
            }
            var colliderList = sceneLayer.GetComponentsInChildren$1$$Boolean(UnityEngine.Collider.ctor, false);
            var layer = UnityEngine.LayerMask.NameToLayer("Terrain" /* GameTag.Tag_Terrain */);
            for (var i = 0,len = colliderList.length; i < len; i++){
                var collider = colliderList[i];
                collider.get_gameObject().set_layer(layer);
                collider.get_gameObject().set_tag("Terrain" /* GameTag.Tag_Terrain */);
            }
        },
        CheckEffects: function (){
            var sceneEffect = UnityEngine.GameObject.FindGameObjectWithTag("SceneEffect" /* GameTag.Tag_SceneEffect */);
            LayerManager.get_Instance().SceneEffect = sceneEffect;
            GameDebuger.TODO("SceneHelper.ToggleSceneEffect(ModelManager.SystemData.sceneEffectToggle);");
        },
        WorldMapLayerHandle: function (){
            if (this._isBattleScene){
                var state = UnityEngine.GameObject.Find("BattleStage");
                if (UnityEngine.Object.op_Inequality(state, null)){
                    state.set_name("Battle_" + this._mapId);
                    GameObjectExt.AddPoolChild(this.BattleLayer, state, 0, 0, 0);
                }
            }
            else {
                var state = UnityEngine.GameObject.Find("WorldStage");
                if (UnityEngine.Object.op_Inequality(state, null)){
                    state.set_name("World_" + this._mapId);
                    GameObjectExt.AddPoolChild(this.SceneLayer, state, 0, 0, 0);
                }
            }
        },
        Destroy: function (){
            GameObjectExt.RemoveChildren$$GameObject(this.SceneLayer);
            GameObjectExt.RemoveChildren$$GameObject(this.BattleLayer);
            this.SceneLayer.SetActive(false);
            this.BattleLayer.SetActive(false);
        }
    }
};
JsTypes.push(WorldMapLoader);
var WorldView = {
    fullname: "WorldView",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            WorldView.UsePool = true;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (model){
            this._worldModel = null;
            this._navMeshPoints = null;
            this._isInitFinish = false;
            this._npcViewManager = null;
            this._heroPlayerView = null;
            this._playerViewDic = null;
            this.playerViewPool = null;
            this._weddingHidePlayerList = null;
            this._bridalSedanHidePlayerList = null;
            System.Object.ctor.call(this);
            this._worldModel = model;
            this._playerViewDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int64.ctor, PlayerView.ctor, 10);
            this._npcViewManager = new NpcViewManager.ctor();
            this.playerViewPool = new PlayerViewPool.ctor(this);
        },
        IsInitFinish$$: "System.Boolean",
        get_IsInitFinish: function (){
            return this._isInitFinish;
        },
        DumpPlayerDicInfo: function (){
            var debugInfo = new System.Text.StringBuilder.ctor();
            var $it28 = this._playerViewDic.get_Values().GetEnumerator();
            while ($it28.MoveNext()){
                var playerView = $it28.get_Current();
                var playerDto = playerView.GetPlayerDto();
                GameDebuger.TODO("debugInfo.AppendLine(string.Format(\'playId:{0} status:{1} index:{2} inBattle:{3} teamUID:{4} hashCode:{5}\',\n                                               playerDto.id,\n                                               playerDto.teamStatus,\n                                               playerDto.teamIndex,\n                                               playerDto.inBattle, playerDto.teamUniqueId,\n                                               playerDto.GetHashCode()));");
                debugInfo.AppendLine$$String(System.String.Format$$String$$Object$$Object("playId:{0} hashCode:{1}", playerDto.id, playerDto.GetHashCode()));
            }
            return debugInfo.toString();
        },
        GetRandomNavPoint: function (){
            if (this._navMeshPoints == null){
                this._navMeshPoints = UnityEngine.NavMesh.CalculateTriangulation().vertices;
            }
            return JsHelper.Random(this._navMeshPoints);
        },
        GetHeroView: function (){
            return this._heroPlayerView;
        },
        GetPlayerView: function (playerId){
            var playerView = null;
            (function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this);
            return playerView;
        },
        GetNpcViewManager: function (){
            return this._npcViewManager;
        },
        InitView: function (){
            GameEventCenter.AddListener$1$$Event$1$$Action$1(AppDto.ScenePlayerDto.ctor, GameEvent.World_OnAddPlayer, $CreateDelegate(this, this.OnNewPlayerEnterScene));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(AppDto.ScenePlayerDto.ctor, GameEvent.World_OnUpdatePlayer, $CreateDelegate(this, this.UpdatePlayerViewInfo));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnRemovePlayer, $CreateDelegate(this, this.RemovePlayerView));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Boolean.ctor, GameEvent.World_OnChangeBattleStatus, $CreateDelegate(this, this.UpdatePlayerViewBattleStatus));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnUpdatePlayerPos, $CreateDelegate(this, this.UpdatePlayerViewPos));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnChangePlayerPos, $CreateDelegate(this, this.ChangePlayerViewPos));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.World_OnChangeWeapon, $CreateDelegate(this, this.UpdatePlayerWeapon));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.World_OnChangeWeaponEff, $CreateDelegate(this, this.UpdatePlayerWeaponEff));
            GameEventCenter.AddListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.World_OnHallowSpriteNotify, $CreateDelegate(this, this.UpdateHallowSprite));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerTitle, $CreateDelegate(this, this.UpdatePlayerTitle$$Int64));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerDye, $CreateDelegate(this, this.UpdatePlayerDye));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Int64.ctor, System.Single.ctor, GameEvent.World_OnChangePlayerScale, $CreateDelegate(this, this.UpdatePlayerScale));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerModel, $CreateDelegate(this, this.UpdatePlayerModel));
            GameEventCenter.AddListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnUpdateNpcPos, $CreateDelegate(this, this.UpdateNpcViewPos));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerMoveSpeed, $CreateDelegate(this, this.UpdatePlayerMoveSpeed));
            GameEventCenter.AddListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangeMaster, $CreateDelegate(this, this.OnChangeMasterHandler));
            this.InitPlayers();
            this.InitNpc();
            this._isInitFinish = true;
            GameDebuger.TODO("ModelManager.MissionView.GetSubMissionMenuListInMainUIExpand();\n        //  如果玩家使用宝图到达指定点后却不使用，跳转场景了需要把使用的关闭\n        ProxyManager. Backpack.CloseItemQuickUsedExpandPanel();");
        },
        InitPlayers: function (){
            var newList = this.SortPlayers();
            for (var i = 0,len = newList.get_Count(); i < len; i++){
                var playerDto = newList.get_Item$$Int32(i);
                this.AddPlayerView(playerDto);
            }
            if (UnityEngine.Object.op_Inequality(null, this._heroPlayerView))
                CameraController.Instance.FollowTarget(this._heroPlayerView.get_cachedTransform());
            for (var i = 0,len = newList.get_Count(); i < len; i++){
                var playerDto = newList.get_Item$$Int32(i);
                this.TryUpdatePlayerViewTeamStatus$$Int64(playerDto.id);
            }
        },
        InitNpc: function (){
            this._npcViewManager.Setup(this._heroPlayerView);
        },
        SortPlayers: function (){
            var myDto = this._worldModel.GetPlayerDto(ModelManager.get_Player().GetPlayerId());
            var myTeamList = new System.Collections.Generic.List$1.ctor(AppDto.ScenePlayerDto.ctor);
            var myGuildList = new System.Collections.Generic.List$1.ctor(AppDto.ScenePlayerDto.ctor);
            var myFriendList = new System.Collections.Generic.List$1.ctor(AppDto.ScenePlayerDto.ctor);
            var otherTeamList = new System.Collections.Generic.List$1.ctor(AppDto.ScenePlayerDto.ctor);
            var otherPlayerList = new System.Collections.Generic.List$1.ctor(AppDto.ScenePlayerDto.ctor);
            var playersDic = this._worldModel.GetPlayersDic();
            var $it29 = playersDic.get_Values().GetEnumerator();
            while ($it29.MoveNext()){
                var playerDto = $it29.get_Current();
                if (playerDto != myDto){
                    if (true){
                        GameDebuger.TODO("else if (ModelManager.Friend.IsMyFriend(playerDto.id))");
                        myFriendList.Add(playerDto);
                    }
                    else {
                        otherPlayerList.Add(playerDto);
                    }
                    if (myDto != null && playerDto.teamId == myDto.teamId && playerDto.teamId > 0){
                        myTeamList.Add(playerDto);
                    }
                    GameDebuger.TODO("else if (myDto != null && playerDto.guildId == myDto.guildId && playerDto.guildId != 0)\n                {\n                    myGuildList.Add(playerDto);\n                }");
                    GameDebuger.TODO("else if (!string.IsNullOrEmpty(playerDto.teamUniqueId))\n                {\n                    otherTeamList.Add(playerDto);\n                }");
                }
            }
            this.SortPlayersLog(myDto, myTeamList, myGuildList, myFriendList, otherTeamList, otherPlayerList);
            var newList = new System.Collections.Generic.List$1.ctor(AppDto.ScenePlayerDto.ctor);
            if (myDto != null){
                newList.Add(myDto);
            }
            newList.AddRange(myTeamList);
            newList.AddRange(myGuildList);
            newList.AddRange(myFriendList);
            newList.AddRange(otherTeamList);
            newList.AddRange(otherPlayerList);
            return newList;
        },
        AddPlayerView: function (playerDto){
            if (playerDto.sceneId != this._worldModel.GetSceneId()){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object$$Object("AddPlayer failed, playerDto.id:{0}, playerDto.sceneId:{1}, _worldModel.GetSceneId:{2}", playerDto.id, playerDto.sceneId, this._worldModel.GetSceneId()), null);
                return;
            }
            if (this._playerViewDic.get_Count() > GameDisplayManager.MaxPlayerDataCount){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("AddPlayer failed for OverMaxPlayerCount ,playerDto.id:{0} maxCount= {1}", playerDto.id, GameDisplayManager.MaxPlayerDataCount), null);
                return;
            }
            if (this._playerViewDic.ContainsKey(playerDto.id)){
                this.ResetPlayerViewPos(playerDto.id, playerDto.x, playerDto.z);
            }
            else {
                this.CreatePlayerView(playerDto);
            }
        },
        CreatePlayerView: function (playerDto){
            var newPlayerView;
            if (playerDto.id == ModelManager.get_Player().GetPlayerId()){
                newPlayerView = this.UpdateSelfPlayerView(playerDto);
            }
            else {
                newPlayerView = this.SpawnPlayerView();
                newPlayerView.get_cachedGameObject().set_name("player_" + playerDto.id);
                newPlayerView.SetupPlayerDto(playerDto, false);
            }
            this._playerViewDic.Add(playerDto.id, newPlayerView);
            GameUtil.LogTeam("_playerViewDic.Add(playerDto.id " + playerDto.id);
            GameDebuger.TODO("if (playerDto.walkPoint != null)\n        {\n            playerDto.x = playerDto.walkPoint.x;\n            playerDto.z = playerDto.walkPoint.z;\n            Vector3 walkPoint = SceneHelper.GetSceneStandPosition(new Vector3(playerDto.x, 0, playerDto.z), Vector3.zero);\n            newPlayerView.WalkToPoint(walkPoint);\n        }");
        },
        UpdateSelfPlayerView: function (playerDto){
            var newPlayerView;
            if (UnityEngine.Object.op_Equality(this._heroPlayerView, null)){
                var heroViewGo = this.CreateSelfPlayerView();
                heroViewGo.set_name("hero");
                this._heroPlayerView = GameObjectExt.GetMissingComponent$1(HeroView.ctor, heroViewGo);
            }
            else {
                this._heroPlayerView.SetUnitActive(true);
            }
            newPlayerView = this._heroPlayerView;
            newPlayerView.SetupPlayerDto(playerDto, true);
            if (ModelManager.get_Player().get_IsAutoFram()){
                ModelManager.get_Player().StartAutoFram();
            }
            else {
                this._heroPlayerView.SetAutoFram(ModelManager.get_Player().get_IsAutoFram());
            }
            return newPlayerView;
        },
        OnNewPlayerEnterScene: function (playerDto){
            this.AddPlayerView(playerDto);
            this.TryUpdatePlayerViewTeamStatus$$Int64(playerDto.id);
        },
        UpdatePlayerViewInfo: function (playerDto){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerDto.id, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdatePlayerDto(playerDto);
            }
        },
        OnChangeMasterHandler: function (pPlayerId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(pPlayerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdatePlayerName();
            }
        },
        RemovePlayerView: function (playerId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                GameDebuger.Log("RemovePlayerView " + playerId, null);
                playerView.DestroyMe();
                this._playerViewDic.Remove(playerId);
            }
        },
        ResetPlayerViewPos: function (playerId, x, z){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                var position = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x, 0, z), UnityEngine.Vector3.get_zero());
                playerView.ChangeToPoint(position);
            }
        },
        TryUpdatePlayerViewTeamStatus$$IEnumerable$1$Int64: function (playerIdSet){
            CollectionExtension.ForEach$1(System.Int64.ctor, playerIdSet, $CreateAnonymousDelegate(this, function (s){
                this.TryUpdatePlayerViewTeamStatus$$Int64(s);
            }));
        },
        TryUpdatePlayerViewTeamStatus$$Int64: function (playerId){
            GameUtil.LogTeam("TryUpdatePlayerViewTeamStatus " + playerId);
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateTeamStatus();
            }
        },
        UpdatePlayerViewBattleStatus: function (playerId, inBattle){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.SetFightFlag(inBattle);
                if (inBattle)
                    playerView.StopAndIdle();
            }
        },
        UpdatePlayerViewPos: function (playerId, x, z){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                var position = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x, 0, z), UnityEngine.Vector3.get_zero());
                playerView.WalkToPoint(position, null, false);
            }
        },
        ChangePlayerViewPos: function (playerId, x, z){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                var position = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x, 0, z), UnityEngine.Vector3.get_zero());
                playerView.ChangeToPoint(position);
            }
        },
        UpdatePlayerWeapon: function (playerId, wpmodel){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateWeapon(wpmodel);
            }
        },
        UpdateHallowSprite: function (playerId, wpmodel){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateHallowSprite(wpmodel);
            }
        },
        UpdatePlayerWeaponEff: function (playerId, weaponEffId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateWeaponEff(weaponEffId);
            }
        },
        UpdatePlayerTitle$$Int64: function (playerId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdatePlayerName();
            }
        },
        UpdatePlayerDye: function (playerId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateModelHSV();
            }
        },
        UpdatePlayerScale: function (playerId, expireAt, scale){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.ChangeSize(scale, expireAt);
            }
        },
        UpdatePlayerModel: function (playerId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateModel();
            }
        },
        UpdateNpcViewPos: function (npcId, x, z){
            var npcUnit = this._npcViewManager.GetNpcUnit$$Int64(npcId);
            if (npcUnit != null && (Is(npcUnit, TriggerNpcUnit.ctor))){
                var position = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x, 0, z), UnityEngine.Vector3.get_zero());
                (As(npcUnit, TriggerNpcUnit.ctor)).WalkToPoint(position);
            }
        },
        UpdatePlayerRide: function (playerId){
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerView.UpdateModel();
            }
        },
        UpdatePlayerMoveSpeed: function (playerId){
            var playerDto = null;
            var playerView = null;
            if ((function (){
                var $1 = $Ref(null, playerView);
                var $res = this._playerViewDic.TryGetValue(playerId, $1);
                playerView = $1.Value;
                return $res;
            }).call(this)){
                playerDto = playerView.GetPlayerDto();
                if (playerDto.teamStatus != 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */){
                    playerView.UpdatePlayerMoveSpeed(playerDto.moveSpeed);
                }
                if (playerDto.teamStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */){
                    var $it30 = this._playerViewDic.get_Values().GetEnumerator();
                    while ($it30.MoveNext()){
                        var otherPlayerView = $it30.get_Current();
                        var otherPlayerDto = otherPlayerView.GetPlayerDto();
                        if (otherPlayerDto.teamStatus == 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */ && otherPlayerDto.teamId == playerDto.teamId){
                            otherPlayerView.UpdatePlayerMoveSpeed(playerDto.moveSpeed);
                        }
                    }
                }
            }
        },
        Destroy: function (){
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(AppDto.ScenePlayerDto.ctor, GameEvent.World_OnAddPlayer, $CreateDelegate(this, this.OnNewPlayerEnterScene));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(AppDto.ScenePlayerDto.ctor, GameEvent.World_OnUpdatePlayer, $CreateDelegate(this, this.UpdatePlayerViewInfo));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnRemovePlayer, $CreateDelegate(this, this.RemovePlayerView));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Boolean.ctor, GameEvent.World_OnChangeBattleStatus, $CreateDelegate(this, this.UpdatePlayerViewBattleStatus));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnUpdatePlayerPos, $CreateDelegate(this, this.UpdatePlayerViewPos));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnChangePlayerPos, $CreateDelegate(this, this.ChangePlayerViewPos));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.World_OnChangeWeapon, $CreateDelegate(this, this.UpdatePlayerWeapon));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.World_OnChangeWeaponEff, $CreateDelegate(this, this.UpdatePlayerWeaponEff));
            GameEventCenter.RemoveListener$2$$Event$2$$Action$2(System.Int64.ctor, System.Int32.ctor, GameEvent.World_OnHallowSpriteNotify, $CreateDelegate(this, this.UpdateHallowSprite));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerTitle, $CreateDelegate(this, this.UpdatePlayerTitle$$Int64));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerDye, $CreateDelegate(this, this.UpdatePlayerDye));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Int64.ctor, System.Single.ctor, GameEvent.World_OnChangePlayerScale, $CreateDelegate(this, this.UpdatePlayerScale));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerModel, $CreateDelegate(this, this.UpdatePlayerModel));
            GameEventCenter.RemoveListener$3$$Event$3$$Action$3(System.Int64.ctor, System.Single.ctor, System.Single.ctor, GameEvent.World_OnUpdateNpcPos, $CreateDelegate(this, this.UpdateNpcViewPos));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangePlayerMoveSpeed, $CreateDelegate(this, this.UpdatePlayerMoveSpeed));
            GameEventCenter.RemoveListener$1$$Event$1$$Action$1(System.Int64.ctor, GameEvent.World_OnChangeMaster, $CreateDelegate(this, this.OnChangeMasterHandler));
            GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.World_OnChangePlayerRide,UpdatePlayerRide);");
            var $it31 = this._playerViewDic.get_Values().GetEnumerator();
            while ($it31.MoveNext()){
                var playerView = $it31.get_Current();
                playerView.DestroyMe();
            }
            this._isInitFinish = false;
            this._navMeshPoints = null;
            this._playerViewDic.Clear();
            this._npcViewManager.Dispose();
            GameDebuger.TODO("MarryPlotManager.Instance.Destroy();\n        SedanVisitChangAnPlotManager.Instance.Dispose();");
        },
        SetInWeddingAreaPlayerState: function (b){
            if (this._weddingHidePlayerList == null){
                this._weddingHidePlayerList = new System.Collections.Generic.List$1.ctor(PlayerView.ctor);
                var $it32 = this._playerViewDic.get_Values().GetEnumerator();
                while ($it32.MoveNext()){
                    var playerView = $it32.get_Current();
                    if (SceneHelper.CheckAtWeddingScope(playerView.get_transform().get_position())){
                        this._weddingHidePlayerList.Add(playerView);
                    }
                }
            }
            for (var i = 0; i < this._weddingHidePlayerList.get_Count(); i++){
                this._weddingHidePlayerList.get_Item$$Int32(i).SetUnitActive(b);
            }
        },
        ClearweddingHidePlayerList: function (){
            if (this._weddingHidePlayerList == null)
                return;
            this._weddingHidePlayerList.Clear();
            this._weddingHidePlayerList = null;
        },
        SetInBridalSedanAreaPlayerState: function (b){
            if (this._bridalSedanHidePlayerList == null){
                this._bridalSedanHidePlayerList = new System.Collections.Generic.List$1.ctor(PlayerView.ctor);
                var $it33 = this._playerViewDic.get_Values().GetEnumerator();
                while ($it33.MoveNext()){
                    var playerView = $it33.get_Current();
                    if (SceneHelper.CheckAtWeddingScope(playerView.get_transform().get_position())){
                        this._bridalSedanHidePlayerList.Add(playerView);
                    }
                }
            }
            for (var i = 0; i < this._bridalSedanHidePlayerList.get_Count(); i++){
                this._bridalSedanHidePlayerList.get_Item$$Int32(i).SetUnitActive(b);
            }
        },
        ClearBridalSedanHidePlayerList: function (){
            if (this._bridalSedanHidePlayerList == null)
                return;
            this._bridalSedanHidePlayerList.Clear();
            this._bridalSedanHidePlayerList = null;
        },
        SetHidePlayerView: function (){
            var $it34 = this._playerViewDic.get_Values().GetEnumerator();
            while ($it34.MoveNext()){
                var playerView = $it34.get_Current();
                playerView.SetUnitActive(false);
            }
        },
        SetShowPlayerView: function (){
            var $it35 = this._playerViewDic.get_Values().GetEnumerator();
            while ($it35.MoveNext()){
                var playerView = $it35.get_Current();
                playerView.SetUnitActive(true);
            }
        },
        UpdatePlayerTitle: function (){
            var $it36 = this._playerViewDic.get_Values().GetEnumerator();
            while ($it36.MoveNext()){
                var playerView = $it36.get_Current();
                playerView.UpdatePlayerName();
            }
        },
        UpdatePlayerName: function (playerId){
            this.UpdatePlayerTitle$$Int64(playerId);
        },
        CreateSelfPlayerView: function (){
            return this.playerViewPool.CreatePlayerViewGo();
        },
        DespawnPlayerView: function (playerView){
            this.playerViewPool.DespawnPlayerView(playerView);
        },
        SpawnPlayerView: function (){
            return this.playerViewPool.SpawnPlayerView();
        },
        SortPlayersLog: function (myDto, myTeamList, myGuildList, myFriendList, otherTeamList, otherPlayerList){
            GameDebuger.Log("玩家排序开始 总人数=" + this._worldModel.GetPlayersDic().get_Count(), null);
            if (myDto != null){
                GameDebuger.Log("主角 " + myDto.name, null);
            }
            for (var i = 0,len = myTeamList.get_Count(); i < len; i++){
                var dto = myTeamList.get_Item$$Int32(i);
                GameDebuger.Log("主角队员 " + dto.name, null);
            }
            for (var i = 0,len = myGuildList.get_Count(); i < len; i++){
                var dto = myGuildList.get_Item$$Int32(i);
                GameDebuger.Log("主角帮派 " + dto.name, null);
            }
            for (var i = 0,len = myFriendList.get_Count(); i < len; i++){
                var dto = myFriendList.get_Item$$Int32(i);
                GameDebuger.Log("主角好友 " + dto.name, null);
            }
            for (var i = 0,len = otherTeamList.get_Count(); i < len; i++){
                var dto = otherTeamList.get_Item$$Int32(i);
                GameDebuger.Log("其它队伍 " + dto.name, null);
            }
            for (var i = 0,len = otherPlayerList.get_Count(); i < len; i++){
                var dto = otherPlayerList.get_Item$$Int32(i);
                GameDebuger.Log("其它玩家 " + dto.name, null);
            }
            GameDebuger.Log("玩家排序结束", null);
        }
    }
};
JsTypes.push(WorldView);
var GamePlot$GamePlotInfo = {
    fullname: "GamePlot.GamePlotInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.plotId = 0;
            this.sceneId = 0;
            this.plotTime = 10;
            this.characterList = new System.Collections.Generic.List$1.ctor(GamePlot.CharacterEntity.ctor);
            this.sceneEffectList = new System.Collections.Generic.List$1.ctor(GamePlot.SceneEffectEntity.ctor);
            this.cameraList = new System.Collections.Generic.List$1.ctor(GamePlot.CameraEntity.ctor);
            this.audioActionList = new System.Collections.Generic.List$1.ctor(GamePlot.PlayAudioAction.ctor);
            this.screenMaskActionList = new System.Collections.Generic.List$1.ctor(GamePlot.ScreenMaskAction.ctor);
            this.screenPresureActionList = new System.Collections.Generic.List$1.ctor(GamePlot.ScreenPresureAction.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GamePlot$GamePlotInfo);
var GamePlot$PlotAction = {
    fullname: "GamePlot.PlotAction",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.active = true;
            this.startTime = 0;
            this.duration = 1;
            System.Object.ctor.call(this);
        },
        GetOptionName: function (){
            return "Action";
        },
        IsPoint: function (){
            return false;
        },
        StartTime$$: "System.Single",
        set_StartTime: function (value){
            this.startTime = System.Math.Round$$Double$$Int32(value, 2);
        },
        Duration$$: "System.Single",
        set_Duration: function (value){
            this.duration = System.Math.Round$$Double$$Int32(value, 2);
        },
        ShowPropertyParam: function (){
            this.active = UnityEditor.EditorGUILayout.Toggle$$String$$Boolean$$GUILayoutOption$Array("是否激活：", this.active, [UnityEngine.GUILayout.Width(100)]);
            UnityEditor.EditorGUI.BeginDisabledGroup(!this.active);
            this.DrawProperty();
            UnityEditor.EditorGUI.EndDisabledGroup();
        },
        DrawProperty: function (){
            this.set_StartTime(UnityEngine.Mathf.Max$$Single$$Single(UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("起始时间：", this.startTime, new Array(0)), 0));
            if (this.IsPoint()){
                this.duration = 0;
            }
            else {
                this.set_Duration(UnityEngine.Mathf.Max$$Single$$Single(UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("持续时间：", this.duration, new Array(0)), 0));
            }
            UnityEditor.EditorGUILayout.Space();
        },
        DrawExtraTimeLine: function (titleWidth){
        }
    }
};
JsTypes.push(GamePlot$PlotAction);
var GamePlot$PlotEntity = {
    fullname: "GamePlot.PlotEntity",
    baseTypeName: "System.Object",
    staticDefinition: {
        Vector3Field: function (title, input, type){
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array(title, new Array(0));
            UnityEngine.GUILayout.BeginHorizontal$$GUILayoutOption$Array(new Array(0));
            input = UnityEditor.EditorGUILayout.Vector3Field$$GUIContent$$Vector3$$GUILayoutOption$Array(UnityEngine.GUIContent.none, input, new Array(0));
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("C", [UnityEngine.GUILayout.Width(20)])){
                if (UnityEngine.Object.op_Inequality(UnityEditor.Selection.get_activeTransform(), null)){
                    if (type == 0)
                        input = UnityEditor.Selection.get_activeTransform().get_localPosition();
                    else if (type == 1)
                        input = UnityEditor.Selection.get_activeTransform().get_localEulerAngles();
                    else if (type == 2)
                        input = UnityEditor.Selection.get_activeTransform().get_localScale();
                    else
                        input = UnityEditor.Selection.get_activeTransform().get_localPosition();
                }
            }
            UnityEngine.GUILayout.EndHorizontal();
            return input;
        },
        OrientationField: function (title, input){
            UnityEngine.GUILayout.BeginHorizontal$$GUILayoutOption$Array(new Array(0));
            input = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array(title, input, new Array(0));
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("C", [UnityEngine.GUILayout.Width(20)])){
                if (UnityEngine.Object.op_Inequality(UnityEditor.Selection.get_activeTransform(), null))
                    input = UnityEditor.Selection.get_activeTransform().get_localEulerAngles().y;
            }
            UnityEngine.GUILayout.EndHorizontal();
            return input;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.active = true;
            this.startTime = 0;
            this.endTime = 1;
            this.showActions = true;
            this.allActionList = new System.Collections.Generic.List$1.ctor(GamePlot.PlotAction.ctor);
            System.Object.ctor.call(this);
        },
        GetOptionName: function (){
            return "Entity";
        },
        StartTime$$: "System.Single",
        set_StartTime: function (value){
            this.startTime = System.Math.Round$$Double$$Int32(value, 2);
        },
        EndTime$$: "System.Single",
        set_EndTime: function (value){
            this.endTime = System.Math.Round$$Double$$Int32(value, 2);
        },
        ShowPropertyParam: function (){
            this.active = UnityEditor.EditorGUILayout.Toggle$$String$$Boolean$$GUILayoutOption$Array("是否激活：", this.active, [UnityEngine.GUILayout.Width(100)]);
            UnityEditor.EditorGUI.BeginDisabledGroup(!this.active);
            this.DrawProperty();
            UnityEditor.EditorGUI.EndDisabledGroup();
        },
        DrawProperty: function (){
            this.set_StartTime(UnityEngine.Mathf.Max$$Single$$Single(UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("起始时间：", this.startTime, new Array(0)), 0));
            this.set_EndTime(UnityEngine.Mathf.Max$$Single$$Single(UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("结束时间：", this.endTime, new Array(0)), 0));
            UnityEditor.EditorGUILayout.Space();
        },
        RebuildActionList: function (){
        }
    }
};
JsTypes.push(GamePlot$PlotEntity);
var GamePlot$CameraEntity = {
    fullname: "GamePlot.CameraEntity",
    baseTypeName: "GamePlot.PlotEntity",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.originPos = new UnityEngine.Vector3.ctor();
            this.originRotation = new UnityEngine.Vector3.ctor();
            this.camPathActionList = new System.Collections.Generic.List$1.ctor(GamePlot.CameraPathAction.ctor);
            this.shakeActionList = new System.Collections.Generic.List$1.ctor(GamePlot.CameraShakeAction.ctor);
            this.tweenActionList = new System.Collections.Generic.List$1.ctor(GamePlot.PlotTransformAction.ctor);
            GamePlot.PlotEntity.ctor.call(this);
        },
        DrawProperty: function (){
            GamePlot.PlotEntity.commonPrototype.DrawProperty.call(this);
            this.originPos = GamePlot.PlotEntity.Vector3Field("起始位置：", this.originPos, 0);
            this.originRotation = GamePlot.PlotEntity.Vector3Field("起始朝向：", this.originRotation, 1);
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加路径动画指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.CameraPathAction.ctor();
                this.allActionList.Add(action);
            }
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加震屏指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.CameraShakeAction.ctor();
                this.allActionList.Add(action);
            }
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加(平移●旋转●缩放)指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.PlotTransformAction.ctor();
                this.allActionList.Add(action);
            }
        },
        GetOptionName: function (){
            return "Camera";
        },
        RebuildActionList: function (){
            this.camPathActionList.Clear();
            this.shakeActionList.Clear();
            this.tweenActionList.Clear();
            for (var i = 0,imax = this.allActionList.get_Count(); i < imax; ++i){
                var action = this.allActionList.get_Item$$Int32(i);
                if (Is(action, GamePlot.CameraPathAction.ctor))
                    this.camPathActionList.Add(As(action, GamePlot.CameraPathAction.ctor));
                else if (Is(action, GamePlot.CameraShakeAction.ctor))
                    this.shakeActionList.Add(As(action, GamePlot.CameraShakeAction.ctor));
                else if (Is(action, GamePlot.PlotTransformAction.ctor))
                    this.tweenActionList.Add(As(action, GamePlot.PlotTransformAction.ctor));
            }
        }
    }
};
JsTypes.push(GamePlot$CameraEntity);
var GamePlot$CameraPathAction = {
    fullname: "GamePlot.CameraPathAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.prefabName = "路径动画";
            this.camPathAnimator = null;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return this.prefabName;
        },
        IsPoint: function (){
            return true;
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array("CameraPath名称：" + this.prefabName, new Array(0));
            this.camPathAnimator = Cast(UnityEditor.EditorGUILayout.ObjectField$$Object$$Type$$Boolean$$GUILayoutOption$Array(this.camPathAnimator, Typeof(CameraPathAnimator.ctor), false, new Array(0)), CameraPathAnimator.ctor);
            if (UnityEngine.Object.op_Inequality(this.camPathAnimator, null)){
                this.prefabName = this.camPathAnimator.get_name();
            }
        }
    }
};
JsTypes.push(GamePlot$CameraPathAction);
var GamePlot$CameraShakeAction = {
    fullname: "GamePlot.CameraShakeAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.strength = UnityEngine.Vector3.get_one();
            this.vibrato = 10;
            this.randomness = 90;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return "震屏";
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.strength = UnityEditor.EditorGUILayout.Vector3Field$$String$$Vector3$$GUILayoutOption$Array("晃动强度：", this.strength, new Array(0));
            this.vibrato = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("晃动次数：", this.vibrato, new Array(0));
            this.randomness = UnityEditor.EditorGUILayout.FloatField$$GUIContent$$Single$$GUILayoutOption$Array(new UnityEngine.GUIContent.ctor$$String$$String("随机性：", "设置为0时只会沿着单一方向晃动"), this.randomness, new Array(0));
        }
    }
};
JsTypes.push(GamePlot$CameraShakeAction);
var GamePlot$CharacterEntity = {
    fullname: "GamePlot.CharacterEntity",
    baseTypeName: "GamePlot.PlotEntity",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = "无";
            this.isHero = false;
            this.modelId = 0;
            this.mutateTexture = 0;
            this.mutateColor = "";
            this.wpModel = 0;
            this.hallowSpriteId = 0;
            this.scale = 1;
            this.ornamentId = 0;
            this.originPos = new UnityEngine.Vector3.ctor();
            this.rotateY = 0;
            this.defaultAnim = null;
            this.npcId = 0;
            this.animationActionList = new System.Collections.Generic.List$1.ctor(GamePlot.PlotAnimationAction.ctor);
            this.tweenActionList = new System.Collections.Generic.List$1.ctor(GamePlot.PlotTransformAction.ctor);
            this.talkActionList = new System.Collections.Generic.List$1.ctor(GamePlot.PlotTalkAction.ctor);
            this.followEffectList = new System.Collections.Generic.List$1.ctor(GamePlot.PlotFollowEffectAction.ctor);
            GamePlot.PlotEntity.ctor.call(this);
        },
        GetOptionName: function (){
            return System.String.Format$$String$$Object("角色:{0}", this.name);
        },
        DrawProperty: function (){
            GamePlot.PlotEntity.commonPrototype.DrawProperty.call(this);
            this.isHero = UnityEditor.EditorGUILayout.Toggle$$String$$Boolean$$GUILayoutOption$Array("使用玩家模型：", this.isHero, [UnityEngine.GUILayout.Width(100)]);
            UnityEditor.EditorGUI.BeginDisabledGroup(this.isHero);
            this.name = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("名称：", this.name, new Array(0));
            this.modelId = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("modelId:", this.modelId, new Array(0));
            this.mutateTexture = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("变异贴图ID:", this.mutateTexture, new Array(0));
            this.mutateColor = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("变色参数：", this.mutateColor, new Array(0));
            this.wpModel = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("武器ID:", this.wpModel, new Array(0));
            this.hallowSpriteId = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("器灵ID:", this.hallowSpriteId, new Array(0));
            UnityEditor.EditorGUI.EndDisabledGroup();
            this.scale = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("缩放：", this.scale, new Array(0));
            this.npcId = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("新郎1新娘2", this.npcId, new Array(0));
            UnityEditor.EditorGUILayout.Space();
            this.originPos = GamePlot.PlotEntity.Vector3Field("起始位置：", this.originPos, 0);
            this.rotateY = GamePlot.PlotEntity.OrientationField("朝向：", this.rotateY);
            this.defaultAnim = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("默认动作：", this.defaultAnim, new Array(0));
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加动画指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.PlotAnimationAction.ctor();
                this.allActionList.Add(action);
            }
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加(平移●旋转●缩放)指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.PlotTransformAction.ctor();
                this.allActionList.Add(action);
            }
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加对话指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.PlotTalkAction.ctor();
                this.allActionList.Add(action);
            }
            if (UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("添加特效指令", [UnityEngine.GUILayout.Width(100), UnityEngine.GUILayout.Height(40)])){
                var action = new GamePlot.PlotFollowEffectAction.ctor();
                this.allActionList.Add(action);
            }
        },
        RebuildActionList: function (){
            this.animationActionList.Clear();
            this.tweenActionList.Clear();
            this.talkActionList.Clear();
            this.followEffectList.Clear();
            for (var i = 0,imax = this.allActionList.get_Count(); i < imax; ++i){
                var action = this.allActionList.get_Item$$Int32(i);
                if (Is(action, GamePlot.PlotAnimationAction.ctor))
                    this.animationActionList.Add(As(action, GamePlot.PlotAnimationAction.ctor));
                else if (Is(action, GamePlot.PlotTransformAction.ctor))
                    this.tweenActionList.Add(As(action, GamePlot.PlotTransformAction.ctor));
                else if (Is(action, GamePlot.PlotTalkAction.ctor))
                    this.talkActionList.Add(As(action, GamePlot.PlotTalkAction.ctor));
                else if (Is(action, GamePlot.PlotFollowEffectAction.ctor))
                    this.followEffectList.Add(As(action, GamePlot.PlotFollowEffectAction.ctor));
            }
        }
    }
};
JsTypes.push(GamePlot$CharacterEntity);
var GamePlot$PlotAnimationAction = {
    fullname: "GamePlot.PlotAnimationAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.clip = null;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return System.String.IsNullOrEmpty(this.clip) ? "动画名" : this.clip;
        },
        IsPoint: function (){
            return true;
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.clip = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("动画名：", this.clip, new Array(0));
        }
    }
};
JsTypes.push(GamePlot$PlotAnimationAction);
var GamePlot$PlotFollowEffectAction = {
    fullname: "GamePlot.PlotFollowEffectAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.folderName = null;
            this.effPath = null;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return System.String.Format$$String$$Object("特效:{0}", this.effPath);
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.folderName = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("目录名：", this.folderName, new Array(0));
            this.effPath = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("特效名：", this.effPath, new Array(0));
        }
    }
};
JsTypes.push(GamePlot$PlotFollowEffectAction);
var GamePlot$PlotTalkAction = {
    fullname: "GamePlot.PlotTalkAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.content = null;
            this.offsetY = 0;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return "对话";
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.offsetY = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("位置偏移：", this.offsetY, new Array(0));
            UnityEditor.EditorGUILayout.PrefixLabel$$String("内容：");
            this.content = UnityEditor.EditorGUILayout.TextArea$$String$$GUILayoutOption$Array(this.content, new Array(0));
        }
    }
};
JsTypes.push(GamePlot$PlotTalkAction);
var GamePlot$PlotTransformAction = {
    fullname: "GamePlot.PlotTransformAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.tweenType = GamePlot.PlotTransformAction.TweenType.NavMove;
            this.endValue = new UnityEngine.Vector3.ctor();
            this.speed = 0;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            if (this.tweenType == GamePlot.PlotTransformAction.TweenType.NavMove)
                return "寻路移动";
            else if (this.tweenType == GamePlot.PlotTransformAction.TweenType.Rotate)
                return "旋转";
            else if (this.tweenType == GamePlot.PlotTransformAction.TweenType.Scale)
                return "缩放";
            else if (this.tweenType == GamePlot.PlotTransformAction.TweenType.PosMove)
                return "平移";
            else
                return "PlotTransformAction";
        },
        IsPoint: function (){
            if (this.tweenType == GamePlot.PlotTransformAction.TweenType.NavMove)
                return true;
            else
                return false;
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.tweenType = Cast(UnityEditor.EditorGUILayout.EnumPopup$$String$$Enum$$GUILayoutOption$Array("类型：", this.tweenType, [UnityEngine.GUILayout.MaxWidth(250)]), GamePlot.PlotTransformAction.TweenType.ctor);
            this.endValue = GamePlot.PlotEntity.Vector3Field("目标值：", this.endValue, this.tweenType);
            this.speed = UnityEngine.Mathf.Max$$Single$$Single(UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("移动速度：", this.speed, new Array(0)), 0);
        }
    }
};
JsTypes.push(GamePlot$PlotTransformAction);
var GamePlot$SceneEffectEntity = {
    fullname: "GamePlot.SceneEffectEntity",
    baseTypeName: "GamePlot.PlotEntity",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.folderName = null;
            this.effPath = null;
            this.originPos = new UnityEngine.Vector3.ctor();
            this.loop = false;
            this.rotate = false;
            this.rotateValue = new UnityEngine.Vector3.ctor();
            GamePlot.PlotEntity.ctor.call(this);
        },
        GetOptionName: function (){
            return System.String.Format$$String$$Object("场景特效:{0}", this.effPath);
        },
        DrawProperty: function (){
            GamePlot.PlotEntity.commonPrototype.DrawProperty.call(this);
            this.folderName = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("目录名：", this.folderName, new Array(0));
            this.effPath = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("特效名：", this.effPath, new Array(0));
            this.originPos = GamePlot.PlotEntity.Vector3Field("起始位置：", this.originPos, 0);
            this.loop = UnityEditor.EditorGUILayout.Toggle$$String$$Boolean$$GUILayoutOption$Array("是否循环：", this.loop, [UnityEngine.GUILayout.Width(100)]);
            this.rotate = UnityEditor.EditorGUILayout.Toggle$$String$$Boolean$$GUILayoutOption$Array("旋转：", this.rotate, [UnityEngine.GUILayout.Width(100)]);
            UnityEditor.EditorGUI.BeginDisabledGroup(!this.rotate);
            this.rotateValue = UnityEditor.EditorGUILayout.Vector3Field$$String$$Vector3$$GUILayoutOption$Array("旋转：", this.rotateValue, new Array(0));
            UnityEditor.EditorGUI.EndDisabledGroup();
        }
    }
};
JsTypes.push(GamePlot$SceneEffectEntity);
var GamePlot$PlayAudioAction = {
    fullname: "GamePlot.PlayAudioAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.audioType = GamePlot.PlayAudioAction.AudioType.Music;
            this.audioPath = null;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            if (this.audioType == GamePlot.PlayAudioAction.AudioType.Music)
                return "音乐";
            else
                return "音效";
        },
        IsPoint: function (){
            if (this.audioType == GamePlot.PlayAudioAction.AudioType.Sound)
                return true;
            else
                return false;
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.audioType = Cast(UnityEditor.EditorGUILayout.EnumPopup$$String$$Enum$$GUILayoutOption$Array("类型：", this.audioType, [UnityEngine.GUILayout.MaxWidth(250)]), GamePlot.PlayAudioAction.AudioType.ctor);
            this.audioPath = UnityEditor.EditorGUILayout.TextField$$String$$String$$GUILayoutOption$Array("音频路径：", this.audioPath, new Array(0));
        }
    }
};
JsTypes.push(GamePlot$PlayAudioAction);
var GamePlot$ScreenMaskAction = {
    fullname: "GamePlot.ScreenMaskAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.startColor = UnityEngine.Color.get_clear();
            this.endColor = UnityEngine.Color.get_black();
            this.fade = false;
            this.fadeInTime = 0;
            this.fadeOutTime = 0;
            this.fadeTweenTime = 0.4;
            this.content = null;
            this.fontSize = 20;
            this.msgStartTime = 0;
            this.msgEndTime = 0;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return "蒙版";
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.startColor = UnityEditor.EditorGUILayout.ColorField$$String$$Color$$GUILayoutOption$Array("开始颜色：", this.startColor, new Array(0));
            this.endColor = UnityEditor.EditorGUILayout.ColorField$$String$$Color$$GUILayoutOption$Array("结束颜色：", this.endColor, new Array(0));
            this.fadeInTime = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("淡入开始时间：", this.fadeInTime, new Array(0));
            this.fadeInTime = UnityEngine.Mathf.Clamp$$Single$$Single$$Single(this.fadeInTime, 0, this.duration);
            this.fadeOutTime = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("淡出开始时间：", this.fadeOutTime, new Array(0));
            this.fadeOutTime = UnityEngine.Mathf.Clamp$$Single$$Single$$Single(this.fadeOutTime, this.fadeInTime, this.duration);
            this.fade = UnityEditor.EditorGUILayout.Toggle$$String$$Boolean$$GUILayoutOption$Array("是淡入淡出：", this.fade, new Array(0));
            UnityEditor.EditorGUI.BeginDisabledGroup(!this.fade);
            this.fadeTweenTime = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("淡入淡出动画时间：", this.fadeTweenTime, new Array(0));
            UnityEditor.EditorGUI.EndDisabledGroup();
            this.fontSize = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("字号：", this.fontSize, new Array(0));
            this.msgStartTime = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("文字开始时间：", this.msgStartTime, new Array(0));
            this.msgStartTime = UnityEngine.Mathf.Clamp$$Single$$Single$$Single(this.msgStartTime, 0, this.duration);
            this.msgEndTime = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("文字结束时间：", this.msgEndTime, new Array(0));
            this.msgEndTime = UnityEngine.Mathf.Clamp$$Single$$Single$$Single(this.msgEndTime, this.msgStartTime, this.duration);
            UnityEditor.EditorGUILayout.PrefixLabel$$String("内容：");
            this.content = UnityEditor.EditorGUILayout.TextArea$$String$$GUILayoutOption$Array(this.content, new Array(0));
        },
        DrawExtraTimeLine: function (titleWidth){
            UnityEngine.GUILayout.BeginHorizontal$$GUILayoutOption$Array(new Array(0));
            UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("淡入淡出时间", [UnityEngine.GUILayout.Width(titleWidth)]);
            (function (){
                var $1 = $Ref(this, "fadeInTime");
                var $2 = $Ref(this, "fadeOutTime");
                var $res = UnityEditor.EditorGUILayout.MinMaxSlider$$Single$$Single$$Single$$Single$$GUILayoutOption$Array($1, $2, 0, this.duration, new Array(0));
                return $res;
            }).call(this);
            UnityEngine.GUILayout.EndHorizontal();
            UnityEngine.GUILayout.BeginHorizontal$$GUILayoutOption$Array(new Array(0));
            UnityEngine.GUILayout.Button$$String$$GUILayoutOption$Array("文字时间", [UnityEngine.GUILayout.Width(titleWidth)]);
            (function (){
                var $1 = $Ref(this, "msgStartTime");
                var $2 = $Ref(this, "msgEndTime");
                var $res = UnityEditor.EditorGUILayout.MinMaxSlider$$Single$$Single$$Single$$Single$$GUILayoutOption$Array($1, $2, 0, this.duration, new Array(0));
                return $res;
            }).call(this);
            UnityEngine.GUILayout.EndHorizontal();
        }
    }
};
JsTypes.push(GamePlot$ScreenMaskAction);
var GamePlot$ScreenPresureAction = {
    fullname: "GamePlot.ScreenPresureAction",
    baseTypeName: "GamePlot.PlotAction",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.length = 80;
            this.tweenTime = 2;
            GamePlot.PlotAction.ctor.call(this);
        },
        GetOptionName: function (){
            return "压屏";
        },
        DrawProperty: function (){
            GamePlot.PlotAction.commonPrototype.DrawProperty.call(this);
            this.length = UnityEditor.EditorGUILayout.IntField$$String$$Int32$$GUILayoutOption$Array("压屏长度：", this.length, new Array(0));
            this.tweenTime = UnityEditor.EditorGUILayout.FloatField$$String$$Single$$GUILayoutOption$Array("压屏动画时间：", this.tweenTime, new Array(0));
            this.tweenTime = UnityEngine.Mathf.Clamp$$Single$$Single$$Single(this.tweenTime, 0, this.duration);
        }
    }
};
JsTypes.push(GamePlot$ScreenPresureAction);
var GamePlot$GamePlotManager = {
    fullname: "GamePlot.GamePlotManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GamePlot.GamePlotManager.PrintLog = false;
            GamePlot.GamePlotManager.PLOT_PATH = "ConfigFiles/GamePlotConfig";
            GamePlot.GamePlotManager._instance = new GamePlot.GamePlotManager.ctor();
            GamePlot.GamePlotManager.PRESURE_VIEW = "ScreenPresure";
        },
        Instance$$: "GamePlot.GamePlotManager",
        get_Instance: function (){
            return GamePlot.GamePlotManager._instance;
        },
        OpenPresureView: function (presureAction, endCallback){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("ScreenPresure" /* PRESURE_VIEW */, UILayerType.Dialogue, false, true);
            var com = GameObjectExt.GetMissingComponent$1(GamePlot.ScreenPresureViewController.ctor, ui);
            com.Open(presureAction, endCallback);
        },
        ClosePresureView: function (){
            UIModuleManager.get_Instance().CloseModule("ScreenPresure" /* PRESURE_VIEW */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._curPlotPlayer = null;
            this.LastPlotId = 0;
            this.OnFinishPlot = null;
            System.Object.ctor.call(this);
        },
        add_OnFinishPlot: function (value){
            this.OnFinishPlot = $CombineDelegates(this.OnFinishPlot, value);
        },
        remove_OnFinishPlot: function (value){
            this.OnFinishPlot = $RemoveDelegate(this.OnFinishPlot, value);
        },
        Setup: function (){
            this.InitTriggerPlotDic();
        },
        InitTriggerPlotDic: function (){
            GameDebuger.TODO("if (_triggerPlotDic == null) {\n                _triggerPlotDic = new Dictionary<string, Plot> ();\n                List<Plot> plotList = DataCache.getArrayByCls<Plot> ();\n                if (plotList != null) {\n                    for (int i = 0; i < plotList.Count; ++i) {\n                        string key = plotList [i].triggerType + \'_\' + plotList [i].triggerParam;\n                        _triggerPlotDic.Add (key, plotList [i]);\n                    }\n                }\n            }");
        },
        IsPlaying: function (){
            GameDebuger.TODO("return _curPlotPlayer != null;");
            return false;
        },
        ContainsPlot: function (type, param){
            GameDebuger.TODO("if (_triggerPlotDic == null)\n                return false;\n\n            return _triggerPlotDic.ContainsKey (type + \'_\' + param);");
            return false;
        },
        TriggerPlot: function (triggerType, param){
            this.InitTriggerPlotDic();
            GameDebuger.TODO("Plot plot = null;\n            if (_triggerPlotDic.TryGetValue (triggerType + \'_\' + param, out plot)) {\n                PlayPlot (plot);\n                return true;\n            }");
            return false;
        },
        PlayPlot: function (plotId){
            GameDebuger.Log("PlayPlot " + plotId, null);
            if (this.IsPlaying()){
                TipManager.AddTip("剧情播放中，无法重复播放", false, false, "");
                return;
            }
            var plotResKey = System.String.Format$$String$$Object("GamePlot_{0}", plotId);
            AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig(plotResKey, $CreateDelegate(this, this.OnLoadPlotDataFinish), null, 100);
        },
        OnLoadPlotDataFinish: function (asset){
            if (UnityEngine.Object.op_Inequality(asset, null)){
                var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                if (UnityEngine.Object.op_Inequality(textAsset, null)){
                    var loadedPlot = JsHelper.ToObject(GamePlot.GamePlotInfo.ctor, textAsset.get_text());
                    if (loadedPlot != null){
                        if (loadedPlot.plotId == 1){
                            TalkingDataHelper.OnEventSetp$$String$$String("StartPlot1", "Play");
                        }
                        else if (loadedPlot.plotId == 2){
                            TalkingDataHelper.OnEventSetp$$String$$String("StartPlot2", "Play");
                        }
                        UIModuleManager.get_Instance().CloseOtherModuleWhenNpcDialogue();
                        LayerManager.get_Instance().SwitchLayerMode(UIMode.STORY);
                        var plotPlayerGo = new UnityEngine.GameObject.ctor$$String("GamePlotPlayer");
                        this._curPlotPlayer = GameObjectExt.GetMissingComponent$1(GamePlot.GamePlotPlayer.ctor, plotPlayerGo);
                        this._curPlotPlayer.Setup(loadedPlot);
                        GameDebuger.Log("GamePlotPlayer Setup " + loadedPlot.plotId, null);
                        ScreenMaskManager.FadeIn(null, 0.4, 0.2);
                        ProxyLoginModule.Hide();
                    }
                }
            }
        },
        FinishPlot: function (){
            if (this.OnFinishPlot != null){
                this.OnFinishPlot();
                this.OnFinishPlot = null;
            }
            BattleManager.get_Instance().NeedPlayPlot = false;
            this.RequestServer();
            GamePlot.GamePlotManager.ClosePresureView();
            if (UnityEngine.Object.op_Inequality(this._curPlotPlayer, null)){
                this._curPlotPlayer.Finish();
                this._curPlotPlayer = null;
            }
        },
        RequestServer: function (){
            GameDebuger.TODO("if (_curTriggerPlot == null) {\n                //GM指令播放剧情，直接恢复场景\n                LayerManager.Instance.SwitchLayerMode (UIMode.GAME);\n                WorldManager.Instance.PlayWorldMusic ();\n                return;\n            }\n\n            if (!IsChangeScenePlotEndEvent (_curTriggerPlot) && !IsBattlePlotEndEvent (_curTriggerPlot)) {\n                WorldManager.Instance.ResumeScene ();\n            } else {\n                LayerManager.Instance.SwitchLayerMode (UIMode.GAME);\n            }\n\n            int plotId = _curTriggerPlot.id;\n\n            if (plotId == 1) {\n                TalkingDataHelper.OnEventSetp (\'StartPlot1\', \'Finish\');\n                         BattleManager.Instance.PlayGuideBattle ();\n            } else if (plotId == 2) {\n                TalkingDataHelper.OnEventSetp (\'StartPlot2\', \'Finish\');\n                PlayerPrefsExt.SetBool (\'PassRoleCreatePlot\', true);\n                WorldMapLoader.Instance.Destroy ();\n                AppGameManager.Instance.InitSPSdk ();\n            } else {\n                         \n            ServiceRequestAction.requestServer (PlotService.end (plotId), \"\",\n                             (e) => {\n                                 if (e is PlayerMissionDto) {\n                                     ModelManager.MissionData.missionStoryPlotDelegate.StoryEndPlotCallback (e as PlayerMissionDto);\n                                 }\n                             });                \n\n\n                WorldManager.Instance.PlayWorldMusic ();\n            }\n\n            //清空当前触发的剧情\n            _curTriggerPlot = null;");
        },
        HasLastPlot: function (){
            if (this.LastPlotId <= 2)
                return false;
            if (this.LastPlotId > 0){
                GameDebuger.TODO("Plot lastPlot = DataCache.getDtoByCls<Plot> (LastPlotId);\n                if (lastPlot.id == 2) {\n                if (NewBieGuideManager.Instance.IsFinishGuide (NewBieGuideManager.Key_GuideHeroBattle)) {\n                                    PlayPlot (lastPlot);\n                                } else {\n                                    BattleManager.Instance.PlayGuideBattle ();\n                                };      \n                } else {\n                    PlayPlot (lastPlot);\n                }");
                this.LastPlotId = 0;
            }
            return true;
        },
        Destroy: function (){
            this.OnFinishPlot = null;
            BattleManager.get_Instance().NeedPlayPlot = false;
            GamePlot.GamePlotManager.ClosePresureView();
            if (UnityEngine.Object.op_Inequality(this._curPlotPlayer, null)){
                LayerManager.get_Instance().SwitchLayerMode(UIMode.GAME);
                this._curPlotPlayer.Finish();
                this._curPlotPlayer = null;
            }
        }
    }
};
JsTypes.push(GamePlot$GamePlotManager);
var GamePlot$GamePlotPlayer = {
    fullname: "GamePlot.GamePlotPlayer",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._plotInfo = null;
            this._sequence = null;
            this._characterList = null;
            this._effectList = null;
            this._cameraList = null;
            this._mGo = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            this._mGo = this.get_gameObject();
            UnityEngine.Object.DontDestroyOnLoad(this._mGo);
        },
        Setup: function (plotInfo){
            this._plotInfo = plotInfo;
            this._characterList = new System.Collections.Generic.List$1.ctor$$Int32(GamePlot.PlotCharacterController.ctor, plotInfo.characterList.get_Count());
            this._effectList = new System.Collections.Generic.List$1.ctor$$Int32(GamePlot.PlotSceneEffectController.ctor, plotInfo.sceneEffectList.get_Count());
            this._cameraList = new System.Collections.Generic.List$1.ctor$$Int32(GamePlot.PlotCameraController.ctor, plotInfo.cameraList.get_Count());
            this._sequence = DG.Tweening.DOTween.Sequence();
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Sequence.ctor, DG.Tweening.TweenSettingsExtensions.AppendInterval(this._sequence, plotInfo.plotTime), $CreateDelegate(GamePlot.GamePlotManager.get_Instance(), GamePlot.GamePlotManager.get_Instance().FinishPlot));
            var initCharacter = $CreateAnonymousDelegate(this, function (character){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, character.startTime, $CreateAnonymousDelegate(this, function (){
                    this.GenerateCharacter(character);
                }));
            });
            for (var i = 0; i < this._plotInfo.characterList.get_Count(); ++i){
                var character = this._plotInfo.characterList.get_Item$$Int32(i);
                if (character.active){
                    initCharacter(character);
                }
            }
            var initSceneEffect = $CreateAnonymousDelegate(this, function (effect){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, effect.startTime, $CreateAnonymousDelegate(this, function (){
                    this.GenerateSceneEffect(effect);
                }));
            });
            for (var i = 0; i < this._plotInfo.sceneEffectList.get_Count(); ++i){
                var effect = this._plotInfo.sceneEffectList.get_Item$$Int32(i);
                if (effect.active){
                    initSceneEffect(effect);
                }
            }
            var initCamera = $CreateAnonymousDelegate(this, function (camera){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, camera.startTime, $CreateAnonymousDelegate(this, function (){
                    this.GenerateCamera(camera);
                }));
            });
            for (var i = 0; i < this._plotInfo.cameraList.get_Count(); ++i){
                var camera = this._plotInfo.cameraList.get_Item$$Int32(i);
                if (camera.active){
                    initCamera(camera);
                }
            }
            var initAudio = $CreateAnonymousDelegate(this, function (audioAction){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, audioAction.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayAudio(audioAction);
                }));
            });
            for (var i = 0; i < this._plotInfo.audioActionList.get_Count(); ++i){
                var audioAction = this._plotInfo.audioActionList.get_Item$$Int32(i);
                if (audioAction.active){
                    initAudio(audioAction);
                }
            }
            var initScreenMask = $CreateAnonymousDelegate(this, function (maskAction){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, maskAction.startTime, $CreateAnonymousDelegate(this, function (){
                    this.ShowScreenMask(maskAction);
                }));
            });
            for (var i = 0; i < this._plotInfo.screenMaskActionList.get_Count(); ++i){
                var maskAction = this._plotInfo.screenMaskActionList.get_Item$$Int32(i);
                if (maskAction.active){
                    initScreenMask(maskAction);
                }
            }
            var initScreenPresure = $CreateAnonymousDelegate(this, function (presureAction){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, presureAction.startTime, $CreateAnonymousDelegate(this, function (){
                    this.ShowScreenPresure(presureAction);
                }));
            });
            for (var i = 0; i < this._plotInfo.screenPresureActionList.get_Count(); ++i){
                var presureAction = this._plotInfo.screenPresureActionList.get_Item$$Int32(i);
                if (presureAction.active){
                    initScreenPresure(presureAction);
                }
            }
        },
        GenerateCharacter: function (character){
            if (GamePlot.GamePlotManager.PrintLog)
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("CharacterEntity_{0}", character.startTime));
            var entityGo = new UnityEngine.GameObject.ctor$$String(System.String.Format$$String$$Object("CharacterEntity_{0}", character.name));
            GameObjectExt.AddPoolChild(this._mGo, entityGo, 0, 0, 0);
            var characterController = GameObjectExt.GetMissingComponent$1(UnityEngine.CharacterController.ctor, entityGo);
            characterController.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.75, 0));
            characterController.set_radius(0.4);
            characterController.set_height(2);
            var position = SceneHelper.GetSceneStandPosition(character.originPos, UnityEngine.Vector3.get_zero());
            entityGo.get_transform().set_position(position);
            entityGo.get_transform().set_rotation(UnityEngine.Quaternion.Euler$$Single$$Single$$Single(0, character.rotateY, 0));
            var com = GameObjectExt.GetMissingComponent$1(GamePlot.PlotCharacterController.ctor, entityGo);
            com.Setup(character, this.IsNewBiePlot());
            this._characterList.Add(com);
        },
        IsNewBiePlot: function (){
            return this._plotInfo.plotId == 1 || this._plotInfo.plotId == 2;
        },
        GenerateSceneEffect: function (effect){
            if (GamePlot.GamePlotManager.PrintLog)
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("SceneEffectEntity_{0}", effect.startTime));
            var entityGo = new UnityEngine.GameObject.ctor$$String(System.String.Format$$String$$Object("SceneEffectEntity_{0}", effect.effPath));
            GameObjectExt.AddPoolChild(this._mGo, entityGo, 0, 0, 0);
            var com = GameObjectExt.GetMissingComponent$1(GamePlot.PlotSceneEffectController.ctor, entityGo);
            com.Setup(effect);
            this._effectList.Add(com);
        },
        GenerateCamera: function (camera){
            var entityGo = new UnityEngine.GameObject.ctor$$String("CameraEntity");
            GameObjectExt.AddPoolChild(this._mGo, entityGo, 0, 0, 0);
            var com = GameObjectExt.GetMissingComponent$1(GamePlot.PlotCameraController.ctor, entityGo);
            com.Setup(camera);
            this._cameraList.Add(com);
        },
        PlayAudio: function (audioAction){
            if (GamePlot.GamePlotManager.PrintLog)
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("PlayAudioAction_{0}", audioAction.startTime));
            var audioName = System.IO.Path.GetFileName(audioAction.audioPath);
            if (audioAction.audioType == GamePlot.PlayAudioAction.AudioType.Sound){
                AudioManager.get_Instance().PlaySound(audioName);
            }
            else {
                AudioManager.get_Instance().PlayMusic(audioName, true);
                JSTimer.get_Instance().SetupCoolDown("PlotBgMusic", audioAction.duration, null, $CreateDelegate(AudioManager.get_Instance(), AudioManager.get_Instance().StopMusic), 0.1, false);
            }
        },
        ShowScreenMask: function (maskAction){
            if (GamePlot.GamePlotManager.PrintLog)
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("ScreenMaskAction_{0}", maskAction.startTime));
            ScreenMaskManager.OpenMaskView(maskAction);
        },
        ShowScreenPresure: function (presureAction){
            if (GamePlot.GamePlotManager.PrintLog)
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("ScreenPresure_{0}", presureAction.startTime));
            GamePlot.GamePlotManager.OpenPresureView(presureAction, $CreateDelegate(this, this.OnPresureSkipPlotCallback));
        },
        OnPresureSkipPlotCallback: function (){
            if (this._plotInfo.plotId == 1){
                TalkingDataHelper.OnEventSetp$$String$$String("StartPlot1", "Skip");
            }
            else if (this._plotInfo.plotId == 2){
                TalkingDataHelper.OnEventSetp$$String$$String("StartPlot2", "Skip");
            }
            GamePlot.GamePlotManager.get_Instance().FinishPlot();
        },
        Finish: function (){
            DG.Tweening.TweenExtensions.Kill(this._sequence, false);
            this._sequence = null;
            JSTimer.get_Instance().CancelCd("PlotBgMusic");
            for (var i = 0; i < this._characterList.get_Count(); ++i){
                if (UnityEngine.Object.op_Inequality(this._characterList.get_Item$$Int32(i), null))
                    this._characterList.get_Item$$Int32(i).Dispose();
            }
            for (var i = 0; i < this._effectList.get_Count(); ++i){
                if (UnityEngine.Object.op_Inequality(this._effectList.get_Item$$Int32(i), null))
                    this._effectList.get_Item$$Int32(i).Dispose();
            }
            for (var i = 0; i < this._cameraList.get_Count(); ++i){
                if (UnityEngine.Object.op_Inequality(this._cameraList.get_Item$$Int32(i), null))
                    this._cameraList.get_Item$$Int32(i).Dispose();
            }
            UnityEngine.Object.Destroy$$Object(this._mGo);
            this._mGo = null;
        }
    }
};
JsTypes.push(GamePlot$GamePlotPlayer);
var GamePlot$PlotCameraController = {
    fullname: "GamePlot.PlotCameraController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._cameraInfo = null;
            this._cameraTrans = null;
            this._curPathAnimator = null;
            this._sequence = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Setup: function (cameraInfo){
            this._cameraInfo = cameraInfo;
            this._cameraTrans = LayerManager.get_Root().SceneCamera.get_transform();
            this._cameraTrans.set_position(this._cameraInfo.originPos);
            this._cameraTrans.set_eulerAngles(this._cameraInfo.originRotation);
            this._sequence = DG.Tweening.DOTween.Sequence();
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Sequence.ctor, DG.Tweening.TweenSettingsExtensions.AppendInterval(this._sequence, this._cameraInfo.endTime - this._cameraInfo.startTime), $CreateDelegate(this, this.Dispose));
            var doAnimationAction = $CreateAnonymousDelegate(this, function (action, go){
                var animator = go.GetComponent$1(CameraPathAnimator.ctor);
                animator.playOnStart = false;
                animator.set_AnimationObject(this._cameraTrans);
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    if (UnityEngine.Object.op_Inequality(this._curPathAnimator, null)){
                        this._curPathAnimator.Stop();
                    }
                    this._curPathAnimator = animator;
                    this._curPathAnimator.Play();
                }));
            });
            for (var i = 0; i < this._cameraInfo.camPathActionList.get_Count(); ++i){
                var action = cameraInfo.camPathActionList.get_Item$$Int32(i);
                if (action.active){
                    var path = System.String.Format$$String$$Object("PlotCameraPath/{0}", action.prefabName);
                    var prefab = As(UnityEngine.Resources.Load$$String(path), UnityEngine.GameObject.ctor);
                    if (UnityEngine.Object.op_Equality(prefab, null))
                        continue;
                    var cameraPathGo = As(UnityEngine.Object.Instantiate$1$$T(UnityEngine.GameObject.ctor, prefab), UnityEngine.GameObject.ctor);
                    cameraPathGo.get_transform().set_parent(this.get_transform());
                    doAnimationAction(action, cameraPathGo);
                }
            }
            var doShakeAction = $CreateAnonymousDelegate(this, function (action){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayShakeAction(action);
                }));
            });
            for (var i = 0; i < this._cameraInfo.shakeActionList.get_Count(); ++i){
                var action = this._cameraInfo.shakeActionList.get_Item$$Int32(i);
                if (action.active){
                    doShakeAction(action);
                }
            }
            var doTransAction = $CreateAnonymousDelegate(this, function (action){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayTransformAction(action);
                }));
            });
            for (var i = 0; i < this._cameraInfo.tweenActionList.get_Count(); ++i){
                var action = this._cameraInfo.tweenActionList.get_Item$$Int32(i);
                if (action.active){
                    doTransAction(action);
                }
            }
        },
        PlayShakeAction: function (shakeAction){
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOShakePosition$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean$$Boolean(this._cameraTrans.get_parent(), shakeAction.duration, shakeAction.strength, shakeAction.vibrato, shakeAction.randomness, false, true), $CreateAnonymousDelegate(this, function (){
                this._cameraTrans.get_parent().set_localPosition(UnityEngine.Vector3.get_zero());
            }));
        },
        PlayTransformAction: function (action){
            if (action.tweenType == GamePlot.PlotTransformAction.TweenType.PosMove){
                DG.Tweening.ShortcutExtensions.DOMove$$Transform$$Vector3$$Single$$Boolean(this._cameraTrans, action.endValue, action.duration, false);
            }
            else if (action.tweenType == GamePlot.PlotTransformAction.TweenType.Rotate){
                DG.Tweening.ShortcutExtensions.DOLocalRotate(this._cameraTrans, action.endValue, action.duration, 0);
            }
        },
        Dispose: function (){
            this._cameraTrans.get_parent().set_localPosition(UnityEngine.Vector3.get_zero());
            DG.Tweening.TweenExtensions.Kill(this._sequence, false);
            this._sequence = null;
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        }
    }
};
JsTypes.push(GamePlot$PlotCameraController);
var GamePlot$PlotCharacterController = {
    fullname: "GamePlot.PlotCharacterController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._characterInfo = null;
            this._mId = 0;
            this._mGo = null;
            this._mTrans = null;
            this._agent = null;
            this._titleHUDView = null;
            this._isRunning = false;
            this._sequence = null;
            this._effectList = null;
            this._modelDisplayer = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Setup: function (info, isNewBiePlot){
            this._characterInfo = info;
            this._effectList = new System.Collections.Generic.List$1.ctor$$Int32(OneShotSceneEffect.ctor, info.followEffectList.get_Count());
            this._mGo = this.get_gameObject();
            this._mId = this._mGo.GetInstanceID();
            this._mTrans = this.get_transform();
            this._agent = GameObjectExt.GetMissingComponent$1(UnityEngine.NavMeshAgent.ctor, this._mGo);
            this._agent.set_radius(0.4);
            this._agent.set_speed(4 /* ModelHelper.DefaultModelSpeed */);
            this._agent.set_acceleration(1000);
            this._agent.set_angularSpeed(1000);
            this._agent.set_obstacleAvoidanceType(0);
            if (info.isHero){
                info.name = ModelManager.get_Player().GetPlayerName();
                var playerDto = ModelManager.get_Player().GetPlayer();
                this._characterInfo.modelId = playerDto.get_charactor().modelId;
                GameDebuger.TODO("_characterInfo.mutateColor = PlayerModel.GetDyeColorParams (playerDto.dressInfoDto);\n                if (isNewBiePlot) {\n                    _characterInfo.wpModel = NewBieGuideManager.GetNewBieWeapon (playerDto.charactorId);\n                } else {\n                    _characterInfo.wpModel = ModelManager.Backpack.GetCurrentWeaponModel ();\n                    _characterInfo.hallowSpriteId = ModelManager.Backpack.GetCurrentHallowSpriteId();\n                }");
            }
            var modelStyleInfo = null;
            if (info.isHero){
                var ScenePlayerDto = WorldManager.get_Instance().GetModel().GetPlayerDto(ModelManager.get_Player().GetPlayerId());
                if (ScenePlayerDto == null){
                    modelStyleInfo = ModelStyleInfo.ToInfo$$CharacterEntity(this._characterInfo);
                }
                else {
                    modelStyleInfo = ModelStyleInfo.ToInfo$$ScenePlayerDto(ScenePlayerDto);
                }
            }
            else {
                modelStyleInfo = ModelStyleInfo.ToInfo$$CharacterEntity(this._characterInfo);
            }
            modelStyleInfo.SetupFashionIds(null);
            this._modelDisplayer = new ModelDisplayer.ctor(this._mGo, $CreateDelegate(this, this.OnLoadModelFinish), false);
            this._modelDisplayer.SetLookInfo(modelStyleInfo);
            this._sequence = DG.Tweening.DOTween.Sequence();
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Sequence.ctor, DG.Tweening.TweenSettingsExtensions.AppendInterval(this._sequence, this._characterInfo.endTime - this._characterInfo.startTime), $CreateDelegate(this, this.Dispose));
            var doTransAction = $CreateAnonymousDelegate(this, function (action){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayTransformAction(action);
                }));
            });
            for (var i = 0; i < this._characterInfo.tweenActionList.get_Count(); ++i){
                var action = this._characterInfo.tweenActionList.get_Item$$Int32(i);
                if (action.active){
                    doTransAction(action);
                }
            }
            var doTalkAction = $CreateAnonymousDelegate(this, function (action){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayTalkAction(action);
                }));
            });
            for (var i = 0; i < this._characterInfo.talkActionList.get_Count(); ++i){
                var action = this._characterInfo.talkActionList.get_Item$$Int32(i);
                if (action.active){
                    doTalkAction(action);
                }
            }
            var doEffectAction = $CreateAnonymousDelegate(this, function (action){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayFollowEffectAction(action);
                }));
            });
            for (var i = 0; i < this._characterInfo.followEffectList.get_Count(); ++i){
                var action = this._characterInfo.followEffectList.get_Item$$Int32(i);
                if (action.active && !System.String.IsNullOrEmpty(action.effPath)){
                    doEffectAction(action);
                }
            }
            var doAnimationAction = $CreateAnonymousDelegate(this, function (action){
                DG.Tweening.TweenSettingsExtensions.InsertCallback(this._sequence, action.startTime, $CreateAnonymousDelegate(this, function (){
                    this.PlayAnimationAction(action);
                }));
            });
            for (var i = 0; i < this._characterInfo.animationActionList.get_Count(); ++i){
                var action = this._characterInfo.animationActionList.get_Item$$Int32(i);
                if (action.active && !System.String.IsNullOrEmpty(action.clip)){
                    doAnimationAction(action);
                }
            }
        },
        OnLoadModelFinish: function (){
            if (!System.String.IsNullOrEmpty(this._characterInfo.defaultAnim)){
                this._modelDisplayer.PlayAnimation(this._characterInfo.defaultAnim, false, false);
            }
            var mountShadow = this._modelDisplayer.GetMountingPoint("Mount_Shadow" /* ModelHelper.Mount_shadow */);
            if (UnityEngine.Object.op_Inequality(mountShadow, null)){
                if (this._titleHUDView == null){
                    var hudPrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("ModelTitleHUDView"), UnityEngine.GameObject.ctor);
                    var hudGo = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().PlotUIHUDPanel.get_cachedGameObject(), hudPrefab);
                    hudGo.set_name("PlotHUDView_" + this._characterInfo.name);
                    this._titleHUDView = BaseView.Create$1$$Transform(ModelTitleHUDView.ctor, hudGo.get_transform());
                    this._titleHUDView.nameLbl.set_text(System.String.Format$$String$$Object("[b]{0}", AppStringHelper.WrapColor$$String$$Color(this._characterInfo.name, ColorConstant.Color_Battle_Enemy_Name)));
                }
                this._titleHUDView.follower.gameCamera = LayerManager.get_Root().SceneCamera;
                this._titleHUDView.follower.uiCamera = LayerManager.get_Root().UICamera.get_cachedCamera();
                this._titleHUDView.follower.target = mountShadow;
                this._titleHUDView.follower.offset = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -0.5 /* -0.5f */, 0);
                this._titleHUDView.follower.disableIfInvisible = false;
            }
        },
        Update: function (){
            if (this._agent.get_hasPath()){
                if (!this._isRunning){
                    this._modelDisplayer.PlayAnimation("run" /* ModelHelper.Anim_run */, false, false);
                    this._isRunning = true;
                }
            }
            else {
                if (this._isRunning){
                    this._modelDisplayer.PlayAnimation("idle" /* ModelHelper.Anim_idle */, true, false);
                    this._isRunning = false;
                }
            }
        },
        PlayTransformAction: function (action){
            if (action.tweenType == GamePlot.PlotTransformAction.TweenType.NavMove){
                var dest = action.endValue;
                dest.y = this._mTrans.get_position().y;
                this._agent.set_speed(action.speed != 0 ? action.speed : 4 /* ModelHelper.DefaultModelSpeed */);
                this._agent.SetDestination(dest);
            }
            else if (action.tweenType == GamePlot.PlotTransformAction.TweenType.Rotate){
                DG.Tweening.ShortcutExtensions.DOLocalRotate(this._mTrans, action.endValue, action.duration, 0);
            }
            else if (action.tweenType == GamePlot.PlotTransformAction.TweenType.Scale){
                DG.Tweening.ShortcutExtensions.DOScale$$Transform$$Vector3$$Single(this._mTrans, action.endValue, action.duration);
            }
            else if (action.tweenType == GamePlot.PlotTransformAction.TweenType.PosMove){
                this._modelDisplayer.DOLocalMove(action.endValue, action.duration);
            }
        },
        PlayTalkAction: function (talkAction){
            GameDebuger.TODO("if (talkAction.duration > 0f) {\n                ProxyManager.ActorPopo.Open(_mId, _mTrans, talkAction.content, LayerManager.Root.SceneCamera, talkAction.offsetY, talkAction.duration);\n            } else {\n                ProxyManager.ActorPopo.Open(_mId, _mTrans, talkAction.content, LayerManager.Root.SceneCamera, talkAction.offsetY);\n            }            \n");
        },
        PlayFollowEffectAction: function (effectAction){
            var effPath = PathHelper.GetEffectPath(effectAction.effPath);
            var effect = OneShotSceneEffect.BeginFollowEffect(effPath, this._mTrans, effectAction.duration, 1, null);
            this._effectList.Add(effect);
        },
        PlayAnimationAction: function (animationAction){
            this._modelDisplayer.PlayAnimation(animationAction.clip, false, false);
        },
        Dispose: function (){
            DG.Tweening.TweenExtensions.Kill(this._sequence, false);
            this._sequence = null;
            if (this._effectList.get_Count() > 0){
                for (var i = 0; i < this._effectList.get_Count(); ++i){
                    if (UnityEngine.Object.op_Inequality(this._effectList.get_Item$$Int32(i), null))
                        this._effectList.get_Item$$Int32(i).Dispose();
                }
            }
            GameDebuger.TODO("ProxyManager.ActorPopo.Close(_mId);");
            if (this._titleHUDView != null){
                UnityEngine.Object.Destroy$$Object(this._titleHUDView.get_gameObject());
                this._titleHUDView = null;
            }
            this._modelDisplayer.Destory();
            this._modelDisplayer = null;
            UnityEngine.Object.Destroy$$Object(this._mGo);
            this._mGo = null;
        }
    }
};
JsTypes.push(GamePlot$PlotCharacterController);
var GamePlot$PlotSceneEffectController = {
    fullname: "GamePlot.PlotSceneEffectController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._effectInfo = null;
            this._effGo = null;
            this._sequence = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Setup: function (effectInfo){
            this._effectInfo = effectInfo;
            var effectPath = PathHelper.GetEffectPath(effectInfo.effPath);
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effectPath, $CreateDelegate(this, this.OnLoadFinish), null, 100);
            this._sequence = DG.Tweening.DOTween.Sequence();
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Sequence.ctor, DG.Tweening.TweenSettingsExtensions.AppendInterval(this._sequence, effectInfo.endTime - effectInfo.startTime), $CreateDelegate(this, this.Dispose));
        },
        OnLoadFinish: function (instance){
            var _effGo = As(instance, UnityEngine.GameObject.ctor);
            if (UnityEngine.Object.op_Equality(_effGo, null))
                return;
            if (this._effectInfo.loop){
                var particleSystems = _effGo.GetComponentsInChildren$1(UnityEngine.ParticleSystem.ctor);
                if (particleSystems.length > 0){
                    for (var i = 0; i < particleSystems.length; i++){
                        particleSystems[i].set_loop(true);
                    }
                }
            }
            _effGo = GameObjectExt.AddPoolChild(this.get_gameObject(), _effGo, 0, 0, 0);
            _effGo.get_transform().set_position(this._effectInfo.originPos);
            if (this._effectInfo.rotate){
                DG.Tweening.ShortcutExtensions.DOLocalRotate(_effGo.get_transform(), this._effectInfo.rotateValue, 0, 0);
            }
        },
        Dispose: function (){
            DG.Tweening.TweenExtensions.Kill(this._sequence, false);
            this._sequence = null;
            if (UnityEngine.Object.op_Inequality(this._effGo, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this._effGo, false);
                this._effGo = null;
            }
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
        }
    }
};
JsTypes.push(GamePlot$PlotSceneEffectController);
var ScreenMaskManager = {
    fullname: "ScreenMaskManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ScreenMaskManager.MASK_VIEW = "ScreenMask";
            ScreenMaskManager._instance = null;
        },
        Instance$$: "ScreenMaskViewController",
        get_Instance: function (){
            if (UnityEngine.Object.op_Equality(ScreenMaskManager._instance, null)){
                var modulePrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("ScreenMask" /* MASK_VIEW */), UnityEngine.GameObject.ctor);
                var moduleGo = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().UIModuleRoot, modulePrefab);
                GameObjectExt.GetMissingComponent$1(UIPanel.ctor, moduleGo);
                var depth = UIModuleManager.get_Instance().GetCurDepthByLayerType(UILayerType.FadeInOut);
                NGUITools.AdjustDepth(moduleGo, depth);
                ScreenMaskManager._instance = GameObjectExt.GetMissingComponent$1(ScreenMaskViewController.ctor, moduleGo);
            }
            return ScreenMaskManager._instance;
        },
        OpenMaskView: function (maskAction){
            ScreenMaskManager.get_Instance().Open(maskAction);
        },
        FadeIn: function (onFinish, duration, fadeTime){
            var color = UnityEngine.Color.get_black();
            ScreenMaskManager.get_Instance().FadeIn(onFinish, duration, fadeTime, color);
        },
        FadeOut: function (onFinish, duration, fadeTime){
            var color = UnityEngine.Color.get_black();
            ScreenMaskManager.get_Instance().FadeOut(onFinish, duration, fadeTime, color);
        },
        FadeInOut: function (onFinish, duration, fadeTime){
            var color = UnityEngine.Color.get_black();
            ScreenMaskManager.get_Instance().FadeInOut(onFinish, duration, fadeTime, color);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ScreenMaskManager);
var ScreenMaskViewController = {
    fullname: "ScreenMaskViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._info = null;
            MonoViewController$1.ctor.call(this, ScreenMask.ctor);
        },
        Open: function (info){
            this._info = info;
            var sequence = DG.Tweening.TweenSettingsExtensions.SetId$1(DG.Tweening.Sequence.ctor, DG.Tweening.DOTween.Sequence(), "ScreenMask");
            DG.Tweening.TweenSettingsExtensions.AppendInterval(sequence, info.duration);
            this.get_View().ContentLbl.set_text(info.content);
            this.get_View().ContentLbl.set_fontSize(info.fontSize);
            this.get_View().ContentLbl.get_cachedGameObject().SetActive(false);
            DG.Tweening.TweenSettingsExtensions.InsertCallback(sequence, info.msgStartTime, $CreateAnonymousDelegate(this, function (){
                this.get_View().ContentLbl.get_cachedGameObject().SetActive(true);
            }));
            DG.Tweening.TweenSettingsExtensions.InsertCallback(sequence, info.msgEndTime, $CreateAnonymousDelegate(this, function (){
                this.get_View().ContentLbl.get_cachedGameObject().SetActive(false);
            }));
            this.get_View().MaskSprite.set_color(info.startColor);
            if (this._info.fade){
                var fadeIn = DG.Tweening.DOTween.To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single($CreateAnonymousDelegate(this, function (){
                    return this.get_View().MaskSprite.get_color();
                }), $CreateAnonymousDelegate(this, function (x){
                    this.get_View().MaskSprite.set_color(x);
                }), info.endColor, info.fadeTweenTime);
                DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tween.ctor, fadeIn, 1);
                DG.Tweening.TweenSettingsExtensions.Insert(sequence, info.fadeInTime, fadeIn);
                var fadeOut = DG.Tweening.DOTween.To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single($CreateAnonymousDelegate(this, function (){
                    return this.get_View().MaskSprite.get_color();
                }), $CreateAnonymousDelegate(this, function (x){
                    this.get_View().MaskSprite.set_color(x);
                }), info.startColor, info.fadeTweenTime);
                DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tween.ctor, fadeOut, 1);
                DG.Tweening.TweenSettingsExtensions.Insert(sequence, info.fadeOutTime, fadeOut);
            }
            else {
                DG.Tweening.TweenSettingsExtensions.InsertCallback(sequence, info.fadeInTime, $CreateAnonymousDelegate(this, function (){
                    this.get_View().MaskSprite.set_color(info.endColor);
                }));
                DG.Tweening.TweenSettingsExtensions.InsertCallback(sequence, info.fadeOutTime, $CreateAnonymousDelegate(this, function (){
                    this.get_View().MaskSprite.set_color(info.startColor);
                }));
            }
        },
        FadeIn: function (onFinish, duration, fadeTime, color){
            this.get_View().MaskSprite.set_color(color);
            this.get_View().ContentLbl.get_cachedGameObject().SetActive(false);
            var fadeIn = DG.Tweening.DOTween.To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single($CreateAnonymousDelegate(this, function (){
                return this.get_View().MaskSprite.get_color();
            }), $CreateAnonymousDelegate(this, function (x){
                this.get_View().MaskSprite.set_color(x);
            }), UnityEngine.Color.get_clear(), fadeTime);
            DG.Tweening.TweenSettingsExtensions.SetId$1(DG.Tweening.Tween.ctor, fadeIn, "ScreenMask");
            DG.Tweening.TweenSettingsExtensions.SetDelay$1(DG.Tweening.Tween.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tween.ctor, fadeIn, 1), duration);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tween.ctor, fadeIn, onFinish);
        },
        FadeInOut: function (onFinish, duration, fadeTime, color){
            var sequence = DG.Tweening.TweenSettingsExtensions.SetId$1(DG.Tweening.Sequence.ctor, DG.Tweening.DOTween.Sequence(), "ScreenMask");
            var fadeIn = DG.Tweening.DOTween.To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single($CreateAnonymousDelegate(this, function (){
                return this.get_View().MaskSprite.get_color();
            }), $CreateAnonymousDelegate(this, function (x){
                this.get_View().MaskSprite.set_color(x);
            }), color, fadeTime);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tween.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tween.ctor, fadeIn, 1), onFinish);
            DG.Tweening.TweenSettingsExtensions.Append(sequence, fadeIn);
            DG.Tweening.TweenSettingsExtensions.AppendInterval(sequence, duration);
            var fadeOut = DG.Tweening.DOTween.To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single($CreateAnonymousDelegate(this, function (){
                return this.get_View().MaskSprite.get_color();
            }), $CreateAnonymousDelegate(this, function (x){
                this.get_View().MaskSprite.set_color(x);
            }), UnityEngine.Color.get_clear(), fadeTime);
            DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tween.ctor, fadeOut, 1);
            DG.Tweening.TweenSettingsExtensions.Append(sequence, fadeOut);
        },
        FadeOut: function (onFinish, duration, fadeTime, color){
            var fadeIn = DG.Tweening.DOTween.To$$DOGetter$1$Color$$DOSetter$1$Color$$Color$$Single($CreateAnonymousDelegate(this, function (){
                return this.get_View().MaskSprite.get_color();
            }), $CreateAnonymousDelegate(this, function (x){
                this.get_View().MaskSprite.set_color(x);
            }), color, fadeTime);
            DG.Tweening.TweenSettingsExtensions.SetId$1(DG.Tweening.Tween.ctor, fadeIn, "ScreenMask");
            DG.Tweening.TweenSettingsExtensions.SetDelay$1(DG.Tweening.Tween.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tween.ctor, fadeIn, 1), duration);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tween.ctor, fadeIn, onFinish);
        },
        AfterInitView: function (){
            this.RemoveEvent();
        },
        RemoveEvent: function (){
            DG.Tweening.DOTween.Kill("ScreenMask", true);
        }
    }
};
JsTypes.push(ScreenMaskViewController);
var GamePlot$ScreenPresureViewController = {
    fullname: "GamePlot.ScreenPresureViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._sequence = null;
            this._mLength = 0;
            this._endCallback = null;
            MonoViewController$1.ctor.call(this, ScreenPresure.ctor);
        },
        Open: function (info, endCallback){
            this._endCallback = endCallback;
            this._sequence = DG.Tweening.DOTween.Sequence();
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Sequence.ctor, DG.Tweening.TweenSettingsExtensions.AppendInterval(this._sequence, info.duration), $CreateDelegate(this, this.CloseView));
            this.get_View().Top.updateAnchors = 1;
            this.get_View().Bottom.updateAnchors = 1;
            var fadeIn = DG.Tweening.DOTween.To$$DOGetter$1$Int32$$DOSetter$1$Int32$$Int32$$Single($CreateAnonymousDelegate(this, function (){
                return this._mLength;
            }), $CreateAnonymousDelegate(this, function (x){
                this._mLength = x;
                this.get_View().Top.bottomAnchor.absolute = -this._mLength;
                this.get_View().Bottom.topAnchor.absolute = this._mLength;
            }), info.length, info.tweenTime);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tween.ctor, fadeIn, $CreateAnonymousDelegate(this, function (){
                this.get_View().Content.SetActive(true);
                this.get_View().Top.updateAnchors = 0;
                this.get_View().Bottom.updateAnchors = 0;
            }));
            DG.Tweening.TweenSettingsExtensions.Insert(this._sequence, 0, fadeIn);
            var fadeOut = DG.Tweening.DOTween.To$$DOGetter$1$Int32$$DOSetter$1$Int32$$Int32$$Single($CreateAnonymousDelegate(this, function (){
                return this._mLength;
            }), $CreateAnonymousDelegate(this, function (x){
                this._mLength = x;
                this.get_View().Top.bottomAnchor.absolute = -this._mLength;
                this.get_View().Bottom.topAnchor.absolute = this._mLength;
            }), 0, info.tweenTime);
            DG.Tweening.TweenSettingsExtensions.OnStart$1(DG.Tweening.Tween.ctor, fadeOut, $CreateAnonymousDelegate(this, function (){
                this.get_View().Content.SetActive(false);
            }));
            DG.Tweening.TweenSettingsExtensions.Insert(this._sequence, info.duration - info.tweenTime, fadeOut);
        },
        AfterInitView: function (){
            this.get_View().Content.SetActive(false);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().EndBtn.onClick, $CreateDelegate(this, this.OnEndBtnClick));
        },
        OnEndBtnClick: function (){
            if (this._endCallback != null){
                this._endCallback();
                this.get_View().EndBtn.set_enabled(false);
            }
        },
        OnDispose: function (){
            DG.Tweening.TweenExtensions.Kill(this._sequence, false);
            this._sequence = null;
        },
        CloseView: function (){
            GamePlot.GamePlotManager.ClosePresureView();
        }
    }
};
JsTypes.push(GamePlot$ScreenPresureViewController);
var ScreenMask = {
    fullname: "ScreenMask",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.MaskSprite = null;
            this.ContentLbl = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.MaskSprite = root.Find("bg").GetComponent$1(UISprite.ctor);
            this.ContentLbl = root.Find("bg/Label").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(ScreenMask);
var ScreenPresure = {
    fullname: "ScreenPresure",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ScreenPresure.NAME = "ScreenPresure";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Top = null;
            this.Bottom = null;
            this.Content = null;
            this.EndBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.Top = root.Find("Top").GetComponent$1(UISprite.ctor);
            this.Bottom = root.Find("Bottom").GetComponent$1(UISprite.ctor);
            this.Content = root.Find("Top/Content").get_gameObject();
            this.EndBtn = root.Find("Top/Content/EndBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(ScreenPresure);
var AppStringHelper = {
    fullname: "AppStringHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        FormatBytes: function (bytes){
            var sizes = ["B", "KB", "MB", "GB"];
            var order = 0;
            var len = bytes;
            while (len >= 1024 && order + 1 < sizes.length){
                order++;
                len = len / 1024;
            }
            return System.String.Format$$String$$Object$$Object("{0:0.##} {1}", len, sizes[order]);
        },
        SplitByNewline: function (s){
            s = s.Replace$$String$$String("\r\n", "\n");
            return s.Split$$Char$Array(["\n"]);
        },
        RemoveNewline: function (s){
            return s.Replace$$String$$String("\r\n", "").Replace$$String$$String("\r", "").Replace$$String$$String("\n", "");
        },
        ParseToList$1: function (T, str, split, convertHandler){
            if (System.String.IsNullOrEmpty(str))
                return null;
            var array = str.Split$$Char$Array([split]);
            if (array.length > 0){
                var list = new System.Collections.Generic.List$1.ctor$$Int32(T, array.length);
                for (var index = 0; index < array.length; ++index){
                    list.Add(convertHandler(array[index]));
                }
                return list;
            }
            return null;
        },
        StripChatSymbols: function (str){
            return NGUIText.StripSymbols(str);
        },
        ChangeColorToUpper: function (str){
            if(System.String.IsNullOrEmpty(str)) return str;
            return str.replace(/\[[a-z0-9]{6,8}\]/ig, function(match){ return match.toUpperCase(); });
        },
        WrapColor$$String$$String: function (txt, colorSymbol){
            return "[c][" + colorSymbol + "]" + txt + "[-][/c]";
        },
        WrapColor$$Int32$$String: function (val, colorSymbol){
            return AppStringHelper.WrapColor$$String$$String(val.toString(), colorSymbol);
        },
        WrapColorWithLog: function (txt, color){
            return "<color=" + color + ">" + txt + "</color>";
        },
        WrapColor$$String$$Color: function (txt, color){
            return AppStringHelper.WrapColor$$String$$String(txt, NGUIText.EncodeColor$$Color(color));
        },
        WrapSymbol: function (txt, symbol){
            return "[" + symbol + "]" + txt + "[/" + symbol + "]";
        },
        WrapURL: function (txt, link){
            return "[url=" + link + "]" + txt + "[/url]";
        },
        IsEmail: function (input){
            return /^[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\.)+[A-Z]{2,6}$/i.test(input);
        },
        ValidateAccount: function (input){
            return /^[a-zA-Z0-9]+$/.test(input);
        },
        IsNum: function (num){
            return /^[0-9]+$/.test(input);
        },
        GetGBLength: function (str){
            var len = 0;
            for (var i = str.length - 1; i >= 0; i--) {
                var c = str.charCodeAt(i);
                if((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
                    len++;
                }else{
                    len +=2;
                }
            }
            return len;
        },
        TrimInputStr: function (str, max){
            var len = 0;
            for (var i = str.length - 1; i >= 0; i--) {
                var c = str.charCodeAt(i);
                if((c >= 0x0001 && c <= 0x007e) || (0xff60 <= c && c <= 0xff9f)) {
                    len++;
                }else{
                    len +=2;
                }
                
                if(len > max){
                    return str.substr(0,i);
                }
            }
            return str;
        },
        ValidateStrLength: function (str, min, max){
            var length = AppStringHelper.GetGBLength(str);
            GameDebuger.Log(System.String.Format$$String$$Object$Array("ValidateStrLength str={0} len={1} min={2} max={3}", [str, length, min, max]), null);
            if (length < min){
                return "输入文字太短了，不合适啊";
            }
            if (length > max){
                if (min == max){
                    return "输入文字长度不符合要求";
                }
                var chCount = UnityEngine.Mathf.FloorToInt(max / 2);
                return System.String.Format$$String$$Object$$Object("输入文字不能超过{0}个中文字符，{1}个英文字符", chCount, max);
            }
            return null;
        },
        IsHasCN: function (input){
            return /[\u4e00-\u9fa5]/.test(input);
        },
        IsHasWChar: function (input){
            return /[^\x00-\xff]/.test(input);
        },
        IsHasENAndDigit: function (input){
            return /^[A-Za-z0-9]{1}$/.test(input);
        },
        IsHasChZNAndEngAndFigure: function (str){
            var strArr = str.ToCharArray();
            for (var index = 0; index < strArr.length; index++){
                if (!AppStringHelper.IsHasCN(strArr[index].toString()) && !AppStringHelper.IsHasENAndDigit(strArr[index].toString())){
                    return false;
                }
            }
            return true;
        },
        AdjustInputText: function (pUIInput){
            if (UnityEngine.Object.op_Inequality(null, pUIInput)){
                var tContent = pUIInput.get_value();
                if (!System.String.IsNullOrEmpty(tContent) && tContent.length > 1)
                    pUIInput.set_value(tContent.substr(0, tContent.length - 1));
            }
        },
        FilterEmoji$$String: function (rawStr){
            if(System.String.IsNullOrEmpty(rawStr)) 
                return rawStr;
            return rawStr.replace(/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDEFF]|[\u2600-\u26FF]/g, "");
        },
        FilterEmoji$$UIInput: function (pUIInput){
            if (UnityEngine.Object.op_Inequality(null, pUIInput)){
                pUIInput.set_value(AppStringHelper.FilterEmoji$$String(pUIInput.get_value()));
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AppStringHelper);
var ColorExt = {
    fullname: "ColorExt",
    baseTypeName: "System.Object",
    staticDefinition: {
        SetAlpha: function (c, a){
            return new UnityEngine.Color.ctor$$Single$$Single$$Single$$Single(c.r, c.g, c.b, a);
        },
        Serialize: function (c){
            return System.String.Format$$String$$Object$Array("{0},{1},{2},{3}", [c.r, c.g, c.b, c.a]);
        },
        Parse: function (color){
            var s = color.Split$$Char$Array([","]);
            return new UnityEngine.Color.ctor$$Single$$Single$$Single$$Single(System.Single.Parse$$String(s[0]), System.Single.Parse$$String(s[1]), System.Single.Parse$$String(s[2]), System.Single.Parse$$String(s[3]));
        },
        HexStrToColor: function (hex){
            return hex.length > 6 ? NGUIText.ParseColor32(hex, 0) : NGUIText.ParseColor24(hex, 0);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ColorExt);
var ColorHelper = {
    fullname: "ColorHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        UpdateColorInDeepStyle: function (str){
            return str.Replace$$String$$String("[0081AB]", "[2DC6F8]").Replace$$String$$String("[A52D00]", "[FFF9E3]").Replace$$String$$String("[A64E00]", "[F7E423]").Replace$$String$$String("[1D8E00]", "[0FFF32]").Replace$$String$$String("[8130A7]", "[C368E9]").Replace$$String$$String("[0081AA]", "[FFF9E2]").Replace$$String$$String("[C30000]", "[FD614C]");
        },
        UpdateColorInLightStyle: function (str){
            return str.Replace$$String$$String("[2DC6F8]", "[0081AB]").Replace$$String$$String("[FFF9E3]", "[A52D00]").Replace$$String$$String("[F7E423]", "[A64E00]").Replace$$String$$String("[0FFF32]", "[1D8E00]").Replace$$String$$String("[C368E9]", "[8130A7]").Replace$$String$$String("[D08D05]", "[E7BD37]").Replace$$String$$String("[FFF9E2]", "[0081AA]").Replace$$String$$String("[FD614C]", "[C30000]");
        },
        UpdateColorInStyledBG: function (pOrignLabelStr, pIsDeepBG){
            return pIsDeepBG ? ColorHelper.UpdateColorInDeepStyle(pOrignLabelStr) : ColorHelper.UpdateColorInLightStyle(pOrignLabelStr);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ColorHelper);
var GameObjectExt = {
    fullname: "GameObjectExt",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameObjectExt.MaxParentLevels = 32;
        },
        GetHierarchyWithRoot: function (obj, root){
            if (UnityEngine.Object.op_Equality(obj, null) || UnityEngine.Object.op_Equality(obj, root))
                return "";
            var path = obj.get_name();
            while (UnityEngine.Object.op_Inequality(obj.get_parent(), root)){
                obj = obj.get_parent();
                path = obj.get_name() + "/" + path;
            }
            return path;
        },
        GetMissingComponent$1: function (T, go){
            var t = go.GetComponent$1(T);
            if (t == null){
                t = go.AddComponent$1(T);
            }
            return t;
        },
        GetChildTransform: function (root, childName){
            if (root.get_name() == childName){
                return root;
            }
            if (root.get_childCount() != 0){
                var childTransform = root.FindChild(childName);
                if (UnityEngine.Object.op_Inequality(childTransform, null)){
                    return childTransform;
                }
                for (var i = 0; i < root.get_childCount(); i++){
                    childTransform = GameObjectExt.GetChildTransform(root.GetChild(i), childName);
                    if (UnityEngine.Object.op_Inequality(childTransform, null)){
                        return childTransform;
                    }
                }
            }
            return null;
        },
        FindTrans: function (gameObject, childComponentName){
            if (UnityEngine.Object.op_Equality(gameObject, null)){
                GameDebuger.LogWarning("the gameobject is null", null);
                return null;
            }
            else {
                return gameObject.get_transform().Find(childComponentName);
            }
        },
        FindGameObject: function (gameObject, childComponentName){
            var t = GameObjectExt.FindTrans(gameObject, childComponentName);
            return UnityEngine.Object.op_Inequality(t, null) ? t.get_gameObject() : null;
        },
        FindScript$1: function (T, UIcomponent, childComponentName){
            if (UnityEngine.Object.op_Equality(UIcomponent, null))
                return Default(T);
            var t = UIcomponent.get_transform().Find(childComponentName);
            return UnityEngine.Object.op_Inequality(t, null) ? t.GetComponent$1(T) : null;
        },
        AddChild: function (parent, prefab, localX, localY, localZ){
            var go = NGUITools.AddChild$$GameObject$$GameObject(parent, prefab);
            if (UnityEngine.Object.op_Inequality(go, null)){
                var t = go.get_transform();
                t.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(localX, localY, localZ));
                NGUITools.SetChildLayer(t, parent.get_layer());
            }
            return go;
        },
        AddPoolChild: function (parent, child, localX, localY, localZ){
            if (UnityEngine.Object.op_Equality(child, null) || UnityEngine.Object.op_Equality(parent, null)){
                UnityEngine.Debug.Log$$Object("AddCachedChild Failed");
                return null;
            }
            var t = child.get_transform();
            t.set_parent(parent.get_transform());
            t.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(localX, localY, localZ));
            t.set_localRotation(UnityEngine.Quaternion.get_identity());
            t.set_localScale(UnityEngine.Vector3.get_one());
            child.set_layer(parent.get_layer());
            NGUITools.SetChildLayer(t, parent.get_layer());
            return child;
        },
        ReparentTransform: function (parent, child, index){
            if (UnityEngine.Object.op_Equality(parent, null) || UnityEngine.Object.op_Equality(child, null))
                return;
            child.set_parent(parent.get_transform());
            child.set_localPosition(UnityEngine.Vector3.get_zero());
            if (index >= 0)
                child.SetSiblingIndex(index);
            else
                child.SetAsLastSibling();
        },
        RemoveChildren$$GameObject: function (go){
            if (UnityEngine.Object.op_Equality(go, null))
                return;
            NGUITools.DestroyChildren(go.get_transform());
        },
        RemoveChildren$$Transform: function (t){
            if (UnityEngine.Object.op_Equality(t, null))
                return;
            NGUITools.DestroyChildren(t);
        },
        RemoveComponent$1$$Component: function (T, component){
            var t = component.GetComponent$1(T);
            if (t != null){
                UnityEngine.Object.Destroy$$Object(t);
            }
        },
        RemoveComponent$1$$GameObject: function (T, go){
            var t = go.GetComponent$1(T);
            if (t != null){
                UnityEngine.Object.Destroy$$Object(t);
            }
        },
        GetTransformRoot: function (monoCom){
            var t = monoCom.get_transform();
            for (var i = 0; i < 32 /* MaxParentLevels */; i++){
                var tran = t.get_transform();
                if (UnityEngine.Object.op_Equality(tran.get_parent(), null)){
                    return tran;
                }
                t = t.get_parent();
            }
            return null;
        },
        ParentPanelDepth: function (go){
            if (UnityEngine.Object.op_Equality(go, null) || go.get_name() == "UICamera" || UnityEngine.Object.op_Equality(go.get_transform().get_parent(), null)){
                return 0;
            }
            GameUtil.LogFish("GetUIParentPanelDepth  " + go.get_name());
            var parentTrans = go.get_transform().get_parent();
            var panel = parentTrans.GetComponent$1(UIPanel.ctor);
            return (UnityEngine.Object.op_Inequality(panel, null)) ? panel.get_depth() : GameObjectExt.ParentPanelDepth(parentTrans.get_gameObject());
        },
        ResetPanelsDepth$$GameObject$$Int32: function (go, depth){
            if (UnityEngine.Object.op_Equality(go, null)){
                return;
            }
            var compare = function (a, b){
                return a.get_depth() - b.get_depth();
            };
            var panels = go.GetComponentsInChildren$1$$Boolean(UIPanel.ctor, true);
            var list = CollectionExtension.ToList$1(UIPanel.ctor, panels);
            list.Sort$$Comparison$1(compare);
            var offset = CollectionExtension.IsNullOrEmpty$1$$List$1(UIPanel.ctor, list) ? 0 : list.get_Item$$Int32(0).get_depth();
            list.ForEach(function (s){
                s.set_depth(s.get_depth() + depth - offset);
            });
        },
        ResetPanelsDepth$$GameObject$$GameObject: function (go, parent){
            if (UnityEngine.Object.op_Equality(go, null) || UnityEngine.Object.op_Equality(parent, null)){
                return;
            }
            var parentDepth = GameObjectExt.ParentPanelDepth(go);
            GameObjectExt.ResetPanelsDepth$$GameObject$$Int32(go, parentDepth + 1);
        },
        AddChildAndAdjustDepth$$GameObject$$String: function (pParent, pPrefabName){
            if (UnityEngine.Object.op_Equality(pParent, null) || System.String.IsNullOrEmpty(pPrefabName)){
                return null;
            }
            var prefab = AssetPipeline.ResourcePoolManager.get_Instance().LoadUI(pPrefabName);
            return GameObjectExt.AddChildAndAdjustDepth$$GameObject$$GameObject(pParent, prefab);
        },
        AddChildAndAdjustDepth$$GameObject$$GameObject: function (pParent, pPrefab){
            if (UnityEngine.Object.op_Equality(pPrefab, null) || UnityEngine.Object.op_Equality(pParent, null)){
                return null;
            }
            var tChildGO = NGUITools.AddChild$$GameObject$$GameObject(pParent, pPrefab);
            GameObjectExt.ResetPanelsDepth$$GameObject$$GameObject(tChildGO, pParent);
            return tChildGO;
        },
        GetEvtListener$$GameObject: function (UIcomponent){
            return UnityEngine.Object.op_Inequality(UIcomponent, null) ? UIEventListener.Get(UIcomponent) : null;
        },
        GetEvtListener$$GameObject$$String: function (UIcomponent, childComponentName){
            var go = UnityEngine.Object.op_Inequality(UIcomponent, null) && !System.String.IsNullOrEmpty(childComponentName) ? GameObjectExt.FindGameObject(UIcomponent, childComponentName) : null;
            return UnityEngine.Object.op_Inequality(go, null) ? UIEventListener.Get(go) : null;
        },
        DestroyLog: function (obj){
            UnityEngine.Object.Destroy$$Object(obj);
        },
        ChangeParent: function (pTargetA, pTargetB){
            if (UnityEngine.Object.op_Equality(null, pTargetA) || UnityEngine.Object.op_Equality(null, pTargetB)){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("ChangeParent failed , Argument Exception ! pTargetA:{0},pTargetB:{1}", pTargetA, pTargetB), null);
                return;
            }
            var tTemp = pTargetA.get_parent();
            var tTempPosition = pTargetA.get_position();
            pTargetA.SetParent$$Transform(pTargetB.get_parent());
            pTargetA.set_position(pTargetB.get_position());
            pTargetB.SetParent$$Transform(tTemp);
            pTargetB.set_position(tTempPosition);
            NGUITools.MarkParentAsChanged(pTargetA.get_gameObject());
            NGUITools.MarkParentAsChanged(pTargetB.get_gameObject());
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameObjectExt);
var JsHelper = function (){
};
JsHelper.IsInt = function (obj){
    return Number.isInteger(obj);
};
JsHelper.IsFloat = function (obj){
    return typeof obj === 'number';
};
JsHelper.FromCharCode = function (c){
    return String.fromCharCode(c);
};
JsHelper.Random = function (list){
    var count = list.get_Count();
    if (count == 0)
        return null;
    var randomIndex = Math.floor(count*Math.random());
    return list.get_Item$$Int32(randomIndex);
};
JsHelper.ToJson = function (obj, tFlag){
    return JsonUtils.stringify(obj, tFlag);
};
JsHelper.ToObject = function (T, json){
    return JsonUtils.parse(json, T);
};
JsHelper.ToCollection = function (T, TChild, json){
    return JsonUtils.parse(json, T, TChild);
};
JsHelper.GetDataObjectKey = function (obj){
    return obj.id != null ? obj.id : 0;
};
JsHelper.ParseProtoObj = function (ba, needUnCompress){
    if (needUnCompress){
        ba.UnCompress();
    }
    var byteStr = ba.ToBase64String();
    var decodeObj = JsHelper.Decode(byteStr);
    return decodeObj;
};
JsHelper.ParseJsz = function (T, ba, needUnCompress){
    if (needUnCompress){
        ba.UnCompress();
    }
    try{
        return JsHelper.ToObject(T, ba.ToUTF8String());
    }
    catch(e){
        UnityEngine.Debug.LogWarning$$Object("ParseJsz Error:" + e.message + "\n" + e.stack);
        return Cast(JsHelper.ParseProtoObj(ba, needUnCompress), T);
    }
};
JsHelper.EncodeObjToJsz = function (obj){
    var json = JsHelper.ToJson(obj, true);
    var ba = ByteArray.CreateFromUtf8(json);
    ba.Compress();
    return ba;
};
JsHelper.EncodeProtoObj = function (protoByteArray, obj){
    var str = JsHelper.Encode(obj);
    protoByteArray.WriteByteData$$String(str);
    return protoByteArray;
};
JsHelper.EncodeObjToPbz = function (obj){
    var byteArray = null;
    var str = JsHelper.Encode(obj);
    byteArray = ByteArray.CreateFromBase64(str);
    byteArray.Compress();
    return byteArray;
};
JsHelper.SetupJsProto = function (){
    JsonUtils.TypeGetter = AppProtobuf.ProtobufMap.getClass;
    JsonUtils.TypeWritter = AppProtobuf.ProtobufMap.getType;
    ProtoJsUtils.loadProto();
};
JsHelper.Encode = function (dto){
    return ProtoJsUtils.encodeToBase64(dto);
};
JsHelper.Decode = function (b64Str){
    return ProtoJsUtils.parseBase64(b64Str);
};
var NumberToOrdinalHelper = {
    fullname: "NumberToOrdinalHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        NumAddCircle: function (num){
            if (num <= 0 || num > 20){
                return num.toString();
            }
            var c = Cast((9311 + num), System.Char.ctor);
            return JsHelper.FromCharCode(c);
        },
        NumAddBrackets: function (num){
            if (num <= 0 || num > 20){
                return num.toString();
            }
            var c = Cast((9331 + num), System.Char.ctor);
            return JsHelper.FromCharCode(c);
        },
        NumAddPoint: function (num){
            if (num <= 0 || num > 20){
                return num.toString();
            }
            var c = Cast((9351 + num), System.Char.ctor);
            return JsHelper.FromCharCode(c);
        },
        NumToLetters: function (num){
            if (num <= 0 || num > 26){
                return num.toString();
            }
            var c = Cast((9371 + num), System.Char.ctor);
            return JsHelper.FromCharCode(c);
        },
        NumToLettersWithCircle: function (num){
            if (num <= 0 || num > 26){
                return num.toString();
            }
            var c = Cast((9397 + num), System.Char.ctor);
            return JsHelper.FromCharCode(c);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(NumberToOrdinalHelper);
var ColorConstant = {
    fullname: "ColorConstant",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ColorConstant.Color_Name_Str = "39EB3C";
            ColorConstant.Color_Name = ColorExt.HexStrToColor("39EB3C" /* Color_Name_Str */);
            ColorConstant.Color_Tip_Str = "fc7b6a";
            ColorConstant.Color_Tip = ColorExt.HexStrToColor("fc7b6a" /* Color_Tip_Str */);
            ColorConstant.Color_Channel_Team_Str = "d4862f";
            ColorConstant.Color_Channel_Team = ColorExt.HexStrToColor("d4862f" /* Color_Channel_Team_Str */);
            ColorConstant.Color_Channel_Zonghe_Str = "a14ad9";
            ColorConstant.Color_Channel_Zonghe = ColorExt.HexStrToColor("a14ad9" /* Color_Channel_Zonghe_Str */);
            ColorConstant.Color_Channel_Guild_Str = "0882d6";
            ColorConstant.Color_Channel_Guild = ColorExt.HexStrToColor("0882d6" /* Color_Channel_Guild_Str */);
            ColorConstant.Color_Channel_System_Str = "d3a017";
            ColorConstant.Color_Channel_System = ColorExt.HexStrToColor("d3a017" /* Color_Channel_System_Str */);
            ColorConstant.Color_Title_Str = "4DB0D6";
            ColorConstant.Color_Title = ColorExt.HexStrToColor("4DB0D6" /* Color_Title_Str */);
            ColorConstant.Color_UnActive_Str = "b4b5b5";
            ColorConstant.Color_UnActive = ColorExt.HexStrToColor("b4b5b5" /* Color_UnActive_Str */);
            ColorConstant.Color_ChatName_Str = "fff9e3";
            ColorConstant.Color_ChatName = ColorExt.HexStrToColor("fff9e3" /* Color_ChatName_Str */);
            ColorConstant.Color_Battle_Str = "d3a017";
            ColorConstant.Color_Battle = ColorExt.HexStrToColor("d3a017" /* Color_Battle_Str */);
            ColorConstant.Color_Battle_Player_Name_Str = "39EB3C";
            ColorConstant.Color_Battle_Player_Name = ColorExt.HexStrToColor("39EB3C" /* Color_Battle_Player_Name_Str */);
            ColorConstant.Color_Battle_Enemy_Name_Str = "E7BD37";
            ColorConstant.Color_Battle_Enemy_Name = ColorExt.HexStrToColor("E7BD37" /* Color_Battle_Enemy_Name_Str */);
            ColorConstant.Color_Battle_SkillCanNotUseTip_Str = "ff0000";
            ColorConstant.Color_Battle_SkillCanNotUseTip = ColorExt.HexStrToColor("ff0000" /* Color_Battle_SkillCanNotUseTip_Str */);
            ColorConstant.Color_Battle_SkillCanUseTip_Str = "6F3E1A";
            ColorConstant.Color_Battle_SkillCanUseTip = ColorExt.HexStrToColor("6F3E1A" /* Color_Battle_SkillCanUseTip_Str */);
            ColorConstant.Color_MiniMap_Npc_Idle_Str = "ffec6c";
            ColorConstant.Color_MiniMap_Npc_Idle = ColorExt.HexStrToColor("ffec6c" /* Color_MiniMap_Npc_Idle_Str */);
            ColorConstant.Color_MiniMap_Npc_Function_Str = "96f86f";
            ColorConstant.Color_MiniMap_Npc_Function = ColorExt.HexStrToColor("96f86f" /* Color_MiniMap_Npc_Function_Str */);
            ColorConstant.Color_MiniMap_Npc_Area_Str = "B25DE8";
            ColorConstant.Color_MiniMap_Npc_Area = ColorExt.HexStrToColor("B25DE8" /* Color_MiniMap_Npc_Area_Str */);
            ColorConstant.Color_UI_Title_Str = "6f3e1a";
            ColorConstant.Color_UI_Title = ColorExt.HexStrToColor("6f3e1a" /* Color_UI_Title_Str */);
            ColorConstant.Color_UI_Tab_Str = "fff9e3";
            ColorConstant.Color_UI_Tab = ColorExt.HexStrToColor("fff9e3" /* Color_UI_Tab_Str */);
            ColorConstant.Color_UI_Tab_N_Selected_Str = "502e10";
            ColorConstant.Color_UI_Tab_N_Selected = ColorExt.HexStrToColor("502e10" /* Color_UI_Tab_N_Selected_Str */);
            ColorConstant.Color_Tip_Item_Str = "0FFF32";
            ColorConstant.Color_Tip_Item = ColorExt.HexStrToColor("0FFF32" /* Color_Tip_Item_Str */);
            ColorConstant.Color_Tip_GainCurrency_Str = "0FFF32";
            ColorConstant.Color_Tip_GainCurrency = ColorExt.HexStrToColor("0FFF32" /* Color_Tip_GainCurrency_Str */);
            ColorConstant.Color_Tip_LostCurrency_Str = "fc7b6a";
            ColorConstant.Color_Tip_LostCurrency = ColorExt.HexStrToColor("fc7b6a" /* Color_Tip_LostCurrency_Str */);
            ColorConstant.Color_Equip_Skill_Str = "e983f5";
            ColorConstant.Color_Equip_Skill = ColorExt.HexStrToColor("e983f5" /* Color_Equip_Skill_Str */);
            ColorConstant.Color_UI_Color_1_Str = "ffdd7d";
            ColorConstant.Color_UI_Color_1 = ColorExt.HexStrToColor("ffdd7d" /* Color_UI_Color_1_Str */);
            ColorConstant.Color_Rank_Str = "502e10";
            ColorConstant.Color_Rank = ColorExt.HexStrToColor("502e10" /* Color_Rank_Str */);
            ColorConstant.Color_QIANLI_Str = "87F35C";
            ColorConstant.Color_QIANLI = ColorExt.HexStrToColor("87F35C" /* Color_QIANLI_Str */);
            ColorConstant.COLOR_COMPOUND_PRE_STR = "130101";
            ColorConstant.Color_COMPOUND_PRE = ColorExt.HexStrToColor("130101" /* COLOR_COMPOUND_PRE_STR */);
            ColorConstant.Color_Item_Enough_Str = "1d8e00";
            ColorConstant.Color_Item_Enough = ColorExt.HexStrToColor("1d8e00" /* Color_Item_Enough_Str */);
            ColorConstant.Color_Item_Not_Enough_Str = "c30000";
            ColorConstant.Color_Item_Not_Enough = ColorExt.HexStrToColor("c30000" /* Color_Item_Not_Enough_Str */);
            ColorConstant.Color_ATT_Str = "130101";
            ColorConstant.Color_ATT = ColorExt.HexStrToColor("130101" /* Color_ATT_Str */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ColorConstant);
var ColorConstantV3 = {
    fullname: "ColorConstantV3",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ColorConstantV3.Color_Red_Str = "FB2929";
            ColorConstantV3.Color_Red = ColorExt.HexStrToColor("FB2929" /* Color_Red_Str */);
            ColorConstantV3.Color_Red2_Str = "ff2727";
            ColorConstantV3.Color_Red2 = ColorExt.HexStrToColor("ff2727" /* Color_Red2_Str */);
            ColorConstantV3.Color_Orange_Str = "FF7633";
            ColorConstantV3.Color_Orange = ColorExt.HexStrToColor("FF7633" /* Color_Orange_Str */);
            ColorConstantV3.Color_Orange2_Str = "A64E00";
            ColorConstantV3.Color_Orange2 = ColorExt.HexStrToColor("A64E00" /* Color_Orange2_Str */);
            ColorConstantV3.Color_Orang3_Str = "ffa912";
            ColorConstantV3.Color_Orang3 = ColorExt.HexStrToColor("ffa912" /* Color_Orang3_Str */);
            ColorConstantV3.Color_Purple_Str = "B25DE8";
            ColorConstantV3.Color_Purple = ColorExt.HexStrToColor("B25DE8" /* Color_Purple_Str */);
            ColorConstantV3.Color_Purple_Str2 = "c368e9";
            ColorConstantV3.Color_Purple2 = ColorExt.HexStrToColor("c368e9" /* Color_Purple_Str2 */);
            ColorConstantV3.Color_Purple3_Str = "ff11eb";
            ColorConstantV3.Color_Purple3 = ColorExt.HexStrToColor("ff11eb" /* Color_Purple3_Str */);
            ColorConstantV3.Color_Blue_Str = "2DC6F8";
            ColorConstantV3.Color_Blue = ColorExt.HexStrToColor("2DC6F8" /* Color_Blue_Str */);
            ColorConstantV3.Color_Green_Str = "0FFF32";
            ColorConstantV3.Color_Green = ColorExt.HexStrToColor("0FFF32" /* Color_Green_Str */);
            ColorConstantV3.Color_Green_Strong_Str = "1D8E00";
            ColorConstantV3.Color_Green_Strong = ColorExt.HexStrToColor("1D8E00" /* Color_Green_Strong_Str */);
            ColorConstantV3.Color_White_Str = "FFF9E3";
            ColorConstantV3.Color_White = ColorExt.HexStrToColor("FFF9E3" /* Color_White_Str */);
            ColorConstantV3.Color_Gray_Str = "C28400";
            ColorConstantV3.Color_Gray = ColorExt.HexStrToColor("C28400" /* Color_Gray_Str */);
            ColorConstantV3.Color_Yellow_Str = "F7E423";
            ColorConstantV3.Color_Yellow = ColorExt.HexStrToColor("F7E423" /* Color_Yellow_Str */);
            ColorConstantV3.Color_Pink_Str = "E983F5";
            ColorConstantV3.Color_Pink = ColorExt.HexStrToColor("E983F5" /* Color_Pink_Str */);
            ColorConstantV3.Color_LightBgSkill_Str = "8130A7";
            ColorConstantV3.Color_LightBgSkill = ColorExt.HexStrToColor("8130A7" /* Color_LightBgSkill_Str */);
            ColorConstantV3.Color_PaleRed_Str = "FD614C";
            ColorConstantV3.Color_PaleRed = ColorExt.HexStrToColor("FD614C" /* Color_PaleRed_Str */);
            ColorConstantV3.Color_LightBrown_Str = "A64E00";
            ColorConstantV3.Color_LightBrown = ColorExt.HexStrToColor("A64E00" /* Color_LightBrown_Str */);
            ColorConstantV3.Color_SealBrown_Str = "502E10";
            ColorConstantV3.Color_SealBrown = ColorExt.HexStrToColor("502E10" /* Color_SealBrown_Str */);
            ColorConstantV3.Color_Black_Str = "130101";
            ColorConstantV3.Color_Black = ColorExt.HexStrToColor("130101" /* Color_Black_Str */);
            ColorConstantV3.Color_MissionBlue_Str = "0081AB";
            ColorConstantV3.Color_MissionBlue = ColorExt.HexStrToColor("0081AB" /* Color_MissionBlue_Str */);
            ColorConstantV3.Color_MissionGreen_Str = "1D8E00";
            ColorConstantV3.Color_MissionGreen = ColorExt.HexStrToColor("1D8E00" /* Color_MissionGreen_Str */);
            ColorConstantV3.Color_TradeRed_Str = "C30000";
            ColorConstantV3.Color_TradeRed = ColorExt.HexStrToColor("C30000" /* Color_TradeRed_Str */);
            ColorConstantV3.Color_MysteryRed_Str = "C60000";
            ColorConstantV3.Color_MysteryRed = ColorExt.HexStrToColor("C60000" /* Color_MysteryRed_Str */);
            ColorConstantV3.Color_MysteryPurple_Str = "963CE9";
            ColorConstantV3.Color_MysteryPurple = ColorExt.HexStrToColor("963CE9" /* Color_MysteryPurple_Str */);
            ColorConstantV3.Color_MysteryGreen_Str = "56A700";
            ColorConstantV3.Color_MysteryGreen = ColorExt.HexStrToColor("56A700" /* Color_MysteryGreen_Str */);
            ColorConstantV3.Color_ChatGreen_Str = "1D8E00";
            ColorConstantV3.Color_ChatGreen = ColorExt.HexStrToColor("1D8E00" /* Color_ChatGreen_Str */);
            ColorConstantV3.Color_ChatBlue_Str = "0081AB";
            ColorConstantV3.Color_ChatNameBlue = ColorExt.HexStrToColor("0081AB" /* Color_ChatBlue_Str */);
            ColorConstantV3.Color_RedPacketSelf_Str = "8130A7";
            ColorConstantV3.Color_RedPacketSelf = ColorExt.HexStrToColor("8130A7" /* Color_RedPacketSelf_Str */);
            ColorConstantV3.Color_ChatName_Str = "FFF9E2";
            ColorConstantV3.Color_ChatName = ColorExt.HexStrToColor("FFF9E2" /* Color_ChatName_Str */);
            ColorConstantV3.Color_ChatNameChange_Str = "0081AA";
            ColorConstantV3.Color_ChatNameChange = ColorExt.HexStrToColor("0081AA" /* Color_ChatNameChange_Str */);
            ColorConstantV3.Color_QRCodeYellow_Str = "E4D328";
            ColorConstantV3.Color_QRCodeYellow = ColorExt.HexStrToColor("E4D328" /* Color_QRCodeYellow_Str */);
            ColorConstantV3.Color_ButtonFontColor_Str = "502E10";
            ColorConstantV3.Color_ButtonFontColor = ColorExt.HexStrToColor("502E10" /* Color_ButtonFontColor_Str */);
            ColorConstantV3.Color_ButtonFontEffColor_Str = "FFF5E9";
            ColorConstantV3.Color_ButtonFontEffColor = ColorExt.HexStrToColor("FFF5E9" /* Color_ButtonFontEffColor_Str */);
            ColorConstantV3.Color_ButtonFontSelectColor_Str = "E6FFFE";
            ColorConstantV3.Color_ButtonFontSelectColor = ColorExt.HexStrToColor("E6FFFE" /* Color_ButtonFontSelectColor_Str */);
            ColorConstantV3.Color_ButtonFontSelectEffColor_Str = "955D19";
            ColorConstantV3.Color_ButtonFontSelectEffColor = ColorExt.HexStrToColor("955D19" /* Color_ButtonFontSelectEffColor_Str */);
            ColorConstantV3.Color_BigButtonFontColor_Str = "185323";
            ColorConstantV3.Color_BigButtonFontColor = ColorExt.HexStrToColor("185323" /* Color_BigButtonFontColor_Str */);
            ColorConstantV3.Color_BigButtonFontSelectEffColor_Str = "D9FFCD";
            ColorConstantV3.Color_BigButtonFontSelectEffColor = ColorExt.HexStrToColor("D9FFCD" /* Color_BigButtonFontSelectEffColor_Str */);
            ColorConstantV3.Color_WhiteLabelEffColor_Str = "713D33";
            ColorConstantV3.Color_WhiteLabelEffColor = ColorExt.HexStrToColor("713D33" /* Color_WhiteLabelEffColor_Str */);
            ColorConstantV3.Color_VerticalSelectColor_Str = "403631";
            ColorConstantV3.Color_VerticalSelectColor = ColorExt.HexStrToColor("403631" /* Color_VerticalSelectColor_Str */);
            ColorConstantV3.Color_VerticalUnSelectColor_Str = "FFF9E3";
            ColorConstantV3.Color_VerticalUnSelectColor = ColorExt.HexStrToColor("FFF9E3" /* Color_VerticalUnSelectColor_Str */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ColorConstantV3);
var DateUtil = {
    fullname: "DateUtil",
    baseTypeName: "System.Object",
    staticDefinition: {
        FormatSeconds: function (seconds, withHour){
            if (seconds <= 0){
                return withHour ? "00:00:00" : "00:00";
            }
            if (withHour){
                return (seconds / 3600).ToString$$String("D2") + ":" + (seconds / 60 % 60).ToString$$String("D2") + ":" + (seconds % 60).ToString$$String("D2");
            }
            return (seconds / 60).ToString$$String("D2") + ":" + (seconds % 60).ToString$$String("D2");
        },
        GetVipTime: function (seconds, showSeconds, showMinutes){
            var timeSpane = System.TimeSpan.FromSeconds(seconds);
            var d = timeSpane.get_Days();
            var h = timeSpane.get_Hours();
            var m = timeSpane.get_Minutes();
            var s = timeSpane.get_Seconds();
            if (timeSpane.get_Days() >= 1){
                if (h == 0)
                    h = 1;
                return d + "天" + h + "小时";
            }
            if (h >= 1){
                if (m > 0)
                    return h + "小时" + m + "分钟";
                return h + "小时";
            }
            if (m >= 1){
                if (showSeconds && showMinutes)
                    return m + "分" + s + "秒";
                return m + "分钟";
            }
            if (showSeconds)
                return s + "秒";
            return "小于1分钟";
        },
        GetSelfZoneTime: function (seconds, showSeconds, showMinutes){
            var timeSpane = System.TimeSpan.FromSeconds(seconds);
            var d = timeSpane.get_Days();
            var h = timeSpane.get_Hours();
            var m = timeSpane.get_Minutes();
            var s = timeSpane.get_Seconds();
            if (timeSpane.get_Days() >= 1){
                if (h == 0)
                    h = 1;
                return d + "天";
            }
            if (h >= 1){
                if (m > 0)
                    return h + "小时" + m + "分钟";
                return h + "小时";
            }
            if (m >= 1){
                if (showSeconds && showMinutes)
                    return m + "分" + s + "秒";
                return m + "分钟";
            }
            if (showSeconds)
                return s + "秒";
            return "刚刚";
        },
        GetMinuteSeconds: function (seconds){
            return (seconds / 60).ToString$$String("D") + "分" + (seconds % 60).ToString$$String("D") + "秒";
        },
        GetDayHourMinute: function (seconds){
            var timeSpane = System.TimeSpan.FromSeconds(seconds);
            var d = timeSpane.get_Days();
            var h = timeSpane.get_Hours();
            var m = timeSpane.get_Minutes();
            var s = timeSpane.get_Seconds();
            return System.String.Format$$String$$Object$$Object$$Object("{0}天{1}小时{2}分", d, h, m);
        },
        GetMinutes: function (seconds){
            var m = seconds / 60;
            if (m >= 1)
                return m.ToString$$String("D") + "分钟";
            return "小于1分钟";
        },
        CNDayOfWeek: function (dateTime){
            var dayOfWeek = dateTime.get_DayOfWeek();
            if (dayOfWeek == 0){
                dayOfWeek = 7;
            }
            return dayOfWeek;
        },
        GetDateStr: function (unixTimestamp, format){
            var dt = DateUtil.UnixTimeStampToDateTime(unixTimestamp);
            return dt.ToString$$String(format);
        },
        UnixTimeStampToTimeSpan: function (unixTimestamp){
            var dateTime = DateUtil.UnixTimeStampToDateTime(unixTimestamp);
            var tTimeSpan = System.TimeSpan.FromTicks(dateTime.get_Ticks());
            return tTimeSpan;
        },
        UnixTimeStampToTotalMilliseconds: function (unixTimestamp){
            var tTimeSpan = DateUtil.UnixTimeStampToTimeSpan(unixTimestamp);
            return tTimeSpan.get_TotalMilliseconds();
        },
        UnixTimeStampToDateTime: function (unixTimestamp){
            return new Date(unixTimestamp);
        },
        DateTimeToUnixTimestamp: function (dateTime){
            return dateTime.getTime();
        },
        getNewestActivityDate: function (timeStamp){
            var dt = DateUtil.UnixTimeStampToDateTime(timeStamp);
            return System.String.Format$$String$$Object$$Object("{0}月{1}日", dt.get_Month(), dt.get_Day());
        },
        IsBetweenTimeArea$$DateTime$$DateTime$$DateTime: function (startTime, endTime, compareTime){
            var tCompareStartSta = System.DateTime.Compare(compareTime, startTime) > 0;
            var tCompareEndSta = System.DateTime.Compare(compareTime, endTime) < 0;
            return tCompareStartSta && tCompareEndSta;
        },
        IsBetweenTimeArea$$Int64$$Int64: function (startTick, endTick){
            var startTime = DateUtil.UnixTimeStampToDateTime(startTick);
            var endTime = DateUtil.UnixTimeStampToDateTime(endTick);
            var curTime = SystemTimeManager.get_Instance().GetServerTime();
            var tInRacingSta = DateUtil.IsBetweenTimeArea$$DateTime$$DateTime$$DateTime(startTime, endTime, curTime);
            return tInRacingSta;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DateUtil);
var DOTweenExt = {
    fullname: "DOTweenExt",
    baseTypeName: "System.Object",
    staticDefinition: {
        DOMove2: function (pTransform, pTotalPositionToChange, pDuration, pOnComplete, pIsLocalPosition, pEase){
            if (UnityEngine.Object.op_Equality(null, pTransform))
                return null;
            var tBeginPosition = UnityEngine.Vector3.get_zero();
            var tPositionNeedMove = pTotalPositionToChange;
            var tPositionOffSet = UnityEngine.Vector3.get_zero();
            return DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Core.TweenerCore$3.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Core.TweenerCore$3.ctor, DG.Tweening.DOTween.To$$DOGetter$1$Vector3$$DOSetter$1$Vector3$$Vector3$$Single(function (){
                return tBeginPosition;
            }, function (x){
                if (UnityEngine.Object.op_Inequality(null, pTransform)){
                    tPositionOffSet = UnityEngine.Vector3.op_Subtraction(x, tBeginPosition);
                    if (pIsLocalPosition)
                        pTransform.set_localPosition(UnityEngine.Vector3.op_Addition(pTransform.get_localPosition(), tPositionOffSet));
                    else
                        pTransform.set_position(UnityEngine.Vector3.op_Addition(pTransform.get_position(), tPositionOffSet));
                }
                tBeginPosition = x;
            }, tPositionNeedMove, pDuration), pEase), function (){
                if (UnityEngine.Object.op_Equality(null, pTransform))
                    return;
                if (null != pOnComplete)
                    pOnComplete();
            });
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DOTweenExt);
var ExitGameScript = {
    fullname: "ExitGameScript",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            ExitGameScript._instance = null;
            ExitGameScript.CheckConnected = false;
            ExitGameScript.NeedReturnToLogin = false;
            ExitGameScript.WaitForReConnect = false;
            ExitGameScript.reConnecting = false;
            ExitGameScript.forceCheck = false;
        },
        Instance$$: "ExitGameScript",
        get_Instance: function (){
            return ExitGameScript._instance;
        },
        CheckReloginWhenConnectClose: function (forceCheck_){
            ExitGameScript.forceCheck = forceCheck_;
            if (ExitGameScript.forceCheck){
                ExitGameScript.reConnecting = true;
            }
            if (ExitGameScript.reConnecting == true){
                ExitGameScript.CheckConnected = true;
            }
        },
        OpenReloginTipWindow: function (tip, exitAccount, needLogout){
            LayerManager.get_Instance().LockUICamera(false);
            ProxyWindowModule.OpenSimpleMessageWindow(tip, function (){
                if (exitAccount){
                    ExitGameScript.get_Instance().ReloginAccount(needLogout);
                }
                else {
                    ExitGameScript.get_Instance().HanderRelogin();
                }
            }, 3, null, UILayerType.TopDialogue);
        },
        OpenExitTipWindow: function (tip){
            LayerManager.get_Instance().LockUICamera(false);
            BuiltInDialogueViewController.OpenView(tip, function (){
                ExitGameScript.get_Instance().HanderExitGame(true);
            }, null, 3, "确定", "取消");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.isClick = false;
            this.ReConnectTryCount = 0;
            this.ReConnectMaxCount = 2;
            this.ReConnectTipMaxCount = 5;
            this.LogOutNotify = null;
            this._exited = false;
            this._relogin = false;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            ExitGameScript._instance = this;
            if (GameSetting.get_Release()){
                this.ReConnectMaxCount = 2;
            }
            else {
                this.ReConnectMaxCount = 1;
            }
            UICamera.onKey = $CombineDelegates(UICamera.onKey, $CreateDelegate(this, this.OnPressKey));
            if (!UnityEngine.Application.get_isMobilePlatform()){
                UICamera.onScreenResize = $CombineDelegates(UICamera.onScreenResize, $CreateDelegate(this, this.OnScreenResize));
            }
        },
        OnDestroy: function (){
            UICamera.onKey = $RemoveDelegate(UICamera.onKey, $CreateDelegate(this, this.OnPressKey));
            if (!UnityEngine.Application.get_isMobilePlatform()){
                UICamera.onScreenResize = $RemoveDelegate(UICamera.onScreenResize, $CreateDelegate(this, this.OnScreenResize));
            }
        },
        OnPressKey: function (go, key){
            if (key == 27){
                if (!UnityEngine.Application.get_isEditor() && !GameSetting.get_IsOriginWinPlatform() || GameDebuger.DebugForExit){
                    this.OpenExitDialogue();
                }
                this.DumpPlayerInfo();
            }
        },
        OnScreenResize: function (){
            LayerManager.get_Root().SceneHUDCamera.ResetAspect();
        },
        DumpPlayerInfo: function (){
            if (GameSetting.get_Release())
                return;
            var playerDto = ModelManager.get_Player().GetPlayer();
            if (playerDto == null)
                return;
            var info = " 账号:" + LoginManager.get_Instance().get_LoginId();
            info += " ID:" + playerDto.id;
            info += " 昵称:" + playerDto.name;
            var serverInfo = GameServerInfoManager.GetServerInfoByName(UnityEngine.PlayerPrefs.GetString$$String(GameSetting.get_LastServerPrefsName()));
            if (serverInfo != null){
                info += " 服务器:" + serverInfo.name;
            }
            info += " 时间:" + System.DateTime.get_Now().ToString$$String("yyyy-MM-dd hh-mm-ss");
            GameDebuger.TODO("\n        SceneDto sceneDto = WorldManager.Instance.GetModel().GetSceneDto();\n        if (sceneDto != null)\n        {\n            info += \' 当前场景:\' + sceneDto.name;\n        }\n\n        info += BattleManager.Instance.GetBattleInfo();\n            ");
            AssetPipeline.FileHelper.set_ClipBoard(info);
            GameDebuger.Log(info, null);
            TipManager.AddTip(info, false, false, "");
        },
        OpenExitDialogue: function (){
            if (this.isClick == false){
                this.isClick = true;
                GameDebuger.Log("InputKey is Escape", null);
                if (GameDebuger.DebugForLogout){
                    this.isClick = false;
                    SPSdkManager.get_Instance().CallbackLogout(true);
                }
                else if (GameDebuger.DebugForDisconnect){
                    this.isClick = false;
                    SocketManager.get_Instance().Close(false);
                }
                else {
                    this.DoExiter();
                }
            }
        },
        Update: function (){
            if (ExitGameScript.CheckConnected && !ExitGameScript.NeedReturnToLogin){
                if (ExitGameScript.reConnecting){
                    ExitGameScript.reConnecting = false;
                }
                if (SocketManager.IsOnLink == false){
                    LayerManager.get_Instance().LockUICamera(false);
                    RequestLoadingTip.Reset();
                    ProxyWorldMapModule.CloseMiniMap();
                    if (LoginManager.LeaveState == 5 /* EventObject.Leave_status_duplicate */){
                        if (!GameSetting.get_IsOriginWinPlatform()){
                            ServerManager.get_Instance().loginAccountDto = null;
                        }
                        this.OpenServerCloseTip("你的角色已从其他客户端登录，如非本人操作，请注意账号安全！");
                    }
                    else if (LoginManager.LeaveState == 3 /* EventObject.Leave_status_kickout */){
                        this.OpenServerCloseTip("网络中断, 请重新进入游戏");
                    }
                    else if (LoginManager.LeaveState == 4 /* EventObject.Leave_status_destroy */){
                        this.OpenServerCloseTip("服务器维护，请重新进入游戏");
                    }
                    else if (LoginManager.LeaveState == 1 /* EventObject.Leave_status_logout */){
                        this.OpenServerCloseTip("网络中断, 请重新进入游戏");
                    }
                    else if (LoginManager.LeaveState == 2 /* EventObject.Leave_status_disconnect */){
                        this.OpenReloginTip();
                    }
                    else if (LoginManager.LeaveState == 0 /* EventObject.Leave_status_unkonwn */){
                        this.OpenReloginTip();
                    }
                    else {
                        this.OpenReloginTip();
                    }
                    GameDebuger.TODO("PlayerGameState.Save();");
                    GameDebuger.TODO(" ModelManager.Player.StopAutoRun();");
                    ExitGameScript.CheckConnected = false;
                }
                else {
                    this.ReConnectTryCount = 0;
                }
            }
        },
        OnApplicationPause: function (paused){
            GameDebuger.Log("OnApplicationPause " + paused, null);
            if (!paused){
                TalkingDataHelper.Setup();
                GameDebuger.TODO("ModelManager.SystemData.ResetIdleCheck();");
                GameDebuger.TODO("BattleManager.Instance.CheckResumeBattle();");
                this.CancelInvoke$$String("CheckClickFlag");
                this.Invoke("CheckClickFlag", 0.5);
            }
            else {
                this.CancelInvoke$$String("CheckClickFlag");
                TalkingDataHelper.Dispose();
            }
        },
        CheckClickFlag: function (){
            if (this.isClick){
                GameDebuger.Log("Check isClick and set false", null);
                this.isClick = false;
            }
        },
        OnApplicationQuit: function (){
            TalkingDataHelper.Dispose();
            GameDebuger.Log("OnApplicationQuit", null);
            if (BattleManager.get_Instance().IsInBattle()){
                GameDebuger.LogError("[DEMO/非错误]为避免再次登录本角色时，服务端下发退出游戏前的战斗数据，干扰游戏。前端在退出游戏时发送退出战斗的协议。正式时登录游戏服务端应当下发之前的战斗Video。", null);
                BattleManager.get_Instance().ExitBattle();
            }
            if (SocketManager.IsOnLink){
                LoginManager.get_Instance().RemoveListener();
                GameDebuger.TODO(" ServiceRequestAction.requestServer(PlayerService.logout());");
            }
            SocketManager.get_Instance().Close(false);
            GameDebuger.Log("Exit Game!!!", null);
            this.DisposeOnApplicationQuit();
            this.FixedAnimatorDeactiveBug();
            GameDebuger.Log("Exit Game Success", null);
        },
        FixedAnimatorDeactiveBug: function (){
            return;
            var objs = UnityEngine.Object.FindObjectsOfType$1(UnityEngine.Animator.ctor);
            if (objs != null){
                for (var i = 0; i < objs.length; i++){
                    objs[i].get_gameObject().SetActive(false);
                }
            }
        },
        DisposeOnReconnect: function (){
            GameDebuger.Log("DisposeOnReconnect", null);
            this.DisposeModuleData();
        },
        DisposeOnReLogin: function (){
            GameDebuger.Log("DisposeOnReLogin", null);
            this.DisposeSceneData();
            this.DisposeModuleData();
            GameDebuger.TODO("ModelManager.Chat.Clear();");
            GameDebuger.TODO("PlayerGameState.Reset();");
            this.SavePlayerData();
            JSTimer.get_Instance().Dispose();
            UIModulePool.get_Instance().SetupTimer();
            GameDebuger.TODO("ProxyMainUIModule.Hide();");
            ProxyRoleCreateModule.Close();
            if (SocketManager.IsOnLink){
                GameDebuger.TODO("ServiceRequestAction.requestServer(PlayerService.logout());");
            }
            LoginManager.get_Instance().RemoveListener();
            SocketManager.get_Instance().Close(false);
            DataManager.Reset();
        },
        DisposeOnApplicationQuit: function (){
            GameDebuger.Log("DisposeOnApplicationQuit", null);
            this.SavePlayerData();
            JSTimer.get_Instance().Dispose();
            CSTimer.get_Instance().Dispose();
            GameDebuger.TODO("ModelManager.SystemData.Dispose();");
            UnityEngine.Screen.set_sleepTimeout(-2 /* SleepTimeout.SystemSetting */);
            VoiceRecognitionManager.get_Instance().CleanupVoiceCache();
            BaoyugameSdk.UnregisterPower();
        },
        SavePlayerData: function (){
            GameDebuger.Log("SavePlayerData", null);
            GameDebuger.TODO("ModelManager.Friend.Dispose();   //好友数据的保存\n        ModelManager.Chat.SaveChatRecord();//聊天-表情-记录 \n        ModelManager.Barrage.SaveRecord();//保存弹幕发送的记录\n        if (NewBieGuideManager.HasInstance)\n        {\n            NewBieGuideManager.Instance.Dispose(); //新手引导数据保存\n        }\n            ModelManager.DailyPush.Dispose(); //日程数据保存，主要是弹窗的");
            UnityEngine.PlayerPrefs.Save();
            GameDataManager.get_Instance().SaveData();
            ModelManager.get_Player().Dispose();
            GameDebuger.TODO("ModelManager.RedPacket.Dispose();");
        },
        DisposeModuleData: function (){
            GameDebuger.Log("DisposeModuleData", null);
            LoginManager.LeaveState = 0 /* EventObject.Leave_status_unkonwn */;
            GameDebuger.TODO("WorldManager.FirstEnter = true;\n            WorldManager.Instance.Reset();");
            ModelManager.Dispose();
            GameDebuger.TODO("GamePlotManager.Instance.Dispose();");
            GameDebuger.TODO("ModelManager.Backpack.Dispose();\n        ModelManager.Warehouse.Dispose();\n        ModelManager.Fashion.Dispose();\n        ModelManager.MagicEquipment.Dispose();\n        ModelManager.PetWarehouse.Dispose();\n        ModelManager.Guild.Dispose();\n        ModelManager.Arena.Dispose();\n        ModelManager.Team.Dispose();\n        ModelManager.Marry.Dispose();\n        MarryPlotManager.Instance.Dispose();\n        SedanVisitChangAnPlotManager.Instance.Dispose();\n        ModelManager.FullServiceAnnouncement.Dispose();\n        ModelManager.Marquee.Dispose();\n\n        ModelManager.Email.Dispose();\n//        ModelManager.DailyPush.Dispose();\n        ModelManager.PlayerBuff.Dispose();\n        ModelManager.Equipment.Dispose(); // 打造模块数据清除\n\n        ModelManager.TradeData.Dispose();      //\t商会数据重置\n        ModelManager.MissionData.Dispose();    //\t任务数据清除\n\t\tModelManager.FieldMonster.Dispose();\t//\t封妖日常清除\n        ModelManager.Reward.Dispose();         //\t奖励数据清除\n\t\tInstanceZonesModule.Instance.Dispose();\t//\t副本数据清除\n\n        ModelManager.Tournament.Dispose();\n        ModelManager.ChiefPlay.CleanWithExitGame();\n\t\tModelManager.HeroTrial.Dispose();\n\n\t\tModelManager.Trial.Dispose();\n\t\tModelManager.DreamlandData.Dispose();\n\n        ModelManager.Crew.Dispose();\n        ModelManager.Ranking.Dispose();\n        ModelManager.Pet.Dispose();\n            ModelManager.FactionSkill.Dispose();\n        PromoteManager.Instance.Dispose();\n            RedPointManager.Instance.Dispose();");
            JoystickModule.get_Instance().Dispose();
            UIModuleManager.get_Instance().Dispose();
            GameDebuger.TODO("ModelManager.NewestActivity.Dispose();\n        //周常活动\n        ModelManager.WeeklyMissionContent.Dispose();   ");
            GameServerInfoManager.Dispose();
            if (UnityEngine.Object.op_Inequality(SystemTimeManager.get_Instance(), null)){
                SystemTimeManager.get_Instance().Dispose();
            }
            GameDebuger.TODO("ConsumerTipsViewController.ClearMarks();\n        ModelManager.Achievement.Dispose();\n        ModelManager.GameGuide.Dispose();\n        ModelManager.GrowUpGuide.Dispose();\n        ModelManager.TargetGuide.Dispose();\n        ModelManager.Question.Dispose();\n            ModelManager.Consignment.Dispose ();\n\n\t\t//\t帮派竞赛\n\t\tModelManager.GuildCompetitionData.Dispose();\n\t\t//\t大闹天宫\n\t\tModelManager.CampWarData.Dispose();\n\t\t//\t护送国宝\n\t\tModelManager.Escort.Dispose();\n\n        //大唐无双\n        ModelManager.Tang.Dispose();\n\n        //选秀大赛\n        ModelManager.LookShowStage.Dispose();\n        ModelManager.TalentShow.Dispose();\n\n\t\t//\t月光宝盒\n\t\tModelManager.MoollightBox.Dispose();\n\n\t\t//\t屏幕中间固定文字数据清理\n\t\tScreenFixedTipManager.Instance.Dispose();\n\n        ModelManager.TeacherPupil.Dispose();         //师徒系统\n\t\tModelManager.OfficialPosition.Dispose(); //官职系统\n\t\tModelManager.Mount.Dispose(); //坐骑系统\n        ModelManager.ArtifactMaze.Dispose(); // 神器迷宫副本\n        ModelManager.GuildHundredGrassValley.Dispose(); // 帮派百草谷\n        ModelManager.ChangeEquip.Dispose();//转换装备时装\n        ModelManager.ChangeFaction.Dispose();//转换门派角色\n\t\tModelManager.CSPK.Dispose();\n\n        //雪女世界Boss\n        ModelManager.SnowWorldBoss.Dispose();\n\n\t\t//\t决斗\n\t\tModelManager.DuelData.Dispose();");
            TipManager.Dispose();
            GameDebuger.TODO("ModelManager.Hallow.Dispose();");
        },
        DisposeSceneData: function (){
            GameDebuger.Log("DisposeSceneData", null);
            GameDebuger.TODO("WorldManager.Instance.Destroy();\n        WorldMapLoader.Instance.Destroy();\n            BattleManager.Instance.Destroy();");
        },
        DoExiter: function (){
            LayerManager.get_Instance().LockUICamera(false);
            this.CancelInvoke$$String("CheckClickFlag");
            this.Invoke("CheckClickFlag", 0.5);
            SPSdkManager.get_Instance().DoExiter($CreateAnonymousDelegate(this, function (exited){
                this.isClick = false;
                if (exited){
                    this.HanderExitGame(false);
                }
                else {
                    if (ExitGameScript.reConnecting == false){
                        if (LoginManager.get_Instance().SupportRelogin()){
                            if (SocketManager.IsOnLink == false){
                                ExitGameScript.CheckConnected = true;
                            }
                        }
                    }
                }
            }), $CreateAnonymousDelegate(this, function (){
                this.CancelInvoke$$String("CheckClickFlag");
                this.OpenExitConfirmWindow();
            }));
        },
        OpenExitConfirmWindow: function (){
            ProxyWindowModule.OpenConfirmWindow("退出游戏\n\n离线自动挂机", "", $CreateAnonymousDelegate(this, function (){
                this.isClick = false;
                this.HanderExitGame(true);
            }), $CreateAnonymousDelegate(this, function (){
                if (ExitGameScript.reConnecting == false){
                    if (LoginManager.get_Instance().SupportRelogin()){
                        if (SocketManager.IsOnLink == false){
                            ExitGameScript.CheckConnected = true;
                        }
                    }
                }
                this.isClick = false;
            }), 3, null, null, 0, true, false);
        },
        HanderExitGame: function (exitSDK){
            if (exitSDK){
                SPSdkManager.get_Instance().Exit();
            }
            LoginManager.get_Instance().RemoveListener();
            ExitGameScript.CheckConnected = false;
            this.ExitGame();
        },
        ReloginAccount: function (needLogout){
            if (needLogout){
                SPSdkManager.get_Instance().Logout($CreateAnonymousDelegate(this, function (success){
                    if (success){
                        this.DoReloginAccount(true);
                    }
                    else {
                        ProxyWindowModule.OpenMessageWindow("账号退出失败", "", null, 3, null, UILayerType.Dialogue, false);
                    }
                }));
            }
            else {
                this.DoReloginAccount(true);
            }
        },
        DoReloginAccount: function (cleanSid){
            ProxyLoginModule.serverInfo = null;
            ServerManager.get_Instance().loginAccountDto = null;
            if (cleanSid){
                ServerManager.get_Instance().sid = null;
            }
            this.HanderRelogin();
        },
        HanderRelogin: function (){
            GameDebuger.Log("HanderRelogin", null);
            if (this.LogOutNotify != null){
                this.LogOutNotify();
            }
            this._relogin = false;
            this.DisposeOnReLogin();
            this.GotoLoginScene();
        },
        ExitGame: function (){
            if (GameDebuger.DebugForExit){
                this.DoExitGame();
            }
            else {
                this.HanderRelogin();
            }
        },
        DoExitGame: function (){
            if (this._exited){
                return;
            }
            this._exited = true;
            UnityEngine.Application.Quit();
            UnityEditor.EditorApplication.set_isPlaying(false);
        },
        GotoLoginScene: function (){
            if (this._relogin){
                return;
            }
            this._relogin = true;
            LoginManager.get_Instance().GotoLoginScene();
        },
        ChangeIsClick: function (){
            this.isClick = false;
        },
        EnableClick: function (){
            this.ChangeIsClick();
        },
        OpenServerCloseTip: function (tip){
            ProxyWindowModule.OpenSimpleMessageWindow(tip, $CreateAnonymousDelegate(this, function (){
                this.HanderRelogin();
            }), 3, null, UILayerType.TopDialogue);
        },
        OpenReloginTip: function (){
            var tip = "网络不稳定，请重新连接";
            if (ExitGameScript.forceCheck){
                tip = "网络中断了，请重新游戏";
            }
            tip = System.String.Format$$String$$Object(tip + "[{0}]", LoginManager.CloseState);
            if (ExitGameScript.forceCheck){
                ProxyWindowModule.OpenSimpleMessageWindow(tip, $CreateAnonymousDelegate(this, function (){
                    this.HanderRelogin();
                }), 3, null, UILayerType.TopDialogue);
            }
            else {
                if (ExitGameScript.reConnecting == false){
                    ExitGameScript.WaitForReConnect = true;
                    if (this.ReConnectTryCount >= this.ReConnectMaxCount || !UnityEngine.Application.get_isPlaying()){
                        if (this.ReConnectTryCount >= this.ReConnectTipMaxCount){
                            ProxyWindowModule.OpenSimpleConfirmWindow(tip, $CreateAnonymousDelegate(this, function (){
                                this.ReConnectTryCount = 0;
                                this.DelayCheckReConnect();
                            }), $CreateAnonymousDelegate(this, function (){
                                this.HanderRelogin();
                            }), 3, "重新连接", "返回登陆", 0, UILayerType.Dialogue, false);
                        }
                        else {
                            ProxyWindowModule.OpenSimpleConfirmWindow(tip, $CreateAnonymousDelegate(this, function (){
                                this.DelayCheckReConnect();
                            }), $CreateAnonymousDelegate(this, function (){
                                this.HanderRelogin();
                            }), 3, "重连", "返回登陆", this.ReConnectTryCount * 20, UILayerType.Dialogue, true);
                        }
                    }
                    else {
                        this.DelayCheckReConnect();
                    }
                }
            }
        },
        DelayCheckReConnect: function (){
            GameDebuger.Log("DelayCheckReConnect ReConnectTryCount=" + this.ReConnectTryCount, null);
            RequestLoadingTip.Show("正在连接服务器", true, true, 0);
            this.CancelInvoke$$String("CheckReConnect");
            var delayTime = 0.5;
            if (this.ReConnectTryCount >= this.ReConnectMaxCount){
                delayTime = 0.5;
            }
            else {
                delayTime = this.ReConnectTryCount * 3 + 0.5;
            }
            this.Invoke("CheckReConnect", delayTime);
        },
        CheckReConnect: function (){
            if (!(LoginManager.LeaveState == 5 /* EventObject.Leave_status_duplicate */)){
                this.ReConnectTryCount++;
                this.DisposeOnReconnect();
                ExitGameScript.reConnecting = true;
                ExitGameScript.WaitForReConnect = false;
                LoginManager.get_Instance().ReConnect();
            }
        },
        OnGUI: function (){
            if (UnityEngine.Application.get_isEditor()){
                UnityEngine.GUI.set_color(UnityEngine.Color.get_red());
                UnityEngine.GUILayout.Label$$String$$GUILayoutOption$Array("JSB模式", new Array(0));
            }
        }
    }
};
JsTypes.push(ExitGameScript);
var GameEffectConst = {
    fullname: "GameEffectConst",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameEffectConst.Effect_Retreat = "game_eff_2005";
            GameEffectConst.Effect_TargetSelect = "game_eff_2014";
            GameEffectConst.Effect_TargetClick = "game_eff_2020";
            GameEffectConst.Effect_CharactorClick = "game_eff_2017";
            GameEffectConst.Effect_SkillName = "game_eff_2002";
            GameEffectConst.Effect_PlayerUpgrade = "game_eff_2001";
            GameEffectConst.Effect_Defence = "game_eff_2003";
            GameEffectConst.Effect_Catch = "game_eff_2006";
            GameEffectConst.Effect_Summon = "game_eff_2007";
            GameEffectConst.Effect_TerrainClick = "game_eff_2012";
            GameEffectConst.Effect_TianLei = "game_eff_tianlei";
            GameEffectConst.EFFECT_SURROUND = "ui_eff_1007_03_Effect";
        },
        GetGameEffectPath: function (effectType){
            var effpath = PathHelper.GetEffectPath(effectType);
            return effpath;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameEffectConst);
var GameUtil = {
    fullname: "GameUtil",
    baseTypeName: "System.Object",
    staticDefinition: {
        LOG_Notify: function (msg){
        },
        LogTeam: function (msg){
        },
        LogFish: function (msg){
        },
        LogRedPoint: function (msg){
        },
        LOGModule: function (msg){
        },
        SafeRun$$Action$$Action$1$Exception: function (act, onError){
            if (act == null)
                return;
            try{
                act();
            }
            catch(e){
                GameDebuger.LogException(e, null);
                if (onError != null)
                    onError(e);
            }
        },
        SafeRun$1$$Action$1$$T$$Action$1$Exception: function (T, act, param, onError){
            if (act == null)
                return;
            try{
                act(param);
            }
            catch(e){
                GameDebuger.LogException(e, null);
                if (onError != null)
                    onError(e);
            }
        },
        SafeRun$2$$Action$2$$T$$R: function (T, R, act, t, r){
            if (act != null)
                act(t, r);
        },
        FiltAndSort$1: function (T, dataSet, predicate, length, com){
            length.Value = 0;
            var temp = CollectionExtension.Filter$1(T, dataSet, predicate);
            if (temp == null)
                return null;
            else {
                var tempSet = CollectionExtension.ToList$1(T, temp);
                length.Value = tempSet.get_Count();
                if (com == null){
                    return CollectionExtension.ToList$1(T, temp);
                }
                else {
                    tempSet.Sort$$Comparison$1(com);
                    return tempSet;
                }
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameUtil);
var CollectionExtension = {
    fullname: "CollectionExtension",
    baseTypeName: "System.Object",
    staticDefinition: {
        AddIfNotExist$1$$List$1$$T: function (T, dataSet, t){
            if (dataSet == null || t == null){
                return;
            }
            if (dataSet.IndexOf$$T(t) < 0){
                dataSet.Add(t);
            }
        },
        ForEach$1: function (T, dataset, act){
            if (dataset == null)
                return;
            var $it37 = dataset.GetEnumerator();
            while ($it37.MoveNext()){
                var item = $it37.get_Current();
                GameUtil.SafeRun$1$$Action$1$$T$$Action$1$Exception(T, act, item, null);
            }
        },
        ForEachI$1: function (T, dataset, act){
            if (dataset == null)
                return;
            if (act == null)
                return;
            var i = 0;
            var $it38 = dataset.GetEnumerator();
            while ($it38.MoveNext()){
                var data = $it38.get_Current();
                GameUtil.SafeRun$2$$Action$2$$T$$R(T, System.Int32.ctor, act, data, i);
                i++;
            }
        },
        Map$2: function*(T, R, dataset, action){
            if (dataset == null || action == null)
                yield(Default(R));
            var $it39 = dataset.GetEnumerator();
            while ($it39.MoveNext()){
                var data = $it39.get_Current();
                yield(action(data));
            }
        },
        MapI$2: function*(T, R, dataset, action){
            if (dataset == null || action == null)
                yield(Default(R));
            var i = 0;
            var $it40 = dataset.GetEnumerator();
            while ($it40.MoveNext()){
                var data = $it40.get_Current();
                yield(action(data, i));
                i++;
            }
        },
        Filter$1: function*(T, dataset, predicate){
            if (dataset != null){
                var $it41 = dataset.GetEnumerator();
                while ($it41.MoveNext()){
                    var item = $it41.get_Current();
                    if (predicate != null){
                        if (predicate(item)){
                            yield(item);
                        }
                    }
                    else {
                        yield(item);
                    }
                }
            }
            else {
                yield(Default(T));
            }
        },
        Find$1$$IEnumerable$1$$Predicate$1$$Int32: function (T, dataset, predicate, idx){
            idx.Value = -1 /* -1 */;
            if (dataset != null && predicate != null){
                var i = 0;
                var $it42 = dataset.GetEnumerator();
                while ($it42.MoveNext()){
                    var item = $it42.get_Current();
                    if (predicate(item)){
                        idx.Value = i;
                        return item;
                    }
                    ++i;
                }
            }
            return Default(T);
        },
        FindElementIdx$1: function (T, dataset, predicate){
            var idx = -1 /* -1 */;
            (function (){
                var $1 = $Ref(null, idx);
                var $res = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1$$Int32(T, dataset, predicate, $1);
                idx = $1.Value;
                return $res;
            }).call(this);
            return idx;
        },
        Find$2$$IEnumerable$1$$Predicate$1$$Func$2: function (T, R, dataset, predicate, action){
            var idx = -1 /* -1 */;
            var data = (function (){
                var $1 = $Ref(null, idx);
                var $res = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1$$Int32(T, dataset, predicate, $1);
                idx = $1.Value;
                return $res;
            }).call(this);
            return action(data);
        },
        Find$1$$IEnumerable$1$$Predicate$1: function (T, dataset, predicate){
            var idx = -1 /* -1 */;
            return (function (){
                var $1 = $Ref(null, idx);
                var $res = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1$$Int32(T, dataset, predicate, $1);
                idx = $1.Value;
                return $res;
            }).call(this);
        },
        ToList$1: function (T, dataset){
            var list = new System.Collections.Generic.List$1.ctor(T);
            if (dataset != null){
                var $it43 = dataset.GetEnumerator();
                while ($it43.MoveNext()){
                    var item = $it43.get_Current();
                    list.Add(item);
                }
            }
            return list;
        },
        Replace$1$$List$1$$Predicate$1$$T: function (T, dataset, predicate, t){
            var replaceSuccess = false;
            if (!CollectionExtension.IsNullOrEmpty$1$$List$1(T, dataset) && predicate != null){
                var idx = -1 /* -1 */;
                var item = (function (){
                    var $1 = $Ref(null, idx);
                    var $res = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1$$Int32(T, dataset, predicate, $1);
                    idx = $1.Value;
                    return $res;
                }).call(this);
                if (item != null){
                    dataset.set_Item$$Int32(idx, t);
                    replaceSuccess = true;
                }
            }
            return replaceSuccess;
        },
        ReplaceOrAdd$1: function (T, dataset, predicate, t){
            if (t == null)
                return;
            var isExist = CollectionExtension.Replace$1$$List$1$$Predicate$1$$T(T, dataset, predicate, t);
            if (!isExist)
                dataset.Add(t);
        },
        RemoveItem$1: function (T, dataSet, t){
            if (null == t || CollectionExtension.IsNullOrEmpty$1$$List$1(T, dataSet))
                return false;
            return dataSet.Remove(t);
        },
        Remove$1: function (T, dataSet, predicate){
            var isChange = false;
            var item = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(T, dataSet, predicate);
            if (item != null){
                dataSet.Remove(item);
                isChange = true;
            }
            return isChange;
        },
        Replace$2$$Dictionary$2$$TKey$$TValue: function (TKey, TValue, dict, key, val){
            if (dict == null)
                return Default(TValue);
            var old;
            if ((function (){
                var $1 = $Ref(null, old);
                var $res = dict.TryGetValue(key, $1);
                old = $1.Value;
                return $res;
            }).call(this)){
                dict.Remove(key);
            }
            dict.Add(key, val);
            return old;
        },
        CreateIfNotExist$2: function (TKey, TValue, dict, key, createFunc){
            if (dict == null || key == null){
                return null;
            }
            if (!dict.ContainsKey(key)){
                if (createFunc != null){
                    var value = createFunc();
                    dict.Add(key, value);
                    return value;
                }
                else
                    return null;
            }
            else if (dict.get_Item$$TKey(key) == null && createFunc != null){
                var value = createFunc();
                dict.set_Item$$TKey(key, value);
                return value;
            }
            else
                return dict.get_Item$$TKey(key);
        },
        ShallowCopyCollection$2: function (T, R, dataset){
            if (dataset == null)
                return Default(R);
            var result = new R();
            var $it44 = dataset.GetEnumerator();
            while ($it44.MoveNext()){
                var item = $it44.get_Current();
                result.Add(item);
            }
            return result;
        },
        IsNullOrEmpty$1$$List$1: function (T, dataSet){
            return dataSet == null || dataSet.get_Count() <= 0;
        },
        TryGetLength$1: function (T, set, length){
            length.Value = 0;
            if (set == null){
                return false;
            }
            else {
                length.Value = set.get_Count();
                return true;
            }
        },
        GetElememtsByRange$1: function (T, dataSet, begin, end, length){
            length.Value = 0;
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(T, dataSet))
                return null;
            if (end >= dataSet.get_Count())
                end = dataSet.get_Count() - 1;
            length.Value = System.Math.Max$$Int32$$Int32(0, end - begin);
            return dataSet.GetRange(begin, end);
        },
        TryGetValue$1: function (T, set, index, value){
            value.Value = Default(T);
            if (!CollectionExtension.IsNullOrEmpty$1$$List$1(T, set) && index < set.get_Count()){
                value.Value = set.get_Item$$Int32(index);
                return true;
            }
            else {
                return false;
            }
        },
        IsNullOrEmpty$$ArrayList: function (array){
            return array == null || array.get_Count() <= 0;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(CollectionExtension);
var UIButtonExtension = {
    fullname: "UIButtonExtension",
    baseTypeName: "System.Object",
    staticDefinition: {
        SetClickHandler: function (btn, callback){
            if (UnityEngine.Object.op_Equality(btn, null) || callback == null)
                return;
            EventDelegate.Set$$List$1$EventDelegate$$Callback(btn.onClick, callback);
        },
        RemoveClickHandler: function (btn, callback){
            if (UnityEngine.Object.op_Equality(btn, null) || callback == null)
                return;
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(btn.onClick, callback);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UIButtonExtension);
var UIWidgetContainerExtension = {
    fullname: "UIWidgetContainerExtension",
    baseTypeName: "System.Object",
    staticDefinition: {
        UpdateCellsWithFixGO: function (grid, dataLength, updateCell){
            if (UnityEngine.Object.op_Equality(grid, null))
                return;
            var i = 0;
            var cellCnt = grid.get_transform().get_childCount();
            while (i < cellCnt){
                var isOverRange = i < dataLength;
                var go = grid.get_transform().GetChild(i).get_gameObject();
                go.SetActive(isOverRange);
                if (isOverRange){
                    updateCell(go, i);
                }
            }
            grid.Reposition();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UIWidgetContainerExtension);
var EnumParserHelper = {
    fullname: "EnumParserHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        TryParse$1: function (T, value){
            var result = Default(T);
            try{
                result = Cast(System.Enum.Parse$$Type$$String$$Boolean(Typeof(T), value, true), T);
            }
            catch(ex){
                GameDebuger.LogException(ex, null);
            }
            return result;
        },
        TryParseOptional$1: function (T, value){
            var result = null;
            try{
                result = Cast(System.Enum.Parse$$Type$$String(Typeof(T), value), T);
            }
            catch(ex){
                GameDebuger.LogException(ex, null);
            }
            return result;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(EnumParserHelper);
var IntEnum$1 = {
    fullname: "IntEnum$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IntEnum$1);
var IntEnumHelper = {
    fullname: "IntEnumHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        getEnums$1: function (T){
            var enums = System.Enum.GetValues(Typeof(T));
            var values = new Array(enums.length);
            for (var i = 0; i < enums.length; i++){
                values[i] = Cast(enums.GetValue(i), T);
            }
            return values;
        },
        Parse$1: function (E, nm, ignoreCase){
            var ty = Typeof(E);
            try{
                return Cast(System.Enum.Parse$$Type$$String$$Boolean(ty, nm, ignoreCase), E);
            }
            catch(e){
                GameDebuger.LogWarning(System.String.Format$$String$$Object$$Object("can not parse enum:{0} for type<{1}>", nm, ty), null);
                throw $CreateException(e, new Error());
            }
        },
        tryParse$1: function (E, nm, ignoreCase, enm){
            var ty = Typeof(E);
            try{
                enm.Value = Cast(System.Enum.Parse$$Type$$String$$Boolean(ty, nm, ignoreCase), E);
                return true;
            }
            catch($$e1){
                GameDebuger.LogWarning(System.String.Format$$String$$Object$$Object("can not parse enum:{0} for type<{1}>", nm, ty), null);
                return false;
            }
        },
        getIndex: function (enumType, enumObjWrapper){
            var nm = System.Enum.GetName(enumType, enumObjWrapper);
            var names = System.Enum.GetNames(enumType);
            for (var i = 0; i < names.length; i++){
                if (nm.Equals$$String(names[i])){
                    return i;
                }
            }
            GameDebuger.LogWarning(System.String.Format$$String$$Object("bug, not all enumeration is collected {0}", enumType), null);
            return -1 /* -1 */;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(IntEnumHelper);
var DelegateExtension = {
    fullname: "DelegateExtension",
    baseTypeName: "System.Object",
    staticDefinition: {
        DoOnceNull: function (act){
            GameUtil.SafeRun$$Action$$Action$1$Exception(act, null);
            return null;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DelegateExtension);
var ModelAlphaUpdater = {
    fullname: "ModelAlphaUpdater",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ModelAlphaUpdater._ColorAlpha = 0;
        },
        ColorAlpha$$: "System.Int32",
        get_ColorAlpha: function (){
            if (ModelAlphaUpdater._ColorAlpha == 0){
                ModelAlphaUpdater._ColorAlpha = UnityEngine.Shader.PropertyToID("_ColorAlpha");
            }
            return ModelAlphaUpdater._ColorAlpha;
        },
        SetMaterialsAlpha: function (material, alpha){
            if (alpha != 1){
                if (material.get_shader().get_name() == "Baoyu/Unlit/Model")
                    material.set_shader(AssetPipeline.AssetManager.get_Instance().FindShader("Baoyu/Unlit/Model_Transparent"));
            }
            else {
                if (material.get_shader().get_name() == "Baoyu/Unlit/Model_Transparent")
                    material.set_shader(AssetPipeline.AssetManager.get_Instance().FindShader("Baoyu/Unlit/Model"));
            }
            material.SetColor$$Int32$$Color(ModelAlphaUpdater.get_ColorAlpha(), new UnityEngine.Color.ctor$$Single$$Single$$Single$$Single(1, 1, 1, alpha));
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._alpha = 1;
            this._rendererList = null;
            this.mRoot = null;
            this.mUIModel = false;
            System.Object.ctor.call(this);
        },
        ResetTransparent: function (alpha){
            this._rendererList = null;
            this._alpha = 0;
            this.SetTransparent(alpha);
        },
        Initialize: function (pRoot, pUIModel){
            this.mRoot = pRoot;
            this.mUIModel = pUIModel;
        },
        SetTransparent: function (alpha){
            if (UnityEngine.Object.op_Equality(this.mRoot, null))
                return;
            if (this.mUIModel)
                return;
            if (this._alpha == alpha)
                return;
            this._alpha = alpha;
            if (this._rendererList == null){
                var renderers = this.mRoot.GetComponentsInChildren$1$$Boolean(UnityEngine.Renderer.ctor, true);
                this._rendererList = new System.Collections.Generic.List$1.ctor$$Int32(UnityEngine.Renderer.ctor, renderers.length);
                for (var i = 0; i < renderers.length; i++){
                    var r = renderers[i];
                    if (UnityEngine.Object.op_Equality(r.get_sharedMaterial(), null))
                        continue;
                    if (r.get_name().StartsWith$$String("Shadow"))
                        continue;
                    if (Is(r, UnityEngine.SkinnedMeshRenderer.ctor) || Is(r, UnityEngine.MeshRenderer.ctor)){
                        this._rendererList.Add(r);
                    }
                }
            }
            for (var i = 0; i < this._rendererList.get_Count(); i++){
                var r = this._rendererList.get_Item$$Int32(i);
                if (UnityEngine.Object.op_Inequality(r, null)){
                    var materials = r.get_materials();
                    for (var j = 0; j < materials.length; j++){
                        var material = materials[j];
                        ModelAlphaUpdater.SetMaterialsAlpha(material, alpha);
                    }
                }
            }
        },
        Dispose: function (){
            this._alpha = 0;
            if (null != this._rendererList){
                this._rendererList.Clear();
                this._rendererList = null;
            }
        }
    }
};
JsTypes.push(ModelAlphaUpdater);
var ModelHelper = {
    fullname: "ModelHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ModelHelper.Animator_Layer_BaseLayer = 0;
            ModelHelper.Animator_Layer_BattleLayer = 1;
            ModelHelper.DefaultModelId = 2070;
            ModelHelper.DefaultModelSpeed = 4;
            ModelHelper.DefaultBattleModelSpeed = 25;
            ModelHelper.DefaultBattleCatchSpeed = 3;
            ModelHelper.Anim_idle = "idle";
            ModelHelper.Anim_battle = "battle";
            ModelHelper.Anim_hit = "hit";
            ModelHelper.Anim_hit2 = "hit2";
            ModelHelper.Anim_run = "run";
            ModelHelper.Anim_death = "death";
            ModelHelper.Anim_def = "def";
            ModelHelper.Anim_skill = "skill";
            ModelHelper.Anim_attack1 = "attack1";
            ModelHelper.Anim_attack2 = "attack2";
            ModelHelper.Anim_attack3 = "attack3";
            ModelHelper.Anim_show = "show";
            ModelHelper.Anim_show2 = "show2";
            ModelHelper.Anim_ride_idle = "rideIdle";
            ModelHelper.Anim_ride_run = "rideRun";
            ModelHelper.Mount_hit = "Mount_Hit";
            ModelHelper.Mount_hud = "Mount_HUD";
            ModelHelper.Mount_shadow = "Mount_Shadow";
            ModelHelper.Mount_face = "Mount_face";
            ModelHelper.Mount_ride = "Mount_ride";
            ModelHelper.Mount_soul = "Mount_Soul";
            ModelHelper.PREFIX_SOUL = "soul_";
            ModelHelper.STYLE_TYPE_PET = "pet";
            ModelHelper.WeaponEffNames = (function (){
                var $v13 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v13.Add("weapon_{0}_eff");
                $v13.Add("weapon_{0}_eff_1");
                $v13.Add("weapon_{0}_eff_2");
                $v13.Add("weapon_{0}_eff_3");
                $v13.Add("weapon_{0}_eff_4");
                $v13.Add("weapon_{0}_eff_5");
                return $v13;
            }).call(this);
            ModelHelper.weaponConfigMaps = null;
            ModelHelper._unitEffectAndOrnamentMaps = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UnitEffectAndOrnamentConfig.ctor);
        },
        Setup: function (){
            if (ModelHelper.weaponConfigMaps == null){
                ModelHelper.weaponConfigMaps = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, WeaponBindConfig.ctor);
                AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig("WeaponConfig", function (asset){
                    if (UnityEngine.Object.op_Equality(asset, null))
                        return;
                    var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                    if (UnityEngine.Object.op_Equality(textAsset, null))
                        return;
                    var weaponConfig = JsHelper.ToObject(WeaponConfig.ctor, textAsset.get_text());
                    if (weaponConfig != null){
                        for (var i = 0; i < weaponConfig.list.get_Count(); i++){
                            var config = weaponConfig.list.get_Item$$Int32(i);
                            ModelHelper.weaponConfigMaps.Add(config.key, config);
                        }
                    }
                }, null, 100);
            }
        },
        GetWeaponBindConfig: function (key){
            var config = null;
            if (ModelHelper.weaponConfigMaps != null){
                (function (){
                    var $1 = $Ref(null, config);
                    var $res = ModelHelper.weaponConfigMaps.TryGetValue(key, $1);
                    config = $1.Value;
                    return $res;
                }).call(this);
            }
            return config;
        },
        GetCharacterPrefabPath: function (modelId){
            return "pet_" /* STYLE_TYPE_PET + "_" */ + modelId;
        },
        SetPetLook: function (modelGo, mainTexture, mutateTexture, colorParams, ornamentId, ornamentColorParam, onFinish){
            if (UnityEngine.Object.op_Equality(modelGo, null)){
                if (onFinish != null){
                    onFinish();
                }
                GameDebuger.Log("SetPetLook Error petObject = null", null);
                return;
            }
            if (mainTexture == 0 && mutateTexture == 0){
                if (onFinish != null){
                    onFinish();
                }
                GameDebuger.Log("SetPetLook Error mainTexture and mutateTexture = 0", null);
                return;
            }
            var petTrans = modelGo.get_transform();
            var childNodeName = System.Text.RegularExpressions.Regex.Match$$String$$String(modelGo.get_name(), "\\bpet_\\d+\\b").get_Value();
            var activeOrnament = ornamentId > 0;
            var modelRenderer = null;
            for (var i = 0,imax = petTrans.get_childCount(); i < imax; ++i){
                var child = petTrans.GetChild(i);
                if (child.CompareTag("NewOrnament" /* GameTag.Tag_NewOrnament */)){
                    child.get_gameObject().SetActive(activeOrnament);
                    if (activeOrnament){
                        var ornamentRenderer = child.GetComponent$1(UnityEngine.Renderer.ctor);
                        ModelHelper.ChangeModelHSV(ornamentRenderer, ornamentColorParam);
                        if (mainTexture == 2010){
                            if (UnityEngine.Object.op_Inequality(ornamentRenderer, null) && UnityEngine.Object.op_Inequality(ornamentRenderer.get_material(), null)){
                                var ornamentMat = ornamentRenderer.get_material();
                                if (mutateTexture > 0){
                                    ornamentMat.SetFloat$$String$$Single("_blendFactorR", 1);
                                    ornamentMat.SetFloat$$String$$Single("_blendFactorG", 1);
                                    ornamentMat.SetFloat$$String$$Single("_blendFactorB", 1);
                                }
                                else {
                                    ornamentMat.SetFloat$$String$$Single("_blendFactorR", 0);
                                    ornamentMat.SetFloat$$String$$Single("_blendFactorG", 0);
                                    ornamentMat.SetFloat$$String$$Single("_blendFactorB", 0);
                                }
                            }
                        }
                    }
                }
                else if (child.CompareTag("DefaultOrnament" /* GameTag.Tag_DefaultOrnament */)){
                    child.get_gameObject().SetActive(!activeOrnament);
                }
                else if (child.get_name().trim().Equals$$String(childNodeName)){
                    modelRenderer = child.GetComponent$1(UnityEngine.SkinnedMeshRenderer.ctor);
                }
            }
            if (mainTexture > 1000){
                ModelHelper.HandlePetEffect(petTrans, activeOrnament);
            }
            if (UnityEngine.Object.op_Inequality(modelRenderer, null)){
                modelRenderer.set_enabled(true);
                var curMatName = modelRenderer.get_material().get_name().Replace$$String$$String(" (Instance)", "");
                var newMatName = "";
                if (mutateTexture > 0){
                    newMatName = "pet_" + mutateTexture + "_mutate";
                }
                else if (!System.String.IsNullOrEmpty(colorParams)){
                    newMatName = "pet_" + mainTexture + "_mask";
                }
                else {
                    newMatName = "pet_" + mainTexture;
                }
                if (curMatName == newMatName){
                    ModelHelper.ChangeModelHSV(modelRenderer, colorParams);
                    if (onFinish != null){
                        onFinish();
                    }
                }
                else {
                    ModelHelper.ChangeMaterialAsync(modelRenderer, "model/" + modelRenderer.get_name() + "_mat", newMatName, colorParams, onFinish);
                }
            }
            else {
                if (onFinish != null){
                    onFinish();
                }
            }
        },
        HandlePetEffect: function (root, showOrnament){
            GameDebuger.TODO("bool unitEffectToggle = ModelManager.SystemData.unitEffectToggle;");
            var unitEffectToggle = true;
            if (root.get_childCount() != 0){
                for (var i = 0; i < root.get_childCount(); i++){
                    var childTransform = root.GetChild(i);
                    if (UnityEngine.Object.op_Inequality(childTransform, null)){
                        ModelHelper.HandlePetEffect(childTransform, showOrnament);
                        if (childTransform.CompareTag("UnitEffect" /* GameTag.Tag_UnitEffect */)){
                            childTransform.get_gameObject().SetActive(unitEffectToggle);
                        }
                        else if (childTransform.CompareTag("NewOrnament" /* GameTag.Tag_NewOrnament */)){
                            childTransform.get_gameObject().SetActive(showOrnament);
                        }
                        else if (childTransform.CompareTag("DefaultOrnament" /* GameTag.Tag_DefaultOrnament */)){
                            childTransform.get_gameObject().SetActive(!showOrnament);
                        }
                    }
                }
            }
        },
        GetUnitEffectAndOrnamentConfig: function (key){
            var config = null;
            if (ModelHelper._unitEffectAndOrnamentMaps.ContainsKey(key)){
                config = ModelHelper._unitEffectAndOrnamentMaps.get_Item$$TKey(key);
            }
            else {
                config = new UnitEffectAndOrnamentConfig.ctor();
                ModelHelper._unitEffectAndOrnamentMaps.Add(key, config);
            }
            return config;
        },
        SetRideLook: function (modelGo, colorParams, ornamentId, ornamentColorParam, rideMaxEffect, showEffect, onFinish){
            if (UnityEngine.Object.op_Equality(modelGo, null)){
                if (onFinish != null){
                    onFinish();
                }
                GameDebuger.Log("SetRideLook Error rideObject = null", null);
                return;
            }
            var petTrans = modelGo.get_transform();
            var childNodeName = System.Text.RegularExpressions.Regex.Match$$String$$String(modelGo.get_name(), "\\bride_pet_\\d+\\b").get_Value();
            var modelRenderer = null;
            var ornamentRendererList = null;
            var activeOrnament = ornamentId > 0;
            for (var i = 0,imax = petTrans.get_childCount(); i < imax; ++i){
                var child = petTrans.GetChild(i);
                if (child.CompareTag("NewOrnament" /* GameTag.Tag_NewOrnament */)){
                    GameDebuger.TODO("if (!ModelManager.Mount.IsMutateOrnamentRide(childNodeName))");
                    if (true){
                        if (activeOrnament){
                            if (ornamentRendererList == null){
                                ornamentRendererList = new System.Collections.Generic.List$1.ctor(UnityEngine.Renderer.ctor);
                            }
                            var ornamentRenderer = child.GetComponent$1(UnityEngine.Renderer.ctor);
                            if (UnityEngine.Object.op_Inequality(ornamentRenderer, null)){
                                ornamentRendererList.Add(ornamentRenderer);
                            }
                        }
                    }
                }
                else if (child.get_name().trim().Equals$$String(childNodeName)){
                    modelRenderer = child.GetComponent$1(UnityEngine.SkinnedMeshRenderer.ctor);
                }
            }
            ModelHelper.HandleRideEffect(petTrans, rideMaxEffect, showEffect, activeOrnament);
            if (ornamentRendererList != null){
                for (var i = 0; i < ornamentRendererList.get_Count(); i++){
                    ModelHelper.ChangeModelHSV(ornamentRendererList.get_Item$$Int32(i), ornamentColorParam);
                }
            }
            if (UnityEngine.Object.op_Inequality(modelRenderer, null)){
                modelRenderer.set_enabled(true);
                var curMatName = modelRenderer.get_material().get_name().Replace$$String$$String(" (Instance)", "");
                var newMatName = "";
                GameDebuger.TODO("if (ModelManager.Mount.IsMutateOrnamentRide(childNodeName) && activeOrnament)\n            {\n                newMatName = childNodeName + \'_mutate\';\n            }\n            else");
                if (!System.String.IsNullOrEmpty(colorParams)){
                    newMatName = childNodeName + "_mask";
                }
                else {
                    newMatName = childNodeName;
                }
                if (curMatName == newMatName){
                    ModelHelper.ChangeModelHSV(modelRenderer, colorParams);
                    if (onFinish != null){
                        onFinish();
                    }
                }
                else {
                    ModelHelper.ChangeMaterialAsync(modelRenderer, "model/" + modelRenderer.get_name() + "_mat", newMatName, colorParams, onFinish);
                }
                if (onFinish != null){
                    onFinish();
                }
            }
            else {
                if (onFinish != null){
                    onFinish();
                }
            }
        },
        HandleRideEffect: function (root, showMaxEffect, showEffect, showOrnament){
            GameDebuger.TODO("bool unitEffectToggle = ModelManager.SystemData.unitEffectToggle && showEffect;");
            var unitEffectToggle = true;
            if (root.get_childCount() != 0){
                for (var i = 0; i < root.get_childCount(); i++){
                    var childTransform = root.GetChild(i);
                    if (UnityEngine.Object.op_Inequality(childTransform, null)){
                        ModelHelper.HandleRideEffect(childTransform, showMaxEffect, showEffect, showOrnament);
                        if (childTransform.CompareTag("UnitEffect" /* GameTag.Tag_UnitEffect */)){
                            if (unitEffectToggle){
                                if (childTransform.get_name().EndsWith$$String("_LevelUp")){
                                    childTransform.get_gameObject().SetActive(showMaxEffect);
                                }
                                else if (childTransform.get_name().EndsWith$$String("_Default")){
                                    childTransform.get_gameObject().SetActive(!showMaxEffect);
                                }
                                else {
                                    childTransform.get_gameObject().SetActive(true);
                                }
                            }
                            else {
                                childTransform.get_gameObject().SetActive(false);
                            }
                        }
                        else if (childTransform.CompareTag("NewOrnament" /* GameTag.Tag_NewOrnament */)){
                            childTransform.get_gameObject().SetActive(showOrnament);
                        }
                        else if (childTransform.CompareTag("DefaultOrnament" /* GameTag.Tag_DefaultOrnament */)){
                            childTransform.get_gameObject().SetActive(!showOrnament);
                        }
                    }
                }
            }
        },
        ChangeModelHSV: function (modelRenderer, colorParams){
            var hsv = GameObjectExt.GetMissingComponent$1(ModelHSV.ctor, modelRenderer.get_gameObject());
            hsv.SetupColorParams(colorParams);
        },
        ChangeMaterialAsync: function (modelRenderer, bundleName, assetName, colorParams, onFinish){
            if (UnityEngine.Object.op_Equality(modelRenderer, null)){
                UnityEngine.Debug.LogError$$Object("the gameObject has not a Renderer component.");
                if (onFinish != null){
                    onFinish();
                }
                return;
            }
            modelRenderer.set_enabled(false);
            AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$String$$OnLoadFinish$$OnLoadError$$Type$$Single(bundleName, assetName, function (asset){
                if (onFinish != null){
                    onFinish();
                }
                if (UnityEngine.Object.op_Equality(modelRenderer, null)){
                    return;
                }
                var newMaterial = As(asset, UnityEngine.Material.ctor);
                if (UnityEngine.Object.op_Equality(newMaterial, null)){
                    GameDebuger.Log(System.String.Format$$String$$Object("asset not found material!,path:{0}", assetName), null);
                    modelRenderer.set_enabled(true);
                    return;
                }
                UnityEngine.Object.DestroyImmediate$$Object(modelRenderer.get_material());
                modelRenderer.set_material(newMaterial);
                ModelHelper.ChangeModelHSV(modelRenderer, colorParams);
                modelRenderer.set_enabled(true);
            }, function (){
                if (onFinish != null){
                    onFinish();
                }
                if (UnityEngine.Object.op_Inequality(modelRenderer, null))
                    modelRenderer.set_enabled(true);
            }, null, 100);
        },
        RemovePetShadow: function (model){
            if (UnityEngine.Object.op_Equality(model, null)){
                return;
            }
            var shadowRoot = model.get_transform().Find("Mount_Shadow" /* Mount_shadow */);
            if (UnityEngine.Object.op_Inequality(shadowRoot, null)){
                var shadow = shadowRoot.Find("Shadow(Clone)");
                if (UnityEngine.Object.op_Inequality(shadow, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(shadow);
                }
            }
        },
        SetPetShadow: function (modelGo, scale){
            if (UnityEngine.Object.op_Equality(modelGo, null)){
                return;
            }
            var shadowRoot = modelGo.get_transform().Find("Mount_Shadow" /* Mount_shadow */);
            if (UnityEngine.Object.op_Inequality(shadowRoot, null)){
                var shadow = shadowRoot.Find("Shadow(Clone)");
                if (UnityEngine.Object.op_Equality(shadow, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync("Shadow" /* PathHelper.SHADOW_PREFAB_PATH */, function (shadowGO){
                        if (UnityEngine.Object.op_Equality(shadowGO, null))
                            return;
                        if (UnityEngine.Object.op_Equality(shadowRoot, null)){
                            AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(shadowGO);
                            return;
                        }
                        var t = shadowGO.get_transform();
                        t.set_parent(shadowRoot);
                        shadowGO.set_layer(shadowRoot.get_gameObject().get_layer());
                        t.set_localPosition(UnityEngine.Vector3.get_zero());
                        t.set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(90, 0, 0));
                        t.set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(scale, scale, scale));
                        shadowGO.set_name("Shadow(Clone)");
                    }, null, 89);
                }
                else {
                    shadow.get_gameObject().set_layer(shadowRoot.get_gameObject().get_layer());
                }
            }
        },
        GetChildNodeStartwith: function (parent, prefix){
            if (UnityEngine.Object.op_Equality(parent, null))
                return null;
            for (var i = 0,imax = parent.get_childCount(); i < imax; ++i){
                var child = parent.GetChild(i);
                if (child.get_name().StartsWith$$String(prefix))
                    return child;
            }
            return null;
        },
        SetSurroundEffectActive: function (modelGo, effName, onLoadFinish){
            ModelHelper.SetModelEffectActive$$GameObject$$String$$String$$Action$1$GameObject(modelGo, effName, "roundeff", onLoadFinish);
        },
        SetFootprintActive: function (modelGo, effName, onLoadFinish){
            ModelHelper.SetModelEffectActive$$GameObject$$String$$String$$Action$1$GameObject(modelGo, effName, "footmark", onLoadFinish);
        },
        SetSoulEffectActive: function (modelGo, effName, onLoadFinish){
            ModelHelper.SetModelEffectActive$$GameObject$$String$$String$$String$$String$$Action$1$GameObject(modelGo, effName, "soul_" /* PREFIX_SOUL */, effName, "Mount_Soul" /* Mount_soul */, onLoadFinish);
        },
        SetModelEffectActive$$GameObject$$String$$String$$Action$1$GameObject: function (modelGo, effName, prefix, onLoadFinish){
            ModelHelper.SetModelEffectActive$$GameObject$$String$$String$$String$$String$$Action$1$GameObject(modelGo, effName, prefix, PathHelper.GetEffectPath(effName), "Mount_Shadow" /* Mount_shadow */, onLoadFinish);
        },
        SetModelEffectActive$$GameObject$$String$$String$$String$$String$$Action$1$GameObject: function (modelGo, effName, prefix, pResPathName, pMountName, onLoadFinish){
            if (UnityEngine.Object.op_Equality(modelGo, null))
                return;
            var shadowRoot = modelGo.get_transform().Find(pMountName);
            if (UnityEngine.Object.op_Inequality(shadowRoot, null)){
                var effectNode = ModelHelper.GetChildNodeStartwith(shadowRoot, prefix);
                if (System.String.IsNullOrEmpty(effName)){
                    if (UnityEngine.Object.op_Inequality(effectNode, null))
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(effectNode);
                }
                else {
                    if (UnityEngine.Object.op_Inequality(effectNode, null)){
                        if (effectNode.get_name().Contains(effName)){
                            if (onLoadFinish != null)
                                onLoadFinish(effectNode.get_gameObject());
                            return;
                        }
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(effectNode);
                    }
                    AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(pResPathName, function (effGo){
                        if (UnityEngine.Object.op_Equality(effGo, null))
                            return;
                        if (UnityEngine.Object.op_Equality(shadowRoot, null)){
                            AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effGo, false);
                            return;
                        }
                        effectNode = ModelHelper.GetChildNodeStartwith(shadowRoot, prefix);
                        if (UnityEngine.Object.op_Inequality(null, effectNode))
                            AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(effectNode);
                        GameObjectExt.AddPoolChild(shadowRoot.get_gameObject(), effGo, 0, 0, 0);
                        if (onLoadFinish != null)
                            onLoadFinish(effGo);
                    }, null, 100);
                }
            }
        },
        RemoveSurroundAndFootEffect: function (modelGo){
            ModelHelper.RemoveEffectWithPrefix(modelGo, "roundeff");
            ModelHelper.RemoveEffectWithPrefix(modelGo, "footmark");
        },
        RemoveEffectWithPrefix: function (modelGo, prefix){
            if (UnityEngine.Object.op_Equality(modelGo, null))
                return;
            var shadowRoot = modelGo.get_transform().Find("Mount_Shadow" /* Mount_shadow */);
            if (UnityEngine.Object.op_Inequality(shadowRoot, null)){
                var effectNode = ModelHelper.GetChildNodeStartwith(shadowRoot, prefix);
                if (UnityEngine.Object.op_Inequality(effectNode, null))
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(effectNode);
            }
        },
        UpdateHandModel: function (go, bodyModel, handModel, withEff){
            GameDebuger.TODO("if (!ModelManager.SystemData.unitEffectToggle)\n        {\n            withEff = false;\n        }");
            ModelHelper.RemoveBindModel(go, "Bip001/Bip001 Prop1");
            ModelHelper.RemoveBindModel(go, "Bip001/Bip001 Prop2");
            ModelHelper.DoUpdateHandModel(go, handModel, "Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Mount_handle");
        },
        RemoveAllBindModel: function (go){
            ModelHelper.RemoveBindModel(go, "Bip001/Bip001 Prop1");
            ModelHelper.RemoveBindModel(go, "Bip001/Bip001 Prop2");
            ModelHelper.RemoveBindModel(go, "Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Mount_handle");
        },
        RemoveBindModel: function (go, path){
            if (UnityEngine.Object.op_Equality(go, null)){
                UnityEngine.Debug.LogError$$Object("RemoveBindModel go=null");
                return;
            }
            var t = go.get_transform().Find(path);
            if (UnityEngine.Object.op_Inequality(t, null)){
                for (var i = t.get_childCount() - 1; i >= 0; i--){
                    var child = t.GetChild(i);
                    if (child.get_name().Contains("weapon_")){
                        for (var j = child.get_childCount() - 1; j >= 0; j--){
                            var wpNode = child.GetChild(j);
                            if (wpNode.get_name().Contains("weapon_")){
                                for (var k = wpNode.get_childCount() - 1; k >= 0; k--){
                                    var effNode = wpNode.GetChild(k);
                                    if (effNode.get_name().Contains("_eff")){
                                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(effNode);
                                    }
                                }
                            }
                        }
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                    }
                    else if (child.get_name().Contains("_handle")){
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                    }
                }
            }
        },
        DoUpdateHandModel: function (modelGo, handModel, bip001Name){
            var t = modelGo.get_transform().Find(bip001Name);
            if (UnityEngine.Object.op_Equality(t, null)){
                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("DoUpdateHandModel cannot find {0} at {1}", bip001Name, modelGo), null);
                return;
            }
            for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                var child = t.GetChild(i);
                if (child.get_name().Contains("_handle")){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                }
            }
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync(handModel, function (wpGO){
                if (UnityEngine.Object.op_Inequality(wpGO, null)){
                    if (UnityEngine.Object.op_Equality(t, null)){
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$GameObject(wpGO);
                        return;
                    }
                    for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                        var child = t.GetChild(i);
                        if (child.get_name().Contains("_handle")){
                            AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                        }
                    }
                    if (UnityEngine.Object.op_Inequality(wpGO, null)){
                        GameObjectExt.AddPoolChild(modelGo, wpGO, 0, 0, 0);
                        var wpTrans = wpGO.get_transform();
                        wpTrans.set_parent(t);
                        wpTrans.set_localPosition(UnityEngine.Vector3.get_zero());
                        wpTrans.set_localEulerAngles(UnityEngine.Vector3.get_zero());
                        wpTrans.set_localScale(UnityEngine.Vector3.get_one());
                    }
                }
            }, null, 89);
        },
        UpdateModelWeapon: function (go, actorModelId, wpId, withEffLv, weaponEffId, uiMode, onLoadFinish){
            ModelHelper.RemoveBindModel(go, "Bip001/Bip001 Pelvis/Bip001 Spine/Bip001 Spine1/Bip001 Neck/Bip001 R Clavicle/Bip001 R UpperArm/Bip001 R Forearm/Bip001 R Hand/Mount_handle");
            ModelHelper.DoUpdateModelWeapon(go, actorModelId, wpId, "Bip001/Bip001 Prop1", withEffLv, weaponEffId, uiMode);
            ModelHelper.DoUpdateModelWeapon(go, actorModelId, wpId, "Bip001/Bip001 Prop2", withEffLv, weaponEffId, uiMode);
        },
        FindChildContainsName: function (trans, name){
            if (UnityEngine.Object.op_Equality(trans, null))
                return null;
            for (var i = 0; i < trans.get_childCount(); i++){
                var childItem = trans.GetChild(i);
                if (childItem.get_name().Contains(name))
                    return childItem;
            }
            return null;
        },
        UnloadWeapon: function (t){
            for (var i = t.get_childCount() - 1; i >= 0; i--){
                var child = t.GetChild(i);
                if (child.get_name().Contains("weapon_")){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                    var effNode = ModelHelper.FindChildContainsName(ModelHelper.FindChildContainsName(child, "weapon_"), "_eff");
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(effNode);
                }
                else if (child.get_name().Contains("_handle")){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                }
            }
        },
        DoUpdateModelWeapon: function (modelGo, actorModelId, wpId, wpNodeName, withEffLv, weaponEffId, uiMode){
            var showWeaponEffect = withEffLv > 0;
            var t = modelGo.get_transform().Find(wpNodeName);
            if (UnityEngine.Object.op_Equality(t, null))
                return;
            if (wpId == 0){
                ModelHelper.UnloadWeapon(t);
            }
            else {
                var oldWpTrans = ModelHelper.FindChildContainsName(t, "weapon_" + wpId);
                var needLoadEffect = (wpId % 10) >= 3;
                if (UnityEngine.Object.op_Inequality(oldWpTrans, null) && needLoadEffect)
                    ModelHelper.LoadWeaponEffect(wpId, wpNodeName, withEffLv, weaponEffId, uiMode, showWeaponEffect, t, oldWpTrans);
                else
                    ModelHelper.LoadWeapon(modelGo, actorModelId, wpId, wpNodeName, withEffLv, weaponEffId, uiMode, showWeaponEffect, t, needLoadEffect);
            }
        },
        LoadWeapon: function (modelGo, actorModelId, wpId, wpNodeName, withEffLv, weaponEffId, uiMode, showWeaponEffect, t, needLoadEffect){
            var wpPath = "weapon_" + wpId;
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnModelAsync(wpPath, function (wpGO){
                if (UnityEngine.Object.op_Equality(wpGO, null))
                    return;
                for (var i = t.get_childCount() - 1; i >= 0; i--){
                    var child = t.GetChild(i);
                    if (child.get_name().Contains("weapon_") || child.get_name().Contains("_handle")){
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnModel$$Transform(child);
                    }
                }
                GameObjectExt.AddPoolChild(modelGo, wpGO, 0, 0, 0);
                var wpTrans = wpGO.get_transform();
                wpTrans.set_parent(t);
                var config = ModelHelper.GetWeaponBindConfig("pet_" + actorModelId + "/" + wpNodeName);
                if (config != null){
                    wpTrans.set_localPosition(config.localPosition);
                    wpTrans.set_localEulerAngles(config.localEulerAngles);
                    if (wpNodeName == "Bip001/Bip001 Prop1"){
                        var subTrans = wpTrans.Find("weapon_" + wpId + "_Prop2");
                        if (UnityEngine.Object.op_Inequality(subTrans, null)){
                            subTrans.set_name("weapon_" + wpId);
                            subTrans.set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(subTrans.get_localEulerAngles().x, subTrans.get_localEulerAngles().y - 180, subTrans.get_localEulerAngles().z));
                            subTrans.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-1 * subTrans.get_localPosition().x, subTrans.get_localPosition().y, subTrans.get_localPosition().z));
                        }
                    }
                    else if (wpNodeName == "Bip001/Bip001 Prop2"){
                        var subTrans = wpTrans.Find("weapon_" + wpId);
                        if (UnityEngine.Object.op_Inequality(subTrans, null)){
                            subTrans.set_name("weapon_" + wpId + "_Prop2");
                            subTrans.set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(subTrans.get_localEulerAngles().x, subTrans.get_localEulerAngles().y + 180, subTrans.get_localEulerAngles().z));
                            subTrans.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-1 * subTrans.get_localPosition().x, subTrans.get_localPosition().y, subTrans.get_localPosition().z));
                        }
                    }
                }
                if (needLoadEffect){
                    ModelHelper.LoadWeaponEffect(wpId, wpNodeName, withEffLv, weaponEffId, uiMode, showWeaponEffect, t, wpTrans);
                }
            }, null, 89);
        },
        LoadWeaponEffect: function (wpId, wpNodeName, withEffLv, weaponEffId, uiMode, showWeaponEffect, t, oldWpTrans){
            var oldWpGO = oldWpTrans.get_gameObject();
            GameDebuger.TODO("int index = ModelManager.Equipment.GetWeaponEffectIndex(weaponEffId);");
            var index = 1;
            var effPath = System.String.Format$$String$$Object(ModelHelper.WeaponEffNames.get_Item$$Int32(index - 1), wpId);
            var childNodeName;
            if (wpNodeName == "Bip001/Bip001 Prop2"){
                childNodeName = System.String.Format$$String$$Object("weapon_{0}_Prop2/", wpId);
            }
            else {
                childNodeName = System.String.Format$$String$$Object("weapon_{0}/", wpId);
            }
            var effTrans = ModelHelper.FindOldEffect(oldWpTrans, effPath, childNodeName);
            if (UnityEngine.Object.op_Inequality(effTrans, null)){
                ModelHelper.ShowWeaponEff(oldWpGO, showWeaponEffect, wpId, wpNodeName, withEffLv, weaponEffId, uiMode);
            }
            else {
                AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effPath, function (loadEffGO){
                    if (UnityEngine.Object.op_Inequality(loadEffGO, null)){
                        for (var i = oldWpTrans.get_childCount() - 1; i >= 0; i--){
                            var child = oldWpTrans.GetChild(i);
                            if (child.get_name().Contains(effPath) || child.get_name().Contains("_handle")){
                                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(child);
                            }
                        }
                        var subWpPath = System.String.Format$$String$$Object("weapon_{0}", wpId);
                        var subWpTrans = ModelHelper.FindChildContainsName(oldWpTrans, subWpPath);
                        if (UnityEngine.Object.op_Inequality(subWpTrans, null)){
                            GameObjectExt.AddPoolChild(subWpTrans.get_gameObject(), loadEffGO, 0, 0, 0);
                            loadEffGO.get_transform().set_parent(subWpTrans);
                            ModelHelper.ShowWeaponEff(oldWpGO, showWeaponEffect, wpId, wpNodeName, withEffLv, weaponEffId, uiMode);
                        }
                    }
                }, null, 100);
            }
        },
        FindOldEffect: function (oldWpTrans, effPath, childNodeName){
            var effTrans = null;
            for (var i = 0,imax = oldWpTrans.get_childCount(); i < imax; i++){
                var wpNode = oldWpTrans.GetChild(i);
                if (wpNode.get_name().Contains(childNodeName)){
                    for (var j = 0,jmax = wpNode.get_childCount(); j < jmax; j++){
                        var effNode = wpNode.GetChild(j);
                        var effName = effNode.get_name();
                        if (effName.Contains(effPath) && (effName.Contains("eff_") == effPath.Contains("eff_"))){
                            effTrans = effNode;
                            break;
                        }
                    }
                }
            }
            return effTrans;
        },
        ShowWeaponEff: function (wpGO, showWeaponEffect, wpId, wpNodeName, withEffLv, weaponEffId, uiMode){
            var startPath = "weapon_{0}/";
            if (wpNodeName == "Bip001/Bip001 Prop2"){
                startPath = "weapon_{0}_Prop2/";
            }
            GameDebuger.TODO("int index = ModelManager.Equipment.GetWeaponEffectIndex(weaponEffId);");
            var index = 1;
            var targetEffName = System.String.Format$$String$$Object(ModelHelper.WeaponEffNames.get_Item$$Int32(index - 1), wpId);
            var targetEffGO = null;
            var subWpTrans = wpGO.get_transform().Find(System.String.Format$$String$$Object(startPath, wpId));
            if (UnityEngine.Object.op_Inequality(subWpTrans, null)){
                for (var i = subWpTrans.get_childCount() - 1; i >= 0; i--){
                    var child = subWpTrans.GetChild(i);
                    var childName = child.get_name();
                    if (UnityEngine.Object.op_Equality(targetEffGO, null) && childName.Contains(targetEffName) && ((!childName.Contains("eff_") && !targetEffName.Contains("eff_")) || (childName.Contains("eff_") && targetEffName.Contains("eff_")))){
                        targetEffGO = child.get_gameObject();
                    }
                    else {
                        AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$Transform(child);
                    }
                }
            }
            if (UnityEngine.Object.op_Inequality(targetEffGO, null)){
                if (showWeaponEffect && targetEffGO.get_transform().get_childCount() > 0){
                    targetEffGO.get_gameObject().SetActive(true);
                    for (var i = 1; i <= 3; i++){
                        var active = (i <= withEffLv);
                        var effLv3Path = System.String.Format$$String$$Object("LV{0}", i);
                        var effLv3GO = targetEffGO.get_transform().Find(effLv3Path);
                        if (UnityEngine.Object.op_Inequality(effLv3GO, null)){
                            effLv3GO.get_gameObject().SetActive(active);
                            if (active){
                                if (!uiMode){
                                    effLv3GO.set_tag("UnitEffect" /* GameTag.Tag_UnitEffect */);
                                    GameDebuger.TODO("ToggleWeaponEffect(effLv3GO.gameObject,\n                                    ModelManager.SystemData.weaponEffectToggle);");
                                }
                                else {
                                    ModelHelper.ToggleWeaponEffect(effLv3GO.get_gameObject(), true);
                                }
                            }
                        }
                    }
                }
                else {
                }
            }
        },
        PlayAnimation: function (anim, action, crossFade, animClipCallBack, checkSameAnim, layer){
            if (UnityEngine.Object.op_Equality(anim, null)){
                if (animClipCallBack != null)
                    animClipCallBack(action, 0);
                return;
            }
            if (System.String.IsNullOrEmpty(action)){
                if (animClipCallBack != null)
                    animClipCallBack(action, 0);
                return;
            }
            if (checkSameAnim){
                var animatorState = anim.GetCurrentAnimatorStateInfo(layer);
                if (animatorState.IsName(action)){
                    if (animClipCallBack != null)
                        animClipCallBack(action, 0);
                    return;
                }
            }
            try{
                if (layer == 0 /* Animator_Layer_BaseLayer */){
                    anim.SetLayerWeight(1 /* Animator_Layer_BattleLayer */, 0);
                }
                else {
                    anim.SetLayerWeight(1 /* Animator_Layer_BattleLayer */, 1);
                }
                if (crossFade){
                    anim.CrossFade$$String$$Single$$Int32(action, 0.2, layer);
                }
                else {
                    var checkList = (function (){
                        var $v14 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                        $v14.Add("idle");
                        $v14.Add("run");
                        $v14.Add("hit");
                        $v14.Add("hit2");
                        $v14.Add("death");
                        $v14.Add("attack1");
                        $v14.Add("attack2");
                        $v14.Add("attack3");
                        $v14.Add("battle");
                        $v14.Add("skill");
                        $v14.Add("def");
                        $v14.Add("show");
                        $v14.Add("show2");
                        $v14.Add("show2_loop");
                        $v14.Add("show_loop");
                        $v14.Add("rideIdle");
                        $v14.Add("rideRun");
                        return $v14;
                    }).call(this);
                    if (checkList.Contains(action) == false){
                        UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object$$Object("ErrorAction action:{0},anim:{1},please check skill config in BattleConfig.bytes !", action, anim));
                    }
                    anim.Play$$String$$Int32$$Single(action, layer, 0);
                }
                var animatorState = anim.GetCurrentAnimatorStateInfo(layer);
                if (animatorState.IsName(action)){
                    if (animClipCallBack != null)
                        animClipCallBack(action, animatorState.get_length());
                    return;
                }
                if (animClipCallBack != null)
                    animClipCallBack(action, 0);
            }
            catch(e){
                GameDebuger.Log(" Can not find action : " + action, null);
                if (animClipCallBack != null)
                    animClipCallBack(action, 0);
            }
        },
        GetMountingPoint: function (obj, point){
            if (UnityEngine.Object.op_Equality(obj, null)){
                return null;
            }
            var mountTF = obj.get_transform().Find(point);
            if (UnityEngine.Object.op_Equality(mountTF, null)){
                UnityEngine.Debug.LogError$$Object("模型" + obj.get_name() + " 没有配置锚点:" + point);
            }
            return mountTF;
        },
        ToggleAllUnitEffect: function (toggle){
            var goNodes = UnityEngine.GameObject.FindGameObjectsWithTag("UnitEffect" /* GameTag.Tag_UnitEffect */);
            for (var i = 0; i < goNodes.length; i++){
                var node = goNodes[i];
                if (UnityEngine.Object.op_Inequality(node, null)){
                    var nodeName = node.get_name();
                    if (!nodeName.Contains("LV") && !nodeName.Contains("roundeff") && !nodeName.Contains("footmark")){
                        var t = node.get_transform();
                        for (var j = 0,imax = t.get_childCount(); j < imax; ++j){
                            var child = t.GetChild(j);
                            child.get_gameObject().SetActive(toggle);
                        }
                    }
                }
            }
        },
        ToggleAllWeaponEffect: function (toggle){
            var objs = UnityEngine.GameObject.FindGameObjectsWithTag("UnitEffect" /* GameTag.Tag_UnitEffect */);
            for (var i = 0; i < objs.length; i++){
                var obj = objs[i];
                if (UnityEngine.Object.op_Inequality(obj, null)){
                    if (obj.get_name().Contains("LV")){
                        var t = obj.get_transform();
                        for (var j = 0,imax = t.get_childCount(); j < imax; ++j){
                            var child = t.GetChild(j);
                            child.get_gameObject().SetActive(toggle);
                        }
                    }
                }
            }
        },
        ToggleAllFashionEffect: function (toggle){
            var goNodes = UnityEngine.GameObject.FindGameObjectsWithTag("UnitEffect" /* GameTag.Tag_UnitEffect */);
            for (var i = 0; i < goNodes.length; i++){
                var node = goNodes[i];
                if (UnityEngine.Object.op_Inequality(node, null)){
                    var nodeName = node.get_name();
                    if (nodeName.Contains("roundeff") || nodeName.Contains("footmark")){
                        var t = node.get_transform();
                        for (var j = 0,imax = t.get_childCount(); j < imax; ++j){
                            var child = t.GetChild(j);
                            child.get_gameObject().SetActive(toggle);
                        }
                    }
                }
            }
        },
        ToggleAllHallowSpriteEffect: function (toggle){
            var objs = UnityEngine.GameObject.FindGameObjectsWithTag("UnitEffect" /* GameTag.Tag_UnitEffect */);
            for (var i = 0; i < objs.length; i++){
                var obj = objs[i];
                if (UnityEngine.Object.op_Inequality(obj, null)){
                    if (obj.get_name().Contains("soul_" /* ModelHelper.PREFIX_SOUL */)){
                        var t = obj.get_transform();
                        for (var j = 0,imax = t.get_childCount(); j < imax; ++j){
                            var child = t.GetChild(j);
                            child.get_gameObject().SetActive(toggle);
                        }
                    }
                }
            }
        },
        ToggleUnitEffect: function (go, toggle){
            var t = go.get_transform();
            if (go.CompareTag("UnitEffect" /* GameTag.Tag_UnitEffect */)){
                var nodeName = go.get_name();
                if (!nodeName.Contains("LV") && !nodeName.Contains("roundeff") && !nodeName.Contains("footmark")){
                    for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                        var child = t.GetChild(i);
                        child.get_gameObject().SetActive(toggle);
                    }
                }
            }
            else {
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    ModelHelper.ToggleUnitEffect(child.get_gameObject(), toggle);
                }
            }
        },
        ToggleWeaponEffect: function (go, toggle){
            var t = go.get_transform();
            if (go.get_name().Contains("LV")){
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    child.get_gameObject().SetActive(toggle);
                }
            }
            else {
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    ModelHelper.ToggleWeaponEffect(child.get_gameObject(), toggle);
                }
            }
        },
        ToggleFashionEffect: function (go, toggle){
            var t = go.get_transform();
            var nodeName = go.get_name();
            if (nodeName.Contains("roundeff") || nodeName.Contains("footmark")){
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    child.get_gameObject().SetActive(toggle);
                }
            }
            else {
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    ModelHelper.ToggleFashionEffect(child.get_gameObject(), toggle);
                }
            }
        },
        ToggleHallowSpriteEffect: function (go, toggle){
            var t = go.get_transform();
            if (go.get_name().Contains("soul_" /* ModelHelper.PREFIX_SOUL */)){
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    child.get_gameObject().SetActive(toggle);
                }
            }
            else {
                for (var i = 0,imax = t.get_childCount(); i < imax; ++i){
                    var child = t.GetChild(i);
                    ModelHelper.ToggleHallowSpriteEffect(child.get_gameObject(), toggle);
                }
            }
        },
        SetOrnamentVisible: function (go, visible){
            var _mModelTrans = go.get_transform();
            for (var i = 0,imax = _mModelTrans.get_childCount(); i < imax; ++i){
                var child = _mModelTrans.GetChild(i);
                if (child.CompareTag("NewOrnament" /* GameTag.Tag_NewOrnament */)){
                    child.get_gameObject().SetActive(visible);
                }
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ModelHelper);
var UnitEffectAndOrnamentConfig = {
    fullname: "UnitEffectAndOrnamentConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.newOrnamentList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.defaultOrnamentList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.effectList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UnitEffectAndOrnamentConfig);
var PathHelper = {
    fullname: "PathHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PathHelper.CG_Asset_PATH = "Movies/xlsj.mp4";
            PathHelper.SHADOW_PREFAB_PATH = "Shadow";
            PathHelper.ACCEPTMISSION_PREFAB_PATH = "acceptSign";
            PathHelper.SUBMITMISSION_PREFAB_PATH = "completeSign";
            PathHelper.Chest_PREFAB_PATH = "chest_2";
            PathHelper.SedanBox_PREFAB_PATH = "chest_1";
            PathHelper.SedanPetBox_PREFAB_PATH = "pet_5709";
            PathHelper.MarrigeSweetBox_PREFAB_PATH = "chest_5";
            PathHelper.Portal_PREFAB_PATH = "portal";
            PathHelper.WorldBoss_Chest_PREFAB_PATH = "chest_3";
            PathHelper.Dreamland_Chest_PREFAB_PATH = "chest_{0}";
            PathHelper.Grass_PREFAB_PATH = "chest_6";
            PathHelper.SETTING_PATH = "Setting/";
            PathHelper._screenshotRoot = null;
        },
        GetEffectPath: function (effectName){
            return effectName;
        },
        ScreenshotRoot$$: "System.String",
        get_ScreenshotRoot: function (){
            if (System.String.IsNullOrEmpty(PathHelper._screenshotRoot)){
                PathHelper._screenshotRoot = AssetPipeline.GameResPath.get_appRoot();
            }
            return PathHelper._screenshotRoot;
        },
        ReplacePrefabName: function (prefabName, resGroup){
            if (resGroup == 20){
                return prefabName.Replace$$String$$String("_Model", "");
            }
            if (resGroup == 30){
                return prefabName.Replace$$String$$String("_Effect", "");
            }
            return prefabName;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PathHelper);
var PlayerPrefsExt = {
    fullname: "PlayerPrefsExt",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PlayerPrefsExt.PLAYER_PREFIX = "";
        },
        GetBool$$String: function (key){
            return UnityEngine.PlayerPrefs.GetInt$$String$$Int32(key, 0) == 1;
        },
        GetBool$$String$$Boolean: function (key, defaultValue){
            return UnityEngine.PlayerPrefs.GetInt$$String$$Int32(key, defaultValue ? 1 : 0) == 1;
        },
        SetBool: function (key, value){
            UnityEngine.PlayerPrefs.SetInt(key, value ? 1 : 0);
        },
        SetPlayerString: function (key, value){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            UnityEngine.PlayerPrefs.SetString(key, value);
        },
        GetPlayerString: function (key){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            return UnityEngine.PlayerPrefs.GetString$$String(key);
        },
        SetPlayerInt: function (key, value){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            UnityEngine.PlayerPrefs.SetInt(key, value);
        },
        GetPlayerInt: function (key, defaultValue){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            var result = UnityEngine.PlayerPrefs.GetInt$$String$$Int32(key, defaultValue);
            return result;
        },
        SetPlayerBool: function (key, value){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            UnityEngine.PlayerPrefs.SetInt(key, value ? 1 : 0);
        },
        GetPlayerBool: function (key, defaultValue){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            var result = UnityEngine.PlayerPrefs.GetInt$$String$$Int32(key, defaultValue ? 1 : 0) == 1;
            return result;
        },
        SetPlayerFloat: function (key, value){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            UnityEngine.PlayerPrefs.SetInt(key, value);
        },
        GetPlayerFloat: function (key, defaultValue){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            var result = UnityEngine.PlayerPrefs.GetFloat$$String$$Single(key, defaultValue);
            return result;
        },
        HasPlayerKey: function (key){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            return UnityEngine.PlayerPrefs.HasKey(key);
        },
        DeletePlayerKey: function (key){
            key = PlayerPrefsExt.PLAYER_PREFIX + "_" + key;
            UnityEngine.PlayerPrefs.DeleteKey(key);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PlayerPrefsExt);
var RandomHelper = {
    fullname: "RandomHelper",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._random = null;
            System.Object.ctor.call(this);
            this._random = new System.Random.ctor();
        },
        GetRandomInt: function (minNum, maxNum){
            return this._random.Next$$Int32$$Int32(minNum, maxNum);
        },
        GetRandomDouble: function (){
            return this._random.NextDouble();
        },
        GetRandomArray$1: function (T, arr){
            var count = arr.get_Count();
            for (var i = 0; i < count; i++){
                var randomNum1 = this.GetRandomInt(0, arr.get_Count());
                var randomNum2 = this.GetRandomInt(0, arr.get_Count());
                var temp;
                temp = arr.get_Item$$Int32(randomNum1);
                arr.set_Item$$Int32(randomNum1, arr.get_Item$$Int32(randomNum2));
                arr.set_Item$$Int32(randomNum2, temp);
            }
        }
    }
};
JsTypes.push(RandomHelper);
var SceneHelper = {
    fullname: "SceneHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        GetSceneStandPosition: function (sourcePos, defaultPos){
            var newPosition;
            var hit;
            var ray = new UnityEngine.Ray.ctor$$Vector3$$Vector3(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(sourcePos.x, 50, sourcePos.z), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -1, 0));
            if (!(function (){
                var $1 = $Ref(null, hit);
                var $res = UnityEngine.Physics.Raycast$$Ray$$RaycastHit$$Single$$Int32(ray, $1, 100, 1 << UnityEngine.LayerMask.NameToLayer("Terrain"));
                hit = $1.Value;
                return $res;
            }).call(this)){
                newPosition = sourcePos;
            }
            else {
                newPosition = hit.get_point();
            }
            return SceneHelper.GetSceneStandPositionWithNavMeshHit(newPosition, defaultPos);
        },
        GetSceneStandPositionWithNavMeshHit: function (sourcePos, defaultPos){
            var hit;
            if ((function (){
                var $1 = $Ref(null, hit);
                var $res = UnityEngine.NavMesh.SamplePosition(sourcePos, $1, 20, -1 /* -1 */);
                hit = $1.Value;
                return $res;
            }).call(this)){
                return hit.get_position();
            }
            else {
                return defaultPos;
            }
        },
        IsCanWalkScope: function (pos){
            var hit;
            var ray = new UnityEngine.Ray.ctor$$Vector3$$Vector3(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(pos.x, 50, pos.z), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -1, 0));
            if (!(function (){
                var $1 = $Ref(null, hit);
                var $res = UnityEngine.Physics.Raycast$$Ray$$RaycastHit$$Single$$Int32(ray, $1, 100, 1 << UnityEngine.LayerMask.NameToLayer("Terrain"));
                hit = $1.Value;
                return $res;
            }).call(this)){
                return false;
            }
            else {
                return true;
            }
        },
        ToggleSceneEffect: function (toggle){
            var sceneEffect = LayerManager.get_Instance().SceneEffect;
            if (UnityEngine.Object.op_Inequality(sceneEffect, null)){
                sceneEffect.SetActive(toggle);
            }
        },
        CheckAtBattleScope: function (point3D){
            var polygons = new Array(4);
            polygons[0] = new UnityEngine.Vector2.ctor$$Single$$Single(3.4, 7.2);
            polygons[1] = new UnityEngine.Vector2.ctor$$Single$$Single(12.6, -1 /* -1f */);
            polygons[2] = new UnityEngine.Vector2.ctor$$Single$$Single(21.5, 9);
            polygons[3] = new UnityEngine.Vector2.ctor$$Single$$Single(14.5, 17);
            var point2D = new UnityEngine.Vector2.ctor$$Single$$Single(point3D.x, point3D.z);
            return SceneHelper.IsPointInPolygon(point2D, polygons);
        },
        IsPointInPolygon: function (p, polygon){
            var minX = polygon[0].x;
            var maxX = polygon[0].x;
            var minY = polygon[0].y;
            var maxY = polygon[0].y;
            for (var i = 1; i < polygon.length; i++){
                var q = polygon[i];
                minX = System.Math.Min$$Single$$Single(q.x, minX);
                maxX = System.Math.Max$$Single$$Single(q.x, maxX);
                minY = System.Math.Min$$Single$$Single(q.y, minY);
                maxY = System.Math.Max$$Single$$Single(q.y, maxY);
            }
            if (p.x < minX || p.x > maxX || p.y < minY || p.y > maxY){
                return false;
            }
            var inside = false;
            for (var i = 0,j = polygon.length - 1; i < polygon.length; j = i++){
                if ((polygon[i].y > p.y) != (polygon[j].y > p.y) && p.x < (polygon[j].x - polygon[i].x) * (p.y - polygon[i].y) / (polygon[j].y - polygon[i].y) + polygon[i].x){
                    inside = !inside;
                }
            }
            return inside;
        },
        CheckAtWeddingScope: function (point3D){
            var polygons = new Array(4);
            polygons[0] = new UnityEngine.Vector2.ctor$$Single$$Single(27, 24.1);
            polygons[1] = new UnityEngine.Vector2.ctor$$Single$$Single(30.3, 27.4);
            polygons[2] = new UnityEngine.Vector2.ctor$$Single$$Single(34, 24.4);
            polygons[3] = new UnityEngine.Vector2.ctor$$Single$$Single(29.9, 20.3);
            var point2D = new UnityEngine.Vector2.ctor$$Single$$Single(point3D.x, point3D.z);
            return SceneHelper.IsPointInPolygon(point2D, polygons);
        },
        CheckAtBridalSedanScope: function (point3D){
            var polygons = new Array(4);
            polygons[0] = new UnityEngine.Vector2.ctor$$Single$$Single(13, -53 /* -53.0f */);
            polygons[1] = new UnityEngine.Vector2.ctor$$Single$$Single(51, 0);
            polygons[2] = new UnityEngine.Vector2.ctor$$Single$$Single(111, -68 /* -68.0f */);
            polygons[3] = new UnityEngine.Vector2.ctor$$Single$$Single(70, -115 /* -115f */);
            var point2D = new UnityEngine.Vector2.ctor$$Single$$Single(point3D.x, point3D.z);
            return SceneHelper.IsPointInPolygon(point2D, polygons);
        },
        CheckAtTwoPointInRang: function (aPoint, bPoint, radius){
            var a = new UnityEngine.Vector2.ctor$$Single$$Single(aPoint.x, aPoint.z);
            var b = new UnityEngine.Vector2.ctor$$Single$$Single(bPoint.x, bPoint.z);
            var distance = UnityEngine.Vector2.Distance(a, b);
            return distance < radius;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SceneHelper);
var TabbtnPrefabPath = {
    fullname: "TabbtnPrefabPath",
    staticDefinition: {
        TabBtnWidget: 0,
        TabBtnWidget_H1: 1,
        TabBtnWidget_H2: 2,
        TabBtnWidget_H3: 3,
        TabBtnWidget_H3_SHORT: 4,
        TABBUTTON_H4: 5
    },
    Kind: "Enum"
};
JsTypes.push(TabbtnPrefabPath);
var TabbtnManager = {
    fullname: "TabbtnManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        Create: function (){
            var mgr = new TabbtnManager.ctor();
            return mgr;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.curIdx = -1 /* -1 */;
            this._disposable = null;
            this.stream = new UniRx.Subject$1.ctor(System.Int32.ctor);
            this._tabBtnCtrlList = new System.Collections.Generic.List$1.ctor(ITabBtnController.ctor);
            System.Object.ctor.call(this);
        },
        Stream$$: "UniRx.IObservableExpand`1[[System.Int32]]",
        get_Stream: function (){
            return this.stream;
        },
        AddTabCtrl: function (ctrl){
            if (ctrl == null)
                return;
            var idx = this._tabBtnCtrlList.IndexOf$$T(ctrl);
            if (idx < 0){
                this._tabBtnCtrlList.Add(ctrl);
                idx = this._tabBtnCtrlList.get_Count() - 1;
            }
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, ctrl.get_OnTabClick(), $CreateAnonymousDelegate(this, function (_){
                this.SetTabBtn(idx);
            })));
        },
        GetCurSelectedInx$$: "System.Int32",
        get_GetCurSelectedInx: function (){
            return this.curIdx;
        },
        SetTabBtn: function (selectIndex){
            if (this._tabBtnCtrlList.get_Count() <= selectIndex || selectIndex == this.curIdx)
                return;
            this.curIdx = selectIndex;
            for (var i = 0; i < this._tabBtnCtrlList.get_Count(); ++i){
                this._tabBtnCtrlList.get_Item$$Int32(i).SetSelected(i == selectIndex);
            }
            this.stream.OnNext(this.curIdx);
        },
        Dispose: function (){
            this._disposable.Dispose();
            this._tabBtnCtrlList.Clear();
        }
    }
};
JsTypes.push(TabbtnManager);
var Tuple = {
    fullname: "Tuple",
    baseTypeName: "System.Object",
    staticDefinition: {
        Create$2: function (T1, T2){
            return new Tuple$2.ctor(T1, T2);
        },
        Create$3: function (T1, T2, T3){
            return new Tuple$3.ctor(T1, T2, T3);
        },
        Create$2$$T1$$T2: function (T1, T2, i1, i2){
            return new Tuple$2.ctor$$T1$$T2(T1, T2, i1, i2);
        },
        Create$3$$T1$$T2$$T3: function (T1, T2, T3, i1, i2, i3){
            return new Tuple$3.ctor$$T1$$T2$$T3(T1, T2, T3, i1, i2, i3);
        },
        Create$4$$T1$$T2$$T3$$T4: function (T1, T2, T3, T4, i1, i2, i3, i4){
            return new Tuple$4.ctor$$T1$$T2$$T3$$T4(T1, T2, T3, T4, i1, i2, i3, i4);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(Tuple);
var Tuple$2 = {
    fullname: "Tuple$2",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Equality: function (a, b){
            if (a == null && b == null)
                return true;
            if (a != null && b != null){
                return System.Object.Equals$$Object$$Object(a.p1, b.p1) && System.Object.Equals$$Object$$Object(a.p2, b.p2);
            }
            return false;
        },
        op_Inequality: function (a, b){
            return !(Tuple$2.op_Equality(a, b));
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IEquatable$1"],
    Kind: "Class",
    definition: {
        ctor: function (T1, T2){
            this.T1 = T1;
            this.T2 = T2;
            this.p1 = null;
            this.p2 = null;
            System.Object.ctor.call(this);
        },
        ctor$$T1$$T2: function (T1, T2, i1, i2){
            this.T1 = T1;
            this.T2 = T2;
            this.p1 = null;
            this.p2 = null;
            System.Object.ctor.call(this);
            this.p1 = i1;
            this.p2 = i2;
        },
        Equals$$Object: function (obj){
            var other = As(obj, Tuple$2.ctor);
            return this.Equals$$Tuple$2(other);
        },
        Equals$$Tuple$2: function (other){
            return other != null && Tuple$2.op_Equality(this, other);
        },
        GetHashCode: function (){
            if (this.p1 != null && this.p2 != null){
                return this.p1.GetHashCode() & this.p2.GetHashCode();
            }
            if (this.p1 != null)
                return this.p1.GetHashCode();
            if (this.p2 != null)
                return this.p2.GetHashCode();
            return 0;
        },
        toString: function (){
            return System.String.Format$$String$$Object$Array("Tuple<{0},{1}>:[{2}]<{3},{4}>", [Typeof(this.T1), Typeof(this.T2), this.GetHashCode(), this.p1, this.p2]);
        }
    }
};
JsTypes.push(Tuple$2);
var Tuple$3 = {
    fullname: "Tuple$3",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Equality: function (a, b){
            if (a == null && b == null)
                return true;
            if (a != null && b != null){
                return System.Object.Equals$$Object$$Object(a.p1, b.p1) && System.Object.Equals$$Object$$Object(a.p2, b.p2) && System.Object.Equals$$Object$$Object(a.p3, b.p3);
            }
            return false;
        },
        op_Inequality: function (a, b){
            return !(Tuple$3.op_Equality(a, b));
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.p1 = null;
            this.p2 = null;
            this.p3 = null;
            System.Object.ctor.call(this);
        },
        ctor$$T1$$T2$$T3: function (T1, T2, T3, i1, i2, i3){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.p1 = null;
            this.p2 = null;
            this.p3 = null;
            System.Object.ctor.call(this);
            this.p1 = i1;
            this.p2 = i2;
            this.p3 = i3;
        },
        Equals$$Object: function (obj){
            var other = As(obj, Tuple$3.ctor);
            return this.Equals$$Tuple$3(other);
        },
        Equals$$Tuple$3: function (other){
            return other != null && Tuple$3.op_Equality(this, other);
        },
        GetHashCode: function (){
            if (this.p1 == null && this.p2 == null && this.p3 == null){
                return 0;
            }
            var h1 = this.p1 != null ? this.p1.GetHashCode() : -1 /* -1 */;
            var h2 = this.p2 != null ? this.p2.GetHashCode() : -1 /* -1 */;
            var h3 = this.p3 != null ? this.p3.GetHashCode() : -1 /* -1 */;
            return h1 & h2 & h3;
        },
        toString: function (){
            return System.String.Format$$String$$Object$Array("Tuple<{0},{1},{2}>:[{3}]<{4},{5},{6}>", [Typeof(this.T1), Typeof(this.T2), Typeof(this.T3), this.GetHashCode(), this.p1, this.p2, this.p3]);
        }
    }
};
JsTypes.push(Tuple$3);
var Tuple$4 = {
    fullname: "Tuple$4",
    baseTypeName: "System.Object",
    staticDefinition: {
        op_Equality: function (a, b){
            if (a == null && b == null)
                return true;
            if (a != null && b != null){
                return System.Object.Equals$$Object$$Object(a.p1, b.p1) && System.Object.Equals$$Object$$Object(a.p2, b.p2) && System.Object.Equals$$Object$$Object(a.p3, b.p3) && System.Object.Equals$$Object$$Object(a.p4, b.p4);
            }
            return false;
        },
        op_Inequality: function (a, b){
            return !(Tuple$4.op_Equality(a, b));
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.p1 = null;
            this.p2 = null;
            this.p3 = null;
            this.p4 = null;
            System.Object.ctor.call(this);
        },
        ctor$$T1$$T2$$T3$$T4: function (T1, T2, T3, T4, i1, i2, i3, i4){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.p1 = null;
            this.p2 = null;
            this.p3 = null;
            this.p4 = null;
            System.Object.ctor.call(this);
            this.p1 = i1;
            this.p2 = i2;
            this.p3 = i3;
            this.p4 = i4;
        },
        Equals$$Object: function (obj){
            var other = As(obj, Tuple$4.ctor);
            return this.Equals$$Tuple$4(other);
        },
        Equals$$Tuple$4: function (other){
            return other != null && Tuple$4.op_Equality(this, other);
        },
        GetHashCode: function (){
            if (this.p1 == null && this.p2 == null && this.p3 == null){
                return 0;
            }
            var h1 = this.p1 != null ? this.p1.GetHashCode() : -1 /* -1 */;
            var h2 = this.p2 != null ? this.p2.GetHashCode() : -1 /* -1 */;
            var h3 = this.p3 != null ? this.p3.GetHashCode() : -1 /* -1 */;
            var h4 = this.p4 != null ? this.p4.GetHashCode() : -1 /* -1 */;
            return h1 & h2 & h3 & h4;
        },
        toString: function (){
            return System.String.Format$$String$$Object$Array("Tuple<{0},{1},{2},{3}>:[{4}]<{5},{6},{7},{8}>", [Typeof(this.T1), Typeof(this.T2), Typeof(this.T3), Typeof(this.T4), this.GetHashCode(), this.p1, this.p2, this.p3, this.p4]);
        }
    }
};
JsTypes.push(Tuple$4);
var ServerNameGetter = {
    fullname: "ServerNameGetter",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ServerNameGetter.serverNameColor = "[c7f6f7]";
            ServerNameGetter.serverStateColor = ["[d4d4d4]", "[00deff]", "[22f322]", "[ff0000]", "[ff9c00]"];
            ServerNameGetter.endColorString = "[-]";
            ServerNameGetter.serverStateInfo = ["empty", "full", "boom", "fix"];
            ServerNameGetter.serverIDStringArray = ["零", "一", "二", "三", "四", "五", "六", "七", "八", "九"];
        },
        GetServerId: function (id){
            var serverID = id;
            var number = System.String.Empty;
            while (serverID > 0){
                var n = serverID % 10;
                number = ServerNameGetter.serverIDStringArray[n] + number;
                serverID = ((serverID / 10) | 0);
            }
            number += "服 ";
            return number;
        },
        GetServerName: function (info){
            return info.name;
        },
        GetServiceStateSpriteName: function (info){
            return ServerNameGetter.serverStateInfo[info.runState];
        },
        GetSelectServerName: function (message){
            var runState = 0;
            if (message.dboState != 2){
                if (message.recommendType > 0 || message.newServer){
                    runState = 1;
                }
                else {
                    if (message.runState == 0){
                        runState = 2;
                    }
                    else if (message.runState == 1){
                        runState = 3;
                    }
                    else {
                        runState = 4;
                    }
                }
            }
            return System.String.Format$$String$$Object$Array("{0}{1} {2}{3}", [ServerNameGetter.serverStateColor[runState], message.name, ServerNameGetter.serverStateInfo[runState], ServerNameGetter.endColorString]);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ServerNameGetter);
var UIHelper = {
    fullname: "UIHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            UIHelper._uiAtlasDic = null;
        },
        AdjustDepth: function (go, adjustment){
            if (UnityEngine.Object.op_Inequality(go, null)){
                if (UnityEngine.Object.op_Equality(go.GetComponent$1(UIPanel.ctor), null)){
                    UIHelper.AdjustDepthWithoutPanel(go, adjustment);
                }
                else {
                    if (UnityEngine.Object.op_Inequality(go.get_transform().get_parent(), null)){
                        var parentPanel = go.get_transform().get_parent().GetComponentInParent$1(UIPanel.ctor);
                        var panel = go.GetComponent$1(UIPanel.ctor);
                        if (UnityEngine.Object.op_Inequality(panel, null) && panel.get_depth() >= 10){
                            panel.set_depth(1);
                        }
                        if (UnityEngine.Object.op_Inequality(parentPanel, null)){
                            NGUITools.AdjustDepth(go, parentPanel.get_depth() + adjustment);
                        }
                    }
                    else
                        NGUITools.AdjustDepth(go, adjustment);
                }
            }
        },
        AdjustDepthWithoutPanel: function (go, adjustment){
            if (UnityEngine.Object.op_Inequality(go, null)){
                var widgets = go.GetComponentsInChildren$1$$Boolean(UIWidget.ctor, true);
                for (var i = 0,imax = widgets.length; i < imax; ++i){
                    var w = widgets[i];
                    w.set_depth(w.get_depth() + adjustment);
                }
                return 2;
            }
            return 0;
        },
        GetMaxDepthWithPanelAndWidget: function (go){
            if (UnityEngine.Object.op_Equality(go, null)){
                return 0;
            }
            var rootDepth = 0;
            var panel = go.GetComponent$1(UIPanel.ctor);
            if (UnityEngine.Object.op_Inequality(panel, null)){
                rootDepth = panel.get_depth();
            }
            var depthList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var panels = go.GetComponentsInChildren$1$$Boolean(UIPanel.ctor, true);
            CollectionExtension.ForEach$1(UIPanel.ctor, panels, function (s){
                depthList.Add(s.get_depth());
            });
            depthList.Sort();
            var max = depthList.get_Item$$Int32(depthList.get_Count() - 1);
            return rootDepth <= max ? max : rootDepth + max;
        },
        CreateBigBaseBtn: function (parent, label, callback, goName){
            var go = NGUITools.AddChild$$GameObject$$GameObject(parent, AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("BaseButton"));
            go.set_name(goName);
            go.GetComponentInChildren$1(UILabel.ctor).set_text(label);
            var btn = go.GetComponent$1(UIButton.ctor);
            if (UnityEngine.Object.op_Inequality(btn, null) && callback != null){
                EventDelegate.Set$$List$1$EventDelegate$$Callback(btn.onClick, callback);
            }
            return btn;
        },
        Destroy: function (pObject){
            UnityEngine.Object.Destroy$$Object(pObject);
            pObject = null;
        },
        CreateBaseBtn: function (parent, label, callback, goName){
            var go = NGUITools.AddChild$$GameObject$$GameObject(parent, AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("BaseSmallButton"));
            go.set_name(goName);
            go.GetComponentInChildren$1(UILabel.ctor).set_text(label);
            var btn = go.GetComponent$1(UIButton.ctor);
            if (UnityEngine.Object.op_Inequality(btn, null) && callback != null){
                EventDelegate.Set$$List$1$EventDelegate$$Callback(btn.onClick, callback);
            }
            return btn;
        },
        CreateCostBtn: function (parent, label, icon, callback, goName){
            var go = NGUITools.AddChild$$GameObject$$GameObject(parent, AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("CostButton"));
            go.set_name(goName);
            var costBtn = go.GetComponent$1(CostButton.ctor);
            costBtn.set_NameStr(label);
            costBtn.set_CostIconSprite(icon);
            var btn = go.GetComponent$1(UIButton.ctor);
            if (UnityEngine.Object.op_Inequality(btn, null) && callback != null){
                EventDelegate.Set$$List$1$EventDelegate$$Callback(btn.onClick, callback);
            }
            return costBtn;
        },
        CreateSliderToggle: function (parent, state, OnSliderToggleClick){
            var go = NGUITools.AddChild$$GameObject$$GameObject(parent, AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("SliderToggle"));
            var btn = go.GetComponent$1(SliderToggle.ctor);
            if (UnityEngine.Object.op_Inequality(btn, null)){
                btn.SetState(state);
                btn.OnSliderToggleClick = OnSliderToggleClick;
            }
            return btn;
        },
        AddDescLbl: function (table, bitmapFont, text){
            var descLbl = NGUITools.AddWidget$1(UILabel.ctor, table, 10);
            descLbl.get_cachedGameObject().set_name("descLbl");
            descLbl.set_bitmapFont(bitmapFont);
            descLbl.set_fontSize(20);
            descLbl.set_overflowMethod(3);
            descLbl.set_width(345);
            descLbl.set_pivot(0);
            descLbl.set_spacingY(6);
            descLbl.set_text(text);
            return descLbl;
        },
        AddDescLblWithTitle: function (table, bitmapFont, title, text, titleColor){
            var titleLbl = NGUITools.AddWidget$1(UILabel.ctor, table, 10);
            titleLbl.get_cachedGameObject().set_name("titleLbl");
            titleLbl.set_bitmapFont(bitmapFont);
            titleLbl.set_fontSize(22);
            titleLbl.set_overflowMethod(3);
            titleLbl.set_width(318);
            titleLbl.set_pivot(0);
            titleLbl.set_text(AppStringHelper.WrapColor$$String$$String(title, titleColor));
            var contentLbl = UIHelper.AddDescLbl(titleLbl.get_cachedGameObject(), bitmapFont, text);
            contentLbl.get_cachedTransform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -28 /* -28f */, 0));
            return contentLbl;
        },
        AddSpace: function (table, height){
        },
        AddCdTweener: function (parent, task){
            var modulePrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("CoolingEffect"), UnityEngine.GameObject.ctor);
            var module = NGUITools.AddChild$$GameObject$$GameObject(parent, modulePrefab);
            var com = GameObjectExt.GetMissingComponent$1(CdSpriteTween.ctor, module);
            com.Setup(task);
            return com;
        },
        AddButtonClickSound: function (buttonGo, soundName){
            AssetPipeline.ResourcePoolManager.get_Instance().LoadAudioClip(soundName, function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null) && UnityEngine.Object.op_Inequality(null, buttonGo)){
                    var audioClip = As(asset, UnityEngine.AudioClip.ctor);
                    var playSound = buttonGo.GetComponent$1(UIPlaySound.ctor);
                    if (UnityEngine.Object.op_Equality(playSound, null)){
                        playSound = buttonGo.AddComponent$1(UIPlaySound.ctor);
                    }
                    playSound.audioClip = audioClip;
                    playSound.trigger = 0;
                }
                else {
                    GameDebuger.Log("Can not find the sound of " + soundName, null);
                }
            }, null);
        },
        DisposeUITexture: function (uiTexture){
            if (UnityEngine.Object.op_Inequality(uiTexture, null)){
                var tex = uiTexture.get_mainTexture();
                if (UnityEngine.Object.op_Inequality(tex, null)){
                    uiTexture.set_mainTexture(null);
                    UnityEngine.Resources.UnloadAsset(tex);
                }
            }
        },
        RemoveNGUIEvent: function (go){
            var buttons = go.GetComponentsInChildren$1$$Boolean(UIButton.ctor, true);
            CollectionExtension.ForEach$1(UIButton.ctor, buttons, function (item){
                item.onClick.Clear();
            });
            var toggles = go.GetComponentsInChildren$1$$Boolean(UIToggle.ctor, true);
            CollectionExtension.ForEach$1(UIToggle.ctor, toggles, function (item){
                item.onChange.Clear();
            });
            var eventListeners = go.GetComponentsInChildren$1$$Boolean(UIEventListener.ctor, true);
            CollectionExtension.ForEach$1(UIEventListener.ctor, eventListeners, function (item){
                item.ClearAllListener();
            });
            var sliders = go.GetComponentsInChildren$1$$Boolean(UISlider.ctor, true);
            CollectionExtension.ForEach$1(UISlider.ctor, sliders, function (item){
                item.onChange.Clear();
            });
            var tUIPopupLists = go.GetComponentsInChildren$1$$Boolean(UIPopupList.ctor, true);
            CollectionExtension.ForEach$1(UIPopupList.ctor, tUIPopupLists, function (item){
                item.onChange.Clear();
            });
        },
        PlayAlphaTween: function (rect, fromAlpha, toAlpha, duration, delay, onFinish){
            rect.set_alpha(fromAlpha);
            if (fromAlpha == toAlpha)
                return;
            var tweener = DG.Tweening.DOTween.To$$DOGetter$1$Single$$DOSetter$1$Single$$Single$$Single(function (){
                return rect.get_alpha();
            }, function (x){
                rect.set_alpha(x);
            }, toAlpha, duration);
            DG.Tweening.TweenSettingsExtensions.SetDelay$1(DG.Tweening.Core.TweenerCore$3.ctor, tweener, delay);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Core.TweenerCore$3.ctor, tweener, onFinish);
        },
        SetFactionIcon: function (uiSprite, factionId, makePixelPerfect){
            UIHelper.SetIcon(uiSprite, "faction_" + factionId, "OtherIconAtlas", makePixelPerfect);
        },
        SetOtherIcon: function (uiSprite, icon, makePixelPerfect){
            UIHelper.SetIcon(uiSprite, icon, "OtherIconAtlas", makePixelPerfect);
        },
        SetItemIcon: function (uiSprite, icon, makePixelPerfect){
            UIHelper.SetIcon(uiSprite, icon, "ItemIconAtlas", makePixelPerfect);
        },
        SetSkillIcon: function (uiSprite, icon, makePixelPerfect){
            UIHelper.SetIcon(uiSprite, icon, "SkillIconAtlas", makePixelPerfect);
        },
        SetPetIcon: function (uiSprite, icon, makePixelPerfect){
            UIHelper.SetIcon(uiSprite, icon, "PetIconAtlas", makePixelPerfect);
        },
        SetMountIcon: function (uiSprite, pTexture, makePixelPerfect){
            UIHelper.SetPetIcon(uiSprite, "large_" + pTexture.toString(), makePixelPerfect);
        },
        GetIconAtlas: function (icon, atlasPrefix){
            if (System.String.IsNullOrEmpty(icon))
                return null;
            var atlasName = IconConfigManager.GetAltasName(icon, atlasPrefix);
            if (System.String.IsNullOrEmpty(atlasName))
                return null;
            if (UIHelper._uiAtlasDic == null)
                UIHelper._uiAtlasDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.String.ctor, UIAtlas.ctor, 8);
            var result = null;
            if ((function (){
                var $1 = $Ref(null, result);
                var $res = UIHelper._uiAtlasDic.TryGetValue(atlasName, $1);
                result = $1.Value;
                return $res;
            }).call(this)){
                if (UnityEngine.Object.op_Equality(result, null)){
                    var atlasPrefab = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type(atlasName, 11, null), UnityEngine.GameObject.ctor);
                    if (UnityEngine.Object.op_Inequality(atlasPrefab, null)){
                        result = atlasPrefab.GetComponent$1(UIAtlas.ctor);
                        UIHelper._uiAtlasDic.set_Item$$TKey(atlasName, result);
                    }
                }
            }
            else {
                var atlasPrefab = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type(atlasName, 11, null), UnityEngine.GameObject.ctor);
                if (UnityEngine.Object.op_Inequality(atlasPrefab, null)){
                    result = atlasPrefab.GetComponent$1(UIAtlas.ctor);
                    UIHelper._uiAtlasDic.Add(atlasName, result);
                }
            }
            return result;
        },
        SetIcon: function (uiSprite, icon, atlasName, makePixelPerfect){
            if (UnityEngine.Object.op_Equality(uiSprite, null))
                return;
            if (System.String.IsNullOrEmpty(icon)){
                uiSprite.set_spriteName("0");
                return;
            }
            atlasName = IconConfigManager.GetAltasName(icon, atlasName);
            if (UnityEngine.Object.op_Equality(uiSprite.get_atlas(), null) || uiSprite.get_atlas().get_name() != atlasName){
                if (UIHelper._uiAtlasDic == null)
                    UIHelper._uiAtlasDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.String.ctor, UIAtlas.ctor, 8);
                var result = null;
                if ((function (){
                    var $1 = $Ref(null, result);
                    var $res = UIHelper._uiAtlasDic.TryGetValue(atlasName, $1);
                    result = $1.Value;
                    return $res;
                }).call(this)){
                    if (UnityEngine.Object.op_Equality(result, null)){
                        var atlasPrefab = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type(atlasName, 11, null), UnityEngine.GameObject.ctor);
                        if (UnityEngine.Object.op_Inequality(atlasPrefab, null)){
                            result = atlasPrefab.GetComponent$1(UIAtlas.ctor);
                            UIHelper._uiAtlasDic.set_Item$$TKey(atlasName, result);
                        }
                    }
                }
                else {
                    var atlasPrefab = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type(atlasName, 11, null), UnityEngine.GameObject.ctor);
                    if (UnityEngine.Object.op_Inequality(atlasPrefab, null)){
                        result = atlasPrefab.GetComponent$1(UIAtlas.ctor);
                        UIHelper._uiAtlasDic.Add(atlasName, result);
                    }
                }
                uiSprite.set_atlas(result);
            }
            if (UnityEngine.Object.op_Inequality(uiSprite.get_atlas(), null) && uiSprite.get_atlas().GetSprite(icon) == null){
                icon = "0";
            }
            uiSprite.set_spriteName(icon);
            var uibutton = uiSprite.GetComponent$1(UIButton.ctor);
            if (UnityEngine.Object.op_Inequality(uibutton, null)){
                uibutton.set_normalSprite(icon);
            }
            if (makePixelPerfect)
                uiSprite.MakePixelPerfect();
        },
        IsViewUpdateEnable: function (pBaseView){
            return null != pBaseView && UnityEngine.Object.op_Inequality(null, pBaseView.get_gameObject()) && pBaseView.get_gameObject().get_activeInHierarchy();
        },
        SetBtnState$$UILabel$$UISprite$$Boolean$$BtnType: function (btnLbl, sprite, select, btnType){
            if (btnType == UIHelper.BtnType.Little){
                sprite.set_spriteName(select ? "button-001-selected" : "button-001");
            }
            else if (btnType == UIHelper.BtnType.Middle){
                sprite.set_spriteName(select ? "button-001-selected" : "button-001");
            }
            else if (btnType == UIHelper.BtnType.Big){
                sprite.set_spriteName(select ? "green-big-button" : "button-001");
            }
        },
        SetBtnState$$UIButton$$Boolean$$BtnType: function (button, select, btnType){
            if (btnType == UIHelper.BtnType.Little){
                button.set_normalSprite(select ? "button-001-selected" : "button-001");
            }
            else if (btnType == UIHelper.BtnType.Middle){
                button.set_normalSprite(select ? "button-001-selected" : "button-001");
            }
            else if (btnType == UIHelper.BtnType.Big){
                button.set_normalSprite(select ? "green-big-button" : "button-001");
            }
        },
        RepositionDelay: function (pUIGrid, pFinishHandler){
            var tCdTaskName = "RepositionDelay" + pUIGrid.GetHashCode().toString();
            JSTimer.get_Instance().CancelCd(tCdTaskName);
            JSTimer.get_Instance().SetupCoolDown(tCdTaskName, 0.1, null, function (){
                if (UnityEngine.Object.op_Equality(null, pUIGrid))
                    return;
                pUIGrid.Reposition();
                if (null != pFinishHandler)
                    pFinishHandler();
            }, 0.1, false);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UIHelper);
var UniWebViewExtHelper = {
    fullname: "UniWebViewExtHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        CreateUniWebView$$UIWidget$$String: function (widget, url){
            if (UnityEngine.Object.op_Equality(widget, null) || !widget.get_isActiveAndEnabled()){
                return null;
            }
            widget.ResetAndUpdateAnchors();
            var camera = widget.get_anchorCamera();
            var bottomLeft = camera.WorldToScreenPoint(widget.get_worldCorners()[0]);
            var topRight = camera.WorldToScreenPoint(widget.get_worldCorners()[2]);
            return UniWebViewExtHelper.CreateUniWebView$$GameObject$$String$$Single$$Single$$Single$$Single(widget.get_gameObject(), url, UnityEngine.Screen.get_height() - topRight.y, bottomLeft.x, bottomLeft.y, UnityEngine.Screen.get_width() - topRight.x);
        },
        CreateUniWebView$$GameObject$$String$$Single$$Single$$Single$$Single: function (go, url, top, left, bottom, right){
            if (UnityEngine.Object.op_Equality(go, null) || !go.get_activeSelf()){
                return null;
            }
            var view = go.GetComponent$1(UniWebView.ctor);
            if (UnityEngine.Object.op_Equality(view, null)){
                view = go.AddComponent$1(UniWebView.ctor);
            }
            view.set_insets(new UniWebViewEdgeInsets.ctor(UniWebViewHelper.ConvertPixelToPoint(top, false), UniWebViewHelper.ConvertPixelToPoint(left, true), UniWebViewHelper.ConvertPixelToPoint(bottom, false), UniWebViewHelper.ConvertPixelToPoint(right, true)));
            view.SetShowSpinnerWhenLoading(false);
            view.set_immersiveMode(false);
            view.url = url;
            return view;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UniWebViewExtHelper);
var CdSpriteTween = {
    fullname: "CdSpriteTween",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mSprite = null;
            this.mTask = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            this.mSprite = this.GetComponent$1(UISprite.ctor);
            if (UnityEngine.Object.op_Inequality(this.mSprite, null)){
                this.mSprite.set_fillAmount(1);
                var parentWidget = this.get_transform().get_parent().GetComponentInParent$1(UIWidget.ctor);
                if (UnityEngine.Object.op_Inequality(parentWidget, null)){
                    this.mSprite.set_depth(parentWidget.get_depth() + 1);
                }
                else
                    this.mSprite.set_depth(5);
            }
        },
        Update: function (){
            if (UnityEngine.Object.op_Inequality(this.mSprite, null)){
                if (this.mTask != null){
                    if (this.mTask.isValid){
                        this.mSprite.set_fillAmount(this.mTask.remainTime / this.mTask.totalTime);
                    }
                    else {
                        this.mTask = null;
                        this.mSprite.set_fillAmount(0);
                    }
                }
                else {
                    this.mSprite.set_fillAmount(0);
                }
            }
        },
        Setup: function (task){
            this.mTask = task;
            if (this.mTask != null)
                this.mSprite.set_fillAmount(1);
            else
                this.mSprite.set_fillAmount(0);
        }
    }
};
JsTypes.push(CdSpriteTween);
var CDTaskManager = {
    fullname: "CDTaskManager",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mCDTaskDic = null;
            System.Object.ctor.call(this);
            this.mCDTaskDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, JSTimer.CdTask.ctor);
        },
        AddOrResetCDTask: function (taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale){
            var tCDTask = this.FindCDTaskFromDic(taskName);
            if (null == tCDTask){
                tCDTask = JSTimer.get_Instance().SetupCoolDown(taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale);
                this.mCDTaskDic.Add(taskName, tCDTask);
            }
            else
                tCDTask.Reset(totalTime, onUpdate, onFinished, updateFrequence, timeScale);
            return tCDTask;
        },
        RemoveCDTask: function (taskName){
            var tCDTask = this.FindCDTaskFromDic(taskName);
            if (null == tCDTask)
                return;
            this.DisposeCDTask(tCDTask);
            this.mCDTaskDic.Remove(taskName);
        },
        Dispose: function (){
            if (null == this.mCDTaskDic || this.mCDTaskDic.get_Count() <= 0)
                return;
            var $it45 = this.mCDTaskDic.GetEnumerator();
            while ($it45.MoveNext()){
                var tKeyValuePair = $it45.get_Current();
                this.DisposeCDTask(tKeyValuePair.get_Value());
            }
            this.mCDTaskDic.Clear();
            this.mCDTaskDic = null;
        },
        DisposeCDTask: function (pCDTask){
            if (null == pCDTask)
                return;
            JSTimer.get_Instance().CancelCd(pCDTask.taskName);
            pCDTask.Dispose();
            pCDTask = null;
        },
        FindCDTaskFromDic: function (taskName){
            if (null == this.mCDTaskDic || this.mCDTaskDic.get_Count() <= 0)
                return null;
            var tCDTask = null;
            if ((function (){
                var $1 = $Ref(null, tCDTask);
                var $res = this.mCDTaskDic.TryGetValue(taskName, $1);
                tCDTask = $1.Value;
                return $res;
            }).call(this))
                return tCDTask;
            return null;
        }
    }
};
JsTypes.push(CDTaskManager);
var JSTimer = {
    fullname: "JSTimer",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            JSTimer._instance = null;
        },
        Instance$$: "JSTimer",
        get_Instance: function (){
            if (UnityEngine.Object.op_Equality(JSTimer._instance, null)){
                var go = new UnityEngine.GameObject.ctor$$String("JSTimer");
                JSTimer._instance = go.AddComponent$1(JSTimer.ctor);
                UnityEngine.Object.DontDestroyOnLoad(go);
            }
            return JSTimer._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._cdTasks = new System.Collections.Generic.List$1.ctor$$Int32(JSTimer.CdTask.ctor, 32);
            this._timerTasks = new System.Collections.Generic.List$1.ctor$$Int32(JSTimer.TimerTask.ctor, 32);
            this._timerToRemove = new System.Collections.Generic.List$1.ctor(JSTimer.TimerTask.ctor);
            this._coolDownToRemove = new System.Collections.Generic.List$1.ctor(JSTimer.CdTask.ctor);
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        CdTasks$$: "System.Collections.Generic.List`1[[JSTimer+CdTask]]",
        get_CdTasks: function (){
            return this._cdTasks;
        },
        TimerTasks$$: "System.Collections.Generic.List`1[[JSTimer+TimerTask]]",
        get_TimerTasks: function (){
            return this._timerTasks;
        },
        SetupCoolDown: function (taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale){
            if (System.String.IsNullOrEmpty(taskName))
                return null;
            if (totalTime <= 0){
                if (onFinished != null){
                    onFinished();
                }
                return null;
            }
            var cdTask = this.GetCdTask(taskName);
            if (cdTask != null){
                cdTask.Reset(totalTime, onUpdate, onFinished, updateFrequence, timeScale);
            }
            else {
                cdTask = new JSTimer.CdTask.ctor(taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale);
            }
            return cdTask;
        },
        GetCdTask: function (taskName){
            return this._cdTasks.Find($CreateAnonymousDelegate(this, function (task){
                return task.taskName.Equals$$String(taskName);
            }));
        },
        IsCdExist: function (taskName){
            return this.GetCdTask(taskName) != null;
        },
        AddCdIsNotExist: function (pCdTask){
            if (null == pCdTask)
                return false;
            if (this.IsCdExist(pCdTask.taskName))
                return false;
            this._cdTasks.Add(pCdTask);
            return true;
        },
        PauseCd: function (taskName){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.isPause = true;
                return true;
            }
            return false;
        },
        ResumeCd: function (taskName){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.isPause = false;
                return true;
            }
            return false;
        },
        CancelCd: function (taskName){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.isValid = false;
            }
        },
        GetRemainTime: function (taskName){
            var task = this.GetCdTask(taskName);
            if (task != null)
                return task.remainTime;
            else
                return 0;
        },
        AddCdUpdateHandler: function (taskName, updateHandler){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.onUpdate = $RemoveDelegate(task.onUpdate, updateHandler);
                task.onUpdate = $CombineDelegates(task.onUpdate, updateHandler);
            }
        },
        RemoveCdUpdateHandler: function (taskName, updateHandler){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.onUpdate = $RemoveDelegate(task.onUpdate, updateHandler);
            }
        },
        AddCdFinishHandler: function (taskName, finishHandler){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.onFinished = $RemoveDelegate(task.onFinished, finishHandler);
                task.onFinished = $CombineDelegates(task.onFinished, finishHandler);
            }
        },
        RemoveCdFinishHandler: function (taskName, finishHandler){
            var task = this.GetCdTask(taskName);
            if (task != null){
                task.onFinished = $RemoveDelegate(task.onFinished, finishHandler);
            }
        },
        SetupTimer: function (taskName, onUpdate, updateFrequence, timeScale){
            if (System.String.IsNullOrEmpty(taskName))
                return null;
            var timerTask = this.GetTimerTask(taskName);
            if (timerTask != null){
                timerTask.Reset(onUpdate, updateFrequence, timeScale);
            }
            else {
                timerTask = new JSTimer.TimerTask.ctor(taskName, onUpdate, updateFrequence, timeScale);
                this._timerTasks.Add(timerTask);
            }
            return timerTask;
        },
        GetTimerTask: function (taskName){
            return this._timerTasks.Find($CreateAnonymousDelegate(this, function (task){
                return task.taskName.Equals$$String(taskName);
            }));
        },
        IsTimerExist: function (taskName){
            return this.GetTimerTask(taskName) != null;
        },
        PauseTimer: function (taskName){
            var task = this.GetTimerTask(taskName);
            if (task != null){
                task.isPause = true;
                return true;
            }
            return false;
        },
        ResumeTimer: function (taskName){
            var task = this.GetTimerTask(taskName);
            if (task != null){
                task.isPause = false;
                return true;
            }
            return false;
        },
        CancelTimer: function (taskName){
            var task = this.GetTimerTask(taskName);
            if (task != null){
                task.isValid = false;
            }
        },
        AddTimerUpdateHandler: function (taskName, updateHandler){
            var task = this.GetTimerTask(taskName);
            if (task != null){
                task.onUpdate = $RemoveDelegate(task.onUpdate, updateHandler);
                task.onUpdate = $CombineDelegates(task.onUpdate, updateHandler);
            }
        },
        RemoveTimerUpdateHandler: function (taskName, updateHandler){
            var task = this.GetTimerTask(taskName);
            if (task != null){
                task.onUpdate = $RemoveDelegate(task.onUpdate, updateHandler);
            }
        },
        Update: function (){
            for (var i = 0,imax = this._timerTasks.get_Count(); i < imax; ++i){
                var timerTask = this._timerTasks.get_Item$$Int32(i);
                if (timerTask.isValid){
                    if (timerTask.isPause)
                        continue;
                    var deltaTime = timerTask.timeScale ? _jsComManager.dT : _jsComManager.uDT;
                    timerTask.cumulativeTime += deltaTime;
                    if (timerTask.cumulativeTime >= timerTask.updateFrequence){
                        timerTask.cumulativeTime = 0;
                        timerTask.DoUpdate();
                    }
                }
                else {
                    this._timerToRemove.Add(timerTask);
                }
            }
            if (this._timerToRemove.get_Count() > 0){
                for (var i = 0; i < this._timerToRemove.get_Count(); ++i){
                    var timerTask = this._timerToRemove.get_Item$$Int32(i);
                    timerTask.Dispose();
                    this._timerTasks.Remove(timerTask);
                }
                this._timerToRemove.Clear();
            }
            for (var i = 0,imax = this._cdTasks.get_Count(); i < imax; ++i){
                var cdTask = this._cdTasks.get_Item$$Int32(i);
                if (cdTask.isValid){
                    if (cdTask.isPause)
                        continue;
                    var deltaTime = cdTask.timeScale ? _jsComManager.dT : _jsComManager.uDT;
                    cdTask.remainTime -= deltaTime;
                    if (cdTask.remainTime <= 0){
                        cdTask.remainTime = 0;
                        cdTask.isValid = false;
                        cdTask.DoUpdate();
                        cdTask.DoFinish();
                    }
                    else {
                        cdTask.cumulativeTime += deltaTime;
                        if (cdTask.cumulativeTime >= cdTask.updateFrequence){
                            cdTask.cumulativeTime = 0;
                            cdTask.DoUpdate();
                        }
                    }
                }
                else {
                    this._coolDownToRemove.Add(cdTask);
                }
            }
            if (this._coolDownToRemove.get_Count() > 0){
                for (var i = 0; i < this._coolDownToRemove.get_Count(); ++i){
                    var cdTask = this._coolDownToRemove.get_Item$$Int32(i);
                    cdTask.Dispose();
                    this._cdTasks.Remove(cdTask);
                }
                this._coolDownToRemove.Clear();
            }
        },
        Dispose: function (){
            this._cdTasks.Clear();
            this._timerTasks.Clear();
        }
    }
};
JsTypes.push(JSTimer);
var AssetPipeline$AssetLoadPriority = {
    fullname: "AssetPipeline.AssetLoadPriority",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AssetPipeline.AssetLoadPriority.SceneConfig = 87;
            AssetPipeline.AssetLoadPriority.Scene2DMiniMap = 88;
            AssetPipeline.AssetLoadPriority.Model = 89;
            AssetPipeline.AssetLoadPriority.Scene2DTitleMap = 90;
            AssetPipeline.AssetLoadPriority.Default = 100;
            AssetPipeline.AssetLoadPriority.Cache = 101;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AssetPipeline$AssetLoadPriority);
var AudioManager = {
    fullname: "AudioManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AudioManager._instance = null;
        },
        Instance$$: "AudioManager",
        get_Instance: function (){
            if (AudioManager._instance == null){
                AudioManager._instance = new AudioManager.ctor();
            }
            return AudioManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._curMusicName = "";
            this._dubbingVolume = 0;
            this._managerGO = null;
            this._musicAudioSource = null;
            this._musicVolume = 0.5;
            this._soundVolume = 0.75;
            this._toggleDubbing = false;
            this._toggleMusic = true;
            this._toggleSound = true;
            System.Object.ctor.call(this);
        },
        ToggleMusic$$: "System.Boolean",
        get_ToggleMusic: function (){
            return this._toggleMusic;
        },
        set_ToggleMusic: function (value){
            this._toggleMusic = value;
            if (this._toggleMusic){
                if (UnityEngine.Object.op_Equality(this._musicAudioSource, null)){
                    this.PlayMusic(this._curMusicName, true);
                }
                else {
                    if (UnityEngine.Object.op_Equality(null, this._musicAudioSource.get_clip())){
                        GameDebuger.LogError(System.String.Format$$String$$Object("声音控制失败，声音片段（_musicAudioSource.clip）为空，请检查对应的声音文件是否已正确导入!（U3D编辑器下重新导入一下目标声音（{0}）即可）。", this._curMusicName), null);
                        return;
                    }
                    else if (!this._curMusicName.Contains(this._musicAudioSource.get_clip().get_name())){
                        this.PlayMusic(this._curMusicName, false);
                    }
                }
            }
        },
        MusicVolume$$: "System.Single",
        get_MusicVolume: function (){
            return this._musicVolume;
        },
        set_MusicVolume: function (value){
            this._musicVolume = value;
            if (UnityEngine.Object.op_Inequality(this._musicAudioSource, null)){
                this._musicAudioSource.set_volume(this._musicVolume);
            }
        },
        ToggleSound$$: "System.Boolean",
        get_ToggleSound: function (){
            return this._toggleSound;
        },
        set_ToggleSound: function (value){
            this._toggleSound = value;
            NGUITools.ToggleSound = value;
        },
        SoundVolume$$: "System.Single",
        get_SoundVolume: function (){
            return this._soundVolume;
        },
        set_SoundVolume: function (value){
            this._soundVolume = value;
            NGUITools.set_soundVolume(value);
        },
        ToggleDubbing$$: "System.Boolean",
        get_ToggleDubbing: function (){
            return this._toggleDubbing;
        },
        set_ToggleDubbing: function (value){
            this._toggleDubbing = value;
        },
        DubbingVolume$$: "System.Single",
        get_DubbingVolume: function (){
            return this._dubbingVolume;
        },
        set_DubbingVolume: function (value){
            this._dubbingVolume = value;
        },
        Setup: function (){
            this._managerGO = UnityEngine.GameObject.Find("AudioManager");
        },
        PlayMusic: function (musicName, checkSame){
            if (System.String.IsNullOrEmpty(musicName)){
                GameDebuger.Log("Music name is null", null);
                return;
            }
            if (checkSame && this._curMusicName == musicName){
                GameDebuger.Log("Music : " + musicName + "is Playing ", null);
                return;
            }
            this._curMusicName = musicName;
            if (!this._toggleMusic){
                return;
            }
            GameDebuger.Log("Play music : " + musicName, null);
            AssetPipeline.ResourcePoolManager.get_Instance().LoadAudioClip(musicName, $CreateAnonymousDelegate(this, function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null)){
                    var audioClip = As(asset, UnityEngine.AudioClip.ctor);
                    this.PlayMusicAudioClip(audioClip);
                }
                else {
                    GameDebuger.Log("Can not find the Music of " + musicName, null);
                }
            }), null);
        },
        PlayMusicAudioClip: function (audioClip){
            if (UnityEngine.Object.op_Equality(this._musicAudioSource, null)){
                var go = new UnityEngine.GameObject.ctor();
                go.get_transform().set_parent(this._managerGO.get_transform());
                this._musicAudioSource = go.AddComponent$1(UnityEngine.AudioSource.ctor);
            }
            this._musicAudioSource.get_gameObject().set_name("AudioMusic:" + audioClip.get_name());
            var oldAudioClip = this._musicAudioSource.get_clip();
            this._musicAudioSource.set_clip(audioClip);
            this._musicAudioSource.set_loop(true);
            this._musicAudioSource.set_volume(this.get_MusicVolume());
            this._musicAudioSource.Play();
            if (UnityEngine.Object.op_Inequality(oldAudioClip, null))
                UnityEngine.Resources.UnloadAsset(oldAudioClip);
        },
        PlaySound: function (soundName){
            if (!this.get_ToggleSound()){
                return;
            }
            if (System.String.IsNullOrEmpty(soundName)){
                GameDebuger.Log("Sound name is null", null);
                return;
            }
            AssetPipeline.ResourcePoolManager.get_Instance().LoadAudioClip(soundName, $CreateAnonymousDelegate(this, function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null)){
                    var audioClip = As(asset, UnityEngine.AudioClip.ctor);
                    NGUITools.PlaySound$$AudioClip$$Single(audioClip, this.get_SoundVolume());
                }
                else {
                    GameDebuger.Log("Can not find the sound of " + soundName, null);
                }
            }), null);
        },
        PlayDubbing: function (dubbingName){
            if (!this.get_ToggleDubbing()){
                return;
            }
            if (System.String.IsNullOrEmpty(dubbingName)){
                GameDebuger.Log("Dubbing name is null", null);
                return;
            }
            AssetPipeline.ResourcePoolManager.get_Instance().LoadAudioClip(dubbingName, $CreateAnonymousDelegate(this, function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null)){
                    var audioClip = As(asset, UnityEngine.AudioClip.ctor);
                    NGUITools.PlaySound$$AudioClip$$Single(audioClip, this.get_DubbingVolume());
                }
                else {
                    GameDebuger.Log("Can not find the Dubbing of " + dubbingName, null);
                }
            }), null);
        },
        StopMusic: function (){
            if (UnityEngine.Object.op_Inequality(this._musicAudioSource, null)){
                this._musicAudioSource.Stop();
            }
            this._curMusicName = "";
        },
        StopVolumeWhenRecordVoice: function (){
            this.set_ToggleMusic(false);
            this.set_MusicVolume(0);
            this.set_ToggleSound(false);
            this.set_SoundVolume(0);
        },
        PlayVoiceWhenFinishRecord: function (){
            GameDebuger.TODO("\n\n        if (ModelManager.SystemData.IsIdleMode())\n        {\n            return;\n        }\n\n        ToggleMusic = ModelManager.SystemData.musicToggle;\n        MusicVolume = ToggleMusic ? ModelManager.SystemData.musicValue/100.0f : 0f;\n\n        ToggleSound = ModelManager.SystemData.soundToggle;\n        SoundVolume = ToggleSound ? ModelManager.SystemData.soundValue/100.0f : 0f;\n\n        ToggleDubbing = ModelManager.SystemData.DubbingToggle;\n        DubbingVolume = ToggleDubbing ? ModelManager.SystemData.DubbingValue/100.0f : 0f;\n            ");
        }
    }
};
JsTypes.push(AudioManager);
var ExpressionManager = {
    fullname: "ExpressionManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ExpressionManager._jsFuncCaches = null;
        },
        Setup: function (){
            ExpressionManager.Dispose();
            ExpressionManager._jsFuncCaches = new Object();
        },
        Dispose: function (){
            ExpressionManager._jsFuncCaches = null;
        },
        IsFuncExist: function (funcName){
            return ExpressionManager._jsFuncCaches.hasOwnProperty(funcName);
        },
        EvalExpression: function (funcName, formula, argNames, args){
            if (ExpressionManager.IsFuncExist(funcName)){
                return ExpressionManager.CallFunction(funcName, args);
            }
            formula = formula.toLowerCase();
            var funcScript = System.String.Format$$String$$Object$$Object$$Object("(function {0}({1}){{ return {2}; }})", funcName, argNames.toLowerCase(), formula);
            try{
                ExpressionManager.CompileJsFunc(funcName, funcScript);
            }
            catch(e){
                UnityEngine.Debug.LogError$$Object("EvalExpression Error:" + e.message + "\n" + funcScript);
                return 0;
            }
            return ExpressionManager.CallFunction(funcName, args);
        },
        CallFunction: function (funcName, args){
            if (ExpressionManager._jsFuncCaches == null)
                return 0;
            if (ExpressionManager._jsFuncCaches.hasOwnProperty(funcName)){
                var jsFunc = ExpressionManager._jsFuncCaches[funcName];
                var ret = jsFunc.apply(null, args);
                return ret;
            }
            return 0;
        },
        CompileJsFunc: function (funcName, script){
            if (ExpressionManager._jsFuncCaches == null)
                return;
            if (!ExpressionManager._jsFuncCaches.hasOwnProperty(funcName)){
                ExpressionManager._jsFuncCaches[funcName] = eval(script);
            }
        },
        DoTreasureMapCopperFormula: function (funcName, formula){
            var gameServerGrade = ModelManager.get_Player().get_ServerGrade();
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "slv", [gameServerGrade])) | 0);
            return value;
        },
        DoCrewAttValueFormula: function (funcName, formula, crewlv, stareffect){
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "LV, stareffect", [crewlv, stareffect])) | 0);
            return value;
        },
        DoNeedLoveValue: function (funcName, formula, lv){
            var value = ExpressionManager.EvalExpression(funcName, formula, "lv", [lv]);
            return value;
        },
        DoWorldChatNeedVigour: function (funcName, formula, level){
            var value = ExpressionManager.EvalExpression(funcName, formula, "level", [level]);
            return value;
        },
        DoWorldChatLvLimit: function (funcName, formula, openGrade, serverGrade){
            var value = ExpressionManager.EvalExpression(funcName, formula, "openGrade,SLV", [openGrade, serverGrade]);
            return value;
        },
        DoSkillFormula: function (funcName, formula, videoSoldier){
            formula = formula.Replace$$String$$String("()", "");
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "trigger", [videoSoldier])) | 0);
            return value;
        },
        DoScenarioSkillLevelFormula: function (funcName, formula, lv){
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "lv", [lv])) | 0);
            return value;
        },
        DoVigourConsumeFormula: function (funcName, formula, lv){
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "productLevel, skillLevel", [lv, lv])) | 0);
            return value;
        },
        DoStallGoodsBasePriceFormula: function (funcName, priceFactor, formula){
            var gameServerGrade = ModelManager.get_Player().get_ServerGrade();
            var value = UnityEngine.Mathf.FloorToInt(ExpressionManager.EvalExpression(funcName, formula, "gameservergrade, pricefactor", [gameServerGrade, priceFactor]));
            return value;
        },
        DoPropsParam21Formula: function (funcName, formula, rarity){
            if (formula.Contains("LV"))
                return 0;
            var playerLv = ModelManager.get_Player().GetPlayerLevel();
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "rarity,targetLevel", [rarity, playerLv])) | 0);
            return value;
        },
        DoEquipmentHurtFormula: function (funcName, formula, ilv, varyRate){
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "ilv, varyRate", [ilv, varyRate])) | 0);
            return value;
        },
        DoEquipmentPropertyQuality: function (funcName, formula, ilv){
            var value = ExpressionManager.EvalExpression(funcName, formula, "ilv", [ilv]);
            return value;
        },
        DoAuctionSellCostFormulas: function (funcName, formula){
            var gameServerGrade = ModelManager.get_Player().get_ServerGrade();
            var value = ExpressionManager.EvalExpression(funcName, formula, "SLV", [gameServerGrade]);
            return value;
        },
        DoCampWarRecruitFormulas: function (funcName, formula, iCount){
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "playerCount", [iCount])) | 0);
            return value;
        },
        DoDuelGauntletFree: function (funcName, formula, iCount){
            var playerLv = ModelManager.get_Player().GetPlayerLevel();
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "lv, N", [playerLv, iCount])) | 0);
            return value;
        },
        DoMagicResolveChipFormulas: function (funcName, formula, Quality){
            var value = ExpressionManager.EvalExpression(funcName, formula, "quality", [Quality]);
            return value;
        },
        DoMagicEquipmentMainSkillDescFormulas: function (funcName, formula, magicLevel){
            var value = ExpressionManager.EvalExpression(funcName, formula, "skillLevel", [magicLevel]);
            return value;
        },
        TangBuffComputer: function (funcName, formula){
            var playerLv = ModelManager.get_Player().GetPlayerLevel();
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "Lv", [playerLv])) | 0);
            return value;
        },
        TalentConputer: function (funcName, formula){
            var playerLv = ModelManager.get_Player().GetPlayerLevel();
            var value = ((ExpressionManager.EvalExpression(funcName, formula, "Lv", [playerLv])) | 0);
            return value;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ExpressionManager);
var FontManager = {
    fullname: "FontManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            FontManager.fontDic = null;
        },
        GetFont: function (fontName){
            if (FontManager.fontDic == null){
                FontManager.fontDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UIFont.ctor);
            }
            if (FontManager.fontDic.ContainsKey(fontName)){
                return FontManager.fontDic.get_Item$$TKey(fontName);
            }
            var fontPrefab = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type(fontName, 12, null), UnityEngine.GameObject.ctor);
            if (UnityEngine.Object.op_Inequality(fontPrefab, null)){
                var uiFont = fontPrefab.GetComponent$1(UIFont.ctor);
                if (UnityEngine.Object.op_Inequality(uiFont, null)){
                    FontManager.fontDic.Add(fontName, uiFont);
                    return uiFont;
                }
                return null;
            }
            return null;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(FontManager);
var GameCheatManager = {
    fullname: "GameCheatManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameCheatManager._instance = null;
            GameCheatManager.CheatingCheckFrequence = 5;
            GameCheatManager.CheatingCheckTick = "CheatingCheckTick";
            GameCheatManager.MAX_SPEEDOVERCOUNT = 2;
            GameCheatManager.CheckSpeedUp = false;
        },
        Instance$$: "GameCheatManager",
        get_Instance: function (){
            if (GameCheatManager._instance == null){
                GameCheatManager._instance = new GameCheatManager.ctor();
            }
            return GameCheatManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._startTime = 0;
            this._speedOverCount = 0;
            this._passedProcess = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this._banAppStrList = null;
            System.Object.ctor.call(this);
        },
        BanAppStrList$$: "System.Collections.Generic.List`1[[System.String]]",
        get_BanAppStrList: function (){
            GameDebuger.TODO("if (_banAppStrList == null || _banAppStrList.Count == 0)\n\t\t\t{\n\t\t\t\t_banAppStrList = _banAppStrList ?? new List<string>();\n\t\t\t\tvar appList = DataCache.getArrayByCls<BanApp>();\n\n\t\t\t\tfor (int i = 0; i < appList.Count; i++)\n\t\t\t\t{\n\t\t\t\t\t_banAppStrList.Add(appList[i].name);\n\t\t\t\t}\n\t\t\t\t_banAppStrList.Sort();\n\t\t\t}\n                ");
            return this._banAppStrList;
        },
        Setup: function (){
            this.StartCheck();
        },
        Dispose: function (){
            this.StopCheck();
            if (this._banAppStrList != null){
                this._banAppStrList.Clear();
            }
            if (this._passedProcess != null){
                this._passedProcess.Clear();
            }
        },
        StartCheck: function (){
            JSTimer.get_Instance().SetupTimer("CheatingCheckTick" /* CheatingCheckTick */, $CreateDelegate(this, this.Tick), 5 /* CheatingCheckFrequence */, false);
            this._speedOverCount = 0;
            this._startTime = System.DateTime.get_UtcNow().get_Ticks() / 10000;
        },
        PauseCheck: function (){
            JSTimer.get_Instance().PauseTimer("CheatingCheckTick" /* CheatingCheckTick */);
        },
        ResumeCheck: function (){
            JSTimer.get_Instance().ResumeTimer("CheatingCheckTick" /* CheatingCheckTick */);
        },
        StopCheck: function (){
            JSTimer.get_Instance().CancelTimer("CheatingCheckTick" /* CheatingCheckTick */);
        },
        Tick: function (){
            if (this.HasCheating()){
                this.CheatingHandle();
            }
        },
        HasCheating: function (){
            return this.HasCheatingProcess() || this.IsSpeedUp();
        },
        IsSpeedUp: function (){
            if (!GameCheatManager.CheckSpeedUp){
                return false;
            }
            var nowTime = System.DateTime.get_UtcNow().get_Ticks() / 10000;
            var passTime = nowTime - this._startTime;
            if (passTime < 4000 /* (CheatingCheckFrequence - 1) * 1000 */){
                this._speedOverCount++;
                GameDebuger.LogError("@检测加速时间=" + passTime, null);
                if (this._speedOverCount >= GameCheatManager.MAX_SPEEDOVERCOUNT){
                    return true;
                }
            }
            else {
                this._speedOverCount = 0;
            }
            this._startTime = nowTime;
            return false;
        },
        HasCheatingProcess: function (){
            if (UnityEngine.Application.get_platform() != 11 && UnityEngine.Application.get_platform() != 7){
                return false;
            }
            GameDebuger.Log("开始应用检测！", null);
            var runProcess = SystemProcess.GetRunningProcess();
            if (runProcess == null){
                return false;
            }
            if (null == this.get_BanAppStrList() || this.get_BanAppStrList().get_Count() <= 0)
                return false;
            for (var i = 0; i < runProcess.length; i++){
                var process = runProcess[i];
                if (this._passedProcess.Contains(process)){
                    continue;
                }
                for (var j = 0; j < this.get_BanAppStrList().get_Count(); j++){
                    var result = process.CompareTo$$String(this.get_BanAppStrList().get_Item$$Int32(j));
                    if (result == 0){
                        return true;
                    }
                    else if (result < 0){
                        break;
                    }
                }
                this._passedProcess.Add(process);
            }
            return false;
        },
        CheatingHandle: function (){
            this.StopCheck();
            GameDebuger.TODO("ModelManager.Player.StopAutoRun();");
            SocketManager.get_Instance().Close(false);
            ExitGameScript.NeedReturnToLogin = true;
            ExitGameScript.OpenExitTipWindow("系统检测到您的账号异常，请重新登陆");
        }
    }
};
JsTypes.push(GameCheatManager);
var GameConfig = {
    fullname: "GameConfig",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameConfig.APP_ID = 1;
            GameConfig.QINIU_DOMAIN = "ohpfvrgah.bkt.clouddn.com";
            GameConfig.QINIU_BUCKET = "h5-private";
            GameConfig.QINIU_MIMETYPE_IMAGE = "image/jpeg";
            GameConfig.QINIU_MIMETYPE_AUDIO = "amr audio/x-amr";
            GameConfig.TALKINGDATA_APPID = "75DB7BC2B38B42958687FE14C0907959";
            GameConfig.BAIDU_VOP_APPID = "8997474";
            GameConfig.BAIDU_VOP_APIKEY = "GdRqsjLgaOTQ7LQfKONXWOBr";
            GameConfig.BAIDU_VOP_SECRETKEY = "76f61181d44f7e5351451458729a1f45";
            GameConfig.TESTIN_APPKEY = "675e18a4db1224c5971df10418e32165";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameConfig);
var GameDataManager = {
    fullname: "GameDataManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameDataManager._instance = new GameDataManager.ctor();
        },
        Instance$$: "GameDataManager",
        get_Instance: function (){
            return GameDataManager._instance;
        },
        Data_Self_PackDto_Backpack$$: "System.String",
        get_Data_Self_PackDto_Backpack: function (){
            return "Data_PackDto_Backpack_" + ModelManager.get_Player().GetPlayerId() + "_V" + AppGameVersion.get_ShortBundleVersion();
        },
        Data_Self_PackDto_Warehouse$$: "System.String",
        get_Data_Self_PackDto_Warehouse: function (){
            return "Data_PackDto_Warehouse_" + ModelManager.get_Player().GetPlayerId() + "_V" + AppGameVersion.get_ShortBundleVersion();
        },
        Data_Self_PackDto_Wardrobe$$: "System.String",
        get_Data_Self_PackDto_Wardrobe: function (){
            return "Data_PackDto_Wardrobe_" + ModelManager.get_Player().GetPlayerId() + "_V" + AppGameVersion.get_ShortBundleVersion();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._cacheDataSuccess = null;
            this._cacheDataQueue = null;
            this._dtoDataDic = null;
            System.Object.ctor.call(this);
        },
        Setup: function (cacheDataSuccess){
            this._dtoDataDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
            this._cacheDataQueue = new System.Collections.Generic.Queue$1.ctor$$Int32(System.String.ctor, 3);
            this._cacheDataQueue.Enqueue(GameDataManager.get_Data_Self_PackDto_Backpack());
            this._cacheDataQueue.Enqueue(GameDataManager.get_Data_Self_PackDto_Warehouse());
            this._cacheDataQueue.Enqueue(GameDataManager.get_Data_Self_PackDto_Wardrobe());
            this._cacheDataSuccess = cacheDataSuccess;
            this.LoadNextData();
        },
        LoadNextData: function (){
            if (this._cacheDataQueue.get_Count() > 0){
                AssetPipeline.FileHelper.ReadFileAsync(this.GetDataPath(this._cacheDataQueue.Dequeue()), $CreateAnonymousDelegate(this, function (file){
                    var obj = JsHelper.ParseProtoObj(file.get_ByteArray(), true);
                    this._dtoDataDic.set_Item$$TKey(file.get_FilePath(), obj);
                    this.LoadNextData();
                }), $CreateAnonymousDelegate(this, function (filePath, error){
                    UnityEngine.Debug.LogWarning$$Object(error);
                    this.LoadNextData();
                }));
            }
            else {
                if (this._cacheDataSuccess != null)
                    this._cacheDataSuccess();
            }
        },
        GetDataPath: function (dataType){
            return AssetPipeline.GameResPath.get_persistentDataPath() + "/gamedata/" + dataType + ".pbz.bytes";
        },
        GetDataObj$1: function (T, dataName){
            var key = this.GetDataPath(dataName);
            if (this._dtoDataDic.ContainsKey(key)){
                return Cast(this._dtoDataDic.get_Item$$TKey(key), T);
            }
            return Default(T);
        },
        SaveData: function (){
            GameDebuger.Log("GameDataMaanger SaveData", null);
            if (this._dtoDataDic != null){
                if (this._dtoDataDic == null)
                    return;
                var $it46 = this._dtoDataDic.GetEnumerator();
                while ($it46.MoveNext()){
                    var item = $it46.get_Current();
                    var filePath = item.get_Key();
                    GameDebuger.Log("GameDataMaanger SaveData path=" + filePath, null);
                    var byteArray = JsHelper.EncodeObjToPbz(item.get_Value());
                    AssetPipeline.FileHelper.WriteAllBytes$$String$$ByteArray(filePath, byteArray);
                }
            }
        },
        PushData: function (dataName, obj){
            var key = this.GetDataPath(dataName);
            if (this._dtoDataDic.ContainsKey(key)){
                this._dtoDataDic.set_Item$$TKey(key, obj);
            }
            else {
                this._dtoDataDic.Add(key, obj);
            }
        },
        GetDataVersion: function (dataName){
            var key = this.GetDataPath(dataName);
            if (this._dtoDataDic.ContainsKey(key)){
                var obj = this._dtoDataDic.get_Item$$TKey(key);
                if (dataName == GameDataManager.get_Data_Self_PackDto_Backpack()){
                    GameDebuger.TODO("\n                var packDto = obj as BackpackDto;\n                if (packDto == null || packDto.packDto == null)\n                {\n                    return -1;\n                }\n                return packDto.packDto.version;\n                    ");
                    return -1 /* -1 */;
                }
                if (dataName == GameDataManager.get_Data_Self_PackDto_Warehouse()){
                    var warehouseDto = As(obj, AppDto.BagDto.ctor);
                    if (warehouseDto == null){
                        return -1 /* -1 */;
                    }
                    GameDebuger.TODO("return warehouseDto.version;");
                }
                if (dataName == GameDataManager.get_Data_Self_PackDto_Wardrobe()){
                    return -1 /* -1 */;
                }
                return -1 /* -1 */;
            }
            return -1 /* -1 */;
        },
        CleanUp: function (){
            this._dtoDataDic = null;
            var path = AssetPipeline.GameResPath.get_persistentDataPath() + "/gamedata/";
            AssetPipeline.FileHelper.DeleteDirectory(path, true);
        }
    }
};
JsTypes.push(GameDataManager);
var GameDisplayManager = {
    fullname: "GameDisplayManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameDisplayManager.MaxPlayerDataCount = 50;
            GameDisplayManager.MaxRideVisibleCount = 2;
            GameDisplayManager.MaxPlayerVisibleCount = 10;
            GameDisplayManager._currentLevel = GameDisplayManager.DisplayLevel.Low;
            GameDisplayManager.MaxNpcViewPoolCount = 25;
        },
        CurrentLevel$$: "GameDisplayManager+DisplayLevel",
        get_CurrentLevel: function (){
            return GameDisplayManager._currentLevel;
        },
        set_CurrentLevel: function (value){
            GameDisplayManager._currentLevel = value;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameDisplayManager);
var HotKeyManager = {
    fullname: "HotKeyManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            HotKeyManager.OpenUIModuleList = null;
            HotKeyManager.BattleActionList = null;
            GameDebuger.TODO("OpenUIModuleList = new OpenUIModule[]\n        {\n             // 大地图\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.M}, ModuleName = ProxyWorldMapModule.NAME_MINIWORLDMAP, OnOpened = () => ProxyWorldMapModule.OpenMiniWorldMap(), OnClosed = () => ProxyWorldMapModule.CloseMiniWorldMap()},\n             // 小地图\n             new OpenUIModule() {HotKeyList = new []{KeyCode.Tab}, ModuleName = ProxyWorldMapModule.NAME_MINIMAP, OnOpened = () => ProxyWorldMapModule.OpenMiniMap(), OnClosed = () => ProxyWorldMapModule.CloseMiniMap()},\n             // 指引\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.H}, ModuleName = ProxyGameGuideModule.NAME, OnOpened = () => ProxyGameGuideModule.Open(), OnClosed = () => ProxyGameGuideModule.Close()},\n             // 日程\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.C}, ModuleName = ProxySchedulePushModule.NAME, OnOpened = () => ProxySchedulePushModule.Open(), OnClosed = () => ProxySchedulePushModule.Close()},\n             // 挂机\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.G}, ModuleName = ProxyAutoFramModule.NAME, OnOpened = () => ProxyAutoFramModule.Open(), OnClosed = () => ProxyAutoFramModule.Close()},\n             // 排行版\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.R}, ModuleName = ProxyRankingModule.NAME, OnOpened = () => ProxyRankingModule.Open(), OnClosed = () => ProxyRankingModule.Close()},\n             // 交易\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.S}, ModuleName = ProxyTradeModule.NAME_TTADEBASEVIEW_PATH, OnOpened = () => ProxyTradeModule.Open(), OnClosed = () => ProxyTradeModule.Close()},\n             // 商城\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.A}, ModuleName = ProxyShopModule.NAME, OnOpened = () => ProxyShopModule.OpenMallShopping(), OnClosed = () => ProxyShopModule.Close()},\n             // 好友\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.F}, ModuleName = ProxyFriendModule.NAME, OnOpened = () => ProxyFriendModule.Open(), OnClosed = () => ProxyFriendModule.Close()},\n             // 聊天\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.X}, ModuleName = ProxyChatModule.NAME, OnOpened = () => ProxyChatModule.Open(), OnClosed = () => ProxyChatModule.Close()},\n             // 宠物\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.Q}, ModuleName = ProxyPetPropertyModule.PETPROPERTY_MAINVIEW, OnOpened = () => ProxyPetPropertyModule.Open(), OnClosed = () => ProxyPetPropertyModule.Close()},\n             // 人物\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.W}, ModuleName = ProxyPlayerPropertyModule.BASEINFO_VIEW, OnOpened = () => ProxyPlayerPropertyModule.Open(), OnClosed = () => ProxyPlayerPropertyModule.Close()},\n             // 任务\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.Y}, ModuleName = ProxyMissionModule.NAME_MISSION_PATH, OnOpened = () => ProxyMissionModule.Open(), OnClosed = () => ProxyMissionModule.Close()},\n             // 技能\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.T}, ModuleName = ProxySkillModule.NAME, OnOpened = () => ProxySkillModule.Open(), OnClosed = () => ProxySkillModule.Close()},\n             // 包裹\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.E}, ModuleName = ProxyBackpackModule.NAME, OnOpened = () => ProxyBackpackModule.Open(), OnClosed = () => ProxyBackpackModule.Close()},\n             // 打造\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.V}, ModuleName = ProxyEquipmentOptModule.NAME, OnOpened = () => ProxyEquipmentOptModule.Open(), OnClosed = () => ProxyEquipmentOptModule.Close()},\n             // 系统\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.J}, ModuleName = ProxySystemSettingModule.NAME_SystemSettingView, OnOpened = () => ProxySystemSettingModule.Open(), OnClosed = () => ProxySystemSettingModule.Close()},\n             // 帮派\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.B}, ModuleName = ProxyGuildModule.NAME_GuildInfoList, OnOpened = () => ProxyGuildModule.OpenGuildInfoList(), OnClosed = () => ProxyGuildModule.CloseGuildInfoList()},\n            // 伙伴\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.D}, ModuleName = ProxyCrewModule.MAIN_VIEW, OnOpened = () => ProxyCrewModule.Open(), OnClosed = () => ProxyCrewModule.Close()},         \n             // 队伍\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.Z}, ModuleName = ProxyTeamModule.MAIN_VIEW, OnOpened = () => ProxyTeamModule.Open(), OnClosed = () => ProxyTeamModule.Close()},\n             // 奖励\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.N}, ModuleName = ProxyRewardModule.PATH_NAME, OnOpened = () => ProxyRewardModule.Open(), OnClosed = () => ProxyRewardModule.Close()},\n             // 精简模式\n             new OpenUIModule() {HotKeyList = new []{KeyCode.LeftAlt, KeyCode.P}, ModuleName = ProxyMainUIModule.MAINUI_VIEW, OnOpened = null, OnClosed = () =>{ProxyMainUIModule.TogleDisplayModel();}},\n        };\n\n        BattleActionList = BattleController.GetBattleHotKeyList();\n            ");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(HotKeyManager);
var IconConfigManager = {
    fullname: "IconConfigManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            IconConfigManager._atlasDic = null;
            IconConfigManager.IgnoreAtlasPrefixs = (function (){
                var $v15 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v15.Add("OtherIconAtlas");
                return $v15;
            }).call(this);
        },
        Setup: function (onFinish){
            IconConfigManager._atlasDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig("IconAtlasConfig", function (asset){
                var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                if (UnityEngine.Object.op_Equality(textAsset, null)){
                    UnityEngine.Debug.LogError$$Object("Load AtlasConfig failed");
                    if (onFinish != null)
                        onFinish();
                    return;
                }
                var iconAtlasMap = JsHelper.ToObject(IconAtlasMap.ctor, textAsset.get_text());
                if (iconAtlasMap == null || iconAtlasMap.map.get_Count() == 0){
                    UnityEngine.Debug.LogError$$Object("IconAtlasMap is null");
                    if (onFinish != null)
                        onFinish();
                    return;
                }
                var $it47 = iconAtlasMap.map.GetEnumerator();
                while ($it47.MoveNext()){
                    var item = $it47.get_Current();
                    var atlasConfig = item.get_Value();
                    for (var i = 0; i < atlasConfig.IconList.get_Count(); i++){
                        var key = atlasConfig.Prefix + "_" + atlasConfig.IconList.get_Item$$Int32(i);
                        try{
                            IconConfigManager._atlasDic.Add(key, atlasConfig.Name);
                        }
                        catch($$e2){
                            GameDebuger.LogError("IconAtlas 图片名字重复: " + key, null);
                        }
                    }
                }
                if (onFinish != null)
                    onFinish();
            }, null, 100);
        },
        GetAltasName: function (spriteName, atlasPrefix){
            if (System.String.IsNullOrEmpty(spriteName) || System.String.IsNullOrEmpty(atlasPrefix)){
                return atlasPrefix;
            }
            if (IconConfigManager.IgnoreAtlasPrefixs.Contains(atlasPrefix))
                return atlasPrefix;
            var key = atlasPrefix + "_" + spriteName;
            if (IconConfigManager._atlasDic.ContainsKey(key)){
                return IconConfigManager._atlasDic.get_Item$$TKey(key);
            }
            UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object$$Object("存在图集前缀：{0}，但是不存在图片：{1}", atlasPrefix, spriteName));
            return atlasPrefix;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(IconConfigManager);
var IconAtlasMap = {
    fullname: "IconAtlasMap",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.map = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, IconAtlasConfig.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(IconAtlasMap);
var IconAtlasConfig = {
    fullname: "IconAtlasConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.IconList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.Name = null;
            this.Prefix = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(IconAtlasConfig);
var IModuleModel = {
    fullname: "IModuleModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Interface"
};
JsTypes.push(IModuleModel);
var UILayerType = {
    fullname: "UILayerType",
    staticDefinition: {
        Invalid: -100,
        JOYSTICK: -20,
        HudLayer: -10,
        BaseModule: 0,
        BarrageLayer: 3,
        SceneChange: 10,
        ChatModule: 20,
        DefaultModule: 30,
        SubModule: 40,
        ThreeModule: 50,
        FourModule: 60,
        FiveModule: 70,
        Guide: 100,
        Dialogue: 110,
        ItemTip: 120,
        FloatTip: 130,
        FadeInOut: 140,
        LockScreen: 150,
        TopDialogue: 160,
        TopLockScreen: 170,
        QRCodeScan: 180
    },
    Kind: "Enum"
};
JsTypes.push(UILayerType);
var UIMode = {
    fullname: "UIMode",
    staticDefinition: {
        NULL: 0,
        LOGIN: 1,
        GAME: 2,
        BATTLE: 3,
        STORY: 4,
        MARRY: 5
    },
    Kind: "Enum"
};
JsTypes.push(UIMode);
var LayerManager = {
    fullname: "LayerManager",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            LayerManager._root = null;
            LayerManager.stream = new UniRx.Subject$1.ctor(UIMode.ctor);
            LayerManager.BaseScreenScale = 1.333333 /* 1024f / 768f */;
            LayerManager.AdjustScale = 0.97;
            LayerManager._instance = null;
        },
        Root$$: "GameRoot",
        get_Root: function (){
            return LayerManager._root;
        },
        Stream$$: "UniRx.IObservableExpand`1[[UIMode]]",
        get_Stream: function (){
            return LayerManager.stream;
        },
        Instance$$: "LayerManager",
        get_Instance: function (){
            return LayerManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.SceneEffect = null;
            this._uiMode = UIMode.NULL;
            this.OnChangeUIMode = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        add_OnChangeUIMode: function (value){
            this.OnChangeUIMode = $CombineDelegates(this.OnChangeUIMode, value);
        },
        remove_OnChangeUIMode: function (value){
            this.OnChangeUIMode = $RemoveDelegate(this.OnChangeUIMode, value);
        },
        Awake: function (){
            LayerManager._instance = this;
            LayerManager._root = BaseView.Create$1$$Transform(GameRoot.ctor, this.get_transform());
            LayerManager._root.SceneUIHUDPanel.set_depth(this.GetOriginDepthByLayerType(UILayerType.HudLayer));
            LayerManager._root.PlotUIHUDPanel.set_depth(this.GetOriginDepthByLayerType(UILayerType.HudLayer));
            LayerManager._root.BattleUIHUDPanel.set_depth(this.GetOriginDepthByLayerType(UILayerType.HudLayer));
            LayerManager._root.FloatTipPanel.set_depth(this.GetOriginDepthByLayerType(UILayerType.FloatTip));
            LayerManager._root.TopFloatTipPanel.set_depth(this.GetOriginDepthByLayerType(UILayerType.TopDialogue));
            LayerManager._root.LockScreenPanel.set_depth(this.GetOriginDepthByLayerType(UILayerType.LockScreen));
            GameObjectExt.GetMissingComponent$1(CameraController.ctor, LayerManager._root.SceneCameraTrans.get_parent().get_gameObject());
        },
        Start: function (){
            LayerManager._root.SceneHudTextPanel.startingRenderQueue = 2455;
            LayerManager._root.PlotHudTextPanel.startingRenderQueue = 2455;
            LayerManager.stream.set_LastValue(UIMode.NULL);
        },
        CurUIMode$$: "UIMode",
        get_CurUIMode: function (){
            return this._uiMode;
        },
        set_CurUIMode: function (value){
            this._uiMode = value;
            LayerManager.stream.OnNext(this._uiMode);
        },
        SwitchLayerMode: function (mode){
            if (this.get_CurUIMode() == mode){
                return;
            }
            GameDebuger.TODO("if (MainUIViewController.Instance != null) {\n            MainUIViewController.Instance.ChangeMode (CurUIMode);\n        }");
            CameraController.Instance.ChangeMode(mode);
            this.AdjustCameraPosition(mode == UIMode.BATTLE);
            GameDebuger.TODO("if (mode == UIMode.BATTLE && FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_Barrage, false))\n            ProxyManager.Barrage.OpenBarrageLayer();\n        else\n        {\n            ProxyManager.Barrage.CloseBarraylayer();\n            ProxyManager.Barrage.CloseChat();\n        }");
            LayerManager._root.BattleLayer.SetActive(mode == UIMode.BATTLE && BattleManager.NeedBattleMap);
            LayerManager._root.SceneLayer.SetActive(mode != UIMode.BATTLE || !BattleManager.NeedBattleMap);
            LayerManager._root.BattleActors.SetActive(mode == UIMode.BATTLE);
            LayerManager._root.WorldActors.SetActive(mode == UIMode.GAME || mode == UIMode.MARRY);
            LayerManager._root.StoryActors.SetActive(mode == UIMode.STORY);
            LayerManager._root.BattleCamera.set_enabled((mode == UIMode.BATTLE));
            if (UnityEngine.Object.op_Equality(LayerManager._root.BattleBgTexture.get_mainTexture(), null)){
                LayerManager._root.BattleBgTexture.set_mainTexture(UnityEngine.Resources.Load$1$$String(UnityEngine.Texture.ctor, "Textures/battleLogo"));
            }
            LayerManager._root.BattleBgTexture.get_cachedGameObject().SetActive(mode == UIMode.BATTLE && !BattleManager.NeedBattleMap);
            LayerManager._root.BattleHudTextPanel.get_cachedGameObject().SetActive(mode == UIMode.BATTLE);
            LayerManager._root.BattleUIHUDPanel.get_cachedGameObject().SetActive(mode == UIMode.BATTLE);
            if (mode == UIMode.GAME){
                LayerManager._root.SceneHudTextPanel.get_cachedGameObject().SetActive(true);
                LayerManager._root.SceneUIHUDPanel.get_cachedGameObject().SetActive(true);
            }
            else if (mode == UIMode.MARRY){
                LayerManager._root.SceneHudTextPanel.get_cachedGameObject().SetActive(false);
                LayerManager._root.SceneUIHUDPanel.get_cachedGameObject().SetActive(false);
            }
            else {
                LayerManager._root.SceneHudTextPanel.get_cachedGameObject().SetActive(false);
                LayerManager._root.SceneUIHUDPanel.get_cachedGameObject().SetActive(false);
            }
            LayerManager._root.PlotHudTextPanel.get_cachedGameObject().SetActive(mode == UIMode.STORY || mode == UIMode.MARRY);
            LayerManager._root.PlotUIHUDPanel.get_cachedGameObject().SetActive(mode == UIMode.STORY || mode == UIMode.MARRY);
            if (mode == UIMode.BATTLE && !BattleManager.NeedBattleMap){
                LayerManager._root.EffectsAnchor.set_layer(UnityEngine.LayerMask.NameToLayer("BattleActor" /* GameTag.Tag_BattleActor */));
            }
            else {
                LayerManager._root.EffectsAnchor.set_layer(UnityEngine.LayerMask.NameToLayer("Default" /* GameTag.Tag_Default */));
            }
            if (mode == UIMode.GAME){
                TipManager.CheckDelayShow();
                ModelManager.get_Player().CheckDelayShow();
                GameDebuger.TODO("ScreenFixedTipManager.Instance.CheckDelayShow();\n            ModelManager.Pet.CheckDelayShow ();\n            ModelManager.MissionView.CheckRefreshMissionPanel();\n            ModelManager.Achievement.CheckDelayShow();");
            }
            else if (mode == UIMode.STORY){
                GameDebuger.TODO("ModelManager.MissionView.CheckRefreshMissionPanel(false);");
            }
            if (this.OnChangeUIMode != null)
                this.OnChangeUIMode(mode);
            this.set_CurUIMode(mode);
        },
        AdjustCameraPosition: function (battleMode){
            if (battleMode){
                var scaleFactor = (UnityEngine.Screen.get_width() / UnityEngine.Screen.get_height()) / 1.333333 /* BaseScreenScale */;
                scaleFactor *= 0.97 /* AdjustScale */;
                LayerManager._root.BattleCamera.get_transform().set_localPosition(CameraConst.BattleCameraLocalPosition);
                LayerManager._root.BattleCamera.get_transform().set_localEulerAngles(CameraConst.BattleCameraLocalEulerAngles);
                LayerManager._root.BattleCamera.set_fieldOfView(CameraConst.BattleCameraFieldOfView);
                LayerManager._root.BattleCamera.set_orthographicSize(CameraConst.BattleCameraOrthographicSize / scaleFactor);
                LayerManager._root.BattleCamera.set_orthographic(!BattleManager.NeedBattleMap);
                if (BattleManager.NeedBattleMap){
                    LayerManager._root.SceneCameraTrans.set_localPosition(CameraConst.BattleCameraLocalPosition);
                    LayerManager._root.SceneCameraTrans.set_localEulerAngles(CameraConst.BattleCameraLocalEulerAngles);
                    LayerManager._root.SceneCamera.set_fieldOfView(CameraConst.BattleCameraFieldOfView);
                }
            }
            else {
                LayerManager._root.SceneCamera.set_fieldOfView(CameraConst.WorldCameraFieldOfView);
                LayerManager._root.BattleCamera.set_fieldOfView(CameraConst.WorldCameraFieldOfView);
            }
        },
        LockUICamera: function (isLock){
            if (LayerManager._root != null){
                LayerManager._root.UICamera.set_enabled(!isLock);
            }
        },
        GetOriginDepthByLayerType: function (type){
            return type * 10;
        },
        SetUIModuleRootActive: function (b){
            if (LayerManager._root != null){
                LayerManager._root.UIModuleRoot.SetActive(b);
            }
        }
    }
};
JsTypes.push(LayerManager);
var GameTag = {
    fullname: "GameTag",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameTag.Tag_Untagged = "Untagged";
            GameTag.Tag_WorldActor = "WorldActor";
            GameTag.Tag_BattleActor = "BattleActor";
            GameTag.Tag_Terrain = "Terrain";
            GameTag.Tag_UI = "UI";
            GameTag.Tag_Npc = "Npc";
            GameTag.Tag_Teleport = "Teleport";
            GameTag.Tag_Player = "Player";
            GameTag.Tag_Default = "Default";
            GameTag.Tag_SceneEffect = "SceneEffect";
            GameTag.Tag_UnitEffect = "UnitEffect";
            GameTag.Tag_DefaultOrnament = "DefaultOrnament";
            GameTag.Tag_NewOrnament = "NewOrnament";
            GameTag.Tag_DreamlandNpc = "DreamlandNpc";
            GameTag.Tag_Building = "Building";
            GameTag.Tag_GridMapBuild = "GridMapBuild";
            GameTag.LayerId_GridMapBuild = UnityEngine.LayerMask.NameToLayer("GridMapBuild" /* Tag_GridMapBuild */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameTag);
var LoadingTipManager = {
    fullname: "LoadingTipManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            LoadingTipManager._tipList = null;
            LoadingTipManager._loadingTipList = null;
        },
        Setup: function (){
            AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig("LoadingTipsData", function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null)){
                    var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                    if (UnityEngine.Object.op_Inequality(textAsset, null)){
                        var hintMsgConfig = JsHelper.ToObject(LoadingTipManager.HintMsgConfig.ctor, textAsset.get_text());
                        LoadingTipManager._tipList = hintMsgConfig.list;
                        LoadingTipManager._loadingTipList = new System.Collections.Generic.List$1.ctor(LoadingTipManager.HintMsg.ctor);
                        for (var i = 0; i < LoadingTipManager._tipList.get_Count(); ++i){
                            if (LoadingTipManager._tipList.get_Item$$Int32(i).isLoadingTip == 1)
                                LoadingTipManager._loadingTipList.Add(LoadingTipManager._tipList.get_Item$$Int32(i));
                        }
                    }
                }
            }, null, 100);
        },
        GetLoadingTip: function (){
            if (LoadingTipManager._loadingTipList != null){
                var tipMsg = JsHelper.Random(LoadingTipManager._loadingTipList);
                return tipMsg != null ? tipMsg.tips : "";
            }
            else {
                return "";
            }
        },
        GetSystemChannelTip: function (playerLv){
            if (LoadingTipManager._tipList != null){
                var tmpList = new System.Collections.Generic.List$1.ctor(LoadingTipManager.HintMsg.ctor);
                for (var i = 0; i < LoadingTipManager._tipList.get_Count(); ++i){
                    if (playerLv >= LoadingTipManager._tipList.get_Item$$Int32(i).level && playerLv <= LoadingTipManager._tipList.get_Item$$Int32(i).endLevel)
                        tmpList.Add(LoadingTipManager._tipList.get_Item$$Int32(i));
                }
                var tipMsg = JsHelper.Random(tmpList);
                return tipMsg != null ? tipMsg.tips : "";
            }
            else {
                return "";
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(LoadingTipManager);
var LoginManager = {
    fullname: "LoginManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            LoginManager._instance = new LoginManager.ctor();
            LoginManager.ERROR_time_out = "链接超时";
            LoginManager.ERROR_socket_error = "网络错误";
            LoginManager.ERROR_socket_close = "网络已断开";
            LoginManager.ERROR_sid_error = "用户账号错误";
            LoginManager.ERROR_user_invalid = "用户无效";
            LoginManager.LeaveState = 0;
            LoginManager.CloseState = 0;
            LoginManager.CanLoginWaitTime = 600;
        },
        Instance$$: "LoginManager",
        get_Instance: function (){
            return LoginManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._accountPlayerDto = null;
            this.PayExtInfo = null;
            this._afterLogin = false;
            this._keepSocket = false;
            this._playerDto = null;
            this._reLogin = false;
            this._serverInfo = null;
            this._requestingDataSet = new System.Collections.Generic.HashSet$1.ctor(System.String.ctor);
            this._queueWindowCon = null;
            this.OnLoginMessage = null;
            this.OnLoginProcess = null;
            this.OnReloginSuccess = null;
            this._Token = null;
            this._LoginId = null;
            this._HaState = 0;
            System.Object.ctor.call(this);
            this._keepSocket = true;
        },
        Token$$: "System.String",
        get_Token: function (){
            return this._Token;
        },
        set_Token: function (value){
            this._Token = value;
        },
        LoginId$$: "System.String",
        get_LoginId: function (){
            return this._LoginId;
        },
        set_LoginId: function (value){
            this._LoginId = value;
        },
        HaState$$: "System.UInt32",
        get_HaState: function (){
            return this._HaState;
        },
        set_HaState: function (value){
            this._HaState = value;
        },
        KeepSocket$$: "System.Boolean",
        get_KeepSocket: function (){
            return this._keepSocket;
        },
        add_OnLoginMessage: function (value){
            this.OnLoginMessage = $CombineDelegates(this.OnLoginMessage, value);
        },
        remove_OnLoginMessage: function (value){
            this.OnLoginMessage = $RemoveDelegate(this.OnLoginMessage, value);
        },
        add_OnLoginProcess: function (value){
            this.OnLoginProcess = $CombineDelegates(this.OnLoginProcess, value);
        },
        remove_OnLoginProcess: function (value){
            this.OnLoginProcess = $RemoveDelegate(this.OnLoginProcess, value);
        },
        add_OnReloginSuccess: function (value){
            this.OnReloginSuccess = $CombineDelegates(this.OnReloginSuccess, value);
        },
        remove_OnReloginSuccess: function (value){
            this.OnReloginSuccess = $RemoveDelegate(this.OnReloginSuccess, value);
        },
        start: function (token, serverInfo, accountPlayerDto){
            this._reLogin = false;
            this.set_HaState(HaStage.CONNECTED);
            this._serverInfo = serverInfo;
            this._accountPlayerDto = accountPlayerDto;
            this._playerDto = null;
            this._afterLogin = false;
            SPSdkManager.get_Instance().add_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().add_OnLogoutNotify($CreateDelegate(this, this.OnLogout));
            this.set_Token(token);
            if (GameSetting.get_GMMode()){
                if (GameDebuger.Debug_PlayerId != 0){
                    this._accountPlayerDto = new AccountPlayerDto.ctor();
                    this._accountPlayerDto.nickname = GameDebuger.Debug_PlayerId.toString();
                    this._accountPlayerDto.id = GameDebuger.Debug_PlayerId;
                    this._accountPlayerDto.gameServerId = 0;
                }
            }
            if (!DataManager.get_AllDataLoadFinish()){
                this.UpdateStaticData();
            }
            else {
                this.DataLoadingMsgProcess(1);
                this.ConnectSocket();
            }
        },
        ConnectSocket: function (){
            ProxyLoginModule.Show();
            ServiceRequestActionMgr.Setup();
            SocketManager.get_Instance().Setup();
            SocketManager.get_Instance().add_OnHAConnected($CreateDelegate(this, this.HandleOnHAConnected));
            SocketManager.get_Instance().add_OnHaError($CreateDelegate(this, this.HandleOnHaError));
            SocketManager.get_Instance().add_OnHaCloseed($CreateDelegate(this, this.HandleOnHaCloseed));
            SocketManager.get_Instance().add_OnStateEvent($CreateDelegate(this, this.HandleOnStateEvent));
            GameDebuger.Log("Login With " + this.get_Token() + " At " + this._serverInfo.host + ":" + this._serverInfo.port + " accessId=" + this._serverInfo.serviceId + " gameServerId=" + this._serverInfo.serverId, null);
            this.PrintLog("连接服务器...");
            TalkingDataHelper.OnEventSetp$$String("GameLogin/ConnectSocket");
            this.Connect();
        },
        HandleOnStateEvent: function (state){
            this.set_HaState(state);
            if (this.get_HaState() == HaStage.LOGINED && this._playerDto != null && DataManager.get_AllDataLoadFinish()){
                this.DoLogin(this._playerDto);
            }
        },
        HandleOnHAConnected: function (){
            GameDebuger.Log("OnHAConnected", null);
            TalkingDataHelper.OnEventSetp$$String("GameLogin/HandleOnHAConnected");
            this.ShowMessageBox("账号验证中，请稍候...");
            if (this._reLogin){
                this._playerDto = null;
            }
            this.OnRequestTokenCallback(this.get_Token(), "");
            ExitGameScript.CheckConnected = true;
            ExitGameScript.NeedReturnToLogin = false;
            ExitGameScript.WaitForReConnect = false;
        },
        HandleOnHaError: function (msg){
            this.Destroy();
            LayerManager.get_Instance().LockUICamera(false);
            ProxyWindowModule.OpenSimpleMessageWindow(msg, $CreateAnonymousDelegate(this, function (){
                this.GotoLoginScene();
            }), 3, null, UILayerType.TopDialogue);
            this.ShowMessageBox(msg);
        },
        HandleOnHaCloseed: function (status){
            LayerManager.get_Instance().LockUICamera(false);
            GameCheatManager.get_Instance().Dispose();
            if (LayerManager.get_Instance().get_CurUIMode() == UIMode.NULL){
                ExitGameScript.OpenReloginTipWindow(System.String.Format$$String$$Object("网络中断, 请重新进入游戏[{0}]", status), false, false);
            }
            else {
                ExitGameScript.CheckConnected = true;
            }
        },
        Connect: function (){
            SocketManager.get_Instance().Connect(this._serverInfo);
        },
        OnRequestTokenCallback: function (token, errorMsg){
            this.set_Token(token);
            if (this.get_Token() == null){
                this.ShowMessageBox("账号验证失败:" + errorMsg);
                LayerManager.get_Instance().LockUICamera(false);
                ProxyWindowModule.OpenSimpleMessageWindow("账号验证失败:" + errorMsg, $CreateAnonymousDelegate(this, function (){
                    this.GotoLoginScene();
                }), 3, null, UILayerType.TopDialogue);
            }
            else {
                if (ProxyRoleCreateModule.IsOpen()){
                    LayerManager.get_Instance().LockUICamera(false);
                    this.Login();
                }
                else {
                    if (this._accountPlayerDto == null){
                        RequestLoadingTip.Reset();
                        ProxyLoginModule.Hide();
                        ProxyRoleCreateModule.Open(this._serverInfo, $CreateDelegate(this, this.CreatePlayerSuccess));
                    }
                    else {
                        this.Login();
                    }
                }
            }
        },
        SupportRelogin: function (){
            return this._serverInfo != null && SocketManager.get_Instance().IsSetup();
        },
        ReConnect: function (){
            if (this._serverInfo != null){
                this._reLogin = true;
                this._afterLogin = false;
                LayerManager.get_Instance().LockUICamera(true);
                this.Connect();
            }
        },
        Login: function (){
            if (this.get_Token() != null){
                if (this.get_HaState() == HaStage.LOGINED && this._playerDto != null){
                    this.DoLogin(this._playerDto);
                }
                else {
                    this.PrintLog("账号登录...");
                    var ip = HaApplicationContext.getConfiguration().getLocalIp().trim();
                    GameDebuger.Log("LoginFromIp = " + ip, null);
                    if (this._accountPlayerDto != null){
                        TalkingDataHelper.OnEventSetp$$String("GameLogin/ReqeustLogin");
                        ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Login_Player(this.get_Token(), ip, this._accountPlayerDto.id, BaoyugameSdk.getUUID()), "账号登录", $CreateDelegate(this, this.OnLogin), $CreateDelegate(this, this.OnNotLogin));
                    }
                    else {
                        if (this._reLogin){
                            RequestLoadingTip.Reset();
                            this.CallBackReLogin();
                        }
                    }
                }
            }
        },
        CreatePlayerSuccess: function (e){
            ProxyLoginModule.Show();
            this.OnLogin(e);
        },
        OnNotLogin: function (e){
            GameDebuger.Log("OnNotLogin: ErrorResponse Message:" + e.message, null);
            this.PrintLog("登录失败！");
            if (e.id == 19){
                ServiceProviderManager.RequestSsoAccountLogin(ServerManager.get_Instance().sid, GameSetting.Channel, GameSetting.SubChannel, GameSetting.LoginWay, GameSetting.AppId, GameSetting.get_PlatformTypeId(), BaoyugameSdk.getUUID(), GameSetting.Channel, GameSetting.BundleId, $CreateAnonymousDelegate(this, function (response){
                    if (response != null && response.code == 0){
                        this.set_Token(response.token);
                        this.Login();
                    }
                    else {
                        var msg = "服务器请求失败，请检查网络";
                        if (response != null){
                            msg = response.msg;
                        }
                        ExitGameScript.OpenReloginTipWindow(msg, true, false);
                    }
                }));
            }
            else if (e.id == 28){
                ExitGameScript.OpenReloginTipWindow(e.message, false, false);
            }
            else {
                ExitGameScript.OpenReloginTipWindow(e.message, false, false);
            }
        },
        OnLogin: function (e){
            if (Is(e, AppDto.QueueDto.ctor)){
                var QueueDto = Cast(e, AppDto.QueueDto.ctor);
                if (QueueDto.index < 0){
                    if (QueueDto.playerDto != null){
                        SystemTimeManager.get_Instance().Setup(QueueDto.playerDto.gameServerTime);
                        this._accountPlayerDto = ServerManager.get_Instance().AddAccountPlayer$$PlayerDto(QueueDto.playerDto);
                        if (this.get_HaState() == HaStage.LOGINED){
                            GameDebuger.Log("登录成功", null);
                            if (DataManager.get_AllDataLoadFinish()){
                                this.DoLogin(QueueDto.playerDto);
                            }
                            else {
                                GameDebuger.Log("等待allDataLoadFinish", null);
                                this._playerDto = QueueDto.playerDto;
                            }
                        }
                        else {
                            GameDebuger.Log("等待HaStage.LOGINED", null);
                            this._playerDto = QueueDto.playerDto;
                        }
                        return;
                    }
                }
                else {
                    SystemTimeManager.get_Instance().Setup(QueueDto.playerDto.gameServerTime);
                    this._accountPlayerDto = ServerManager.get_Instance().AddAccountPlayer$$PlayerDto(QueueDto.playerDto);
                }
                GameDebuger.Log("登陆排队", null);
                this.LoginQueue1(Cast(e, AppDto.QueueDto.ctor));
            }
            else if (Is(e, AppDto.PlayerDto.ctor)){
                var playerDto = As(e, AppDto.PlayerDto.ctor);
                SystemTimeManager.get_Instance().Setup(playerDto.gameServerTime);
                this._accountPlayerDto = ServerManager.get_Instance().AddAccountPlayer$$PlayerDto(playerDto);
                if (this.get_HaState() == HaStage.LOGINED){
                    GameDebuger.Log("登录成功", null);
                    if (DataManager.get_AllDataLoadFinish()){
                        this.DoLogin(playerDto);
                    }
                    else {
                        GameDebuger.Log("等待allDataLoadFinish", null);
                        this._playerDto = playerDto;
                    }
                }
                else {
                    GameDebuger.Log("等待HaStage.LOGINED", null);
                    this._playerDto = playerDto;
                }
            }
        },
        OnQueueLogin: function (playerDto){
            SystemTimeManager.get_Instance().Setup(playerDto.gameServerTime);
            this._accountPlayerDto = ServerManager.get_Instance().AddAccountPlayer$$PlayerDto(playerDto);
            if (this.get_HaState() == HaStage.LOGINED){
                GameDebuger.Log("登录成功", null);
                this.DoLogin(playerDto);
            }
            else {
                GameDebuger.Log("等待HaStage.LOGINED", null);
                this._playerDto = playerDto;
            }
        },
        DoLogin: function (playerDto){
            UnityEngine.PlayerPrefs.SetString(GameSetting.get_LastRolePrefsName(), playerDto.id.toString());
            if (playerDto.sceneId == 0){
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("Error:PlayerDto.sceneId == 0,PlayerDto.sceneId will be set with default value {0}", 2010 /* BattleDemoConfigModel.DEFAULT_SCENE_ID */));
                playerDto.sceneId = 2010 /* BattleDemoConfigModel.DEFAULT_SCENE_ID */;
            }
            var serverInfo = ServerManager.get_Instance().GetServerInfo();
            var newRole = false;
            GameDebuger.TODO("if (playerDto.grade == 0 && playerDto.experienceType == PlayerDto.ExperienceTypeEnum_NoSelect)");
            if (playerDto.grade == 0){
                newRole = true;
            }
            SPSdkManager.get_Instance().SubmitRoleData(ServerManager.get_Instance().uid, newRole, playerDto.id.toString(), playerDto.name, playerDto.grade.toString(), serverInfo.serverId.toString(), serverInfo.name);
            ModelManager.get_Player().Setup(playerDto);
            if (this._afterLogin == false){
                this.AfterLogin();
            }
            PayManager.get_Instance().RestoreCompletedTransactions();
        },
        UpdateStaticData: function (){
            TalkingDataHelper.OnEventSetp$$String("GameLogin/UpdateStaticData");
            DataManager.get_Instance().UpdateStaticData($CreateDelegate(this, this.OnPreLoadDataFinish), $CreateDelegate(this, this.OnAllStaticDataFinish), $CreateDelegate(this, this.DataLoadingMessage), $CreateDelegate(this, this.DataLoadingMsgProcess));
        },
        DataLoadingMessage: function (msg){
            if (this.OnLoginMessage != null){
                this.OnLoginMessage(msg);
            }
        },
        DataLoadingMsgProcess: function (msgProcess){
            if (this.OnLoginProcess != null){
                this.OnLoginProcess(msgProcess);
            }
        },
        OnPreLoadDataFinish: function (){
            GameDebuger.Log("OnPreLoadDataFinish", null);
            if (this._accountPlayerDto == null){
                this.ConnectSocket();
            }
        },
        OnAllStaticDataFinish: function (){
            TalkingDataHelper.OnEventSetp$$String("GameLogin/GetStaticDataSuccess");
            this.DataLoadingMsgProcess(1);
            if (this._playerDto == null && this._accountPlayerDto != null){
                this.ConnectSocket();
            }
            else {
                this.Login();
            }
        },
        InitRequestDataFlag: function (){
            this._requestingDataSet.Clear();
            LayerManager.get_Instance().LockUICamera(true);
            GameDebuger.TODO("_requestingDataSet.Add(ModelManager.Guild.ToString());\n\n        _requestingDataSet.Add(ModelManager.Warehouse.ToString());\n       \n        _requestingDataSet.Add(ModelManager.Fashion.ToString());\n        _requestingDataSet.Add(ModelManager.Email.ToString());\n        _requestingDataSet.Add(ModelManager.Friend.ToString());\n        _requestingDataSet.Add(ModelManager.MissionData.ToString());\n            _requestingDataSet.Add(ModelManager.Crew.ToString());");
        },
        AfterLogin: function (){
            this.InitRequestDataFlag();
            NotifyListenerRegister.Setup();
            GameDebuger.TODO(" FunctionOpenHelper.Setup ();");
            this.PrintLog("获取角色数据...");
            TalkingDataHelper.OnEventSetp$$String("GameLogin/RequestAfterLogin");
            WorldManager.IsWaitingEnter = true;
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Player_AfterLogin(BaoyugameSdk.getUUID()), "Player_AfterLogin", $CreateAnonymousDelegate(this, function (e){
                ModelManager.get_Player().set_IsAutoFram(PlayerGameState.IsAutoFram);
                this._afterLogin = true;
                var afterLoginDto = As(e, AppDto.AfterLoginDto.ctor);
                GameDebuger.TODO("暂时请求不了数据，故而直接进入下一步");
                this.RemoveRequestDataFlag(System.String.Empty);
                var t = TeamDataMgr.get_Instance();
                ModelManager.get_Player().SetupFromAfterLogin(afterLoginDto);
                ModelManager.get_BattleConfig().Setup();
                EmailModel.instance.Setup();
                GameDebuger.TODO("NpcModelModule.Instance.SetUpNpcModelModule ();\n            //  场景怪物战斗模块数据处理\n            SceneMonsterModel.Instance.SetUp (afterLoginDto.starRewardCount, afterLoginDto.worldBossRewardCount);\n TeamModel.Instance.Setup();\n\n            /** 当天已卖出宠物次数 */\n            TradePetModel.Instance.DayCanSellAmount = afterLoginDto.dailyTotalSellPet;\n\n            /** 门派技能信息 */\n            FactionSkillModel.Instance.Setup (afterLoginDto.factionSkillsInfo);\n\n            /** 辅助技能信息 */\n            AssistSkillModel.Instance.Setup (afterLoginDto.assistSkillInfo);\n\n            /** 剧情技能 */\n            ScenarioSkillModel.Instance.Setup (afterLoginDto.scenarioSkillInfo);\n\n            /** 修炼技能*/\n            SpellModel.Instance.Setup (afterLoginDto.spellsInfo);\n\n            /** 宠物信息 */\n            PetModel.Instance.Setup (afterLoginDto.petCharactorDtos, afterLoginDto.companyPetVacancy, afterLoginDto.petBlessValues);\n\n            /** 玩家状态栏信息 */\n            PlayerBuffModel.Instance.Setup (afterLoginDto.stateBarDtos);\n\n            /** 帮派信息 */\n            GuildModel.Instance.UpDateGuildInfo ();");
                GameDataManager.get_Instance().Setup($CreateAnonymousDelegate(this, function (){
                    BackPackDataMgr.BackPackNetMsg.StartAsynInit(null, null);
                }));
                GameDebuger.TODO("DailyPushModel.Instance.SetHusbandAndFriendPushState(afterLoginDto.state));\n\n            // 获取邮件\n            /** 玩家已赠送数量-价值信息 */\n            EmailModel.Instance.Setup (afterLoginDto.giftDto);\n            //初始化聊天系统数据\n            ChatModel.Instance.Setup ();\n            //初始化好友聊天记录\n            FriendModel.Instance.Setup ();\n\n            //登陆播放剧情\n            GamePlotManager.Instance.Setup ();\n            GamePlotManager.Instance.LastPlotId = afterLoginDto.plotId;\n\n            //  摆摊系统红点\n            TradeDataModel.Instance.SetUpMarketRemind ();\n\n            //  拍卖系统红点\n            TradeDataModel.Instance.SetUpAuctionRemind ();\n\n            //拍卖行选择出售物品时，是否显示提示框\n            TradeDataModel.Instance.AuctionSellConfirmWin();\n\n            //  奖励系统相关\n            RewardModel.Instance.Setup (afterLoginDto);\n\n            //  获取任务数据( 外联海上贸易 \\ 外联帮派任务 \\ 外联封妖日常 \\ 内联全部任务 )\n            MissionDataModel.Instance.EnterSilkMission ();\n            MissionDataModel.Instance.GetGuildMissionFormService (true);\n            FieldMonsterModel.Instance.SetUp ();\n            MissionDataModel.Instance.EnterMission ();\n            MissionDataModel.Instance.SetUp(afterLoginDto);\n            TrialModel.Instance.EnterTrialData ();            \n\n\n\n            CrewModel.Instance.Setup ();\n            //银宝箱\n            ProxyTreasureMapModule.openPreciousBoxCount = afterLoginDto.openPreciousBox;\n            //摇钱树\n            DailyPushModel.Instance.MoneyTreeDto = afterLoginDto.moneyTreeDto;\n\n            InstanceZonesModule.Instance.SetUp ();\n\n            //  比武\\争霸\n            TournamentModel.Instance.SetUp ();\n            ChiefPlayModel.Instance.SetUp ();\n            HeroTrialModel.Instance.SetUp ();\n\n            //  幻境\n            DreamlandDataModel.Instance.SetUp ();\n\n            //开服活动通知\n            NewestActivityModel.Instance.Setup (afterLoginDto.gameActivityOpenNotifyList);\n\n            //  系统设置\n            SystemDataModel.Instance.SetUpOnLogined ();\n            // 结婚信息\n            MarryModel.Instance.Setup ();\n\n            //成长指引\n            GrowUpGuideModel.Instance.SetUp (afterLoginDto.growthMissions);\n            GrowUpGuideModel.Instance.InitOpenIds ();\n\n            // 红包数据\n            RedPacketModel.Instance.UpdateUnOpenedRedPacketList (afterLoginDto.packIds);\n\n            //  帮派竞赛\n            GuildCompetitionDataModel.Instance.SetUp ();\n\n            //  大闹天宫\n            CampWarDataModel.Instance.SetUp ();\n\n            //  护送国宝\n            EscortModel.Instance.SetUp ();\n\n            // 世界Boss\n            SnowWorldBossModel.Instance.SetUp();\n\n            //选秀大赛\n            LookShowStageModel.Instance.Setup();\n            TalentShowModel.Instance.Setup(afterLoginDto.talentShowDto);\n\n            //  月光宝盒\n            MoollightBoxModel.Instance.Setup ();\n\n            // 师徒系统（玩家师徒状态）\n            TeacherPupilModel.Instance.Setup ();\n\n            ReportModel.Instance.SetSelfReportTimes (afterLoginDto.reportCount);\n\n\n            TargetGuideModel.Instance.Setup (afterLoginDto);\n\n            //坐骑系统\n            MountModel.Instance.Setup ();\n\n            // 帮派百草谷\n            GuildHundredGrassValleyModel.Instance.Setup();\n\n            // 迷宫\n            ArtifactMazeModel.Instance.Setup();\n\n            //暂时不需要\n            //          ConsignmentModel.Instance.Setup (afterLoginDto);\n\n            CSPKModel.Instance.Setup(afterLoginDto);\n\n            PlayerModel.Instance.CheckOutSatiationState ();\n\n            //大唐无双\n            TangModel.Instance.SetUp();\n\n            //  决斗\n            DuelDataModel.Instance.SetUp();\n\n            ChildrenModel.Instance.Setup(afterLoginDto);\n            //十二元辰四方星官\n            TwelveFourSceneBattleModle.ins.Setup(afterLoginDto);            \n");
            }), null);
        },
        RemoveRequestDataFlag: function (key){
            if (!System.String.IsNullOrEmpty(key)){
                if (null != this._requestingDataSet && this._requestingDataSet.Contains(key))
                    this._requestingDataSet.Remove(key);
            }
            GameDebuger.Log("_requestingDataSet.Count = " + this._requestingDataSet.get_Count() + " key=" + key, null);
            if (this._requestingDataSet.get_Count() == 0){
                LayerManager.get_Instance().LockUICamera(false);
                GameDebuger.Log("登录数据加载完成", null);
                this.ReadyMapRes();
            }
        },
        ReadyMapRes: function (){
            this.PrintLog("载入场景资源...");
            if (this._reLogin && !WorldManager.get_Instance().IsDestroy()){
                this.OnLoadMapFinish();
            }
            else {
                var sceneId = ModelManager.get_Player().GetPlayer().sceneId;
                WorldManager.get_Instance().SetOldSceneId(sceneId);
                var sceneMap = DataCache.getDtoByCls$1(AppDto.SceneMap.ctor, sceneId);
                if (sceneMap != null){
                    WorldManager.get_Instance().FirstEnterSceneRequest($CreateAnonymousDelegate(this, function (){
                        WorldMapLoader.get_Instance().LoadWorldMap(sceneMap.resId, $CreateDelegate(this, this.OnLoadMapFinish), $CreateDelegate(this, this.OnLoadLevelProgress));
                    }));
                }
                else {
                    this.OnLoadMapFinish();
                }
            }
        },
        OnLoadMapFinish: function (){
            if (this._reLogin){
                this.CallBackReLogin();
                RequestLoadingTip.Reset();
            }
            if (WorldManager.FirstEnter){
                if (this._reLogin){
                    if (ProxyLoginModule.IsOpen()){
                        ScreenMaskManager.FadeInOut($CreateAnonymousDelegate(this, function (){
                            this.DelayExitLoginScene();
                        }), 0.5, 0.4);
                    }
                    else {
                        this.DelayExitLoginScene();
                    }
                }
                else {
                    ScreenMaskManager.FadeInOut($CreateAnonymousDelegate(this, function (){
                        this.DelayExitLoginScene();
                    }), 0.5, 0.4);
                }
            }
            else {
                this.DelayExitLoginScene();
            }
        },
        DelayExitLoginScene: function (){
            JSTimer.get_Instance().SetupCoolDown("DelayExitLoginScene", 0.1, null, $CreateAnonymousDelegate(this, function (){
                this.ExitLoginScene();
            }), 0.1, false);
        },
        ExitLoginScene: function (){
            TalkingDataHelper.OnEventSetp$$String("GameLogin/EnterGame");
            GameDebuger.Log("ExitLoginScene", null);
            ProxyLoginModule.Close();
            JoystickModule.get_Instance().Setup();
            GameDebuger.TODO("NewBieGuideManager.Instance.Setup ();");
            ProxyMainUIModule.Open();
            WorldManager.IsWaitingEnter = false;
            GameDebuger.TODO("if (ModelManager.Player.GetPlayer().curGameVideo != null)\n        {\n            GameDebuger.Log(\'ExitLoginScene curGameVideo\');\n            BattleManager.Instance.PlayBattle(ModelManager.Player.GetPlayer().curGameVideo, 0, true);\n        }\n        else");
            if (!GamePlot.GamePlotManager.get_Instance().HasLastPlot()){
                LayerManager.get_Instance().SwitchLayerMode(UIMode.GAME);
                if (!this._reLogin){
                    GameDebuger.Log(" ModelManager.MissionView.CheckRefreshMissionPanel(true, true, true);", null);
                }
                GameDebuger.Log("ExitLoginScene EnterScene", null);
                WorldManager.get_Instance().FirstEnterScene();
            }
            else {
                GameDebuger.Log("ExitLoginScene HasLastPlot", null);
                GamePlot.GamePlotManager.get_Instance().add_OnFinishPlot($CreateDelegate(this, this.OnFinishPlot));
            }
            GameDebuger.TODO("var reserveExpDto = ModelManager.Player.ReserveExpDto;\n\t\tif (reserveExpDto != null) {\n\t\t\tstring reserveExpTip = string.Format (\'距上次离线时间{0}分钟，共获得{1}储备经验。详情打开人物属性界面点击经验条查询\', reserveExpDto.minutes,\n\t\t\t\t                                reserveExpDto.value);\n\t\t\tTipManager.AddTip (reserveExpTip);\n\t\t\tModelManager.Player.ReserveExpDto = null;\n    }");
        },
        OnFinishPlot: function (){
            WorldManager.get_Instance().FirstEnterScene();
            GamePlot.GamePlotManager.get_Instance().remove_OnFinishPlot($CreateDelegate(this, this.OnFinishPlot));
        },
        OnLoadLevelProgress: function (precent){
        },
        ShowMessageBox: function (msg){
            this.PrintLog(msg);
            this._keepSocket = false;
        },
        PrintLog: function (msg){
            GameDebuger.Log(msg, null);
            if (this.OnLoginMessage != null){
                this.OnLoginMessage(msg);
            }
        },
        OnLoginSuccess: function (isGuest, sid){
            if (ServerManager.get_Instance().sid != sid){
                var bindTip = false;
                if (ServerManager.get_Instance().isGuest && !isGuest){
                    bindTip = true;
                }
                ServerManager.get_Instance().isGuest = isGuest;
                if (!System.String.IsNullOrEmpty(sid) && sid != "(null)"){
                    ServerManager.get_Instance().sid = sid;
                    ExitGameScript.get_Instance().DoReloginAccount(false);
                }
                else {
                    if (bindTip){
                        TipManager.AddTip("账号绑定成功", false, false, "");
                    }
                    ProxyWindowModule.closeSimpleWinForTop();
                }
            }
            else {
                ProxyWindowModule.closeSimpleWinForTop();
            }
        },
        OnLogout: function (success){
            if (success){
                ExitGameScript.OpenReloginTipWindow("您已经注销了账号， 请重新游戏", true, false);
            }
        },
        RemoveListener: function (){
            SocketManager.get_Instance().remove_OnHAConnected($CreateDelegate(this, this.HandleOnHAConnected));
            SocketManager.get_Instance().remove_OnHaError($CreateDelegate(this, this.HandleOnHaError));
            SocketManager.get_Instance().remove_OnHaCloseed($CreateDelegate(this, this.HandleOnHaCloseed));
            SocketManager.get_Instance().remove_OnStateEvent($CreateDelegate(this, this.HandleOnStateEvent));
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLogoutNotify($CreateDelegate(this, this.OnLogout));
            GamePlot.GamePlotManager.get_Instance().remove_OnFinishPlot($CreateDelegate(this, this.OnFinishPlot));
        },
        Destroy: function (){
            this.RemoveListener();
            this._serverInfo = null;
        },
        CloseSocket: function (){
            SocketManager.get_Instance().Close(true);
            SocketManager.get_Instance().Destroy();
        },
        CallBackReLogin: function (){
            if (this.OnReloginSuccess != null){
                this.OnReloginSuccess();
            }
        },
        GotoLoginScene: function (){
            GameDebuger.Log("GotoLoginScene!!!", null);
            ExitGameScript.CheckConnected = false;
            this.Destroy();
            this.CloseSocket();
            RequestLoadingTip.Reset();
            ProxyLoginModule.Open();
        },
        LoginQueue1: function (dto){
            var serverInfo = ServerManager.get_Instance().GetServerInfo();
            if (UnityEngine.Object.op_Equality(this._queueWindowCon, null)){
                this._queueWindowCon = ProxyWindowModule.OpenQueueWindow(serverInfo.name + " 已满", dto.index, dto.remain, UILayerType.Dialogue, null);
            }
            else {
                this._queueWindowCon.UpdateData(serverInfo.name + " 已满", dto.index, dto.remain);
            }
        },
        UpdateLoginQueueData: function (dto){
            var serverInfo = ServerManager.get_Instance().GetServerInfo();
            if (UnityEngine.Object.op_Equality(this._queueWindowCon, null)){
                this._queueWindowCon = ProxyWindowModule.OpenQueueWindow(serverInfo.name + " 已满", dto.index, dto.remain, UILayerType.Dialogue, null);
            }
            else {
                this._queueWindowCon.UpdateData(serverInfo.name + " 已满", dto.index, dto.remain);
            }
            if (dto.playerDto != null){
                this._queueWindowCon.SetCloseTime(600 /* CanLoginWaitTime */, $CreateAnonymousDelegate(this, function (){
                    this.OnQueueLogin(dto.playerDto);
                }));
            }
        }
    }
};
JsTypes.push(LoginManager);
var ModelManager = {
    fullname: "ModelManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ModelManager.mPlayer = null;
            ModelManager.mEmail = null;
            ModelManager.mBattleDemoConfig = null;
            ModelManager.mBattleDemo = null;
            ModelManager.mBattleConfig = null;
            ModelManager.m_ModuleName_ = null;
            ModelManager.mIModuleModelList = null;
        },
        IPlayer$$: "IPlayerModel",
        get_IPlayer: function (){
            return ModelManager.get_Player();
        },
        Player$$: "PlayerModel",
        get_Player: function (){
            if (null == ModelManager.mPlayer){
                ModelManager.mPlayer = new PlayerModel.ctor();
                ModelManager.AddToModelList(ModelManager.mPlayer);
            }
            return ModelManager.mPlayer;
        },
        Email$$: "EmailModel",
        get_Email: function (){
            if (null == ModelManager.mEmail){
                ModelManager.mEmail = new EmailModel.ctor();
                ModelManager.AddToModelList(ModelManager.mEmail);
            }
            return ModelManager.mEmail;
        },
        BattleDemoConfig$$: "BattleDemoConfigModel",
        get_BattleDemoConfig: function (){
            if (null == ModelManager.mBattleDemoConfig){
                ModelManager.mBattleDemoConfig = new BattleDemoConfigModel.ctor();
                ModelManager.AddToModelList(ModelManager.mBattleDemoConfig);
            }
            return ModelManager.mBattleDemoConfig;
        },
        BattleDemo$$: "BattleDemoModel",
        get_BattleDemo: function (){
            if (null == ModelManager.mBattleDemo){
                ModelManager.mBattleDemo = new BattleDemoModel.ctor();
                ModelManager.AddToModelList(ModelManager.mBattleDemo);
            }
            return ModelManager.mBattleDemo;
        },
        BattleConfig$$: "BattleConfigModel",
        get_BattleConfig: function (){
            if (null == ModelManager.mBattleConfig){
                ModelManager.mBattleConfig = new BattleConfigModel.ctor();
                ModelManager.AddToModelList(ModelManager.mBattleConfig);
            }
            return ModelManager.mBattleConfig;
        },
        _ModuleName_$$: "_ModuleName_Model",
        get__ModuleName_: function (){
            if (null == ModelManager.m_ModuleName_){
                ModelManager.m_ModuleName_ = new _ModuleName_Model.ctor();
                ModelManager.AddToModelList(ModelManager.m_ModuleName_);
            }
            return ModelManager.m_ModuleName_;
        },
        Setup: function (pAfterLoginDto){
        },
        Dispose: function (){
            if (null != ModelManager.mIModuleModelList){
                if (ModelManager.mIModuleModelList.get_Count() > 0){
                    for (var tCounter = 0; tCounter < ModelManager.mIModuleModelList.get_Count(); tCounter++){
                        try{
                            ModelManager.mIModuleModelList.get_Item$$Int32(tCounter).Dispose();
                        }
                        catch(ex){
                            GameDebuger.LogException(ex, null);
                        }
                    }
                }
            }
        },
        IModuleModelList$$: "System.Collections.Generic.List`1[[IModuleModel]]",
        get_IModuleModelList: function (){
            if (null == ModelManager.mIModuleModelList)
                ModelManager.mIModuleModelList = new System.Collections.Generic.List$1.ctor(IModuleModel.ctor);
            return ModelManager.mIModuleModelList;
        },
        AddToModelList: function (pIModuleModel){
            if (null != pIModuleModel){
                if (ModelManager.get_IModuleModelList().IndexOf$$T(pIModuleModel) == -1 /* -1 */)
                    ModelManager.get_IModuleModelList().Add(pIModuleModel);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ModelManager);
var PayManager = {
    fullname: "PayManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PayManager._instance = new PayManager.ctor();
        },
        Instance$$: "PayManager",
        get_Instance: function (){
            return PayManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._payItemDic = null;
            this.OnPayItemsLoadSuccess = null;
            System.Object.ctor.call(this);
        },
        add_OnPayItemsLoadSuccess: function (value){
            this.OnPayItemsLoadSuccess = $CombineDelegates(this.OnPayItemsLoadSuccess, value);
        },
        remove_OnPayItemsLoadSuccess: function (value){
            this.OnPayItemsLoadSuccess = $RemoveDelegate(this.OnPayItemsLoadSuccess, value);
        },
        Setup: function (){
            if (GameSetting.get_IsOriginWinPlatform()){
                this._payItemDic = null;
            }
            if (this._payItemDic == null){
                ServiceProviderManager.RequestOrderItems(GameSetting.Channel, GameSetting.BundleId, $CreateAnonymousDelegate(this, function (dto){
                    this._payItemDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, OrderItemJsonDto.ctor);
                    if (dto != null && dto.items != null){
                        for (var i = 0; i < dto.items.get_Count(); i++){
                            var item = dto.items.get_Item$$Int32(i);
                            this._payItemDic.Add(item.gameShopItemId, item);
                        }
                    }
                    if (GameSetting.Channel == AgencyPlatform.Channel_Appstore){
                        AppStoreInAppManager.Setup();
                        var ids = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                        var $it48 = this.GetPayItemDic().get_Values().GetEnumerator();
                        while ($it48.MoveNext()){
                            var itemJsonDto = $it48.get_Current();
                            ids.Add(itemJsonDto.id);
                        }
                        AppStoreInAppManager.get_Instance().Init(ids.ToArray());
                    }
                    if (this.OnPayItemsLoadSuccess != null){
                        this.OnPayItemsLoadSuccess();
                    }
                }));
            }
        },
        IsPayItemsLoaded: function (){
            return this._payItemDic != null;
        },
        GetPayItemDic: function (){
            return this._payItemDic;
        },
        GetOrderItem: function (itemId){
            var item = null;
            (function (){
                var $1 = $Ref(null, item);
                var $res = this._payItemDic.TryGetValue(itemId, $1);
                item = $1.Value;
                return $res;
            }).call(this);
            return item;
        },
        Charge: function (itemId){
            GameDebuger.TODO("\n        if (!ModelManager.RechargeReward.ChannelOpen)\n        {\n            TipManager.AddTip(\'充值失败，请联系客服人员\');\n            return;\n        }\n            ");
            var orderItem = this.GetOrderItem(itemId);
            if (orderItem == null){
                TipManager.AddTip("无此充值项", false, false, "");
                return;
            }
            if (!GameSetting.get_IsOriginWinPlatform()){
                TipManager.AddTip("编辑器运行无法充值", false, false, "");
                return;
            }
            RequestLoadingTip.Show("请求充值，请稍候", true, true, 3);
            ServiceProviderManager.RequestOrderId(GameSetting.Channel, ModelManager.get_Player().GetPlayerId().toString(), orderItem.id, 0, GameSetting.LoginWay, GameSetting.Channel, GameSetting.BundleId, $CreateAnonymousDelegate(this, function (dto){
                this.ChargeByOrderJsonDto(orderItem, 1, dto);
            }));
        },
        ChargeByOrderJsonDto: function (itemDto, quantity, orderDto){
            if (orderDto != null && orderDto.code == 0){
                if (GameSetting.Channel == AgencyPlatform.Channel_Appstore){
                    this.ChargeByIOSInAppPurchase(itemDto.id, quantity, orderDto.orderId);
                }
                else {
                    if (GameSetting.get_IsOriginWinPlatform()){
                        ProxyQRCodeModule.OpenQRCodePayView(itemDto, quantity, orderDto, UILayerType.QRCodeScan);
                    }
                    else {
                        SPSdkManager.get_Instance().DoPay(orderDto.orderId, itemDto.id, itemDto.gold + "元宝", ((itemDto.cent / 100) | 0).toString(), quantity.toString(), ServerManager.get_Instance().GetServerInfo().serverId.toString(), orderDto.extra != null ? orderDto.extra.tsiPayCburl : "", orderDto.extra != null ? orderDto.extra.vivoAccessKey : "", orderDto.extra != null ? orderDto.extra.vivoOrderNumber : "", $CreateAnonymousDelegate(this, function (success){
                            if (success){
                                TipManager.AddTip("支付完成，如充值成功请等待到账", false, false, "");
                            }
                            RequestLoadingTip.Reset();
                        }));
                    }
                }
            }
            else {
                if (orderDto != null){
                    GameDebuger.Log(orderDto.msg, null);
                    TipManager.AddTip(orderDto.msg, false, false, "");
                }
                RequestLoadingTip.Reset();
            }
        },
        ChargeByIOSInAppPurchase: function (productIdentifier, quantity, orderId){
            if (GameSetting.Channel == AgencyPlatform.Channel_Appstore){
                AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed, $CreateDelegate(this, this.onBaoyugamePurchaseSuccessed));
                AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed = $CombineDelegates(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed, $CreateDelegate(this, this.onBaoyugamePurchaseSuccessed));
                AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
                AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed = $CombineDelegates(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
                AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
                AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel = $CombineDelegates(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
                AppStoreInAppManager.get_Instance().PurchaseProduct(productIdentifier, quantity, orderId);
            }
        },
        RestoreCompletedTransactions: function (){
            if (GameSetting.Channel == AgencyPlatform.Channel_Appstore){
                AppStoreInAppManager.get_Instance().RestoreCompletedTransactions();
            }
        },
        onBaoyugamePurchaseSuccessed: function (){
            AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed, $CreateDelegate(this, this.onBaoyugamePurchaseSuccessed));
            AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
            AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
            TipManager.AddTip("支付完成，如充值成功请等待到账", false, false, "");
            RequestLoadingTip.Reset();
        },
        onBaoyugamePurchaseFailed: function (error){
            AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseSuccessed, $CreateDelegate(this, this.onBaoyugamePurchaseSuccessed));
            AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseFailed, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
            AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel = $RemoveDelegate(AppStoreInAppManager.get_Instance().onBaoyugamePurchaseCancel, $CreateDelegate(this, this.onBaoyugamePurchaseFailed));
            GameDebuger.Log(error, null);
            TipManager.AddTip(error, false, false, "");
            RequestLoadingTip.Reset();
        }
    }
};
JsTypes.push(PayManager);
var AssetPipeline$PrefabPoolConfig = {
    fullname: "AssetPipeline.PrefabPoolConfig",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AssetPipeline.PrefabPoolConfig.POOLCONFIG_FILE = "PoolConfig";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.config = null;
            this.defaultPoolOption = null;
            System.Object.ctor.call(this);
            this.config = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, AssetPipeline.PrefabPoolOption.ctor);
        },
        GetPoolOption: function (bundleName){
            if (this.config == null)
                return null;
            var poolOption;
            (function (){
                var $1 = $Ref(null, poolOption);
                var $res = this.config.TryGetValue(bundleName, $1);
                poolOption = $1.Value;
                return $res;
            }).call(this);
            if (poolOption == null){
                poolOption = this.GetDefaultOption();
            }
            return poolOption;
        },
        GetDefaultOption: function (){
            if (this.defaultPoolOption != null){
                return this.defaultPoolOption;
            }
            var value;
            if ((function (){
                var $1 = $Ref(null, value);
                var $res = this.config.TryGetValue("Default", $1);
                value = $1.Value;
                return $res;
            }).call(this) == false){
                value = new AssetPipeline.PrefabPoolOption.ctor$$Int32$$Boolean$$Int32$$Int32$$Int32$$Boolean$$Int32$$Boolean$$Boolean(1, true, 10, 30, 5, false, 100, true, true);
            }
            return this.defaultPoolOption = value;
        }
    }
};
JsTypes.push(AssetPipeline$PrefabPoolConfig);
var AssetPipeline$PrefabPoolOption = {
    fullname: "AssetPipeline.PrefabPoolOption",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.preloadAmount = 1;
            this.preloadTime = false;
            this.preloadFrames = 2;
            this.preloadDelay = 0;
            this.limitInstances = false;
            this.limitAmount = 100;
            this.limitFIFO = false;
            this.cullDespawned = false;
            this.cullAbove = 50;
            this.cullDelay = 60;
            this.cullMaxPerPass = 5;
            this.unloadChangeScene = false;
            System.Object.ctor.call(this);
        },
        ctor$$Int32$$Boolean$$Int32$$Int32$$Int32$$Boolean$$Int32$$Boolean$$Boolean: function (preloadAmount, cullDespawned, cullAbove, cullDelay, cullMaxPerPass, limitInstances, limitAmount, limitFIFO, unloadChangeScene){
            this.preloadAmount = 1;
            this.preloadTime = false;
            this.preloadFrames = 2;
            this.preloadDelay = 0;
            this.limitInstances = false;
            this.limitAmount = 100;
            this.limitFIFO = false;
            this.cullDespawned = false;
            this.cullAbove = 50;
            this.cullDelay = 60;
            this.cullMaxPerPass = 5;
            this.unloadChangeScene = false;
            System.Object.ctor.call(this);
            this.preloadAmount = preloadAmount;
            this.cullDespawned = cullDespawned;
            this.cullAbove = cullAbove;
            this.cullDelay = cullDelay;
            this.cullMaxPerPass = cullMaxPerPass;
            this.limitInstances = limitInstances;
            this.limitAmount = limitAmount;
            this.limitFIFO = limitFIFO;
            this.unloadChangeScene = unloadChangeScene;
        },
        CopyTo: function (prefabPool){
            prefabPool.preloadAmount = this.preloadAmount;
            prefabPool.preloadTime = this.preloadTime;
            prefabPool.preloadFrames = this.preloadFrames;
            prefabPool.preloadDelay = this.preloadDelay;
            prefabPool.limitInstances = this.limitInstances;
            prefabPool.limitAmount = this.limitAmount;
            prefabPool.limitFIFO = this.limitFIFO;
            prefabPool.cullDespawned = this.cullDespawned;
            prefabPool.cullAbove = this.cullAbove;
            prefabPool.cullDelay = this.cullDelay;
            prefabPool.cullMaxPerPass = this.cullMaxPerPass;
        }
    }
};
JsTypes.push(AssetPipeline$PrefabPoolOption);
var AssetPipeline$ResourcePoolManager = {
    fullname: "AssetPipeline.ResourcePoolManager",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            AssetPipeline.ResourcePoolManager.WARNING_MEMORY = 70;
            AssetPipeline.ResourcePoolManager.ForceUnloadInterval = 300;
            AssetPipeline.ResourcePoolManager.ClearDestroyPoolItemTimer = "ClearDestroyPoolItemTimer";
            AssetPipeline.ResourcePoolManager._instance = null;
            AssetPipeline.ResourcePoolManager._isQuit = false;
        },
        Instance$$: "AssetPipeline.ResourcePoolManager",
        get_Instance: function (){
            if (UnityEngine.Object.op_Equality(AssetPipeline.ResourcePoolManager._instance, null) && !AssetPipeline.ResourcePoolManager._isQuit){
                var go = new UnityEngine.GameObject.ctor$$String("ResourcePoolManager");
                AssetPipeline.ResourcePoolManager._instance = go.AddComponent$1(AssetPipeline.ResourcePoolManager.ctor);
                UnityEngine.Object.DontDestroyOnLoad(go);
            }
            return AssetPipeline.ResourcePoolManager._instance;
        },
        TryUnloadPoolAndAsset: function (){
            if (UnityEngine.Object.op_Equality(AssetPipeline.ResourcePoolManager._instance, null))
                return;
            if (AssetPipeline.ResourcePoolManager.get_Instance().CheckCanUnload())
                AssetPipeline.ResourcePoolManager.get_Instance().UnloadUnusedPoolAndAsset();
        },
        UnloadAssetsAndGC: function (forceGC){
            var asyncOp = null;
            if (UnityEngine.Application.get_isMobilePlatform() && !forceGC){
                var memory = BaoyugameSdk.getFreeMemory() / 1024;
                if (memory < 70){
                    asyncOp = UnityEngine.Resources.UnloadUnusedAssets();
                    UnityEngine.Debug.Log$$Object("AssetManager UnloadUnusedAssets and GC");
                }
            }
            else {
                if (forceGC){
                    UnityEngine.Debug.Log$$Object("AssetManager UnloadUnusedAssets and GC");
                    asyncOp = UnityEngine.Resources.UnloadUnusedAssets();
                }
            }
            return asyncOp;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._poolMgrTrans = null;
            this._spawnPools = null;
            this._poolConfig = null;
            this.lastUnloadAssetTime = 0;
            this._sceneTileCoroutines = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            this._poolMgrTrans = this.get_transform();
            JSTimer.get_Instance().SetupTimer("ClearDestroyPoolItemTimer" /* ClearDestroyPoolItemTimer */, $CreateDelegate(this, this.ClearDestroyPoolItem), 5, false);
        },
        OnApplicationQuit: function (){
            AssetPipeline.ResourcePoolManager._isQuit = true;
            UnityEngine.Debug.Log$$Object("ResourcePoolManager OnApplicationQuit");
            this.Dispose();
        },
        Setup: function (){
            if (this._poolConfig == null){
                var textAsset = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type("PoolConfig" /* PrefabPoolConfig.POOLCONFIG_FILE */, 4, null), UnityEngine.TextAsset.ctor);
                if (UnityEngine.Object.op_Inequality(textAsset, null)){
                    this._poolConfig = JsHelper.ToObject(AssetPipeline.PrefabPoolConfig.ctor, textAsset.get_text());
                }
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean("PoolConfig" /* PrefabPoolConfig.POOLCONFIG_FILE */, 4, false);
            }
            if (this._spawnPools == null){
                this._spawnPools = new System.Collections.Generic.Dictionary$2.ctor$$Int32(AssetPipeline.ResourcePoolManager.PoolType.ctor, PathologicalGames.SpawnPool.ctor, 5);
                var typeNames = System.Enum.GetNames(Typeof(AssetPipeline.ResourcePoolManager.PoolType.ctor));
                var typeValues = System.Enum.GetValues(Typeof(AssetPipeline.ResourcePoolManager.PoolType.ctor));
                for (var i = 0; i < typeValues.length; i++){
                    var poolType = Cast(typeValues.GetValue(i), AssetPipeline.ResourcePoolManager.PoolType.ctor);
                    var pool = PathologicalGames.PoolManager.Pools.Create$$String(typeNames[i]);
                    pool.get_group().set_parent(this._poolMgrTrans);
                    this._spawnPools.Add(poolType, pool);
                }
            }
            GameEventCenter.AddListener$$Event$$Action(GameEvent.OnSceneChangeEnd, $CreateDelegate(this, this.OnChangeScene));
        },
        Dispose: function (){
            GameEventCenter.RemoveListener$$Event$$Action(GameEvent.OnSceneChangeEnd, $CreateDelegate(this, this.OnChangeScene));
            JSTimer.get_Instance().CancelTimer("ClearDestroyPoolItemTimer" /* ClearDestroyPoolItemTimer */);
        },
        OnChangeScene: function (){
            this.UnloadUnusedPoolAndAsset();
        },
        ClearDestroyPoolItem: function (){
            var $it49 = this._spawnPools.GetEnumerator();
            while ($it49.MoveNext()){
                var keyValue = $it49.get_Current();
                keyValue.get_Value().ClearDestroyItem();
            }
        },
        UnloadUnusedPool: function (poolType){
            if (this._spawnPools == null)
                return;
            var spawnPool;
            if ((function (){
                var $1 = $Ref(null, spawnPool);
                var $res = this._spawnPools.TryGetValue(poolType, $1);
                spawnPool = $1.Value;
                return $res;
            }).call(this)){
                var prefabPools = spawnPool.get_prefabPoolList();
                var removeList = null;
                var $it50 = prefabPools.GetEnumerator();
                while ($it50.MoveNext()){
                    var prefabPool = $it50.get_Current();
                    var poolOption = this._poolConfig.GetPoolOption(prefabPool.get_bundleName());
                    if (poolOption != null && poolOption.unloadChangeScene){
                        if (prefabPool.get_spawnedCount() == 0){
                            if (removeList == null){
                                removeList = new System.Collections.Generic.List$1.ctor(PathologicalGames.PrefabPool.ctor);
                            }
                            removeList.Add(prefabPool);
                        }
                    }
                }
                if (removeList != null && removeList.get_Count() > 0){
                    var $it51 = removeList.GetEnumerator();
                    while ($it51.MoveNext()){
                        var prefabPool = $it51.get_Current();
                        spawnPool.DestroyPrefabPool(prefabPool);
                        var bundleName = prefabPool.get_bundleName();
                        AssetPipeline.AssetManager.get_Instance().UnloadDependencies$$String$$Boolean$$Boolean(bundleName, false, false);
                    }
                }
            }
        },
        UnloadUnusedPoolAndAsset: function (){
            this.UnloadUnusedPool(AssetPipeline.ResourcePoolManager.PoolType.Effect);
            this.UnloadUnusedPool(AssetPipeline.ResourcePoolManager.PoolType.Scene);
            this.UnloadUnusedPool(AssetPipeline.ResourcePoolManager.PoolType.Model);
            this.UnloadUnusedPool(AssetPipeline.ResourcePoolManager.PoolType.UI);
            AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(true);
            this.lastUnloadAssetTime = UnityEngine.Time.get_realtimeSinceStartup();
        },
        CheckCanUnload: function (){
            if (UnityEngine.Time.get_realtimeSinceStartup() - this.lastUnloadAssetTime > 300 /* ForceUnloadInterval */)
                return true;
            var memory = BaoyugameSdk.getFreeMemory() / 1024;
            if (memory < 70)
                return true;
            var delay = 45;
            var minUnloadCount = 5;
            var canUnloadCount = 0;
            var curTime = UnityEngine.Time.get_realtimeSinceStartup();
            var $it52 = this._spawnPools.GetEnumerator();
            while ($it52.MoveNext()){
                var keyValuePair = $it52.get_Current();
                var spawnPool = keyValuePair.get_Value();
                var prefabPools = spawnPool.get_prefabPoolList();
                for (var i = 0; i < prefabPools.get_Count(); i++){
                    var prefabPool = prefabPools.get_Item$$Int32(i);
                    if (prefabPool.lastRefTime == 0 || prefabPool.get_spawnedCount() != 0)
                        continue;
                    if (prefabPool.lastRefTime + delay < curTime){
                        canUnloadCount++;
                        if (canUnloadCount >= minUnloadCount)
                            return true;
                    }
                }
            }
            return false;
        },
        SpawnSync: function (bundleName, assetName, poolType, poolOption){
            if (this._spawnPools == null)
                return null;
            var pool = this._spawnPools.get_Item$$TKey(poolType);
            if (UnityEngine.Object.op_Equality(pool, null))
                return null;
            var prefab;
            if ((function (){
                var $1 = $Ref(null, prefab);
                var $res = pool.prefabs.TryGetValue(assetName, $1);
                prefab = $1.Value;
                return $res;
            }).call(this)){
                return pool.Spawn$$Transform(prefab);
            }
            var assetGo = Cast(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$String$$Type(bundleName, assetName, Typeof(UnityEngine.GameObject.ctor)), UnityEngine.GameObject.ctor);
            AssetPipeline.AssetManager.get_Instance().UnloadDependencies$$String$$Boolean$$Boolean(bundleName, false, false);
            if (UnityEngine.Object.op_Inequality(assetGo, null)){
                prefab = assetGo.get_transform();
                var prefabPool = new PathologicalGames.PrefabPool.ctor$$Transform$$String(prefab, bundleName);
                if (poolOption != null){
                    poolOption.CopyTo(prefabPool);
                }
                pool.CreatePrefabPool(prefabPool);
                return pool.Spawn$$Transform(prefab);
            }
            return null;
        },
        CacheAsync: function (bundleName, assetName, poolType, poolOption){
            this.SpawnAsync(bundleName, assetName, poolType, null, null, poolOption, 101 /* AssetLoadPriority.Cache */, true);
        },
        SpawnAsync: function (bundleName, assetName, poolType, getter, onError, poolOption, priority, unloadBundle){
            if (this._spawnPools == null)
                return null;
            var pool = this._spawnPools.get_Item$$TKey(poolType);
            if (UnityEngine.Object.op_Equality(pool, null))
                return null;
            var prefab;
            if ((function (){
                var $1 = $Ref(null, prefab);
                var $res = pool.prefabs.TryGetValue(assetName, $1);
                prefab = $1.Value;
                return $res;
            }).call(this)){
                if (getter != null){
                    var instance = pool.Spawn$$Transform(prefab);
                    var instanceGo = UnityEngine.Object.op_Inequality(instance, null) ? instance.get_gameObject() : null;
                    getter(instanceGo);
                }
            }
            else {
                var replaceBundleName;
                if ((function (){
                    var $1 = $Ref(null, replaceBundleName);
                    var $res = AssetPipeline.AssetManager.get_Instance().TryGetReplaceRes(bundleName, $1);
                    replaceBundleName = $1.Value;
                    return $res;
                }).call(this)){
                    if (!System.String.IsNullOrEmpty(replaceBundleName)){
                        this.CreatePrefabPool(pool, bundleName, assetName, null, onError, poolOption, priority, unloadBundle);
                        return this.CreatePrefabPool(pool, replaceBundleName, System.IO.Path.GetFileName(replaceBundleName), getter, onError, poolOption, priority, unloadBundle);
                    }
                }
                return this.CreatePrefabPool(pool, bundleName, assetName, getter, onError, poolOption, priority, unloadBundle);
            }
            return null;
        },
        CreatePrefabPool: function (pool, bundleName, assetName, getter, onError, poolOption, priority, unloadBundle){
            var newOnError = null;
            if (unloadBundle){
                newOnError = $CreateAnonymousDelegate(this, function (){
                    AssetPipeline.AssetManager.get_Instance().AddUnloadBundleToQueue(bundleName);
                    if (onError != null)
                        onError();
                });
            }
            else {
                newOnError = onError;
            }
            return AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$String$$OnLoadFinish$$OnLoadError$$Type$$Single(bundleName, assetName, $CreateAnonymousDelegate(this, function (asset){
                var prefab;
                var instance;
                var instanceGo;
                if ((function (){
                    var $1 = $Ref(null, prefab);
                    var $res = pool.prefabs.TryGetValue(assetName, $1);
                    prefab = $1.Value;
                    return $res;
                }).call(this)){
                    if (getter != null){
                        instance = pool.Spawn$$Transform(prefab);
                        instanceGo = UnityEngine.Object.op_Inequality(instance, null) ? instance.get_gameObject() : null;
                        getter(instanceGo);
                    }
                }
                else {
                    var assetGo = Cast(asset, UnityEngine.GameObject.ctor);
                    if (UnityEngine.Object.op_Inequality(assetGo, null)){
                        prefab = assetGo.get_transform();
                        var prefabPool = new PathologicalGames.PrefabPool.ctor$$Transform$$String(prefab, bundleName);
                        if (poolOption != null){
                            poolOption.CopyTo(prefabPool);
                        }
                        pool.CreatePrefabPool(prefabPool);
                        if (unloadBundle)
                            AssetPipeline.AssetManager.get_Instance().AddUnloadBundleToQueue(bundleName);
                        if (getter != null){
                            instance = pool.Spawn$$Transform(prefab);
                            instanceGo = UnityEngine.Object.op_Inequality(instance, null) ? instance.get_gameObject() : null;
                            getter(instanceGo);
                        }
                    }
                    else {
                        if (onError != null)
                            onError();
                    }
                }
            }), newOnError, Typeof(UnityEngine.GameObject.ctor), priority);
        },
        DespawnInternal: function (instance, poolType){
            if (this._spawnPools == null)
                return null;
            var pool = this._spawnPools.get_Item$$TKey(poolType);
            if (UnityEngine.Object.op_Equality(pool, null))
                return null;
            return pool.Despawn$$Transform(instance);
        },
        DespawnAndUnloadAssets: function (instance, poolType, unloadAssetImmediate){
            var prefabPool = this.DespawnInternal(instance, poolType);
            if (unloadAssetImmediate && prefabPool != null && prefabPool.get_spawnedCount() == 0){
                var bundleName = prefabPool.get_bundleName();
                prefabPool.spawnPool.DestroyPrefabPool(prefabPool);
                AssetPipeline.AssetManager.get_Instance().UnloadDependencies$$String$$Boolean$$Boolean(bundleName, true, false);
            }
        },
        SpawnModelGo: function (prefabName, parent){
            var node = this.SpawnModel(prefabName);
            if (UnityEngine.Object.op_Inequality(node, null)){
                var nodeGo = node.get_gameObject();
                if (UnityEngine.Object.op_Inequality(parent, null))
                    GameObjectExt.AddPoolChild(parent, nodeGo, 0, 0, 0);
                return nodeGo;
            }
            return null;
        },
        SpawnModel: function (prefabName){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 20);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 20);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnSync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Model, poolOption);
        },
        SpawnModelAsync: function (prefabName, getter, onError, priority){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 20);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 20);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnAsync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Model, getter, onError, poolOption, priority, true);
        },
        DespawnModel$$Transform: function (instance){
            this.DespawnInternal(instance, AssetPipeline.ResourcePoolManager.PoolType.Model);
        },
        DespawnModel$$GameObject: function (go){
            this.DespawnInternal(go.get_transform(), AssetPipeline.ResourcePoolManager.PoolType.Model);
        },
        SpawnEffectGo: function (prefabName, parent){
            var node = this.SpawnEffect(prefabName);
            if (UnityEngine.Object.op_Inequality(node, null)){
                var nodeGo = node.get_gameObject();
                if (UnityEngine.Object.op_Inequality(parent, null))
                    GameObjectExt.AddPoolChild(parent, nodeGo, 0, 0, 0);
                return nodeGo;
            }
            return null;
        },
        SpawnEffect: function (prefabName){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 30);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 30);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnSync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Effect, poolOption);
        },
        SpawnEffectAsync: function (prefabName, getter, onError, priority){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 30);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 30);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnAsync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Effect, getter, onError, poolOption, priority, true);
        },
        SpawnSceneEffectAsync: function (prefabName, getter, onError){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 30);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 30);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnAsync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Effect, getter, onError, poolOption, 100 /* AssetLoadPriority.Default */, false);
        },
        DespawnEffect$$Transform: function (instance){
            this.DespawnInternal(instance, AssetPipeline.ResourcePoolManager.PoolType.Effect);
        },
        DespawnEffect$$GameObject$$Boolean: function (go, unloadAssetImmediate){
            this.DespawnAndUnloadAssets(go.get_transform(), AssetPipeline.ResourcePoolManager.PoolType.Effect, unloadAssetImmediate);
        },
        CacheEffect: function (prefabName){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 30);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 30);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            this.CacheAsync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Effect, poolOption);
        },
        LoadUI: function (prefabName){
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 10);
            var assetGo = Cast(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$String$$Type(bundleName, prefabName, Typeof(UnityEngine.GameObject.ctor)), UnityEngine.GameObject.ctor);
            AssetPipeline.AssetManager.get_Instance().UnloadDependencies$$String$$Boolean$$Boolean(bundleName, false, false);
            return assetGo;
        },
        SpawnUI: function (prefabName){
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 10);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnSync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.UI, poolOption);
        },
        SpawnUIGo: function (prefabName, parent){
            var node = this.SpawnUI(prefabName);
            if (UnityEngine.Object.op_Inequality(node, null)){
                var nodeGo = node.get_gameObject();
                nodeGo.SetActive(true);
                if (UnityEngine.Object.op_Inequality(parent, null))
                    GameObjectExt.AddPoolChild(parent, nodeGo, 0, 0, 0);
                return nodeGo;
            }
            return null;
        },
        SpawnUIAsync: function (prefabName, getter, onError, priority){
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 10);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnAsync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.UI, getter, onError, poolOption, priority, false);
        },
        DespawnUI: function (go){
            UIHelper.RemoveNGUIEvent(go);
            this.DespawnInternal(go.get_transform(), AssetPipeline.ResourcePoolManager.PoolType.UI);
        },
        LoadScene: function (assetName, onFinish, onError, priority){
            return AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$ResGroup$$OnLoadFinish$$OnLoadError$$Type$$Single(assetName, 2, $CreateAnonymousDelegate(this, function (asset){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(assetName, 2, false);
                if (onFinish != null){
                    onFinish(asset);
                }
            }), $CreateAnonymousDelegate(this, function (){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(assetName, 2, false);
                if (onError != null)
                    onError();
            }), null, 100);
        },
        SpawnSceneAsync: function (prefabName, getter, onError, priority){
            prefabName = PathHelper.ReplacePrefabName(prefabName, 2);
            var bundleName = AssetPipeline.AssetManager.GetBundleName(prefabName, 2);
            var poolOption = this._poolConfig.GetPoolOption(bundleName);
            return this.SpawnAsync(bundleName, prefabName, AssetPipeline.ResourcePoolManager.PoolType.Scene, getter, onError, poolOption, priority, false);
        },
        DespawnScene: function (instance, unloadAssetImmediate){
            this.DespawnAndUnloadAssets(instance.get_transform(), AssetPipeline.ResourcePoolManager.PoolType.Scene, unloadAssetImmediate);
        },
        LoadSceneTileMap: function (resInfoKey, finishCallback, errorCallback, limitCount){
            if (this._sceneTileCoroutines == null){
                this._sceneTileCoroutines = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.String.ctor, AssetPipeline.AssetManager.AssetHandler.ctor, 80);
            }
            this.ReleaseSceneTileMap(resInfoKey);
            var newFinishCallBack = $CreateAnonymousDelegate(this, function (asset){
                this.ReleaseSceneTileMap(resInfoKey);
                finishCallback(asset);
            });
            var newErrorCallBack = $CreateAnonymousDelegate(this, function (){
                this.ReleaseSceneTileMap(resInfoKey);
                errorCallback();
            });
            var task;
            if (AssetPipeline.AssetManager.ResLoadMode == 0){
                task = this.LoadSceneTileMapAsync(resInfoKey, newFinishCallBack, newErrorCallBack);
            }
            else {
                task = AssetPipeline.AssetManager.get_Instance().LoadSceneTileMapByWWW(resInfoKey, newFinishCallBack, newErrorCallBack, limitCount);
            }
            this._sceneTileCoroutines.Add(resInfoKey, task);
        },
        ReleaseSceneTileMap: function (resInfoKey){
            if (this._sceneTileCoroutines == null)
                return;
            var task;
            if ((function (){
                var $1 = $Ref(null, task);
                var $res = this._sceneTileCoroutines.TryGetValue(resInfoKey, $1);
                task = $1.Value;
                return $res;
            }).call(this)){
                task.Dispose();
                this._sceneTileCoroutines.Remove(resInfoKey);
            }
        },
        LoadSceneTileMapAsync: function (bundleName, onFinish, onError){
            return AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$ResGroup$$OnLoadFinish$$OnLoadError$$Type$$Single(bundleName, 40, $CreateAnonymousDelegate(this, function (asset){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(bundleName, 40, false);
                if (onFinish != null){
                    onFinish(asset);
                }
            }), $CreateAnonymousDelegate(this, function (){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(bundleName, 40, false);
                if (onError != null)
                    onError();
            }), null, 90 /* AssetLoadPriority.Scene2DTitleMap */);
        },
        LoadConfig: function (configName, onFinish, onError, priority){
            AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$ResGroup$$OnLoadFinish$$OnLoadError$$Type$$Single(configName, 4, $CreateAnonymousDelegate(this, function (asset){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(configName, 4, false);
                if (onFinish != null){
                    onFinish(asset);
                }
            }), $CreateAnonymousDelegate(this, function (){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(configName, 4, false);
                if (onError != null)
                    onError();
            }), null, priority);
        },
        LoadImage: function (imageName, onFinish, onError){
            AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$ResGroup$$OnLoadFinish$$OnLoadError$$Type$$Single(imageName, 13, $CreateAnonymousDelegate(this, function (asset){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(imageName, 13, false);
                if (onFinish != null){
                    onFinish(asset);
                }
            }), $CreateAnonymousDelegate(this, function (){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(imageName, 13, false);
                if (onError != null)
                    onError();
            }), null, 100);
        },
        LoadAudioClip: function (clipName, onFinish, onError){
            AssetPipeline.AssetManager.get_Instance().LoadAssetAsync$$String$$ResGroup$$OnLoadFinish$$OnLoadError$$Type$$Single(clipName, 3, $CreateAnonymousDelegate(this, function (asset){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(clipName, 3, false);
                if (onFinish != null){
                    onFinish(asset);
                }
            }), $CreateAnonymousDelegate(this, function (){
                AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(clipName, 3, false);
                if (onError != null)
                    onError();
            }), null, 100);
        }
    }
};
JsTypes.push(AssetPipeline$ResourcePoolManager);
var SdkMessageManager = {
    fullname: "SdkMessageManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SdkMessageManager.instance = new SdkMessageManager.ctor();
        },
        Instance$$: "SdkMessageManager",
        get_Instance: function (){
            return SdkMessageManager.instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnSdkCallbackInfo = null;
            System.Object.ctor.call(this);
        },
        add_OnSdkCallbackInfo: function (value){
            this.OnSdkCallbackInfo = $CombineDelegates(this.OnSdkCallbackInfo, value);
        },
        remove_OnSdkCallbackInfo: function (value){
            this.OnSdkCallbackInfo = $RemoveDelegate(this.OnSdkCallbackInfo, value);
        },
        Setup: function (){
            var sdkMessageScript = SdkMessageScript.Setup();
            sdkMessageScript.OnSdkCallbackInfo = $CombineDelegates(sdkMessageScript.OnSdkCallbackInfo, $CreateDelegate(this, this.HandleSdkCallbackInfo));
        },
        HandleSdkCallbackInfo: function (json){
            UnityEngine.Debug.Log$$Object("SdkMessageManager.HandleSdkCallbackInfo " + json);
            if (!System.String.IsNullOrEmpty(json)){
                var info = null;
                try{
                    info = JsHelper.ToObject(SdkCallbackInfo.ctor, json);
                }
                catch(e){
                    GameDebuger.LogException(e, null);
                }
                if (this.OnSdkCallbackInfo != null){
                    this.OnSdkCallbackInfo(info, json);
                }
                if (info != null){
                    UnityEngine.Debug.Log$$Object("info.type=" + info.type + " code=" + info.code + " data=" + info.data);
                    switch (info.type){
                        case "power":
                            var intPower = 0;
                            (function (){
                            var $1 = $Ref(null, intPower);
                            var $res = System.Int32.TryParse$$String$$Int32(info.data, $1);
                            intPower = $1.Value;
                            return $res;
                        }).call(this);
                            if (intPower == 9999 /* BaoyugameSdk.BATTERY_CHARGING */){
                            BaoyugameSdk.batteryChargingOfAndroid = true;
                        }
                            else {
                            BaoyugameSdk.batteryChargingOfAndroid = false;
                            BaoyugameSdk.batteryLevelOfAndroid = intPower;
                        }
                            break;
                        case "XGRegisterResult":
                            GameDebuger.TODO("ModelManager.DailyPush.SetXgState(info.data);");
                            break;
                        case "XGRegisterWithAccountResult":
                            GameDebuger.TODO(" ServiceRequestAction.requestServer(PlayerService.pigeon(GameSetting.BundleId,info.data == \'0\',GameSetting.PlatformTypeId));\t\t\t");
                            break;
                        case "init":
                            SPSdkManager.get_Instance().CallbackInit(info.code == 0);
                            break;
                        case "login":
                            if (info.code == 0){
                            var strs = info.data.Split$$Char$Array([";"]);
                            if (strs.length > 1){
                                GameSetting.LoginWay = strs[1];
                                var payExtInfo = LoginManager.get_Instance().PayExtInfo;
                                if (payExtInfo == null){
                                    payExtInfo = new PayExtInfo.ctor();
                                    LoginManager.get_Instance().PayExtInfo = payExtInfo;
                                }
                                payExtInfo.openid = strs[0].Split$$Char$Array(["|"])[0];
                                payExtInfo.openkey = strs[2];
                                payExtInfo.pf = strs[3];
                                payExtInfo.pfkey = strs[4];
                                SPSdkManager.get_Instance().CallbackLoginSuccess(false, strs[0]);
                            }
                            else {
                                SPSdkManager.get_Instance().CallbackLoginSuccess(false, info.data);
                            }
                        }
                            else if (info.code == 1){
                            SPSdkManager.get_Instance().CallbackLoginSuccess(true, info.data);
                        }
                        else if (info.code == 2){
                            SPSdkManager.get_Instance().CallbackLoginCancel();
                        }
                        else {
                            SPSdkManager.get_Instance().CallbackLoginFail();
                        }
                            break;
                        case "logout":
                            SPSdkManager.get_Instance().CallbackLogout(info.code == 0);
                            break;
                        case "noExiterProvide":
                            SPSdkManager.get_Instance().CallbackNoExiterProvide();
                            break;
                        case "exit":
                            SPSdkManager.get_Instance().CallbackExit(info.code == 0);
                            break;
                        case "error":
                            GameDebuger.LogError(System.String.Format$$String$$Object$$Object("错误 {0}，原因 {1}", info.code, info.data), null);
                            break;
                        case "pay":
                            if (info.code == 0){
                            SPSdkManager.get_Instance().CallbackPay(true);
                        }
                            else {
                            SPSdkManager.get_Instance().CallbackPay(false);
                        }
                            break;
                    }
                }
            }
        }
    }
};
JsTypes.push(SdkMessageManager);
var ServerManager = {
    fullname: "ServerManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ServerManager.instance = new ServerManager.ctor();
            ServerManager.gservice = "";
        },
        Instance$$: "ServerManager",
        get_Instance: function (){
            return ServerManager.instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnRequestToken = null;
            this.OnRequestOrderId = null;
            this.isGuest = false;
            this.sid = "";
            this.uid = "";
            this._serverInfo = null;
            this.loginAccountDto = null;
            System.Object.ctor.call(this);
        },
        SetServerInfo: function (info){
            this._serverInfo = info;
        },
        GetServerInfo: function (){
            return this._serverInfo;
        },
        HasPlayerAtServer: function (gameServerId){
            var roleId = GameSetting.GetLastRolePlayerId();
            var i;
            if (this.loginAccountDto != null){
                if (roleId == 0){
                    for (i = 0; i < this.loginAccountDto.players.get_Count(); i++){
                        var dto = this.loginAccountDto.players.get_Item$$Int32(i);
                        if (dto.gameServerId == gameServerId){
                            return dto;
                        }
                    }
                }
                else {
                    for (i = 0; i < this.loginAccountDto.players.get_Count(); i++){
                        var dto = this.loginAccountDto.players.get_Item$$Int32(i);
                        if (dto.gameServerId == gameServerId && dto.id == roleId){
                            return dto;
                        }
                    }
                    for (i = 0; i < this.loginAccountDto.players.get_Count(); i++){
                        var dto = this.loginAccountDto.players.get_Item$$Int32(i);
                        if (dto.gameServerId == gameServerId){
                            return dto;
                        }
                    }
                }
            }
            return null;
        },
        GetPlayersAtServer: function (gameServerId){
            var list = new System.Collections.Generic.List$1.ctor(AccountPlayerDto.ctor);
            if (this.loginAccountDto != null){
                var players = this.loginAccountDto.players;
                for (var i = 0; i < players.get_Count(); i++){
                    var dto = players.get_Item$$Int32(i);
                    if (dto.gameServerId == gameServerId){
                        list.Add(dto);
                    }
                }
            }
            return list;
        },
        GetPlayerRecentLoginTime: function (gameServerId){
            var recentLoginTime = 0;
            var list = this.GetPlayersAtServer(gameServerId);
            for (var i = 0; i < list.get_Count(); i++){
                var dto = list.get_Item$$Int32(i);
                if (dto.recentLoginTime > recentLoginTime){
                    recentLoginTime = dto.recentLoginTime;
                }
            }
            return recentLoginTime;
        },
        DelectPlayer: function (playerDtp){
            if (this.loginAccountDto != null){
                for (var i = 0; i < this.loginAccountDto.players.get_Count(); i++){
                    var dto = this.loginAccountDto.players.get_Item$$Int32(i);
                    if (dto.id == playerDtp.id){
                        this.loginAccountDto.players.Remove(dto);
                        break;
                    }
                }
            }
        },
        AddAccountPlayer$$CreatePlayerDto: function (dto){
            TalkingDataHelper.SetupAccount(dto.gameServerId, dto.id, dto.name, dto.grade, dto.factionId, 1);
            TestinAgentHelper.SetUserInfo(dto.gameServerId + "_" + dto.id + "_" + dto.name);
            var accountPlayerDto = this.GetAccountPlayer(dto.id);
            if (accountPlayerDto == null){
                accountPlayerDto = new AccountPlayerDto.ctor();
                accountPlayerDto.id = dto.id;
                accountPlayerDto.nickname = dto.name;
                accountPlayerDto.grade = dto.grade;
                accountPlayerDto.gameServerId = this._serverInfo.serverId;
                accountPlayerDto.charactorId = dto.charactorId;
                accountPlayerDto.factionId = dto.factionId;
                accountPlayerDto.recentLoginTime = SystemTimeManager.get_Instance().GetUTCTimeStamp();
                this.loginAccountDto.players.Add(accountPlayerDto);
            }
            return accountPlayerDto;
        },
        AddAccountPlayer$$PlayerDto: function (dto){
            GameDebuger.TODO("TalkingDataHelper.SetupAccount(dto.serviceId, dto.id, dto.name, dto.grade, dto.factionId, dto.gender);\n            TestinAgentHelper.SetUserInfo(dto.serviceId + \'_\' + dto.id + \'_\' + dto.name);");
            var accountPlayerDto = this.GetAccountPlayer(dto.id);
            if (accountPlayerDto == null){
                accountPlayerDto = new AccountPlayerDto.ctor();
                accountPlayerDto.id = dto.id;
                accountPlayerDto.nickname = dto.name;
                accountPlayerDto.grade = dto.grade;
                accountPlayerDto.gameServerId = this._serverInfo.serverId;
                accountPlayerDto.charactorId = dto.charactorId;
                accountPlayerDto.factionId = dto.factionId;
                this.loginAccountDto.players.Add(accountPlayerDto);
            }
            return accountPlayerDto;
        },
        UpdateAccountPlayer: function (dto){
            var accountPlayerDto = this.GetAccountPlayer(dto.id);
            if (accountPlayerDto != null){
                accountPlayerDto.nickname = dto.name;
                accountPlayerDto.grade = dto.grade;
                accountPlayerDto.factionId = dto.factionId;
                accountPlayerDto.charactorId = dto.charactorId;
            }
        },
        GetAccountPlayer: function (id){
            for (var i = 0; i < this.loginAccountDto.players.get_Count(); i++){
                var dto = this.loginAccountDto.players.get_Item$$Int32(i);
                if (dto.id == id){
                    return dto;
                }
            }
            return null;
        },
        GetPlayerCount: function (gameServerId){
            var count = 0;
            if (this.loginAccountDto != null){
                for (var i = 0; i < this.loginAccountDto.players.get_Count(); i++){
                    var dto = this.loginAccountDto.players.get_Item$$Int32(i);
                    if (dto.gameServerId == gameServerId){
                        count++;
                    }
                }
            }
            return count;
        }
    }
};
JsTypes.push(ServerManager);
var SocketManager = {
    fullname: "SocketManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SocketManager._instance = new SocketManager.ctor();
            SocketManager.ERROR_time_out = "链接超时";
            SocketManager.ERROR_socket_error = "网络错误";
            SocketManager.ERROR_socket_close = "网络已断开";
            SocketManager.ERROR_sid_error = "用户账号错误";
            SocketManager.ERROR_user_invalid = "用户无效";
            SocketManager.MAX_GAME_HEARTBEATTIME = 120;
            SocketManager.MAX_CONNECT_HEARTBEATTIME = 120;
            SocketManager.IsOnLink = false;
        },
        Instance$$: "SocketManager",
        get_Instance: function (){
            return SocketManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._checkMaxHearbeaTime = SocketManager.MAX_CONNECT_HEARTBEATTIME;
            this._haConnectorGO = null;
            this._haConnector = null;
            this._heartBeatTime = 0;
            this._appServerId = "";
            this._appServerVer = "";
            this._currentServiceInfo = null;
            this._currentServerInfo = null;
            this._processorMaps = null;
            this.OnHAConnected = null;
            this.OnHaError = null;
            this.OnHaCloseed = null;
            this.OnLeaveEvent = null;
            this.OnStateEvent = null;
            System.Object.ctor.call(this);
            this._processorMaps = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Collections.Generic.List$1.ctor);
        },
        add_OnHAConnected: function (value){
            this.OnHAConnected = $CombineDelegates(this.OnHAConnected, value);
        },
        remove_OnHAConnected: function (value){
            this.OnHAConnected = $RemoveDelegate(this.OnHAConnected, value);
        },
        add_OnHaError: function (value){
            this.OnHaError = $CombineDelegates(this.OnHaError, value);
        },
        remove_OnHaError: function (value){
            this.OnHaError = $RemoveDelegate(this.OnHaError, value);
        },
        add_OnHaCloseed: function (value){
            this.OnHaCloseed = $CombineDelegates(this.OnHaCloseed, value);
        },
        remove_OnHaCloseed: function (value){
            this.OnHaCloseed = $RemoveDelegate(this.OnHaCloseed, value);
        },
        add_OnLeaveEvent: function (value){
            this.OnLeaveEvent = $CombineDelegates(this.OnLeaveEvent, value);
        },
        remove_OnLeaveEvent: function (value){
            this.OnLeaveEvent = $RemoveDelegate(this.OnLeaveEvent, value);
        },
        add_OnStateEvent: function (value){
            this.OnStateEvent = $CombineDelegates(this.OnStateEvent, value);
        },
        remove_OnStateEvent: function (value){
            this.OnStateEvent = $RemoveDelegate(this.OnStateEvent, value);
        },
        OnTimerFinish: function (){
            if (SocketManager.IsOnLink == false && this._checkMaxHearbeaTime == SocketManager.MAX_GAME_HEARTBEATTIME){
                this._heartBeatTime = 0;
                JSTimer.get_Instance().CancelCd("SocketTimeoutCheckTimer");
                return;
            }
            this._heartBeatTime += 1;
            if (this._heartBeatTime > this._checkMaxHearbeaTime){
                GameDebuger.Log("onTimer to CloseSocket", null);
                JSTimer.get_Instance().CancelCd("SocketTimeoutCheckTimer");
                if (this._checkMaxHearbeaTime == SocketManager.MAX_GAME_HEARTBEATTIME){
                    this.Close(false);
                }
                else {
                    this.Close(true);
                }
            }
            else {
                JSTimer.get_Instance().SetupCoolDown("SocketTimeoutCheckTimer", 1, null, $CreateDelegate(this, this.OnTimerFinish), 1, false);
            }
        },
        Setup: function (){
            this._heartBeatTime = 0;
            this._checkMaxHearbeaTime = SocketManager.MAX_CONNECT_HEARTBEATTIME;
            this._appServerVer = GameSetting.HA_SERVICE_MAIN_TYPE;
            if (UnityEngine.Object.op_Equality(this._haConnectorGO, null)){
                this._haConnectorGO = new UnityEngine.GameObject.ctor$$String("HaConnector");
                UnityEngine.Object.DontDestroyOnLoad(this._haConnectorGO);
            }
        },
        HandleOnLeaveEvent: function (state, reason){
            GameDebuger.Log(System.String.Format$$String$$Object$$Object("HandleOnLeaveEvent state={0} reason={1}", state, reason), null);
            LoginManager.LeaveState = state;
            this.RemoveHaConnector();
            if (this.OnLeaveEvent != null){
                this.OnLeaveEvent();
            }
        },
        HandleOnStateEvent: function (state){
            GameDebuger.Log("HandleOnStateEvent status = " + state, null);
            if (this.OnStateEvent != null){
                this.OnStateEvent(state);
            }
        },
        HandleOnCloseEvent: function (status){
            LoginManager.CloseState = status;
            GameDebuger.Log("HandleOnCloseEvent status = " + status, null);
            this.RemoveHaConnector();
            if (this.OnHaCloseed != null){
                this.OnHaCloseed(status);
            }
        },
        HandleOnMessageEvent: function (byteArray, compress){
            this._heartBeatTime = 0;
            var readObj = JsHelper.ParseProtoObj(byteArray, compress);
            this.OnReceiveDto(readObj, byteArray.get_Length());
        },
        HandleOnJoinEvent: function (){
            this._heartBeatTime = 0;
            this._checkMaxHearbeaTime = SocketManager.MAX_GAME_HEARTBEATTIME;
            this._haConnector.QueryServices(this._appServerVer);
        },
        HandleOnServiceEvent: function (selectInfo){
            if (selectInfo != null){
                this.SetCurrentAppServerInfo(selectInfo);
            }
            else {
                UnityEngine.Debug.Log$$Object("找不到服务器 " + this._currentServerInfo.GetServerUID());
                this._haConnector.Close();
                this.HandlerHaError(SocketManager.ERROR_socket_close);
            }
        },
        SetCurrentAppServerInfo: function (serviceInfo){
            this._currentServiceInfo = serviceInfo;
            this._appServerId = serviceInfo.id;
            SocketManager.IsOnLink = true;
            if (this.OnHAConnected != null){
                this.OnHAConnected();
            }
        },
        HandlerHaError: function (msg){
            GameDebuger.Log("HandlerHaError " + msg, null);
            if (this.OnHaError != null){
                this.OnHaError(msg);
            }
        },
        Destroy: function (){
            JSTimer.get_Instance().CancelCd("SocketTimeoutCheckTimer");
            ServiceRequestActionMgr.ResetSerialNum();
        },
        Connect: function (serverInfo){
            this._currentServerInfo = serverInfo;
            this._heartBeatTime = 0;
            this._checkMaxHearbeaTime = SocketManager.MAX_CONNECT_HEARTBEATTIME;
            HaApplicationContext.getConfiguration().setHost(serverInfo.host);
            HaApplicationContext.getConfiguration().setPort(serverInfo.port);
            this.SetupHAConnecter();
            this._haConnector.Join(serverInfo.haVer, GameSetting.HA_TRY_PORTS, serverInfo.serviceId);
        },
        SetupHAConnecter: function (){
            if (UnityEngine.Object.op_Equality(this._haConnector, null)){
                UnityEngine.Debug.Log$$Object("SetupHAConnecter");
                this._haConnector = GameObjectExt.GetMissingComponent$1(HaConnector.ctor, this._haConnectorGO);
                this._haConnector.OnJoinEvent = $CombineDelegates(this._haConnector.OnJoinEvent, $CreateDelegate(this, this.HandleOnJoinEvent));
                this._haConnector.OnServiceEvent = $CombineDelegates(this._haConnector.OnServiceEvent, $CreateDelegate(this, this.HandleOnServiceEvent));
                this._haConnector.OnMessageEvent = $CombineDelegates(this._haConnector.OnMessageEvent, $CreateDelegate(this, this.HandleOnMessageEvent));
                this._haConnector.OnCloseEvent = $CombineDelegates(this._haConnector.OnCloseEvent, $CreateDelegate(this, this.HandleOnCloseEvent));
                this._haConnector.OnLeaveEvent = $CombineDelegates(this._haConnector.OnLeaveEvent, $CreateDelegate(this, this.HandleOnLeaveEvent));
                this._haConnector.OnStateEvent = $CombineDelegates(this._haConnector.OnStateEvent, $CreateDelegate(this, this.HandleOnStateEvent));
            }
        },
        IsSetup: function (){
            return UnityEngine.Object.op_Inequality(this._haConnector, null);
        },
        GetHaConnector: function (){
            return this._haConnector;
        },
        SendRequest: function (request){
            if (!this.IsJoinedToHA()){
                GameDebuger.Log("have not Joined to ha yet!!", null);
                return;
            }
            if (request == null){
                GameDebuger.Log("IhomeRequest is null!!", null);
                return;
            }
            var ba = new ProtoByteArray.ctor();
            if (!this.IsSkipAction(request)){
                GameDebuger.Log(AppStringHelper.WrapColorWithLog(("[SEND] " + this.GetRequestDebugInfo(request)), "orange"), null);
            }
            JsHelper.EncodeProtoObj(ba, request);
            this._haConnector.SendMessage$$String$$UInt32$$ProtoByteArray(this._appServerId, 0, ba);
        },
        GetRequestDebugInfo: function (request){
            var info = System.String.Format$$String$$Object$$Object$$Object("action={0} serial={1} needResponse={2}", request.action, request.serial, request.needResponse);
            for (var i = 0; i < request.xparams.get_Count(); i++){
                info += " " + request.xparams.get_Item$$Int32(i);
            }
            return info;
        },
        IsSkipAction: function (request){
            if (request.action.Contains("PlanWalk") || request.action.Contains("VerifyWalk")){
                return true;
            }
            else {
                return false;
            }
        },
        IsConnectedToHA: function (){
            return UnityEngine.Object.op_Inequality(this._haConnector, null) && this._haConnector.getState() >= HaStage.CONNECTED;
        },
        IsJoinedToHA: function (){
            return UnityEngine.Object.op_Inequality(this._haConnector, null) && this._haConnector.getState() >= HaStage.JOINED;
        },
        AddMessageProcessor: function (processor){
            var type = processor.getEventType();
            var handlerList;
            if (this._processorMaps.ContainsKey(type)){
                handlerList = this._processorMaps.get_Item$$TKey(type);
            }
            else {
                handlerList = new System.Collections.Generic.List$1.ctor(MessageProcessor.ctor);
                this._processorMaps.Add(processor.getEventType(), handlerList);
            }
            handlerList.Add(processor);
        },
        RemoveMessageProcessor: function (processor){
            var type = processor.getEventType();
            if (this._processorMaps.ContainsKey(type)){
                var list = this._processorMaps.get_Item$$TKey(type);
                list.Remove(processor);
            }
        },
        OnReceiveDto: function (message, len){
            if (message == null){
                GameDebuger.LogError("XSocket onData = null", null);
                return;
            }
            var messageType = message.GetType().get_FullName();
            var generalResponse = As(message, AppDto.GeneralResponse.ctor);
            if (GameSetting.get_LogType() == 2){
                if (generalResponse != null){
                    GameDebuger.Log(AppStringHelper.WrapColorWithLog(System.String.Format$$String$$Object$$Object$$Object("[RECEIVE] type:{0} len:{1} serial:{2}", messageType, len, generalResponse.serial), "orange"), null);
                }
                else {
                    GameDebuger.Log(AppStringHelper.WrapColorWithLog(System.String.Format$$String$$Object$$Object("[RECEIVE] type:{0} len:{1}", messageType, len), "orange"), null);
                }
            }
            if (generalResponse != null && generalResponse.serial != 0){
                var serial = generalResponse.serial;
                GameDebuger.TODO(" ModelManager.GameAnaly.ReturnRequestAction(serial);");
                var requestAction = ServiceRequestActionMgr.Remove(serial);
                var errorResponse = As(generalResponse, AppDto.ErrorResponse.ctor);
                if (requestAction != null){
                    if (errorResponse != null){
                        requestAction.onError(errorResponse);
                    }
                    else {
                        requestAction.onSuccess(generalResponse);
                    }
                }
                else {
                    if (errorResponse != null){
                        GameDebuger.Log(System.String.Format$$String$$Object$Array("ErrorResponse serial:{0},id:{1},serialId:{2},message:{3} ", [errorResponse.serial, errorResponse.id, errorResponse.serialId, errorResponse.message]), null);
                        TipManager.AddTip(errorResponse.message, false, false, "");
                    }
                    else {
                        GameDebuger.LogError("未监听响应协议(Callback) " + messageType + " ,serial id = " + serial, null);
                    }
                }
                return;
            }
            GameDebuger.TODO("ModelManager.GameAnaly.AddNotifyAnaly(message);");
            var processors = null;
            (function (){
                var $1 = $Ref(null, processors);
                var $res = this._processorMaps.TryGetValue(messageType, $1);
                processors = $1.Value;
                return $res;
            }).call(this);
            if (processors != null){
                for (var i = 0; i < processors.get_Count(); i++){
                    var processor = processors.get_Item$$Int32(i);
                    processor.ProcessMsg(message);
                }
            }
            else {
                GameDebuger.LogError("未监听下发协议(Notify) " + messageType, null);
            }
        },
        RemoveHaConnector: function (){
            SocketManager.IsOnLink = false;
            ServiceRequestActionMgr.Dispose();
            RequestLoadingTip.Reset();
            if (UnityEngine.Object.op_Inequality(this._haConnector, null)){
                UnityEngine.Debug.Log$$Object("RemoveComponent HaConnector");
                this._haConnector.OnJoinEvent = $RemoveDelegate(this._haConnector.OnJoinEvent, $CreateDelegate(this, this.HandleOnJoinEvent));
                this._haConnector.OnServiceEvent = $RemoveDelegate(this._haConnector.OnServiceEvent, $CreateDelegate(this, this.HandleOnServiceEvent));
                this._haConnector.OnMessageEvent = $RemoveDelegate(this._haConnector.OnMessageEvent, $CreateDelegate(this, this.HandleOnMessageEvent));
                this._haConnector.OnCloseEvent = $RemoveDelegate(this._haConnector.OnCloseEvent, $CreateDelegate(this, this.HandleOnCloseEvent));
                this._haConnector.OnLeaveEvent = $RemoveDelegate(this._haConnector.OnLeaveEvent, $CreateDelegate(this, this.HandleOnLeaveEvent));
                this._haConnector.OnStateEvent = $RemoveDelegate(this._haConnector.OnStateEvent, $CreateDelegate(this, this.HandleOnStateEvent));
                GameObjectExt.RemoveComponent$1$$Component(HaConnector.ctor, this._haConnector.get_transform());
                this._haConnector = null;
            }
        },
        Close: function (needDispatcher){
            if (UnityEngine.Object.op_Inequality(this._haConnector, null)){
                this._haConnector.CloseSocket(0 /* EventObject.Close_status_unkonwn */);
            }
        }
    }
};
JsTypes.push(SocketManager);
var SystemTimeManager = {
    fullname: "SystemTimeManager",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            SystemTimeManager.TIME_FOR_CLIENT_DELAY = 1000;
            SystemTimeManager.LocalTimeTest = false;
            SystemTimeManager._instance = null;
        },
        Instance$$: "SystemTimeManager",
        get_Instance: function (){
            return SystemTimeManager._instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._unixTimeStamp = 0;
            this._lastTimeStamp = 0;
            this.night = false;
            this.OnSystemWeatherChange = null;
            this.OnSystemTimeChange = null;
            this.OnChangeNextDay = null;
            this.OnChangeNextWeek = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        add_OnSystemWeatherChange: function (value){
            this.OnSystemWeatherChange = $CombineDelegates(this.OnSystemWeatherChange, value);
        },
        remove_OnSystemWeatherChange: function (value){
            this.OnSystemWeatherChange = $RemoveDelegate(this.OnSystemWeatherChange, value);
        },
        add_OnSystemTimeChange: function (value){
            this.OnSystemTimeChange = $CombineDelegates(this.OnSystemTimeChange, value);
        },
        remove_OnSystemTimeChange: function (value){
            this.OnSystemTimeChange = $RemoveDelegate(this.OnSystemTimeChange, value);
        },
        add_OnChangeNextDay: function (value){
            this.OnChangeNextDay = $CombineDelegates(this.OnChangeNextDay, value);
        },
        remove_OnChangeNextDay: function (value){
            this.OnChangeNextDay = $RemoveDelegate(this.OnChangeNextDay, value);
        },
        add_OnChangeNextWeek: function (value){
            this.OnChangeNextWeek = $CombineDelegates(this.OnChangeNextWeek, value);
        },
        remove_OnChangeNextWeek: function (value){
            this.OnChangeNextWeek = $RemoveDelegate(this.OnChangeNextWeek, value);
        },
        Awake: function (){
            SystemTimeManager._instance = this;
            this._unixTimeStamp = DateUtil.DateTimeToUnixTimestamp(System.DateTime.get_Now());
        },
        Update: function (){
            var npcMgr = WorldManager.get_Instance().GetNpcViewManager();
            if (npcMgr != null){
                npcMgr.Tick();
            }
            this._unixTimeStamp += Cast((_jsComManager.uDT * 1000), System.Int64.ctor);
        },
        Setup: function (newTime){
            if (false /* LocalTimeTest */){
                this._unixTimeStamp = DateUtil.DateTimeToUnixTimestamp(System.DateTime.get_Now());
            }
            else {
                this._unixTimeStamp = newTime + 1000 /* TIME_FOR_CLIENT_DELAY */;
            }
            this._lastTimeStamp = this._unixTimeStamp;
            JSTimer.get_Instance().SetupCoolDown("SystemCheckTimer", 1, null, $CreateDelegate(this, this.OnTimerFinish), 0.1, false);
        },
        Dispose: function (){
            JSTimer.get_Instance().CancelCd("SystemCheckTimer");
        },
        GetServerTime: function (){
            return DateUtil.UnixTimeStampToDateTime(this._unixTimeStamp);
        },
        GetLastServerTime: function (){
            return DateUtil.UnixTimeStampToDateTime(this._lastTimeStamp);
        },
        GetCHDayOfWeek: function (){
            return DateUtil.CNDayOfWeek(this.GetServerTime());
        },
        GetDayOfWeek: function (){
            return this.GetServerTime().get_DayOfWeek();
        },
        GetUTCTimeStamp: function (){
            return this._unixTimeStamp;
        },
        GetLastTimeStamp: function (){
            return this._lastTimeStamp;
        },
        OnTimerFinish: function (){
            var hourMinute = this.GetServerTime().get_Minute();
            if (hourMinute >= 30){
                hourMinute -= 30;
            }
            var newNight = (hourMinute >= 15);
            if (this.night != newNight){
                this.night = newNight;
                if (this.OnSystemWeatherChange != null){
                    this.OnSystemWeatherChange();
                }
            }
            if (this.OnSystemTimeChange != null){
                this.OnSystemTimeChange(this._unixTimeStamp);
            }
            JSTimer.get_Instance().SetupCoolDown("SystemCheckTimer", 1, null, $CreateDelegate(this, this.OnTimerFinish), 0.1, false);
        },
        SyncServerTime: function (newTime){
            var lastDateTime = this.GetLastServerTime();
            if (false /* LocalTimeTest */){
                this._unixTimeStamp = DateUtil.DateTimeToUnixTimestamp(System.DateTime.get_Now());
            }
            else {
                this._unixTimeStamp = newTime + 1000;
            }
            this._lastTimeStamp = this._unixTimeStamp;
            var newDateTime = this.GetServerTime();
            if (System.DateTime.op_Inequality(lastDateTime.get_Date(), newDateTime.get_Date())){
                if (this.OnChangeNextDay != null)
                    this.OnChangeNextDay();
            }
            if (lastDateTime.get_DayOfWeek() > newDateTime.get_DayOfWeek()){
                if (this.OnChangeNextWeek != null)
                    this.OnChangeNextWeek();
            }
        },
        GetDelaylessTime: function (pTargetTime){
            return pTargetTime + 1000 /* TIME_FOR_CLIENT_DELAY */;
        }
    }
};
JsTypes.push(SystemTimeManager);
var UIModuleDefinition = {
    fullname: "UIModuleDefinition",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            UIModuleDefinition._moduleDict = (function (){
                var $v16 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UIModuleDefinition.ModuleType.ctor);
                $v16.Add("TestSdkView" /* ProxyLoginModule.NAME_TESTSDK */, UIModuleDefinition.ModuleType.SubModule);
                $v16.Add("PlayerInfoView" /* ProxyMainUIModule.PLAYERINFO_VIEW */, UIModuleDefinition.ModuleType.SubModule);
                $v16.Add("BattleOrderEditorView" /* ProxyMainUIModule.BATTLE_ORDER_EDITOR_VIEW */, UIModuleDefinition.ModuleType.SubModule);
                $v16.Add("BattleBuffTipsView" /* ProxyMainUIModule.BATTLE_BUFFTIPS_VIEW */, UIModuleDefinition.ModuleType.SubModule);
                $v16.Add("BattleOrderListView" /* ProxyMainUIModule.BATTLE_ORDER_LIST_VIEW */, UIModuleDefinition.ModuleType.SubModule);
                $v16.Add("WindowInputPrefab" /* ProxyWindowModule.INPUT_NAME_WINDOWPREFAB */, UIModuleDefinition.ModuleType.SubModule);
                return $v16;
            }).call(this);
        },
        GetUIModuleType: function (moduleName, layerType){
            if (UIModuleDefinition._moduleDict.ContainsKey(moduleName)){
                return UIModuleDefinition._moduleDict.get_Item$$TKey(moduleName);
            }
            else {
                if (layerType >= UILayerType.DefaultModule && layerType < UILayerType.SubModule){
                    return UIModuleDefinition.ModuleType.MainModule;
                }
                else {
                    return UIModuleDefinition.ModuleType.SubModule;
                }
            }
        },
        IsMainModule: function (moduleName){
            if (UIModuleDefinition._moduleDict.ContainsKey(moduleName)){
                return UIModuleDefinition._moduleDict.get_Item$$TKey(moduleName) == UIModuleDefinition.ModuleType.MainModule;
            }
            else {
                return false;
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UIModuleDefinition);
var UIModuleManager = {
    fullname: "UIModuleManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            UIModuleManager.instance = new UIModuleManager.ctor();
            UIModuleManager.uiInfoDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UILayerType.ctor);
            UIModuleManager.BaseViewSet = (function (){
                var $v17 = new System.Collections.Generic.HashSet$1.ctor(System.String.ctor);
                $v17.Add("MainUIView");
                $v17.Add("GMTestView");
                $v17.Add("BattleDemoView");
                $v17.Add("BarrageLayer");
                $v17.Add("BattleView");
                return $v17;
            }).call(this);
        },
        Instance$$: "UIModuleManager",
        get_Instance: function (){
            return UIModuleManager.instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._moduleCacheDic = null;
            this._layerCacheDic = null;
            this._moduleChildCacheDic = null;
            this._openEventDic = null;
            this._returnModuleList = null;
            System.Object.ctor.call(this);
            this._moduleCacheDic = new System.Collections.Generic.Dictionary$2.ctor(UILayerType.ctor, System.Collections.Generic.List$1.ctor);
            this._layerCacheDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Int32.ctor);
            this._openEventDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UIModuleManager.OnModuleOpen.ctor);
            this._moduleChildCacheDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UnityEngine.GameObject.ctor);
            this._returnModuleList = new System.Collections.Generic.List$1.ctor(UIModuleManager.ModuleRecord.ctor);
        },
        OpenFunModule$$String$$Boolean$$Boolean: function (moduleName, addBgMask, bgMaskClose){
            var layerType = this.GetLayerTypeByModuleName(moduleName);
            return this.OpenFunModule$$String$$UILayerType$$Boolean$$Boolean(moduleName, layerType, addBgMask, bgMaskClose);
        },
        GetExistModule: function (moduleName){
            var module = null;
            if (this.IsModuleCacheContainsModule(moduleName)){
                module = this.GetModuleByName(moduleName);
            }
            return module;
        },
        CreateModule: function (moduleName, addBgMask, bgMaskClose){
            var module = null;
            if (UIModulePool.get_Instance().HasModuleInPool(moduleName)){
                module = UIModulePool.get_Instance().OpenModule(moduleName);
                GameObjectExt.AddPoolChild(LayerManager.get_Root().UIModuleRoot, module, 0, 0, 0);
            }
            else {
                module = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI(moduleName), UnityEngine.GameObject.ctor);
                module = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().UIModuleRoot, module);
                if (UnityEngine.Object.op_Inequality(module, null)){
                    NGUITools.AddMissingComponent$1(UIPanel.ctor, module);
                    if (addBgMask){
                        this.AddBgMask(moduleName, module, bgMaskClose);
                    }
                }
            }
            if (UnityEngine.Object.op_Inequality(module, null)){
                module.SetActive(true);
            }
            if (UnityEngine.Object.op_Inequality(module.get_transform().Find("BaseWindow"), null) || UnityEngine.Object.op_Inequality(module.get_transform().Find("BaseTabWindow"), null)){
                module.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(module.get_transform().get_localPosition().x, module.get_transform().get_localPosition().y - 8, module.get_transform().get_localPosition().z));
            }
            return module;
        },
        OpenFunModule$1$$String$$UILayerType$$Boolean$$Vector3$$Boolean: function (T, moduleName, layerType, addBgMask, worldPos, bgMaskClose){
            var ui = this.OpenFunModule$$String$$UILayerType$$Boolean$$Boolean(moduleName, layerType, addBgMask, bgMaskClose);
            var controller = GameObjectExt.GetMissingComponent$1(T, ui);
            var pos = LayerManager.get_Root().UIModuleRoot.get_transform().InverseTransformPoint$$Vector3(worldPos);
            var module = this.GetModuleByName(moduleName);
            module.get_transform().set_localPosition(pos);
            return controller;
        },
        OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean: function (T, moduleName, layerType, addBgMask, bgMaskClose){
            var ui = this.OpenFunModule$$String$$UILayerType$$Boolean$$Boolean(moduleName, layerType, addBgMask, bgMaskClose);
            var controller = GameObjectExt.GetMissingComponent$1(T, ui);
            return controller;
        },
        OpenFunModule$$String$$UILayerType$$Boolean$$Boolean: function (moduleName, layerType, addBgMask, bgMaskClose){
            if (System.String.IsNullOrEmpty(moduleName)){
                return null;
            }
            UIModuleManager.uiInfoDic.set_Item$$TKey(moduleName, layerType);
            var depth = this.GetCurDepthByLayerType(layerType);
            this.OpenModuleEx(moduleName, depth);
            var module = this.GetExistModule(moduleName);
            if (UnityEngine.Object.op_Equality(module, null)){
                module = this.CreateModule(moduleName, addBgMask, bgMaskClose);
                this._layerCacheDic.set_Item$$TKey(moduleName, depth);
            }
            if (UnityEngine.Object.op_Inequality(module, null)){
                depth = this.GetCurDepthByLayerType(layerType);
                GameObjectExt.ResetPanelsDepth$$GameObject$$Int32(module, depth);
                this.AddModuleToCacheDic(moduleName, module);
                module.SetActive(true);
            }
            this.AdjustLayerDepth(layerType);
            return module;
        },
        AdjustLayerDepth: function (layertype){
            var list = null;
            (function (){
                var $1 = $Ref(null, list);
                var $res = this._moduleCacheDic.TryGetValue(layertype, $1);
                list = $1.Value;
                return $res;
            }).call(this);
            var sort = $CreateAnonymousDelegate(this, function (x, y){
                return x.p2.GetComponentInChildren$1(UIPanel.ctor).get_depth() - y.p2.GetComponentInChildren$1(UIPanel.ctor).get_depth();
            });
            list.Sort$$Comparison$1(sort);
            var originDepth = LayerManager.get_Instance().GetOriginDepthByLayerType(layertype);
            list.ForEach($CreateAnonymousDelegate(this, function (s){
                if (Tuple$2.op_Inequality(s, null) && UnityEngine.Object.op_Inequality(s.p2, null) && s.p2.get_activeSelf()){
                    GameObjectExt.ResetPanelsDepth$$GameObject$$Int32(s.p2, originDepth);
                    originDepth = UIHelper.GetMaxDepthWithPanelAndWidget(s.p2) + 1;
                }
            }));
        },
        CloseModule: function (moduleName, withEX){
            var module = this.GetModuleByName(moduleName);
            if (UnityEngine.Object.op_Inequality(module, null)){
                GameDebuger.Log(System.String.Format$$String$$Object$Array("CloseModule " + moduleName, new Array(0)), null);
                module.SetActive(false);
                var viewController = this.GetViewController(module);
                this.RemoveElementFromModuleCache(moduleName);
                if (withEX){
                    var depth;
                    if (!(function (){
                        var $1 = $Ref(null, depth);
                        var $res = this._layerCacheDic.TryGetValue(moduleName, $1);
                        depth = $1.Value;
                        return $res;
                    }).call(this)){
                        var panel = module.GetComponent$1(UIPanel.ctor);
                        if (UnityEngine.Object.op_Inequality(panel, null)){
                            depth = panel.get_depth();
                        }
                    }
                    this.CloseModuleEx(moduleName, depth);
                }
                if (viewController != null){
                    viewController.Dispose();
                }
                UIModulePool.get_Instance().CloseModule(moduleName, module);
            }
        },
        GetViewController: function (module){
            var list = module.GetComponents$1(UnityEngine.MonoBehaviour.ctor);
            for (var i = 0,len = list.length; i < len; i++){
                var mono = list[i];
                if (Is(mono, IViewController.ctor)){
                    return As(mono, IViewController.ctor);
                }
            }
            return null;
        },
        IsModuleCacheContainsModule: function (moduleName){
            var check = false;
            this.UpdateModuleCache(moduleName, $CreateAnonymousDelegate(this, function (set){
                check = Tuple$2.op_Inequality(CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(Tuple$2.ctor, set, $CreateAnonymousDelegate(this, function (s){
                    return s.p1 == moduleName;
                })), null);
            }));
            return check;
        },
        AddModuleToCacheDic: function (moduleName, moduleGO){
            this.UpdateModuleCache(moduleName, $CreateAnonymousDelegate(this, function (set){
                if (set == null){
                    var ty = UILayerType.Invalid;
                    (function (){
                        var $1 = $Ref(null, ty);
                        var $res = UIModuleManager.uiInfoDic.TryGetValue(moduleName, $1);
                        ty = $1.Value;
                        return $res;
                    }).call(this);
                    if (ty != UILayerType.Invalid){
                        this._moduleCacheDic.set_Item$$TKey(ty, (function (){
                            var $v18 = new System.Collections.Generic.List$1.ctor(Tuple$2.ctor);
                            $v18.Add(Tuple.Create$2$$T1$$T2(System.String.ctor, UnityEngine.GameObject.ctor, moduleName, moduleGO));
                            return $v18;
                        }).call(this));
                    }
                }
                else {
                    CollectionExtension.ReplaceOrAdd$1(Tuple$2.ctor, set, $CreateAnonymousDelegate(this, function (s){
                        return s.p1 == moduleName;
                    }), Tuple.Create$2$$T1$$T2(System.String.ctor, UnityEngine.GameObject.ctor, moduleName, moduleGO));
                }
            }));
        },
        IsModuleOpened: function (moduleName){
            var module = this.GetModuleByName(moduleName);
            if (UnityEngine.Object.op_Inequality(module, null)){
                return module.get_activeSelf();
            }
            return false;
        },
        HideModule: function (moduleName){
            var module = this.GetModuleByName(moduleName);
            if (UnityEngine.Object.op_Inequality(module, null)){
                module.SetActive(false);
                var depth;
                if (!(function (){
                    var $1 = $Ref(null, depth);
                    var $res = this._layerCacheDic.TryGetValue(moduleName, $1);
                    depth = $1.Value;
                    return $res;
                }).call(this)){
                    var panel = module.GetComponent$1(UIPanel.ctor);
                    if (UnityEngine.Object.op_Inequality(panel, null)){
                        depth = panel.get_depth();
                    }
                }
                this.HideModuleEx(moduleName, depth);
            }
            return module;
        },
        GetModuleController$1: function (T, moduleName){
            var go = this.GetModuleByName(moduleName);
            if (UnityEngine.Object.op_Inequality(go, null)){
                return go.GetComponent$1(T);
            }
            return null;
        },
        GetModuleByName: function (moduleName){
            var go = null;
            this.UpdateModuleCache(moduleName, $CreateAnonymousDelegate(this, function (set){
                var tuple = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(Tuple$2.ctor, set, $CreateAnonymousDelegate(this, function (s){
                    return s.p1 == moduleName;
                }));
                if (Tuple$2.op_Inequality(tuple, null)){
                    go = tuple.p2;
                }
            }));
            return go;
        },
        UpdateModuleCache: function (moduleName, handler){
            var ty = UILayerType.Invalid;
            (function (){
                var $1 = $Ref(null, ty);
                var $res = UIModuleManager.uiInfoDic.TryGetValue(moduleName, $1);
                ty = $1.Value;
                return $res;
            }).call(this);
            var set = null;
            (function (){
                var $1 = $Ref(null, set);
                var $res = this._moduleCacheDic.TryGetValue(ty, $1);
                set = $1.Value;
                return $res;
            }).call(this);
            GameUtil.SafeRun$1$$Action$1$$T$$Action$1$Exception(System.Collections.Generic.List$1.ctor, handler, set, null);
        },
        RemoveElementFromModuleCache: function (moduleName){
            this.UpdateModuleCache(moduleName, $CreateAnonymousDelegate(this, function (set){
                CollectionExtension.Remove$1(Tuple$2.ctor, set, $CreateAnonymousDelegate(this, function (s){
                    return s.p1 == moduleName;
                }));
            }));
        },
        RegisterOpenEvent: function (moduleName, openCallback){
            this._openEventDic.set_Item$$TKey(moduleName, openCallback);
        },
        SendOpenEvent: function (moduleName, vc){
            if (this._openEventDic.ContainsKey(moduleName)){
                var openAction = this._openEventDic.get_Item$$TKey(moduleName);
                this._openEventDic.set_Item$$TKey(moduleName, null);
                if (openAction != null)
                    openAction(vc);
            }
        },
        AddBgMask: function (moduleName, module, bgMaskClose){
            var bgMask = NGUITools.AddChild$$GameObject$$GameObject(module, AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("ModuleBgBoxCollider"));
            if (bgMaskClose){
                var button = GameObjectExt.GetMissingComponent$1(UIEventTrigger.ctor, bgMask);
                EventDelegate.Set$$List$1$EventDelegate$$Callback(button.onClick, $CreateAnonymousDelegate(this, function (){
                    this.CloseModule(moduleName, true);
                }));
            }
            var uiWidget = GameObjectExt.GetMissingComponent$1(UIWidget.ctor, bgMask);
            uiWidget.set_depth(-1 /* -1 */);
            uiWidget.autoResizeBoxCollider = true;
            uiWidget.SetAnchor$$GameObject$$Int32$$Int32$$Int32$$Int32(module, -10 /* -10 */, -10 /* -10 */, 10, 10);
            NGUITools.AddWidgetCollider$$GameObject(bgMask);
        },
        CloseOtherModuleWhenNpcDialogue: function (){
            var names = (function (){
                var $v19 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v19.Add("LoginView" /* ProxyLoginModule.NAME */);
                $v19.Add("WindowPrefabTop" /* ProxyWindowModule.NAME_WindowPrefabForTop */);
                $v19.Add("SimpleWindowPrefabTop" /* ProxyWindowModule.SIMPLE_NAME_WindowPrefabForTop */);
                return $v19;
            }).call(this);
            this.FilterMoudleCacheDic($CreateAnonymousDelegate(this, function (name){
                var str = names.Find($CreateAnonymousDelegate(this, function (s){
                    return s == name;
                }));
                return System.String.IsNullOrEmpty(str);
            }), $CreateAnonymousDelegate(this, function (name){
                this.CloseModule(name, true);
            }));
        },
        CloseOtherModuleWhenRelogin: function (){
            var names = (function (){
                var $v20 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v20.Add("RoleCreateView" /* ProxyRoleCreateModule.NAME */);
                $v20.Add("LoginView" /* ProxyLoginModule.NAME */);
                return $v20;
            }).call(this);
            this.FilterMoudleCacheDic($CreateAnonymousDelegate(this, function (name){
                var str = names.Find($CreateAnonymousDelegate(this, function (s){
                    return s == name;
                }));
                return System.String.IsNullOrEmpty(str);
            }), $CreateAnonymousDelegate(this, function (name){
                this.CloseModule(name, true);
            }));
        },
        FindAllModuleNamesInMoudleCacheDic: function (predicate){
            var keys = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            CollectionExtension.ForEach$1(System.Collections.Generic.KeyValuePair$2.ctor, this._moduleCacheDic, $CreateAnonymousDelegate(this, function (kv){
                kv.get_Value().ForEach($CreateAnonymousDelegate(this, function (tuple){
                    if (predicate != null && predicate(tuple.p1)){
                        keys.Add(tuple.p1);
                    }
                }));
            }));
            return keys;
        },
        FilterMoudleCacheDic: function (predicate, handler){
            var keys = this.FindAllModuleNamesInMoudleCacheDic(predicate);
            CollectionExtension.ForEach$1(System.String.ctor, keys, $CreateAnonymousDelegate(this, function (s){
                GameUtil.SafeRun$1$$Action$1$$T$$Action$1$Exception(System.String.ctor, handler, s, null);
            }));
        },
        CloseOtherButThis: function (moduleName){
            var names = (function (){
                var $v21 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v21.Add("RoleCreateView" /* ProxyRoleCreateModule.NAME */);
                $v21.Add("LoginView" /* ProxyLoginModule.NAME */);
                $v21.Add(moduleName);
                return $v21;
            }).call(this);
            this.FilterMoudleCacheDic($CreateAnonymousDelegate(this, function (name){
                var str = names.Find($CreateAnonymousDelegate(this, function (s){
                    return s == name;
                }));
                return System.String.IsNullOrEmpty(str);
            }), $CreateAnonymousDelegate(this, function (name){
                this.CloseModule(name, true);
            }));
        },
        CloseOtherModuleWhenGuide: function (){
            var names = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this.FilterMoudleCacheDic($CreateAnonymousDelegate(this, function (name){
                var str = names.Find($CreateAnonymousDelegate(this, function (s){
                    return s == name;
                }));
                return System.String.IsNullOrEmpty(str);
            }), $CreateAnonymousDelegate(this, function (name){
                this.CloseModule(name, true);
            }));
        },
        Dispose: function (){
            this._openEventDic.Clear();
            this.CloseOtherModuleWhenRelogin();
            this._returnModuleList.Clear();
        },
        FindReturnModuleIndexByName: function (name){
            return this._returnModuleList.FindIndex$$Predicate$1($CreateAnonymousDelegate(this, function (record){
                return record.ModuleName == name;
            }));
        },
        FindMainModuleIndex: function (){
            return this._returnModuleList.FindIndex$$Predicate$1($CreateAnonymousDelegate(this, function (record){
                return this.GetUIModuleType(record.ModuleName) == UIModuleDefinition.ModuleType.MainModule;
            }));
        },
        FindMainModuleLastIndex: function (){
            return this._returnModuleList.FindLastIndex$$Predicate$1($CreateAnonymousDelegate(this, function (record){
                return this.GetUIModuleType(record.ModuleName) == UIModuleDefinition.ModuleType.MainModule;
            }));
        },
        IsModuleCanReturn: function (name){
            if (System.String.IsNullOrEmpty(name)){
                return false;
            }
            return (UnityEngine.Object.op_Inequality(LayerManager.get_Instance(), null) && LayerManager.get_Instance().get_CurUIMode() >= UIMode.GAME && (UIModuleDefinition.IsMainModule(name) || this.CheckLayerInRange(name, UILayerType.DefaultModule, UILayerType.FiveModule)));
        },
        CheckLayerInRange: function (name, low, high){
            var ty = UILayerType.Invalid;
            var check = (function (){
                var $1 = $Ref(null, ty);
                var $res = UIModuleManager.uiInfoDic.TryGetValue(name, $1);
                ty = $1.Value;
                return $res;
            }).call(this);
            if (!check){
                return false;
            }
            else {
                return ty >= low && ty <= high;
            }
        },
        GetUIModuleType: function (name){
            if (!this.IsModuleCanReturn(name)){
                return UIModuleDefinition.ModuleType.None;
            }
            else {
                var layer = UILayerType.Invalid;
                (function (){
                    var $1 = $Ref(null, layer);
                    var $res = UIModuleManager.uiInfoDic.TryGetValue(name, $1);
                    layer = $1.Value;
                    return $res;
                }).call(this);
                return UIModuleDefinition.GetUIModuleType(name, layer);
            }
        },
        OpenModuleEx: function (name, depth){
            GameUtil.LOGModule("OpenModuleEx-------" + name);
            if (!this.IsModuleCanReturn(name)){
                return;
            }
            var index = this.FindReturnModuleIndexByName(name);
            var moduleTy = this.GetUIModuleType(name);
            switch (moduleTy){
                case UIModuleDefinition.ModuleType.MainModule:
                    {
                    var firstIndex = this.FindMainModuleIndex();
                    var lastIndex = this.FindMainModuleLastIndex();
                    do{
                        if (index >= 0){
                            if (index == lastIndex){
                                this._returnModuleList.get_Item$$Int32(lastIndex).Depth = depth;
                                var moduleName = this._returnModuleList.get_Item$$Int32(lastIndex).ModuleName;
                                var module = this.GetModuleByName(moduleName);
                                GameObjectExt.ResetPanelsDepth$$GameObject$$Int32(module, depth);
                                break;
                            }
                            else if (index == firstIndex){
                                var lastList = this._returnModuleList.GetRange(1, lastIndex - 1);
                                this._returnModuleList.RemoveRange(0, lastIndex);
                                for (var i = 0; i < lastList.get_Count(); i++){
                                    var record = lastList.get_Item$$Int32(i);
                                    this.CloseModule(record.ModuleName, true);
                                }
                                firstIndex = this.FindMainModuleIndex();
                                lastIndex = this.FindMainModuleLastIndex();
                            }
                        }
                        if (this._returnModuleList.get_Count() == 0){
                            this._returnModuleList.Add(new UIModuleManager.ModuleRecord.ctor(name, depth, true));
                        }
                        else if (firstIndex < 0 || firstIndex == lastIndex){
                            var tList = CollectionExtension.ShallowCopyCollection$2(UIModuleManager.ModuleRecord.ctor, System.Collections.Generic.List$1.ctor, this._returnModuleList);
                            this._returnModuleList.Clear();
                            for (var i = 0; i < tList.get_Count(); i++){
                                var record = tList.get_Item$$Int32(i);
                                this.HideModule(record.ModuleName);
                            }
                            this.OpenModuleEx(name, depth);
                            for (var i = 0; i < tList.get_Count(); i++){
                                var record = tList.get_Item$$Int32(i);
                                record.Active = false;
                            }
                            this._returnModuleList.InsertRange(0, tList);
                        }
                        else if (firstIndex != lastIndex){
                            var tList = CollectionExtension.ToList$1(UIModuleManager.ModuleRecord.ctor, this._returnModuleList);
                            for (var i = 0; i < firstIndex + 1; i++){
                                this.CloseModule(tList.get_Item$$Int32(i).ModuleName, true);
                            }
                            this._returnModuleList = tList.GetRange(lastIndex, tList.get_Count() - lastIndex);
                            this.OpenModuleEx(name, depth);
                        }
                    }
                    while (false)
                    break;
                    }
                case UIModuleDefinition.ModuleType.SubModule:
                    {
                    if (index >= 0){
                        this._returnModuleList.RemoveAt(index);
                    }
                    this._returnModuleList.Add(new UIModuleManager.ModuleRecord.ctor(name, depth, true));
                    break;
                    }
            }
        },
        CloseModuleEx: function (name, depth){
            if (!this.IsModuleCanReturn(name)){
                return;
            }
            var index = this.FindReturnModuleIndexByName(name);
            if (index < 0){
                return;
            }
            switch (this.GetUIModuleType(name)){
                case UIModuleDefinition.ModuleType.MainModule:
                    {
                    var lastIndex = this.FindMainModuleLastIndex();
                    if (index >= 0){
                        if (index != lastIndex){
                            this._returnModuleList.RemoveAt(index);
                        }
                        else {
                            var lastList = this._returnModuleList.GetRange(lastIndex + 1, this._returnModuleList.get_Count() - lastIndex - 1);
                            var firstList = this._returnModuleList.GetRange(0, lastIndex);
                            this._returnModuleList.Clear();
                            for (var i = 0; i < firstList.get_Count(); i++){
                                var record = firstList.get_Item$$Int32(i);
                                if (this.IsModuleCacheContainsModule(record.ModuleName)){
                                    this.OpenFunModule$$String$$Boolean$$Boolean(record.ModuleName, false, true);
                                }
                            }
                            this._returnModuleList.AddRange(lastList);
                        }
                    }
                    break;
                    }
                case UIModuleDefinition.ModuleType.SubModule:
                    {
                    if (index >= 0){
                        this._returnModuleList.RemoveAt(index);
                    }
                    break;
                    }
            }
        },
        HideModuleEx: function (name, depth){
            if (!this.IsModuleCanReturn(name)){
                return;
            }
            var index = this.FindReturnModuleIndexByName(name);
            if (index < 0){
                return;
            }
            switch (this.GetUIModuleType(name)){
                case UIModuleDefinition.ModuleType.MainModule:
                    {
                    if (index >= 0){
                        var list = this._returnModuleList.GetRange(0, index);
                        this._returnModuleList.RemoveRange(0, index + 1);
                        for (var i = 0; i < list.get_Count(); i++){
                            var record = list.get_Item$$Int32(i);
                            this.CloseModule(record.ModuleName, true);
                        }
                    }
                    break;
                    }
                case UIModuleDefinition.ModuleType.SubModule:
                    {
                    if (index >= 0){
                        this._returnModuleList.RemoveAt(index);
                    }
                    break;
                    }
            }
        },
        checkIsOnlyBaseModule: function (){
            var set = this.FindAllModuleNamesInMoudleCacheDic($CreateAnonymousDelegate(this, function (moduleName){
                if (!this.IsModuleOpened(moduleName))
                    return false;
                var ty = this.GetLayerTypeByModuleName(moduleName);
                return (!UIModuleManager.BaseViewSet.Contains(moduleName)) && ty >= UILayerType.DefaultModule;
            }));
            return CollectionExtension.ToList$1(System.String.ctor, set).get_Count() == 0;
        },
        GetCurDepthByLayerType: function (type){
            var set = new System.Collections.Generic.List$1.ctor(Tuple$2.ctor);
            (function (){
                var $1 = $Ref(null, set);
                var $res = this._moduleCacheDic.TryGetValue(type, $1);
                set = $1.Value;
                return $res;
            }).call(this);
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(Tuple$2.ctor, set)){
                return LayerManager.get_Instance().GetOriginDepthByLayerType(type);
            }
            else {
                var tuple = set.get_Item$$Int32(set.get_Count() - 1);
                return UIHelper.GetMaxDepthWithPanelAndWidget(tuple.p2) + 1;
            }
        },
        GetLayerTypeByModuleName: function (moduleName){
            var ty = UILayerType.Invalid;
            (function (){
                var $1 = $Ref(null, ty);
                var $res = UIModuleManager.uiInfoDic.TryGetValue(moduleName, $1);
                ty = $1.Value;
                return $res;
            }).call(this);
            return ty;
        }
    }
};
JsTypes.push(UIModuleManager);
var VoiceRecognitionManager = {
    fullname: "VoiceRecognitionManager",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            VoiceRecognitionManager.MaxRecordTime = 15;
            VoiceRecognitionManager.ShortVoiceTime = 1;
            VoiceRecognitionManager.LocalFilePath = AssetPipeline.GameResPath.get_persistentDataPath() + "/talk";
            VoiceRecognitionManager._instance = null;
            VoiceRecognitionManager.PlayVoiceStop = "PlayVoiceStop";
        },
        Instance$$: "VoiceRecognitionManager",
        get_Instance: function (){
            VoiceRecognitionManager.CreateInstance();
            return VoiceRecognitionManager._instance;
        },
        CreateInstance: function (){
            if (UnityEngine.Object.op_Equality(VoiceRecognitionManager._instance, null)){
                var go = new UnityEngine.GameObject.ctor$$String("_VoiceRecognitionManager");
                UnityEngine.Object.DontDestroyOnLoad(go);
                VoiceRecognitionManager._instance = go.AddComponent$1(VoiceRecognitionManager.ctor);
                VoiceRecognitionManager._instance.Init();
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._currChannelId = 0;
            this._isRecord = false;
            this._recordFreq = 0;
            this._micConnected = false;
            this._needCheckVoiceRecordData = false;
            this._playAudioSource = null;
            this._recordAudioSource = null;
            this._recordTime = 0;
            this._selfVoiceDic = null;
            this._selfVoiceKeyQueue = null;
            this._currPlayVoiceKey = System.String.Empty;
            this.OnError = null;
            this.OnEndOfSpeech = null;
            this.OnFinalResults = null;
            this.OnSaveVoice = null;
            this.OnRecordTimeOut = null;
            this.OnEndOfSpeechToOther = null;
            this.OnPlayVoice = null;
            this.OnStopVoice = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        add_OnError: function (value){
            this.OnError = $CombineDelegates(this.OnError, value);
        },
        remove_OnError: function (value){
            this.OnError = $RemoveDelegate(this.OnError, value);
        },
        add_OnEndOfSpeech: function (value){
            this.OnEndOfSpeech = $CombineDelegates(this.OnEndOfSpeech, value);
        },
        remove_OnEndOfSpeech: function (value){
            this.OnEndOfSpeech = $RemoveDelegate(this.OnEndOfSpeech, value);
        },
        add_OnFinalResults: function (value){
            this.OnFinalResults = $CombineDelegates(this.OnFinalResults, value);
        },
        remove_OnFinalResults: function (value){
            this.OnFinalResults = $RemoveDelegate(this.OnFinalResults, value);
        },
        add_OnSaveVoice: function (value){
            this.OnSaveVoice = $CombineDelegates(this.OnSaveVoice, value);
        },
        remove_OnSaveVoice: function (value){
            this.OnSaveVoice = $RemoveDelegate(this.OnSaveVoice, value);
        },
        add_OnRecordTimeOut: function (value){
            this.OnRecordTimeOut = $CombineDelegates(this.OnRecordTimeOut, value);
        },
        remove_OnRecordTimeOut: function (value){
            this.OnRecordTimeOut = $RemoveDelegate(this.OnRecordTimeOut, value);
        },
        add_OnEndOfSpeechToOther: function (value){
            this.OnEndOfSpeechToOther = $CombineDelegates(this.OnEndOfSpeechToOther, value);
        },
        remove_OnEndOfSpeechToOther: function (value){
            this.OnEndOfSpeechToOther = $RemoveDelegate(this.OnEndOfSpeechToOther, value);
        },
        Setup: function (){
            this.CheckTalkDirectory();
        },
        CheckTalkDirectory: function (){
            try{
                AssetPipeline.FileHelper.CreateDirectory(VoiceRecognitionManager.LocalFilePath);
            }
            catch(e){
                UnityEngine.Debug.LogError$$Object(e.get_Message());
            }
        },
        Init: function (){
            this._selfVoiceKeyQueue = new System.Collections.Generic.Queue$1.ctor(System.String.ctor);
            this._selfVoiceDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UnityEngine.AudioClip.ctor);
            var devices = UnityEngine.Microphone.get_devices();
            if (devices.length <= 0){
                GameDebuger.Log(">>>>>>>>>>  Microphone Init:Microphone not connected!", null);
                this._micConnected = false;
            }
            else {
                this._micConnected = true;
                var min;
                var max;
                (function (){
                    var $1 = $Ref(null, min);
                    var $2 = $Ref(null, max);
                    var $res = UnityEngine.Microphone.GetDeviceCaps(null, $1, $2);
                    min = $1.Value;
                    max = $2.Value;
                    return $res;
                }).call(this);
                if (max > 0){
                    this._recordFreq = max > 8000 ? 8000 : max;
                }
                else {
                    this._recordFreq = 8000;
                }
                this._recordAudioSource = this.get_gameObject().AddComponent$1(UnityEngine.AudioSource.ctor);
                this._playAudioSource = this.get_gameObject().AddComponent$1(UnityEngine.AudioSource.ctor);
                var deviceNames = "";
                for (var i = 0; i < devices.length; i++){
                    deviceNames += devices[i] + "\n";
                }
                GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object(">>>>>>>>>>  Microphone Init:Microphone connected!\n{0}\nMaxRecordFreq:{1}\nCurRecordFreq:{2}", deviceNames, max, this._recordFreq), null);
            }
        },
        IsMicConnected: function (){
            return this._micConnected;
        },
        Record: function (channelId){
            if (this._isRecord || UnityEngine.Microphone.IsRecording(null)){
                TipManager.AddTip("正在录音中...", false, false, "");
                return;
            }
            if (this._micConnected && UnityEngine.Object.op_Inequality(this._recordAudioSource, null)){
                this._currChannelId = channelId;
                this._isRecord = true;
                this._recordAudioSource.Stop();
                this._recordAudioSource.set_mute(true);
                this._recordAudioSource.set_clip(UnityEngine.Microphone.Start(null, true, 15 /* MaxRecordTime */, this._recordFreq));
                this._recordAudioSource.Play();
                this._recordTime = 0;
                this._needCheckVoiceRecordData = true;
                JSTimer.get_Instance().SetupCoolDown("voiceRecordTime", 15, $CreateDelegate(this, this.OnUpdateRecordTime), $CreateDelegate(this, this.OnRecordTimeFinished), 0.1, false);
                GameDebuger.Log("========StartRecord========", null);
            }
        },
        Stop: function (OnStop){
            if (this._micConnected && UnityEngine.Object.op_Inequality(this._recordAudioSource, null)){
                GameDebuger.Log("录音结束...", null);
                var lastPos = UnityEngine.Microphone.GetPosition(null);
                UnityEngine.Microphone.End(null);
                this._recordAudioSource.Stop();
                AudioManager.get_Instance().PlayVoiceWhenFinishRecord();
                JSTimer.get_Instance().CancelCd("voiceRecordTime");
                if (!this.IsEnoughLength()){
                    this._isRecord = false;
                    if (this.OnError != null)
                        this.OnError(1 /* VoiceErrorCode.ERROR_SHORT_VOICE */, "录音数据太短");
                    return;
                }
                if (OnStop != null)
                    OnStop();
                if (this._currChannelId < 0){
                    var clip = VoiceHelper.CopyToNewClip(this._recordAudioSource, this._recordFreq);
                    if (this.OnEndOfSpeechToOther != null)
                        this.OnEndOfSpeechToOther(this._currChannelId, this._recordTime, clip, lastPos);
                }
                else {
                    var voiceKey = QiNiuFileExt.get_NewKey();
                    GameDebuger.Log("录音结束...生成key: " + voiceKey, null);
                    this.SavaSelfVoiceCache$$String(voiceKey);
                    this.SaveVoice(voiceKey, this._recordTime, lastPos);
                    if (this.OnEndOfSpeech != null){
                        this.OnEndOfSpeech(this._currChannelId, voiceKey, this._recordTime);
                    }
                }
                GameDebuger.Log("Record语音长度,clipLength:" + UnityEngine.Mathf.CeilToInt(this._recordAudioSource.get_clip().get_length()) + "  ,计时器时间:" + this._recordTime + "  ,lastPos:" + lastPos, null);
                this._isRecord = false;
            }
        },
        Cancel: function (){
            if (this._micConnected && UnityEngine.Object.op_Inequality(this._recordAudioSource, null)){
                this._isRecord = false;
                UnityEngine.Microphone.End(null);
                this._recordAudioSource.Stop();
                AudioManager.get_Instance().PlayVoiceWhenFinishRecord();
                JSTimer.get_Instance().CancelCd("voiceRecordTime");
            }
        },
        SaveVoice: function (voiceKey, recordTime, lastPos){
            VoiceSaveHelper.SaveVoice(voiceKey, this._recordAudioSource.get_clip(), ModelManager.get_Player().GetPlayerId(), this._currChannelId, recordTime, lastPos, "h5-private" /* GameConfig.QINIU_BUCKET */, this.OnFinalResults, this.OnSaveVoice, this.OnError);
        },
        IsRecord: function (){
            return this._isRecord;
        },
        ValidateVoiceData: function (){
            return VoiceHelper.ValidateVoiceData(this._recordAudioSource);
        },
        SavaSelfVoiceCache$$String: function (voiceKey){
            var clip = VoiceHelper.CopyToNewClip(this._recordAudioSource, this._recordFreq);
            GameDebuger.Log("录音结束...提取录音数据: " + voiceKey, null);
            if (UnityEngine.Object.op_Inequality(clip, null)){
                this._selfVoiceKeyQueue.Enqueue(voiceKey);
                this._selfVoiceDic.set_Item$$TKey(voiceKey, clip);
            }
        },
        SavaSelfVoiceCache$$String$$AudioClip: function (voiceKey, clip){
            this._selfVoiceDic.set_Item$$TKey(voiceKey, clip);
        },
        OnUpdateRecordTime: function (time){
            if (this._needCheckVoiceRecordData && this._recordTime >= 1){
                this._needCheckVoiceRecordData = false;
                if (!this.ValidateVoiceData()){
                    this.Cancel();
                    if (this.OnError != null)
                        this.OnError(2 /* VoiceErrorCode.ERROR_NO_DATA */, "录音失败,请检查麦克风权限");
                }
            }
            this._recordTime = 15 - time;
        },
        OnRecordTimeFinished: function (){
            if (this._recordTime > 15){
                this._recordTime = 15;
            }
            this.Stop(null);
            if (this.OnRecordTimeOut != null){
                TipManager.AddTip(System.String.Format$$String$$Object("最长只能录制{0}秒的音频", 15 /* MaxRecordTime */), false, false, "");
                this.OnRecordTimeOut();
            }
        },
        IsEnoughLength: function (){
            if (UnityEngine.Object.op_Inequality(this._recordAudioSource, null)){
                if (this._recordTime > 1 /* ShortVoiceTime */){
                    return true;
                }
                TipManager.AddTip("语音录制太短", false, false, "");
                return false;
            }
            return false;
        },
        PlayRecord: function (){
            if (UnityEngine.Object.op_Inequality(this._recordAudioSource, null))
                this._recordAudioSource.Play();
        },
        CleanupVoiceCache: function (){
            try{
                AssetPipeline.FileHelper.DeleteDirectory(VoiceRecognitionManager.LocalFilePath, true);
            }
            catch(e){
                UnityEngine.Debug.LogError$$Object(e.get_Message());
            }
        },
        add_OnPlayVoice: function (value){
            this.OnPlayVoice = $CombineDelegates(this.OnPlayVoice, value);
        },
        remove_OnPlayVoice: function (value){
            this.OnPlayVoice = $RemoveDelegate(this.OnPlayVoice, value);
        },
        add_OnStopVoice: function (value){
            this.OnStopVoice = $CombineDelegates(this.OnStopVoice, value);
        },
        remove_OnStopVoice: function (value){
            this.OnStopVoice = $RemoveDelegate(this.OnStopVoice, value);
        },
        GetCurrPlayVoiceKey: function (){
            return this._currPlayVoiceKey;
        },
        IsPlayingVoice: function (){
            if (UnityEngine.Object.op_Inequality(this._playAudioSource, null))
                return this._playAudioSource.get_isPlaying();
            return true;
        },
        PlaySoundByClip: function (clip, fileKey, recordTime){
            if (UnityEngine.Object.op_Equality(this._playAudioSource, null))
                return;
            if (clip.get_length() > 0){
                AudioManager.get_Instance().StopVolumeWhenRecordVoice();
                GameDebuger.Log("音频剪辑准备好了，开始播放！", null);
                this._playAudioSource.set_clip(clip);
                GameDebuger.TODO("_playAudioSource.volume = ModelManager.SystemData.voiceValue / 100.0f;");
                this._playAudioSource.set_loop(false);
                this._playAudioSource.Play();
                GameDebuger.Log("语音长度: " + recordTime, null);
                if (recordTime == 0)
                    recordTime = clip.get_length() / 8;
                recordTime += 0.5;
                this._currPlayVoiceKey = fileKey;
                JSTimer.get_Instance().SetupCoolDown("PlayVoiceStop" /* PlayVoiceStop */, recordTime, null, $CreateDelegate(this, this.OnVoiceStop), 0.1, false);
                if (this.OnPlayVoice != null){
                    this.OnPlayVoice(this._currPlayVoiceKey);
                }
            }
        },
        OnVoiceStop: function (){
            if (UnityEngine.Object.op_Inequality(this._playAudioSource, null)){
                this._playAudioSource.Stop();
            }
            GameDebuger.Log("语音停止播放了....", null);
            if (this.OnStopVoice != null){
                this.OnStopVoice(this._currPlayVoiceKey, true);
            }
            this._currPlayVoiceKey = System.String.Empty;
            AudioManager.get_Instance().PlayVoiceWhenFinishRecord();
        },
        StopCurrVoice: function (needContinue){
            if (UnityEngine.Object.op_Inequality(this._playAudioSource, null) && this._playAudioSource.get_isPlaying()){
                this._playAudioSource.Stop();
                if (System.String.IsNullOrEmpty(this._currPlayVoiceKey) && this.OnStopVoice != null){
                    this.OnStopVoice(this._currPlayVoiceKey, needContinue);
                }
                this._currPlayVoiceKey = System.String.Empty;
            }
        },
        IsPlayVoiceTheSameAsCurPlaying: function (fileKey){
            if (this.IsPlayingVoice() && this._currPlayVoiceKey == fileKey){
                if (UnityEngine.Object.op_Inequality(this._playAudioSource, null) && this._playAudioSource.get_isPlaying()){
                    JSTimer.get_Instance().CancelCd("PlayVoiceStop" /* PlayVoiceStop */);
                    this.OnVoiceStop();
                }
                return true;
            }
            return false;
        },
        PlayVoice: function (fileKey, recordTime){
            if (this._isRecord){
                this.StopCurrVoice(false);
                return;
            }
            if (this.IsPlayVoiceTheSameAsCurPlaying(fileKey))
                return;
            this.StopCurrVoice(false);
            if (this._selfVoiceDic.ContainsKey(fileKey)){
                this.PlaySoundByClip(this._selfVoiceDic.get_Item$$TKey(fileKey), fileKey, recordTime);
                return;
            }
            var wavPath = VoiceRecognitionManager.LocalFilePath + "/" + fileKey;
            if (System.IO.File.Exists(wavPath)){
                GameDebuger.Log("在本地文件缓存中", null);
                this.LoadLocalVoice(wavPath, fileKey, recordTime);
            }
            else {
                GameDebuger.Log("从网络存储获得数据", null);
                var actual = QiNiuFileExt.GetFileUrl("ohpfvrgah.bkt.clouddn.com" /* GameConfig.QINIU_DOMAIN */, fileKey, null, null);
                this.LoadInternetVoice(actual, fileKey, recordTime);
            }
        },
        LoadLocalVoice: function (filePath, fileKey, recordTime){
            VoiceLoadHelper.LoadLocalVoice(filePath, $CreateAnonymousDelegate(this, function (clip){
                if (UnityEngine.Object.op_Inequality(clip, null))
                    this.PlaySoundByClip(clip, fileKey, recordTime);
                else
                    TipManager.AddTip("获取不到音频" + fileKey, false, false, "");
            }));
        },
        LoadInternetVoice: function (actual, fileKey, recordTime){
            VoiceLoadHelper.LoadInternetVoice(actual, fileKey, $CreateAnonymousDelegate(this, function (isSuccess){
                if (isSuccess){
                    this.PlayVoice(fileKey, recordTime);
                }
            }), this.OnError);
        },
        GetVoiceVolume: function (){
            return VoiceHelper.GetVoiceVolume(this._recordAudioSource);
        }
    }
};
JsTypes.push(VoiceRecognitionManager);
var IQuadObject$1 = {
    fullname: "IQuadObject$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.Collections.Generic.IEqualityComparer$1"],
    Kind: "Interface"
};
JsTypes.push(IQuadObject$1);
var MathHelper = {
    fullname: "MathHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        Contains: function (boundsA, boundsB){
            var center = boundsB.get_center();
            var extents = boundsB.get_extents();
            var NW = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(center.x - extents.x, 0, center.y + extents.y);
            var SE = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(center.x + extents.x, 0, center.y - extents.y);
            return boundsA.Contains(boundsB.get_min()) && boundsA.Contains(boundsB.get_max()) && boundsA.Contains(NW) && boundsA.Contains(SE);
        },
        Bounds2D$$Vector2$$Vector2: function (center, size){
            var bounds = new UnityEngine.Bounds.ctor$$Vector3$$Vector3(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(center.x, 0, center.y), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(size.x, 0, size.y));
            return bounds;
        },
        Bounds2D$$Single$$Single$$Single$$Single: function (centerX, centerY, width, height){
            var bounds = new UnityEngine.Bounds.ctor$$Vector3$$Vector3(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(centerX, 0, centerY), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(width, 0, height));
            return bounds;
        },
        x2D: function (bounds){
            return bounds.get_center().x;
        },
        y2D: function (bounds){
            return bounds.get_center().z;
        },
        width2D: function (bounds){
            return bounds.get_size().x;
        },
        height2D: function (bounds){
            return bounds.get_size().z;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(MathHelper);
var QuadTree$1 = {
    fullname: "QuadTree$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        DrawBounds: function (bounds, color, duration, y){
            var SW = bounds.get_min();
            var NE = bounds.get_max();
            SW.y = y;
            NE.y = y;
            var SE = UnityEngine.Vector3.op_Addition(SW, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(MathHelper.width2D(bounds), 0, 0));
            var NW = UnityEngine.Vector3.op_Addition(SW, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0, MathHelper.height2D(bounds)));
            UnityEngine.Debug.DrawLine$$Vector3$$Vector3$$Color$$Single(SW, SE, color, duration);
            UnityEngine.Debug.DrawLine$$Vector3$$Vector3$$Color$$Single(SE, NE, color, duration);
            UnityEngine.Debug.DrawLine$$Vector3$$Vector3$$Color$$Single(NE, NW, color, duration);
            UnityEngine.Debug.DrawLine$$Vector3$$Vector3$$Color$$Single(NW, SW, color, duration);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor$$Vector2$$Int32: function (T, minLeafSize, maxObjectsPerLeaf){
            this.T = T;
            this.sort = false;
            this.minLeafSize = new UnityEngine.Vector2.ctor();
            this.maxObjectsPerLeaf = 0;
            this.root = null;
            this.objectToNodeLookup = new System.Collections.Generic.Dictionary$2.ctor(this.T, QuadTree.QuadNode$1.ctor);
            this.objectSortOrder = new System.Collections.Generic.Dictionary$2.ctor(this.T, System.Int32.ctor);
            this.objectSortId = 0;
            this.colors = [UnityEngine.Color.get_red(), UnityEngine.Color.get_yellow(), UnityEngine.Color.get_blue(), UnityEngine.Color.get_white()];
            System.Object.ctor.call(this);
            this.minLeafSize = minLeafSize;
            this.maxObjectsPerLeaf = maxObjectsPerLeaf;
        },
        Root$$: "QuadTree`1+QuadNode[[`0]]",
        get_Root: function (){
            return this.root;
        },
        GetSortOrder: function (quadObject){
            if (!this.objectSortOrder.ContainsKey(quadObject))
                return -1 /* -1 */;
            else {
                return this.objectSortOrder.get_Item$$TKey(quadObject);
            }
        },
        ctor$$Vector2$$Int32$$Boolean: function (T, minLeafSize, maxObjectsPerLeaf, sort){
            this.T = T;
            this.sort = false;
            this.minLeafSize = new UnityEngine.Vector2.ctor();
            this.maxObjectsPerLeaf = 0;
            this.root = null;
            this.objectToNodeLookup = new System.Collections.Generic.Dictionary$2.ctor(this.T, QuadTree.QuadNode$1.ctor);
            this.objectSortOrder = new System.Collections.Generic.Dictionary$2.ctor(this.T, System.Int32.ctor);
            this.objectSortId = 0;
            this.colors = [UnityEngine.Color.get_red(), UnityEngine.Color.get_yellow(), UnityEngine.Color.get_blue(), UnityEngine.Color.get_white()];
            QuadTree$1.ctor$$Vector2$$Int32.call(this, this.T, minLeafSize, maxObjectsPerLeaf);
            this.sort = sort;
        },
        Insert: function (quadObject){
            if (this.sort & !this.objectSortOrder.ContainsKey(quadObject)){
                this.objectSortOrder.Add(quadObject, this.objectSortId++);
            }
            var bounds = quadObject.get_Bounds();
            if (this.root == null){
                var rootSize = new UnityEngine.Vector2.ctor$$Single$$Single(UnityEngine.Mathf.Ceil(MathHelper.width2D(bounds) / this.minLeafSize.x), UnityEngine.Mathf.Ceil(MathHelper.height2D(bounds) / this.minLeafSize.y));
                var multiplier = UnityEngine.Mathf.Max$$Single$$Single(rootSize.x, rootSize.y);
                multiplier = UnityEngine.Mathf.Max$$Single$$Single(1, multiplier);
                rootSize = new UnityEngine.Vector2.ctor$$Single$$Single(this.minLeafSize.x * multiplier, this.minLeafSize.y * multiplier);
                var center = bounds.get_center();
                this.root = new QuadTree.QuadNode$1.ctor$$Bounds(this.T, MathHelper.Bounds2D$$Vector2$$Vector2(UnityEngine.Vector2.op_Implicit$$Vector3(center), rootSize));
            }
            while (!MathHelper.Contains(this.root.get_Bounds(), bounds)){
                this.ExpandRoot(bounds);
            }
            this.InsertNodeObject(this.root, quadObject);
        },
        Query$$Bounds: function (bounds){
            var results = new System.Collections.Generic.List$1.ctor(this.T);
            if (this.root != null)
                this.Query$$Bounds$$QuadNode$1$$List$1(bounds, this.root, results);
            if (this.sort)
                results.Sort$$Comparison$1($CreateAnonymousDelegate(this, function (a, b){
                    return this.objectSortOrder.get_Item$$TKey(a).CompareTo$$Int32(this.objectSortOrder.get_Item$$TKey(b));
                }));
            return results;
        },
        Query$$Bounds$$QuadNode$1$$List$1: function (bounds, node, results){
            if (node == null)
                return;
            if (bounds.Intersects(node.get_Bounds())){
                for (var i = 0; i < node.Objects.get_Count(); i++){
                    var quadObject = node.Objects.get_Item$$Int32(i);
                    if (bounds.Intersects(quadObject.get_Bounds()))
                        results.Add(quadObject);
                }
                for (var i = 0; i < node.Nodes.get_Count(); i++){
                    var childNode = node.Nodes.get_Item$$Int32(i);
                    this.Query$$Bounds$$QuadNode$1$$List$1(bounds, childNode, results);
                }
            }
        },
        ExpandRoot: function (newChildBounds){
            var isNorth = MathHelper.y2D(this.root.get_Bounds()) < MathHelper.y2D(newChildBounds);
            var isWest = MathHelper.x2D(this.root.get_Bounds()) < MathHelper.x2D(newChildBounds);
            var rootDirection;
            if (isNorth){
                rootDirection = isWest ? QuadTree.Direction$1.NW : QuadTree.Direction$1.NE;
            }
            else {
                rootDirection = isWest ? QuadTree.Direction$1.SW : QuadTree.Direction$1.SE;
            }
            var newX = (rootDirection == QuadTree.Direction$1.NW || rootDirection == QuadTree.Direction$1.SW) ? MathHelper.x2D(this.root.get_Bounds()) + MathHelper.width2D(this.root.get_Bounds()) / 2 : MathHelper.x2D(this.root.get_Bounds()) - MathHelper.width2D(this.root.get_Bounds()) / 2;
            var newY = (rootDirection == QuadTree.Direction$1.NW || rootDirection == QuadTree.Direction$1.NE) ? MathHelper.y2D(this.root.get_Bounds()) + MathHelper.height2D(this.root.get_Bounds()) / 2 : MathHelper.y2D(this.root.get_Bounds()) - MathHelper.height2D(this.root.get_Bounds()) / 2;
            var newRootBounds = MathHelper.Bounds2D$$Single$$Single$$Single$$Single(newX, newY, MathHelper.width2D(this.root.get_Bounds()) * 2, MathHelper.height2D(this.root.get_Bounds()) * 2);
            var newRoot = new QuadTree.QuadNode$1.ctor$$Bounds(this.T, newRootBounds);
            this.SetupChildNodes(newRoot);
            newRoot.set_Item$$Direction$1(rootDirection, this.root);
            this.root = newRoot;
        },
        InsertNodeObject: function (node, quadObject){
            if (!MathHelper.Contains(node.get_Bounds(), quadObject.get_Bounds())){
                GameDebuger.LogError("This should not happen, child does not fit within node bounds", null);
                return;
            }
            if (!node.HasChildNodes() && node.Objects.get_Count() + 1 > this.maxObjectsPerLeaf){
                this.SetupChildNodes(node);
                var childObjects = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(this.T, node.Objects);
                var childrenToRelocate = new System.Collections.Generic.List$1.ctor(this.T);
                for (var i = 0; i < childObjects.get_Count(); i++){
                    var childObject = childObjects.get_Item$$Int32(i);
                    for (var j = 0; j < node.Nodes.get_Count(); j++){
                        var childNode = node.Nodes.get_Item$$Int32(j);
                        if (childNode == null)
                            continue;
                        if (MathHelper.Contains(childNode.get_Bounds(), childObject.get_Bounds())){
                            childrenToRelocate.Add(childObject);
                        }
                    }
                }
                for (var i = 0; i < childrenToRelocate.get_Count(); i++){
                    var childObject = childrenToRelocate.get_Item$$Int32(i);
                    this.RemoveQuadObjectFromNode(childObject);
                    this.InsertNodeObject(node, childObject);
                }
            }
            for (var i = 0; i < node.Nodes.get_Count(); i++){
                var childNode = node.Nodes.get_Item$$Int32(i);
                if (childNode != null){
                    if (MathHelper.Contains(childNode.get_Bounds(), quadObject.get_Bounds())){
                        this.InsertNodeObject(childNode, quadObject);
                        return;
                    }
                }
            }
            this.AddQuadObjectToNode(node, quadObject);
        },
        ClearQuadObjectsFromNode: function (node){
            var quadObjects = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(this.T, node.Objects);
            for (var i = 0; i < quadObjects.get_Count(); i++){
                var quadObject = quadObjects.get_Item$$Int32(i);
                this.RemoveQuadObjectFromNode(quadObject);
            }
        },
        RemoveQuadObjectFromNode: function (quadObject){
            var node = this.objectToNodeLookup.get_Item$$TKey(quadObject);
            node.quadObjects.Remove(quadObject);
            this.objectToNodeLookup.Remove(quadObject);
            quadObject.remove_BoundsChanged($CreateDelegate(this, this.quadObject_BoundsChanged));
        },
        AddQuadObjectToNode: function (node, quadObject){
            node.quadObjects.Add(quadObject);
            this.objectToNodeLookup.Add(quadObject, node);
            quadObject.add_BoundsChanged($CreateDelegate(this, this.quadObject_BoundsChanged));
        },
        quadObject_BoundsChanged: function (quadObject){
            if (quadObject != null){
                var node = this.objectToNodeLookup.get_Item$$TKey(quadObject);
                if (!MathHelper.Contains(node.get_Bounds(), quadObject.get_Bounds()) || node.HasChildNodes()){
                    this.RemoveQuadObjectFromNode(quadObject);
                    this.Insert(quadObject);
                    if (node.get_Parent() != null){
                        this.CheckChildNodes(node.get_Parent());
                    }
                }
            }
        },
        SetupChildNodes: function (node){
            var childWidth = MathHelper.width2D(node.get_Bounds()) / 2;
            var childHeight = MathHelper.height2D(node.get_Bounds()) / 2;
            if (this.minLeafSize.x <= childWidth && this.minLeafSize.y <= childHeight){
                node.set_Item$$Direction$1(QuadTree.Direction$1.NW, new QuadTree.QuadNode$1.ctor$$Single$$Single$$Single$$Single(this.T, MathHelper.x2D(node.get_Bounds()) - childWidth / 2, MathHelper.y2D(node.get_Bounds()) + childWidth / 2, childWidth, childHeight));
                node.set_Item$$Direction$1(QuadTree.Direction$1.NE, new QuadTree.QuadNode$1.ctor$$Single$$Single$$Single$$Single(this.T, MathHelper.x2D(node.get_Bounds()) + childWidth / 2, MathHelper.y2D(node.get_Bounds()) + childHeight / 2, childWidth, childHeight));
                node.set_Item$$Direction$1(QuadTree.Direction$1.SW, new QuadTree.QuadNode$1.ctor$$Single$$Single$$Single$$Single(this.T, MathHelper.x2D(node.get_Bounds()) - childWidth / 2, MathHelper.y2D(node.get_Bounds()) - childHeight / 2, childWidth, childHeight));
                node.set_Item$$Direction$1(QuadTree.Direction$1.SE, new QuadTree.QuadNode$1.ctor$$Single$$Single$$Single$$Single(this.T, MathHelper.x2D(node.get_Bounds()) + childWidth / 2, MathHelper.y2D(node.get_Bounds()) - childHeight / 2, childWidth, childHeight));
            }
        },
        Remove: function (quadObject){
            if (this.sort && this.objectSortOrder.ContainsKey(quadObject)){
                this.objectSortOrder.Remove(quadObject);
            }
            if (!this.objectToNodeLookup.ContainsKey(quadObject)){
                GameDebuger.LogError("quadObject not found", null);
                return;
            }
            var containingNode = this.objectToNodeLookup.get_Item$$TKey(quadObject);
            this.RemoveQuadObjectFromNode(quadObject);
            if (containingNode.get_Parent() != null)
                this.CheckChildNodes(containingNode.get_Parent());
        },
        CheckChildNodes: function (node){
            if (this.GetQuadObjectCount$$QuadNode$1(node) <= this.maxObjectsPerLeaf){
                var subChildObjects = this.GetChildObjects(node);
                for (var i = 0; i < subChildObjects.get_Count(); i++){
                    var childObject = subChildObjects.get_Item$$Int32(i);
                    if (!node.Objects.Contains(childObject)){
                        this.RemoveQuadObjectFromNode(childObject);
                        this.AddQuadObjectToNode(node, childObject);
                    }
                }
                if (node.get_Item$$Direction$1(QuadTree.Direction$1.NW) != null){
                    node.get_Item$$Direction$1(QuadTree.Direction$1.NW).set_Parent(null);
                    node.set_Item$$Direction$1(QuadTree.Direction$1.NW, null);
                }
                if (node.get_Item$$Direction$1(QuadTree.Direction$1.NE) != null){
                    node.get_Item$$Direction$1(QuadTree.Direction$1.NE).set_Parent(null);
                    node.set_Item$$Direction$1(QuadTree.Direction$1.NE, null);
                }
                if (node.get_Item$$Direction$1(QuadTree.Direction$1.SW) != null){
                    node.get_Item$$Direction$1(QuadTree.Direction$1.SW).set_Parent(null);
                    node.set_Item$$Direction$1(QuadTree.Direction$1.SW, null);
                }
                if (node.get_Item$$Direction$1(QuadTree.Direction$1.SE) != null){
                    node.get_Item$$Direction$1(QuadTree.Direction$1.SE).set_Parent(null);
                    node.set_Item$$Direction$1(QuadTree.Direction$1.SE, null);
                }
                if (node.get_Parent() != null)
                    this.CheckChildNodes(node.get_Parent());
                else {
                    var numQuadrantsWithObjects = 0;
                    var nodeWithObjects = null;
                    for (var i = 0; i < node.Nodes.get_Count(); i++){
                        var childNode = node.Nodes.get_Item$$Int32(i);
                        if (childNode != null && this.GetQuadObjectCount$$QuadNode$1(childNode) > 0){
                            numQuadrantsWithObjects++;
                            nodeWithObjects = childNode;
                            if (numQuadrantsWithObjects > 1)
                                break;
                        }
                    }
                    if (numQuadrantsWithObjects == 1){
                        for (var i = 0; i < node.Nodes.get_Count(); i++){
                            var childNode = node.Nodes.get_Item$$Int32(i);
                            if (childNode != nodeWithObjects)
                                childNode.set_Parent(null);
                        }
                        this.root = nodeWithObjects;
                    }
                }
            }
        },
        GetChildObjects: function (node){
            var results = new System.Collections.Generic.List$1.ctor(this.T);
            results.AddRange(node.quadObjects);
            for (var i = 0; i < node.Nodes.get_Count(); i++){
                var childNode = node.Nodes.get_Item$$Int32(i);
                if (childNode != null)
                    results.AddRange(this.GetChildObjects(childNode));
            }
            return results;
        },
        GetQuadObjectCount: function (){
            if (this.root == null)
                return 0;
            var count = this.GetQuadObjectCount$$QuadNode$1(this.root);
            return count;
        },
        GetQuadObjectCount$$QuadNode$1: function (node){
            var count = node.Objects.get_Count();
            for (var i = 0; i < node.Nodes.get_Count(); i++){
                var childNode = node.Nodes.get_Item$$Int32(i);
                if (childNode != null){
                    count += this.GetQuadObjectCount$$QuadNode$1(childNode);
                }
            }
            return count;
        },
        GetQuadNodeCount: function (){
            if (this.root == null)
                return 0;
            var count = this.GetQuadNodeCount$$QuadNode$1$$Int32(this.root, 1);
            return count;
        },
        GetQuadNodeCount$$QuadNode$1$$Int32: function (node, count){
            if (node == null)
                return count;
            for (var i = 0; i < node.Nodes.get_Count(); i++){
                var childNode = node.Nodes.get_Item$$Int32(i);
                if (childNode != null)
                    count++;
            }
            return count;
        },
        GetAllNodes: function (){
            var results = new System.Collections.Generic.List$1.ctor(QuadTree.QuadNode$1.ctor);
            if (this.root != null){
                results.Add(this.root);
                this.GetChildNodes(this.root, results);
            }
            return results;
        },
        GetChildNodes: function (node, results){
            for (var i = 0; i < node.Nodes.get_Count(); i++){
                var childNode = node.Nodes.get_Item$$Int32(i);
                if (childNode != null){
                    results.Add(childNode);
                    this.GetChildNodes(childNode, results);
                }
            }
        },
        DrawTree: function (duration){
            if (this.root != null){
                this.DrawNode(this.root, UnityEngine.Color.get_green(), duration, 0.1);
                this.DrawChild(this.root, duration, 0.1);
            }
        },
        DrawChild: function (node, duration, y){
            if (node.HasChildNodes() == false)
                return;
            var i = 0;
            y += 0.1;
            for (var j = 0; j < node.Nodes.get_Count(); j++){
                var item = node.Nodes.get_Item$$Int32(j);
                this.DrawNode(item, this.colors[i++], duration, y);
                this.DrawChild(item, duration, y);
            }
        },
        DrawNode: function (node, color, duration, y){
            QuadTree$1.DrawBounds(node.get_Bounds(), color, duration, y);
            for (var i = 0; i < node.Objects.get_Count(); i++){
                var item = node.Objects.get_Item$$Int32(i);
                QuadTree$1.DrawBounds(item.get_Bounds(), color, duration, y);
            }
        }
    }
};
JsTypes.push(QuadTree$1);
var ProxyBackpack = {
    fullname: "ProxyBackpack",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenBackpack: function (tab){
            BackpackDataMgr.BackpackViewController.Open(tab, ItemTypeTab.Item);
        },
        OpenTempBackpack: function (){
            BackpackDataMgr.TempBackPackViewController.Open();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyBackpack);
var Equipment = {
    fullname: "Equipment",
    staticDefinition: {
        EquipPartType_Unknown: 0,
        EquipPartType_Weapon: 1,
        EquipPartType_Helmet: 2,
        EquipPartType_Armor: 3,
        EquipPartType_Necklace: 4,
        EquipPartType_Girdle: 5,
        EquipPartType_Shoe: 6
    },
    Kind: "Enum"
};
JsTypes.push(Equipment);
var BackpackDataMgr = {
    fullname: "BackpackDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BackpackDataMgr._ins = null;
            BackpackDataMgr.stream = new UniRx.Subject$1.ctor(IBackpackData.ctor);
        },
        Instance$$: "BackpackDataMgr",
        get_Instance: function (){
            if (BackpackDataMgr._ins == null){
                BackpackDataMgr._ins = new BackpackDataMgr.ctor();
                BackpackDataMgr._ins.Init();
            }
            return BackpackDataMgr._ins;
        },
        Stream$$: "UniRx.IObservableExpand`1[[IBackpackData]]",
        get_Stream: function (){
            return BackpackDataMgr.stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = null;
            System.Object.ctor.call(this);
        },
        Init: function (){
            this._data = new BackpackDataMgr.BackpackData.ctor();
        },
        Dispose: function (){
            this._data.Dispose();
            this._data = null;
        },
        FireData: function (){
            if (this._data != null)
                BackpackDataMgr.stream.OnNext(this._data);
        }
    }
};
JsTypes.push(BackpackDataMgr);
var ItemContainerController = {
    fullname: "ItemContainerController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._containerScrollView = null;
            this._disposable = null;
            this._cells = new System.Collections.Generic.List$1.ctor$$Int32(ItemCellController.ctor, 10);
            this._showTipsPos = null;
            this.itemClickEvt = new UniRx.Subject$1.ctor(System.Int32.ctor);
            MonolessViewController$1.ctor.call(this, ItemContainer.ctor);
        },
        ContainerScrollView$$: "UIScrollView",
        get_ContainerScrollView: function (){
            return this._containerScrollView;
        },
        set_ContainerScrollView: function (value){
            this.get_View().ItemContainer_UIDragScrollView.scrollView = this._containerScrollView;
            this._containerScrollView = value;
        },
        ShowTipsPos$$: "UnityEngine.GameObject",
        get_ShowTipsPos: function (){
            return this._showTipsPos;
        },
        set_ShowTipsPos: function (value){
            this._showTipsPos = value;
            for (var index = 0; index < this._cells.get_Count(); index++){
            }
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            this.itemClickEvt = UniRx.SubjectExtensions.CloseOnceNull$1(System.Int32.ctor, this.itemClickEvt);
            this._disposable.Dispose();
            this._disposable = null;
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data, length){
            if (!this.get_gameObject().get_activeSelf())
                return;
            var items = (function (){
                var $v22 = new System.Collections.Generic.List$1.ctor$$Int32(AppDto.BagItemDto.ctor, 25 /* ItemsContainerConst.PageCapability */);
                $v22.Add(null);
                return $v22;
            }).call(this);
            CollectionExtension.ForEach$1(AppDto.BagItemDto.ctor, data, $CreateAnonymousDelegate(this, function (dto){
                items.set_Item$$Int32(dto.index, dto);
            }));
            CollectionExtension.ForEachI$1(AppDto.BagItemDto.ctor, data, $CreateAnonymousDelegate(this, function (dto, i){
                this.AddBackpackOrWarehouseItemCell(dto, i, i >= length);
            }));
        },
        AddBackpackOrWarehouseItemCell: function (dto, index, isLock){
            var itemIndex = (this.get_View().ItemContainer_UIPageInfo.page - 1) * 25 /* ItemsContainerConst.PageCapability */ + index;
            var cell = null;
            (function (){
                var $1 = $Ref(null, cell);
                var $res = CollectionExtension.TryGetValue$1(ItemCellController.ctor, this._cells, index, $1);
                cell = $1.Value;
                return $res;
            }).call(this);
            if (cell == null){
                cell = this.AddCachedChild$2$$GameObject$$String$$String(ItemCellController.ctor, ItemCell.ctor, this.get_View().GridGroup_UIGrid.get_gameObject(), "ItemCell" /* ItemCell.NAME */, "itemcell_" + index.toString());
                cell.set_ContainerScrollView(this.get_ContainerScrollView());
                this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, cell.get_OnCellClick(), $CreateAnonymousDelegate(this, function (d){
                    this.itemClickEvt.OnNext(itemIndex);
                })));
                this._cells.Add(cell);
            }
            cell.UpdateView$$BagItemDto$$Boolean(dto, isLock);
        },
        OnItemClick$$: "UniRx.IObservable`1[[System.Int32]]",
        get_OnItemClick: function (){
            return this.itemClickEvt;
        },
        SetActive: function (active){
            this.get_gameObject().SetActive(active);
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(ItemContainerController);
var ItemsPageContainerController = {
    fullname: "ItemsPageContainerController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.tabMgr = TabbtnManager.Create();
            this._itemContainerControllerList = new System.Collections.Generic.List$1.ctor$$Int32(ItemContainerController.ctor, 5);
            this.itemClickEvt = new UniRx.Subject$1.ctor(System.Int32.ctor);
            this._disposable = null;
            MonolessViewController$1.ctor.call(this, ItemsPageContainer.ctor);
        },
        OnItemClick$$: "UniRx.IObservable`1[[System.Int32]]",
        get_OnItemClick: function (){
            return this.itemClickEvt;
        },
        AfterInitView: function (){
            this.get_View().PageGroup_UIPageGroup.UpdatePage(2, 10);
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            this.tabMgr = null;
            this._disposable.Dispose();
            this.itemClickEvt = UniRx.SubjectExtensions.CloseOnceNull$1(System.Int32.ctor, this.itemClickEvt);
            this.get_View().PageGroup_UIPageGroup.ClearPage();
        },
        RemoveCustomEvent: function (){
        },
        InitTabBtns: function (nameSet, tabSelectIdx){
            CollectionExtension.ForEachI$1(Tuple$2.ctor, nameSet, $CreateAnonymousDelegate(this, function (tuple, i){
                var ctrl = this.AddChild$2(TabBtnWidgetController.ctor, TabBtnWidget.ctor, this.get_View().TabsGroup_UIGrid.get_gameObject(), TabbtnPrefabPath.TabBtnWidget_H1.toString(), "Tabbtn_" + i);
                ctrl.SetBtnLbl(tuple.p2);
                this.tabMgr.AddTabCtrl(ctrl);
            }));
            this.tabMgr.SetTabBtn(tabSelectIdx);
        },
        OnTabbtnClick$$: "UniRx.IObservable`1[[System.Int32]]",
        get_OnTabbtnClick: function (){
            return this.tabMgr.get_Stream();
        },
        UpdateView$$IBackpackViewData: function (data){
            this.UpdatePageGroup(data.get_CurPageNum(), data.get_PageNum());
            this.UpdateItemContainer(data.GetBagItems(), data.get_ItemBagCapability(), data.get_PageNum());
            this.get_View().Container_UIScrollView.UpdatePosition();
        },
        UpdateView$$ITempBackpackViewData: function (data){
            this.get_View().TabsGroup_UIGrid.get_gameObject().SetActive(false);
            this.UpdatePageGroup(data.get_CurTempPageNum(), data.get_PageNum());
            this.UpdateItemContainer(data.GetBagItems(), data.get_ItemBagCapability(), data.get_PageNum());
            this.get_View().Container_UIScrollView.UpdatePosition();
        },
        UpdatePageGroup: function (curIdx, totalNum){
            this.get_View().PageGroup_UIPageGroup.UpdatePage(curIdx, totalNum);
        },
        UpdateItemContainer: function (dataSet, itemNum, pageNum){
            var start = 0;
            var length = 0;
            var page = 0;
            do{
                var items = CollectionExtension.Filter$1(AppDto.BagItemDto.ctor, dataSet, $CreateAnonymousDelegate(this, function (item){
                    return item.index >= start || item.index < start + 25 /* ItemsContainerConst.PageCapability */;
                }));
                length = System.Math.Min$$Int32$$Int32(itemNum - start, 25 /* ItemsContainerConst.PageCapability */);
                this.UpdateItemPage(items, length, page);
                start += 25 /* ItemsContainerConst.PageCapability */;
                page++;
            }
            while (length > 0)
            while (page < pageNum){
                this.UpdateItemPage(null, 0, page);
                page++;
            }
            this.HideBeyond(page);
            this.get_View().ItemContainerGrid_UIGrid.Reposition();
            this.get_View().Container_UIScrollView.SetDragAmount(0, 0, false);
        },
        HideBeyond: function (page){
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(ItemContainerController.ctor, this._itemContainerControllerList))
                return;
            var cnt = this._itemContainerControllerList.get_Count();
            while (page < cnt){
                this._itemContainerControllerList.get_Item$$Int32(page).SetActive(false);
                page++;
            }
        },
        UpdateItemPage: function (items, length, page){
            var ctrl = null;
            (function (){
                var $1 = $Ref(null, ctrl);
                var $res = CollectionExtension.TryGetValue$1(ItemContainerController.ctor, this._itemContainerControllerList, page, $1);
                ctrl = $1.Value;
                return $res;
            }).call(this);
            if (ctrl == null){
                this.AddItemPage(items, length, page);
            }
            else {
                ctrl.UpdateView(items, length);
            }
        },
        AddItemPage: function (items, length, page){
            this.get_View().PageGroup_UIPageGroup.AddPage();
            this.get_View().PageGroup_UIPageGroup.RefreshLayout();
            JSTimer.get_Instance().SetupCoolDown(System.String.Format$$String$$Object("addpage_{0}", page), 0.05, null, $CreateAnonymousDelegate(this, function (){
                this.AddItemContainer(page);
                var container = this._itemContainerControllerList.get_Item$$Int32(page - 1);
                container.UpdateView(items, length);
            }), 0.1, false);
        },
        AddItemContainer: function (page){
            var container = null;
            (function (){
                var $1 = $Ref(null, container);
                var $res = CollectionExtension.TryGetValue$1(ItemContainerController.ctor, this._itemContainerControllerList, page - 1, $1);
                container = $1.Value;
                return $res;
            }).call(this);
            if (container == null){
                container = this.AddChild$2(ItemContainerController.ctor, ItemContainer.ctor, this.get_View().ItemContainerGrid_UIGrid.get_gameObject(), "ItemContainer" /* ItemContainer.NAME */, page.toString());
                this._itemContainerControllerList.Add(container);
                this.get_View().ItemContainerGrid_UIGrid.Reposition();
            }
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(System.Int32.ctor, container.get_OnItemClick(), $CreateAnonymousDelegate(this, function (i){
                this.itemClickEvt.OnNext(page * 25 /* ItemsContainerConst.PageCapability */ + i);
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(ItemsPageContainerController);
var ITempBackpackViewData = {
    fullname: "ITempBackpackViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITempBackpackViewData);
var IBackpackViewData = {
    fullname: "IBackpackViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IBackpackViewData);
var IBackpackData = {
    fullname: "IBackpackData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IBackpackData);
var BackpackViewTab = {
    fullname: "BackpackViewTab",
    staticDefinition: {
        Backpack: 0,
        Warehouse: 1
    },
    Kind: "Enum"
};
JsTypes.push(BackpackViewTab);
var ItemTypeTab = {
    fullname: "ItemTypeTab",
    staticDefinition: {
        Item: 0,
        Task: 1,
        Pet: 2
    },
    Kind: "Enum"
};
JsTypes.push(ItemTypeTab);
var BackPackDataMgr = {
    fullname: "BackPackDataMgr",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BackPackDataMgr);
var ItemsContainerConst = {
    fullname: "ItemsContainerConst",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ItemsContainerConst.ModuleType = 0;
            ItemsContainerConst.ModuleType_Other = 0;
            ItemsContainerConst.ModuleType_Backpack = 1;
            ItemsContainerConst.ModuleType_Warehouse = 2;
            ItemsContainerConst.ModuleType_Fashion = 3;
            ItemsContainerConst.ModuleType_MagicWare = 4;
            ItemsContainerConst.RowCapability = 5;
            ItemsContainerConst.PageCapability = 25;
        },
        SortPackItemDto: function (lhs, rhs){
            var lhsItem = As(lhs.get_item(), AppDto.AppItem.ctor);
            var rhsItem = As(rhs.get_item(), AppDto.AppItem.ctor);
            var diff = lhsItem.sort - rhsItem.sort;
            if (diff != 0)
                return diff;
            diff = lhsItem.id - rhsItem.id;
            if (diff != 0)
                return diff;
            diff = lhs.circulationType - rhs.circulationType;
            if (diff != 0)
                return diff;
            diff = lhs.tradePrice - rhs.tradePrice;
            if (diff != 0)
                return diff;
            diff = rhs.count - lhs.count;
            if (diff != 0)
                return diff;
            return lhs.index - rhs.index;
        },
        SortPackItemList: function (list, allList, startIndex){
            list.Sort$$Comparison$1(ItemsContainerConst.SortPackItemDto);
            var index = 0;
            var overPackItem = null;
            for (var i = 0; i < list.get_Count(); i++){
                var pageItemAdapter = list.get_Item$$Int32(i);
                if (pageItemAdapter.uniqueId > 0){
                    pageItemAdapter.index = (startIndex + index);
                    index++;
                }
                else {
                    var realItem = As(pageItemAdapter.get_item(), AppDto.RealItem.ctor);
                    var maxOverlay = realItem.maxOverlay;
                    if (pageItemAdapter.count >= maxOverlay){
                        pageItemAdapter.index = (startIndex + index);
                        index++;
                    }
                    else {
                        if (overPackItem != null){
                            if ((overPackItem.tradePrice == pageItemAdapter.tradePrice && pageItemAdapter.tradePrice == 0) || (overPackItem.tradePrice > 0 && pageItemAdapter.tradePrice > 0)){
                                if (overPackItem.itemId == pageItemAdapter.itemId && overPackItem.circulationType == pageItemAdapter.circulationType){
                                    var originalItemCount = overPackItem.count;
                                    var canAddItemCount = maxOverlay - originalItemCount;
                                    if (canAddItemCount >= pageItemAdapter.count){
                                        allList.Remove(pageItemAdapter);
                                        overPackItem.count = (originalItemCount + pageItemAdapter.count);
                                    }
                                    else {
                                        overPackItem.count = (maxOverlay);
                                        overPackItem = pageItemAdapter;
                                        pageItemAdapter.count = (pageItemAdapter.count - canAddItemCount);
                                        pageItemAdapter.index = (startIndex + index);
                                        index++;
                                    }
                                }
                                else {
                                    overPackItem = pageItemAdapter;
                                    pageItemAdapter.index = (startIndex + index);
                                    index++;
                                }
                            }
                            else {
                                overPackItem = pageItemAdapter;
                                pageItemAdapter.index = (startIndex + index);
                                index++;
                            }
                        }
                        else {
                            overPackItem = pageItemAdapter;
                            pageItemAdapter.index = (startIndex + index);
                            index++;
                        }
                    }
                }
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ItemsContainerConst);
var PackItemDtoComparer = {
    fullname: "PackItemDtoComparer",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.Collections.Generic.IComparer$1"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Compare: function (lhs, rhs){
            return ItemsContainerConst.SortPackItemDto(lhs, rhs);
        }
    }
};
JsTypes.push(PackItemDtoComparer);
var IBackpackView = {
    fullname: "IBackpackView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IBackpackView);
var BackpackView = {
    fullname: "BackpackView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            BackpackView.NAME = "BackpackView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IBackpackView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.TitleNameSprite_UISprite = null;
            this.WinTabGroup_UIGrid = null;
            this.WinTabGroup = null;
            this.LeftGroup = null;
            this.RightGroup = null;
            this.WealthGroup = null;
            this.ArrangeBtn_UIButton = null;
            this.DecomposeBtn_UIButton = null;
            this.Composite_UIButton = null;
            this.ItemsPos = null;
            this.CopperAddBtnSprite_UIButton = null;
            this.CopperValueLabel_UILabel = null;
            this.SiliverValueLabel_UILabel = null;
            this.PlayerRankingLabel_UILabel = null;
            this.CharactorGroup = null;
            this.PropertyGroup = null;
            this.LEquip_UIGrid = null;
            this.ModelAnchor = null;
            this.REquip_UIGrid = null;
            this.SiliverAddBtnSprite_UIButton = null;
            this.CloseBtn_UIButtonEvt = null;
            this.ArrangeBtn_UIButtonEvt = null;
            this.DecomposeBtn_UIButtonEvt = null;
            this.Composite_UIButtonEvt = null;
            this.CopperAddBtnSprite_UIButtonEvt = null;
            this.SiliverAddBtnSprite_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, BackpackView.ctor, IBackpackView.ctor, IBackpackData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (_data){
            var data = _data.get_BackpackViewData();
        },
        TabGridAnchor$$: "UnityEngine.GameObject",
        get_TabGridAnchor: function (){
            return this.WinTabGroup_UIGrid.get_gameObject();
        },
        ItemsPosAnchor$$: "UnityEngine.GameObject",
        get_ItemsPosAnchor: function (){
            return this.ItemsPos;
        },
        ModelAnchorGO$$: "UnityEngine.GameObject",
        get_ModelAnchorGO: function (){
            return this.ModelAnchor;
        },
        LeftEquipGrid$$: "UIGrid",
        get_LeftEquipGrid: function (){
            return this.LEquip_UIGrid;
        },
        RightEquipGrid$$: "UIGrid",
        get_RightEquipGrid: function (){
            return this.REquip_UIGrid;
        },
        SetPlayerRanking: function (num){
            var n = System.Math.Max$$Int32$$Int32(0, num);
            this.PlayerRankingLabel_UILabel.set_text("总战力：" + num);
        },
        ShowBackPack: function (show){
            this.RightGroup.SetActive(false);
        },
        ShowWarehouse: function (show){
            this.WealthGroup.SetActive(show);
        },
        ShowPlayerInfo: function (show){
            this.LeftGroup.SetActive(show);
        },
        UpdatePlayerInfo$$IPlayerModel: function (model){
            this.CopperValueLabel_UILabel.set_text("");
            this.SiliverValueLabel_UILabel.set_text("");
        },
        UpdatePlayerInfo$$IBackpackData: function (_data){
            var data = _data.get_BackpackViewData();
            this.SetTitleSprite(data.get_CurTab());
        },
        SetTitleSprite: function (tab){
            switch (tab){
                case BackpackViewTab.Backpack:
                    this.TitleNameSprite_UISprite.set_spriteName("bone-bag");
                    break;
                case BackpackViewTab.Warehouse:
                    this.TitleNameSprite_UISprite.set_spriteName("bone-storehouse");
                    break;
            }
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseTabWindow/CloseBtn");
            this.TitleNameSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "BaseTabWindow/TitleNameSprite");
            this.WinTabGroup_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "BaseTabWindow/WinTabGroup");
            this.WinTabGroup = GameObjectExt.FindGameObject(root, "BaseTabWindow/WinTabGroup");
            this.LeftGroup = GameObjectExt.FindGameObject(root, "LeftGroup");
            this.RightGroup = GameObjectExt.FindGameObject(root, "RightGroup");
            this.WealthGroup = GameObjectExt.FindGameObject(root, "RightGroup/WealthGroup");
            this.ArrangeBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "RightGroup/WealthGroup/ArrangeBtn");
            this.DecomposeBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "RightGroup/WealthGroup/DecomposeBtn");
            this.Composite_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "RightGroup/WealthGroup/Composite");
            this.ItemsPos = GameObjectExt.FindGameObject(root, "RightGroup/ItemsPos");
            this.CopperAddBtnSprite_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "LeftGroup/copper/BGSprite/CopperAddBtnSprite");
            this.CopperValueLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "LeftGroup/copper/BGSprite/CopperValueLabel");
            this.SiliverValueLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "LeftGroup/siliver/BGSprite/SiliverValueLabel");
            this.PlayerRankingLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "LeftGroup/PropertyGroup/PlayerRankingGroup/PlayerRankingLabel");
            this.CharactorGroup = GameObjectExt.FindGameObject(root, "LeftGroup/CharactorGroup");
            this.PropertyGroup = GameObjectExt.FindGameObject(root, "LeftGroup/PropertyGroup");
            this.LEquip_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "LeftGroup/CharactorGroup/EquipGroup/LEquip");
            this.ModelAnchor = GameObjectExt.FindGameObject(root, "LeftGroup/ModelAnchor");
            this.REquip_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "LeftGroup/CharactorGroup/EquipGroup/REquip");
            this.SiliverAddBtnSprite_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "LeftGroup/siliver/BGSprite/SiliverAddBtnSprite");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.ArrangeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.ArrangeBtn_UIButton);
            this.DecomposeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.DecomposeBtn_UIButton);
            this.Composite_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Composite_UIButton);
            this.CopperAddBtnSprite_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CopperAddBtnSprite_UIButton);
            this.SiliverAddBtnSprite_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.SiliverAddBtnSprite_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.ArrangeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ArrangeBtn_UIButtonEvt);
            this.DecomposeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.DecomposeBtn_UIButtonEvt);
            this.Composite_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Composite_UIButtonEvt);
            this.CopperAddBtnSprite_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CopperAddBtnSprite_UIButtonEvt);
            this.SiliverAddBtnSprite_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.SiliverAddBtnSprite_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnArrangeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnArrangeBtn_UIButtonClick: function (){
            return this.ArrangeBtn_UIButtonEvt;
        },
        OnDecomposeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnDecomposeBtn_UIButtonClick: function (){
            return this.DecomposeBtn_UIButtonEvt;
        },
        OnComposite_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnComposite_UIButtonClick: function (){
            return this.Composite_UIButtonEvt;
        },
        OnCopperAddBtnSprite_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCopperAddBtnSprite_UIButtonClick: function (){
            return this.CopperAddBtnSprite_UIButtonEvt;
        },
        OnSiliverAddBtnSprite_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnSiliverAddBtnSprite_UIButtonClick: function (){
            return this.SiliverAddBtnSprite_UIButtonEvt;
        }
    }
};
JsTypes.push(BackpackView);
var ItemContainer = {
    fullname: "ItemContainer",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ItemContainer.NAME = "ItemContainer";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.GridGroup_UIGrid = null;
            this.ItemContainer_UIPageInfo = null;
            this.ItemContainer_UIDragScrollView = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.GridGroup_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "GridGroup");
            this.ItemContainer_UIPageInfo = GameObjectExt.FindScript$1(UIPageInfo.ctor, root, "");
            this.ItemContainer_UIDragScrollView = GameObjectExt.FindScript$1(UIDragScrollView.ctor, root, "");
        }
    }
};
JsTypes.push(ItemContainer);
var ItemsPageContainer = {
    fullname: "ItemsPageContainer",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ItemsPageContainer.NAME = "ItemsPageContainer";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TabsGroup_UIGrid = null;
            this.Container_UIScrollView = null;
            this.ItemContainerGrid_UICenterOnChild = null;
            this.PageGroup_UIPageGroup = null;
            this.ItemContainerGrid_UIGrid = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TabsGroup_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "TabsGroup");
            this.Container_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "Container");
            this.ItemContainerGrid_UICenterOnChild = GameObjectExt.FindScript$1(UICenterOnChild.ctor, root, "Container/ItemContainerGrid");
            this.PageGroup_UIPageGroup = GameObjectExt.FindScript$1(UIPageGroup.ctor, root, "PageGroup");
            this.ItemContainerGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "Container/ItemContainerGrid");
        }
    }
};
JsTypes.push(ItemsPageContainer);
var ITempBackPackView = {
    fullname: "ITempBackPackView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITempBackPackView);
var TempBackPackView = {
    fullname: "TempBackPackView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            TempBackPackView.NAME = "TempBackPackView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITempBackPackView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TransBtn_UIButton = null;
            this.CloseBtn_UIButton = null;
            this.transLabel_UILabel = null;
            this.TransAllBtn_UIButton = null;
            this.transAllLabel_UILabel = null;
            this.ArrangeBtn_UIButton = null;
            this.arrayLabel_UILabel = null;
            this.DecomposeBtn_UIButton = null;
            this.decomposeLabel_UILabel = null;
            this.Composite_UIButton = null;
            this.TempAnchor = null;
            this.BackAnchor = null;
            this.CompositeLabel_UILabel = null;
            this.TransBtn_UIButtonEvt = null;
            this.CloseBtn_UIButtonEvt = null;
            this.TransAllBtn_UIButtonEvt = null;
            this.ArrangeBtn_UIButtonEvt = null;
            this.DecomposeBtn_UIButtonEvt = null;
            this.Composite_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, TempBackPackView.ctor, ITempBackPackView.ctor, IBackpackData.ctor);
        },
        LateElementBinding: function (){
            this.transLabel_UILabel.set_text("转移");
            this.transAllLabel_UILabel.set_text("全部转移");
            this.arrayLabel_UILabel.set_text("整理");
            this.CompositeLabel_UILabel.set_text("合成");
            this.decomposeLabel_UILabel.set_text("分解");
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
            if (data == null){
                return;
            }
        },
        TempBackAnchor$$: "UnityEngine.GameObject",
        get_TempBackAnchor: function (){
            return this.TempAnchor;
        },
        MyBackAnchor$$: "UnityEngine.GameObject",
        get_MyBackAnchor: function (){
            return this.BackAnchor;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TransBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BtnAnchor/TransBtn");
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "CloseBtn");
            this.transLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BtnAnchor/TransBtn/transLabel");
            this.TransAllBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BtnAnchor/TransAllBtn");
            this.transAllLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BtnAnchor/TransAllBtn/transAllLabel");
            this.ArrangeBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BtnAnchor/btngroup/ArrangeBtn");
            this.arrayLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BtnAnchor/btngroup/ArrangeBtn/arrayLabel");
            this.DecomposeBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BtnAnchor/btngroup/DecomposeBtn");
            this.decomposeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BtnAnchor/btngroup/DecomposeBtn/decomposeLabel");
            this.Composite_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BtnAnchor/btngroup/Composite");
            this.TempAnchor = GameObjectExt.FindGameObject(root, "TempAnchor");
            this.BackAnchor = GameObjectExt.FindGameObject(root, "BackAnchor");
            this.CompositeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BtnAnchor/btngroup/Composite/CompositeLabel");
        },
        InitReactiveEvents: function (){
            this.TransBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.TransBtn_UIButton);
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.TransAllBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.TransAllBtn_UIButton);
            this.ArrangeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.ArrangeBtn_UIButton);
            this.DecomposeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.DecomposeBtn_UIButton);
            this.Composite_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Composite_UIButton);
        },
        ClearReactiveEvents: function (){
            this.TransBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TransBtn_UIButtonEvt);
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.TransAllBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TransAllBtn_UIButtonEvt);
            this.ArrangeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ArrangeBtn_UIButtonEvt);
            this.DecomposeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.DecomposeBtn_UIButtonEvt);
            this.Composite_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Composite_UIButtonEvt);
        },
        OnTransBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTransBtn_UIButtonClick: function (){
            return this.TransBtn_UIButtonEvt;
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnTransAllBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTransAllBtn_UIButtonClick: function (){
            return this.TransAllBtn_UIButtonEvt;
        },
        OnArrangeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnArrangeBtn_UIButtonClick: function (){
            return this.ArrangeBtn_UIButtonEvt;
        },
        OnDecomposeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnDecomposeBtn_UIButtonClick: function (){
            return this.DecomposeBtn_UIButtonEvt;
        },
        OnComposite_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnComposite_UIButtonClick: function (){
            return this.Composite_UIButtonEvt;
        }
    }
};
JsTypes.push(TempBackPackView);
var ProxyBattleConfigModule = {
    fullname: "ProxyBattleConfigModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenAutoConfig: function (){
            var controller = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(BattleAutoConfigController.ctor, "BattleAutoConfigView" /* BattleAutoConfigView.NAME */, UILayerType.DefaultModule, true, true);
            controller.Open();
        },
        HideAutoConfig: function (){
            UIModuleManager.get_Instance().HideModule("BattleAutoConfigView" /* BattleAutoConfigView.NAME */);
        },
        CloseAutoConfig: function (){
            UIModuleManager.get_Instance().CloseModule("BattleAutoConfigView" /* BattleAutoConfigView.NAME */, true);
        },
        OpenAutoSkillConfig: function (pSkillType){
            var controller = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(BattleAutoSkillConfigController.ctor, "BattleAutoSkillConfigView" /* BattleAutoSkillConfigView.NAME */, UILayerType.SubModule, true, true);
            controller.Open(pSkillType);
        },
        HideAutoSkillConfig: function (){
            UIModuleManager.get_Instance().HideModule("BattleAutoSkillConfigView" /* BattleAutoSkillConfigView.NAME */);
        },
        CloseAutoSkillConfig: function (){
            UIModuleManager.get_Instance().CloseModule("BattleAutoSkillConfigView" /* BattleAutoSkillConfigView.NAME */, true);
        },
        OpenAutoSummonConfig: function (){
            var controller = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(BattleAutoSummonConfigController.ctor, "BattleAutoSummonConfigView" /* BattleAutoSummonConfigView.NAME */, UILayerType.SubModule, true, true);
            controller.Open();
        },
        HideAutoSummonConfig: function (){
            UIModuleManager.get_Instance().HideModule("BattleAutoSummonConfigView" /* BattleAutoSummonConfigView.NAME */);
        },
        CloseAutoSummonConfig: function (){
            UIModuleManager.get_Instance().CloseModule("BattleAutoSummonConfigView" /* BattleAutoSummonConfigView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyBattleConfigModule);
var BattleAutoConfigController = {
    fullname: "BattleAutoConfigController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            BattleAutoConfigController.MAX_PET_COUNT = 5;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mHeroHeadItemControllerList = null;
            this.mMainRoleAutoSkillHeadItem = null;
            this.mMainPetAutoSkillHeadItem = null;
            this.mMainRoleSubSkillHeadItem = null;
            this.mMainPetSubSkillHeadItem = null;
            this.mMainRoleAutoSkillCell = null;
            this.mMainPetAutoSkillCell = null;
            this.mMainRoleSubSkillCell = null;
            this.mMainPetSubSkillCell = null;
            MonoViewController$1.ctor.call(this, BattleAutoConfigView.ctor);
        },
        AfterInitView: function (){
            this.InitPetUI();
            this.get_MainRoleAutoSkillHeadItem().set_ShowName(true);
            this.get_MainRoleSubSkillHeadItem().set_ShowName(true);
            this.get_MainPetAutoSkillHeadItem().set_ShowName(true);
            this.get_MainRoleSubSkillHeadItem().set_ShowName(true);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnClose_UIButton.onClick, ProxyBattleConfigModule.CloseAutoConfig);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ToggleAutoTimeOpen_UIToggle.onChange, $CreateDelegate(this, this.OnToggleAutoTimeOpenChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ToggleAutoTime1_UIToggle.onChange, $CreateDelegate(this, this.OnToggleAutoTimeChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ToggleSubSkillOpen_UIToggle.onChange, $CreateDelegate(this, this.OnToggleSubTimeOpenChange));
            this.get_MainRoleAutoSkillCell().set_OnClickHandler($CreateDelegate(this, this.OnMainRoleAutoSkillHandler));
            this.get_MainPetAutoSkillCell().set_OnClickHandler($CreateDelegate(this, this.OnMainPetAutoSkillHandler));
            this.get_MainRoleSubSkillCell().set_OnClickHandler($CreateDelegate(this, this.OnMainRoleSubSkillHandler));
            this.get_MainPetSubSkillCell().set_OnClickHandler($CreateDelegate(this, this.OnMainPetSubSkillHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ToggleAutoTargetOpen_UIToggle.onChange, $CreateDelegate(this, this.OnToggleAutoTargetOpenChange));
        },
        OnDispose: function (){
            this.mHeroHeadItemControllerList.Clear();
        },
        OnToggleAutoTimeOpenChange: function (){
            ModelManager.get_BattleConfig().set_AutoFightIfOutTime(this.get_View().ToggleAutoTimeOpen_UIToggle.get_value());
            this.UpdateAutoFightTimeUI();
        },
        OnToggleAutoTimeChange: function (){
            ModelManager.get_BattleConfig().set_AutoFightTime(this.get_View().ToggleAutoTime1_UIToggle.get_value() ? 30 : 60);
        },
        OnToggleSubTimeOpenChange: function (){
            ModelManager.get_BattleConfig().set_UseSubSkill(this.get_View().ToggleSubSkillOpen_UIToggle.get_value());
        },
        OnToggleAutoTargetOpenChange: function (){
            ModelManager.get_BattleConfig().set_AutoTarget(this.get_View().ToggleAutoTargetOpen_UIToggle.get_value());
        },
        Open: function (){
            this.UpdateAllUI();
        },
        UpdateAllUI: function (){
            this.UpdateMainRolePetUI();
            this.UpdateSkillUI();
            this.UpdatePetUI();
        },
        UpdateAutoFightTimeUI: function (){
            var tEnable = this.get_View().ToggleAutoTimeOpen_UIToggle.get_value();
            this.get_View().ToggleAutoTime1_UIButton.get_sprite().set_isGrey((function ($p4){
                this.get_View().ToggleAutoTime2_UIButton.get_sprite().set_isGrey($p4);
                return $p4;
            }).call(this, !tEnable));
            this.get_View().ToggleAutoTime1_UIButton.set_isEnabled((function ($p5){
                this.get_View().ToggleAutoTime2_UIButton.set_isEnabled($p5);
                return $p5;
            }).call(this, tEnable));
        },
        UpdateMainRolePetUI: function (){
            this.get_MainRoleAutoSkillHeadItem().UpdateData$$PlayerDto(ModelManager.get_Player().GetPlayer());
            this.get_MainRoleSubSkillHeadItem().UpdateData$$PlayerDto(ModelManager.get_Player().GetPlayer());
            this.get_MainPetAutoSkillHeadItem().UpdateData$$GeneralCharactor(ModelManager.get_BattleConfig().GetInFightPet());
            this.get_MainPetSubSkillHeadItem().UpdateData$$GeneralCharactor(ModelManager.get_BattleConfig().GetInFightPet());
        },
        MainRoleAutoSkillHeadItem$$: "HeroHeadItemController",
        get_MainRoleAutoSkillHeadItem: function (){
            if (null == this.mMainRoleAutoSkillHeadItem)
                this.mMainRoleAutoSkillHeadItem = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().CntrAutoSkillRole, "HeroHeadItem" /* HeroHeadItem.NAME */, "");
            return this.mMainRoleAutoSkillHeadItem;
        },
        MainPetAutoSkillHeadItem$$: "HeroHeadItemController",
        get_MainPetAutoSkillHeadItem: function (){
            if (null == this.mMainPetAutoSkillHeadItem)
                this.mMainPetAutoSkillHeadItem = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().CntrAutoSkillPet, "HeroHeadItem" /* HeroHeadItem.NAME */, "");
            return this.mMainPetAutoSkillHeadItem;
        },
        MainRoleSubSkillHeadItem$$: "HeroHeadItemController",
        get_MainRoleSubSkillHeadItem: function (){
            if (null == this.mMainRoleSubSkillHeadItem)
                this.mMainRoleSubSkillHeadItem = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().CntrSubSkillRole, "HeroHeadItem" /* HeroHeadItem.NAME */, "");
            return this.mMainRoleSubSkillHeadItem;
        },
        MainPetSubSkillHeadItem$$: "HeroHeadItemController",
        get_MainPetSubSkillHeadItem: function (){
            if (null == this.mMainPetSubSkillHeadItem)
                this.mMainPetSubSkillHeadItem = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().CntrSubSkillPet, "HeroHeadItem" /* HeroHeadItem.NAME */, "");
            return this.mMainPetSubSkillHeadItem;
        },
        UpdateSkillUI: function (){
            this.get_MainRoleAutoSkillCell().UpdateData$$Int32(ModelManager.get_BattleConfig().GetRoleAutoFightSkill());
            this.get_MainPetAutoSkillCell().UpdateData$$Int32(ModelManager.get_BattleConfig().GetPetAutoFightSkill());
            this.get_MainRoleSubSkillCell().UpdateData$$Int32(ModelManager.get_BattleConfig().GetRoleSubFightSkill());
            this.get_MainPetSubSkillCell().UpdateData$$Int32(ModelManager.get_BattleConfig().GetPetSubFightSkill());
        },
        MainRoleAutoSkillCell$$: "SkillButtonCellController",
        get_MainRoleAutoSkillCell: function (){
            if (null == this.mMainRoleAutoSkillCell)
                this.mMainRoleAutoSkillCell = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().CntrRoleAutoSkill, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
            return this.mMainRoleAutoSkillCell;
        },
        MainPetAutoSkillCell$$: "SkillButtonCellController",
        get_MainPetAutoSkillCell: function (){
            if (null == this.mMainPetAutoSkillCell)
                this.mMainPetAutoSkillCell = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().CntrPetAutoSkill, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
            return this.mMainPetAutoSkillCell;
        },
        MainRoleSubSkillCell$$: "SkillButtonCellController",
        get_MainRoleSubSkillCell: function (){
            if (null == this.mMainRoleSubSkillCell)
                this.mMainRoleSubSkillCell = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().CntrRoleSubSkill, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
            return this.mMainRoleSubSkillCell;
        },
        MainPetSubSkillCell$$: "SkillButtonCellController",
        get_MainPetSubSkillCell: function (){
            if (null == this.mMainPetSubSkillCell)
                this.mMainPetSubSkillCell = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, this.get_View().CntrPetSubSkill, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
            return this.mMainPetSubSkillCell;
        },
        OnMainRoleAutoSkillHandler: function (pSkillButtonCellController, pSkill){
            ProxyBattleConfigModule.OpenAutoSkillConfig(BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleAutoSkill);
        },
        OnMainPetAutoSkillHandler: function (pSkillButtonCellController, pSkill){
            ProxyBattleConfigModule.OpenAutoSkillConfig(BattleAutoSkillConfigController.BattleConfigSkillType.MainPetAutoSkill);
        },
        OnMainRoleSubSkillHandler: function (pSkillButtonCellController, pSkill){
            ProxyBattleConfigModule.OpenAutoSkillConfig(BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleSubSkill);
        },
        OnMainPetSubSkillHandler: function (pSkillButtonCellController, pSkill){
            ProxyBattleConfigModule.OpenAutoSkillConfig(BattleAutoSkillConfigController.BattleConfigSkillType.MainPetSubSkill);
        },
        InitPetUI: function (){
            this.mHeroHeadItemControllerList = new System.Collections.Generic.List$1.ctor$$Int32(HeroHeadItemController.ctor, 5 /* MAX_PET_COUNT */);
            var tHeroHeadItemController = null;
            for (var tCounter = 0; tCounter < 5 /* MAX_PET_COUNT */; tCounter++){
                tHeroHeadItemController = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().CntrRoleGrid_UIGrid.get_gameObject(), "HeroHeadItem" /* HeroHeadItem.NAME */, "");
                tHeroHeadItemController.set_OnClickHandler($CreateDelegate(this, this.OnHeroHeadItemClickHandler));
                this.mHeroHeadItemControllerList.Add(tHeroHeadItemController);
            }
        },
        UpdatePetUI: function (){
            var tAutoHeroList = ModelManager.get_BattleConfig().GetAutoHeroList();
            var tHeroHeadItemController;
            var tAutoHeroUID = 0;
            for (var tCounter = 0; tCounter < this.mHeroHeadItemControllerList.get_Count(); tCounter++){
                tAutoHeroUID = (null != tAutoHeroList && tAutoHeroList.get_Count() > tCounter) ? tAutoHeroList.get_Item$$Int32(tCounter) : 0;
                tHeroHeadItemController = this.mHeroHeadItemControllerList.get_Item$$Int32(tCounter);
                tHeroHeadItemController.UpdateData$$Int64(tAutoHeroUID);
            }
        },
        OnHeroHeadItemClickHandler: function (pHeroHeadItemController, pHeroUID){
            ProxyBattleConfigModule.OpenAutoSummonConfig();
        }
    }
};
JsTypes.push(BattleAutoConfigController);
var BattleAutoSkillConfigController = {
    fullname: "BattleAutoSkillConfigController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mSkillType = BattleAutoSkillConfigController.BattleConfigSkillType.Undefined;
            this.mCurrentSkill = 0;
            this.mCurrentSkillItem = null;
            this.mCurrentSkillItemInList = null;
            this.mSkillIdItemDic = null;
            MonoViewController$1.ctor.call(this, BattleAutoSkillConfigView.ctor);
        },
        AfterInitView: function (){
            this.InitUI();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnClose_UIButton.onClick, ProxyBattleConfigModule.CloseAutoSkillConfig);
        },
        OnDispose: function (){
            this.mCurrentSkill = 0;
        },
        Open: function (pSkillType){
            this.mSkillType = pSkillType;
            this.UpdateData();
            this.UpdateAllUI();
        },
        UpdateData: function (){
            switch (this.mSkillType){
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleAutoSkill:
                    this.mCurrentSkill = ModelManager.get_BattleConfig().GetRoleAutoFightSkill();
                    break;
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainPetAutoSkill:
                    this.mCurrentSkill = ModelManager.get_BattleConfig().GetPetAutoFightSkill();
                    break;
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleSubSkill:
                    this.mCurrentSkill = ModelManager.get_BattleConfig().GetRoleSubFightSkill();
                    break;
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainPetSubSkill:
                    this.mCurrentSkill = ModelManager.get_BattleConfig().GetPetSubFightSkill();
                    break;
            }
        },
        UpdateAllUI: function (){
            this.UpdateSkillList();
        },
        InitUI: function (){
            this.mCurrentSkill = 0;
        },
        UpdateCurrentSkill: function (pSkill){
            this.mCurrentSkill = null != pSkill ? pSkill.id : 0;
            this.UpdateCurrentSkillUI(pSkill);
        },
        UpdateCurrentSkillUI: function (pSkill){
            var tName = System.String.Empty;
            var tCost = System.String.Empty;
            var tCD = System.String.Empty;
            var tDesc = System.String.Empty;
            this.get_CurrentSkill().UpdateData$$Skill(pSkill);
            if (null != pSkill){
                tName = pSkill.name;
                tCost = System.String.Format$$String$$Object("消耗：{0}", pSkill.actionPoint);
                tCD = System.String.Format$$String$$Object("吟唱时间：{0}", DemoSkillHelper.GetSkillCD$$Skill(pSkill));
                GameDebuger.LogError("[TODO]重组技能动态描述", null);
                tDesc = pSkill.dynamicDesc;
            }
            this.get_View().LabelSkillName_UILabel.set_text(tName);
            this.get_View().LabelSkillCost_UILabel.set_text(tCost);
            this.get_View().LabelSkillCD_UILabel.set_text(tCD);
            this.get_View().LabelSkillDesc_UILabel.set_text(tDesc);
        },
        CurrentSkill$$: "SkillButtonCellController",
        get_CurrentSkill: function (){
            if (null == this.mCurrentSkillItem){
                this.mCurrentSkillItem = this.CreateSkillItem(this.get_View().CurrentSkillIcon);
                this.mCurrentSkillItem.set_OnClickHandler($CreateDelegate(this, this.OnCurrentSkillClick));
            }
            return this.mCurrentSkillItem;
        },
        OnCurrentSkillClick: function (pSkillButtonCellController, pSkill){
            this.UpdateCurrentSkillItemInList(null);
        },
        UpdateSkillList: function (){
            this.mSkillIdItemDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, SkillButtonCellController.ctor);
            var tSkillIDList = ModelManager.get_BattleConfig().GetSkillList(this.mSkillType);
            var tSkillButtonCellController = null;
            var tSkillId;
            for (var tCounter = 0; tCounter < tSkillIDList.get_Count(); tCounter++){
                tSkillId = tSkillIDList.get_Item$$Int32(tCounter);
                tSkillButtonCellController = this.CreateSkillItem(this.get_View().GridSkillList_UIGrid.get_gameObject());
                tSkillButtonCellController.set_NameLabelVisible(true);
                tSkillButtonCellController.set_NamePosition(SkillButtonCellController.PivotPosition.Bottom);
                tSkillButtonCellController.UpdateData$$Int32(tSkillId);
                tSkillButtonCellController.set_ShowSuperSkillSubscript(DemoSkillHelper.IsSuperSkill$$Int32(tSkillId));
                tSkillButtonCellController.set_OnClickHandler($CreateDelegate(this, this.OnSkillListItemClick));
                this.mSkillIdItemDic.Add(tSkillId, tSkillButtonCellController);
                this.UpdateGray(this.mSkillType, tSkillButtonCellController);
                if (tSkillId == this.mCurrentSkill)
                    this.set_CurrentSkillItemInList(tSkillButtonCellController);
            }
        },
        CreateSkillItem: function (pParent){
            var tSkillButtonCellController = this.AddCachedChild$2$$GameObject$$String$$String(SkillButtonCellController.ctor, SkillButtonCell.ctor, pParent, "SkillButtonCell" /* SkillButtonCell.NAME */, "");
            tSkillButtonCellController.set_CDEnable(false);
            tSkillButtonCellController.set_CostEnable(false);
            tSkillButtonCellController.set_DragEnable(false);
            return tSkillButtonCellController;
        },
        UpdateGray: function (pBattleConfigSkillType, pSkillButtonCellController){
            var tNeedGray = false;
            if (pBattleConfigSkillType == BattleAutoSkillConfigController.BattleConfigSkillType.MainPetSubSkill || pBattleConfigSkillType == BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleSubSkill)
                tNeedGray = null == pSkillButtonCellController.get_Skill() || pSkillButtonCellController.get_Skill().actionPoint > 1;
            pSkillButtonCellController.set_Gray(tNeedGray);
        },
        OnSkillListItemClick: function (pSkillButtonCellController, pSkill){
            this.UpdateCurrentSkillItemInList(pSkillButtonCellController);
        },
        UpdateCurrentSkillItemInList: function (pSkillButtonCellController){
            this.set_CurrentSkillItemInList(pSkillButtonCellController);
            GameDebuger.LogError(System.String.Format$$String$$Object$$Object("[TEMP]协议：设置自动技能，类型：{0}，技能ID：{1}", this.mSkillType, this.mCurrentSkill), null);
        },
        CurrentSkillItemInList$$: "SkillButtonCellController",
        get_CurrentSkillItemInList: function (){
            return this.mCurrentSkillItemInList;
        },
        set_CurrentSkillItemInList: function (value){
            if (this.mCurrentSkillItemInList != value){
                if (null != this.mCurrentSkillItemInList)
                    this.mCurrentSkillItemInList.set_Gray(false);
                this.mCurrentSkillItemInList = value;
                if (null != this.mCurrentSkillItemInList){
                    this.mCurrentSkillItemInList.set_Gray(true);
                    this.UpdateCurrentSkill(this.mCurrentSkillItemInList.get_Skill());
                }
                else
                    this.UpdateCurrentSkill(null);
            }
        }
    }
};
JsTypes.push(BattleAutoSkillConfigController);
var BattleAutoSummonConfigController = {
    fullname: "BattleAutoSummonConfigController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mCurrentSelectedQuality = null;
            this.mHeroItemHashDic = null;
            this.mShowQualitySelect = true;
            MonoViewController$1.ctor.call(this, BattleAutoSummonConfigView.ctor);
        },
        AfterInitView: function (){
            this.mCurrentSelectedQuality = null;
            this.mHeroItemHashDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, BattleAutoSummonHeroController.ctor);
            this.InitCurrentUsedHeroCard();
            this.InitSelectedList();
            this.InitQualityList();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BtnClose_UIButton.onClick, ProxyBattleConfigModule.CloseAutoSummonConfig);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CurrentLv_UIButton.onClick, $CreateDelegate(this, this.OnCurrentLvBtnClick));
        },
        OnDispose: function (){
            this.mHeroItemHashDic.Clear();
        },
        OnCurrentLvBtnClick: function (){
            this.set_ShowQualitySelect(!this.get_ShowQualitySelect());
        },
        Open: function (){
            this.UpdateAllUI();
        },
        UpdateAllUI: function (){
            this.set_ShowQualitySelect(false);
            this.UpdateCurrentUsedHeroCard();
            this.UpdateSelectedList();
            this.UpdateSelectedQuality();
        },
        CreateDragableHeroCardItemController: function (pParent, pPosition){
            var tDragableHeroCardItemController = this.AddCachedChild$2$$GameObject$$String$$String(BattleAutoSummonHeroController.ctor, HeroCardItem.ctor, pParent, "HeroCardItem" /* HeroCardItem.NAME */, "");
            tDragableHeroCardItemController.Positon = pPosition;
            tDragableHeroCardItemController.set_Selected(false);
            tDragableHeroCardItemController.set_DragEnable(true);
            tDragableHeroCardItemController.set_DragDropEnable(true);
            tDragableHeroCardItemController.OnDragDropReleaseHandler = $CreateDelegate(this, this.OnDragDropReleaseHandler);
            this.mHeroItemHashDic.Add(tDragableHeroCardItemController.get_gameObject().GetInstanceID(), tDragableHeroCardItemController);
            return tDragableHeroCardItemController;
        },
        CreateUndragableHeroCardItemController: function (pParent, pPosition){
            var tBattleAutoSummonHeroController = this.CreateDragableHeroCardItemController(pParent, pPosition);
            tBattleAutoSummonHeroController.set_DragEnable(false);
            tBattleAutoSummonHeroController.set_DragDropEnable(false);
            tBattleAutoSummonHeroController.OnDragDropReleaseHandler = null;
            return tBattleAutoSummonHeroController;
        },
        GetCardParent: function (pTargetPositionType){
            switch (pTargetPositionType){
                case BattleAutoSummonHeroController.PositionType.CurrentUsed:
                    return this.get_View().CurrentUsedHero.get_transform();
                case BattleAutoSummonHeroController.PositionType.CurrentSelected:
                    return this.get_View().GridCardPostion_UIGrid.get_transform();
                case BattleAutoSummonHeroController.PositionType.ToBeSelected:
                    return this.get_View().GridCardList_UIGrid.get_transform();
                default:
                    break;
            }
            return null;
        },
        OnDragDropReleaseHandler: function (pDragedHeroItem, pSurface, pDragStartPosition){
            var tSurfaceHeroItem = this.GetHeroItemByGameObject$$GameObject(pSurface);
            if (null == tSurfaceHeroItem){
                pDragedHeroItem.get_transform().set_position(pDragStartPosition);
                return;
            }
            else if (tSurfaceHeroItem.get_HeroUID() <= 0){
                this.DragToPosition(pDragedHeroItem, this.GetCardParent(tSurfaceHeroItem.Positon), tSurfaceHeroItem.get_transform().get_position(), tSurfaceHeroItem.Positon);
            }
            else {
                if (tSurfaceHeroItem.Positon == BattleAutoSummonHeroController.PositionType.ToBeSelected){
                    if (pDragedHeroItem.Positon != BattleAutoSummonHeroController.PositionType.ToBeSelected){
                        this.DragToCard(pDragedHeroItem, tSurfaceHeroItem);
                        UIHelper.RepositionDelay(this.get_View().GridCardList_UIGrid, null);
                        return;
                    }
                }
                GameObjectExt.ChangeParent(pDragedHeroItem.get_transform(), pSurface.get_transform());
                pSurface.get_transform().set_position(pDragStartPosition);
                this.UpdateHeroItemPosition$$BattleAutoSummonHeroController$$BattleAutoSummonHeroController(pDragedHeroItem, tSurfaceHeroItem);
            }
        },
        DragToCard: function (pDragedHeroItem, pSurfaceHeroItem){
            this.DragToPosition(pDragedHeroItem, pSurfaceHeroItem.get_transform().get_parent(), pSurfaceHeroItem.get_transform().get_position(), pSurfaceHeroItem.Positon);
        },
        DragToPosition: function (pDragedHeroItem, pTargetParent, pTargetPosition, pTargetPositionType){
            if (UnityEngine.Object.op_Equality(pDragedHeroItem.get_transform().get_parent(), pTargetParent))
                return;
            pDragedHeroItem.get_transform().SetParent$$Transform(pTargetParent);
            pDragedHeroItem.get_transform().set_position(pTargetPosition);
            NGUITools.MarkParentAsChanged(pDragedHeroItem.get_gameObject());
            this.UpdateHeroItemPosition$$BattleAutoSummonHeroController$$PositionType(pDragedHeroItem, pTargetPositionType);
        },
        UpdateHeroItemPosition$$BattleAutoSummonHeroController$$BattleAutoSummonHeroController: function (pDragedHeroItem, pSurfaceHeroItem){
            var tTempPositionType = pDragedHeroItem.Positon;
            this.UpdateHeroItemPosition$$BattleAutoSummonHeroController$$PositionType(pDragedHeroItem, pSurfaceHeroItem.Positon);
            this.UpdateHeroItemPosition$$BattleAutoSummonHeroController$$PositionType(pSurfaceHeroItem, tTempPositionType);
        },
        UpdateHeroItemPosition$$BattleAutoSummonHeroController$$PositionType: function (pHeroItem, pPositionType){
            pHeroItem.Positon = pPositionType;
            GameDebuger.LogError(System.String.Format$$String$$Object$$Object("[TODO]等待协议：更新位置类型，英雄（id：{0}，位置：{1}）", pHeroItem.get_HeroUID(), pPositionType), null);
        },
        GetHeroItemByGameObject$$GameObject: function (pGameObject){
            if (UnityEngine.Object.op_Equality(null, pGameObject))
                return null;
            return this.GetHeroItemByGameObject$$Int32(pGameObject.GetInstanceID());
        },
        GetHeroItemByGameObject$$Int32: function (pGameObjectInstanceId){
            if (null == this.mHeroItemHashDic || this.mHeroItemHashDic.get_Count() <= 0)
                return null;
            var tBattleAutoSummonHeroController = null;
            (function (){
                var $1 = $Ref(null, tBattleAutoSummonHeroController);
                var $res = this.mHeroItemHashDic.TryGetValue(pGameObjectInstanceId, $1);
                tBattleAutoSummonHeroController = $1.Value;
                return $res;
            }).call(this);
            return tBattleAutoSummonHeroController;
        },
        InitCurrentUsedHeroCard: function (){
            this.CreateUndragableHeroCardItemController(this.get_View().CurrentUsedHeroBG, BattleAutoSummonHeroController.PositionType.CurrentUsed);
        },
        UpdateCurrentUsedHeroCard: function (){
            this.CreateDragableHeroCardItemController(this.get_View().CurrentUsedHero, BattleAutoSummonHeroController.PositionType.CurrentUsed).UpdateData(ModelManager.get_BattleConfig().GetCurrentUsedHero());
        },
        InitSelectedList: function (){
            for (var tCounter = 0; tCounter < 5; tCounter++){
                this.CreateUndragableHeroCardItemController(this.get_View().GridCardPostionBG_UIGrid.get_gameObject(), BattleAutoSummonHeroController.PositionType.CurrentSelected);
            }
            UIHelper.RepositionDelay(this.get_View().GridCardPostionBG_UIGrid, null);
        },
        UpdateSelectedList: function (){
            var tSelectedHeroUIDList = ModelManager.get_BattleConfig().GetCurrentSelectedHero();
            var tBattleAutoSummonHeroController = null;
            var tHeroUID;
            for (var tCounter = 0,tLen = tSelectedHeroUIDList.get_Count(); tCounter < tLen; tCounter++){
                tBattleAutoSummonHeroController = this.CreateDragableHeroCardItemController(this.get_View().GridCardPostion_UIGrid.get_gameObject(), BattleAutoSummonHeroController.PositionType.CurrentSelected);
                tHeroUID = tSelectedHeroUIDList.get_Item$$Int32(tCounter);
                tBattleAutoSummonHeroController.UpdateData(tHeroUID);
            }
            UIHelper.RepositionDelay(this.get_View().GridCardPostion_UIGrid, null);
        },
        UpdateCanSelectList: function (pQuality){
            var tHeroList = ModelManager.get_BattleConfig().GetHeroList();
            var tDragableHeroCardItemController = null;
            var tHeroID;
            for (var tCounter = 0; tCounter < tHeroList.get_Count(); tCounter++){
                tHeroID = tHeroList.get_Item$$Int32(tCounter);
                tDragableHeroCardItemController = this.CreateDragableHeroCardItemController(this.get_View().GridCardList_UIGrid.get_gameObject(), BattleAutoSummonHeroController.PositionType.ToBeSelected);
                tDragableHeroCardItemController.UpdateData(tHeroID);
                if (this.CanSelect(tDragableHeroCardItemController, pQuality)){
                    tDragableHeroCardItemController.get_transform().SetParent$$Transform(this.get_View().GridCardList_UIGrid.get_transform());
                    tDragableHeroCardItemController.Show();
                    continue;
                }
                tDragableHeroCardItemController.Hide();
                tDragableHeroCardItemController.get_transform().SetParent$$Transform(this.get_View().get_transform());
            }
            this.RepositionDelay();
        },
        RepositionDelay: function (){
            UIHelper.RepositionDelay(this.get_View().GridCardList_UIGrid, $CreateAnonymousDelegate(this, function (){
                this.get_View().ScrollViewCardList_UIScrollView.ResetPosition();
            }));
        },
        CanSelect: function (pDragableHeroCardItemController, pQuality){
            return null != pDragableHeroCardItemController && (pDragableHeroCardItemController.get_Quality() == pQuality || pQuality == 0);
        },
        InitQualityList: function (){
            var tTransform = null;
            var tUIToggle = null;
            for (var tCounter = 0,tLen = this.get_View().CntrLvs_Transform.get_childCount(); tCounter < tLen; tCounter++){
                tTransform = this.get_View().CntrLvs_Transform.GetChild(tCounter);
                tUIToggle = tTransform.GetComponent$1(UIButton.ctor);
                EventDelegate.Set$$List$1$EventDelegate$$Callback(tUIToggle.onClick, $CreateDelegate(this, this.OnQualityChange));
            }
        },
        OnQualityChange: function (){
            this.mCurrentSelectedQuality = UIButton.current;
            this.set_ShowQualitySelect(false);
            this.UpdateSelectedQuality();
        },
        UpdateSelectedQuality: function (){
            var tSelectedQuality = UnityEngine.Object.op_Inequality(null, this.mCurrentSelectedQuality) ? StringHelper.ToInt(this.mCurrentSelectedQuality.get_gameObject().get_name()) : 0;
            if (UnityEngine.Object.op_Inequality(null, this.mCurrentSelectedQuality)){
                this.get_View().CurrentLv_UIButton.set_normalSprite(this.mCurrentSelectedQuality.get_normalSprite());
                this.get_View().CurrentLv_UIButton.get_sprite().set_color(this.mCurrentSelectedQuality.get_defaultColor());
            }
            this.UpdateCanSelectList(tSelectedQuality);
        },
        ShowQualitySelect$$: "System.Boolean",
        get_ShowQualitySelect: function (){
            return this.mShowQualitySelect;
        },
        set_ShowQualitySelect: function (value){
            if (this.mShowQualitySelect != value){
                this.mShowQualitySelect = value;
                this.ShowQualitySelectUI(this.mShowQualitySelect);
            }
        },
        ShowQualitySelectUI: function (pShow){
            this.get_View().CntrLvs_UIWidget.set_alpha(pShow ? 1 : 0);
        }
    }
};
JsTypes.push(BattleAutoSummonConfigController);
var BattleAutoSummonHeroController = {
    fullname: "BattleAutoSummonHeroController",
    baseTypeName: "HeroCardItemController",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Positon = BattleAutoSummonHeroController.PositionType.Undefined;
            this.OnDragDropReleaseHandler = null;
            this.mDragDropEnable = false;
            this.mUIDragDropItemCallbackable = null;
            this._Quality = 0;
            HeroCardItemController.ctor.call(this);
        },
        InitUI: function (){
            HeroCardItemController.commonPrototype.InitUI.call(this);
            this.set_DragDropEnable(false);
        },
        UpdateData: function (pHeroUID){
            HeroCardItemController.commonPrototype.UpdateData.call(this, pHeroUID);
            GameDebuger.LogError("[TEMP]设置品质，pHeroUID：" + pHeroUID.toString(), null);
            this.set_Quality((pHeroUID | 0) % 4);
        },
        Quality$$: "System.Int32",
        get_Quality: function (){
            return this._Quality;
        },
        set_Quality: function (value){
            this._Quality = value;
        },
        DragDropEnable$$: "System.Boolean",
        get_DragDropEnable: function (){
            return this.mDragDropEnable;
        },
        set_DragDropEnable: function (value){
            if (this.mDragDropEnable != value){
                this.mDragDropEnable = value;
                this.get_UIDragDropItemCallbackable().set_enabled(this.mDragDropEnable);
            }
        },
        UIDragDropItemCallbackable$$: "UIDragDropItemCallbackable",
        get_UIDragDropItemCallbackable: function (){
            if (UnityEngine.Object.op_Equality(null, this.mUIDragDropItemCallbackable)){
                this.mUIDragDropItemCallbackable = GameObjectExt.GetMissingComponent$1(UIDragDropItemCallbackable.ctor, this.get_View().get_gameObject());
                this.mUIDragDropItemCallbackable.restriction = 2;
                this.mUIDragDropItemCallbackable.OnDragDropReleaseHandler = $CreateDelegate(this, this.OnDragDropReleaseCallBack);
            }
            return this.mUIDragDropItemCallbackable;
        },
        OnDragDropReleaseCallBack: function (pSurface, pDragStartPosition){
            if (null != this.OnDragDropReleaseHandler)
                this.OnDragDropReleaseHandler(this, pSurface, pDragStartPosition);
        }
    }
};
JsTypes.push(BattleAutoSummonHeroController);
var HeroCardItemController = {
    fullname: "HeroCardItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mDragEnable = true;
            this.mSelected = true;
            this._OnClickHandler = null;
            this._HeroUID = 0;
            MonolessViewController$1.ctor.call(this, HeroCardItem.ctor);
        },
        OnClickHandler$$: "System.Action`2[[HeroCardItemController],[System.Int64]]",
        get_OnClickHandler: function (){
            return this._OnClickHandler;
        },
        set_OnClickHandler: function (value){
            this._OnClickHandler = value;
        },
        HeroUID$$: "System.Int64",
        get_HeroUID: function (){
            return this._HeroUID;
        },
        set_HeroUID: function (value){
            this._HeroUID = value;
        },
        AfterInitView: function (){
            this.InitUI();
            this.Show();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().HeroCardItem_UIButton.onClick, $CreateDelegate(this, this.OnHeroCardClickHandler));
        },
        OnDispose: function (){
            this.InitUI();
            this.Hide();
        },
        OnHeroCardClickHandler: function (){
            if (null != this.get_OnClickHandler())
                this.get_OnClickHandler()(this, this.get_HeroUID());
        },
        UpdateData: function (pHeroUID){
            this.set_HeroUID(pHeroUID);
            this.UpdateAllUI();
        },
        Show: function (){
            this.get_View().get_gameObject().SetActive(true);
        },
        Hide: function (){
            this.get_View().get_gameObject().SetActive(false);
        },
        UpdateAllUI: function (){
            var tName = System.String.Empty;
            var tIcon = System.String.Empty;
            var tLv = 0;
            var tCountrySprite = System.String.Empty;
            GameDebuger.LogError(System.String.Format$$String$$Object("[TEMP]获取人物具体信息，mHeroUID：{0}", this.get_HeroUID()), null);
            tName = System.String.Format$$String$$Object("N{0}", this.get_HeroUID());
            tLv = ((this.get_HeroUID()) | 0) % 100;
            tCountrySprite = System.String.Format$$String$$Object("ICON_{0}", this.get_HeroUID() % 4 + 1);
            tIcon = (5001 + this.get_HeroUID()).toString();
            this.get_View().LabelName_UILabel.set_text(tName);
            this.get_View().LabelLv_UILabel.set_text(tLv.toString());
            this.get_View().SpriteCountry_UISprite.set_spriteName(tCountrySprite);
            UIHelper.SetPetIcon(this.get_View().HeadIcon_UISprite, tIcon, false);
        },
        InitUI: function (){
            this.set_Selected(false);
            this.set_DragEnable(true);
            this.set_HeroUID(0);
        },
        DragEnable$$: "System.Boolean",
        get_DragEnable: function (){
            return this.mDragEnable;
        },
        set_DragEnable: function (value){
            if (this.mDragEnable != value){
                this.mDragEnable = value;
                this.get_View().HeroCardItem_UIDragScrollView.set_enabled(this.mDragEnable);
            }
        },
        Selected$$: "System.Boolean",
        get_Selected: function (){
            return this.mSelected;
        },
        set_Selected: function (value){
            if (this.mSelected != value){
                this.mSelected = value;
                this.get_View().SpriteSelected_UISprite.set_alpha(this.mSelected ? 1 : 0);
            }
        }
    }
};
JsTypes.push(HeroCardItemController);
var HeroHeadItemController = {
    fullname: "HeroHeadItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mHeroUID = 0;
            this.mPlayerDto = null;
            this.mGeneralCharactor = null;
            this.mIcon = null;
            this.mName = null;
            this.mShowName = true;
            this._OnClickHandler = null;
            MonolessViewController$1.ctor.call(this, HeroHeadItem.ctor);
        },
        OnClickHandler$$: "System.Action`2[[HeroHeadItemController],[System.Int64]]",
        get_OnClickHandler: function (){
            return this._OnClickHandler;
        },
        set_OnClickHandler: function (value){
            this._OnClickHandler = value;
        },
        AfterInitView: function (){
            this.InitData();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().HeroHeadItem_UIButton.onClick, $CreateDelegate(this, this.OnHeadClickHandler));
        },
        OnDispose: function (){
            this.InitData();
        },
        OnHeadClickHandler: function (){
            if (null != this.get_OnClickHandler())
                this.get_OnClickHandler()(this, this.mHeroUID);
        },
        UpdateData$$Int64: function (pHeroUID){
            this.mHeroUID = pHeroUID;
            this.UpdateAllUI();
        },
        UpdateData$$PlayerDto: function (pPlayerDto){
            this.mPlayerDto = pPlayerDto;
            this.mIcon = this.mName = System.String.Empty;
            if (null != this.mPlayerDto && null != this.mPlayerDto.get_charactor()){
                this.mIcon = this.mPlayerDto.get_charactor().texture.toString();
                this.mName = this.mPlayerDto.name;
            }
            this.UpdateAllUI();
        },
        UpdateData$$TeamMemberSimpleDto: function (dto){
            this.set_ShowName(false);
            this.mHeroUID = dto.id;
            this.UpdateData$$GeneralCharactor(dto.get_charactor());
        },
        UpdateData$$GeneralCharactor: function (pGeneralCharactor){
            this.mGeneralCharactor = pGeneralCharactor;
            this.mIcon = this.mName = System.String.Empty;
            if (null != this.mGeneralCharactor){
                this.mIcon = this.mGeneralCharactor.texture.toString();
                this.mName = this.mGeneralCharactor.name;
            }
            this.UpdateAllUI();
        },
        UpdateWithNullData: function (){
            this.get_gameObject().SetActive(false);
        },
        InitData: function (){
            this.mHeroUID = 0;
            this.set_ShowName(false);
            this.mIcon = this.mName = System.String.Empty;
        },
        UpdateAllUI: function (){
            UIHelper.SetPetIcon(this.get_View().HeroHeadItem_UISprite, this.mIcon, false);
            if (this.get_ShowName())
                this.get_View().LabelName_UILabel.set_text(this.mName);
        },
        ShowName$$: "System.Boolean",
        get_ShowName: function (){
            return this.mShowName;
        },
        set_ShowName: function (value){
            if (this.mShowName != value){
                this.mShowName = value;
                this.UpdateNameLabelVisible(this.mShowName);
            }
        },
        UpdateNameLabelVisible: function (pVisible){
            this.get_View().LabelName_UILabel.set_alpha(pVisible ? 1 : 0);
        }
    }
};
JsTypes.push(HeroHeadItemController);
var BattleConfigModel = {
    fullname: "BattleConfigModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mAutoFightIfOutTime = false;
            this.mAutoFightTime = 30;
            this.mUseSubSkill = false;
            this.mMainRoleAutoSkill = 0;
            this.mMainPetAutoSkill = 0;
            this.mMainRoleSubSkill = 0;
            this.mMainPetSubSkill = 0;
            this.mAutoSummonHeroList = null;
            this.mAutoTarget = false;
            System.Object.ctor.call(this);
        },
        Setup: function (){
        },
        Dispose: function (){
        },
        GetInFightPet: function (){
            var tMonsterController = MonsterManager.get_Instance().GetMyPet();
            if (UnityEngine.Object.op_Inequality(null, tMonsterController)){
                return tMonsterController.GetCharacter();
            }
            GameDebuger.LogError("[TEMP]读取当前设置出战的宠物", null);
            return null;
        },
        GetRoleAutoFightSkill: function (){
            GameDebuger.LogError("[TEMP]获取当前主角的自动战斗技能", null);
            return ModelManager.get_BattleDemo()._lastPlayerSkillId;
        },
        GetRoleSubFightSkill: function (){
            GameDebuger.LogError("[TEMP]获取当前主角的候补自动战斗技能", null);
            return ModelManager.get_BattleDemo()._lastPlayerSkillId;
        },
        GetPetAutoFightSkill: function (){
            GameDebuger.LogError("[TEMP]获取当前主将的自动战斗技能", null);
            return ModelManager.get_BattleDemo()._lastPetSkillId;
        },
        GetPetSubFightSkill: function (){
            GameDebuger.LogError("[TEMP]获取当前主角的候补自动战斗技能", null);
            return ModelManager.get_BattleDemo()._lastPetSkillId;
        },
        GetAutoHeroList: function (){
            GameDebuger.LogError("[TEMP]获取自动挂机时配置的武将列表", null);
            var tAutoHeroList = (function (){
                var $v23 = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
                $v23.Add(MonsterManager.get_Instance().GetMyPetId());
                return $v23;
            }).call(this);
            return tAutoHeroList;
        },
        GetSkillList: function (pBattleConfigSkillType){
            var tSkillList = null;
            switch (pBattleConfigSkillType){
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleAutoSkill:
                    break;
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainPetAutoSkill:
                    break;
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainRoleSubSkill:
                    break;
                case BattleAutoSkillConfigController.BattleConfigSkillType.MainPetSubSkill:
                    break;
            }
            tSkillList = DemoSimulateHelper.SimulateSkillList(4 + pBattleConfigSkillType);
            return tSkillList;
        },
        GetHeroList: function (){
            GameDebuger.LogError("[TEMP]获取武将列表", null);
            var tHeroList = (function (){
                var $v24 = new System.Collections.Generic.List$1.ctor(System.Int64.ctor);
                $v24.Add(1);
                $v24.Add(2);
                $v24.Add(3);
                $v24.Add(4);
                $v24.Add(5);
                $v24.Add(6);
                $v24.Add(7);
                $v24.Add(8);
                $v24.Add(9);
                $v24.Add(10);
                return $v24;
            }).call(this);
            return tHeroList;
        },
        GetCurrentUsedHero: function (){
            GameDebuger.LogError("[TEMP]获取出战中的武将", null);
            return this.GetHeroList().get_Item$$Int32(0);
        },
        GetCurrentSelectedHero: function (){
            GameDebuger.LogError("[TEMP]获取已选中的武将列表", null);
            return this.GetHeroList().GetRange(0, 2);
        },
        AutoFightIfOutTime$$: "System.Boolean",
        get_AutoFightIfOutTime: function (){
            return this.mAutoFightIfOutTime;
        },
        set_AutoFightIfOutTime: function (value){
            if (null != value){
                this.mAutoFightIfOutTime = value;
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
            }
        },
        AutoFightTime$$: "System.Int32",
        get_AutoFightTime: function (){
            return this.mAutoFightTime;
        },
        set_AutoFightTime: function (value){
            if (this.mAutoFightTime != value){
                this.mAutoFightTime = value;
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
            }
        },
        UseSubSkill$$: "System.Boolean",
        get_UseSubSkill: function (){
            return this.mUseSubSkill;
        },
        set_UseSubSkill: function (value){
            if (this.mUseSubSkill != value){
                this.mUseSubSkill = value;
                GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
            }
        },
        MainRoleAutoSkill$$: "System.Int32",
        get_MainRoleAutoSkill: function (){
            return this.mMainRoleAutoSkill;
        },
        set_MainRoleAutoSkill: function (value){
            if (this.mMainRoleAutoSkill == value)
                return;
            this.mMainRoleAutoSkill = value;
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        },
        MainPetAutoSkill$$: "System.Int32",
        get_MainPetAutoSkill: function (){
            return this.mMainPetAutoSkill;
        },
        set_MainPetAutoSkill: function (value){
            if (this.mMainPetAutoSkill == value)
                return;
            this.mMainPetAutoSkill = value;
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        },
        MainRoleSubSkill$$: "System.Int32",
        get_MainRoleSubSkill: function (){
            return this.mMainRoleSubSkill;
        },
        set_MainRoleSubSkill: function (value){
            if (this.mMainRoleSubSkill == value)
                return;
            this.mMainRoleSubSkill = value;
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        },
        MainPetSubSkill$$: "System.Int32",
        get_MainPetSubSkill: function (){
            return this.mMainPetSubSkill;
        },
        set_MainPetSubSkill: function (value){
            if (this.mMainPetSubSkill == value)
                return;
            this.mMainPetSubSkill = value;
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        },
        AutoSummonHeroList$$: "System.Collections.Generic.List`1[[System.Int64]]",
        get_AutoSummonHeroList: function (){
            return this.mAutoSummonHeroList;
        },
        set_AutoSummonHeroList: function (value){
            if (this.mAutoSummonHeroList == value)
                return;
            this.mAutoSummonHeroList = value;
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        },
        AutoTarget$$: "System.Boolean",
        get_AutoTarget: function (){
            return this.mAutoTarget;
        },
        set_AutoTarget: function (value){
            if (this.mAutoTarget == value)
                return;
            this.mAutoTarget = value;
            GameEventCenter.SendEvent$$Event(GameEvent.BATTLE_FIGHT_AUTO_FIGHT_CONFIG_UPDATE);
        }
    }
};
JsTypes.push(BattleConfigModel);
var BattleAutoFightConfigInfo = {
    fullname: "BattleAutoFightConfigInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AutoFightIfOutTime = false;
            this.AutoFightTime = 30;
            this.UseSubSkill = false;
            this.MainRoleAutoSkill = 0;
            this.MainPetAutoSkill = 0;
            this.MainRoleSubSkill = 0;
            this.MainPetSubSkill = 0;
            this.AutoSummonHeroList = null;
            this.AutoTarget = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BattleAutoFightConfigInfo);
var BattleAutoConfigView = {
    fullname: "BattleAutoConfigView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleAutoConfigView.NAME = "BattleAutoConfigView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BtnClose_UIButton = null;
            this.CntrPetSubSkill = null;
            this.CntrRoleSubSkill = null;
            this.ToggleSubSkillOpen_UIToggle = null;
            this.ToggleSubSkillClose_UIToggle = null;
            this.ToggleAutoTimeOpen_UIToggle = null;
            this.ToggleAutoTimeClose_UIToggle = null;
            this.ToggleAutoTime1_UIToggle = null;
            this.ToggleAutoTime2_UIToggle = null;
            this.CntrAutoSkillPet = null;
            this.CntrAutoSkillRole = null;
            this.CntrRoleAutoSkill = null;
            this.CntrSubSkillPet = null;
            this.CntrSubSkillRole = null;
            this.CntrPetAutoSkill = null;
            this.CntrRoleGrid_UIGrid = null;
            this.ToggleAutoTargetOpen_UIToggle = null;
            this.ToggleAutoTargetClose_UIToggle = null;
            this.ToggleAutoTime1_UIButton = null;
            this.ToggleAutoTime2_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BtnClose_UIButton = root.Find("CntrMain/CntrBG/BtnClose").GetComponent$1(UIButton.ctor);
            this.CntrPetSubSkill = root.Find("CntrMain/CntrSubSkill/CntrSubSkill/CntrPetSubSkill").get_gameObject();
            this.CntrRoleSubSkill = root.Find("CntrMain/CntrSubSkill/CntrSubSkill/CntrRoleSubSkill").get_gameObject();
            this.ToggleSubSkillOpen_UIToggle = root.Find("CntrMain/CntrSubSkill/CntrToggle/ToggleSubSkillOpen").GetComponent$1(UIToggle.ctor);
            this.ToggleSubSkillClose_UIToggle = root.Find("CntrMain/CntrSubSkill/CntrToggle/ToggleSubSkillClose").GetComponent$1(UIToggle.ctor);
            this.ToggleAutoTimeOpen_UIToggle = root.Find("CntrMain/CntrAutoTime/CntrToggle/ToggleAutoTimeOpen").GetComponent$1(UIToggle.ctor);
            this.ToggleAutoTimeClose_UIToggle = root.Find("CntrMain/CntrAutoTime/CntrToggle/ToggleAutoTimeClose").GetComponent$1(UIToggle.ctor);
            this.ToggleAutoTime1_UIToggle = root.Find("CntrMain/CntrAutoTime/CntrTime/ToggleAutoTime1").GetComponent$1(UIToggle.ctor);
            this.ToggleAutoTime2_UIToggle = root.Find("CntrMain/CntrAutoTime/CntrTime/ToggleAutoTime2").GetComponent$1(UIToggle.ctor);
            this.CntrAutoSkillPet = root.Find("CntrMain/CntrAutoSkill/CntrAutoSkill/CntrAutoSkillPet").get_gameObject();
            this.CntrAutoSkillRole = root.Find("CntrMain/CntrAutoSkill/CntrAutoSkill/CntrAutoSkillRole").get_gameObject();
            this.CntrRoleAutoSkill = root.Find("CntrMain/CntrAutoSkill/CntrAutoSkill/CntrRoleAutoSkill").get_gameObject();
            this.CntrSubSkillPet = root.Find("CntrMain/CntrSubSkill/CntrSubSkill/CntrSubSkillPet").get_gameObject();
            this.CntrSubSkillRole = root.Find("CntrMain/CntrSubSkill/CntrSubSkill/CntrSubSkillRole").get_gameObject();
            this.CntrPetAutoSkill = root.Find("CntrMain/CntrAutoSkill/CntrAutoSkill/CntrPetAutoSkill").get_gameObject();
            this.CntrRoleGrid_UIGrid = root.Find("CntrMain/CntrAutoHero/CntrRoleGrid").GetComponent$1(UIGrid.ctor);
            this.ToggleAutoTargetOpen_UIToggle = root.Find("CntrMain/CntrAutoTarget/CntrToggle/ToggleAutoTargetOpen").GetComponent$1(UIToggle.ctor);
            this.ToggleAutoTargetClose_UIToggle = root.Find("CntrMain/CntrAutoTarget/CntrToggle/ToggleAutoTargetClose").GetComponent$1(UIToggle.ctor);
            this.ToggleAutoTime1_UIButton = root.Find("CntrMain/CntrAutoTime/CntrTime/ToggleAutoTime1").GetComponent$1(UIButton.ctor);
            this.ToggleAutoTime2_UIButton = root.Find("CntrMain/CntrAutoTime/CntrTime/ToggleAutoTime2").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(BattleAutoConfigView);
var BattleAutoSkillConfigView = {
    fullname: "BattleAutoSkillConfigView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleAutoSkillConfigView.NAME = "BattleAutoSkillConfigView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BtnClose_UIButton = null;
            this.CurrentSkillIcon = null;
            this.LabelSkillName_UILabel = null;
            this.LabelSkillCost_UILabel = null;
            this.LabelSkillCD_UILabel = null;
            this.LabelSkillDesc_UILabel = null;
            this.ScrollViewSkillList_UIScrollView = null;
            this.GridSkillList_UIGrid = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BtnClose_UIButton = root.Find("CntrMain/CntrBG/BtnClose").GetComponent$1(UIButton.ctor);
            this.CurrentSkillIcon = root.Find("CntrMain/CntrCurrent/CntrCurrentInfo/CurrentSkillIcon").get_gameObject();
            this.LabelSkillName_UILabel = root.Find("CntrMain/CntrCurrent/CntrCurrentInfo/LabelSkillName").GetComponent$1(UILabel.ctor);
            this.LabelSkillCost_UILabel = root.Find("CntrMain/CntrCurrent/CntrCurrentInfo/LabelSkillCost").GetComponent$1(UILabel.ctor);
            this.LabelSkillCD_UILabel = root.Find("CntrMain/CntrCurrent/CntrCurrentInfo/LabelSkillCD").GetComponent$1(UILabel.ctor);
            this.LabelSkillDesc_UILabel = root.Find("CntrMain/CntrCurrent/CntrCurrentInfo/LabelSkillDesc").GetComponent$1(UILabel.ctor);
            this.ScrollViewSkillList_UIScrollView = root.Find("CntrMain/CntrList/ScrollViewSkillList").GetComponent$1(UIScrollView.ctor);
            this.GridSkillList_UIGrid = root.Find("CntrMain/CntrList/ScrollViewSkillList/GridSkillList").GetComponent$1(UIGrid.ctor);
        }
    }
};
JsTypes.push(BattleAutoSkillConfigView);
var BattleAutoSummonConfigView = {
    fullname: "BattleAutoSummonConfigView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BattleAutoSummonConfigView.NAME = "BattleAutoSummonConfigView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BtnClose_UIButton = null;
            this.GridCardList_UIGrid = null;
            this.ScrollViewCardList_UIScrollView = null;
            this.CntrLvs_UIWidget = null;
            this.CntrLvs_Transform = null;
            this.CurrentLv_UIButton = null;
            this.CurrentUsedHero = null;
            this.CurrentUsedHeroBG = null;
            this.GridCardPostionBG_UIGrid = null;
            this.GridCardPostion_UIGrid = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BtnClose_UIButton = root.Find("CntrMain/CntrBG/BtnClose").GetComponent$1(UIButton.ctor);
            this.GridCardList_UIGrid = root.Find("CntrMain/CntrCards/CntrCardList/DragClipCntr/ScrollViewCardList/GridCardList").GetComponent$1(UIGrid.ctor);
            this.ScrollViewCardList_UIScrollView = root.Find("CntrMain/CntrCards/CntrCardList/DragClipCntr/ScrollViewCardList").GetComponent$1(UIScrollView.ctor);
            this.CntrLvs_UIWidget = root.Find("CntrMain/CntrCards/CntrCardList/CntrLevels/CntrLvs").GetComponent$1(UIWidget.ctor);
            this.CntrLvs_Transform = root.Find("CntrMain/CntrCards/CntrCardList/CntrLevels/CntrLvs");
            this.CurrentLv_UIButton = root.Find("CntrMain/CntrCards/CntrCardList/CntrLevels/CurrentLv").GetComponent$1(UIButton.ctor);
            this.CurrentUsedHero = root.Find("CntrMain/CntrCards/CntrCurrent/CurrentUsedHero").get_gameObject();
            this.CurrentUsedHeroBG = root.Find("CntrMain/CntrCardBG/CntrCurrent/CurrentUsedHeroBG").get_gameObject();
            this.GridCardPostionBG_UIGrid = root.Find("CntrMain/CntrCardBG/CntrCardPostion/GridCardPostionBG").GetComponent$1(UIGrid.ctor);
            this.GridCardPostion_UIGrid = root.Find("CntrMain/CntrCards/CntrCardPostion/GridCardPostion").GetComponent$1(UIGrid.ctor);
        }
    }
};
JsTypes.push(BattleAutoSummonConfigView);
var HeroCardItem = {
    fullname: "HeroCardItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            HeroCardItem.NAME = "HeroCardItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.HeroCardItem_UIButton = null;
            this.SpriteSelected_UISprite = null;
            this.HeroCardItem_UIDragScrollView = null;
            this.LabelLv_UILabel = null;
            this.LabelName_UILabel = null;
            this.SpriteCountry_UISprite = null;
            this.HeadIcon_UISprite = null;
            this.HeroCardItem_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.HeroCardItem_UIButton = root.GetComponent$1(UIButton.ctor);
            this.SpriteSelected_UISprite = root.Find("CntrMain/SpriteSelected").GetComponent$1(UISprite.ctor);
            this.HeroCardItem_UIDragScrollView = root.GetComponent$1(UIDragScrollView.ctor);
            this.LabelLv_UILabel = root.Find("CntrMain/LabelLv").GetComponent$1(UILabel.ctor);
            this.LabelName_UILabel = root.Find("CntrMain/LabelName").GetComponent$1(UILabel.ctor);
            this.SpriteCountry_UISprite = root.Find("CntrMain/SpriteCountry").GetComponent$1(UISprite.ctor);
            this.HeadIcon_UISprite = root.Find("CntrMain/HeadIcon").GetComponent$1(UISprite.ctor);
            this.HeroCardItem_UISprite = root.GetComponent$1(UISprite.ctor);
        }
    }
};
JsTypes.push(HeroCardItem);
var HeroHeadItem = {
    fullname: "HeroHeadItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            HeroHeadItem.NAME = "HeroHeadItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.HeroHeadItem_UISprite = null;
            this.HeroHeadItem_UIButton = null;
            this.LabelName_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.HeroHeadItem_UISprite = root.GetComponent$1(UISprite.ctor);
            this.HeroHeadItem_UIButton = root.GetComponent$1(UIButton.ctor);
            this.LabelName_UILabel = root.Find("CntrMain/LabelName").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(HeroHeadItem);
var BuiltInWebViewController = {
    fullname: "BuiltInWebViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._uniWebView = null;
            MonoViewController$1.ctor.call(this, BuiltInWebView.ctor);
        },
        Open: function (url){
            GameDebuger.Log("GameSpirit URL:" + url, null);
            this._uniWebView = UniWebViewExtHelper.CreateUniWebView$$UIWidget$$String(this.get_View().subview_UISprite, url);
            if (UnityEngine.Object.op_Inequality(this._uniWebView, null)){
                this._uniWebView.add_OnLoadComplete($CreateDelegate(this, this.uniWebViewCompleteHandler));
                this._uniWebView.add_OnReceivedMessage($CreateDelegate(this, this._uniWebView_OnReceivedMessage));
                this._uniWebView.set_zoomEnable(true);
                this._uniWebView.SetUseWideViewPort(true);
                this._uniWebView.SetUseLoadWithOverviewMode(true);
                this._uniWebView.Load();
            }
        },
        _uniWebView_OnReceivedMessage: function (webView, message){
            GameDebuger.TODO("GameEventCenter.SendEvent(GameEvent.BuiltInWebView_OnReceivedMessage, message);");
        },
        uniWebViewCompleteHandler: function (view, b, message){
            if (!b){
                GameDebuger.Log(message, null);
            }
            if (UnityEngine.Object.op_Inequality(this._uniWebView, null)){
                this._uniWebView.Show(false, 0, 0.4, null);
            }
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn_UIButton.onClick, $CreateDelegate(this, this.OnClickCloseButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RefreshBtn_UIButton.onClick, $CreateDelegate(this, this.OnRefreshBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().GoBackBtn_UIButton.onClick, $CreateDelegate(this, this.OnGoBackBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().GoForwardBtn_UIButton.onClick, $CreateDelegate(this, this.OnGoForwardBtnClick));
        },
        OnRefreshBtnClick: function (){
            this._uniWebView.Reload();
        },
        OnGoBackBtnClick: function (){
            this._uniWebView.GoBack();
        },
        OnGoForwardBtnClick: function (){
            this._uniWebView.GoForward();
        },
        OnClickCloseButton: function (){
            ProxyBuiltInWebModule.Close();
        },
        OnDispose: function (){
            if (UnityEngine.Object.op_Inequality(this._uniWebView, null)){
                this._uniWebView.remove_OnLoadComplete($CreateDelegate(this, this.uniWebViewCompleteHandler));
                this._uniWebView.remove_OnReceivedMessage($CreateDelegate(this, this._uniWebView_OnReceivedMessage));
            }
            this._uniWebView = null;
        }
    }
};
JsTypes.push(BuiltInWebViewController);
var BuiltInWebView = {
    fullname: "BuiltInWebView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            BuiltInWebView.NAME = "BuiltInWebView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.subview_UISprite = null;
            this.CloseBtn_UIButton = null;
            this.GoBackBtn_UIButton = null;
            this.GoForwardBtn_UIButton = null;
            this.RefreshBtn_UIButton = null;
            this.Bottom = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.subview_UISprite = root.Find("Content/subview").GetComponent$1(UISprite.ctor);
            this.CloseBtn_UIButton = root.Find("Content/Bottom/CloseBtn").GetComponent$1(UIButton.ctor);
            this.GoBackBtn_UIButton = root.Find("Content/Bottom/GoBackBtn").GetComponent$1(UIButton.ctor);
            this.GoForwardBtn_UIButton = root.Find("Content/Bottom/GoForwardBtn").GetComponent$1(UIButton.ctor);
            this.RefreshBtn_UIButton = root.Find("Content/Bottom/RefreshBtn").GetComponent$1(UIButton.ctor);
            this.Bottom = root.Find("Content/Bottom").get_gameObject();
        }
    }
};
JsTypes.push(BuiltInWebView);
var GameHintViewController = {
    fullname: "GameHintViewController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            GameHintViewController.FIXED_OFFSET = 5;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.posAnchor = null;
            this.hintLbl = null;
            this.hintBg = null;
            this.panel = null;
            this._time = 0;
            this._needTimeClose = true;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Open: function (target, hint, side, maxWidth, needTimeClose, spacingY){
            if (maxWidth == -1 /* -1 */)
                this.hintLbl.set_overflowMethod(2);
            else {
                this.hintLbl.set_overflowMethod(3);
                this.hintLbl.set_width(maxWidth);
            }
            this.hintLbl.set_text(hint);
            this.hintLbl.set_spacingY(spacingY);
            this.SetupAnchor(target, side);
            this._needTimeClose = needTimeClose;
            this._time = 0;
        },
        SetupAnchor: function (target, side){
            this.posAnchor.side = 3;
            if (side == 3){
                this.hintLbl.set_pivot(7);
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, 5 /* FIXED_OFFSET */);
            }
            else if (side == 2){
                this.hintLbl.set_pivot(8);
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, 5 /* FIXED_OFFSET */);
            }
            else if (side == 4){
                this.hintLbl.set_pivot(6);
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, 5 /* FIXED_OFFSET */);
            }
            else if (side == 7){
                this.hintLbl.set_pivot(1);
                this.posAnchor.side = 7;
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, -5 /* -FIXED_OFFSET */);
            }
            else if (side == 6){
                this.hintLbl.set_pivot(0);
                this.posAnchor.side = 6;
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, -5 /* -FIXED_OFFSET */);
            }
            else if (side == 1){
                this.hintLbl.set_pivot(5);
                this.posAnchor.side = 1;
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-5 /* -FIXED_OFFSET */, 0);
            }
            else if (side == 5){
                this.hintLbl.set_pivot(3);
                this.posAnchor.side = 5;
                this.posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(5 /* FIXED_OFFSET */, 0);
            }
            else if (side == 8){
                this.hintLbl.set_pivot(4);
                this.posAnchor.pixelOffset = UnityEngine.Vector2.get_zero();
                this.posAnchor.side = 8;
            }
            this.posAnchor.container = target;
            this.posAnchor.Update();
            this.hintBg.UpdateAnchors();
            if (UnityEngine.Object.op_Equality(this.panel, null))
                this.panel = UIPanel.Find$$Transform(this.hintLbl.get_cachedTransform());
            this.panel.ConstrainTargetToBounds$$Transform$$Boolean(this.hintLbl.get_cachedTransform(), true);
        },
        OnEnable: function (){
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
        },
        OnDisable: function (){
            UICamera.onClick = $RemoveDelegate(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
        },
        Update: function (){
            this._time += _jsComManager.dT;
            if (this._time > 10 /* GameHintManager.FADEOUT_TIME */ && this._needTimeClose){
                this.CloseView();
            }
        },
        ClickEventHandler: function (go){
            this.CloseView();
        },
        CloseView: function (){
            GameHintManager.Close();
        }
    }
};
JsTypes.push(GameHintViewController);
var MultipleSelectionViewController = {
    fullname: "MultipleSelectionViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._optionDic = null;
            this._btnGoList = new System.Collections.Generic.List$1.ctor(UnityEngine.GameObject.ctor);
            this._activeBtnCount = 0;
            this._closeCallback = null;
            this._rowCount = 0;
            MonoViewController$1.ctor.call(this, MultipleSelectionView.ctor);
        },
        AfterInitView: function (){
            MonoViewController$1.commonPrototype.get_View.call(this).selectBtnPrefab.set_name("selectBtn_0");
            var uiBtn = MonoViewController$1.commonPrototype.get_View.call(this).selectBtnPrefab.GetComponent$1(UIButton.ctor);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(uiBtn.onClick, $CreateDelegate(this, this.OnClickSelectionBtn));
            this._btnGoList.Add(MonoViewController$1.commonPrototype.get_View.call(this).selectBtnPrefab);
        },
        Open: function (target, optionDic, side, rowCount){
            this._optionDic = optionDic;
            this.InitBtnList();
            this.SetRowCount(rowCount);
            this.ChangeAnchorMode(target, side);
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
        },
        SetCloseCallback: function (closeCallback){
            this._closeCallback = closeCallback;
        },
        InitBtnList: function (){
            var btnCount = this._optionDic.get_Count();
            if (btnCount > this._activeBtnCount){
                if (btnCount > this._btnGoList.get_Count()){
                    for (var i = this._btnGoList.get_Count(); i < btnCount; ++i){
                        var newBtnGo = GameObjectExt.AddChildAndAdjustDepth$$GameObject$$GameObject(MonoViewController$1.commonPrototype.get_View.call(this).btnGridTrans.get_gameObject(), MonoViewController$1.commonPrototype.get_View.call(this).selectBtnPrefab);
                        var uiBtn = newBtnGo.GetComponent$1(UIButton.ctor);
                        EventDelegate.Set$$List$1$EventDelegate$$Callback(uiBtn.onClick, $CreateDelegate(this, this.OnClickSelectionBtn));
                        this._btnGoList.Add(newBtnGo);
                    }
                }
                for (var i = this._activeBtnCount; i < btnCount; ++i){
                    this._btnGoList.get_Item$$Int32(i).SetActive(true);
                }
            }
            else {
                for (var i = this._btnGoList.get_Count() - 1; i >= btnCount; --i){
                    this._btnGoList.get_Item$$Int32(i).SetActive(false);
                }
            }
            var index = 0;
            var $it53 = this._optionDic.get_Keys().GetEnumerator();
            while ($it53.MoveNext()){
                var optionName = $it53.get_Current();
                this._btnGoList.get_Item$$Int32(index).set_name(optionName);
                var btnLbl = this._btnGoList.get_Item$$Int32(index++).GetComponentInChildren$1(UILabel.ctor);
                btnLbl.set_text(optionName);
            }
            this._activeBtnCount = btnCount;
        },
        ShowRedPoint: function (dct){
            for (var i = 0; i < this._btnGoList.get_Count(); ++i){
                if (dct.ContainsKey(this._btnGoList.get_Item$$Int32(i).get_name())){
                    var go = this._btnGoList.get_Item$$Int32(i).get_transform().Find("PointSprite").get_gameObject();
                    go.SetActive(dct.get_Item$$TKey(this._btnGoList.get_Item$$Int32(i).get_name()));
                }
            }
        },
        SetRowCount: function (count){
            this._rowCount = count;
        },
        SetupBtnName: function (index, name){
            if (index < this._activeBtnCount){
                var btnLbl = this._btnGoList.get_Item$$Int32(index).GetComponentInChildren$1(UILabel.ctor);
                btnLbl.set_text(name);
            }
        },
        ChangeAnchorMode: function (target, side){
            if (this._rowCount > 0 && this._activeBtnCount > this._rowCount){
                var col = ((UnityEngine.Mathf.Ceil((this._activeBtnCount / this._rowCount))) | 0);
                this.get_View().ContentBg.set_height(18 + 72 * this._rowCount);
                this.get_View().ContentBg.set_width(50 + 200 * col + 10 * (col - 1));
                this.get_View().btnGrid.maxPerLine = this._rowCount;
            }
            else {
                MonoViewController$1.commonPrototype.get_View.call(this).ContentBg.set_height(18 + 72 * this._activeBtnCount);
                this.get_View().ContentBg.set_width(250);
                this.get_View().btnGrid.maxPerLine = 0;
            }
            var halfWidth = ((this.get_View().ContentBg.get_width() / 2) | 0);
            switch (side){
                case MultipleSelectionManager.Side.Left:
                    this.get_View().viewAnchor.side = 1;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-10 /* -10f */, 0);
                    this.get_View().ContentBg.set_rawPivot(5);
                    break;
                case MultipleSelectionManager.Side.LeftTop:
                    this.get_View().viewAnchor.side = 2;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-10 /* -10f */, 0);
                    this.get_View().ContentBg.set_rawPivot(2);
                    break;
                case MultipleSelectionManager.Side.LeftBottom:
                    this.get_View().viewAnchor.side = 0;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-10 /* -10f */, 0);
                    this.get_View().ContentBg.set_rawPivot(8);
                    break;
                case MultipleSelectionManager.Side.Right:
                    this.get_View().viewAnchor.side = 5;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(10, 0);
                    this.get_View().ContentBg.set_rawPivot(3);
                    break;
                case MultipleSelectionManager.Side.RightTop:
                    this.get_View().viewAnchor.side = 4;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(10, 0);
                    this.get_View().ContentBg.set_rawPivot(0);
                    break;
                case MultipleSelectionManager.Side.RightBottom:
                    this.get_View().viewAnchor.side = 6;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(10, 0);
                    this.get_View().ContentBg.set_rawPivot(6);
                    break;
                case MultipleSelectionManager.Side.Top:
                    this.get_View().viewAnchor.side = 3;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, 10);
                    this.get_View().ContentBg.set_rawPivot(7);
                    break;
                case MultipleSelectionManager.Side.TopLeft:
                    this.get_View().viewAnchor.side = 2;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(halfWidth, 10);
                    this.get_View().ContentBg.set_rawPivot(7);
                    break;
                case MultipleSelectionManager.Side.TopRight:
                    this.get_View().viewAnchor.side = 4;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-halfWidth, 10);
                    this.get_View().ContentBg.set_rawPivot(7);
                    break;
                case MultipleSelectionManager.Side.Bottom:
                    this.get_View().viewAnchor.side = 7;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(0, -10 /* -10f */);
                    this.get_View().ContentBg.set_rawPivot(1);
                    break;
                case MultipleSelectionManager.Side.BottomLeft:
                    this.get_View().viewAnchor.side = 0;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(halfWidth, -10 /* -10f */);
                    this.get_View().ContentBg.set_rawPivot(1);
                    break;
                case MultipleSelectionManager.Side.BottomRight:
                    this.get_View().viewAnchor.side = 6;
                    this.get_View().viewAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(-halfWidth, -10 /* -10f */);
                    this.get_View().ContentBg.set_rawPivot(1);
                    break;
            }
            this.get_View().btnGrid.Reposition();
            this.get_View().viewAnchor.container = target;
            this.get_View().viewAnchor.Update();
        },
        OnClickSelectionBtn: function (){
            var optionName = UIButton.current.get_name();
            if (this._optionDic.ContainsKey(optionName)){
                if (this._optionDic.get_Item$$TKey(optionName) != null)
                    this._optionDic.get_Item$$TKey(optionName)(optionName);
            }
            this.CloseView();
        },
        ClickEventHandler: function (clickGo){
            var panel = UIPanel.Find$$Transform(clickGo.get_transform());
            if (UnityEngine.Object.op_Inequality(panel, this.get_View().uiPanel))
                this.CloseView();
        },
        CloseView: function (){
            this._optionDic = null;
            UICamera.onClick = $RemoveDelegate(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
            MultipleSelectionManager.Close();
            if (this._closeCallback != null)
                this._closeCallback();
        }
    }
};
JsTypes.push(MultipleSelectionViewController);
var ITabBtnController = {
    fullname: "ITabBtnController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITabBtnController);
var TabBtnWidgetController = {
    fullname: "TabBtnWidgetController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITabBtnController"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.tabClickEvt = null;
            MonolessViewController$1.ctor.call(this, TabBtnWidget.ctor);
        },
        AfterInitView: function (){
            this.get_View().redFlag.SetActive(false);
            UIHelper.AddButtonClickSound(this.get_gameObject(), "sound_UI_tab_click");
        },
        RegistCustomEvent: function (){
            this.tabClickEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.get_View().get_gameObject());
        },
        OnDispose: function (){
            this.tabClickEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.tabClickEvt);
        },
        RemoveCustomEvent: function (){
        },
        OnTabClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTabClick: function (){
            return this.tabClickEvt;
        },
        SetBtnLbl: function (name){
            this._view.btnLbl_UILabel.set_text(name);
        },
        SetBtnLblSpac: function (x, y){
            this._view.btnLbl_UILabel.set_spacingX(x);
            this._view.btnLbl_UILabel.set_spacingY(y);
        },
        SetSelected: function (_selected){
            if (_selected){
                this.get_View().TabBtnWidget_UISprite.set_spriteName(this.get_View().TabBtnWidget_UISprite.get_spriteName().Replace$$String$$String("_Off", "_On"));
            }
            else {
                this.get_View().TabBtnWidget_UISprite.set_spriteName(this.get_View().TabBtnWidget_UISprite.get_spriteName().Replace$$String$$String("_On", "_Off"));
            }
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(TabBtnWidgetController);
var GameHintManager = {
    fullname: "GameHintManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameHintManager.FADEOUT_TIME = 10;
            GameHintManager.VIEWNAME = "GameHintView";
            GameHintManager._instance = null;
        },
        Open$$GameObject$$String$$Side$$Int32$$Boolean$$Int32: function (target, hint, side, maxWidth, needTimeClose, spacingY){
            if (System.String.IsNullOrEmpty(hint))
                return;
            GameHintManager.InitGameHintManager();
            GameHintManager._instance.Open(target, hint, side, maxWidth, needTimeClose, spacingY);
        },
        Open$$GameObject$$Int32$$Side$$Int32$$Boolean$$Int32: function (target, hintId, side, maxWidth, needTimeClose, spacingY){
            if (hintId == 0)
                return;
            var hint = GameHintManager.GetHintIDString(hintId);
            GameHintManager.Open$$GameObject$$String$$Side$$Int32$$Boolean$$Int32(target, hint, side, maxWidth, needTimeClose, spacingY);
        },
        InitGameHintManager: function (){
            var view = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("GameHintView" /* VIEWNAME */, UILayerType.FloatTip, false, true);
            if (UnityEngine.Object.op_Equality(GameHintManager._instance, null)){
                GameHintManager._instance = GameObjectExt.GetMissingComponent$1(GameHintViewController.ctor, view);
                GameHintManager._instance.hintLbl = view.GetComponentInChildren$1(UILabel.ctor);
                GameHintManager._instance.hintBg = view.GetComponentInChildren$1(UISprite.ctor);
                GameHintManager._instance.posAnchor = view.GetComponentInChildren$1(UIAnchor.ctor);
                GameHintManager._instance.panel = view.GetComponent$1(UIPanel.ctor);
                GameHintManager._instance.panel.set_clipping(4);
                GameHintManager._instance.panel.updateAnchors = 0;
                GameHintManager._instance.panel.SetAnchor$$GameObject$$Int32$$Int32$$Int32$$Int32(LayerManager.get_Root().UICamera.get_gameObject(), 20, 20, -20 /* -20 */, -20 /* -20 */);
            }
        },
        Close: function (){
            UIModuleManager.get_Instance().HideModule("GameHintView" /* VIEWNAME */);
        },
        Dispose: function (){
            UIModuleManager.get_Instance().CloseModule("GameHintView" /* VIEWNAME */, true);
            GameHintManager._instance = null;
        },
        GetHintIDString: function (hintId){
            switch (hintId){
                case 1:
                    return "战斗中受到物理攻击和法术攻击则减少，为0时死亡";
                case 2:
                    return "战斗中使用法术时消耗，为0时法术无法使用";
                case 3:
                    return "物理攻击";
                case 4:
                    return "物理防御";
                case 5:
                    return "出手速度";
                case 6:
                    return "法术攻击和法术防御";
                case 7:
                    return "1点体质增加10点气血、0.1点速度、0.1点灵力";
                case 8:
                    return "1点魔力增加0.7点灵力";
                case 9:
                    return "1点力量增加0.7点攻击、0.1点速度、0.4点灵力";
                case 10:
                    return "1点耐力增加1.5点防御、0.1点速度、0.1点灵力";
                case 11:
                    return "1点敏捷增加0.7点速度";
                case 12:
                    return "当前可支配属性点";
                case 13:
                    return "影响攻击";
                case 14:
                    return "影响防御";
                case 15:
                    return "影响气血上限";
                case 16:
                    return "影响灵力";
                case 17:
                    return "影响速度";
                case 18:
                    return "寿命低于50点将无法出战；每次出战会消耗1点，如战斗内死亡\n则会扣除50点；可使用长寿果、长寿面、糯米桂花丸提升寿命";
                case 19:
                    return "影响宠物物理攻击力";
                case 20:
                    return "影响宠物物理防御力";
                case 21:
                    return "影响宠物气血上限";
                case 22:
                    return "影响宠物灵力";
                case 23:
                    return "影响宠物速度";
                case 24:
                    return "主要影响气血上限，对灵力和速度有一定影响";
                case 25:
                    return "主要影响灵力，对速度有一定影响";
                case 26:
                    return "主要影响攻击，对灵力和速度有一定影响";
                case 27:
                    return "主要影响防御，对灵力和速度有一定影响";
                case 28:
                    return "影响速度";
                case 29:
                    return "影响潜力增加属性的效果";
                case 30:
                    return "影响宠物的加点效果，越高越好";
                default:
                    return "";
            }
        },
        GetFactionName: function (factionId){
            var tFaction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, factionId);
            if (tFaction == null)
                return "(门派)";
            return tFaction.name;
        },
        GetFactionHintString: function (factionId){
            switch (factionId){
                case AppDto.Faction.FactionType.Civilian:
                    return "平民";
                default:
                    {
                    GameDebuger.TODO("case Faction.FactionType.DaTang:\n                return \'攻击敌方宠物时伤害增加5%\';\n            case Faction.FactionType.HuaSheng:\n                return \'每回合有10%几率自动解除自己身上的封印状态\';\n            case Faction.FactionType.FangCun:\n                return \'受到法术治疗时，效果增加20%；对带有傀儡类技能的敌人伤害提高100%\';\n            case Faction.FactionType.TianGong:\n                return \'15%几率躲避负面法术（不包括龙宫的门派法术）\';\n            case Faction.FactionType.LongGong:\n                return \'门派法术必定命中\';\n            case Faction.FactionType.PuTuo:\n                return \'倒地时有20%的几率出现涅槃效果，气血恢复15%。如果存在其他涅槃效果，则其几率增加10%\';\n            case Faction.FactionType.MoWang:\n                return \'10%几率躲避普通攻击，5%几率躲避物理技能\';\n            case Faction.FactionType.ShiTuo:\n                return \'宠物寿命消耗减半，并且战斗中不会逃跑\';\n            case Faction.FactionType.PanSi:\n                return \'被NPC击倒时，100%几率复活并恢复1点气血，\\n每场战斗最多触发1次；被非NPC击倒时，触发几率为50%\';\n           \n                case Faction.FactionType.JiLe:\n                return \'物理暴击提高2%\';\n            case Faction.FactionType.PengLai:\n                return \'法术暴击提高2%\';\n            case Faction.FactionType.Difu:\n                return \'夜战能力（夜晚物理攻击和防御不会降低），封印抵抗率增加20%\';\n                    ");
                    }
                    return "";
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameHintManager);
var ItemType = {
    fullname: "ItemType",
    staticDefinition: {
        defaultType: 0
    },
    Kind: "Enum"
};
JsTypes.push(ItemType);
var OperatorType = {
    fullname: "OperatorType",
    staticDefinition: {
        defaultType: 0
    },
    Kind: "Enum"
};
JsTypes.push(OperatorType);
var ItemSelectMenuHelper = {
    fullname: "ItemSelectMenuHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ItemSelectMenuHelper.dic = (function (){
                var $v25 = new System.Collections.Generic.Dictionary$2.ctor(OperatorType.ctor, Tuple$2.ctor);
                $v25.Add(OperatorType.defaultType, Tuple.Create$2$$T1$$T2(System.String.ctor, System.Action$1.ctor, "aaa", ItemSelectMenuHelper.aaa));
                return $v25;
            }).call(this);
        },
        aaa: function (dto){
        },
        Show: function (go, dto){
            var ty = new Array(10);
            var _dic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Action$1.ctor);
            CollectionExtension.ForEach$1(OperatorType.ctor, ty, function (t){
                var act = function (s){
                    if (ItemSelectMenuHelper.dic != null)
                        ItemSelectMenuHelper.dic.get_Item$$TKey(t).p2(dto);
                };
                _dic.set_Item$$TKey(ItemSelectMenuHelper.dic.get_Item$$TKey(t).p1, act);
            });
            MultipleSelectionManager.Open(go, _dic, MultipleSelectionManager.Side.LeftTop, null, 0, null);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ItemSelectMenuHelper);
var MultipleSelectionManager = {
    fullname: "MultipleSelectionManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            MultipleSelectionManager.VIEWNAME = "MultipleSelectionView";
            MultipleSelectionManager._instance = null;
        },
        Open: function (target, optionDic, side, closeCallback, rowCount, redpointDct){
            if (optionDic == null || optionDic.get_Count() == 0)
                return;
            if (UnityEngine.Object.op_Equality(MultipleSelectionManager._instance, null)){
                MultipleSelectionManager._instance = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(MultipleSelectionViewController.ctor, "MultipleSelectionView" /* VIEWNAME */, UILayerType.FourModule, false, true);
            }
            MultipleSelectionManager._instance.Open(target, optionDic, side, rowCount);
            MultipleSelectionManager._instance.SetCloseCallback(closeCallback);
            if (redpointDct != null){
                MultipleSelectionManager._instance.ShowRedPoint(redpointDct);
            }
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("MultipleSelectionView" /* VIEWNAME */, true);
        },
        Dispose: function (){
            UIModuleManager.get_Instance().CloseModule("MultipleSelectionView" /* VIEWNAME */, true);
            MultipleSelectionManager._instance = null;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(MultipleSelectionManager);
var MultipleSelectionView = {
    fullname: "MultipleSelectionView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.viewAnchor = null;
            this.ContentBg = null;
            this.btnGrid = null;
            this.btnGridTrans = null;
            this.selectBtnPrefab = null;
            this.uiPanel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.viewAnchor = root.GetComponent$1(UIAnchor.ctor);
            this.ContentBg = root.Find("ContentBg").GetComponent$1(UISprite.ctor);
            this.btnGrid = root.Find("ContentBg/ButtonGrid").GetComponent$1(UIGrid.ctor);
            this.btnGridTrans = root.Find("ContentBg/ButtonGrid");
            this.selectBtnPrefab = root.Find("ContentBg/ButtonGrid/selectBtnPrefab").get_gameObject();
            this.uiPanel = root.GetComponent$1(UIPanel.ctor);
        }
    }
};
JsTypes.push(MultipleSelectionView);
var TabBtnWidget = {
    fullname: "TabBtnWidget",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            TabBtnWidget.NAME = "TabBtnWidget";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.redFlag_UISprite = null;
            this.redFlag = null;
            this.btnLbl_UILabel = null;
            this.TabBtnWidget_UISprite = null;
            this.TabBtnWidget_BoxCollider = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.redFlag_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "redFlag");
            this.redFlag = GameObjectExt.FindGameObject(root, "redFlag");
            this.btnLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "btnLbl");
            this.TabBtnWidget_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "");
            this.TabBtnWidget_BoxCollider = GameObjectExt.FindScript$1(UnityEngine.BoxCollider.ctor, root, "");
        }
    }
};
JsTypes.push(TabBtnWidget);
var EmailModel = {
    fullname: "EmailModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            EmailModel.instance = new EmailModel.ctor();
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.maillist = new System.Collections.Generic.List$1.ctor(AppDto.PlayerMailDto.ctor);
            System.Object.ctor.call(this);
        },
        MailList$$: "System.Collections.Generic.List`1[[AppDto.PlayerMailDto]]",
        get_MailList: function (){
            return this.maillist;
        },
        MailSortList$$: "System.Collections.Generic.List`1[[AppDto.PlayerMailDto]]",
        get_MailSortList: function (){
            if (this.maillist.get_Count() > 0)
                this.maillist.Sort$$Comparison$1($CreateDelegate(this, this.CustomSort));
            var tList = new System.Collections.Generic.List$1.ctor(AppDto.PlayerMailDto.ctor);
            var curTime = SystemTimeManager.get_Instance().GetServerTime();
            for (var i = 0; i < this.maillist.get_Count(); i++){
                var expirationTime = DateUtil.UnixTimeStampToDateTime(this.maillist.get_Item$$Int32(i).sendTime);
                expirationTime = expirationTime.AddDays(this.maillist.get_Item$$Int32(i).get_mailType().saveDate);
                if (System.DateTime.Compare(curTime, expirationTime) < 0)
                    tList.Add(this.maillist.get_Item$$Int32(i));
            }
            return tList;
        },
        Setup: function (){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Mail_Check(), "", $CreateDelegate(this, this.OnSetupSuccess), $CreateDelegate(this, this.OnSetupFail));
        },
        OnSetupSuccess: function (e){
            var dataList = As(e, AppDto.MailsDto.ctor);
            if (dataList != null){
                var mailDtoList = new System.Collections.Generic.List$1.ctor$$Int32(AppDto.PlayerMailDto.ctor, dataList.mails.get_Count());
                for (var i = 0; i < dataList.mails.get_Count(); i++){
                    var dto = As(dataList.mails.get_Item$$Int32(i), AppDto.PlayerMailDto.ctor);
                    mailDtoList.Add(dto);
                }
                this.maillist = mailDtoList;
            }
            LoginManager.get_Instance().RemoveRequestDataFlag(ModelManager.get_Email().toString());
        },
        OnSetupFail: function (e){
            TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("拉取邮件列表失败", ColorConstantV3.Color_Red), false, false, "");
        },
        CustomSort: function (a, b){
            return a.read == b.read ? (a.sendTime == b.sendTime ? b.attachments.get_Count().CompareTo$$Int32(a.attachments.get_Count()) : b.sendTime.CompareTo$$Int64(a.sendTime)) * 2 : a.read.CompareTo$$Boolean(b.read) * 3;
        },
        Dispose: function (){
            this.maillist = null;
        }
    }
};
JsTypes.push(EmailModel);
var EmailContentDataMgr = {
    fullname: "EmailContentDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            EmailContentDataMgr._ins = null;
            EmailContentDataMgr.stream = new UniRx.Subject$1.ctor(IEmailContentData.ctor);
        },
        Instance$$: "EmailContentDataMgr",
        get_Instance: function (){
            if (EmailContentDataMgr._ins == null)
                EmailContentDataMgr._ins = new EmailContentDataMgr.ctor();
            return EmailContentDataMgr._ins;
        },
        Stream$$: "UniRx.IObservable`1[[IEmailContentData]]",
        get_Stream: function (){
            return EmailContentDataMgr.stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = new EmailContentDataMgr.EmailContentData.ctor();
            System.Object.ctor.call(this);
        },
        AddMailFromNotify: function (notify){
            this._data.get_MailSortList().Insert(0, notify);
            this._data.set_AddEmail(true);
            EmailContentDataMgr.stream.OnNext(this._data);
        },
        Dispose: function (){
            this._data.Dispose();
            this._data = null;
        }
    }
};
JsTypes.push(EmailContentDataMgr);
var IEmailContentData = {
    fullname: "IEmailContentData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IEmailContentData);
var IEmailContent = {
    fullname: "IEmailContent",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IEmailContent);
var EmailContent = {
    fullname: "EmailContent",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            EmailContent.NAME = "EmailContent";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IEmailContent"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Grid_UIGrid = null;
            this.ScrollView_UIScrollView = null;
            this.EmailViewParent_GameObject = null;
            this.OneKeyReceiveBtn_UIButton = null;
            this.DelReadBtn_UIButton = null;
            FRPBaseView$3.ctor.call(this, EmailContent.ctor, IEmailContent.ctor, IEmailContentData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        Grid$$: "UIGrid",
        get_Grid: function (){
            return this.Grid_UIGrid;
        },
        ScrollView$$: "UIScrollView",
        get_ScrollView: function (){
            return this.ScrollView_UIScrollView;
        },
        OneKeyBtn$$: "UIButton",
        get_OneKeyBtn: function (){
            return this.OneKeyReceiveBtn_UIButton;
        },
        DelReadBtn$$: "UIButton",
        get_DelReadBtn: function (){
            return this.DelReadBtn_UIButton;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.Grid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "ScrollView/Grid");
            this.ScrollView_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "ScrollView");
            this.EmailViewParent_GameObject = GameObjectExt.FindGameObject(root, "EmailViewParent");
            this.OneKeyReceiveBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "OnKeyReceive");
            this.DelReadBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "DelRead");
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        },
        EmailViewParent$$: "UnityEngine.GameObject",
        get_EmailViewParent: function (){
            return this.EmailViewParent_GameObject;
        }
    }
};
JsTypes.push(EmailContent);
var EmailItemController = {
    fullname: "EmailItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnSelect = null;
            this.ID = 0;
            this.mailDto = null;
            this.EmailItem_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, EmailItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().EmailItem_UIButton.onClick, $CreateDelegate(this, this.OnClick));
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().EmailItem_UIButton.onClick, $CreateDelegate(this, this.OnClick));
        },
        UpdateView$$ISocialityData: function (data){
        },
        MailDto$$: "AppDto.PlayerMailDto",
        get_MailDto: function (){
            return this.mailDto;
        },
        Init: function (){
        },
        UpdateView: function (){
            this.get_View().AttatchIcon_UISprite.set_spriteName(this.mailDto.read ? "" : "10003");
            this.get_View().EmailIcon_UISprite.set_spriteName(this.mailDto.read ? "back" : "dice");
        },
        SetData: function (dto, onSelect){
            this.ID = dto.id;
            this.mailDto = dto;
            this.OnSelect = onSelect;
            this.Select(false);
            this.UpdateView();
            this.get_View().AttatchIcon_UISprite.set_enabled((dto.attachments.get_Count() == 0 ? false : true));
            this.get_View().EmailTitleLabel_UILabel.set_text(dto.title);
            if (dto.get_mailType().saveDate == 0){
                this.get_View().EmailTimeLabel_UILabel.set_text("时效：永久");
            }
            else {
                var outTime = DateUtil.DateTimeToUnixTimestamp((DateUtil.UnixTimeStampToDateTime(dto.sendTime)).AddDays(dto.get_mailType().saveDate));
                this.get_View().EmailTimeLabel_UILabel.set_text(DateUtil.GetDateStr(outTime, "yyyy-MM-dd"));
            }
        },
        Select: function (b){
            this.get_View().Selected_UISprite.set_enabled(b);
        },
        ResetUI: function (){
            this.get_View().EmailTimeLabel_UILabel.set_text("");
            this.get_View().EmailTitleLabel_UILabel.set_text("");
            this.get_View().AttatchIcon_UISprite.set_enabled(false);
        },
        OnClick: function (){
            if (this.OnSelect != null)
                this.OnSelect(this);
        },
        InitReactiveEvents: function (){
            this.EmailItem_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().EmailItem_UIButton);
        },
        ClearReactiveEvents: function (){
            this.EmailItem_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.EmailItem_UIButtonEvt);
        },
        OnEmailItem_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnEmailItem_UIButtonClick: function (){
            return this.EmailItem_UIButtonEvt;
        }
    }
};
JsTypes.push(EmailItemController);
var EmailItem = {
    fullname: "EmailItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            EmailItem.NAME = "EmailItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AttatchIcon_UISprite = null;
            this.EmailIcon_UISprite = null;
            this.Selected_UISprite = null;
            this.EmailItem_UIButton = null;
            this.EmailTimeLabel_UILabel = null;
            this.EmailTitleLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.AttatchIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "AttatchIcon");
            this.EmailIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "EmailIcon");
            this.Selected_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "Selected");
            this.EmailItem_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "");
            this.EmailTimeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentContainer/EmailTimeLabel");
            this.EmailTitleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentContainer/EmailTitleLabel");
        }
    }
};
JsTypes.push(EmailItem);
var IEmailView = {
    fullname: "IEmailView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IEmailView);
var EmailView = {
    fullname: "EmailView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            EmailView.NAME = "EmailView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IEmailView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.TitleLabel_UILabel = null;
            this.GetOrDelBtn_UIButton = null;
            this.GetOrDelBtnScale_UIButtonScale = null;
            this.BtnLabel_UILabel = null;
            this.ContentLabel_UILabel = null;
            this.Attachment_UIWidget = null;
            this.AttachmentLabel_UILabel = null;
            this.AttachmentTable_UITable = null;
            this.TimeLabel_UILabel = null;
            this.SenderLabel_UILabel = null;
            this.ContentRegion_UIEventTrigger = null;
            this.CloseBtn_UIButtonEvt = null;
            this.GetOrDelBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, EmailView.ctor, IEmailView.ctor, IEmailContentData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        TitleLabel$$: "UILabel",
        get_TitleLabel: function (){
            return this.TitleLabel_UILabel;
        },
        ContentLabel$$: "UILabel",
        get_ContentLabel: function (){
            return this.ContentLabel_UILabel;
        },
        AttachmentWidget$$: "UIWidget",
        get_AttachmentWidget: function (){
            return this.Attachment_UIWidget;
        },
        AttachmentTable$$: "UITable",
        get_AttachmentTable: function (){
            return this.AttachmentTable_UITable;
        },
        TimeLabel$$: "UILabel",
        get_TimeLabel: function (){
            return this.TimeLabel_UILabel;
        },
        SenderLabel$$: "UILabel",
        get_SenderLabel: function (){
            return this.SenderLabel_UILabel;
        },
        BtnLabel$$: "UILabel",
        get_BtnLabel: function (){
            return this.BtnLabel_UILabel;
        },
        BtnGetOrDel$$: "UIButton",
        get_BtnGetOrDel: function (){
            return this.GetOrDelBtn_UIButton;
        },
        ContentRegionTrigger$$: "UIEventTrigger",
        get_ContentRegionTrigger: function (){
            return this.ContentRegion_UIEventTrigger;
        },
        ButtonScale$$: "UIButtonScale",
        get_ButtonScale: function (){
            return this.GetOrDelBtnScale_UIButtonScale;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseWindow/CloseBtn");
            this.TitleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BaseWindow/TitleLabel");
            this.GetOrDelBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/GetOrDelBtn");
            this.GetOrDelBtnScale_UIButtonScale = GameObjectExt.FindScript$1(UIButtonScale.ctor, root, "ContentWindow/GetOrDelBtn");
            this.BtnLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/GetOrDelBtn/BtnLabel");
            this.ContentLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/BG/ContentLabel");
            this.Attachment_UIWidget = GameObjectExt.FindScript$1(UIWidget.ctor, root, "ContentWindow/BG/Attachment");
            this.AttachmentLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/BG/Attachment/AttachmentLabel");
            this.AttachmentTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/BG/Attachment/AttachmentTable");
            this.TimeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/BG/TimeLabel");
            this.SenderLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/BG/SenderLabel");
            this.ContentRegion_UIEventTrigger = GameObjectExt.FindScript$1(UIEventTrigger.ctor, root, "ContentWindow/BG/ContentRegion");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.GetOrDelBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.GetOrDelBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.GetOrDelBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.GetOrDelBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnGetOrDelBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnGetOrDelBtn_UIButtonClick: function (){
            return this.GetOrDelBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(EmailView);
var GeneralIconController = {
    fullname: "GeneralIconController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, GeneralIcon.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(GeneralIconController);
var GeneralIcon = {
    fullname: "GeneralIcon",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            GeneralIcon.NAME = "GeneralIcon";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.GeneralIcon_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.GeneralIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "");
        }
    }
};
JsTypes.push(GeneralIcon);
var GeneralDataMgr = {
    fullname: "GeneralDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GeneralDataMgr._ins = null;
            GeneralDataMgr.stream = new UniRx.Subject$1.ctor(IGeneralData.ctor);
        },
        Instance$$: "GeneralDataMgr",
        get_Instance: function (){
            if (GeneralDataMgr._ins == null)
                GeneralDataMgr._ins = new GeneralDataMgr.ctor();
            return GeneralDataMgr._ins;
        },
        Stream$$: "UniRx.IObservableExpand`1[[IGeneralData]]",
        get_Stream: function (){
            return GeneralDataMgr.stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = null;
            System.Object.ctor.call(this);
            this._data = new GeneralDataMgr.GeneralData.ctor();
        },
        Dispose: function (){
            this._data.Dispose();
            this._data = null;
        }
    }
};
JsTypes.push(GeneralDataMgr);
var GeneralPropertyInfo = {
    fullname: "GeneralPropertyInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GeneralPropertyInfo);
var GeneralType = {
    fullname: "GeneralType",
    baseTypeName: "System.ValueType",
    assemblyName: "SharpKitProj",
    Kind: "Struct",
    definition: {
        ctor$$eGeneralQuality$$Int32$$Int32$$Int32$$eArmorType: function (quality, campID, gender, occupation, armorType){
            this.Quality = eGeneralQuality.NONE;
            this.CampID = 0;
            this.Gender = 0;
            this.Occupation = 0;
            this.ArmorType = eArmorType.NONE;
            System.ValueType.ctor.call(this);
            this.Quality = quality;
            this.CampID = campID;
            this.Gender = gender;
            this.Occupation = occupation;
            this.ArmorType = armorType;
        },
        ctor: function (){
            this.Quality = eGeneralQuality.NONE;
            this.CampID = 0;
            this.Gender = 0;
            this.Occupation = 0;
            this.ArmorType = eArmorType.NONE;
            System.ValueType.ctor.call(this);
        }
    }
};
JsTypes.push(GeneralType);
var General = {
    fullname: "General",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ID = 0;
            this.Name = null;
            this.GeneralType = new GeneralType.ctor();
            this.Level = 0;
            this.DefendPro = 0;
            this.SecondGeneralPropertyDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this.FirstGeneralProperty = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this.PropertyScore = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this.GrowRate = 0;
            this.StrengthenLevel = 0;
            this.QualityLevel = 0;
            this.BreakLevel = 0;
            this.FightNum = 0;
            this.RecruitCost = 0;
            this.RelationAddProDic = null;
            this.RelationNeedGeneralList = null;
            System.Object.ctor.call(this);
        },
        ctor$$Int32: function (id){
            this.ID = 0;
            this.Name = null;
            this.GeneralType = new GeneralType.ctor();
            this.Level = 0;
            this.DefendPro = 0;
            this.SecondGeneralPropertyDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this.FirstGeneralProperty = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this.PropertyScore = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this.GrowRate = 0;
            this.StrengthenLevel = 0;
            this.QualityLevel = 0;
            this.BreakLevel = 0;
            this.FightNum = 0;
            this.RecruitCost = 0;
            this.RelationAddProDic = null;
            this.RelationNeedGeneralList = null;
            System.Object.ctor.call(this);
            this.ID = id;
        }
    }
};
JsTypes.push(General);
var GeneralModel = {
    fullname: "GeneralModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GeneralModel.instance = new GeneralModel.ctor();
        },
        Instance$$: "GeneralModel",
        get_Instance: function (){
            return GeneralModel.instance;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IModuleModel"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.haveList = null;
            this.soulCountDic = null;
            this.cacheHaveList = null;
            this.cacheSoulDic = null;
            System.Object.ctor.call(this);
            this.haveList = new System.Collections.Generic.List$1.ctor(General.ctor);
            this.soulCountDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
        },
        CacheHaveList$$: "System.Collections.Generic.List`1[[General]]",
        get_CacheHaveList: function (){
            return this.cacheHaveList;
        },
        CacheSoulDic$$: "System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int32]]",
        get_CacheSoulDic: function (){
            return this.cacheSoulDic;
        },
        HaveList$$: "System.Collections.Generic.List`1[[General]]",
        get_HaveList: function (){
            return this.haveList;
        },
        set_HaveList: function (value){
            this.haveList = value;
        },
        SoulCountDic$$: "System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int32]]",
        get_SoulCountDic: function (){
            return this.soulCountDic;
        },
        Setup: function (){
            ServiceRequestAction.SimulateNet = true;
            ServiceRequestAction.requestServerWithSimulate(AppServices.Services.Mail_Check(), "获取武将信息", $CreateDelegate(this, this.OnSetupSuccess), null);
        },
        OnSetupSuccess: function (e){
        },
        IsRecruitedGeneral: function (generalID){
            if (this.haveList == null)
                return false;
            for (var i = 0; i < this.get_HaveList().get_Count(); i++){
                if (this.get_HaveList().get_Item$$Int32(i).ID == generalID)
                    return true;
            }
            return false;
        },
        Dispose: function (){
            this.haveList = null;
            this.soulCountDic = null;
        }
    }
};
JsTypes.push(GeneralModel);
var eGeneralQuality = {
    fullname: "eGeneralQuality",
    staticDefinition: {
        NONE: 0,
        PURPLE: 1,
        ORANGE: 2,
        RED: 3,
        GOLD: 4
    },
    Kind: "Enum"
};
JsTypes.push(eGeneralQuality);
var eArmorType = {
    fullname: "eArmorType",
    staticDefinition: {
        NONE: 0,
        HEAVY: 1,
        LEATHER: 2,
        QUILTED: 3
    },
    Kind: "Enum"
};
JsTypes.push(eArmorType);
var IGeneralData = {
    fullname: "IGeneralData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IGeneralData);
var IGeneralView = {
    fullname: "IGeneralView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IGeneralView);
var GeneralView = {
    fullname: "GeneralView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            GeneralView.NAME = "GeneralView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGeneralView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.generalDisplayerController = null;
            this.CloseButton_UIButton = null;
            this.PropertyToggle_UIToggle = null;
            this.StrategyToggle_UIToggle = null;
            this.SkillToggle_UIToggle = null;
            this.BreakToggle_UIToggle = null;
            this.CampLabel_UILabel = null;
            this.NameLabel_UILabel = null;
            this.StrengthenLabel_UILabel = null;
            this.OccupationIcon_UISprite = null;
            this.Level_UILabel = null;
            this.SpeakBtn_UIButton = null;
            this.GeneralModelParent_Transform = null;
            this.AppraiseBtn_UIButton = null;
            this.HelpBtn_UIButton = null;
            this.FightNumLabel_UILabel = null;
            this.Grid_UICenterOnChild = null;
            this.Table_UIGrid = null;
            this.ScrollView_UIScrollView = null;
            this.BasePropertyBtn_UIToggle = null;
            this.HighPropertyBtn_UIToggle = null;
            this.BasePropertyTable_UITable = null;
            this.SoulSlider_UISlider = null;
            this.SoulSliderLabel_UILabel = null;
            this.SoulAddBtn_UIButton = null;
            this.StrenthenBtn_UIButton = null;
            this.AdvanceBtn_UIButton = null;
            this.EmbattleBtn_UIButton = null;
            this.FollowBtn_UIButton = null;
            this.EXPSlider_UISlider = null;
            this.EXPSliderLabel_UILabel = null;
            this.EXPAddBtn_UIButton = null;
            this.MagicTable_UITable = null;
            this.PhysicsTable_UITable = null;
            this.HighProPertyScrollView_UIScrollView = null;
            this.HighPropertyTable_UITable = null;
            this.DefendTable_UITable = null;
            this.CritTable_UITable = null;
            this.FightTable_UITable = null;
            this.TitleLabel_UILabel = null;
            this.LeftBtn_UIButton = null;
            this.CloseButton_UIButtonEvt = null;
            this.SpeakBtn_UIButtonEvt = null;
            this.AppraiseBtn_UIButtonEvt = null;
            this.HelpBtn_UIButtonEvt = null;
            this.SoulAddBtn_UIButtonEvt = null;
            this.StrenthenBtn_UIButtonEvt = null;
            this.AdvanceBtn_UIButtonEvt = null;
            this.EmbattleBtn_UIButtonEvt = null;
            this.FollowBtn_UIButtonEvt = null;
            this.EXPAddBtn_UIButtonEvt = null;
            this.LeftBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, GeneralView.ctor, IGeneralView.ctor, IGeneralData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        Init: function (data){
            this.UpdateGeneralProperty(data, true);
        },
        UpdateView: function (data){
        },
        UpdateGeneralProperty: function (data, isInit){
            var general;
            if (isInit)
                general = data.get_CacheHaveGeneralList().get_Item$$Int32(0);
            else
                general = data.get_CurrentGeneral();
            this.CampLabel_UILabel.set_text(this.GetCampByID(general.GeneralType.CampID));
            this.NameLabel_UILabel.set_text(general.Name);
            if (general.StrengthenLevel > 0)
                this.StrengthenLabel_UILabel.set_text("+" + general.StrengthenLevel.toString());
            else
                this.StrengthenLabel_UILabel.set_text("");
            UIHelper.SetItemIcon(this.OccupationIcon_UISprite, general.GeneralType.Occupation.toString(), false);
            this.Level_UILabel.set_text(general.Level.toString());
            if (isInit){
                this.generalDisplayerController = ModelDisplayController.GenerateUICom(this.GeneralModelParent_Transform, -1);
                this.generalDisplayerController.Init$$Int32$$Int32$$Single$$Single(400, 400, 0, 1.5);
                this.generalDisplayerController.SetBoxCollider(350, 350);
                this.generalDisplayerController.SetupModel$$GeneralCharactor$$Boolean$$Int32(new AppDto.GeneralCharactor.ctor(), false, 0);
            }
            else {
                this.generalDisplayerController.SetupModel$$GeneralCharactor$$Boolean$$Int32(new AppDto.GeneralCharactor.ctor(), false, 0);
            }
            this.FightNumLabel_UILabel.set_text(System.String.Format$$String$$Object("战力{0}", general.FightNum));
            this.SoulSlider_UISlider.set_value(0.2 /* 1 / 5f */);
            this.SoulSliderLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", 1, 5));
            this.EXPSlider_UISlider.set_value(0.2 /* 20 / 100f */);
            this.EXPSliderLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", 20, 100));
        },
        GetCampByID: function (id){
            switch (id){
                case 0:
                    break;
                case 1:
                    return "魏";
                case 2:
                    return "蜀";
                case 3:
                    return "吴";
                case 4:
                    return "百家";
                default:
                    break;
            }
            return null;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseButton_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseWindow/CloseButton");
            this.PropertyToggle_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/PropertyToggle");
            this.StrategyToggle_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/StrategyToggle");
            this.SkillToggle_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/SkillToggle");
            this.BreakToggle_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/BreakToggle");
            this.CampLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/CampLabel");
            this.NameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/NameLabelBg/Container/NameLabel");
            this.StrengthenLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/NameLabelBg/Container/StrengthenLabel");
            this.OccupationIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/OccupationIcon");
            this.Level_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/LevelLabel");
            this.SpeakBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/SpeakBtn");
            this.GeneralModelParent_Transform = GameObjectExt.FindTrans(root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/GeneralModelParent");
            this.AppraiseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/Sprite/AppraiseBtn");
            this.HelpBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/Sprite/HelpBtn");
            this.FightNumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/FightNumLabel");
            this.Grid_UICenterOnChild = GameObjectExt.FindScript$1(UICenterOnChild.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/GeneralIconContainer/ScrollView/Grid");
            this.Table_UIGrid = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/GeneralIconContainer/ScrollView/Grid");
            this.ScrollView_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/GeneralIconContainer/ScrollView");
            this.BasePropertyBtn_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyBtn");
            this.HighPropertyBtn_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighPropertyBtn");
            this.BasePropertyTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/BasePropertyTable");
            this.SoulSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/TopContainer/TopBottomContainer/SoulSlider");
            this.SoulSliderLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/TopContainer/TopBottomContainer/SoulSlider/SoulSliderLabel");
            this.SoulAddBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/TopContainer/TopBottomContainer/SoulAddBtn");
            this.StrenthenBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/TopContainer/TopBottomContainer/StrenthenBtn");
            this.AdvanceBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/TopContainer/TopBottomContainer/AdvanceBtn");
            this.EmbattleBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/RightBottomContainer/EmbattleBtn");
            this.FollowBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/RightBottomContainer/FollowBtn");
            this.EXPSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/RightBottomContainer/Container/EXPSlider");
            this.EXPSliderLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/RightBottomContainer/Container/EXPSlider/EXPSliderLabel");
            this.EXPAddBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BaseRightTopContainer/RightBottomContainer/Container/EXPAddBtn");
            this.MagicTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView/HighPropertyTable/MagicTable");
            this.PhysicsTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView/HighPropertyTable/PhysicsTable");
            this.HighProPertyScrollView_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView");
            this.HighPropertyTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView/HighPropertyTable");
            this.DefendTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView/HighPropertyTable/DefendTable");
            this.CritTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView/HighPropertyTable/CritTable");
            this.FightTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/HighRightTopContainer/HighProPertyScrollView/HighPropertyTable/FightTable");
            this.TitleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/TitleLabel");
            this.LeftBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/LeftBtn");
        },
        InitReactiveEvents: function (){
            this.CloseButton_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseButton_UIButton);
            this.SpeakBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.SpeakBtn_UIButton);
            this.AppraiseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.AppraiseBtn_UIButton);
            this.HelpBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.HelpBtn_UIButton);
            this.SoulAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.SoulAddBtn_UIButton);
            this.StrenthenBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.StrenthenBtn_UIButton);
            this.AdvanceBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.AdvanceBtn_UIButton);
            this.EmbattleBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.EmbattleBtn_UIButton);
            this.FollowBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.FollowBtn_UIButton);
            this.EXPAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.EXPAddBtn_UIButton);
            this.LeftBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.LeftBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseButton_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseButton_UIButtonEvt);
            this.SpeakBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.SpeakBtn_UIButtonEvt);
            this.AppraiseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AppraiseBtn_UIButtonEvt);
            this.HelpBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.HelpBtn_UIButtonEvt);
            this.SoulAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.SoulAddBtn_UIButtonEvt);
            this.StrenthenBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.StrenthenBtn_UIButtonEvt);
            this.AdvanceBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AdvanceBtn_UIButtonEvt);
            this.EmbattleBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.EmbattleBtn_UIButtonEvt);
            this.FollowBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.FollowBtn_UIButtonEvt);
            this.EXPAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.EXPAddBtn_UIButtonEvt);
            this.LeftBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.LeftBtn_UIButtonEvt);
        },
        OnCloseButton_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseButton_UIButtonClick: function (){
            return this.CloseButton_UIButtonEvt;
        },
        OnSpeakBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnSpeakBtn_UIButtonClick: function (){
            return this.SpeakBtn_UIButtonEvt;
        },
        OnAppraiseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAppraiseBtn_UIButtonClick: function (){
            return this.AppraiseBtn_UIButtonEvt;
        },
        OnHelpBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnHelpBtn_UIButtonClick: function (){
            return this.HelpBtn_UIButtonEvt;
        },
        OnSoulAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnSoulAddBtn_UIButtonClick: function (){
            return this.SoulAddBtn_UIButtonEvt;
        },
        OnStrenthenBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnStrenthenBtn_UIButtonClick: function (){
            return this.StrenthenBtn_UIButtonEvt;
        },
        OnAdvanceBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAdvanceBtn_UIButtonClick: function (){
            return this.AdvanceBtn_UIButtonEvt;
        },
        OnEmbattleBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnEmbattleBtn_UIButtonClick: function (){
            return this.EmbattleBtn_UIButtonEvt;
        },
        OnFollowBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnFollowBtn_UIButtonClick: function (){
            return this.FollowBtn_UIButtonEvt;
        },
        OnEXPAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnEXPAddBtn_UIButtonClick: function (){
            return this.EXPAddBtn_UIButtonEvt;
        },
        OnLeftBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnLeftBtn_UIButtonClick: function (){
            return this.LeftBtn_UIButtonEvt;
        },
        BaseProTable$$: "UITable",
        get_BaseProTable: function (){
            return this.BasePropertyTable_UITable;
        },
        HighProTable$$: "UITable",
        get_HighProTable: function (){
            return this.HighPropertyTable_UITable;
        },
        DefendTable$$: "UITable",
        get_DefendTable: function (){
            return this.DefendTable_UITable;
        },
        CritTable$$: "UITable",
        get_CritTable: function (){
            return this.CritTable_UITable;
        },
        PhysicsTable$$: "UITable",
        get_PhysicsTable: function (){
            return this.PhysicsTable_UITable;
        },
        MagicTable$$: "UITable",
        get_MagicTable: function (){
            return this.MagicTable_UITable;
        },
        FightTable$$: "UITable",
        get_FightTable: function (){
            return this.FightTable_UITable;
        },
        UICenterOnChild$$: "UICenterOnChild",
        get_UICenterOnChild: function (){
            return this.Grid_UICenterOnChild;
        },
        GridTable$$: "UITable",
        get_GridTable: function (){
            return this.Table_UIGrid;
        }
    }
};
JsTypes.push(GeneralView);
var GMTestViewController = {
    fullname: "GMTestViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.commandTipDics = null;
            this.commandDescDics = null;
            this.go = null;
            MonoViewController$1.ctor.call(this, GMTestView.ctor);
        },
        Open: function (){
        },
        AfterInitView: function (){
            var path = UnityEngine.PlayerPrefs.GetString$$String("dev_walkPath");
            if (System.String.IsNullOrEmpty(path)){
                path = UnityEngine.Application.get_dataPath() + "/Docs/NavigationArea/";
            }
            this.get_View().getWalkPathInput.set_value(path);
            this.commandTipDics = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            this.commandDescDics = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            this.AddGMCommand1("#add_main_char_exp 100000", "增加主角色经验", "amount 增加经验数量");
            this.AddGMCommand1("#deposit amount", "充值", "amount 增加元宝数量");
            this.AddGMCommand1("#add_ingot 10000", "增加元宝", "amount 增加元宝数量");
            this.AddGMCommand1("#add_voucher 10000", "增加绑定元宝", "amount 增加绑定元宝数量");
            this.AddGMCommand1("#add_silver 10000", "增加银币", "amount 增加银币数量");
            this.AddGMCommand1("#add_copper 1000000", "增加铜币", "amount 增加铜币数量");
            this.AddGMCommand1("#add_score 10000", "增加积分", "amount 增加积分数量");
            this.AddGMCommand1("#add_contribute 10000", "增加贡献度", "amount 增加贡献度数量");
            this.AddGMCommand1("#add_vigour 10000", "增加活力", "amount 增加活力数量");
            this.AddGMCommand1("#add_potential 10000", "增加潜力", "amount 增加潜力数量");
            this.AddGMCommand1("#add_guild_asset 10000", "增加帮派资金", "amount 帮派资金数量");
            this.AddGMCommand1("#add_scenario_point 100", "增加剧情点", "amount 剧情点");
            this.AddGMCommand1("#add_active 100", "增加活跃点", "amount 活跃点(需重登生效)");
            this.AddGMCommand1("", "", "");
            this.AddGMCommand1("#add_item id amount", "增加物品", "");
            this.AddGMCommand1("#clear_backpack", "清空背包", "");
            this.AddGMCommand1("", "", "");
            this.AddGMCommand1("#add_battle_pet_exp 10000", "增加出战宠物经验", "");
            this.AddGMCommand1("#add_battle_pet_skill skillId", "增加出战宠物技能", "");
            this.AddGMCommand1("#clear_battle_pet_skills", "清空出战宠物所有技能", "");
            this.AddGMCommand1("#add_pet petId level baby mutate", "增加宝宝类型宠物", "baby 0/1 mutate 0/1");
            this.AddGMCommand1("#restore_soldier", "战斗中gm指令重置", "");
            this.AddGMCommand1("#equip_skill part skillId", "装备增加特技指令", "");
            this.AddGMCommand1("", "", "");
            this.AddGMCommand1("#server_grade xx", "服务器等级", "");
            this.AddGMCommand1("#refresh_monster baby/general/plough/star/robber/preciousBox/worldbossbox", "增加刷怪gm指令", "baby 宝宝\ngeneral 降妖怪\nplough 天罡怪\nstar 星宿怪\nrobber 强盗入侵\npreciousBox银宝箱\nworldbossboxBoss宝箱");
            this.AddGMCommand2("#send_chatnotify type content", "聊天通知", "type 0:传闻1:系统2:帮助3:提示4:飘字");
            this.AddGMCommand2("#gain_title titleId", "增加玩家称号", "");
            this.AddGMCommand2("#question_clear type", "答题清空", "type = 1(科举) or 2(殿试)");
            this.AddGMCommand2("#add_gift_box 5", "增加帮派宝箱", "");
            this.AddGMCommand2("#reset_guild_benefits", "重置帮派宝箱的状态", "");
            this.AddGMCommand2("#give_guild_member_salary", "发帮派工资", "");
            this.AddGMCommand2("", "", "");
            this.AddGMCommand2("#smartguide type param", "智能指引", "type 类型\nparam 参数");
            this.AddGMCommand2("#silkroad_clear type", "跑商清理", "type:1清除完成次数\n2:设置商船出发时间为当前");
            this.AddGMCommand2("", "", "");
            this.AddGMCommand2("#reset_challenge", "重置竞技场挑战次数", "");
            this.AddGMCommand2("#add_challenge_times 10", "增加竞技场的挑战次数", "");
            this.AddGMCommand2("#clear_challenge_cd", "刷新CD时间为0", "");
            this.AddGMCommand2("#add_challenge_trophy count", "设置奖杯到指定数值", "");
            this.AddGMCommand2("#challenge_daily_bonus", "直接发放每天的排名奖励", "");
            this.AddGMCommand2("#challenge_player playerId", "挑战指定玩家", "");
            this.AddGMCommand2("", "", "");
            this.AddGMCommand2("#siege_battle_start a b c d", "开启攻城掠地", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand2("#clear_siege_battle_attack_times", "清空玩家进攻次数", "");
            this.AddGMCommand2("", "", "");
            this.AddGMCommand2("#auction type", "设置拍卖行", "type:1刷出系统拍卖的物品；type:2设置所有物品一分钟后过期");
            this.AddGMCommand2("#stall_expired", "过期当前登录角色摆的物品", "");
            this.AddGMCommand2("#player_ride 1 X", "增加坐骑的经验数", "X=经验值");
            this.AddGMCommand2("#player_ride 2", "清除当天获得的骑乘经验", "");
            this.AddGMCommand2("#player_ride 3", "设置通用技能的经验达到可进阶", "");
            this.AddGMCommand2("#clear nextchangefactiontime", "重置转换门派冷却时间", "");
            this.AddGMCommand2("#rank prestige", "威望排行榜刷新", "");
            this.AddGMCommand3("#ban ID minute", "封停", "Id，minute:分钟数");
            this.AddGMCommand3("#unban ID", "解除封停", "");
            this.AddGMCommand3("#punish ID count", "罚款", "Id,count:元宝数");
            this.AddGMCommand3("#ban_talk playerId minute", "禁言", "playerId,minute:分钟数");
            this.AddGMCommand3("#unban_talk playerId", "解禁", "");
            this.AddGMCommand3("#check_message code", "测试相关求助颜色", "");
            this.AddGMCommand3("", "", "");
            this.AddGMCommand3("#marriageTimeCheck", "离婚忽略时间判断", "");
            this.AddGMCommand3("#marriageSweetBox", "喜糖", "");
            this.AddGMCommand3("#add_fashionDressPiece", "时装碎片", "Count:数量");
            this.AddGMCommand3("#clear_bridal_sedan_time", "清除花轿记录", "");
            this.AddGMCommand3("", "", "");
            this.AddGMCommand3("#faction_trial openMinutes", "门派挑战开关", "openMinutes:开启分钟数为0时结束");
            this.AddGMCommand3("#mission logicType ring daily weekly", "设置指定类型任务", "logicType 2门派;3抓鬼;4藏宝\nring 设置当前环数(如果有)\ndaily 设置当天完成次数(如果有)\nweekly 设置周完成次数(如果有)");
            this.AddGMCommand3("#mission_clear titleId", "清除玩家当前身上的任务", "");
            this.AddGMCommand3("#mission_add missionId", "给玩家接受指定任务", "missionId 任务ID");
            this.AddGMCommand3("#guild_mission killedAmt", "杀多少只怪，如果是0时重置任务", "");
            this.AddGMCommand3("#trial_reset", "重置历练", "");
            this.AddGMCommand3("#active_add taskType count", "增加日程活动度", "taskType:DailyActivityInfo表的id count:增加活动度");
            this.AddGMCommand4("#tournament_start 0 1 2 1", "比武大会测试", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand4("#first_tournament_start 0 1 2 1", "首席竞赛测试", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand4("#hero_trial_start 0 1 2 1", "华山论剑 开", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand4("#hero_trial_stop", "华山论剑 关", "");
            this.AddGMCommand4("", "", "");
            this.AddGMCommand4("#mystery_fail_time 10", "伏魔录 a=次数", "");
            this.AddGMCommand4("#mythland_start 0 1 2 1", "幻境活动 开", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand4("#mythland_go 5", "幻境活动", "参数1=场景增量");
            this.AddGMCommand4("#mythland_stop", "幻境活动 关", "");
            this.AddGMCommand4("#guild_comp_start 1 0 2 10 0", "帮派竞赛 开", "a=星期（按序1/2）,b=延迟分钟，c=准备时间，d=战斗时间，e=清理时间");
            this.AddGMCommand4("#guild_comp_stop", "帮派竞赛 关", "");
            this.AddGMCommand4("#camp_war start 0 5 10 0", "大闹天宫 开", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand4("#camp_war score 100", "大闹天宫增加自己积分", "");
            this.AddGMCommand4("#camp_war stop", "大闹天宫 关", "");
            this.AddGMCommand4("#camp_war playerCount 100", "大闹天宫 开始活动人数设定", "");
            this.AddGMCommand4("#camp_war peach 1|5710-100;3|5710-75|5711-25;5|5710-50|5711-25|5712-25", "刷蟠桃", "");
            this.AddGMCommand4("#shipment start 0 1 20 0", "护送国宝 开", "a=延迟分钟，b=准备时间，c=战斗时间，d=清理时间");
            this.AddGMCommand4("#shipment stop", "护送国宝 关", "");
            this.AddGMCommand4("#shipment info", "护送国宝 info", "");
            this.AddGMCommand4("#generalmonster 1 10", "封妖", "a=类型（封妖：1）, b=封妖次数");
            this.AddGMCommand4("#activity X Y Z", "最新活动", "x:活动ID，y：持续时间/分，如果是欢乐九宫格，还可以带Z指plan数据ID/n1:充值送大礼/n2:冲榜达人/n3:开服大联欢/n4:节日特惠/n5:成长礼金/n6:烟火放送/n7:消费有奖/n8:天天仙灵/n9:七星宝箱/n10:充值特惠/n11:活跃礼包/n12:欢乐九宫格" /* "x:活动ID，y：持续时间/分，如果是欢乐九宫格，还可以带Z指plan数据ID" + "/n1:充值送大礼/n2:冲榜达人/n3:开服大联欢/n4:节日特惠/n5:成长礼金/n6:烟火放送/n7:消费有奖/n8:天天仙灵/n9:七星宝箱/n10:充值特惠/n11:活跃礼包/n12:欢乐九宫格" */);
            this.AddGMCommand4("#mb_add_use_times 1", "刷次数", "");
            this.AddGMCommand4("#mb_change_recv_time", "改邮件收到日期，执行后邮件接受日期为30天前", "");
            this.AddGMCommand4("#hundred_grass_start 60", "帮派百草谷活动 60=持续时间", "");
            this.AddGMCommand4("#world_ghost_start 3 10 3", "雪女世界Boss限时活动开启 准备时间 活动时间 清理时间", "");
            this.AddGMCommand4("#world_ghost_stop", "雪女世界Boss限时活动关闭", "");
            this.AddButton("Debug开关", $CreateDelegate(this, this.OnDebugBtnClick));
            this.AddButton("预判开关", $CreateDelegate(this, this.OnServerRequestCheckSwitch));
            this.AddButton("延迟开关", $CreateDelegate(this, this.OnServerRequestDelaySwitch));
            this.AddButton("锁请求开关", $CreateDelegate(this, this.OnServerRequestLockSwitch));
            this.AddButton("加载延迟开关", $CreateDelegate(this, this.OnResourcesLoadDelaySwitch));
            this.AddButton("内存模式切换", $CreateDelegate(this, this.OnMemorySwitch));
            this.AddButton("一百万经验", $CreateDelegate(this, this.OnShowMeTheExp));
            this.AddButton("钱钱钱", $CreateDelegate(this, this.OnShowMeTheMoney));
            this.AddButton("断开网络", $CreateDelegate(this, this.OnTestSocketClose));
            this.AddButton("重新登录", $CreateDelegate(this, this.OnReLogin));
            this.AddButton("地图测试", $CreateDelegate(this, this.OnMapTestClick));
            this.AddButton("快快快", $CreateDelegate(this, this.OnSpeedUp));
            this.AddButton("慢慢慢", $CreateDelegate(this, this.OnSpeedDown));
            this.AddButton("100倍速", $CreateDelegate(this, this.OnSpeedUp100));
            this.AddButton("模型动作", $CreateDelegate(this, this.OnPetActionClick));
            this.AddButton("重载战斗", $CreateDelegate(this, this.OnReloadBattleConfig));
            this.AddButton("战斗测试", $CreateDelegate(this, this.OnBattleTestClick));
            this.AddButton("战斗演示", $CreateDelegate(this, this.OnBattleShowClick));
            this.AddButton("退出战斗", $CreateDelegate(this, this.OnExitBattle));
            this.AddButton("SK-测试", $CreateDelegate(this, this.TestForSK));
            this.AddButton("显示提示", $CreateDelegate(this, this.TestTipEnable));
            this.AddButton("单机模式", $CreateDelegate(this, this.TestInfoSimulate));
            this.AddButton("DEMO 模拟完整回合", $CreateDelegate(this, this.TestCompleteRound));
            EventDelegate.Add$$List$1$EventDelegate$$Callback(this.get_View().brightnessSlider.onChange, $CreateAnonymousDelegate(this, function (){
                var tVoiceValue = UnityEngine.Mathf.CeilToInt(this.get_View().brightnessSlider.get_value() * 100);
                tVoiceValue = ((255 * tVoiceValue / 100) | 0);
                this.get_View().brightnessLbl.set_text(System.String.Format$$String$$Object$$Object("{0}{1}", "[6f3e1a]", tVoiceValue));
            }));
            this.get_View().brightnessSlider.onDragFinished = $CreateAnonymousDelegate(this, function (){
                var tVoiceValue = UnityEngine.Mathf.CeilToInt(this.get_View().brightnessSlider.get_value() * 100);
                tVoiceValue = ((255 * tVoiceValue / 100) | 0);
                this.get_View().brightnessLbl.set_text(System.String.Format$$String$$Object$$Object("{0}{1}", "[6f3e1a]", tVoiceValue));
                TipManager.AddTip("亮度设置: " + tVoiceValue, false, false, "");
                BaoyugameSdk.setBrightness(tVoiceValue);
            });
            var voiceValue = BaoyugameSdk.getScreenBrightness();
            this.get_View().brightnessSlider.set_value(voiceValue / 255);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().commandPopList1.onChange, $CreateDelegate(this, this.OnSelectionChange1));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().commandPopList2.onChange, $CreateDelegate(this, this.OnSelectionChange2));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().commandPopList3.onChange, $CreateDelegate(this, this.OnSelectionChange3));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().commandPopList4.onChange, $CreateDelegate(this, this.OnSelectionChange4));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().commandBtn.onClick, $CreateDelegate(this, this.SendGMCommand));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().getWalkBtn.onClick, $CreateDelegate(this, this.OnGetWalkBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().closeBtn.onClick, $CreateDelegate(this, this.CloseView));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().plotPlayBtn.onClick, $CreateDelegate(this, this.OnPlotPlayBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().guidePlayBtn.onClick, $CreateDelegate(this, this.OnGuidePlayBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CleanUpGuideInfoBtn.onClick, $CreateDelegate(this, this.OnCleanUpGuideInfo));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().GameAnalyBtn.onClick, $CreateDelegate(this, this.OnGameAnaly));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CelanLocalDataBtn.onClick, $CreateDelegate(this, this.OnCelanLocalData));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CleanUpGameResBtn.onClick, $CreateDelegate(this, this.OnCleanUpGameRes));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CleanUpMemoryBtn.onClick, $CreateDelegate(this, this.OnCleanUpMemory));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().DownloadManagerBtn.onClick, $CreateDelegate(this, this.OnDownloadManager));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PlayerViewCacheBtn.onClick, $CreateDelegate(this, this.OnPlayerViewCache));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.getWalkBtn.onClick, $CreateDelegate(this, this.OnGetWalkBtn));
        },
        AddGMCommand1: function (str, tip, desc){
            this.DoAddGMCommand(this.get_View().commandPopList1, str, tip, desc);
        },
        AddGMCommand2: function (str, tip, desc){
            this.DoAddGMCommand(this.get_View().commandPopList2, str, tip, desc);
        },
        AddGMCommand3: function (str, tip, desc){
            this.DoAddGMCommand(this.get_View().commandPopList3, str, tip, desc);
        },
        AddGMCommand4: function (str, tip, desc){
            this.DoAddGMCommand(this.get_View().commandPopList4, str, tip, desc);
        },
        DoAddGMCommand: function (popupList, str, tip, desc){
            var key = str + " " + tip;
            popupList.AddItem$$String(key);
            if (!System.String.IsNullOrEmpty(str)){
                if (System.String.IsNullOrEmpty(desc)){
                    desc = tip;
                }
                else {
                    desc = tip + "\n" + desc;
                }
                this.commandTipDics.Add(key, tip);
                this.commandDescDics.Add(str, desc);
            }
        },
        UpdateSelectCommandInfo: function (selectStr){
            if (!System.String.IsNullOrEmpty(selectStr) && this.commandTipDics.ContainsKey(selectStr)){
                var tip = " " + this.commandTipDics.get_Item$$TKey(selectStr);
                var command = selectStr.Replace$$String$$String(tip, "");
                if (this.commandDescDics.ContainsKey(command)){
                    var desc = this.commandDescDics.get_Item$$TKey(command);
                    this.get_View().commandInput.set_value(command);
                    this.get_View().tipLabel.set_text(desc);
                }
            }
        },
        OnSelectionChange1: function (){
            this.UpdateSelectCommandInfo(this.get_View().commandPopList1.get_value());
        },
        OnSelectionChange2: function (){
            this.UpdateSelectCommandInfo(this.get_View().commandPopList2.get_value());
        },
        OnSelectionChange3: function (){
            this.UpdateSelectCommandInfo(this.get_View().commandPopList3.get_value());
        },
        OnSelectionChange4: function (){
            this.UpdateSelectCommandInfo(this.get_View().commandPopList4.get_value());
        },
        DoAddButton: function (parent, label, goName){
            var go = this.AddCachedChild$$GameObject$$String(parent, "BaseSmallButton");
            go.set_name(goName);
            go.GetComponentInChildren$1(UILabel.ctor).set_text(label);
            go.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0.5, -1 /* -1 */ * (parent.get_transform().get_childCount() - 1) * 25, 0));
            return go;
        },
        AddButton: function (btnName, action){
            var btn = this.DoAddButton(this.get_View().buttonTable.get_gameObject(), btnName, "Button");
            var uiBtn = GameObjectExt.GetMissingComponent$1(UIButton.ctor, btn);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(uiBtn.onClick, action);
            return uiBtn;
        },
        SendGMCommand: function (){
            var gmCommand = this.get_View().commandInput.get_value();
            var gmParam = gmCommand.substr(gmCommand.indexOf(" ") + 1);
            var paramStrs = gmParam.Split$$Char$Array([" "]);
            if (gmCommand.StartsWith$$String("#smartguide")){
                var type = System.Int32.Parse$$String(paramStrs[0]);
                var param = paramStrs[1];
                GameDebuger.TODO("SmartGuideManager.Instance.Open (type, param);");
                ProxyGMTestModule.Close();
                return;
            }
            if (gmCommand.StartsWith$$String("#clear_challenge_cd")){
                GameDebuger.TODO("JSTimer.Instance.CancelCd (ArenaModel.REFRESH_TIMER);");
                return;
            }
            GameDebuger.Log("GmService: " + gmCommand, null);
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute(gmCommand), "GM Command", $CreateAnonymousDelegate(this, function (e){
                if (gmCommand.StartsWith$$String("#reset_challenge")){
                    GameDebuger.TODO("ModelManager.Arena.ResetRemainTimes ();");
                }
                else if (gmCommand.StartsWith$$String("#clear_battle_pet_skills")){
                    GameDebuger.TODO("PetPropertyInfo battlePetInfo = ModelManager.Pet.GetBattlePetInfo ();\n                                  if (battlePetInfo != null)\n                                      battlePetInfo.petDto.skillIds.Clear ();");
                }
                else if (gmCommand.StartsWith$$String("#add_battle_pet_skill")){
                    var newSkillId = System.Int32.Parse$$String(gmParam);
                    GameDebuger.TODO("PetPropertyInfo battlePetInfo = ModelManager.Pet.GetBattlePetInfo ();\n                      if (battlePetInfo != null)\n                          battlePetInfo.petDto.skillIds.Add (newSkillId);");
                }
                else if (gmCommand.StartsWith$$String("#add_potential")){
                    var potentialCount = System.Int32.Parse$$String(gmParam);
                    ModelManager.get_Player().GetPlayerPropertyInfo().playerDto.potential += potentialCount;
                    ModelManager.get_Player().CheckPlayerHasPotentialPoint();
                }
                else if (gmCommand.StartsWith$$String("#equip_skill")){
                    var part = System.Int32.Parse$$String(paramStrs[0]);
                    var skillId = System.Int32.Parse$$String(paramStrs[1]);
                    GameDebuger.TODO("BagItemDto itemDto = ModelManager.Backpack.GetEquipByPartType (part);\n                      if (itemDto != null) {\n                          EquipmentExtraDto extraDto = itemDto.extra as EquipmentExtraDto;\n                          if (extraDto != null) {\n                              if (extraDto.activeSkillIds == null) {\n                                  extraDto.activeSkillIds = new List<int> ();\n                              }\n                              extraDto.activeSkillIds.Clear ();\n                              extraDto.activeSkillIds.Add (skillId);\n                          }\n                      }");
                    var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillId);
                    TipManager.AddTip("装备部位" + part + " 增加特技 " + skill.name, false, false, "");
                }
                else if (gmCommand.StartsWith$$String("#add_challenge_times")){
                    var count = System.Int32.Parse$$String(paramStrs[0]);
                    GameDebuger.TODO("ModelManager.Arena.AddRemainTimes (count);");
                }
                else if (gmCommand.StartsWith$$String("#add_challenge_trophy")){
                    var trophyCount = System.Int32.Parse$$String(paramStrs[0]);
                    GameDebuger.TODO("ModelManager.Arena.UpdatePlayerTrophyCount (trophyCount);");
                }
                else if (gmCommand.StartsWith$$String("#clear nextchangefactiontime")){
                    ModelManager.get_Player().set_NextChangeFactionTime(0);
                }
                else {
                    TipManager.AddTip("GmService: " + this.get_View().commandInput.get_value() + " 执行完毕", false, false, "");
                }
            }), null);
        },
        CloseView: function (){
            ProxyGMTestModule.Close();
        },
        OnDebugBtnClick: function (){
            GameDebuger.debugIsOn = !GameDebuger.debugIsOn;
            if (GameDebuger.debugIsOn){
                GameDebugConsole.Setup();
            }
            else {
                GameDebugConsole.Dispose();
            }
            ProxyGMTestModule.Close();
        },
        OnWorldMapBtnClick: function (){
            ProxyGMTestModule.Close();
            ProxyWorldMapModule.OpenWorldMap();
        },
        OnPetActionClick: function (){
            ProxyGMTestModule.Close();
            GameDebuger.TODO("ProxyAnimatorTestModule.Open ();");
        },
        OnReloadBattleConfig: function (){
            BattleConfigManager.get_Instance().Setup();
        },
        OnBattleTestClick: function (){
            ProxyGMTestModule.Close();
            ProxyBattleDemoConfigModule.Open();
        },
        OnBattleShowClick: function (){
            ProxyGMTestModule.Close();
            ProxyBattleDemoConfigModule.OpenEasyConfig();
        },
        OnMapTestClick: function (){
            ProxyGMTestModule.Close();
            ProxyWorldMapModule.OpenWorldMap();
        },
        OnTestSocketClose: function (){
            SocketManager.get_Instance().Close(false);
            this.CloseView();
        },
        OnShowMeTheExp: function (){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute("#add_main_char_exp 1000000"), "", null, null);
            this.CloseView();
        },
        OnShowMeTheMoney: function (){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute("#add_ingot 1000000"), "", null, null);
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute("#add_silver 1000000"), "", null, null);
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute("#add_copper 50000000"), "", null, null);
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute("#add_score 100000"), "", null, null);
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Gm_Execute("#add_contribute 100000"), "", null, null);
            this.CloseView();
        },
        OnReLogin: function (){
            ExitGameScript.get_Instance().HanderRelogin();
            this.CloseView();
        },
        OnPlotPlayBtnClick: function (){
            if (System.String.IsNullOrEmpty(this.get_View().storyIdInput.get_value())){
                return;
            }
            var plotId = 0;
            if ((function (){
                var $1 = $Ref(null, plotId);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().storyIdInput.get_value(), $1);
                plotId = $1.Value;
                return $res;
            }).call(this)){
                GamePlot.GamePlotManager.get_Instance().PlayPlot(plotId);
                this.CloseView();
            }
        },
        OnGuidePlayBtnClick: function (){
            if (System.String.IsNullOrEmpty(this.get_View().storyIdInput.get_value()))
                return;
            var guideId = 0;
            if ((function (){
                var $1 = $Ref(null, guideId);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().storyIdInput.get_value(), $1);
                guideId = $1.Value;
                return $res;
            }).call(this)){
                GameDebuger.TODO("NewBieGuideManager.Instance.ActiveGuide (guideId);");
                this.CloseView();
            }
        },
        OnOpenRobot: function (){
        },
        OnSpeedUp: function (){
            if (UnityEngine.Time.get_timeScale() == 1){
                UnityEngine.Time.set_timeScale(3);
            }
            else {
                UnityEngine.Time.set_timeScale(1);
            }
            this.CloseView();
        },
        OnSpeedUp100: function (){
            if (UnityEngine.Time.get_timeScale() == 1){
                UnityEngine.Time.set_timeScale(100);
            }
            else {
                UnityEngine.Time.set_timeScale(1);
            }
            this.CloseView();
        },
        OnSpeedDown: function (){
            if (UnityEngine.Time.get_timeScale() == 1){
                UnityEngine.Time.set_timeScale(0.3);
            }
            else {
                UnityEngine.Time.set_timeScale(1);
            }
            this.CloseView();
        },
        OnExitBattle: function (){
            BattleManager.get_Instance().ExitBattle();
            this.CloseView();
        },
        OnGameAnaly: function (){
            GameDebuger.TODO("ProxyGameAnalyModule.Open ();");
            this.CloseView();
        },
        OnCleanUpGuideInfo: function (){
            GameDebuger.TODO("NewBieGuideManager.Instance.CleanUpGuideInfo ();");
            TipManager.AddTip("清除引导记录成功", false, false, "");
        },
        OnServerRequestCheckSwitch: function (){
            ServiceRequestAction.ServerRequestCheck = !ServiceRequestAction.ServerRequestCheck;
            TipManager.AddTip("预判开关:" + ServiceRequestAction.ServerRequestCheck, false, false, "");
        },
        OnServerRequestDelaySwitch: function (){
            ServiceRequestAction.ServerRequestDelay = !ServiceRequestAction.ServerRequestDelay;
            TipManager.AddTip("延迟开关:" + ServiceRequestAction.ServerRequestDelay, false, false, "");
        },
        OnServerRequestLockSwitch: function (){
            ServiceRequestAction.ServerRequestLock = !ServiceRequestAction.ServerRequestLock;
            TipManager.AddTip("锁请求开关:" + ServiceRequestAction.ServerRequestLock, false, false, "");
        },
        OnResourcesLoadDelaySwitch: function (){
            AssetPipeline.AssetManager.EditorLoadDelay = AssetPipeline.AssetManager.EditorLoadDelay == 0 ? 1 : 0;
            TipManager.AddTip("加载延迟开关:" + AssetPipeline.AssetManager.EditorLoadDelay, false, false, "");
        },
        OnMemorySwitch: function (){
            GameDebuger.TODO("SystemSetting.LowMemory = !SystemSetting.LowMemory;\n        SystemSetting.UpdateSettingWithMemory (SystemSetting.LowMemory);\n        SystemSetting.UsePool = !SystemSetting.LowMemory;\n              if (SystemSetting.LowMemory)\n              {\n                  TipManager.AddTip(\'>>>>> 低内存模式\');\n              }\n              else");
            TipManager.AddTip("高内存模式", false, false, "");
        },
        OnCelanLocalData: function (){
            DataManager.CleanUp();
            GameDataManager.get_Instance().CleanUp();
            this.CloseView();
        },
        OnCleanUpGameRes: function (){
            AssetPipeline.AssetManager.get_Instance().MarkCleanUpResFlag();
        },
        OnCleanUpMemory: function (){
            AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(true);
        },
        OnDownloadManager: function (){
            GameDebuger.TODO("ProxyGameResManagementModule.Open();");
        },
        OnPlayerViewCache: function (){
            WorldView.UsePool = !WorldView.UsePool;
            TipManager.AddTip("WorldView.UsePool:" + WorldView.UsePool, false, false, "");
        },
        OnGetWalkBtn: function (){
            var path = this._view.getWalkPathInput.get_value();
            if (!System.String.IsNullOrEmpty(path)){
                if (System.IO.Directory.Exists(path)){
                    UnityEngine.PlayerPrefs.SetString("dev_walkPath", path);
                    var area = new NavigationArea.ctor();
                    area.CreateMoveNavigation();
                    area.OutputFile(path);
                }
                else {
                    TipManager.AddTip("目录不存在", false, false, "");
                }
            }
            else {
                TipManager.AddTip("目录不能为空", false, false, "");
            }
        },
        OnGuideBattle: function (){
            this.CloseView();
        },
        OnTestLoginSDK: function (){
            ProxyLoginModule.OpenTestSdk();
            this.CloseView();
        },
        OnHzamr: function (){
            GameDebuger.Log(">>>>>>>>>>>>>>>>>>>> BaiduASRSdk.RegisterBaiduASR", null);
        },
        OnRefine: function (){
        },
        OnSiegeBattle: function (){
            this.CloseView();
            GameDebuger.TODO("ProxySiegeBattleModule.Open ();");
        },
        OnDyeTest: function (){
            this.CloseView();
            GameDebuger.TODO("ProxyPlayerPropertyModule.OpenDyeView ();");
        },
        IgnoreDivorceTime: function (){
            GameDebuger.TODO("MarryModel.IgnoreTime = !MarryModel.IgnoreTime;\n        TipManager.AddTip (MarryModel.IgnoreTime ? \'关闭\' : \'开启\');");
        },
        VisitChangAn: function (){
            if (System.String.IsNullOrEmpty(this.get_View().storyIdInput.get_value())){
                return;
            }
            var plotId = 0;
            if ((function (){
                var $1 = $Ref(null, plotId);
                var $res = System.Int32.TryParse$$String$$Int32(this.get_View().storyIdInput.get_value(), $1);
                plotId = $1.Value;
                return $res;
            }).call(this)){
                GameDebuger.TODO("SedanVisitChangAnPlotManager.Instance.PlayPlot (plotId);");
                this.CloseView();
            }
        },
        OnFakeEmail: function (){
            GameDebuger.TODO("ModelManager.Email.AddMailFromNotify (new MailDto {\n            content = \'此邮件为客户端伪造，用于测试一键领取过期飘字,一分钟后过期\',\n            createTime = SystemTimeManager.Instance.GetUTCTimeStamp () - 864000000 + 60000,\n            fromId = 0,\n            fromName = \'小浪哥\',\n            id = new System.Random ().Next (10000),\n            subject = \'小浪哥\',\n            mailAttachments = new List<MailAttachmentDto> {\n                new MailAttachmentDto () {\n                    attachmentType = MailAttachmentDto.AttachmentTypeEnum_Item,\n                    count = 1,\n                    id = 40004,\n                    name = \'xxx\',\n                },\n            },\n            mailTypeId = MailType.MailTypeEnum_BackpackFull,\n            read = false\n        });");
        },
        LogEmailType: function (){
            GameDebuger.TODO("ModelManager.Email.LogEmailType ();");
        },
        OnTestHallowHandler: function (){
            GameDebuger.TODO("ModelManager.CSPK.IsWatchingModel = !ModelManager.CSPK.IsWatchingModel;\n        TipManager.AddTip (string.Format (\'跨服PK观战模式由{0}切换到{1}\', !ModelManager.CSPK.IsWatchingModel, ModelManager.CSPK.IsWatchingModel));\n        CloseView ();\n        if (ModelManager.CSPK.IsWatchingModel)\n            ModelManager.CSPK.WatchCSPKLogic ();\n        else\n            ModelManager.CSPK.EnterCSPKLogic ();");
        },
        TestSmartByYan: function (){
            GameDebuger.TODO("ProxyTradeModule.OpenBySmartGuide (2, 10069);");
        },
        OnOpenSelfZonePanel: function (){
            GameDebuger.TODO("ProxySelfZoneModule.OpenMyZone ();");
        },
        TestChangeFaction: function (){
            GameDebuger.TODO("ProxyTransitionModule.Open (TransitionType.Faction);");
        },
        TestChangeEquip: function (){
            GameDebuger.TODO("ProxyTransitionModule.Open (TransitionType.Equip);");
        },
        TestForSK: function (){
            ProxyBuiltInWebModule.Open("www.baidu.com");
        },
        TestSkillPointChange: function (){
            ModelManager.get_BattleDemo().UpdateSkillPoint$$Int64$$Int32$$Boolean(ModelManager.get_Player().GetPlayerId(), UnityEngine.Random.Range$$Int32$$Int32(1, 7), true);
            this.CloseView();
        },
        TestSkillPointAddSpeedChange: function (){
            ModelManager.get_BattleDemo().UpdateSkillPointAddSpeed(ModelManager.get_Player().GetPlayerId(), UnityEngine.Random.Range$$Int32$$Int32(500, 30000), true);
            this.CloseView();
        },
        TestReceiveRoundInfo: function (){
            BattleNetworkManager.get_Instance().HanderVideoRound(DemoSimulateHelper.SimulateVideoRound(0));
            this.CloseView();
        },
        TestFastCD: function (){
            ModelManager.get_BattleDemo().DealCDForInterrupttedByDebuff(ModelManager.get_Player().GetPlayerId());
            this.CloseView();
        },
        TestCompleteRound: function (){
            DemoSimulateHelper.SimulateRoundStart();
            this.CloseView();
        },
        TestInfoSimulate: function (){
            ServiceRequestAction.SimulateNet = !ServiceRequestAction.SimulateNet;
            TipManager.AddTip("当前DEMO战斗是否单机模式：" + ServiceRequestAction.SimulateNet.toString(), false, false, "");
        },
        TestOptionEnable: function (){
            GameEventCenter.SendEvent$1$$Event$1$$T(System.Boolean.ctor, GameEvent.BATTLE_FIGHT_SET_READY_STATE, false);
            this.CloseView();
        },
        TestTipEnable: function (){
            ModelManager.get_BattleDemo().ShowTip = !ModelManager.get_BattleDemo().ShowTip;
            TipManager.AddTip(System.String.Format$$String$$Object("当前是否弹窗显示重要提示:{0}", ModelManager.get_BattleDemo().ShowTip), false, false, "");
        }
    }
};
JsTypes.push(GMTestViewController);
var GMTestView = {
    fullname: "GMTestView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            GMTestView.NAME = "GMTestView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.commandInput = null;
            this.commandPopList1 = null;
            this.commandPopList3 = null;
            this.commandPopList2 = null;
            this.commandPopList4 = null;
            this.commandBtn = null;
            this.closeBtn = null;
            this.buttonTable = null;
            this.tipLabel = null;
            this.getWalkPathInput = null;
            this.getWalkBtn = null;
            this.storyIdInput = null;
            this.plotPlayBtn = null;
            this.guidePlayBtn = null;
            this.brightnessSlider = null;
            this.brightnessLbl = null;
            this.CleanUpGuideInfoBtn = null;
            this.GameAnalyBtn = null;
            this.CelanLocalDataBtn = null;
            this.CleanUpGameResBtn = null;
            this.CleanUpMemoryBtn = null;
            this.DownloadManagerBtn = null;
            this.PlayerViewCacheBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.commandInput = root.Find("ContentFrame/ContentBg/GmCommandInput").GetComponent$1(UIInput.ctor);
            this.commandPopList1 = root.Find("ContentFrame/ContentBg/GmCommandPopList1").GetComponent$1(UIPopupList.ctor);
            this.commandPopList3 = root.Find("ContentFrame/ContentBg/GmCommandPopList3").GetComponent$1(UIPopupList.ctor);
            this.commandPopList2 = root.Find("ContentFrame/ContentBg/GmCommandPopList2").GetComponent$1(UIPopupList.ctor);
            this.commandPopList4 = root.Find("ContentFrame/ContentBg/GmCommandPopList4").GetComponent$1(UIPopupList.ctor);
            this.commandBtn = root.Find("ContentFrame/ContentBg/GmCommandBtn").GetComponent$1(UIButton.ctor);
            this.closeBtn = root.Find("BaseWindow/CloseBtn").GetComponent$1(UIButton.ctor);
            this.buttonTable = root.Find("ContentFrame/ContentBg/ButtonTable").GetComponent$1(UITable.ctor);
            this.tipLabel = root.Find("ContentFrame/ContentBg/TipLabel").GetComponent$1(UILabel.ctor);
            this.getWalkPathInput = root.Find("ContentFrame/ContentBg/GetWalkPathInput").GetComponent$1(UIInput.ctor);
            this.getWalkBtn = root.Find("ContentFrame/ContentBg/GetWalkBtn").GetComponent$1(UIButton.ctor);
            this.storyIdInput = root.Find("ContentFrame/ContentBg/StoryIdInput").GetComponent$1(UIInput.ctor);
            this.plotPlayBtn = root.Find("ContentFrame/ContentBg/PlotPlayBtn").GetComponent$1(UIButton.ctor);
            this.guidePlayBtn = root.Find("ContentFrame/ContentBg/GuidePlayBtn").GetComponent$1(UIButton.ctor);
            this.brightnessSlider = root.Find("ContentFrame/ContentBg/VoiceSetting/VoiceSlider").GetComponent$1(UISlider.ctor);
            this.brightnessLbl = root.Find("ContentFrame/ContentBg/VoiceSetting/VoiceRight/VoiceValue").GetComponent$1(UILabel.ctor);
            this.CleanUpGuideInfoBtn = root.Find("ContentFrame/ContentBg/CleanUpGuideInfoBtn").GetComponent$1(UIButton.ctor);
            this.GameAnalyBtn = root.Find("ContentFrame/ContentBg/UtilGroup/GameAnalyBtn").GetComponent$1(UIButton.ctor);
            this.CelanLocalDataBtn = root.Find("ContentFrame/ContentBg/UtilGroup/CelanLocalDataBtn").GetComponent$1(UIButton.ctor);
            this.CleanUpGameResBtn = root.Find("ContentFrame/ContentBg/UtilGroup/CleanUpGameResBtn").GetComponent$1(UIButton.ctor);
            this.CleanUpMemoryBtn = root.Find("ContentFrame/ContentBg/UtilGroup/CleanUpMemoryBtn").GetComponent$1(UIButton.ctor);
            this.DownloadManagerBtn = root.Find("ContentFrame/ContentBg/UtilGroup/DownloadManagerBtn").GetComponent$1(UIButton.ctor);
            this.PlayerViewCacheBtn = root.Find("ContentFrame/ContentBg/UtilGroup/PlayerViewCacheBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(GMTestView);
var BattleItemUseController = {
    fullname: "BattleItemUseController",
    baseTypeName: "ItemUseViewController",
    staticDefinition: {
        cctor: function (){
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._itemUsedCount = 0;
            this._callBackDelegate = null;
            ItemUseViewController.ctor.call(this);
        },
        SetData: function (useDto, items, isMultiple, isBefore, isCanReClick){
            ItemUseViewController.commonPrototype.SetData.call(this, useDto, items, isMultiple, isBefore, isCanReClick);
            GameEventCenter.SendEvent$1$$Event$1$$T(BattleDemoModel.BattleSceneStat.ctor, GameEvent.BATTLE_FIGHT_SETBATTLESTAT, BattleDemoModel.BattleSceneStat.ON_COMMAND_ENTER);
        },
        InitLeftGroup: function (){
            this._view.OptlblLabel.set_text("使用");
            this._leftView = BattleItemUseViewController.Setup(this._view.LGroup);
        },
        SetOtherParam: function (itemUsedCount, callBackDelegate){
            this._itemUsedCount = itemUsedCount;
            this._callBackDelegate = callBackDelegate;
            (As(this._leftView, BattleItemUseViewController.ctor)).UpdateItemUsedCount(this._itemUsedCount);
        },
        Refresh: function (){
            var isChange = false;
            for (var index = this._items.get_Count() - 1; index >= 0; index--){
            }
            if (isChange){
                var index = 0;
                for (; index < this._items.get_Count(); index++){
                    this._itemCellList.get_Item$$Int32(index).SetData$$BagItemDto(this._items.get_Item$$Int32(index));
                    this._itemCellList.get_Item$$Int32(index).SelectSingle(this._leftView.GetData().index == this._items.get_Item$$Int32(index).index);
                }
                while (index < this._itemCellList.get_Count()){
                    this._itemCellList.get_Item$$Int32(index).SetData$$BagItemDto(null);
                    index++;
                }
            }
        },
        OnOptBtn: function (){
            var dto = this._leftView.GetData();
            if (dto != null){
                if (this._itemUsedCount >= 10 && ServiceRequestAction.ServerRequestCheck){
                    TipManager.AddTip("本场战斗使用物品数量已达上限", false, false, "");
                }
                else {
                    this.CloseView(dto);
                }
            }
            else {
                TipManager.AddTip("请选择需要使用的物品", false, false, "");
            }
        },
        UpdateRigth: function (itemDto){
            for (var index = 0; index < this._items.get_Count(); index++){
                if (this._items.get_Item$$Int32(index).index == itemDto.index){
                    this._items.set_Item$$Int32(index, itemDto);
                    break;
                }
            }
            for (var index = 0; index < this._itemCellList.get_Count(); index++){
                if (this._itemCellList.get_Item$$Int32(index).GetData().index == itemDto.index){
                    this._itemCellList.get_Item$$Int32(index).SetData$$BagItemDto(itemDto);
                    break;
                }
            }
        },
        OnDispose: function (){
            this.CloseView(this._leftView.GetData());
        },
        CloseView: function (pBagItemDto){
            ProxyItemUseModule.Close();
            if (this._callBackDelegate != null){
                this._callBackDelegate(pBagItemDto);
                this._callBackDelegate = null;
            }
        }
    }
};
JsTypes.push(BattleItemUseController);
var BattleItemUseViewController = {
    fullname: "BattleItemUseViewController",
    baseTypeName: "UseLeftViewCellController",
    staticDefinition: {
        cctor: function (){
            BattleItemUseViewController.ViewName = "IdentifyItemUseView";
        },
        Setup: function (pos){
            var prefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("IdentifyItemUseView" /* ViewName */), UnityEngine.GameObject.ctor);
            var module = GameObjectExt.AddChild(pos, prefab, 0, 0, 0);
            var leftView = GameObjectExt.GetMissingComponent$1(BattleItemUseViewController.ctor, module);
            UIHelper.AdjustDepth(module, 1);
            return leftView;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            UseLeftViewCellController.ctor.call(this);
        },
        SetUseDto: function (dto){
            this.get_View().EmptyInfo.SetActive(false);
        },
        SetData: function (dto){
            this._dto = dto;
            this.get_View().EmptyInfo.SetActive(false);
            GameDebuger.TODO("ItemTextTipManager.Instance.ShowItem(dto, View.EquipmentTipLabel, true);");
        },
        UpdateItemUsedCount: function (count){
            this.get_View().CountLabel.set_text(System.String.Format$$String$$Object("剩余使用次数：{0}", 10 - count));
        }
    }
};
JsTypes.push(BattleItemUseViewController);
var IItemCellController = {
    fullname: "IItemCellController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IItemCellController);
var ItemCellController = {
    fullname: "ItemCellController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        cctor: function (){
            ItemCellController.PackEnum_Equipment = 1000;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IItemCellController"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._alwaysDisplayCount = false;
            this._canDisplayCount = false;
            this._dto = null;
            this._itemCount = 0;
            this._onClickCallBack = null;
            this.cellClickEvent = null;
            this._packId = 0;
            this.mHideWhenCountZero = true;
            this.mItemCountLabelColor = new UnityEngine.Color.ctor();
            this.mOnlyUsedInCSPK = false;
            this._Index = 0;
            MonolessViewController$1.ctor.call(this, ItemCell.ctor);
        },
        OnCellClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCellClick: function (){
            return this.cellClickEvent;
        },
        Index$$: "System.Int32",
        get_Index: function (){
            return this._Index;
        },
        set_Index: function (value){
            this._Index = value;
        },
        isGrey$$: "System.Boolean",
        get_isGrey: function (){
            return this.get_View().IconSprite_UISprite.get_isGrey();
        },
        set_isGrey: function (value){
            this.get_View().IconSprite_UISprite.set_isGrey(value);
        },
        ItemCount$$: "System.Int32",
        get_ItemCount: function (){
            return this._itemCount;
        },
        set_ItemCount: function (value){
            this._itemCount = value;
            if (this._canDisplayCount){
                if (this.mHideWhenCountZero)
                    this.get_View().CountLabel_UILabel.set_text(value <= 1 ? "" : System.String.Format$$String$$Object("[b]{0}[-]", this._itemCount));
                else
                    this.get_View().CountLabel_UILabel.set_text(System.String.Format$$String$$Object("[b]{0}[-]", this._itemCount));
            }
        },
        ContainerScrollView$$: "UIScrollView",
        set_ContainerScrollView: function (value){
            this.get_View().ItemCell_UIDragScrollView.scrollView = value;
        },
        SetItemAcountNoLimit: function (count){
            this._itemCount = count;
            this.get_View().CountLabel_UILabel.set_text(System.String.Format$$String$$Object("[b]{0}[-]", this._itemCount));
        },
        HideWhenCountZero$$: "System.Boolean",
        get_HideWhenCountZero: function (){
            return this.mHideWhenCountZero;
        },
        set_HideWhenCountZero: function (value){
            if (this.mHideWhenCountZero != value){
                this.mHideWhenCountZero = value;
                if (this.get_ItemCount() <= 0){
                    this.get_View().CountLabel_UILabel.set_text(value ? System.String.Empty : "[b]0[-]");
                }
            }
        },
        ItemCountLabelColor$$: "UnityEngine.Color",
        get_ItemCountLabelColor: function (){
            return this.mItemCountLabelColor;
        },
        set_ItemCountLabelColor: function (value){
            if (null != this._view && UnityEngine.Color.op_Inequality(this.get_View().CountLabel_UILabel.get_color(), value)){
                this.mItemCountLabelColor = value;
                this.get_View().CountLabel_UILabel.set_color(this.mItemCountLabelColor);
            }
        },
        Bg$$: "UISprite",
        get_Bg: function (){
            return this.get_View().ItemCell_UISprite;
        },
        isSelect$$: "System.Boolean",
        get_isSelect: function (){
            if (this.get_View() != null)
                return this.get_View().SelectSprite_UISprite.get_enabled();
            return false;
        },
        set_isSelect: function (value){
            if (this.get_View() != null && this.get_View().SelectSprite_UISprite.get_enabled() != value){
                this.get_View().SelectSprite_UISprite.set_enabled(value);
            }
        },
        enabledIconSprite$$: "System.Boolean",
        get_enabledIconSprite: function (){
            return this.get_View().IconSprite_UISprite.get_enabled();
        },
        set_enabledIconSprite: function (value){
            if (this.get_View().IconSprite_UISprite.get_enabled() != value){
                this.get_View().IconSprite_UISprite.set_enabled(value);
            }
        },
        AfterInitView: function (){
            GameDebuger.TODO("_packId = AppItem.PackEnum_Unknown;");
            this._canDisplayCount = true;
            this._alwaysDisplayCount = false;
            if (this.get_View().SelectSprite_UISprite.get_enabled())
                this.get_View().SelectSprite_UISprite.set_enabled(false);
            this.get_View().CountLabel_UILabel.set_text("");
            this.get_View().IconSprite_UISprite.set_enabled(false);
            this.UpdateCSPKMark();
            GameDebuger.TODO("ItemHelper.UpdateEquipItemBorderColor(_view.BorderSprite_UISprite, null);");
            this.get_View().redSpr.SetActive(false);
            this.get_View().LockSprite_UISprite.set_enabled(false);
            this.get_View().WearSprite_UISprite.set_enabled(false);
            this.cellClickEvent = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.get_gameObject());
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ItemCell_UIEventTrigger.onClick, $CreateDelegate(this, this.OnClickItemCell));
        },
        GetPackId: function (){
            return this._packId;
        },
        SetPackId: function (packId){
            this._packId = packId;
        },
        GetData: function (){
            return this._dto;
        },
        AlwaysDisplayCount: function (b){
            this._alwaysDisplayCount = b;
        },
        CanDisplayCount: function (b){
            this._canDisplayCount = b;
        },
        SetActive: function (b){
            this.get_gameObject().SetActive(b);
        },
        UpdateView$$BagItemDto$$Boolean: function (dto, isLock){
            this._dto = dto;
            GameDebuger.TODO("ItemHelper.UpdateEquipItemBorderColor(_view.BorderSprite_UISprite, _dto);");
            GameDebuger.TODO("OnlyUsedInCSPK = ItemHelper.IsOnlyInCSPK(_dto);");
            this.set_OnlyUsedInCSPK(false);
            this.UpdateCSPKMark();
            if (this._dto != null){
                this.set_ItemCount(this._dto.count);
                this.get_View().IconSprite_UISprite.set_enabled(true);
                if (this._dto.get_item() != null){
                    UIHelper.SetItemIcon(this.get_View().IconSprite_UISprite, this._dto.get_item().icon, false);
                }
                else if (this._dto.itemId < 100){
                    var item = As(DataCache.getDtoByCls$1(AppDto.GeneralItem.ctor, this._dto.itemId), AppDto.AppVirtualItem.ctor);
                    if (item != null){
                        UIHelper.SetItemIcon(this.get_View().IconSprite_UISprite, item.icon, false);
                    }
                }
                this.get_View().IconSprite_UISprite.MakePixelPerfect();
            }
            else {
                this.get_View().CountLabel_UILabel.set_text("");
                this.get_View().IconSprite_UISprite.set_enabled(false);
                this.get_View().WearSprite_UISprite.set_enabled(false);
                this.get_View().BorderSprite_UISprite.set_enabled(false);
                this.get_View().redSpr.SetActive(false);
            }
            this.get_View().LockSprite_UISprite.set_enabled(isLock);
        },
        UpdateEquipView$$BagItemDto$$Boolean: function (dto, isLock){
        },
        UpdateEquipView$$Equipment$$Boolean: function (partType, isLock){
            this.get_View().IconSprite_UISprite.set_enabled(true);
            UIHelper.SetItemIcon(this.get_View().IconSprite_UISprite, "EqPart_" + partType, false);
        },
        UpdateView$$BagItemDto$$Action$1$ItemCellController: function (dto, onClickCallBack){
            this.UpdateView$$BagItemDto$$Boolean(dto, false);
            this._onClickCallBack = onClickCallBack;
        },
        OnClickItemCell: function (){
            if (this._onClickCallBack != null)
                this._onClickCallBack(this);
        },
        SetOtherIcon: function (icon){
            UIHelper.SetOtherIcon(this.get_View().IconSprite_UISprite, icon, false);
            this.UpdateIcon();
        },
        UpdateIcon: function (){
            this.get_View().IconSprite_UISprite.MakePixelPerfect();
            this.get_View().IconSprite_UISprite.set_enabled(true);
        },
        OnlyUsedInCSPK$$: "System.Boolean",
        get_OnlyUsedInCSPK: function (){
            return this.mOnlyUsedInCSPK;
        },
        set_OnlyUsedInCSPK: function (value){
            this.mOnlyUsedInCSPK = value;
            this.UpdateCSPKMark();
        },
        UpdateCSPKMark: function (){
            if (null != this._view && UnityEngine.Object.op_Inequality(null, this._view.get_gameObject())){
                if (this.get_View().MarkCSPK.get_activeSelf() != this.get_OnlyUsedInCSPK()){
                    this.get_View().MarkCSPK.SetActive(this.get_OnlyUsedInCSPK());
                }
            }
        },
        OnDispose: function (){
            UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.cellClickEvent);
        }
    }
};
JsTypes.push(ItemCellController);
var ItemUseViewController = {
    fullname: "ItemUseViewController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            ItemUseViewController.UseItemCellName = "UseItemCell";
            ItemUseViewController.PAGE_COUNT = 12;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._leftView = null;
            this._useDto = null;
            this._isMultiple = false;
            this._isBefore = false;
            this._isCanReClick = false;
            this._items = null;
            this._itemCellList = null;
            this._summary = null;
            MonoViewController$1.ctor.call(this, ItemUseView.ctor);
        },
        AfterInitView: function (){
            this._itemCellList = new System.Collections.Generic.List$1.ctor(UseItemCellController.ctor);
            this.InitLeftGroup();
        },
        RegistCustomEvent: function (){
            EventDelegate.Add$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn.onClick, $CreateDelegate(this, this.OnClose));
            EventDelegate.Add$$List$1$EventDelegate$$Callback(this.get_View().OptBtn.onClick, $CreateDelegate(this, this.OnOptBtn));
        },
        InitLeftGroup: function (){
        },
        SetData: function (useDto, items, isMultiple, isBefore, isCanReClick){
            this._useDto = useDto;
            this._items = items;
            this._isMultiple = isMultiple;
            this._isBefore = isBefore;
            this._isCanReClick = isCanReClick;
            var iTotalPage = ((System.Math.Ceiling$$Double(this._items.get_Count() / 12)) | 0);
            this._summary = Summary.create(this._items.get_Count(), iTotalPage, 1, 12 /* PAGE_COUNT */);
            iTotalPage = iTotalPage == 0 ? 1 : iTotalPage;
            this.AddItem(iTotalPage);
            this.get_View().LGroup.SetActive(this._items.get_Count() > 0);
            this._leftView.SetUseDto(useDto);
        },
        AddItem: function (page){
            for (var index = 0,totalCount = 12 /* PAGE_COUNT */ * page; index < totalCount; index++){
                var cell = this.AddCachedChild$2$$GameObject$$String$$String(UseItemCellController.ctor, UseItemCell.ctor, this.get_View().itemGrid.get_gameObject(), "UseItemCell" /* UseItemCell.NAME */, "");
                if (index < this._items.get_Count()){
                    cell.SetData$$BagItemDto$$Action$1$UseItemCellController$$Boolean$$Action$1$UseItemCellController(this._items.get_Item$$Int32(index), $CreateDelegate(this, this.OnItemClick), this._isMultiple, null);
                }
                else {
                    cell.SetData$$BagItemDto$$Action$1$UseItemCellController$$Boolean$$Action$1$UseItemCellController(null, $CreateDelegate(this, this.OnItemClick), this._isMultiple, null);
                }
                this._itemCellList.Add(cell);
            }
        },
        OnItemClick: function (cell){
            if (cell.GetData() != null){
                if (this._isMultiple){
                    cell.SelectMultiple();
                }
                else {
                    for (var index = 0; index < this._itemCellList.get_Count(); index++){
                        this._itemCellList.get_Item$$Int32(index).SelectSingle(cell == this._itemCellList.get_Item$$Int32(index));
                    }
                }
                this._leftView.SetData(cell.GetData());
            }
        },
        OnOptBtn: function (){
        },
        OnClose: function (){
            ProxyItemUseModule.Close();
        }
    }
};
JsTypes.push(ItemUseViewController);
var UseItemCellController = {
    fullname: "UseItemCellController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._cell = null;
            this._currCount = 0;
            this._itemDto = null;
            this._isMultiple = false;
            this._onClickCallBack = null;
            this._onRemoveCallBack = null;
            MonolessViewController$1.ctor.call(this, UseItemCell.ctor);
        },
        AfterInitView: function (){
            this._isMultiple = false;
            this._cell = this.AddCachedChild$2$$GameObject$$String$$String(ItemCellController.ctor, ItemCell.ctor, this._view.get_gameObject(), "ItemCell" /* ItemCell.NAME */, "");
            this._cell.CanDisplayCount(false);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.RomeveBtn.onClick, $CreateDelegate(this, this.OnRomeveBtn));
        },
        SetData$$BagItemDto$$Action$1$UseItemCellController$$Boolean$$Action$1$UseItemCellController: function (itemDto, onClickCallBack, isMultiple, onRemoveCallBack){
            this._isMultiple = isMultiple;
            this._onClickCallBack = onClickCallBack;
            this._onRemoveCallBack = onRemoveCallBack;
            this.SetData$$BagItemDto(itemDto);
        },
        SetData$$BagItemDto: function (itemDto){
            this._currCount = 0;
            this._cell.set_isSelect(false);
            this._itemDto = itemDto;
            this._cell.UpdateView$$BagItemDto$$Action$1$ItemCellController(this._itemDto, $CreateDelegate(this, this.OnItemClick));
            if (this._itemDto == null){
                this._view.RomeveBtn.get_gameObject().SetActive(false);
                this._view.CountLabel.set_text("");
            }
            else {
                if (this._isMultiple){
                    this.SetMultipleState();
                }
                else {
                    if (this._itemDto.count > 1){
                        this._view.CountLabel.set_text(this._itemDto.count.toString());
                    }
                    else {
                        this._view.CountLabel.set_text("");
                    }
                    this._view.RomeveBtn.get_gameObject().SetActive(false);
                }
            }
        },
        SetMultipleState: function (){
            if (this._itemDto.get_item().maxOverlay > 1){
                this._view.RomeveBtn.get_gameObject().SetActive(this._currCount > 0);
                this._view.CountLabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", this._currCount, this._itemDto.count));
                this._cell.set_isSelect(this._currCount > 0);
            }
            else {
                this._view.RomeveBtn.get_gameObject().SetActive(false);
                this._view.CountLabel.set_text("");
            }
        },
        GetData: function (){
            return this._itemDto;
        },
        GetCount: function (){
            return this._currCount;
        },
        SelectSingle: function (b){
            this._cell.set_isSelect(b);
            this._currCount = b ? 1 : 0;
        },
        IsSelect$$: "System.Boolean",
        get_IsSelect: function (){
            return this._cell.get_isSelect();
        },
        SelectMultiple: function (){
            if (this._itemDto.get_item().maxOverlay == 1){
                this._cell.set_isSelect(!this._cell.get_isSelect());
                if (this._cell.get_isSelect()){
                    this._currCount = 1;
                }
                else {
                    this._currCount = 0;
                }
            }
            else {
                this._cell.set_isSelect(true);
                if (this._currCount < this._itemDto.count)
                    this._currCount++;
            }
            if (this._isMultiple){
                this.SetMultipleState();
            }
        },
        OnItemClick: function (cell){
            if (this._onClickCallBack != null)
                this._onClickCallBack(this);
        },
        OnRomeveBtn: function (){
            if (this._currCount > 0)
                this._currCount--;
            if (this._isMultiple){
                this.SetMultipleState();
            }
            if (this._onRemoveCallBack != null)
                this._onRemoveCallBack(this);
        }
    }
};
JsTypes.push(UseItemCellController);
var UseLeftViewCellController = {
    fullname: "UseLeftViewCellController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._dto = null;
            this._useDto = null;
            MonoViewController$1.ctor.call(this, IdentifyItemUseView.ctor);
        },
        SetUseDto: function (dto){
        },
        SetData: function (dto){
        },
        SetTips: function (tips){
        },
        GetData: function (){
            return this._dto;
        }
    }
};
JsTypes.push(UseLeftViewCellController);
var IdentifyItemUseView = {
    fullname: "IdentifyItemUseView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            IdentifyItemUseView.NAME = "IdentifyItemUseView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.EmptyInfo = null;
            this.CountLabel = null;
            this.DecLabel = null;
            this.EquipmentTipLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.EmptyInfo = root.Find("EmptyInfo").get_gameObject();
            this.CountLabel = root.Find("CountLabel").GetComponent$1(UILabel.ctor);
            this.DecLabel = root.Find("EmptyInfo/DecLabel").GetComponent$1(UILabel.ctor);
            this.EquipmentTipLabel = root.Find("ProductsScrollView/EquipmentTipLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(IdentifyItemUseView);
var ItemCell = {
    fullname: "ItemCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ItemCell.NAME = "ItemCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.SelectSprite_UISprite = null;
            this.CountLabel_UILabel = null;
            this.IconSprite_UISprite = null;
            this.BorderSprite_UISprite = null;
            this.MarkCSPK = null;
            this.ItemCell_UISprite = null;
            this.ItemCell_UIDragScrollView = null;
            this.ItemCell_UIEventTrigger = null;
            this.redSpr = null;
            this.WearSprite_UISprite = null;
            this.LockSprite_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.SelectSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "SelectSprite");
            this.CountLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "CountLabel");
            this.IconSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "IconSprite");
            this.BorderSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "BorderSprite");
            this.MarkCSPK = GameObjectExt.FindGameObject(root, "MarkCSPK");
            this.ItemCell_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "");
            this.ItemCell_UIDragScrollView = GameObjectExt.FindScript$1(UIDragScrollView.ctor, root, "");
            this.ItemCell_UIEventTrigger = GameObjectExt.FindScript$1(UIEventTrigger.ctor, root, "");
            this.redSpr = GameObjectExt.FindGameObject(root, "redSpr");
            this.WearSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "WearSprite");
            this.LockSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "LockSprite");
        }
    }
};
JsTypes.push(ItemCell);
var ItemUseView = {
    fullname: "ItemUseView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ItemUseView.NAME = "ItemUseView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn = null;
            this.OptBtn = null;
            this.OptlblLabel = null;
            this.itemGrid = null;
            this.LGroup = null;
            this.TitleLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseBtn = root.Find("RGroup/CloseBtn").GetComponent$1(UIButton.ctor);
            this.OptBtn = root.Find("RGroup/OptBtn").GetComponent$1(UIButton.ctor);
            this.OptlblLabel = root.Find("RGroup/OptBtn/OptlblLabel").GetComponent$1(UILabel.ctor);
            this.itemGrid = root.Find("RGroup/ItemPanel/itemGrid").GetComponent$1(UIPageGrid.ctor);
            this.LGroup = root.Find("LGroup").get_gameObject();
            this.TitleLabel_UILabel = root.Find("RGroup/TitleGroup/TitleLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(ItemUseView);
var UseItemCell = {
    fullname: "UseItemCell",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            UseItemCell.NAME = "UseItemCell";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.RomeveBtn = null;
            this.CountLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.RomeveBtn = root.Find("RomeveBtn").GetComponent$1(UIButton.ctor);
            this.CountLabel = root.Find("CountLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(UseItemCell);
var JoystickModule = {
    fullname: "JoystickModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            JoystickModule.stream = new UniRx.Subject$1.ctor(IJoystickModuleData.ctor);
            JoystickModule.NAME = "JoystickModule";
            JoystickModule.instance = new JoystickModule.ctor();
            JoystickModule._disableMove = false;
        },
        Stream$$: "UniRx.IObservable`1[[IJoystickModuleData]]",
        get_Stream: function (){
            return JoystickModule.stream;
        },
        DisableMove$$: "System.Boolean",
        get_DisableMove: function (){
            return JoystickModule._disableMove;
        },
        Instance$$: "JoystickModule",
        get_Instance: function (){
            return JoystickModule.instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = null;
            this._joystickController = null;
            this._joystickView = null;
            this._disposable = null;
            System.Object.ctor.call(this);
            this._data = new JoystickModule.JoystickModuleData.ctor();
        },
        IsDragging$$: "System.Boolean",
        get_IsDragging: function (){
            if (UnityEngine.Object.op_Inequality(this._joystickController, null)){
                return this._joystickController.get_IsDragging();
            }
            return false;
        },
        Setup: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ITeamData.ctor, TeamDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (s){
                if (s == null)
                    return;
                var m = s.GetTeamMemberDtoByPlayerID(ModelManager.get_IPlayer().GetPlayerId());
                JoystickModule._disableMove = m != null ? m.memberStatus == 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */ : false;
            }));
            if (UnityEngine.Object.op_Equality(this._joystickView, null)){
                var modulePrefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("JoystickModule" /* NAME */), UnityEngine.GameObject.ctor);
                this._joystickView = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().UIModuleRoot, modulePrefab);
                var panel = this._joystickView.GetComponent$1(UIPanel.ctor);
                if (UnityEngine.Object.op_Inequality(panel, null)){
                    var depth = UIModuleManager.get_Instance().GetCurDepthByLayerType(UILayerType.JOYSTICK);
                    panel.set_depth(depth);
                }
                this._joystickView.set_name("JoystickModule");
                this._joystickController = GameObjectExt.GetMissingComponent$1(JoystickModule.JoystickController.ctor, this._joystickView);
            }
            else
                this._joystickView.SetActive(true);
        },
        EnabledJoystick: function (enabled){
            if (UnityEngine.Object.op_Inequality(this._joystickController, null)){
                this._joystickController.SetCollider(enabled);
            }
        },
        UpdateSelectPlayerInfo: function (dto){
            if (dto != null){
                this._data._selectedPlayerDto = dto;
                JoystickModule.stream.OnNext(this._data);
            }
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(this._joystickView, null))
                this._joystickView.SetActive(false);
            this._data.Dispose();
            this._data = null;
            if (this._disposable != null){
                this._disposable.Dispose();
                this._disposable = null;
            }
        }
    }
};
JsTypes.push(JoystickModule);
var IJoystickModuleData = {
    fullname: "IJoystickModuleData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IJoystickModuleData);
var AgreementController = {
    fullname: "AgreementController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._info = null;
            this._currentPage = 0;
            this._maxPage = 0;
            this._callback = null;
            MonoViewController$1.ctor.call(this, AgreementView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseButton_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().SubmitBtn_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LeftArrowSprite_UIButton.onClick, $CreateDelegate(this, this.OnLeftButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RightArrowSprite_UIButton.onClick, $CreateDelegate(this, this.OnRightButtonClick));
        },
        OnDispose: function (){
            PlayerPrefsExt.SetBool("PassAgreement", true);
        },
        add__callback: function (value){
            this._callback = $CombineDelegates(this._callback, value);
        },
        remove__callback: function (value){
            this._callback = $RemoveDelegate(this._callback, value);
        },
        Open: function (callback){
            this._callback = callback;
            if (this._info == null){
                var agreementDataAsset = As(UnityEngine.Resources.Load$$String("Setting/AgreementData"), UnityEngine.TextAsset.ctor);
                if (UnityEngine.Object.op_Inequality(agreementDataAsset, null)){
                    var json = System.Text.Encoding.get_UTF8().GetString$$Byte$Array(agreementDataAsset.get_bytes());
                    this._info = JsHelper.ToObject(AgreementInfo.ctor, json);
                    this._maxPage = this._info.infoList.get_Count();
                    this.UpdateInfo(0);
                }
                else {
                    AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig("AgreementData", $CreateAnonymousDelegate(this, function (asset){
                        if (this.get_View() != null && UnityEngine.Object.op_Inequality(asset, null)){
                            var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                            if (UnityEngine.Object.op_Inequality(textAsset, null)){
                                this._info = JsHelper.ToObject(AgreementInfo.ctor, textAsset.get_text());
                                this._maxPage = this._info.infoList.get_Count();
                                this.UpdateInfo(0);
                            }
                        }
                    }), null, 100);
                }
            }
            else {
                this.UpdateInfo(0);
            }
        },
        OnCloseButtonClick: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("Agreement", "Close");
            ProxyLoginModule.CloseAgreement();
            if (this._callback != null){
                this._callback();
                this._callback = null;
            }
        },
        OnLeftButtonClick: function (){
            this._currentPage--;
            if (this._currentPage < 0){
                this._currentPage = 0;
            }
            this.UpdateInfo(this._currentPage);
        },
        OnRightButtonClick: function (){
            this._currentPage++;
            if (this._currentPage >= this._maxPage){
                this._currentPage = this._maxPage - 1;
            }
            this.UpdateInfo(this._currentPage);
        },
        UpdateInfo: function (page){
            if (this._info == null)
                return;
            this._currentPage = page;
            this.get_View().PageLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", (this._currentPage + 1), this._maxPage));
            var info = this._info.infoList.get_Item$$Int32(page);
            info = info.Replace$$String$$String("游戏名称", GameSetting.get_GameName());
            this.get_View().ContentLabel_UILabel.set_text(System.String.Format$$String$$Object("[502E10]{0}[-]", info));
            this.get_View().scrollView_UIScrollView.ResetPosition();
        }
    }
};
JsTypes.push(AgreementController);
var AnnouncementController = {
    fullname: "AnnouncementController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._infoList = null;
            this._contentUiLabels = new System.Collections.Generic.List$1.ctor(UILabel.ctor);
            MonoViewController$1.ctor.call(this, AnnouncementView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().OkButton_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseButton_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().dragRegion_UIEventTrigger.onClick, $CreateDelegate(this, this.OnContentClick));
        },
        OnContentClick: function (){
            for (var i = 0; i < this._contentUiLabels.get_Count(); i++){
                var urlStr = this._contentUiLabels.get_Item$$Int32(i).GetUrlAtPosition$$Vector3(UICamera.lastWorldPosition);
                if (!System.String.IsNullOrEmpty(urlStr)){
                    GameDebuger.TODO("ModelManager.Chat.DecodeUrlMsg(urlStr, null);");
                    break;
                }
            }
        },
        Open: function (){
            this._infoList = AnnouncementDataManager.get_Instance().GetAnnouncementInfoList();
            GameObjectExt.RemoveChildren$$GameObject(this.get_View().Table_UITable.get_gameObject());
            if (this._infoList != null){
                for (var i = 0; i < this._infoList.get_Count(); i++){
                    var info = this._infoList.get_Item$$Int32(i);
                    this.ShowAnnouncementInfo(info);
                }
            }
            this.get_View().Table_UITable.Reposition();
        },
        GenerateAnnouncementInfo: function (title, content){
            var info = new AnnouncementInfo.ctor();
            info.title = title;
            info.content = content;
            return info;
        },
        ShowAnnouncementInfo: function (info){
            var announcementTitleCell = this.AddCachedChild$$GameObject$$String(this.get_View().Table_UITable.get_gameObject(), "AnnouncementTitleCell");
            var announcementContentCell = this.AddCachedChild$$GameObject$$String(this.get_View().Table_UITable.get_gameObject(), "AnnouncementContentCell");
            announcementTitleCell.GetComponentInChildren$1(UILabel.ctor).set_text(info.title);
            var lbl = announcementContentCell.GetComponentInChildren$1(UILabel.ctor);
            lbl.set_text(info.content);
            this._contentUiLabels.Add(lbl);
        },
        OnCloseButtonClick: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("Announcement", "Close");
            ProxyLoginModule.CloseAnnouncement();
        }
    }
};
JsTypes.push(AnnouncementController);
var LoginController = {
    fullname: "LoginController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._loginEffect = null;
            this._currentServerInfo = null;
            this._isLogined = false;
            this._startCheckTime = 0;
            this._versionClickCount = 0;
            MonoViewController$1.ctor.call(this, LoginView.ctor);
        },
        AfterInitView: function (){
            this.get_View().MovieButton_UIButton.get_gameObject().SetActive(AppGameVersion.startMovieMode);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().StartGameButton_UIButton.onClick, $CreateDelegate(this, this.OnClickStartGameButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LastLoginInfo_UIButton.onClick, $CreateDelegate(this, this.OnClickLastLoginInfoButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LastLoginRoleInfo_UIButton.onClick, $CreateDelegate(this, this.OnClickLastLoginInfoButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().MovieButton_UIButton.onClick, $CreateDelegate(this, this.OnClickMovieButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().NoticeButton_UIButton.onClick, $CreateDelegate(this, this.OnNoticeButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().AccountButton_UIButton.onClick, $CreateDelegate(this, this.OnClickAccountButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().AgreementButton_UIButton.onClick, $CreateDelegate(this, this.OnClickAgreementButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().QRCodeScanBtn_UIButton.onClick, $CreateDelegate(this, this.OnQRCodeScanBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().VersionLabel_UIButton.onClick, $CreateDelegate(this, this.OnVersionButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ChangeUrlBtn_UIButton.onClick, $CreateDelegate(this, this.OnChangeUrlBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RestoreBtn_UIButton.onClick, $CreateDelegate(this, this.OnRestoreBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ShowBtn_UIButton.onClick, $CreateDelegate(this, this.OnShowBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().SPLoginButton_UIButton.onClick, $CreateDelegate(this, this.OnSPLoginButtonClick));
            LoginManager.get_Instance().add_OnLoginMessage($CreateDelegate(this, this.OnLoginMessage));
            LoginManager.get_Instance().add_OnLoginProcess($CreateDelegate(this, this.OnLoginProcess));
        },
        OnDispose: function (){
            if (UnityEngine.Object.op_Inequality(this._loginEffect, null)){
                this._loginEffect.Dispose();
                this._loginEffect = null;
            }
            UIHelper.DisposeUITexture(this.get_View().LoadingTexture_UITexture);
            UIHelper.DisposeUITexture(this.get_View().LogoTexture_UITexture);
            LoginManager.get_Instance().remove_OnLoginMessage($CreateDelegate(this, this.OnLoginMessage));
            LoginManager.get_Instance().remove_OnLoginProcess($CreateDelegate(this, this.OnLoginProcess));
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLoginCancel($CreateDelegate(this, this.OnLoginCancel));
            SPSdkManager.get_Instance().remove_OnLoginFail($CreateDelegate(this, this.OnLoginFail));
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnSwitchLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLogoutNotify($CreateDelegate(this, this.OnLogout));
        },
        Open: function (){
            this._isLogined = false;
            this._currentServerInfo = null;
            this.get_View().VersionLabel_UILabel.set_text(AppGameVersion.get_ShowVersion());
            this.get_View().BanhaoLabel_UILabel.set_text(AppGameVersion.GetBanhao());
            this.ShowVersion(true);
            this.get_View().loadingSlider_UISlider.set_value(0.1);
            this.get_View().LoadingLabel_UILabel.set_text("");
            this.get_View().LoadingTips_UILabel.set_text(LoadingTipManager.GetLoadingTip());
            this.get_View().LogoTexture_UITexture.get_cachedGameObject().SetActive(!GameSetting.get_IsOriginWinPlatform());
            this.get_View().LogoTexture_UITexture.set_mainTexture(UnityEngine.Resources.Load$1$$String(UnityEngine.Texture.ctor, "Textures/logo"));
            this.get_View().LogoTexture_UITexture.MakePixelPerfect();
            this.get_View().LoadingTexture_UITexture.set_mainTexture(UnityEngine.Resources.Load$1$$String(UnityEngine.Texture.ctor, "Textures/LoadingBG/loginBG"));
            this.get_View().ChangeUrlBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().RestoreBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().ShowBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().ChangeUrlBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().RestoreBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().ShowBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().AgreementButton_UIButton.get_gameObject().SetActive(false);
            this.get_View().NoticeButton_UIButton.get_gameObject().SetActive(false);
            this.get_View().AccountButton_UIButton.get_gameObject().SetActive(false);
            this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(false);
            this.HideSPLoginButton();
            ProxyWindowModule.closeSimpleWinForTop();
            if (ProxyLoginModule.serverInfo != null){
                this.OnServerListReturn();
                this.HideOtherUI();
                this.Login(ProxyLoginModule.serverInfo, ProxyLoginModule.accountPlayerDto);
                ProxyLoginModule.serverInfo = null;
                ProxyLoginModule.accountPlayerDto = null;
            }
            else {
                if (ServerManager.get_Instance().loginAccountDto == null){
                    if (System.String.IsNullOrEmpty(ServerManager.get_Instance().sid)){
                        this.OnClickAccountButton();
                    }
                    else {
                        this.HideOtherUI();
                        this.OnLoginSuccess(ServerManager.get_Instance().isGuest, ServerManager.get_Instance().sid);
                    }
                }
                else {
                    this.HideOtherUI();
                    if (!GameSetting.get_IsOriginWinPlatform()){
                        this.OnLoginSdkSuccess(ServerManager.get_Instance().loginAccountDto);
                    }
                    else {
                        this.OnLoginSuccess(ServerManager.get_Instance().isGuest, ServerManager.get_Instance().sid);
                    }
                }
            }
            AudioManager.get_Instance().PlayMusic("music_login", true);
            LayerManager.get_Instance().SwitchLayerMode(UIMode.LOGIN);
            LayerManager.get_Instance().LockUICamera(false);
        },
        ShowVersion: function (show){
            this.get_View().VersionLabel_UILabel.get_gameObject().SetActive(show);
            this.get_View().BanhaoLabel_UILabel.get_gameObject().SetActive(show);
        },
        LoadEffect: function (){
            GameDebuger.TODO("if (SystemSetting.LowMemory)\n\t\t\treturn;\n            ");
            if (UnityEngine.Object.op_Equality(this._loginEffect, null)){
                this._loginEffect = OneShotUIEffect.BeginFollowEffect("ui_eff_Login_Effect", this.get_View().LoadingTexture_UITexture, UnityEngine.Vector2.get_zero(), 1, false, 1, null);
            }
            else {
                this._loginEffect.SetActive(true);
            }
        },
        OnVersionButtonClick: function (){
            if (this._versionClickCount == 0){
                this._startCheckTime = System.DateTime.get_Now().get_Ticks();
            }
            this._versionClickCount++;
            GameDebuger.Log("_versionClickCount " + this._versionClickCount, null);
            if (this._versionClickCount > 10){
                EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().VersionLabel_UIButton.onClick, $CreateDelegate(this, this.OnVersionButtonClick));
                var passTime = System.DateTime.get_Now().get_Ticks() - this._startCheckTime;
                var elapsedSpan = new System.TimeSpan.ctor$$Int64(passTime);
                GameDebuger.Log("passTime = " + elapsedSpan.get_TotalSeconds() + " " + 2, null);
                if (elapsedSpan.get_TotalSeconds() < 2){
                    this.get_View().ChangeUrlBtn_UIButton.get_gameObject().SetActive(true);
                    this.get_View().RestoreBtn_UIButton.get_gameObject().SetActive(true);
                    this.get_View().ShowBtn_UIButton.get_gameObject().SetActive(true);
                }
            }
        },
        OnChangeUrlBtnClick: function (){
            var url = System.String.Format$$String$$Object("http://dev.h5.cilugame.com/h5/{0}/android/dlls/", GameSetting.get_ResDir());
            GameDebuger.TODO(" BaoyugameSdk.PatchUtilsOpt(PatchVersionNotify.OPT_CHANGE_URL, url + \"version.json\" + \";\" + url); ");
        },
        OnRestoreBtnClick: function (){
            GameDebuger.TODO("BaoyugameSdk.PatchUtilsOpt(PatchVersionNotify.OPT_RESTORE, string.Empty);");
        },
        OnShowBtnClick: function (){
            GameDebuger.TODO("BaoyugameSdk.PatchUtilsOpt(PatchVersionNotify.OPT_SHOW, string.Empty);");
        },
        OnLoginSdkSuccess: function (account){
            TalkingDataHelper.OnEventSetp$$String("GameAccountLogin/LoginAccountSuccess");
            ServerManager.get_Instance().loginAccountDto = account;
            ServerManager.get_Instance().uid = account.uid;
            SPSdkManager.get_Instance().UpdateUserInfo(account.uid);
            GameServerInfoManager.InitDefaultServer();
            this.OnServerListReturn();
            var token = account.token;
            GameDebuger.Log("token = " + token, null);
            this.ShopAccountTip(System.String.Format$$String$$Object("欢迎进入{0}", GameSetting.get_GameName()));
            var accountId = account.accountId.toString();
            if (account.firstRegister){
                SPSdkManager.get_Instance().Regster(accountId, account.uid);
            }
            this.get_View().StartPanel_Transform.get_gameObject().SetActive(true);
            this.get_View().ButtonGroup.SetActive(true);
            this.get_View().LogoTexture_UITexture.get_cachedGameObject().SetActive(true);
            this.get_View().AgreementButton_UIButton.get_gameObject().SetActive(this.IsAgreementSupport());
            this.get_View().NoticeButton_UIButton.get_gameObject().SetActive(true);
            this.get_View().AccountButton_UIButton.get_gameObject().SetActive(true);
            this.CheckQRCodeScanSupport();
            AnnouncementDataManager.get_Instance().CheckUpdate();
            PayManager.get_Instance().Setup();
        },
        IsAgreementSupport: function (){
            return true;
        },
        CheckQRCodeScanSupport: function (){
            if (GameSetting.get_IsOriginWinPlatform()){
                this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(false);
                return;
            }
            GameStaticConfigManager.get_Instance().LoadStaticConfig("staticVersion.txt" /* GameStaticConfigManager.Type_StaticVersion */, $CreateAnonymousDelegate(this, function (json){
                var dic = JsHelper.ToObject(System.Collections.Generic.Dictionary$2.ctor, json);
                try{
                    var qrCodeKey = "supportQRCodeVer";
                    if (GameSetting.get_Platform() != 3){
                        qrCodeKey = "androidQRCodeVer";
                    }
                    if (dic.ContainsKey(qrCodeKey) && !System.String.IsNullOrEmpty(Cast(dic.get_Item$$TKey(qrCodeKey), System.String.ctor))){
                        this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(AppGameVersion.get_SpVersionCode() <= GameSetting.ParseVersionCode(Cast(dic.get_Item$$TKey(qrCodeKey), System.String.ctor)));
                    }
                    else {
                        this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(GameSetting.get_Platform() != 3);
                    }
                }
                catch($$e3){
                    this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(false);
                }
            }), $CreateAnonymousDelegate(this, function (obj){
                this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(false);
            }));
        },
        ShopAccountTip: function (accountTip){
            this.get_View().AccountTipGroupWidget.get_cachedGameObject().SetActive(true);
            this.get_View().AccountTipLabel_UILabel.set_text(accountTip);
            UIHelper.PlayAlphaTween(this.get_View().AccountTipGroupWidget, 1, 0, 1, 2, null);
        },
        OnServerListReturn: function (){
            this.OnSelectionChange(UnityEngine.PlayerPrefs.GetString$$String(GameSetting.get_LastServerPrefsName()));
        },
        OnClickMovieButton: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("PlayCG", "OpenFromClick");
            CGPlayer.PlayCG("Movies/xlsj.mp4" /* PathHelper.CG_Asset_PATH */, null);
        },
        OnNoticeButton: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("Announcement", "Open");
            ProxyLoginModule.OpenAnnouncement();
        },
        OnSPLoginButtonClick: function (){
            RequestLoadingTip.Show("", true, false, 1);
            this.OpenSdk();
        },
        OnClickAccountButton: function (){
            TalkingDataHelper.OnEvent$$String$$Dictionary$2$String$Object("AccountButton", null);
            this.HideAccountUI();
            if (System.String.IsNullOrEmpty(ServerManager.get_Instance().sid)){
                this.OpenAccountLogin();
            }
            else {
                SPSdkManager.get_Instance().Logout($CreateAnonymousDelegate(this, function (success){
                    this.OpenAccountLogin();
                }));
            }
        },
        HideAccountUI: function (){
            this.HideOtherUI();
            this.get_View().NoticeButton_UIButton.get_gameObject().SetActive(false);
            this.get_View().AccountButton_UIButton.get_gameObject().SetActive(false);
            this.get_View().QRCodeScanBtn_UIButton.get_gameObject().SetActive(false);
            this.get_View().LogoTexture_UITexture.get_cachedGameObject().SetActive(!GameSetting.get_IsOriginWinPlatform());
        },
        OnQRCodeScanBtnClick: function (){
            ProxyLoginModule.Hide();
            ProxyQRCodeModule.OpenQRCodeScanView($CreateDelegate(this, this.OnQRCodeScanReturn), UILayerType.QRCodeScan);
        },
        OnQRCodeScanReturn: function (){
            ProxyLoginModule.Show();
        },
        OpenAccountLogin: function (){
            if (PlayerPrefsExt.GetBool$$String("PassAgreement") || !this.IsAgreementSupport()){
                JSTimer.get_Instance().StartCoroutine$$IEnumerator(this.WaitOpenSDK());
            }
            else {
                ProxyLoginModule.OpenAgreement($CreateDelegate(this, this.OpenSdk));
            }
        },
        WaitOpenSDK: function*(){
            if (GameSetting.get_IsOriginWinPlatform()){
                yield(new UnityEngine.WaitForSeconds.ctor(0.3));
            }
            this.OpenSdk();
        },
        OpenSdk: function (){
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnSwitchLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLogoutNotify($CreateDelegate(this, this.OnLogout));
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLoginCancel($CreateDelegate(this, this.OnLoginCancel));
            SPSdkManager.get_Instance().remove_OnLoginFail($CreateDelegate(this, this.OnLoginFail));
            TalkingDataHelper.OnEventSetp$$String("GameAccountLogin/OpenSdk");
            SPSdkManager.get_Instance().add_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().add_OnLoginCancel($CreateDelegate(this, this.OnLoginCancel));
            SPSdkManager.get_Instance().add_OnLoginFail($CreateDelegate(this, this.OnLoginFail));
            this.CancelInvoke$$String("DelayShowSPLoginButton");
            this.Invoke("DelayShowSPLoginButton", 2);
            SPSdkManager.get_Instance().Login();
        },
        DelayShowSPLoginButton: function (){
            if (SPSdkManager.get_Instance().WaitingLoginResult){
                this.get_View().SPLoginButton_UIButton.get_gameObject().SetActive(true);
            }
        },
        HideSPLoginButton: function (){
            this.CancelInvoke$$String("DelayShowSPLoginButton");
            this.get_View().SPLoginButton_UIButton.get_gameObject().SetActive(false);
        },
        OnLoginSuccess: function (isGuest, sid){
            this.HideSPLoginButton();
            this.get_View().LoadingTips_UILabel.set_text(LoadingTipManager.GetLoadingTip());
            ProxyWindowModule.closeSimpleWinForTop();
            ServerManager.get_Instance().isGuest = isGuest;
            ServerManager.get_Instance().sid = sid;
            BehaviorHelper.SetupSid(sid);
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLoginCancel($CreateDelegate(this, this.OnLoginCancel));
            SPSdkManager.get_Instance().remove_OnLoginFail($CreateDelegate(this, this.OnLoginFail));
            SPSdkManager.get_Instance().add_OnLoginSuccess($CreateDelegate(this, this.OnSwitchLoginSuccess));
            SPSdkManager.get_Instance().add_OnLogoutNotify($CreateDelegate(this, this.OnLogout));
            if (GameSetting.get_GMMode()){
                var loginAccountDto = new LoginAccountDto.ctor();
                loginAccountDto.token = sid;
                loginAccountDto.players = new System.Collections.Generic.List$1.ctor(AccountPlayerDto.ctor);
                this.OnLoginSdkSuccess(loginAccountDto);
            }
            else if (GameSetting.get_IsOriginWinPlatform()){
                this.OnLoginSdkSuccess(ServerManager.get_Instance().loginAccountDto);
            }
            else {
                TalkingDataHelper.OnEventSetp$$String("GameAccountLogin/RequestSsoAccountLogin");
                ServiceProviderManager.RequestSsoAccountLogin(sid, GameSetting.Channel, GameSetting.SubChannel, GameSetting.LoginWay, GameSetting.AppId, GameSetting.get_PlatformTypeId(), BaoyugameSdk.getUUID(), GameSetting.Channel, GameSetting.BundleId, $CreateAnonymousDelegate(this, function (response){
                    if (response != null && response.code == 0){
                        this.OnLoginSdkSuccess(response);
                    }
                    else {
                        var msg = "账号登陆失败， 请重试";
                        if (response != null){
                            msg = response.msg;
                        }
                        ProxyWindowModule.OpenMessageWindow(msg, "", $CreateDelegate(this, this.OnClickAccountButton), 3, null, UILayerType.Dialogue, false);
                    }
                }));
            }
        },
        OnLoginCancel: function (){
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLoginCancel($CreateDelegate(this, this.OnLoginCancel));
            SPSdkManager.get_Instance().remove_OnLoginFail($CreateDelegate(this, this.OnLoginFail));
            RequestLoadingTip.Show("", true, false, 0.5);
            this.get_View().SPLoginButton_UIButton.get_gameObject().SetActive(true);
        },
        OnLoginFail: function (){
            SPSdkManager.get_Instance().remove_OnLoginSuccess($CreateDelegate(this, this.OnLoginSuccess));
            SPSdkManager.get_Instance().remove_OnLoginCancel($CreateDelegate(this, this.OnLoginCancel));
            SPSdkManager.get_Instance().remove_OnLoginFail($CreateDelegate(this, this.OnLoginFail));
            ProxyWindowModule.OpenMessageWindow("登陆失败", "提示", null, 3, null, UILayerType.Dialogue, false);
            this.get_View().SPLoginButton_UIButton.get_gameObject().SetActive(true);
        },
        OnSwitchLoginSuccess: function (isGuest, sid){
            if (ServerManager.get_Instance().sid != sid){
                ServerManager.get_Instance().isGuest = isGuest;
                ServerManager.get_Instance().sid = sid;
                ExitGameScript.get_Instance().DoReloginAccount(false);
            }
            else {
                ProxyWindowModule.closeSimpleWinForTop();
            }
        },
        OnLogout: function (success){
            if (success){
                ExitGameScript.OpenReloginTipWindow("您已经注销了账号， 请重新游戏", true, false);
            }
        },
        OnApplicationPause: function (paused){
            this.CancelInvoke$$String("CheckLoginResult");
            if (!paused){
                if (SPSdkManager.get_Instance().WaitingLoginResult){
                    RequestLoadingTip.Show("", true, false, 0.5);
                }
            }
            else {
            }
        },
        CheckLoginResult: function (){
            if (SPSdkManager.get_Instance().WaitingLoginResult){
                GameDebuger.Log("Check WaitingLoginResult and CancleLogin", null);
                SPSdkManager.get_Instance().CallbackLoginCancel();
            }
        },
        HideOtherUI: function (){
            this.get_View().LoadingPanel_Transform.get_gameObject().SetActive(false);
            this.get_View().AccountTipGroupWidget.get_cachedGameObject().SetActive(false);
            this.get_View().StartPanel_Transform.get_gameObject().SetActive(false);
        },
        OnClickAgreementButton: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("Agreement", "Open");
            ProxyLoginModule.OpenAgreement(null);
        },
        OnClickStartGameButton: function (){
            if (this._currentServerInfo == null){
                TipManager.AddTip("提示：选择服务器为空", false, false, "");
                return;
            }
            TalkingDataHelper.OnEvent$$String$$Dictionary$2$String$Object("GameStart", null);
            var playerDto = null;
            if (GameDebuger.Debug_PlayerId != 0){
                playerDto = new AccountPlayerDto.ctor();
                playerDto.nickname = GameDebuger.Debug_PlayerId.toString();
                playerDto.id = GameDebuger.Debug_PlayerId;
                playerDto.gameServerId = 0;
            }
            else {
                playerDto = ServerManager.get_Instance().HasPlayerAtServer(this._currentServerInfo.serverId);
            }
            this.Login(this._currentServerInfo, playerDto);
        },
        Login: function (serverInfo, accountPlayerDto){
            if (serverInfo.runState == 3){
            }
            if (this._isLogined == false){
                this._isLogined = true;
                UnityEngine.PlayerPrefs.SetString(GameSetting.get_LastServerPrefsName(), serverInfo.GetServerUID());
                this.HideOtherUI();
                this.get_View().ButtonGroup.SetActive(false);
                ScreenMaskManager.FadeInOut($CreateAnonymousDelegate(this, function (){
                    this.get_View().LogoTexture_UITexture.get_cachedGameObject().SetActive(false);
                    UIHelper.DisposeUITexture(this.get_View().LoadingTexture_UITexture);
                    this.get_View().LoadingTexture_UITexture.set_mainTexture(UnityEngine.Resources.Load$1$$String(UnityEngine.Texture.ctor, "Textures/LoadingBG/loadingBG"));
                    this.get_View().LoadingTexture_UITexture.get_cachedGameObject().SetActive(true);
                    this.get_View().LoadingPanel_Transform.get_gameObject().SetActive(true);
                    this.ShowVersion(false);
                    if (UnityEngine.Object.op_Inequality(this._loginEffect, null)){
                        this._loginEffect.SetActive(false);
                    }
                    ServerManager.get_Instance().SetServerInfo(serverInfo);
                    LoginManager.get_Instance().start(ServerManager.get_Instance().loginAccountDto.token, serverInfo, accountPlayerDto);
                }), 0, 0.3);
            }
        },
        OnSelectionChange: function (name){
            this.UpdateCurrentServerInfo(GameServerInfoManager.GetServerInfoByName(name));
        },
        UpdateCurrentServerInfo: function (serverInfo){
            if (serverInfo != null && serverInfo.dboState == 1){
                this._currentServerInfo = serverInfo;
                UnityEngine.PlayerPrefs.SetString(GameSetting.get_LastServerPrefsName(), serverInfo.GetServerUID());
                ServerManager.get_Instance().SetServerInfo(serverInfo);
                this.get_View().LastLoginInfo_label_UILabel.set_text(ServerNameGetter.GetServerName(this._currentServerInfo));
                this.get_View().LastLoginInfo_state_UISprite.set_spriteName(ServerNameGetter.GetServiceStateSpriteName(this._currentServerInfo));
                var accountPlayerDto = ServerManager.get_Instance().HasPlayerAtServer(this._currentServerInfo.serverId);
                if (accountPlayerDto != null){
                    this.get_View().LastLoginRoleInfo_label_UILabel.set_text(accountPlayerDto.nickname);
                    this.get_View().LastLoginRoleInfo.SetActive(true);
                }
                else {
                    this.get_View().LastLoginRoleInfo_label_UILabel.set_text("");
                    this.get_View().LastLoginRoleInfo.SetActive(false);
                }
            }
            else {
                this.get_View().LastLoginInfo_label_UILabel.set_text("选择服务器");
                this.get_View().LastLoginInfo_state_UISprite.set_spriteName("");
            }
        },
        OnClickLastLoginInfoButton: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("SelectServer", "显示服务器选择框");
            this.OpenServerListModule();
        },
        OpenServerListModule: function (){
            ProxyServerListModule.Open($CreateAnonymousDelegate(this, function (serverInfo, accountPlayerDto){
                this.UpdateCurrentServerInfo(serverInfo);
                this.Login(serverInfo, accountPlayerDto);
            }));
        },
        OnLoginMessage: function (msg){
            this.get_View().LoadingLabel_UILabel.set_text(msg);
        },
        OnLoginProcess: function (percent){
            this.get_View().loadingSlider_UISlider.set_value(percent);
        }
    }
};
JsTypes.push(LoginController);
var AgreementInfo = {
    fullname: "AgreementInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.infoList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AgreementInfo);
var AnnouncementDataManager = {
    fullname: "AnnouncementDataManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            AnnouncementDataManager.instance = new AnnouncementDataManager.ctor();
            AnnouncementDataManager.Type_AnnouncementData = "gonggaoData.txt";
        },
        Instance$$: "AnnouncementDataManager",
        get_Instance: function (){
            return AnnouncementDataManager.instance;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._announcementInfoList = null;
            System.Object.ctor.call(this);
        },
        CheckUpdate: function (){
            var oldVersion = GameStaticConfigManager.get_Instance().GetLocalStaticDataVer("gonggaoData.txt" /* Type_AnnouncementData */);
            GameStaticConfigManager.get_Instance().LoadStaticConfig("gonggaoData.txt" /* Type_AnnouncementData */, $CreateAnonymousDelegate(this, function (str){
                this._announcementInfoList = JsHelper.ToObject(AnnouncementInfoList.ctor, str);
                if (this._announcementInfoList != null){
                    if (this._announcementInfoList.version != oldVersion){
                        ProxyLoginModule.OpenAnnouncement();
                    }
                }
            }), $CreateAnonymousDelegate(this, function (tips){
                TipManager.AddTip(tips, false, false, "");
            }));
        },
        GetAnnouncementInfoList: function (){
            if (this._announcementInfoList != null){
                return this._announcementInfoList.infoList;
            }
            else {
                return null;
            }
        }
    }
};
JsTypes.push(AnnouncementDataManager);
var AnnouncementInfo = {
    fullname: "AnnouncementInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.title = null;
            this.content = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AnnouncementInfo);
var AnnouncementInfoList = {
    fullname: "AnnouncementInfoList",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.version = null;
            this.infoList = new System.Collections.Generic.List$1.ctor(AnnouncementInfo.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AnnouncementInfoList);
var AgreementView = {
    fullname: "AgreementView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            AgreementView.NAME = "AgreementView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseButton_UIButton = null;
            this.LeftArrowSprite_UIButton = null;
            this.RightArrowSprite_UIButton = null;
            this.PageLabel_UILabel = null;
            this.ContentLabel_UILabel = null;
            this.SubmitBtn_UIButton = null;
            this.scrollView_UIScrollView = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseButton_UIButton = root.Find("BaseWindow/CloseBtn").GetComponent$1(UIButton.ctor);
            this.LeftArrowSprite_UIButton = root.Find("BgSprite/PageGroup/LeftArrowSprite").GetComponent$1(UIButton.ctor);
            this.RightArrowSprite_UIButton = root.Find("BgSprite/PageGroup/RightArrowSprite").GetComponent$1(UIButton.ctor);
            this.PageLabel_UILabel = root.Find("BgSprite/PageGroup/PageLabel").GetComponent$1(UILabel.ctor);
            this.ContentLabel_UILabel = root.Find("BgSprite/scrollView/ContentLabel").GetComponent$1(UILabel.ctor);
            this.SubmitBtn_UIButton = root.Find("BgSprite/SubmitBtn").GetComponent$1(UIButton.ctor);
            this.scrollView_UIScrollView = root.Find("BgSprite/scrollView").GetComponent$1(UIScrollView.ctor);
        }
    }
};
JsTypes.push(AgreementView);
var AnnouncementView = {
    fullname: "AnnouncementView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            AnnouncementView.NAME = "AnnouncementView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseButton_UIButton = null;
            this.OkButton_UIButton = null;
            this.Table_UITable = null;
            this.dragRegion_UIEventTrigger = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseButton_UIButton = root.Find("BaseWindow/CloseBtn").GetComponent$1(UIButton.ctor);
            this.OkButton_UIButton = root.Find("BgSprite/OkButton").GetComponent$1(UIButton.ctor);
            this.Table_UITable = root.Find("BgSprite/ContentGroup/Scroll View/Table").GetComponent$1(UITable.ctor);
            this.dragRegion_UIEventTrigger = root.Find("BgSprite/ContentGroup/dragRegion").GetComponent$1(UIEventTrigger.ctor);
        }
    }
};
JsTypes.push(AnnouncementView);
var LoginView = {
    fullname: "LoginView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            LoginView.NAME = "LoginView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.VersionLabel_UILabel = null;
            this.StartPanel_Transform = null;
            this.LoadingPanel_Transform = null;
            this.LoadingTexture_UITexture = null;
            this.StartGameButton_UIButton = null;
            this.LastLoginInfo_UIButton = null;
            this.LastLoginInfo_label_UILabel = null;
            this.LastLoginInfo_state_UISprite = null;
            this.MovieButton_UIButton = null;
            this.loadingSlider_UISlider = null;
            this.LoadingLabel_UILabel = null;
            this.AccountButton_UIButton = null;
            this.AgreementButton_UIButton = null;
            this.NoticeButton_UIButton = null;
            this.ButtonGroup = null;
            this.AccountTipLabel_UILabel = null;
            this.AccountTipGroupWidget = null;
            this.loadingSliderThumb = null;
            this.LastLoginRoleInfo_label_UILabel = null;
            this.LastLoginRoleInfo = null;
            this.LastLoginRoleInfo_UIButton = null;
            this.LogoTexture_UITexture = null;
            this.ShowBtn_UIButton = null;
            this.RestoreBtn_UIButton = null;
            this.ChangeUrlBtn_UIButton = null;
            this.VersionLabel_UIButton = null;
            this.LoadingTips_UILabel = null;
            this.SPLoginButton_UIButton = null;
            this.QRCodeScanBtn_UIButton = null;
            this.BanhaoLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.VersionLabel_UILabel = root.Find("TopRightAnchor/VersionLabel").GetComponent$1(UILabel.ctor);
            this.StartPanel_Transform = root.Find("Content/StartPanel");
            this.LoadingPanel_Transform = root.Find("Content/LoadingPanel");
            this.LoadingTexture_UITexture = root.Find("Content/LoadingTexture").GetComponent$1(UITexture.ctor);
            this.StartGameButton_UIButton = root.Find("Content/StartPanel/StartGameButton").GetComponent$1(UIButton.ctor);
            this.LastLoginInfo_UIButton = root.Find("Content/StartPanel/LastLoginInfo").GetComponent$1(UIButton.ctor);
            this.LastLoginInfo_label_UILabel = root.Find("Content/StartPanel/LastLoginInfo/LastLoginInfo_label").GetComponent$1(UILabel.ctor);
            this.LastLoginInfo_state_UISprite = root.Find("Content/StartPanel/LastLoginInfo/LastLoginInfo_state").GetComponent$1(UISprite.ctor);
            this.MovieButton_UIButton = root.Find("Content/ButtonGroup/MovieButton").GetComponent$1(UIButton.ctor);
            this.loadingSlider_UISlider = root.Find("Content/LoadingPanel/loadingSlider").GetComponent$1(UISlider.ctor);
            this.LoadingLabel_UILabel = root.Find("Content/LoadingPanel/loadingSlider/LoadingLabel").GetComponent$1(UILabel.ctor);
            this.AccountButton_UIButton = root.Find("Content/ButtonGroup/AccountButton").GetComponent$1(UIButton.ctor);
            this.AgreementButton_UIButton = root.Find("Content/ButtonGroup/AgreementButton").GetComponent$1(UIButton.ctor);
            this.NoticeButton_UIButton = root.Find("Content/ButtonGroup/NoticeButton").GetComponent$1(UIButton.ctor);
            this.ButtonGroup = root.Find("Content/ButtonGroup").get_gameObject();
            this.AccountTipLabel_UILabel = root.Find("Content/AccountTipGroup/AccountTipLabel").GetComponent$1(UILabel.ctor);
            this.AccountTipGroupWidget = root.Find("Content/AccountTipGroup").GetComponent$1(UIWidget.ctor);
            this.loadingSliderThumb = root.Find("Content/LoadingPanel/loadingSlider/loadingSliderThumb");
            this.LastLoginRoleInfo_label_UILabel = root.Find("Content/StartPanel/LastLoginRoleInfo/LastLoginRoleInfo_label").GetComponent$1(UILabel.ctor);
            this.LastLoginRoleInfo = root.Find("Content/StartPanel/LastLoginRoleInfo").get_gameObject();
            this.LastLoginRoleInfo_UIButton = root.Find("Content/StartPanel/LastLoginRoleInfo").GetComponent$1(UIButton.ctor);
            this.LogoTexture_UITexture = root.Find("Content/LogoTexture").GetComponent$1(UITexture.ctor);
            this.ShowBtn_UIButton = root.Find("TopRightAnchor/ShowBtn").GetComponent$1(UIButton.ctor);
            this.RestoreBtn_UIButton = root.Find("TopRightAnchor/RestoreBtn").GetComponent$1(UIButton.ctor);
            this.ChangeUrlBtn_UIButton = root.Find("TopRightAnchor/ChangeUrlBtn").GetComponent$1(UIButton.ctor);
            this.VersionLabel_UIButton = root.Find("TopRightAnchor/VersionLabel").GetComponent$1(UIButton.ctor);
            this.LoadingTips_UILabel = root.Find("Content/LoadingPanel/tipBg/tipLbl").GetComponent$1(UILabel.ctor);
            this.SPLoginButton_UIButton = root.Find("Content/ButtonGroup/SPLoginButton").GetComponent$1(UIButton.ctor);
            this.QRCodeScanBtn_UIButton = root.Find("Content/ButtonGroup/QRCodeScanBtn").GetComponent$1(UIButton.ctor);
            this.BanhaoLabel_UILabel = root.Find("TopRightAnchor/BanhaoLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(LoginView);
var ExpandContentTeamItemController = {
    fullname: "ExpandContentTeamItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ExpandContentTeamItem_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, ExpandContentTeamItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (memberInfo){
            if (memberInfo == null)
                this.get_gameObject().SetActive(false);
            else {
                this.get_gameObject().SetActive(true);
                UIHelper.SetPetIcon(this.get_View().Icon_UISprite, memberInfo.get_charactor().texture.toString(), false);
                this.get_View().Icon_UISprite.set_isGrey(false);
                UIHelper.SetOtherIcon(this.get_View().factionIcon_UISprite, System.String.Format$$String$$Object("small_faction_{0}", memberInfo.factionId), false);
                this.get_View().playerLevel_UILabel.set_text(memberInfo.grade.toString());
                this.get_View().playerName_UILabel.set_text(memberInfo.nickname);
                if (memberInfo.memberStatus == 3 /* (int)TeamMemberDto.TeamMemberStatus.Away */)
                    this.get_View().statusSprite_UISprite.set_spriteName("teamStatus_Away");
                else if (memberInfo.memberStatus == 4 /* (int)TeamMemberDto.TeamMemberStatus.Offline */){
                    this.get_View().statusSprite_UISprite.set_spriteName("teamStatus_Offline");
                    this.get_View().Icon_UISprite.set_isGrey(true);
                }
                else
                    this.get_View().statusSprite_UISprite.set_spriteName("");
            }
        },
        InitReactiveEvents: function (){
            this.ExpandContentTeamItem_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().ExpandContentTeamItem_UIButton);
        },
        ClearReactiveEvents: function (){
            this.ExpandContentTeamItem_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ExpandContentTeamItem_UIButtonEvt);
        },
        OnExpandContentTeamItem_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnExpandContentTeamItem_UIButtonClick: function (){
            return this.ExpandContentTeamItem_UIButtonEvt;
        }
    }
};
JsTypes.push(ExpandContentTeamItemController);
var MainUIExpandContentViewController = {
    fullname: "MainUIExpandContentViewController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        cctor: function (){
            MainUIExpandContentViewController.OPERATE_ITEM = "OperateBtnItem";
            MainUIExpandContentViewController.TEAM_ITEM = "ExpandContentTeamItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.operateTeamType = MainUIExpandContentViewController.OperateTeamType.NONE;
            this._expandContentType = MainUIExpandContentViewController.ExpandContentType.nothing;
            this._disposable = new System.Collections.Generic.List$1.ctor$$Int32(System.IDisposable.ctor, 10);
            this._teamItemList = new System.Collections.Generic.List$1.ctor$$Int32(ExpandContentTeamItemController.ctor, 5);
            this._lastOpExpandState = true;
            this._data = null;
            this.operateTeamDic = new System.Collections.Generic.Dictionary$2.ctor(MainUIExpandContentViewController.OperateTeamType.ctor, System.String.ctor);
            this._operateBtnItemList = new System.Collections.Generic.List$1.ctor$$Int32(OperateBtnItemController.ctor, 4);
            this._selectTeamMemberId = -1 /* -1 */;
            this.cancelMatchBtn_UIButtonEvt = null;
            this.joinOrLeaveBtn_UIButtonEvt = null;
            this.callOrAwayBtn_UIButtonEvt = null;
            this.teamMsgBtn_UIButtonEvt = null;
            this.taskselectEffect_UIButtonEvt = null;
            this.teamselectEffect_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, MainUIExpandContentView.ctor);
        },
        AfterInitView: function (){
            this.get_View().TabBtn_Task_UIToggle.set_value(true);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().Button_ExpandPanel_UIToggle.onChange, $CreateDelegate(this, this.OnClickToggleExpendContent));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().TabBtn_Team_UIToggle.onChange, $CreateDelegate(this, this.OnTeamToggleValueChange));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().TabBtn_Task_UIToggle.onChange, $CreateDelegate(this, this.OnTaskToggleValueChange));
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.teamselectEffect_UIButtonEvt, $CreateAnonymousDelegate(this, function (_){
                this.OnClickTeamBtn();
            }));
            this._disposable.Add(d);
        },
        OnDispose: function (){
            this._teamItemList.Clear();
            this._disposable.ForEach($CreateAnonymousDelegate(this, function (d){
                d.Dispose();
            }));
            this._disposable.Clear();
        },
        RemoveCustomEvent: function (){
        },
        UpdateView$$UIMode: function (mode){
            var state = UIMode.GAME == mode && this._lastOpExpandState;
            this.UpdateExpandContentState(state);
        },
        UpdateView$$ITeamData: function (teamData){
            this._data = teamData != null ? teamData.get_ExpandTeamViewData() : null;
            if (this._data == null || !this._data.HasTeam()){
                this.UpdataHasNoTeam();
            }
            else {
                this.UpdateTeamItemView(this._data);
                this.UpdateTeamGroupBtnState(this._data.HasTeam());
            }
        },
        OnClickToggleExpendContent: function (){
            this._lastOpExpandState = this.get_View().Button_ExpandPanel_UIToggle.get_value();
            this.UpdateExpandContentState(this._lastOpExpandState);
        },
        UpdateExpandContentState: function (isOpen){
            this.get_View().buttonBg_UISprite.set_flip(isOpen ? 1 : 0);
            this.get_View().Button_ExpandPanel_UIToggle.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(isOpen ? -250 /* -250 */ : -39 /* -39 */, 0, 0));
            this.ToggleContentRoot(isOpen);
        },
        ToggleContentRoot: function (isOpen){
            this.get_View().ContentRoot_TweenPosition.Play$$Boolean(!isOpen);
            this.get_View().ContentRoot_TweenAlpha.Play$$Boolean(isOpen);
            this.ToggleMissionEffect(isOpen);
        },
        ToggleMissionEffect: function (isOpen){
        },
        OnClickTaskBtn: function (){
        },
        OnClickTeamBtn: function (){
            ProxyTeamModule.OpenMainView(TeamMainViewTab.Team);
        },
        OnTeamToggleValueChange: function (){
            var isActive = this.get_View().TabBtn_Team_UIToggle.get_value();
            this.get_View().TabContent_Team.SetActive(isActive);
            this._view.teamselectEffect_BoxCollider.set_enabled(isActive);
            this.get_View().teamContentBg_UISprite.get_cachedGameObject().SetActive(isActive);
            this.get_View().teamBtnGroup.SetActive(isActive);
            if (!isActive)
                return;
            this.get_View().itemScrollView_UIScrollView.ResetPosition();
        },
        OnTaskToggleValueChange: function (){
            var isActive = this.get_View().TabBtn_Task_UIToggle.get_value();
            this.get_View().TabContent_Task.SetActive(isActive);
            this._view.taskselectEffect_BoxCollider.set_enabled(isActive);
            if (!isActive)
                return;
            this.get_View().itemScrollView_UIScrollView.ResetPosition();
        },
        OnSelectTeamItem: function (index){
            if (this._data == null)
                return;
            this.get_View().directSprite_UISprite.get_gameObject().SetActive(true);
            var OnclickMember = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberDto.ctor, this._data.get_TeamMembers(), $CreateAnonymousDelegate(this, function (m){
                return m.index == index;
            }));
            this._selectTeamMemberId = OnclickMember.id;
            this.operateTeamDic.Clear();
            if (this._data.IsLeader()){
                if (OnclickMember.id != this._data.get_LeaderID()){
                    if (OnclickMember.memberStatus == 3 /* (int)TeamMemberDto.TeamMemberStatus.Away */){
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.SUMMON, "召唤队员");
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.CHECKINFO, "查看信息");
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.PLEASELEAVE, "请离队伍");
                    }
                    else if (OnclickMember.memberStatus == 4 /* (int)TeamMemberDto.TeamMemberStatus.Offline */){
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.CHECKINFO, "查看信息");
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.PLEASELEAVE, "请离队伍");
                    }
                    else {
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.CHECKINFO, "查看信息");
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.LEADBYOTHER, "移交队长");
                        this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.PLEASELEAVE, "请离队伍");
                    }
                }
                else {
                    this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.LEAVETEAM, "退出队伍");
                }
            }
            else if (ModelManager.get_IPlayer().GetPlayerId() == OnclickMember.id){
                if (OnclickMember.memberStatus == 3 /* (int)TeamMemberDto.TeamMemberStatus.Away */){
                    this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.BACKTEAM, "回归队伍");
                }
                else {
                    this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.LEAVELITTLE, "暂时离队");
                }
                this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.LEAVETEAM, "退出队伍");
            }
            else {
                this.operateTeamDic.Add(MainUIExpandContentViewController.OperateTeamType.CHECKINFO, "查看信息");
            }
            var typesList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(MainUIExpandContentViewController.OperateTeamType.ctor, this.operateTeamDic.get_Keys());
            if (this._operateBtnItemList.get_Count() < this.operateTeamDic.get_Count()){
                for (var i = this._operateBtnItemList.get_Count(); i < this.operateTeamDic.get_Count(); i++){
                    var con = this.AddChild$2(OperateBtnItemController.ctor, OperateBtnItem.ctor, this.get_View().operateBtnGrid_UIGrid.get_gameObject(), "OperateBtnItem" /* OPERATE_ITEM */, "");
                    this._operateBtnItemList.Add(con);
                }
            }
            else {
                for (var i = this.operateTeamDic.get_Count(); i < this._operateBtnItemList.get_Count(); i++){
                    this._operateBtnItemList.get_Item$$Int32(i).get_gameObject().SetActive(false);
                }
            }
            for (var i = 0; i < this.operateTeamDic.get_Count(); i++){
                this._operateBtnItemList.get_Item$$Int32(i).Open(this._data.GetMainRoleTeamMemberDto(), OnclickMember, $CreateDelegate(this, this.OnClickOperateItemEvent));
                this._operateBtnItemList.get_Item$$Int32(i).SetTypeItem(typesList.get_Item$$Int32(i));
                this._operateBtnItemList.get_Item$$Int32(i).SetLabel(this.operateTeamDic.get_Item$$TKey(typesList.get_Item$$Int32(i)));
                this._operateBtnItemList.get_Item$$Int32(i).get_gameObject().SetActive(true);
            }
            var v3 = this.get_View().directSprite_UISprite.get_transform().get_localPosition();
            v3 = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(v3.x, 0 - index * 64, v3.z);
            this.get_View().directSprite_UISprite.get_transform().set_localPosition(v3);
            this.get_View().itemOperateBtnBg_UISprite.set_height(75 + (this.operateTeamDic.get_Count() - 1) * 63);
            this.get_View().operateBtnGrid_UIGrid.Reposition();
        },
        UpdataHasNoTeam: function (){
            this.get_View().teamItemGrid_UIGrid.get_gameObject().SetActive(false);
            this.UpdateTeamGroupBtnState(false);
        },
        UpdateTeamItemView: function (data){
            this.get_View().teamItemGrid_UIGrid.get_gameObject().SetActive(true);
            var teamMemberInfo = data.get_TeamMembers();
            var cnt = data.GetMemberCount();
            if (this._teamItemList.get_Count() < cnt){
                for (var i = this._teamItemList.get_Count(); i < cnt; ++i){
                    var ctrl = this.AddCachedChild$2$$GameObject$$String$$String(ExpandContentTeamItemController.ctor, ExpandContentTeamItem.ctor, this.get_View().teamItemGrid_UIGrid.get_gameObject(), "ExpandContentTeamItem" /* ExpandContentTeamItem.NAME */, "");
                    var idx = i;
                    var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, ctrl.get_OnExpandContentTeamItem_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                        this.OnSelectTeamItem(idx);
                    }));
                    this._disposable.Add(d);
                    this._teamItemList.Add(ctrl);
                }
            }
            CollectionExtension.ForEachI$1(ExpandContentTeamItemController.ctor, this._teamItemList, $CreateAnonymousDelegate(this, function (item, i){
                var dto = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberDto.ctor, teamMemberInfo, $CreateAnonymousDelegate(this, function (m){
                    return m.index == i;
                }));
                item.UpdateView(dto);
            }));
            this.get_View().teamItemGrid_UIGrid.set_repositionNow(true);
        },
        UpdateTeamGroupBtnState: function (hasteam){
            this.get_View().directSprite_UISprite.get_gameObject().SetActive(false);
            if (hasteam){
                this.get_View().teamContentBg_UISprite.set_height(340);
                this.get_View().teamContentBg_UISprite.ResizeCollider();
                this.get_View().callOrAwayBtn_UIButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-54 /* -54f */, -215 /* -215f */, 0));
                this.get_View().joinOrLeaveBtn_UIButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(54, -215 /* -215f */, 0));
                this.get_View().callOrAwayBtn_UIButton.get_gameObject().SetActive(false);
                this.get_View().joinOrLeaveBtn_UIButton.get_gameObject().SetActive(false);
                this.get_View().cancelMatchBtn_UIButton.get_gameObject().SetActive(false);
                this.get_View().contentBgLbl_UILabel.get_cachedGameObject().SetActive(false);
            }
            else {
                this.get_View().callOrAwayBtn_UIButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-54 /* -54f */, 0, 0));
                this.get_View().joinOrLeaveBtn_UIButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(54, 0, 0));
                this.get_View().callOrAwayBtnLbl_UILabel.set_text("创建");
                this.get_View().joinOrLeaveBtnLbl_UILabel.set_text("加入");
                this.get_View().contentBgLbl_UILabel.get_cachedGameObject().SetActive(true);
                this._view.teamContentBg_UISprite.set_height(125);
                this.get_View().contentBgLbl_UILabel.set_text("点击创建或加入队伍");
                this.get_View().callOrAwayBtn_UIButton.get_gameObject().SetActive(true);
                this.get_View().joinOrLeaveBtn_UIButton.get_gameObject().SetActive(true);
                this.get_View().cancelMatchBtn_UIButton.get_gameObject().SetActive(false);
            }
            this.get_View().teamContentBg_UISprite.ResizeCollider();
        },
        OnClickOperateItemEvent: function (type, playerDto, onClickDto){
            GameDebuger.Log(type + "操作ID" + playerDto.id + "被点击ID" + onClickDto.id, null);
            switch (type){
                case MainUIExpandContentViewController.OperateTeamType.LEAVETEAM:
                    TeamDataMgr.TeamNetMsg.LeaveTeam();
                    break;
                case MainUIExpandContentViewController.OperateTeamType.LEAVELITTLE:
                    TeamDataMgr.TeamNetMsg.AwayTeam();
                    break;
                case MainUIExpandContentViewController.OperateTeamType.BACKTEAM:
                    TeamDataMgr.TeamNetMsg.BackTeam();
                    break;
                case MainUIExpandContentViewController.OperateTeamType.LEADBYOTHER:
                    TeamDataMgr.TeamNetMsg.AssignLeader(onClickDto);
                    break;
                case MainUIExpandContentViewController.OperateTeamType.CHECKINFO:
                    ProxyMainUIModule.OpenPlayerInfoView$$Int64$$Vector3(onClickDto.id, UnityEngine.Vector3.get_zero());
                    break;
                case MainUIExpandContentViewController.OperateTeamType.PLEASELEAVE:
                    TeamDataMgr.TeamNetMsg.KickOutMember$$TeamMemberDto(onClickDto);
                    break;
                case MainUIExpandContentViewController.OperateTeamType.SUMMON:
                    TeamDataMgr.TeamNetMsg.SummonAwayTeamMember(onClickDto.id);
                    break;
                default:
                    break;
            }
            this.get_View().directSprite_UISprite.get_gameObject().SetActive(false);
        },
        InitReactiveEvents: function (){
            this.cancelMatchBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().cancelMatchBtn_UIButton);
            this.joinOrLeaveBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().joinOrLeaveBtn_UIButton);
            this.callOrAwayBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().callOrAwayBtn_UIButton);
            this.teamMsgBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().teamMsgBtn_UIButton);
            this.taskselectEffect_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().taskselectEffect_UIButton);
            this.teamselectEffect_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().teamselectEffect_UIButton);
        },
        ClearReactiveEvents: function (){
            this.cancelMatchBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.cancelMatchBtn_UIButtonEvt);
            this.joinOrLeaveBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.joinOrLeaveBtn_UIButtonEvt);
            this.callOrAwayBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.callOrAwayBtn_UIButtonEvt);
            this.teamMsgBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.teamMsgBtn_UIButtonEvt);
            this.taskselectEffect_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.taskselectEffect_UIButtonEvt);
            this.teamselectEffect_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.teamselectEffect_UIButtonEvt);
        },
        OncancelMatchBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OncancelMatchBtn_UIButtonClick: function (){
            return this.cancelMatchBtn_UIButtonEvt;
        },
        OnjoinOrLeaveBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnjoinOrLeaveBtn_UIButtonClick: function (){
            return this.joinOrLeaveBtn_UIButtonEvt;
        },
        OncallOrAwayBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OncallOrAwayBtn_UIButtonClick: function (){
            return this.callOrAwayBtn_UIButtonEvt;
        },
        OnteamMsgBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnteamMsgBtn_UIButtonClick: function (){
            return this.teamMsgBtn_UIButtonEvt;
        },
        OntaskselectEffect_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OntaskselectEffect_UIButtonClick: function (){
            return this.taskselectEffect_UIButtonEvt;
        },
        OnteamselectEffect_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnteamselectEffect_UIButtonClick: function (){
            return this.teamselectEffect_UIButtonEvt;
        }
    }
};
JsTypes.push(MainUIExpandContentViewController);
var MainUIDataMgr = {
    fullname: "MainUIDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            MainUIDataMgr._ins = null;
            MainUIDataMgr.stream = new UniRx.Subject$1.ctor(IMainUIData.ctor);
        },
        OnCreateTeamBtnClick: function (){
            TeamDataMgr.TeamNetMsg.CreateTeam(function (){
                ProxyTeamModule.OpenMainView(TeamMainViewTab.Team);
            });
        },
        OnEasyCreateTeamBtnClick: function (){
        },
        Instance$$: "MainUIDataMgr",
        get_Instance: function (){
            if (MainUIDataMgr._ins == null){
                MainUIDataMgr._ins = new MainUIDataMgr.ctor();
                MainUIDataMgr._ins.Init();
            }
            return MainUIDataMgr._ins;
        },
        Stream$$: "UniRx.IObservableExpand`1[[IMainUIData]]",
        get_Stream: function (){
            return MainUIDataMgr.stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = null;
            this._joyDisposable = null;
            System.Object.ctor.call(this);
        },
        Init: function (){
            this._data = new MainUIDataMgr.MainUIData.ctor();
            this._joyDisposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IJoystickModuleData.ctor, JoystickModule.get_Stream(), $CreateAnonymousDelegate(this, function (info){
                this._data.selectedPlayer = info.get_SelectedPlayerDto();
                MainUIDataMgr.stream.OnNext(this._data);
            }));
        },
        Dispose: function (){
            this._joyDisposable.Dispose();
            this._data.Dispose();
            this._data = null;
        }
    }
};
JsTypes.push(MainUIDataMgr);
var OperateBtnItemController = {
    fullname: "OperateBtnItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._itemType = MainUIExpandContentViewController.OperateTeamType.NONE;
            this._test = "";
            this.playerDto = null;
            this.onClickDto = null;
            this._onSelectCallBack = null;
            MonolessViewController$1.ctor.call(this, OperateBtnItem.ctor);
        },
        Open: function (playerDto, onClickDto, callBack){
            this.playerDto = playerDto;
            this.onClickDto = onClickDto;
            this._onSelectCallBack = callBack;
        },
        InitView: function (){
            if (null == this._view){
                MonolessAutoCacher.commonPrototype.InitView.call(this);
            }
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.OperateBtnItem_UIButton.onClick, $CreateDelegate(this, this.OperateBtnItemEvent));
        },
        OperateBtnItemEvent: function (){
            if (this._onSelectCallBack != null)
                this._onSelectCallBack(this._itemType, this.playerDto, this.onClickDto);
        },
        SetLabel: function (test){
            this._test = test;
            this._view.Label_UILabel.set_text(this._test);
            this._view.Label_UILabel.GetComponent$1(ButtonLabelSpacingAdjust.ctor).ReAdjust();
        },
        SetTypeItem: function (itemType){
            this._itemType = itemType;
        }
    }
};
JsTypes.push(OperateBtnItemController);
var IMainUIData = {
    fullname: "IMainUIData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMainUIData);
var CharacterPropertyController = {
    fullname: "CharacterPropertyController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isPlayer = false;
            this._buffIconList = null;
            this.onIconBtnClickEvt = null;
            MonolessViewController$1.ctor.call(this, CharacterPropertyView.ctor);
        },
        OnIconBtnClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnIconBtnClick: function (){
            return this.onIconBtnClickEvt;
        },
        InitReactiveEvents: function (){
            MonolessViewController$1.commonPrototype.InitReactiveEvents.call(this);
            this.onIconBtnClickEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().iconBtn);
        },
        ClearReactiveEvents: function (){
            this.onIconBtnClickEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.onIconBtnClickEvt);
            MonolessViewController$1.commonPrototype.ClearReactiveEvents.call(this);
        },
        InitItem: function (){
            this.get_View().sp_foreground_UISprite.set_spriteName(this._isPlayer ? "hero-yellow-line" : "pet-green-line");
            this.get_View().PlayerPropertyInfo.SetActive(this._isPlayer);
            if (this._isPlayer){
                EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PlayerPropertyInfo_UIButton.onClick, $CreateDelegate(this, this.OnClickBuffBtn));
                this.UpdateBuffList();
                GameDebuger.TODO("GameEventCenter.AddListener(GameEvent.PlayerBuff_OnPlayerBuffUpdate, UpdateBuffList);");
            }
            else
                this.get_View().mainUIBuffIcon.SetActive(false);
        },
        ChangeMode: function (mode){
            if (mode == UIMode.BATTLE){
                this.get_gameObject().SetActive(false);
            }
            else {
                this.get_gameObject().SetActive(true);
            }
        },
        OnDispose: function (){
            MonolessAutoCacher.commonPrototype.OnDispose.call(this);
            if (this._isPlayer)
                GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.PlayerBuff_OnPlayerBuffUpdate, UpdateBuffList);");
        },
        UpdateBuffList: function (){
            if (this._buffIconList == null){
                this._buffIconList = new System.Collections.Generic.List$1.ctor$$Int32(UISprite.ctor, 3);
                for (var i = 0; i < 3; ++i){
                    GameDebuger.TODO(" GameObject item = i==0?View.mainUIBuffIcon:AddChild(View.buffGrid.gameObject,View.mainUIBuffIcon);\r\n\t\t\t\tUISprite icon = item.GetComponent<UISprite>();\r\n\t\t\t\tUIEventTrigger btn = item.GetComponent<UIEventTrigger>();\r\n\t\t\t\tEventDelegate.Set(btn.onClick,OnClickBuffBtn);\r\n\t\t\t\t_buffIconList.Add(icon);\r\n\t\t\t\titem.SetActive(false);");
                }
            }
            GameDebuger.TODO("List<ActiveStateInfo> buffList= ModelManager.PlayerBuff.GetActiveBuffList();\r\n        if(buffList != null){\r\n            for(int i=0;i<_buffIconList.Count;++i){\r\n                if(i<buffList.Count){\r\n                    if (buffList[i].stateId == StateBar.MYTH_LAND_ANTI_MONSTER\r\n                        || buffList[i].stateId == StateBar.MYTH_LAND_EXP_UP\r\n                        || buffList[i].stateId == StateBar.MYTH_LAND_POWER_UP) {\r\n                        UIHelper.SetItemIcon(_buffIconList[i], (ModelManager.PlayerBuff.dreamlandPropsIds[buffList[i].stateId - StateBar.MYTH_LAND_ANTI_MONSTER]).ToString());\r\n                    } else if (buffList[i].stateId == StateBar.SHIPMENT_BUFF) {\r\n                        UIHelper.SetPetIcon(_buffIconList[i], EscortBuffInfo.iconName);\r\n                    }\r\n                          //else if(buffList[i].stateId == StateBar.WORLD_GHOST_BUFF)\r\n           //               {\r\n           //                   //世界Boss附魔符\r\n           //                   string tId = DataCache.GetStaticConfigValues(AppStaticConfigs.WORLD_GHOST_PROP_ID, \'10097\');\r\n           //                   string iconName = DataCache.getDtoByCls<GeneralItem>(int.Parse(tId)).icon;\r\n           //                   UIHelper.SetItemIcon(_buffIconList[i], iconName);\r\n           //               }\r\n                          else {\r\n                        UIHelper.SetSkillIcon(_buffIconList[i], buffList[i].stateId.ToString());\r\n                    }\r\n                    _buffIconList[i].cachedGameObject.SetActive(true);\r\n                    _buffIconList[i].isGrey = !buffList[i].active;\r\n                }\r\n                else\r\n                    _buffIconList[i].cachedGameObject.SetActive(false);\r\n            }\r\n\t\t}");
            this.get_View().buffGrid.set_repositionNow(true);
        },
        OnClickBuffBtn: function (){
            if (ModelManager.get_Player().IsPlayerBandMode(true))
                return;
            ProxyMainUIModule.OpenBuffTipsView();
        },
        RegistCustomEvent: function (){
            MonolessAutoCacher.commonPrototype.RegistCustomEvent.call(this);
        },
        SetupStatusBarFunc: function (callBack){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PlayerPropertyInfo_UIButton.onClick, callBack);
        },
        RemoveStatusBarFunc: function (callBack){
            if (EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().PlayerPropertyInfo_UIButton.onClick, callBack)){
                if (this._isPlayer)
                    EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PlayerPropertyInfo_UIButton.onClick, $CreateDelegate(this, this.OnClickBuffBtn));
            }
        },
        SetIcon$$Int32: function (iconId){
            UIHelper.SetPetIcon(this.get_View().icon, iconId.toString(), false);
        },
        SetIcon$$String: function (icon){
            UIHelper.SetPetIcon(this.get_View().icon, icon, false);
        },
        SetLvLbl: function (lv){
            this.get_View().lvLbl.set_text(System.String.Format$$String$$Object("[b]{0}[-]", lv));
        },
        SetHpSlider: function (hp, maxHp){
            if (maxHp == 0){
                this.get_View().hpSlider.set_value(0);
            }
            else {
                this.get_View().hpSlider.set_value(hp / maxHp);
            }
        },
        SetMpSlider: function (mp, maxMp){
            if (maxMp == 0){
                this.get_View().mpSlider.set_value(0);
            }
            else {
                this.get_View().mpSlider.set_value(mp / maxMp);
            }
        },
        SetSpSlider: function (sp, maxSp){
            if (maxSp == 0){
                this.get_View().spSlider.set_value(0);
            }
            else {
                this.get_View().spSlider.set_value(sp / maxSp);
            }
        },
        SetEnable: function (enable){
            this.get_View().lvLbl.set_text("");
            this.get_View().hpSlider.set_value(0);
            this.get_View().mpSlider.set_value(0);
            this.get_View().spSlider.set_value(0);
        },
        UpdateView: function (isPlayer, data){
            this._isPlayer = isPlayer;
            this.InitItem();
        },
        OnDestroy: function (){
            GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.PlayerBuff_OnPlayerBuffUpdate, UpdateBuffList);");
        },
        UpdateWithPropertyInfo: function (playerInfo){
            if (null == playerInfo)
                return;
            var tCharactorDto = playerInfo.playerDto;
            if (null == tCharactorDto || null == tCharactorDto.get_charactor())
                return;
            if (playerInfo != null){
                this.SetIcon$$Int32(tCharactorDto.get_charactor().texture);
                GameDebuger.TODO("SetHpSlider(tCharactorDto.properties.hp, tCharactorDto.properties.maxHp);\r\n            SetMpSlider(tCharactorDto.properties.mp, tCharactorDto.properties.maxMp);");
                this.SetSpSlider(playerInfo.sp, DataCache.GetStaticConfigValue(1014 /* AppStaticConfigs.MAX_RAGE_LIMIT */, 150));
            }
        }
    }
};
JsTypes.push(CharacterPropertyController);
var CharacterPropertyView = {
    fullname: "CharacterPropertyView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            CharacterPropertyView.NAME = "CharacterPropertyView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.icon = null;
            this.lvLbl = null;
            this.hpSlider = null;
            this.mpSlider = null;
            this.spSlider = null;
            this.buffGrid = null;
            this.iconBtn = null;
            this.sp_foreground_UISprite = null;
            this.PlayerPropertyInfo_UIButton = null;
            this.mainUIBuffIcon = null;
            this.PlayerPropertyInfo = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.icon = root.Find("PlayerIconBg/PlayerIcon").GetComponent$1(UISprite.ctor);
            this.lvLbl = root.Find("PlayerIconBg/Label").GetComponent$1(UILabel.ctor);
            this.hpSlider = root.Find("PlayerPropertyInfo/HpSlider").GetComponent$1(UISlider.ctor);
            this.mpSlider = root.Find("PlayerPropertyInfo/MpSlider").GetComponent$1(UISlider.ctor);
            this.spSlider = root.Find("PlayerPropertyInfo/SpSlider").GetComponent$1(UISlider.ctor);
            this.buffGrid = root.Find("PlayerPropertyInfo/BuffGroup").GetComponent$1(UIGrid.ctor);
            this.iconBtn = root.Find("PlayerIconBg").GetComponent$1(UIButton.ctor);
            this.sp_foreground_UISprite = root.Find("PlayerPropertyInfo/SpSlider/foreground").GetComponent$1(UISprite.ctor);
            this.PlayerPropertyInfo_UIButton = root.Find("PlayerPropertyInfo").GetComponent$1(UIButton.ctor);
            this.mainUIBuffIcon = root.Find("PlayerPropertyInfo/BuffGroup/mainUIBuffIcon").get_gameObject();
            this.PlayerPropertyInfo = root.Find("PlayerPropertyInfo").get_gameObject();
        }
    }
};
JsTypes.push(CharacterPropertyView);
var ModelHeadHUDView = {
    fullname: "ModelHeadHUDView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ModelHeadHUDView.NAME = "ModelHeadHUDView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.runFlagSpriteAnimation = null;
            this.fightFlagSpriteAnimation = null;
            this.teamFlagSpriteAnimation = null;
            this.missionTypeSprite = null;
            this.teamCount_UILabel = null;
            this.teamInfo_UISprite = null;
            this.escortFlag_UISprite = null;
            this.follower = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.runFlagSpriteAnimation = root.Find("runFlag").GetComponent$1(UISpriteAnimation.ctor);
            this.fightFlagSpriteAnimation = root.Find("fightFlag").GetComponent$1(UISpriteAnimation.ctor);
            this.teamFlagSpriteAnimation = root.Find("teamFlag").GetComponent$1(UISpriteAnimation.ctor);
            this.missionTypeSprite = root.Find("missionType").GetComponent$1(UISprite.ctor);
            this.teamCount_UILabel = root.Find("teamInfo/teamCount").GetComponent$1(UILabel.ctor);
            this.teamInfo_UISprite = root.Find("teamInfo").GetComponent$1(UISprite.ctor);
            this.escortFlag_UISprite = root.Find("escortFlag").GetComponent$1(UISprite.ctor);
            this.follower = root.GetComponent$1(UIFollowTarget.ctor);
        }
    }
};
JsTypes.push(ModelHeadHUDView);
var ModelTitleHUDView = {
    fullname: "ModelTitleHUDView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ModelTitleHUDView.NAME = "ModelTitleHUDView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.nameLbl = null;
            this.follower = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.nameLbl = root.Find("nameLbl").GetComponent$1(UILabelHUD.ctor);
            this.follower = root.GetComponent$1(UIFollowTarget.ctor);
        }
    }
};
JsTypes.push(ModelTitleHUDView);
var PlayerInfoView = {
    fullname: "PlayerInfoView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            PlayerInfoView.NAME = "PlayerInfoView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Bg = null;
            this.IdLbl_UILabel = null;
            this.PositionLbl_UILabel = null;
            this.VipSprite_UISprite = null;
            this.ButtonGrid = null;
            this.AddFriendBtn = null;
            this.BeginChatBtn = null;
            this.InviteTeamBtn = null;
            this.GiveBtn = null;
            this.PKBtn = null;
            this.VisitHomeBtn = null;
            this.InviteTeamLbl = null;
            this.FactionIcon_UISprite = null;
            this.AddFriendLbl = null;
            this.NameLbl_UILabel = null;
            this.GuildBtn = null;
            this.GuildBtnLabel_UILabel = null;
            this.WatchBattleBtn_UIButton = null;
            this.GuildNameLbl_UILabel = null;
            this.Icon = null;
            this.LvLbl_UILabel = null;
            this.FactionNameLbl_UILabel = null;
            this.AchievemnetBtn = null;
            this.ReportBtn_UIButton = null;
            this.CheckZoneBtn_UIButton = null;
            this.uiPanel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.Bg = root.Find("Content").GetComponent$1(UISprite.ctor);
            this.IdLbl_UILabel = root.Find("Content/Info/IdLbl").GetComponent$1(UILabel.ctor);
            this.PositionLbl_UILabel = root.Find("Content/Info/PositionLbl").GetComponent$1(UILabel.ctor);
            this.VipSprite_UISprite = root.Find("Content/Info/VipSprite").GetComponent$1(UISprite.ctor);
            this.ButtonGrid = root.Find("Content/ButtonGrid").GetComponent$1(UIGrid.ctor);
            this.AddFriendBtn = root.Find("Content/ButtonGrid/AddFriendBtn").GetComponent$1(UIButton.ctor);
            this.BeginChatBtn = root.Find("Content/ButtonGrid/BeginChatBtn").GetComponent$1(UIButton.ctor);
            this.InviteTeamBtn = root.Find("Content/ButtonGrid/InviteTeamBtn").GetComponent$1(UIButton.ctor);
            this.GiveBtn = root.Find("Content/ButtonGrid/GiveBtn").GetComponent$1(UIButton.ctor);
            this.PKBtn = root.Find("Content/ButtonGrid/PKBtn").GetComponent$1(UIButton.ctor);
            this.VisitHomeBtn = root.Find("Content/ButtonGrid/VisitHomeBtn").GetComponent$1(UIButton.ctor);
            this.InviteTeamLbl = root.Find("Content/ButtonGrid/InviteTeamBtn/Label").GetComponent$1(UILabel.ctor);
            this.FactionIcon_UISprite = root.Find("Content/Info/FactionIcon").GetComponent$1(UISprite.ctor);
            this.AddFriendLbl = root.Find("Content/ButtonGrid/AddFriendBtn/Label").GetComponent$1(UILabel.ctor);
            this.NameLbl_UILabel = root.Find("Content/Info/NameLbl").GetComponent$1(UILabel.ctor);
            this.GuildBtn = root.Find("Content/ButtonGrid/GuildBtn").GetComponent$1(UIButton.ctor);
            this.GuildBtnLabel_UILabel = root.Find("Content/ButtonGrid/GuildBtn/GuildBtnLabel").GetComponent$1(UILabel.ctor);
            this.WatchBattleBtn_UIButton = root.Find("Content/ButtonGrid/WatchBattleBtn").GetComponent$1(UIButton.ctor);
            this.GuildNameLbl_UILabel = root.Find("Content/Info/GuildNameLbl").GetComponent$1(UILabel.ctor);
            this.Icon = root.Find("Content/Info/IconBg/Sprite").GetComponent$1(UISprite.ctor);
            this.LvLbl_UILabel = root.Find("Content/Info/IconBg/LvLbl").GetComponent$1(UILabel.ctor);
            this.FactionNameLbl_UILabel = root.Find("Content/Info/FactionIcon/FactionNameLbl").GetComponent$1(UILabel.ctor);
            this.AchievemnetBtn = root.Find("Content/ButtonGrid/AchievemnetBtn").GetComponent$1(UIButton.ctor);
            this.ReportBtn_UIButton = root.Find("Content/ButtonGrid/ReportBtn").GetComponent$1(UIButton.ctor);
            this.CheckZoneBtn_UIButton = root.Find("Content/ButtonGrid/CheckZoneBtn").GetComponent$1(UIButton.ctor);
            this.uiPanel = root.GetComponent$1(UIPanel.ctor);
        }
    }
};
JsTypes.push(PlayerInfoView);
var PlayerInfoViewController = {
    fullname: "PlayerInfoViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._playerDto = null;
            this.isStrange = true;
            MonoViewController$1.ctor.call(this, PlayerInfoView.ctor);
        },
        UpdateView: function (playerDto){
            this._playerDto = playerDto;
            this.get_View().NameLbl_UILabel.set_text(AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object("{0}", this._playerDto.name), "FFF9E3" /* ColorConstantV3.Color_White_Str */));
            UIHelper.SetPetIcon(this.get_View().Icon, System.String.Format$$String$$Object("large_{0}", this._playerDto.get_charactor().texture), false);
            this.get_View().LvLbl_UILabel.set_text(AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object("[b]{0}[-]", this._playerDto.grade), "FFF9E3" /* ColorConstantV3.Color_White_Str */));
            this.get_View().FactionIcon_UISprite.set_spriteName(System.String.Format$$String$$Object("factionIcon_{0}", this._playerDto.factionId));
            UIHelper.SetOtherIcon(this.get_View().FactionIcon_UISprite, "small_faction_" + this._playerDto.factionId, false);
            GameDebuger.TODO("View.VipSprite_UISprite.isGrey = !_playerDto.vip;");
            this.get_View().IdLbl_UILabel.set_text(AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object("ID：{0}", this._playerDto.id), "FFF9E3" /* ColorConstantV3.Color_White_Str */));
            GameDebuger.TODO("if (_playerDto.guildId != 0 && string.IsNullOrEmpty(_playerDto.guildName))\r\n        {\r\n            ServiceRequestAction.requestServer(GuildService.query(_playerDto.guildId), \", (e) =>\r\n                {\r\n                    if (View == null)\r\n                        return;\r\n                    GuildBaseDto dto = e as GuildBaseDto;\r\n                    if (dto != null)\r\n                    {\r\n                        View.GuildNameLbl_UILabel.text = string.Format(\'帮派：{0}\', dto.name).WrapColor(ColorConstantV3.Color_White_Str);\r\n                    }\r\n                });\r\n        }\r\n        else\r\n            View.GuildNameLbl_UILabel.text = string.Format(\'帮派：{0}\', _playerDto.guildName).WrapColor(ColorConstantV3.Color_White_Str);if (!ModelManager.Friend.IsMyFriend(_playerDto.id))\r\n        {\r\n            View.PositionLbl_UILabel.text = \'位置：仅好友可见\'.WrapColor(ColorConstantV3.Color_White_Str);\r\n        }\r\n        else if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_LBS, false) && !_playerDto.closedLocation)\r\n        {\r\n            if (!string.IsNullOrEmpty(_playerDto.locationInfo))\r\n                View.PositionLbl_UILabel.text = string.Format(\'位置：{0}\', _playerDto.locationInfo).WrapColor(ColorConstantV3.Color_White_Str);\r\n            else\r\n                View.PositionLbl_UILabel.text = \'位置：未知\'.WrapColor(ColorConstantV3.Color_White_Str);\r\n        }\r\n        else");
            this.get_View().PositionLbl_UILabel.set_text(AppStringHelper.WrapColor$$String$$String("位置：未分享", "FFF9E3" /* ColorConstantV3.Color_White_Str */));
            if (TeamDataMgr.get_Instance().HasTeam()){
                if (this._playerDto.teamStatus == 0 /* (int)TeamMemberDto.TeamMemberStatus.NoTeam */){
                    this.get_View().InviteTeamLbl.set_text("邀请入队");
                }
                else {
                    this.get_View().InviteTeamBtn.get_gameObject().SetActive(false);
                }
            }
            else {
                if (this._playerDto.teamStatus != 0 /* (int)TeamMemberDto.TeamMemberStatus.NoTeam */){
                    this.get_View().InviteTeamLbl.set_text("申请入队");
                }
                else if (this._playerDto.teamStatus == 0 /* (int)TeamMemberDto.TeamMemberStatus.NoTeam */)
                    this.get_View().InviteTeamLbl.set_text("邀请入队");
            }
            this.get_View().FactionNameLbl_UILabel.set_text(System.String.Empty);
            GameDebuger.TODO("if (_playerDto.teamStatus != (int)TeamMemberDto.TeamMemberStatus.NoTeam)\r\n        {\r\n             ServiceRequestAction.requestServer(PlayerService.tipInfo(_playerDto.id), \", (e) =>\r\n                {\r\n                    if (View != null && null != View.gameObject)\r\n                    {\r\n                        PlayerTipDto dto = e as PlayerTipDto;\r\n                        if (dto != null)\r\n                        {\r\n                            int teamCount = dto.teamSize;\r\n                            if (teamCount > 0)\r\n                            {\r\n                                View.FactionNameLbl_UILabel.text = string.Format(\'队伍:{0}/5\', teamCount).WrapColor(ColorConstantV3.Color_White_Str);\r\n                            }\r\n                        }\r\n                        else\r\n                            UpdateFactionName(_playerDto.faction.name);\r\n                    }\r\n                }, (e) =>\r\n                {\r\n                    if (View != null && null != View.gameObject)\r\n                    {\r\n                        UpdateFactionName(_playerDto.faction.name);\r\n                    }\r\n                });\r\n        }\r\n        else\r\n        {\r\n            UpdateFactionName(_playerDto.faction.name);\r\n        }\r\n\r\n        if (FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_JoinGuild, false, \'\', null))\r\n        {\r\n            if ((_playerDto.grade < 8)\r\n                || (!ModelManager.Player.HasGuild() && _playerDto.guildId == 0)\r\n                || (ModelManager.Player.HasGuild() && _playerDto.guildId > 0))\r\n            {\r\n                View.GuildBtn.gameObject.SetActive(false);\r\n            }\r\n            else if (ModelManager.Player.HasGuild() && _playerDto.guildId == 0)\r\n            {\r\n                View.GuildBtn.gameObject.SetActive(true);\r\n                View.GuildBtnLabel_UILabel.text = \'邀请入帮\';\r\n            }\r\n            else if (!ModelManager.Player.HasGuild() && _playerDto.guildId > 0)\r\n            {\r\n                View.GuildBtn.gameObject.SetActive(true);\r\n                View.GuildBtnLabel_UILabel.text = \'申请入帮\';\r\n            }\r\n\r\n        }\r\n        else\r\n        {\r\n            View.GuildBtn.gameObject.SetActive(false);\r\n        }\r\n\r\n        if (ModelManager.Friend.IsMyFriend(_playerDto.id))\r\n        {\r\n            isStrange = false;\r\n            View.AddFriendLbl.text = \'删除好友\';\r\n        }\r\n        else\r\n        {\r\n            isStrange = true;\r\n            View.AddFriendLbl.text = \'添加好友\';\r\n        }\r\n\r\n        View.BeginChatBtn.gameObject.SetActive(FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_ChatPrivate, false));\r\n\r\n        View.GiveBtn.gameObject.SetActive(FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_Give, false));\r\n\r\n\r\n        View.PKBtn.gameObject.SetActive(ModelManager.Player.GetPlayerId() != _playerDto.id && FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_CompareNotes, false) && WorldManager.Instance.CheckPlayerAtBattleScope(_playerDto.id));\r\n\r\n\r\n        View.WatchBattleBtn_UIButton.gameObject.SetActive(WorldManager.Instance.GetModel().GetPlayerBattleStatus(_playerDto.id));\r\n\r\n        View.AchievemnetBtn.gameObject.SetActive(FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_Achievement, false));\r\n\r\n        bool canShowReport = ModelManager.Player.GetPlayerLevel() >= DataCache.getDtoByCls<ReportConfig>(1).minGrade;\r\n        View.ReportBtn_UIButton.gameObject.SetActive(canShowReport);\r\n        View.InviteTeamBtn.gameObject.SetActive(!ModelManager.BridalSedan.IsMe());\r\n        //屏蔽vip\r\n        View.VipSprite_UISprite.gameObject.SetActive(false);\r\n\r\n        View.VisitHomeBtn.gameObject.SetActive(FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_Homeworld, false));\r\n\r\n        //查看空间\r\n        View.CheckZoneBtn_UIButton.gameObject.SetActive(FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_MyZone, false));");
            var btnCount = this.get_View().ButtonGrid.GetChildList().get_Count();
            if (btnCount % 2 == 1)
                this.get_View().Bg.set_height(198 + 66 * (((btnCount / 2) | 0) + 1));
            else
                this.get_View().Bg.set_height(198 + 66 * ((btnCount / 2) | 0));
            this.get_View().ButtonGrid.Reposition();
        },
        UpdateFactionName: function (name){
            this.get_View().FactionNameLbl_UILabel.set_text(AppStringHelper.WrapColor$$String$$String(System.String.Format$$String$$Object("{0}", name), "FFF9E3" /* ColorConstantV3.Color_White_Str */));
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().InviteTeamBtn.onClick, $CreateDelegate(this, this.OnClickTeamBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().GiveBtn.onClick, $CreateDelegate(this, this.OnGiveBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().AddFriendBtn.onClick, $CreateDelegate(this, this.OnClickAddFriendBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().BeginChatBtn.onClick, $CreateDelegate(this, this.OnBeginChatBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PKBtn.onClick, $CreateDelegate(this, this.OnPKBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().VisitHomeBtn.onClick, $CreateDelegate(this, this.OnVisitHomeBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().GuildBtn.onClick, $CreateDelegate(this, this.OnGuildBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().WatchBattleBtn_UIButton.onClick, $CreateDelegate(this, this.OnWatchBattleBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().AchievemnetBtn.onClick, $CreateDelegate(this, this.OnAchievemnetBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ReportBtn_UIButton.onClick, $CreateDelegate(this, this.OnClickReportBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CheckZoneBtn_UIButton.onClick, $CreateDelegate(this, this.OnClickCheckZoneBtn));
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            UICamera.onClick = $RemoveDelegate(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
        },
        OnClickTeamBtn: function (){
            GameDebuger.TODO("\r\n        if (ModelManager.CSPK.IsInCSPKScene())\r\n        {\r\n            if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_Team))\r\n                return;\r\n            if (ModelManager.CSPK.IsWatchingModel || _playerDto.cspkWatcher)\r\n            {\r\n                TipManager.AddTip(\'观众无法进行组队\');\r\n                return;\r\n            }\r\n        }\r\n        ");
            if (this._playerDto.teamStatus == AppDto.TeamMemberDto.TeamMemberStatus.NoTeam){
                TeamDataMgr.TeamNetMsg.InviteMember(this._playerDto.id, this._playerDto.name);
            }
            else {
                TeamDataMgr.TeamNetMsg.JoinTeam(this._playerDto.id);
            }
            this.CloseView();
        },
        OnBeginChatBtnClick: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_ChatPrivate))\r\n            return;\r\n\r\n        UIPanel panel = UIPanel.Find(transform);\r\n        ModelManager.Friend.BeginTalkTo(\r\n            _playerDto.id\r\n            , _playerDto.grade\r\n            , _playerDto.nickname\r\n            , _playerDto.charactorId\r\n            , _playerDto.factionId);");
            this.CloseView();
        },
        OnPKBtnClick: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPKSpecial())\r\n            return;\r\n\r\n        int grade = _playerDto.grade;\r\n        if (_playerDto.teamStatus == PlayerDto.PlayerTeamStatus_Member)\r\n        {\r\n            ScenePlayerDto leader = WorldManager.Instance.GetModel().GetTeamLeader(_playerDto.teamUniqueId);\r\n            if (leader != null)\r\n            {\r\n                grade = leader.grade;\r\n            }\r\n        }\r\n\r\n        int checkGrade = DataCache.GetStaticConfigValue(AppStaticConfigs.ARENA_PLAYER_GRADE_DIFF);\r\n\r\n        if (grade > ModelManager.Player.GetPlayerLevel() + checkGrade)\r\n        {\r\n            TipManager.AddTip(string.Format(\'等级低于对方{0}级以上，无法切磋\', checkGrade));\r\n            return;\r\n        }\r\n\r\n        if (BattleManager.Instance.IsInBattle())\r\n        {\r\n            TipManager.AddTip(\'战斗中不能同时切磋\');\r\n            return;\r\n        }\r\n\r\n        //      if (WorldManager.Instance.GetModel().GetPlayerBattleStatus(_playerDto.id ))\r\n        //      {\r\n        //          TipManager.AddTip(\'对方正在战斗， 不能发起切磋\');\r\n        //          return;\r\n        //      }\r\n\r\n        if (WorldManager.Instance.CheckPlayerAtBattleScope(_playerDto.id))\r\n        {\r\n            if (ModelManager.Team.IsFollowLeader())\r\n            {\r\n                TipManager.AddTip(\'组队状态需要队长才可以发起切磋\');\r\n            }\r\n            else\r\n            {\r\n                ServiceRequestAction.requestServer(ArenaService.challenge(_playerDto.id));\r\n                CloseView();\r\n            }\r\n        }\r\n        else\r\n        {\r\n            TipManager.AddTip(\'需要双方都处于擂台上才能进行切磋\');\r\n            }");
            GameDebuger.LogError("[DEMO/非错误]DEMO版本的PVP走模拟配置战斗的方式，不设专门的PVP协议！", null);
            DemoSimulateHelper.SimulatePVP(this._playerDto, $CreateDelegate(this, this.CloseView));
        },
        OnWatchBattleBtnClick: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPKSpecial())\r\n            return;");
            BattleHelper.WatchPlayerBattle(this._playerDto.id, 0, 0, BattleHelper.BattleWatchType.WatchType_Nothing, $CreateDelegate(this, this.CloseView), null);
        },
        OnVisitHomeBtnClick: function (){
            TipManager.AddTip("该功能正在研发中", false, false, "");
        },
        OnGuildBtnClick: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_JoinGuild))\r\n            return;\r\n\r\n        if (ModelManager.Player.HasGuild() && _playerDto.guildId == 0)\r\n        {\r\n            // 邀请入帮\r\n            ModelManager.Guild.Invite(_playerDto.id, _playerDto.nickname);\r\n        }\r\n        else if (!ModelManager.Player.HasGuild() && _playerDto.guildId >= 0)\r\n        {\r\n            // 申请入帮\r\n            ServiceRequestAction.requestServer(GuildService.applyJoin(_playerDto.guildId), \", (e) =>\r\n                {\r\n                    TipManager.AddTip(string.Format(\'申请{0}成功\', _playerDto.guildName));\r\n                });\r\n        }");
            this.CloseView();
        },
        OnGiveBtnClick: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_Give))\r\n            return;\r\n\r\n        if (!ModelManager.Player.IsPlayerBandMode(false))\r\n        {\r\n            UIPanel panel = UIPanel.Find(transform);\r\n            ProxyGiftPropsModule.OpenGiftView(_playerDto, 0);\r\n            CloseView();\r\n        }\r\n        else");
            TipManager.AddTip("您被封号不能进行赠送", false, false, "");
        },
        OnClickAddFriendBtn: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_Friend))\r\n            return;\r\n\r\n        if (isStrange)\r\n        {\r\n            ModelManager.Friend.AddNewFriend(_playerDto.id);\r\n        }\r\n        else\r\n        {\r\n            ModelManager.Friend.DelFriend(_playerDto.id);\r\n        }");
        },
        OnAchievemnetBtnClick: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_Achievement))\r\n            return;\r\n\r\n        ServiceRequestAction.requestServer(AchievementService.viewOther(_playerDto.id), \", (e) =>\r\n            {\r\n                AchievementDetailDto _dto = e as AchievementDetailDto;\r\n                ;\r\n                _dto.achievementDto.playerAchievementDtos = ModelManager.Achievement.GetPureAchievementDtoList(_dto.achievementDto.playerAchievementDtos);\r\n                ProxyRankingModule.OpenLookAchievementView(_dto);\r\n            });");
            this.CloseView();
        },
        ClickEventHandler: function (clickGo){
            var panel = UIPanel.Find$$Transform(clickGo.get_transform());
            if (UnityEngine.Object.op_Inequality(panel, this.get_View().uiPanel))
                this.CloseView();
        },
        OnClickReportBtn: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPKSpecial())\r\n            return;\r\n\r\n        ProxyReportModule.Open(_playerDto.id, _playerDto.nickname, _playerDto.grade);");
            this.CloseView();
        },
        OnClickCheckZoneBtn: function (){
            GameDebuger.TODO("if (ModelManager.CSPK.IsOptionForbiddenForCSPK(FunctionOpen.FunctionOpenEnum_MyZone))\r\n            return;\r\n\r\n        ModelManager.SelfZone.OpenZone(_playerDto.id, false);");
            this.CloseView();
        },
        CloseView: function (){
            ProxyMainUIModule.ClosePlayerInfoView();
        }
    }
};
JsTypes.push(PlayerInfoViewController);
var ExpandContentTeamItem = {
    fullname: "ExpandContentTeamItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ExpandContentTeamItem.NAME = "ExpandContentTeamItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Icon_UISprite = null;
            this.statusSprite_UISprite = null;
            this.factionIcon_UISprite = null;
            this.hpSlider_UISlider = null;
            this.mpSlider_UISlider = null;
            this.playerLevel_UILabel = null;
            this.playerName_UILabel = null;
            this.ExpandContentTeamItem_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.Icon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "IconBg/Icon");
            this.statusSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "IconBg/Icon/statusSprite");
            this.factionIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "factionIcon");
            this.hpSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "sliderGroup/hpSlider");
            this.mpSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "sliderGroup/mpSlider");
            this.playerLevel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "playerLevel");
            this.playerName_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "playerName");
            this.ExpandContentTeamItem_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "");
        }
    }
};
JsTypes.push(ExpandContentTeamItem);
var MainUIExpandContentView = {
    fullname: "MainUIExpandContentView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            MainUIExpandContentView.NAME = "MainUIExpandContentView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ContentRoot = null;
            this.TabBtn_Task_UIToggle = null;
            this.TabBtn_Team_UIToggle = null;
            this.cancelMatchBtn_UIButton = null;
            this.teamMatrixInfoRoot = null;
            this.teamMatrixInfoLbl_UILabel = null;
            this.taskselectEffect_UISprite = null;
            this.teamselectEffect_UISprite = null;
            this.joinOrLeaveBtn_UIButton = null;
            this.callOrAwayBtnLbl_UILabel = null;
            this.operateBtnGrid_UIGrid = null;
            this.joinOrLeaveBtnLbl_UILabel = null;
            this.itemScrollView_UIScrollView = null;
            this.taskItemTable_UITable = null;
            this.teamContentBg_UIEventTrigger = null;
            this.itemOperateBtnBg_UISprite = null;
            this.teamItemGrid_UIGrid = null;
            this.ContentRoot_TweenPosition = null;
            this.ContentRoot_TweenAlpha = null;
            this.callOrAwayBtn_UIButton = null;
            this.Button_ExpandPanel_UIToggle = null;
            this.teamMsgBtn_UIButton = null;
            this.buttonBg_UISprite = null;
            this.teamMsgBtnLbl_UILabel = null;
            this.taskselectEffect_UIButton = null;
            this.teamselectEffect_UIButton = null;
            this.teamBtnGroup = null;
            this.teamContentBg_UISprite = null;
            this.contentBgLbl_UILabel = null;
            this.teamselectEffect_BoxCollider = null;
            this.taskselectEffect_BoxCollider = null;
            this.directSprite_UISprite = null;
            this.TabContent_Task = null;
            this.TabContent_Team = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.ContentRoot = GameObjectExt.FindGameObject(root, "ContentRoot");
            this.TabBtn_Task_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Task");
            this.TabBtn_Team_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Team");
            this.cancelMatchBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/cancelMatchBtn");
            this.teamMatrixInfoRoot = GameObjectExt.FindGameObject(root, "ContentRoot/TabButtonRoot/TabBtn_Team/teamMatrixInfoRoot");
            this.teamMatrixInfoLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Team/teamMatrixInfoRoot/teamMatrixInfoLbl");
            this.taskselectEffect_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Task/taskselectEffect");
            this.teamselectEffect_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Team/teamselectEffect");
            this.joinOrLeaveBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/joinOrLeaveBtn");
            this.callOrAwayBtnLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/callOrAwayBtn/callOrAwayBtnLbl");
            this.operateBtnGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/itemOperateGroup/directSprite/itemOperateBtnBg/operateBtnGrid");
            this.joinOrLeaveBtnLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/joinOrLeaveBtn/joinOrLeaveBtnLbl");
            this.itemScrollView_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "ContentRoot/TabContentRoot/itemScrollView");
            this.taskItemTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentRoot/TabContentRoot/itemScrollView/TabContent_Task/taskItemTable");
            this.teamContentBg_UIEventTrigger = GameObjectExt.FindScript$1(UIEventTrigger.ctor, root, "ContentRoot/TabContentRoot/teamContentBg");
            this.itemOperateBtnBg_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/itemOperateGroup/directSprite/itemOperateBtnBg");
            this.teamItemGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "ContentRoot/TabContentRoot/itemScrollView/TabContent_Team/teamItemGrid");
            this.ContentRoot_TweenPosition = GameObjectExt.FindScript$1(TweenPosition.ctor, root, "ContentRoot");
            this.ContentRoot_TweenAlpha = GameObjectExt.FindScript$1(TweenAlpha.ctor, root, "ContentRoot");
            this.callOrAwayBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/callOrAwayBtn");
            this.Button_ExpandPanel_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "Button_ExpandPanel");
            this.teamMsgBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "Button_ExpandPanel/buttonBg/teamMsgBtn");
            this.buttonBg_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "Button_ExpandPanel/buttonBg");
            this.teamMsgBtnLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Button_ExpandPanel/buttonBg/teamMsgBtn/btnSprite/teamMsgBtnLbl");
            this.taskselectEffect_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Task/taskselectEffect");
            this.teamselectEffect_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Team/teamselectEffect");
            this.teamBtnGroup = GameObjectExt.FindGameObject(root, "ContentRoot/TabContentRoot/teamBtnGroup");
            this.teamContentBg_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentRoot/TabContentRoot/teamContentBg");
            this.contentBgLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/contentBgLbl");
            this.teamselectEffect_BoxCollider = GameObjectExt.FindScript$1(UnityEngine.BoxCollider.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Team/teamselectEffect");
            this.taskselectEffect_BoxCollider = GameObjectExt.FindScript$1(UnityEngine.BoxCollider.ctor, root, "ContentRoot/TabButtonRoot/TabBtn_Task/taskselectEffect");
            this.directSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentRoot/TabContentRoot/teamBtnGroup/itemOperateGroup/directSprite");
            this.TabContent_Task = GameObjectExt.FindGameObject(root, "ContentRoot/TabContentRoot/itemScrollView/TabContent_Task");
            this.TabContent_Team = GameObjectExt.FindGameObject(root, "ContentRoot/TabContentRoot/itemScrollView/TabContent_Team");
        }
    }
};
JsTypes.push(MainUIExpandContentView);
var IMainUIView = {
    fullname: "IMainUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IMainUIView);
var MainUIView = {
    fullname: "MainUIView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            MainUIView.NAME = "MainUIView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IMainUIView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Button_GmTest_UIButton = null;
            this.SceneBtnGroup = null;
            this.WorldMapIcon_UISprite = null;
            this.WorldMapBtn_UIButton = null;
            this.MiniMapBtn_UIButton = null;
            this.SceneName_UILabel = null;
            this.OrdinateLabel_UILabel = null;
            this.TR_UpRoll = null;
            this.Button_PlayerInfo = null;
            this.Button_PlayerInfo_UIButton = null;
            this.lvLbl_UILabel = null;
            this.nameLbl_UILabel = null;
            this.icon_UISprite = null;
            this.PlayerInfoViewAnchor = null;
            this.TopLeftAnchor = null;
            this.DeviceGroup = null;
            this.ExpandPanelAnchor = null;
            this.Friend_UIButton = null;
            this.FriendPivot_Transform = null;
            this.Button_Pack_UIButton = null;
            this.BottomLeftAnchor = null;
            this.BottomRightAnchor = null;
            this.Button_Partner_UIButton = null;
            this.TempBtn_UIButton = null;
            this.Button_GmTest_UIButtonEvt = null;
            this.WorldMapBtn_UIButtonEvt = null;
            this.MiniMapBtn_UIButtonEvt = null;
            this.Button_PlayerInfo_UIButtonEvt = null;
            this.Friend_UIButtonEvt = null;
            this.Button_Pack_UIButtonEvt = null;
            this.Button_Partner_UIButtonEvt = null;
            this.TempBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, MainUIView.ctor, IMainUIView.ctor, IMainUIData.ctor);
        },
        LateElementBinding: function (){
            this.Button_PlayerInfo.SetActive(false);
            this.TempBtn_UIButton.get_gameObject().SetActive(false);
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
            if (data == null){
                return;
            }
            var playerDto = data.get_SelectedPlayer();
            if (playerDto == null){
                this.Button_PlayerInfo.SetActive(false);
            }
            else {
                this.Button_PlayerInfo.SetActive(true);
                this.lvLbl_UILabel.set_text(System.String.Format$$String$$Object("[b]{0}[-]", playerDto.grade));
                this.nameLbl_UILabel.set_text(System.String.Format$$String$$Object("[b]{0}[-]", playerDto.name));
                UIHelper.SetPetIcon(this.icon_UISprite, playerDto.get_charactor().texture.toString(), false);
            }
        },
        ChangeMode: function (mode){
            if (mode == UIMode.STORY || mode == UIMode.LOGIN || mode == UIMode.NULL){
                this.get_gameObject().SetActive(false);
                return;
            }
            this.get_gameObject().SetActive(true);
            this.SceneBtnGroup.SetActive(false);
            var inGameScene = (mode == UIMode.GAME);
            this.DeviceGroup.set_localPosition(inGameScene ? new UnityEngine.Vector3.ctor$$Single$$Single$$Single(85, -15, 0) : new UnityEngine.Vector3.ctor$$Single$$Single$$Single(36, -20, 0));
            if (inGameScene){
            }
            else {
                if (WorldManager.FirstEnter == false){
                }
                else {
                }
            }
            if (mode == UIMode.MARRY){
            }
            else if (mode == UIMode.GAME){
                this.SceneBtnGroup.SetActive(true);
                this.BottomLeftAnchor.SetActive(true);
                this.BottomRightAnchor.SetActive(true);
            }
            if (mode == UIMode.BATTLE){
                this.BottomLeftAnchor.SetActive(false);
                this.BottomRightAnchor.SetActive(false);
            }
            else {
            }
        },
        TR_UpRoll_Go$$: "UnityEngine.GameObject",
        get_TR_UpRoll_Go: function (){
            return this.TR_UpRoll;
        },
        PlayerInfoViewAnchor_GO$$: "UnityEngine.GameObject",
        get_PlayerInfoViewAnchor_GO: function (){
            return this.PlayerInfoViewAnchor;
        },
        ExpandAnchor$$: "UnityEngine.GameObject",
        get_ExpandAnchor: function (){
            return this.ExpandPanelAnchor;
        },
        PlayerInfoViewAnchorPos$$: "UnityEngine.Vector3",
        get_PlayerInfoViewAnchorPos: function (){
            return this.PlayerInfoViewAnchor.get_transform().get_localPosition();
        },
        FriendBtnPivotTrans$$: "UnityEngine.Transform",
        get_FriendBtnPivotTrans: function (){
            return this.FriendPivot_Transform;
        },
        ShowTempBagBtn: function (show){
            var go = this.TempBtn_UIButton.get_gameObject();
            go.SetActive(show);
            if (show){
            }
        },
        ShakeTempBagBtn: function (){
            var trans = this.TempBtn_UIButton.get_transform();
            DG.Tweening.ShortcutExtensions.DOShakePosition$$Transform$$Single$$Vector3$$Int32$$Single$$Boolean$$Boolean(this.TempBtn_UIButton.get_transform(), 0.5, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(10, 10, 10), 10, 90, false, true);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.Button_GmTest_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "Button_GmTest");
            this.SceneBtnGroup = GameObjectExt.FindGameObject(root, "TopLeftAnchor/SceneBtnGroup");
            this.WorldMapIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "TopLeftAnchor/SceneBtnGroup/TL_UpRoll/WorldMapGroup/WorldMapBtn/WorldMapIcon");
            this.WorldMapBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TopLeftAnchor/SceneBtnGroup/TL_UpRoll/WorldMapGroup/WorldMapBtn");
            this.MiniMapBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TopLeftAnchor/SceneBtnGroup/TL_UpRoll/SceneInfo/MiniMapBtn");
            this.SceneName_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TopLeftAnchor/SceneBtnGroup/TL_UpRoll/SceneInfo/MiniMapBtn/SceneName");
            this.OrdinateLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TopLeftAnchor/SceneBtnGroup/TL_UpRoll/SceneInfo/OrdinateGroup/OrdinateLabel");
            this.TR_UpRoll = GameObjectExt.FindGameObject(root, "TopRightAnchor/TR_UpRoll");
            this.Button_PlayerInfo = GameObjectExt.FindGameObject(root, "TopRightAnchor/ButtonGroup/Button_PlayerInfo");
            this.Button_PlayerInfo_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TopRightAnchor/ButtonGroup/Button_PlayerInfo");
            this.lvLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TopRightAnchor/ButtonGroup/Button_PlayerInfo/buttonBg/icon/lvLbl");
            this.nameLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TopRightAnchor/ButtonGroup/Button_PlayerInfo/buttonBg/icon/nameLbl");
            this.icon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "TopRightAnchor/ButtonGroup/Button_PlayerInfo/buttonBg/icon");
            this.PlayerInfoViewAnchor = GameObjectExt.FindGameObject(root, "TopRightAnchor/PlayerInfoViewAnchor");
            this.TopLeftAnchor = GameObjectExt.FindGameObject(root, "TopLeftAnchor");
            this.DeviceGroup = GameObjectExt.FindTrans(root, "TopLeftAnchor/TL_UpRoll_V2/DeviceGroup");
            this.ExpandPanelAnchor = GameObjectExt.FindGameObject(root, "TopRightAnchor/ExpandPanelAnchor");
            this.Friend_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomLeftAnchor/BL_DownRoll/Button_Friend");
            this.FriendPivot_Transform = GameObjectExt.FindTrans(root, "BottomLeftAnchor/BL_DownRoll/Button_Friend/Pivot");
            this.Button_Pack_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomRightAnchor/BR_DownRoll/RightGrid/Button_Pack");
            this.BottomLeftAnchor = GameObjectExt.FindGameObject(root, "BottomLeftAnchor");
            this.BottomRightAnchor = GameObjectExt.FindGameObject(root, "BottomRightAnchor");
            this.Button_Partner_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomRightAnchor/BR_DownRoll/BottomGroup/ButtonGrid/Button_Partner");
            this.TempBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomRightAnchor/BR_DownRoll/RightGrid/Button_Pack/TempBtn");
        },
        InitReactiveEvents: function (){
            this.Button_GmTest_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Button_GmTest_UIButton);
            this.WorldMapBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.WorldMapBtn_UIButton);
            this.MiniMapBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.MiniMapBtn_UIButton);
            this.Button_PlayerInfo_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Button_PlayerInfo_UIButton);
            this.Friend_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Friend_UIButton);
            this.Button_Pack_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Button_Pack_UIButton);
            this.Button_Partner_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.Button_Partner_UIButton);
            this.TempBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.TempBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.Button_GmTest_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Button_GmTest_UIButtonEvt);
            this.WorldMapBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.WorldMapBtn_UIButtonEvt);
            this.MiniMapBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.MiniMapBtn_UIButtonEvt);
            this.Button_PlayerInfo_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Button_PlayerInfo_UIButtonEvt);
            this.Friend_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Friend_UIButtonEvt);
            this.Button_Pack_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Button_Pack_UIButtonEvt);
            this.Button_Partner_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.Button_Partner_UIButtonEvt);
            this.TempBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TempBtn_UIButtonEvt);
        },
        OnButton_GmTest_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnButton_GmTest_UIButtonClick: function (){
            return this.Button_GmTest_UIButtonEvt;
        },
        OnWorldMapBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnWorldMapBtn_UIButtonClick: function (){
            return this.WorldMapBtn_UIButtonEvt;
        },
        OnMiniMapBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnMiniMapBtn_UIButtonClick: function (){
            return this.MiniMapBtn_UIButtonEvt;
        },
        OnButton_PlayerInfo_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnButton_PlayerInfo_UIButtonClick: function (){
            return this.Button_PlayerInfo_UIButtonEvt;
        },
        OnFriend_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnFriend_UIButtonClick: function (){
            return this.Friend_UIButtonEvt;
        },
        OnButton_Pack_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnButton_Pack_UIButtonClick: function (){
            return this.Button_Pack_UIButtonEvt;
        },
        OnButton_Partner_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnButton_Partner_UIButtonClick: function (){
            return this.Button_Partner_UIButtonEvt;
        },
        OnTempBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTempBtn_UIButtonClick: function (){
            return this.TempBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(MainUIView);
var OperateBtnItem = {
    fullname: "OperateBtnItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            OperateBtnItem.NAME = "OperateBtnItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Label_UILabel = null;
            this.OperateBtnItem_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.Label_UILabel = root.Find("Label").GetComponent$1(UILabel.ctor);
            this.OperateBtnItem_UIButton = root.GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(OperateBtnItem);
var ModelDisplayController = {
    fullname: "ModelDisplayController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            ModelDisplayController.MODEL_UICOM = "ModelDisplayUIComponent";
            ModelDisplayController.MODEL_RENDERER = "ModelDisplayRenderer";
            ModelDisplayController.ModelRendererCount = 0;
            ModelDisplayController.DefaultAnimationClipList = (function (){
                var $v26 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v26.Add("attack1" /* ModelHelper.Anim_attack1 */);
                $v26.Add("attack2" /* ModelHelper.Anim_attack2 */);
                $v26.Add("skill" /* ModelHelper.Anim_skill */);
                return $v26;
            }).call(this);
            ModelDisplayController.AttackAnimationClipList = (function (){
                var $v27 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v27.Add("attack1" /* ModelHelper.Anim_attack1 */);
                $v27.Add("attack2" /* ModelHelper.Anim_attack2 */);
                return $v27;
            }).call(this);
            ModelDisplayController.FashionAnimationClipList = (function (){
                var $v28 = new System.Collections.Generic.List$1.ctor(System.String.ctor);
                $v28.Add("idle" /* ModelHelper.Anim_idle */);
                $v28.Add("run" /* ModelHelper.Anim_run */);
                return $v28;
            }).call(this);
            ModelDisplayController.CAMERA_POS = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 2.6, 5);
            ModelDisplayController.DEFAULT_FOV = 20;
        },
        GenerateUICom: function (anchor, depth){
            var prefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("ModelDisplayUIComponent" /* MODEL_UICOM */), UnityEngine.GameObject.ctor);
            var uiComGo = NGUITools.AddChild$$GameObject$$GameObject(anchor.get_gameObject(), prefab);
            if (depth == -1 /* -1 */){
                GameObjectExt.GetMissingComponent$1(UIPanel.ctor, uiComGo);
                NGUITools.AdjustDepth(uiComGo, UIPanel.Find$$Transform(anchor).get_depth() + 1);
            }
            else {
                var uiTexture = uiComGo.get_transform().Find("ModelUITexture").GetComponent$1(UITexture.ctor);
                uiTexture.set_depth(depth);
            }
            return GameObjectExt.GetMissingComponent$1(ModelDisplayController.ctor, uiComGo);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._customAnimateIndex = 0;
            this._customAnimateList = null;
            this._defaultAnimate = "";
            this._defaultRotation = UnityEngine.Vector3.get_zero();
            this._isPlaying = false;
            this._mCam = null;
            this._mCamTrans = null;
            this._modelRenderer = null;
            this._modelStyleInfo = null;
            this._mUITexture = null;
            this._width = 0;
            this._height = 0;
            this._fovFactor = 1;
            this._orthographicSize = 0;
            this._useOrthographic = false;
            this._yOffset = 0;
            this._showShadow = false;
            this._ModelDisplayer = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        ModelDisplayer$$: "ModelDisplayer",
        get_ModelDisplayer: function (){
            return this._ModelDisplayer;
        },
        set_ModelDisplayer: function (value){
            this._ModelDisplayer = value;
        },
        mUITexture$$: "UITexture",
        get_mUITexture: function (){
            return this._mUITexture;
        },
        ModelStyleInfo$$: "ModelStyleInfo",
        get_ModelStyleInfo: function (){
            return this._modelStyleInfo;
        },
        showShadow$$: "System.Boolean",
        get_showShadow: function (){
            return this._showShadow;
        },
        set_showShadow: function (value){
            this._showShadow = value;
        },
        OnEnable: function (){
            if (UnityEngine.Object.op_Inequality(this._modelRenderer, null))
                this._modelRenderer.SetActive(true);
            if (this.get_ModelDisplayer() != null){
                this.get_ModelDisplayer().OnEnable();
            }
        },
        OnDisable: function (){
            if (UnityEngine.Object.op_Inequality(this._modelRenderer, null))
                this._modelRenderer.SetActive(false);
            if (this.get_ModelDisplayer() != null){
                this.get_ModelDisplayer().OnDisable();
            }
        },
        Start: function (){
            this.InitModel();
        },
        InitModel: function (){
            if (UnityEngine.Object.op_Equality(this._modelRenderer, null)){
                this._modelRenderer = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("ModelDisplayRenderer" /* MODEL_RENDERER */, null);
                UnityEngine.Object.DontDestroyOnLoad(this._modelRenderer);
                var index = ModelDisplayController.ModelRendererCount++;
                this._modelRenderer.set_name("ModelRender_" + index);
                this._modelRenderer.get_transform().set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-100 /* -100f */ * index - 1000, 0, 0));
                this._mCamTrans = this._modelRenderer.get_transform().Find("ModelCamera");
                this._mCam = this._mCamTrans.GetComponent$1(UnityEngine.Camera.ctor);
                var newW = this._width;
                var newH = this._height;
                if (!this._useOrthographic){
                    this._mCam.set_fieldOfView(20 /* DEFAULT_FOV */ * this._fovFactor);
                    newW = UnityEngine.Mathf.RoundToInt(this._width * this._fovFactor);
                    newH = UnityEngine.Mathf.RoundToInt(this._height * this._fovFactor);
                }
                var renderTexture = new UnityEngine.RenderTexture.ctor$$Int32$$Int32$$Int32(newW, newH, 16);
                renderTexture.set_name(this._modelRenderer.get_name());
                renderTexture.set_generateMips(false);
                this._mCam.set_targetTexture(renderTexture);
                this._mCam.set_orthographic(this._useOrthographic);
                this._mCam.set_orthographicSize(this._orthographicSize);
                this._mCam.set_enabled(true);
                this._mUITexture.set_mainTexture(this._mCam.get_targetTexture());
                this._mUITexture.SetDimensions(newW, newH);
                this.set_ModelDisplayer(new ModelDisplayer.ctor(this._modelRenderer, $CreateDelegate(this, this.OnLoadModelFinish), true));
                this.UpdateModel();
            }
        },
        OnDestroy: function (){
            if (UnityEngine.Object.op_Inequality(this._modelRenderer, null)){
                this.CleanUpModel();
                if (UnityEngine.Object.op_Inequality(this._mUITexture, null)){
                    this._mUITexture.set_enabled(false);
                }
                if (UnityEngine.Object.op_Inequality(this._mCam, null)){
                    UnityEngine.Object.Destroy$$Object(this._mCam.get_targetTexture());
                    this._mCam.set_targetTexture(null);
                }
                UnityEngine.Object.Destroy$$Object(this._modelRenderer);
                this._modelRenderer = null;
            }
        },
        Init$$Int32$$Int32$$Single$$Single: function (width, height, defaultRotateY, fovFactor){
            this.Init$$Int32$$Int32$$Vector3$$Single$$String$$Boolean(width, height, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, defaultRotateY, 0), fovFactor, "idle", true);
        },
        Init$$Int32$$Int32$$Vector3$$Single$$String$$Boolean: function (width, height, defaultRotation, fovFactor, defaultAnimate, triggerEnable){
            this._defaultRotation = defaultRotation;
            this._defaultAnimate = defaultAnimate;
            this._fovFactor = fovFactor;
            this._width = width;
            this._height = height;
            this._mUITexture = this.get_transform().Find("ModelUITexture").GetComponent$1(UITexture.ctor);
            var eventTrigger = this._mUITexture.GetComponent$1(UIEventTrigger.ctor);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(eventTrigger.onClick, $CreateDelegate(this, this.OnClickModel));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(eventTrigger.onDrag, $CreateDelegate(this, this.OnDragModel));
            var box = this._mUITexture.GetComponent$1(UnityEngine.BoxCollider.ctor);
            if (UnityEngine.Object.op_Inequality(box, null)){
                box.set_enabled(triggerEnable);
                box.set_size(new UnityEngine.Vector3.ctor$$Single$$Single(width, height));
            }
        },
        SetupModel$$GeneralCharactor$$Boolean$$Int32: function (charactor, isMutate, weaponModelId){
            this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(charactor);
            this._modelStyleInfo.weaponId = weaponModelId;
            if (!isMutate){
                this._modelStyleInfo.mutateTexture = 0;
            }
            this.UpdateModel();
        },
        SetOrnamentShow: function (ornamentId){
            this._modelStyleInfo.ornamentId = ornamentId;
            this.UpdateModel();
        },
        SetupModelByDressInfo: function (charactor, dressInfo){
            this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(charactor);
            this._modelStyleInfo.weaponId = dressInfo.wpmodel;
            this._modelStyleInfo.weaponEffId = dressInfo.weaponEffect;
            this._modelStyleInfo.set_hallowSpriteId(dressInfo.hallowSpriteId);
            this._modelStyleInfo.mutateTexture = 0;
            this._modelStyleInfo.mutateColorParam = PlayerModel.GetDyeColorParams$$PlayerSimpleDressInfoDto(dressInfo);
            this.UpdateModel();
        },
        UpdateFashionPart: function (fashionId, remove){
            GameDebuger.TODO("_modelStyleInfo.UpdateFashionPart(fashionId, remove);");
            this.UpdateModel();
        },
        SetupModelByBaseNpcInfo: function (info){
            this._modelStyleInfo = ModelStyleInfo.ToInfo$$BaseNpcInfo(info);
            this.UpdateModel();
        },
        SetupModelByFashionIds: function (charactor, fashionList, weaponId, weaponEffId, pHallowSpriteId){
            this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(charactor);
            this._modelStyleInfo.weaponId = weaponId;
            this._modelStyleInfo.weaponEffId = weaponEffId;
            this._modelStyleInfo.set_hallowSpriteId(pHallowSpriteId);
            this._modelStyleInfo.SetupFashionIds(fashionList);
            this.UpdateModel();
        },
        SetupModelBySoul: function (pPlayerDto, pHallowSpriteId){
            this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(pPlayerDto.get_charactor());
            GameDebuger.TODO("_modelStyleInfo.weaponId = ModelManager.Backpack.GetCurrentWeaponModel();");
            this._modelStyleInfo.weaponEffId = pPlayerDto.dressInfo.weaponEffect;
            this._modelStyleInfo.set_hallowSpriteId(pHallowSpriteId);
            this._modelStyleInfo.mutateTexture = 0;
            this._modelStyleInfo.mutateColorParam = PlayerModel.GetDyeColorParams$$PlayerSimpleDressInfoDto(pPlayerDto.dressInfo);
            this.UpdateModel();
        },
        SetupMainRoleModel: function (showFashion){
            var playerDto = ModelManager.get_Player().GetPlayer();
            var transformModelId = ModelManager.get_Player().get_TransformModelId();
            if (transformModelId != 0){
                this._modelStyleInfo = new ModelStyleInfo.ctor();
                this._modelStyleInfo.set_TransformModelId(transformModelId);
            }
            else {
                this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(playerDto.get_charactor());
                this._modelStyleInfo.mutateTexture = 0;
            }
            this.UpdateModel();
        },
        SetupModel$$PlayerDto$$Int32$$Boolean$$Int32: function (playerDto, transformModelId, showFashion, weaponEffId){
            GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.Backpack_OnWeaponModelChange, UpdateWeapon);\n        GameEventCenter.RemoveListener(GameEvent.Backpack_OnHallowSpriteChange, UpdateHallowSprite);");
            if (transformModelId != 0){
                this._modelStyleInfo = new ModelStyleInfo.ctor();
                this._modelStyleInfo.set_TransformModelId(transformModelId);
            }
            else {
                this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(playerDto.get_charactor());
                GameDebuger.TODO("_modelStyleInfo.weaponId = ModelManager.Backpack.GetCurrentWeaponModel();");
                this._modelStyleInfo.weaponEffId = weaponEffId;
                GameDebuger.TODO("_modelStyleInfo.hallowSpriteId = ModelManager.Backpack.GetCurrentHallowSpriteId();");
                this._modelStyleInfo.mutateTexture = 0;
                this._modelStyleInfo.mutateColorParam = PlayerModel.GetDyeColorParams$$PlayerSimpleDressInfoDto(playerDto.dressInfo);
                GameDebuger.TODO("GameEventCenter.AddListener(GameEvent.Backpack_OnWeaponModelChange, UpdateWeapon);\n            GameEventCenter.AddListener(GameEvent.Backpack_OnHallowSpriteChange, UpdateHallowSprite);");
                if (playerDto.dressInfo != null){
                    if (showFashion)
                        this._modelStyleInfo.SetupFashionIds(playerDto.dressInfo.fashionDressIds);
                }
            }
            this.UpdateModel();
        },
        SetupModel$$SimplePlayerDto: function (simplePlayerDto){
            GameDebuger.TODO("SetupModelByDressInfo(simplePlayerDto.charactor, simplePlayerDto.dressInfo);");
        },
        SetupModel$$PlayerDressInfo: function (playerDressInfo){
            if (playerDressInfo.transformModelId != 0){
                this._modelStyleInfo = new ModelStyleInfo.ctor();
                this._modelStyleInfo.set_TransformModelId(playerDressInfo.transformModelId);
            }
            else {
                var charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, playerDressInfo.charactorId);
                this._modelStyleInfo = new ModelStyleInfo.ctor();
                this._modelStyleInfo.weaponId = playerDressInfo.wpmodel;
                GameDebuger.TODO("_modelStyleInfo.hallowSpriteId = playerDressInfo.hallowSpriteId;");
                this._modelStyleInfo.weaponEffId = playerDressInfo.weaponEffect;
                this._modelStyleInfo.defaultModelId = charactor.modelId;
                this._modelStyleInfo.mainTexture = charactor.texture;
                this._modelStyleInfo.mutateColorParam = PlayerModel.GetDyeColorParams$$PlayerDressInfo(playerDressInfo);
            }
            this.UpdateModel();
        },
        SetupModel$$Int32$$PlayerSimpleDressInfoDto: function (characterId, dressInfo){
            var charactor = DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, characterId);
            if (charactor != null && dressInfo != null)
                this.SetupModelByDressInfo(charactor, dressInfo);
            else
                this.CleanUpModel();
        },
        SetupModel$$Int32$$Int32$$String: function (modelId, mutateId, mutateColor){
            this._modelStyleInfo = new ModelStyleInfo.ctor();
            this._modelStyleInfo.defaultModelId = modelId;
            if (modelId == 719 && mutateId == 726){
                this._modelStyleInfo.mainTexture = mutateId;
                this._modelStyleInfo.mutateTexture = 0;
            }
            else {
                this._modelStyleInfo.mainTexture = modelId;
                this._modelStyleInfo.mutateTexture = mutateId;
            }
            this._modelStyleInfo.mutateColorParam = mutateColor;
            this.UpdateModel();
        },
        SetupRideModel: function (rideModelId, rideLV, playerDto, rideMutateColorParam, rideOrnamentId, rideOrnamentColorParam){
            if (playerDto != null){
                this._modelStyleInfo = ModelStyleInfo.ToInfo$$GeneralCharactor(playerDto.get_charactor());
                this._modelStyleInfo.weaponEffId = playerDto.dressInfo.weaponEffect;
                GameDebuger.TODO("_modelStyleInfo.weaponId = ModelManager.Backpack.GetCurrentWeaponModel();\n            _modelStyleInfo.hallowSpriteId = ModelManager.Backpack.GetCurrentHallowSpriteId();");
                this._modelStyleInfo.mutateTexture = 0;
                this._modelStyleInfo.mutateColorParam = PlayerModel.GetDyeColorParams$$PlayerSimpleDressInfoDto(playerDto.dressInfo);
            }
            else {
                this._modelStyleInfo = new ModelStyleInfo.ctor();
            }
            this._modelStyleInfo.rideId = rideModelId;
            this._modelStyleInfo.rideMutateColorParam = rideMutateColorParam;
            this._modelStyleInfo.rideOrnamentId = rideOrnamentId;
            this._modelStyleInfo.rideOrnamentColorParam = rideOrnamentColorParam;
            GameDebuger.TODO("_modelStyleInfo.rideMaxEffect = rideLV >= ModelManager.Mount.GetRideShowEffectGradLimit();");
            this._modelStyleInfo.rideEffect = true;
            this.UpdateRotation(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -45, 0));
            this.UpdateModel();
        },
        UpdateOrnamentColorParam: function (colorParams){
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateOrnamentColorParam(colorParams);
        },
        UpdateModelHSV: function (colorParams, mutateTexture){
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateModelHSV(colorParams, mutateTexture);
        },
        UpdateRideOrnamentColorParam: function (colorParams){
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateRideOrnamentColorParam(colorParams);
        },
        UpdateRideModelHSV: function (colorParams){
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateRideModelHSV(colorParams);
        },
        UpdateModel: function (){
            if (this._modelStyleInfo == null)
                return;
            var modelInfo = null;
            if (this._modelStyleInfo.rideId > 0){
                modelInfo = DataCache.getDtoByCls$1(AppDto.Model.ctor, this._modelStyleInfo.rideId);
            }
            else {
                modelInfo = DataCache.getDtoByCls$1(AppDto.Model.ctor, this._modelStyleInfo.GetModelInfoId());
            }
            if (modelInfo != null){
                this._modelStyleInfo.set_ModelScale(modelInfo.uiScale);
                this._yOffset = modelInfo.uiPos;
            }
            this._modelStyleInfo.weaponEffLv = 3;
            this._modelStyleInfo.showShadow = this._showShadow;
            this._modelStyleInfo.shadowScale = 2;
            if (this.get_ModelDisplayer() != null){
                this.get_ModelDisplayer().SetLookInfo(this._modelStyleInfo);
            }
        },
        OnLoadModelFinish: function (){
            this.SetModelOffset(this._yOffset);
            this.get_ModelDisplayer().UpdateRotation(this._defaultRotation);
            this.PlayAnimation(this._defaultAnimate);
        },
        UpdateRotation: function (rotation){
            this._defaultRotation = rotation;
            if (this.get_ModelDisplayer() != null){
                this.get_ModelDisplayer().UpdateRotation(rotation);
            }
        },
        CleanUpModel: function (){
            this.CleanUpCustomAnimations();
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().Clear();
            GameDebuger.TODO("GameEventCenter.RemoveListener(GameEvent.Backpack_OnWeaponModelChange, UpdateWeapon);\n        GameEventCenter.RemoveListener(GameEvent.Backpack_OnHallowSpriteChange, UpdateHallowSprite);");
        },
        CleanUpCustomAnimations: function (){
            this._customAnimateList = null;
            this._customAnimateIndex = 0;
        },
        SetupFasionAnimationList: function (initAnim){
            this.PlayAnimation(initAnim);
            this._customAnimateList = ModelDisplayController.FashionAnimationClipList.ToArray();
            this._customAnimateIndex = ModelDisplayController.FashionAnimationClipList.IndexOf$$T(initAnim);
            if (this._customAnimateIndex == -1 /* -1 */){
                this._customAnimateIndex = 0;
            }
        },
        UpdateWeapon: function (weaponModelId){
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateWeapon(weaponModelId);
        },
        UpdateHallowSprite: function (pHallowSprite){
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateHallowSprite$$Int32(pHallowSprite);
        },
        PlayAnimation: function (clip){
            this._defaultAnimate = clip;
            if (this.get_ModelDisplayer() != null){
                this.get_ModelDisplayer().PlayAnimation(clip, false, false);
            }
        },
        OnDragModel: function (){
            if (this.get_ModelDisplayer() == null)
                return;
            var delta = UICamera.currentTouch.delta;
            this.get_ModelDisplayer().Rotate(-_jsComManager.dT * delta.x * 30);
        },
        OnClickModel: function (){
            if (this.get_ModelDisplayer() == null)
                return;
            if (this._isPlaying || this.get_ModelDisplayer().get_isRiding())
                return;
            this._isPlaying = true;
            if (this._customAnimateList != null){
                this._customAnimateIndex++;
                if (this._customAnimateIndex >= this._customAnimateList.length){
                    this._customAnimateIndex = 0;
                }
                var clip = this._customAnimateList[this._customAnimateIndex];
                this.get_ModelDisplayer().PlayAnimation(clip, false, false);
            }
            else {
                this.get_ModelDisplayer().PlayAnimation(JsHelper.Random(ModelDisplayController.DefaultAnimationClipList), false, false);
            }
            this.Invoke("PlayerIdleAnimation", 0.5);
        },
        PlayerIdleAnimation: function (){
            this._isPlaying = false;
        },
        SetBoxColliderEnabled: function (b){
            if (UnityEngine.Object.op_Inequality(this._mUITexture, null)){
                var box = this._mUITexture.GetComponent$1(UnityEngine.BoxCollider.ctor);
                if (UnityEngine.Object.op_Inequality(box, null))
                    box.set_enabled(b);
            }
        },
        SetBoxCollider: function (width, height){
            if (UnityEngine.Object.op_Inequality(this._mUITexture, null)){
                var box = this._mUITexture.GetComponent$1(UnityEngine.BoxCollider.ctor);
                if (UnityEngine.Object.op_Inequality(box, null)){
                    box.set_size(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(width, height, 0));
                }
            }
        },
        SetUITextureShader: function (shaderName){
            var shader = AssetPipeline.AssetManager.get_Instance().FindShader(shaderName);
            if (UnityEngine.Object.op_Inequality(shader, null))
                this._mUITexture.set_shader(shader);
        },
        SetOrthographic: function (size){
            this._orthographicSize = size;
            this._useOrthographic = true;
            if (UnityEngine.Object.op_Inequality(this._mCam, null)){
                this._mCam.set_orthographic(true);
                this._mCam.set_orthographicSize(size);
            }
        },
        SetModelOffset: function (offsetY){
            this._yOffset = offsetY;
            if (UnityEngine.Object.op_Inequality(this._mCamTrans, null))
                this._mCamTrans.set_localPosition(UnityEngine.Vector3.op_Addition(ModelDisplayController.CAMERA_POS, new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -this._yOffset, 0)));
        },
        SetModelScale: function (scale){
            this._modelStyleInfo.set_ModelScale(scale);
            if (this.get_ModelDisplayer() != null)
                this.get_ModelDisplayer().UpdateScale(scale);
        }
    }
};
JsTypes.push(ModelDisplayController);
var PlayerPropertyDataMgr = {
    fullname: "PlayerPropertyDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PlayerPropertyDataMgr._ins = null;
        },
        Instance$$: "PlayerPropertyDataMgr",
        get_Instance: function (){
            if (PlayerPropertyDataMgr._ins == null)
                PlayerPropertyDataMgr._ins = new PlayerPropertyDataMgr.ctor();
            return PlayerPropertyDataMgr._ins;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.stream = new UniRx.Subject$1.ctor(IHeroPropertyData.ctor);
            this._data = new PlayerPropertyDataMgr.HeroPropertyData.ctor();
            System.Object.ctor.call(this);
        },
        Stream$$: "UniRx.IObservable`1[[IHeroPropertyData]]",
        get_Stream: function (){
            return this.stream;
        },
        Dispose: function (){
            this._data.Dispose();
            this.stream = UniRx.SubjectExtensions.CloseOnceNull$1(IHeroPropertyData.ctor, this.stream);
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr);
var IAddPointPlanData = {
    fullname: "IAddPointPlanData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IAddPointPlanData);
var IAddPointPlanView = {
    fullname: "IAddPointPlanView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IAddPointPlanView);
var AddPointPlanView = {
    fullname: "AddPointPlanView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            AddPointPlanView.NAME = "AddPointPlanView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IAddPointPlanView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.RemainPointLabel_UILabel = null;
            this.MiddleTable_UITable = null;
            this.RecommendBtn_UIButton = null;
            this.ConfirmBtn_UIButton = null;
            this.CloseBtn_UIButtonEvt = null;
            this.RecommendBtn_UIButtonEvt = null;
            this.ConfirmBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, AddPointPlanView.ctor, IAddPointPlanView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        GetTable: function (){
            return this.MiddleTable_UITable;
        },
        GetLabel: function (){
            return this.RemainPointLabel_UILabel;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseWindow/CloseBtn");
            this.RemainPointLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/TopContainer/RemainPointLabel");
            this.MiddleTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/MiddleContainer/MiddleTable");
            this.RecommendBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/BottomContainer/RecommendBtn");
            this.ConfirmBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/BottomContainer/ConfirmBtn");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.RecommendBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.RecommendBtn_UIButton);
            this.ConfirmBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.ConfirmBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.RecommendBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.RecommendBtn_UIButtonEvt);
            this.ConfirmBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ConfirmBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnRecommendBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnRecommendBtn_UIButtonClick: function (){
            return this.RecommendBtn_UIButtonEvt;
        },
        OnConfirmBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnConfirmBtn_UIButtonClick: function (){
            return this.ConfirmBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(AddPointPlanView);
var AddPointPlanItemController = {
    fullname: "AddPointPlanItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.baseAPPlanCtl = null;
            this.propertyID = 0;
            this.addNum = 0;
            this.ReduceBtn_UIButtonEvt = null;
            this.AddBtn_UIButtonEvt = null;
            this.MaxBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, AddPointPlanItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ReduceBtn_UIButton.onClick, $CreateDelegate(this, this.OnReduceBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().AddBtn_UIButton.onClick, $CreateDelegate(this, this.OnAddBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().MaxBtn_UIButton.onClick, $CreateDelegate(this, this.OnMaxBtnClick));
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().ReduceBtn_UIButton.onClick, $CreateDelegate(this, this.OnReduceBtnClick));
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().AddBtn_UIButton.onClick, $CreateDelegate(this, this.OnAddBtnClick));
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().MaxBtn_UIButton.onClick, $CreateDelegate(this, this.OnMaxBtnClick));
        },
        UpdateView$$IHeroPropertyData: function (data){
        },
        AddNum$$: "System.Int32",
        get_AddNum: function (){
            return this.addNum;
        },
        set_AddNum: function (value){
            this.addNum = value;
        },
        ID$$: "System.Int32",
        get_ID: function (){
            return this.propertyID;
        },
        Init: function (id, num, bView){
            this.propertyID = id;
            this.addNum = num;
            this.baseAPPlanCtl = bView;
            this.get_View().NumLabel_UILabel.set_text(num.toString());
            this.get_View().AddPointPlanItem_UILabel.set_text(DataCache.getDtoByCls$1(AppDto.CharacterAbility.ctor, id).name);
        },
        UpdateView$$Int32: function (num){
            this.addNum = num;
            this.get_View().NumLabel_UILabel.set_text(num.toString());
        },
        OnReduceBtnClick: function (){
            this.baseAPPlanCtl.OnMinus(this, 1);
        },
        OnAddBtnClick: function (){
            this.baseAPPlanCtl.OnAdd(this, 1);
        },
        OnMaxBtnClick: function (){
            this.baseAPPlanCtl.OnAdd(this, this.baseAPPlanCtl.get_RemainPoint());
        },
        SetAddPointVal: function (val){
            this.get_View().NumLabel_UILabel.set_text(val.toString());
            this.addNum = val;
        },
        InitReactiveEvents: function (){
            this.ReduceBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().ReduceBtn_UIButton);
            this.AddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().AddBtn_UIButton);
            this.MaxBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().MaxBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.ReduceBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ReduceBtn_UIButtonEvt);
            this.AddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AddBtn_UIButtonEvt);
            this.MaxBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.MaxBtn_UIButtonEvt);
        },
        OnReduceBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnReduceBtn_UIButtonClick: function (){
            return this.ReduceBtn_UIButtonEvt;
        },
        OnAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAddBtn_UIButtonClick: function (){
            return this.AddBtn_UIButtonEvt;
        },
        OnMaxBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnMaxBtn_UIButtonClick: function (){
            return this.MaxBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(AddPointPlanItemController);
var AddPointPlanItem = {
    fullname: "AddPointPlanItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            AddPointPlanItem.NAME = "AddPointPlanItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ReduceBtn_UIButton = null;
            this.AddBtn_UIButton = null;
            this.NumLabel_UILabel = null;
            this.MaxBtn_UIButton = null;
            this.AddPointPlanItem_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.ReduceBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ReduceBtn");
            this.AddBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "AddBtn");
            this.NumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "NumBG/NumLabel");
            this.MaxBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "MaxBtn");
            this.AddPointPlanItem_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "");
        }
    }
};
JsTypes.push(AddPointPlanItem);
var AddPointSliderItemController = {
    fullname: "AddPointSliderItemController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        cctor: function (){
            AddPointSliderItemController.PRESS_NONE = -1 /* -1 */;
            AddPointSliderItemController.PRESS_MINUS = 0;
            AddPointSliderItemController.PRESS_ADD = 1;
            AddPointSliderItemController.pressAndHoldDelay = 0.1;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.basePropertyController = null;
            this.pressBtnState = -1 /* PRESS_NONE */;
            this.mPressStartTime = 0;
            this.potentialInit = 0;
            this._maxPoint = 0;
            this._originVal = 0;
            this._realVal = 0;
            this._addPointVal = 0;
            this._addPoint = 0;
            this.realNum = 0;
            this.propertyID = 0;
            this.minusBtn_UIButtonEvt = null;
            this.addBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, AddPointSliderItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        RealNum$$: "System.Int32",
        get_RealNum: function (){
            return this.realNum;
        },
        AddPoint$$: "System.Int32",
        get_AddPoint: function (){
            return this._addPoint;
        },
        set_AddPoint: function (value){
            this._addPoint = value;
        },
        PropertyID$$: "System.Int32",
        get_PropertyID: function (){
            return this.propertyID;
        },
        set_PropertyID: function (value){
            this.propertyID = value;
        },
        InitItem: function (ID, ctl, data){
            this.basePropertyController = ctl;
            this.propertyID = ID;
            this.UpdateView(data);
            var ca = data.get_GetPlayerModel().GetCharacterAbilityByID(this.propertyID);
            this.get_View().titleLbl_UILabel.set_text(ca.name);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().addPointSlider_UISlider.onChange, $CreateAnonymousDelegate(this, function (){
                UIProgressBar.current.set_value(UnityEngine.Mathf.Clamp$$Single$$Single$$Single(UIProgressBar.current.get_value(), this._realVal, this.UpdateSliderMaxVal(data)));
            }));
            var thumEvListener = UIEventListener.Get(this.get_View().thumbCollider.get_gameObject());
            thumEvListener.onDrag = $CombineDelegates(thumEvListener.onDrag, $CreateAnonymousDelegate(this, function (go, delta){
                var potential = data.get_GetCharactorDto().potential;
                if (delta.x > 0){
                    var newAddPoint = UnityEngine.Mathf.RoundToInt((this.get_View().addPointSlider_UISlider.get_value() - this.get_View().realSlider_UISlider.get_value()) * this._maxPoint);
                    this.basePropertyController.OnApSliderAdd(this, newAddPoint - this._addPoint);
                }
                else if (delta.x < 0){
                    var newAddPoint = UnityEngine.Mathf.RoundToInt((this.get_View().addPointSlider_UISlider.get_value() - this.get_View().realSlider_UISlider.get_value()) * this._maxPoint);
                    this.basePropertyController.OnApSliderMinus(this, this._addPoint - newAddPoint);
                }
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().addBtnTrigger.onPress, $CreateAnonymousDelegate(this, function (){
                this.pressBtnState = 1 /* PRESS_ADD */;
                JSTimer.get_Instance().SetupTimer("AddPoint", $CreateDelegate(this, this.addBtn_UIButtonClickHandler), 0.2, false);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().addBtnTrigger.onRelease, $CreateAnonymousDelegate(this, function (){
                this.pressBtnState = -1 /* PRESS_NONE */;
                JSTimer.get_Instance().CancelTimer("AddPoint");
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().minusBtnTrigger.onPress, $CreateAnonymousDelegate(this, function (){
                this.pressBtnState = 0 /* PRESS_MINUS */;
                JSTimer.get_Instance().SetupTimer("MinusPoint", $CreateDelegate(this, this.minusBtn_UIButtonClickHandler), 0.2, false);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().minusBtnTrigger.onRelease, $CreateAnonymousDelegate(this, function (){
                this.pressBtnState = -1 /* PRESS_NONE */;
                JSTimer.get_Instance().CancelTimer("MinusPoint");
            }));
        },
        UpdateView: function (data){
            if (this.basePropertyController.get_RemainPotential() > 0){
                this.SetAddBtnGrey(false);
                this.SetThumbActive(true);
            }
            else {
                this.SetAddBtnGrey(true);
                this.SetThumbActive(false);
            }
            var level = data.get_GetPlayerModel().GetPlayerLevel();
            this._maxPoint = this.CalculateMaxPoint(data);
            this.SetAddPoint(this._addPoint);
            GameDebuger.TODO(" _originVal = (float)(10 + data.GetPlayerModel.GetPlayerLevel() + 装备增加的点数) / _maxPoint; ");
            GameDebuger.TODO(" _realVal = _originVal + (data.GetPlayerModel.GetPropertyByID(propertyID)-_originVal) / _maxPoint;");
            this.realNum = ((data.get_GetPlayerModel().GetPropertyByID(this.propertyID)) | 0);
            this._originVal = (10 + data.get_GetPlayerModel().GetPlayerLevel()) / this._maxPoint;
            this._realVal = this._originVal + (data.get_GetPlayerModel().GetPropertyByID(this.propertyID) - this._originVal * this._maxPoint) / this._maxPoint;
            var potential = data.get_GetCharactorDto().potential;
            if (potential == 0){
                this._addPointVal = this._realVal;
            }
            else {
                this._addPointVal = this._realVal + (this._addPoint / data.get_GetCharactorDto().potential) * (1 - this._realVal);
            }
            this.SetSliderValue(this._originVal, this._realVal, this._addPointVal);
            if (this._addPoint > 0){
                this.SetMinusBtnGrey(false);
            }
            else {
                this.SetMinusBtnGrey(true);
            }
            var originNum = ((data.get_GetPlayerModel().GetPropertyByID(this.propertyID)) | 0);
            this.get_View().OriginPointNumLabel_UILabel.set_text(System.String.Format$$String$$Object("{0}", AppStringHelper.WrapColor$$String$$Color((originNum.toString()), ColorConstantV3.Color_Black)));
        },
        SetAddBtnGrey: function (b){
            this.get_View().addBtnSprite.set_isGrey(b);
            this.get_View().addBtnScale.set_enabled(!b);
        },
        SetMinusBtnGrey: function (b){
            this.get_View().minusBtnSprite.set_isGrey(b);
            this.get_View().minusBtnScale.set_enabled(!b);
        },
        SetThumbActive: function (b){
            this.get_View().thumbCollider.set_enabled(b);
        },
        SetAddBtnState: function (){
            if (this.basePropertyController.get_RemainPotential() > 0){
                this.SetAddBtnGrey(false);
            }
            else {
                this.SetAddBtnGrey(true);
            }
        },
        SetAddPoint: function (val){
            if (val != 0){
                this.get_View().AddPointNumLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color(System.String.Format$$String$$Object("+{0}", this._addPoint), ColorConstantV3.Color_Green));
            }
            else {
                this.get_View().AddPointNumLabel_UILabel.set_text("");
            }
        },
        SetAddPointVal: function (val, data){
            this._addPoint = val;
            this.SetAddPoint(val);
            var potential = data.get_GetCharactorDto().potential;
            if (potential == 0){
                this.get_View().addPointSlider_UISlider.set_value(this._realVal);
            }
            else {
                this.get_View().addPointSlider_UISlider.set_value(this._realVal + (this._addPoint / data.get_GetCharactorDto().potential) * (1 - this._realVal));
            }
            if (this._addPoint > 0){
                this.SetMinusBtnGrey(false);
            }
            else {
                this.SetMinusBtnGrey(true);
            }
        },
        UpdateSliderMaxVal: function (data){
            if (data.get_GetCharactorDto().potential == 0)
                return this._realVal;
            else {
                var num = (this._realVal + (this.basePropertyController.get_RemainPotential() + this._addPoint) / this._maxPoint);
                return num;
            }
        },
        CalculateMaxPoint: function (data){
            var level = data.get_GetPlayerModel().GetPlayerLevel();
            var totalPoint = data.get_GetPlayerModel().CalulateTotalPoint();
            if (level < 50)
                return totalPoint - 8 * level + 200;
            else
                return totalPoint - 4 * level;
        },
        SetSliderValue: function (originVal, realVal, addPointVal){
            this.get_View().originSlider_UISlider.set_value(originVal);
            this.get_View().realSlider_UISlider.set_value(realVal);
            this.get_View().addPointSlider_UISlider.set_value(addPointVal);
        },
        InitReactiveEvents: function (){
            this.minusBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().minusBtn_UIButton);
            this.addBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().addBtn_UIButton);
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_OnminusBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.minusBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_OnaddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.addBtn_UIButtonClickHandler();
            }));
        },
        ClearReactiveEvents: function (){
            this.minusBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.minusBtn_UIButtonEvt);
            this.addBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.addBtn_UIButtonEvt);
        },
        OnminusBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnminusBtn_UIButtonClick: function (){
            return this.minusBtn_UIButtonEvt;
        },
        OnaddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnaddBtn_UIButtonClick: function (){
            return this.addBtn_UIButtonEvt;
        },
        minusBtn_UIButtonClickHandler: function (){
            if (this._addPoint > 0)
                this.basePropertyController.OnApSliderMinus(this, 1);
        },
        addBtn_UIButtonClickHandler: function (){
            this.basePropertyController.OnApSliderAdd(this, 1);
        }
    }
};
JsTypes.push(AddPointSliderItemController);
var AddPointSliderItem = {
    fullname: "AddPointSliderItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            AddPointSliderItem.NAME = "AddPointSliderItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.titleLbl_UILabel = null;
            this.minusBtn_UIButton = null;
            this.addBtn_UIButton = null;
            this.OriginPointNumLabel_UILabel = null;
            this.AddPointNumLabel_UILabel = null;
            this.addPointSlider_UISlider = null;
            this.realSlider_UISlider = null;
            this.originSlider_UISlider = null;
            this.thumbCollider = null;
            this.addBtnSprite = null;
            this.minusBtnSprite = null;
            this.addBtnScale = null;
            this.minusBtnScale = null;
            this.minusBtnTrigger = null;
            this.addBtnTrigger = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.titleLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "titleLbl");
            this.minusBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "minusBtn");
            this.addBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "addBtn");
            this.OriginPointNumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "OriginPointNumLabel");
            this.AddPointNumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "AddPointNumLabel");
            this.addPointSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "sliderBg/addPointSlider");
            this.realSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "sliderBg/realSlider");
            this.originSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "sliderBg/originSlider");
            this.thumbCollider = GameObjectExt.FindScript$1(UnityEngine.BoxCollider.ctor, root, "sliderBg/thumb");
            this.addBtnSprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "addBtn");
            this.minusBtnSprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "minusBtn");
            this.addBtnScale = GameObjectExt.FindScript$1(UIButtonScale.ctor, root, "addBtn");
            this.minusBtnScale = GameObjectExt.FindScript$1(UIButtonScale.ctor, root, "minusBtn");
            this.addBtnTrigger = GameObjectExt.FindScript$1(UIEventTrigger.ctor, root, "addBtn");
            this.minusBtnTrigger = GameObjectExt.FindScript$1(UIEventTrigger.ctor, root, "minusBtn");
        }
    }
};
JsTypes.push(AddPointSliderItem);
var IChangeNameView = {
    fullname: "IChangeNameView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IChangeNameView);
var ChangeNameView = {
    fullname: "ChangeNameView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            ChangeNameView.NAME = "ChangeNameView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IChangeNameView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CancelBtn_UIButton = null;
            this.ConfirmBtn_UIButton = null;
            this.ChangeNameInput_UIInput = null;
            this.CancelBtn_UIButtonEvt = null;
            this.ConfirmBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, ChangeNameView.ctor, IChangeNameView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.ChangeNameInput_UIInput.onChange, $CreateDelegate(this, this.OnInputChange));
        },
        UpdateView: function (data){
            this.ChangeNameInput_UIInput.set_text(data.get_GetPlayerModel().GetPlayerName());
        },
        InitView: function (data){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.ChangeNameInput_UIInput.onChange, $CreateDelegate(this, this.OnInputChange));
        },
        InputValue: function (){
            return this.ChangeNameInput_UIInput.get_value();
        },
        IsInputContentlegal: function (){
            var newName = this.ChangeNameInput_UIInput.get_value();
            if (System.String.IsNullOrEmpty(newName)){
                TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("请输入新名字", ColorConstantV3.Color_Purple), false, false, "");
                return false;
            }
            var error = AppStringHelper.ValidateStrLength(this.ChangeNameInput_UIInput.get_value(), 4, 12);
            if (!System.String.IsNullOrEmpty(error)){
                TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("取名最少需要两个汉字，或者四个英文字符", ColorConstantV3.Color_Purple), false, false, "");
                return false;
            }
            return true;
        },
        OnInputChange: function (){
            var newName = this.ChangeNameInput_UIInput.get_value();
            if (AppStringHelper.GetGBLength(newName) > 12){
                this.ChangeNameInput_UIInput.set_value(AppStringHelper.TrimInputStr(newName, 12));
            }
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CancelBtn_UIButton = GameObjectExt.FindGameObject(root, "Bg/CancelBtn");
            this.ConfirmBtn_UIButton = GameObjectExt.FindGameObject(root, "Bg/ConfirmBtn");
            this.ChangeNameInput_UIInput = GameObjectExt.FindScript$1(UIInput.ctor, root, "Bg/ChangeNameInput");
        },
        InitReactiveEvents: function (){
            this.CancelBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CancelBtn_UIButton);
            this.ConfirmBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ConfirmBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CancelBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CancelBtn_UIButtonEvt);
            this.ConfirmBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ConfirmBtn_UIButtonEvt);
        },
        OnCancelBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCancelBtn_UIButtonClick: function (){
            return this.CancelBtn_UIButtonEvt;
        },
        OnConfirmBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnConfirmBtn_UIButtonClick: function (){
            return this.ConfirmBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(ChangeNameView);
var ConfirmViewController = {
    fullname: "ConfirmViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.OnCancel = null;
            this.OnConfirm = null;
            FRPBaseController$3.ctor.call(this, ConfirmView.ctor, IConfirmView.ctor, IHeroPropertyData.ctor);
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCancelBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CancelBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnConfirmBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ConfirmBtn_UIButtonClickHandler();
            }));
        },
        CancelBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("ChangeNameView" /* ChangeNameView.NAME */, true);
            if (this.OnCancel != null)
                this.OnCancel();
        },
        ConfirmBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("ChangeNameView" /* ChangeNameView.NAME */, true);
            if (this.OnConfirm != null)
                this.OnConfirm();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        OpenConfirmWindow: function (title, onCancel, onConfirm){
            this.get_View().InitView(title);
            this.OnCancel = onCancel;
            this.OnConfirm = onConfirm;
        }
    }
};
JsTypes.push(ConfirmViewController);
var IConfirmView = {
    fullname: "IConfirmView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IConfirmView);
var ConfirmView = {
    fullname: "ConfirmView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            ConfirmView.NAME = "ConfirmView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IConfirmView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel_UILabel = null;
            this.CancelBtn_UIButton = null;
            this.ConfirmBtn_UIButton = null;
            this.CancelBtn_UIButtonEvt = null;
            this.ConfirmBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, ConfirmView.ctor, IConfirmView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        InitView: function (str){
            this.TitleLabel_UILabel.set_text(str);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TitleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BG/TitleLabel");
            this.CancelBtn_UIButton = GameObjectExt.FindGameObject(root, "BG/CancelBtn");
            this.ConfirmBtn_UIButton = GameObjectExt.FindGameObject(root, "BG/ConfirmBtn");
        },
        InitReactiveEvents: function (){
            this.CancelBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CancelBtn_UIButton);
            this.ConfirmBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ConfirmBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CancelBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CancelBtn_UIButtonEvt);
            this.ConfirmBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ConfirmBtn_UIButtonEvt);
        },
        OnCancelBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCancelBtn_UIButtonClick: function (){
            return this.CancelBtn_UIButtonEvt;
        },
        OnConfirmBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnConfirmBtn_UIButtonClick: function (){
            return this.ConfirmBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(ConfirmView);
var FightPropertyItemController = {
    fullname: "FightPropertyItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.propertyID = 0;
            MonolessViewController$1.ctor.call(this, FightPropertyItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        Init: function (fightPropertyName, fightPropertyNum, id, color, icon){
            if (icon != null)
                UIHelper.SetItemIcon(this.get_View().FightPropertyItem_UISprite, icon, false);
            this.get_View().Label_UILabel.set_color(color);
            this.get_View().Num_UILabel.set_color(color);
            this.get_View().Label_UILabel.set_text(System.String.Format$$String$$Object("{0}:", fightPropertyName));
            this.UpdateFightPropertyNum(fightPropertyNum);
            this.propertyID = id;
        },
        UpdateFightPropertyNum: function (num){
            this.get_View().Num_UILabel.set_text(System.String.Format$$String$$Object("{0}", num));
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(FightPropertyItemController);
var FightPropertyItem = {
    fullname: "FightPropertyItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            FightPropertyItem.NAME = "FightPropertyItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.FightPropertyItem_UISprite = null;
            this.Label_UILabel = null;
            this.Num_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.FightPropertyItem_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "");
            this.Label_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Label");
            this.Num_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Num");
        }
    }
};
JsTypes.push(FightPropertyItem);
var HighPropertyContainerController = {
    fullname: "HighPropertyContainerController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, HighPropertyContainer.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        Init: function (title){
            this.get_View().TypeLabel_UILabel.set_text(title);
        },
        Update: function (title){
            this.get_View().TypeLabel_UILabel.set_text(title);
        },
        Reposition: function (){
            this.get_View().Table_UITable.Reposition();
        },
        Tabel$$: "UITable",
        get_Tabel: function (){
            return this.get_View().Table_UITable;
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(HighPropertyContainerController);
var HighPropertyContainer = {
    fullname: "HighPropertyContainer",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            HighPropertyContainer.NAME = "HighPropertyContainer";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TypeLabel_UILabel = null;
            this.Table_UITable = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TypeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Sprite/TypeLabel");
            this.Table_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "Table");
        }
    }
};
JsTypes.push(HighPropertyContainer);
var HighPropertyItemController = {
    fullname: "HighPropertyItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, HighPropertyItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        Init: function (icon, name, num){
            UIHelper.SetItemIcon(this.get_View().Icon_UISprite, icon, false);
            this.get_View().Name_UILabel.set_text(name);
            this.Update(num);
        },
        Update: function (num){
            num = UnityEngine.Mathf.FloorToInt(num * 10000);
            this.get_View().Num_UILabel.set_text(System.String.Format$$String$$Object("{0}%", num / 100));
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(HighPropertyItemController);
var HighPropertyItem = {
    fullname: "HighPropertyItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            HighPropertyItem.NAME = "HighPropertyItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Num_UILabel = null;
            this.Name_UILabel = null;
            this.Icon_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.Num_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Num");
            this.Name_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Name");
            this.Icon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "Icon");
        }
    }
};
JsTypes.push(HighPropertyItem);
var IHighPropertyUIView = {
    fullname: "IHighPropertyUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IHighPropertyUIView);
var HighPropertyUIView = {
    fullname: "HighPropertyUIView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            HighPropertyUIView.NAME = "HighPropertyUIView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IHighPropertyUIView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.View_UIScrollView = null;
            this.Table_UITable = null;
            this.CloseBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, HighPropertyUIView.ctor, IHighPropertyUIView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        GetTabel: function (){
            return this.Table_UITable;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindGameObject(root, "BG/CloseBtn");
            this.View_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "BG/Scroll View");
            this.Table_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "BG/Scroll View/Table");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CloseBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(HighPropertyUIView);
var IHeroPropertyData = {
    fullname: "IHeroPropertyData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IAddPointPlanData"],
    Kind: "Interface"
};
JsTypes.push(IHeroPropertyData);
var IPlayerPropertyView = {
    fullname: "IPlayerPropertyView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IPlayerPropertyView);
var PlayerPropertyView = {
    fullname: "PlayerPropertyView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            PlayerPropertyView.NAME = "PlayerPropertyView";
            PlayerPropertyView.CloseBtn_UIButtonStr = "BaseWindow/CloseButton";
            PlayerPropertyView.PropertyToggleBtn_UIToggleStr = "ContentWindow/ToggleGroup/PropertyToggleBtn";
            PlayerPropertyView.AddPointToggleBtn_UIToggleStr = "ContentWindow/ToggleGroup/AddPointToggleBtn";
            PlayerPropertyView.InfoToggleBtn_UIToggleStr = "ContentWindow/ToggleGroup/InfoToggleBtn";
            PlayerPropertyView.ProfessionBtn_UIButtonStr = "ContentWindow/ToggleContent/PropertyPanel/NameContainer/ProfessionBtn";
            PlayerPropertyView.ChangeNameBtn_UIButtonStr = "ContentWindow/ToggleContent/PropertyPanel/NameContainer/ChangeNameBtn";
            PlayerPropertyView.PropertyNameLabel_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/NameContainer/NameLabelBg/PropertyNameLabel";
            PlayerPropertyView.PropertyFightNum_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/FightContent/FightNum";
            PlayerPropertyView.CampSprite_UISpriteStr = "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/CampSprite";
            PlayerPropertyView.AppellationBtn_UIButtonStr = "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/Sprite/AppellationBtn";
            PlayerPropertyView.AppellationLabel_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/AppellationLabel";
            PlayerPropertyView.HeroModelParentStr = "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/HeroModelParent";
            PlayerPropertyView.PropertyLevelLabel_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/LevelLabel";
            PlayerPropertyView.ExpSlider_UISliderStr = "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/ExpSlider";
            PlayerPropertyView.ExpLabel_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/ExpSlider/ExpLabel";
            PlayerPropertyView.NoteBtn_UIButtonStr = "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/NoteBtn";
            PlayerPropertyView.StoreExpLabel_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/StoreExpLabel";
            PlayerPropertyView.BasePropertyTable_UITableStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable";
            PlayerPropertyView.HighPropertyBtn_UIButtonStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/HighPropertyBtn";
            PlayerPropertyView.CorporeityNum_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Corporeity/CorporeityNum";
            PlayerPropertyView.PowerNum_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Power/PowerNum";
            PlayerPropertyView.IntelligenceNum_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Intelligence/IntelligenceNum";
            PlayerPropertyView.SkillNum_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Skill/SkillNum";
            PlayerPropertyView.AgilityNum_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Agility/AgilityNum";
            PlayerPropertyView.FightPropertyTable_UITableStr = "ContentWindow/ToggleContent/PropertyPanel/FightPropertyContainer/FightPropertyTable";
            PlayerPropertyView.VigourSlider_UISliderStr = "ContentWindow/ToggleContent/PropertyPanel/VigourContainer/VigourSlider";
            PlayerPropertyView.VigourSliderLabel_UILabelStr = "ContentWindow/ToggleContent/PropertyPanel/VigourContainer/VigourSlider/VigourSliderLabel";
            PlayerPropertyView.VigourUseBtn_UIButtonStr = "ContentWindow/ToggleContent/PropertyPanel/VigourContainer/VigourUseBtn";
            PlayerPropertyView.BasePropertyContainer_UIbuttonStr = "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer";
            PlayerPropertyView.FightPropertyContainer_UIbuttonStr = "ContentWindow/ToggleContent/PropertyPanel/FightPropertyContainer";
            PlayerPropertyView.AddPointLeftTable_UITableStr = "ContentWindow/ToggleContent/AddPointPanel/LeftContainer/PropertyBG/AddPointLeftTable";
            PlayerPropertyView.RemaindPointLabel_UILabelStr = "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/RemaindPoint/RemaindPointLabel";
            PlayerPropertyView.AutoAddPointToggle_UIToggleStr = "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/AutoAddPointToggle";
            PlayerPropertyView.ToggleSelectSprite_UISpriteStr = "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/AutoAddPointToggle/ToggleSelectSprite";
            PlayerPropertyView.AddPointPlanBtn_UIButtonStr = "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/AddPointPlanBtn";
            PlayerPropertyView.AddPointRightTable_UITableStr = "ContentWindow/ToggleContent/AddPointPanel/MiddleContainer/AddPointRightTable";
            PlayerPropertyView.ResetPointBtn_UIButtonStr = "ContentWindow/ToggleContent/AddPointPanel/BottomRightContainer/ResetPointBtn";
            PlayerPropertyView.ConfirmPointBtn_UIButtonStr = "ContentWindow/ToggleContent/AddPointPanel/BottomRightContainer/ConfirmPointBtn";
            PlayerPropertyView.PortraitIcon_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/PortraitIcon";
            PlayerPropertyView.InfoNameLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/TopRight/InfoNameLabel";
            PlayerPropertyView.IDLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/TopRight/IDLabel";
            PlayerPropertyView.LevelLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/TopRight/LevelLabel";
            PlayerPropertyView.CampLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/UnderTop/CampLabel";
            PlayerPropertyView.GroupLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/UnderTop/GroupLabel";
            PlayerPropertyView.GroupJobLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/UnderTop/GroupJobLabel";
            PlayerPropertyView.MainJobChangeBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/MiddleContainer/MainJobChangeBtn";
            PlayerPropertyView.FirstOccupationLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/MiddleContainer/FirstOccupationLabel";
            PlayerPropertyView.SecondOccupationLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/MiddleContainer/SecondOccupationLabel";
            PlayerPropertyView.TagEditBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/TagEditBtn";
            PlayerPropertyView.Table_1_UITableStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/Table_1";
            PlayerPropertyView.Table_2_UITableStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/Table_2";
            PlayerPropertyView.InfoInputField_UIInputStr = "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/InputField";
            PlayerPropertyView.LikeBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/LikeBtn";
            PlayerPropertyView.LikeNum_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/LikeNum";
            PlayerPropertyView.FlowerBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/FlowerBtn";
            PlayerPropertyView.FlowerNum_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/FlowerNum";
            PlayerPropertyView.InfoRightTable_UITableStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable";
            PlayerPropertyView.JingJiAddBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/JingJiScore/JingJiAddBtn";
            PlayerPropertyView.JingJiScoreIcon_UISpriteStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/TaScoreTableble/JingJiScore/JingJiScoreIcon";
            PlayerPropertyView.JingJiLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/JingJiScore/JingJiLabel";
            PlayerPropertyView.JingJiUseBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/JingJiScore/JingJiUseBtn";
            PlayerPropertyView.CorpsContributionAddBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionAddBtn";
            PlayerPropertyView.CorpsContributionIcon_UISpriteStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionIcon";
            PlayerPropertyView.CorpsContributionLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionLabel";
            PlayerPropertyView.CorpsContributionUseBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionUseBtn";
            PlayerPropertyView.MengXinScoreAddBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreAddBtn";
            PlayerPropertyView.MengXinScoreIcon_UISpriteStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreIcon";
            PlayerPropertyView.MengXinScoreLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreLabel";
            PlayerPropertyView.MengXinScoreUseBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreUseBtn";
            PlayerPropertyView.CountryWarSocreAddBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreAddBtn";
            PlayerPropertyView.CountryWarSocreIcon_UISpriteStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreIcon";
            PlayerPropertyView.CountryWarSocreLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreLabel";
            PlayerPropertyView.CountryWarSocreUseBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreUseBtn";
            PlayerPropertyView.ForgeSocreAddBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreAddBtn";
            PlayerPropertyView.ForgeSocreIcon_UISpriteStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreIcon";
            PlayerPropertyView.ForgeSocreLabel_UILabelStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreLabel";
            PlayerPropertyView.ForgeSocreUseBtn_UIButtonStr = "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreUseBtn";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IPlayerPropertyView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.modelDisplayerController = null;
            this.CloseBtn_UIButton = null;
            this.PropertyToggleBtn_UIToggle = null;
            this.AddPointToggleBtn_UIToggle = null;
            this.InfoToggleBtn_UIToggle = null;
            this.ProfessionBtn_UIButton = null;
            this.ProfessionBtn_UISprite = null;
            this.ChangeNameBtn_UIButton = null;
            this.PropertyNameLabel_UILabel = null;
            this.PropertyFightNum_UILabel = null;
            this.CampSprite_UISprite = null;
            this.AppellationBtn_UIButton = null;
            this.AppellationLabel_UILabel = null;
            this.HeroModelParent = null;
            this.PropertyLevelLabel_UILabel = null;
            this.ExpSlider_UISlider = null;
            this.ExpLabel_UILabel = null;
            this.NoteBtn_UIButton = null;
            this.StoreExpLabel_UILabel = null;
            this.BasePropertyTable_UITable = null;
            this.HighPropertyBtn_UIButton = null;
            this.CorporeityNum_UILabel = null;
            this.PowerNum_UILabel = null;
            this.IntelligenceNum_UILabel = null;
            this.SkillNum_UILabel = null;
            this.AgilityNum_UILabel = null;
            this.FightPropertyTable_UITable = null;
            this.VigourSlider_UISlider = null;
            this.VigourSliderLabel_UILabel = null;
            this.VigourUseBtn_UIButton = null;
            this.BasePropertyContainer_UIbutton = null;
            this.FightPropertyContainer_UIbutton = null;
            this.AddPointLeftTable_UITable = null;
            this.RemaindPointLabel = null;
            this.AutoAddPointToggle_UIToggle = null;
            this.ToggleSelectSprite_UISprite = null;
            this.AddPointPlanBtn_UIButton = null;
            this.AddPointRightTable_UITable = null;
            this.ResetPointBtn_UIButton = null;
            this.ConfirmPointBtn_UIButton = null;
            this.PortraitIcon_UIButton = null;
            this.PortraitIcon_UISprite = null;
            this.InfoNameLabel_UILabel = null;
            this.IDLabel_UILabel = null;
            this.LevelLabel_UILabel = null;
            this.CampLabel_UILabel = null;
            this.GroupLabel_UILabel = null;
            this.GroupJobLabel_UILabel = null;
            this.MainJobChangeBtn_UIButton = null;
            this.FirstOccupationLabel_UILabel = null;
            this.SecondOccupationLabel_UILabel = null;
            this.TagEditBtn_UIButton = null;
            this.Table_1_UITable = null;
            this.Table_2_UITable = null;
            this.InfoInputField_UIInput = null;
            this.LikeBtn_UIButton = null;
            this.LikeNum_UILabel = null;
            this.FlowerBtn_UIButton = null;
            this.FlowerNum_UILabel = null;
            this.InfoRightTable_UITable = null;
            this.JingJiAddBtn_UIButton = null;
            this.JingJiScoreIcon_UISprite = null;
            this.JingJiLabel_UILabel = null;
            this.JingJiUseBtn_UIButton = null;
            this.CorpsContributionAddBtn_UIButton = null;
            this.CorpsContributionIcon_UISprite = null;
            this.CorpsContributionLabel_UILabel = null;
            this.CorpsContributionUseBtn_UIButton = null;
            this.MengXinScoreAddBtn_UIButton = null;
            this.MengXinScoreIcon_UISprite = null;
            this.MengXinScoreLabel_UILabel = null;
            this.MengXinScoreUseBtn_UIButton = null;
            this.CountryWarSocreAddBtn_UIButton = null;
            this.CountryWarSocreIcon_UISprite = null;
            this.CountryWarSocreLabel_UILabel = null;
            this.CountryWarSocreUseBtn_UIButton = null;
            this.ForgeSocreAddBtn_UIButton = null;
            this.ForgeSocreIcon_UISprite = null;
            this.ForgeSocreLabel_UILabel = null;
            this.ForgeSocreUseBtn_UIButton = null;
            this.CloseBtn_UIButtonEvt = null;
            this.ProfessionBtn_UIButtonEvt = null;
            this.ChangeNameBtn_UIButtonEvt = null;
            this.AppellationBtn_UIButtonEvt = null;
            this.NoteBtn_UIButtonEvt = null;
            this.HighPropertyBtn_UIButtonEvt = null;
            this.VigourUseBtn_UIButtonEvt = null;
            this.AddPointPlanBtn_UIButtonEvt = null;
            this.BasePropertyContainer_UIbuttonEvt = null;
            this.FightPropertyContainer_UIbuttonEvt = null;
            this.AutoAddPointToggleBtn_UIButtonEvt = null;
            this.ResetPointBtn_UIButtonEvt = null;
            this.ConfirmPointBtn_UIButtonEvt = null;
            this.PortraitIcon_UIButtonEvt = null;
            this.MainJobChangeBtn_UIButtonEvt = null;
            this.TagEditBtn_UIButtonEvt = null;
            this.LikeBtn_UIButtonEvt = null;
            this.FlowerBtn_UIButtonEvt = null;
            this.JingJiAddBtn_UIButtonEvt = null;
            this.JingJiUseBtn_UIButtonEvt = null;
            this.CorpsContributionAddBtn_UIButtonEvt = null;
            this.CorpsContributionUseBtn_UIButtonEvt = null;
            this.MengXinScoreAddBtn_UIButtonEvt = null;
            this.MengXinScoreUseBtn_UIButtonEvt = null;
            this.CountryWarSocreAddBtn_UIButtonEvt = null;
            this.CountryWarSocreUseBtn_UIButtonEvt = null;
            this.ForgeSocreAddBtn_UIButtonEvt = null;
            this.ForgeSocreUseBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, PlayerPropertyView.ctor, IPlayerPropertyView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
            GameDebuger.TODO("这里实例化FightProperty，并缓存");
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
            this.UpdatePropertyView(data);
            this.UpdateAddPointPanel(data);
            this.UpdateInfoPanel(data);
            this.UpdateCharactorModel(data);
        },
        InitView: function (data){
            this.InitModel(data);
            this.BasePropertyTable_UITable.Reposition();
            this.InitAddPointPanel(data);
            this.InfoRightTable_UITable.Reposition();
        },
        GetRemainPotentialLabel: function (){
            return this.RemaindPointLabel;
        },
        GetConfirmBtn: function (){
            return this.ConfirmPointBtn_UIButton;
        },
        GetAPLeftTabel: function (){
            return this.AddPointLeftTable_UITable;
        },
        GetApRightTabel: function (){
            return this.AddPointRightTable_UITable;
        },
        GetFightPropertyTabel: function (){
            return this.FightPropertyTable_UITable;
        },
        GetToggleSelect: function (){
            return this.ToggleSelectSprite_UISprite;
        },
        UpdatePropertyView: function (data){
            GameDebuger.TODO("UIHelper.SetItemIcon(ProfessionBtn_UISprite, data.GetCharactorDto.Element);");
            this.PropertyNameLabel_UILabel.set_text(data.get_GetPlayerModel().GetPlayerName());
            GameDebuger.TODO("SetLabelContent(PropertyFightNum_UILabel, data.GetCharactorDto.FightNum.ToString());");
            GameDebuger.TODO("UIHelper.SetItemIcon(CampSprite_UISprite, data.GetPlayerDto.Camp);");
            GameDebuger.TODO("SetLabelContent(AppellationLabel_UILabel, data.GetCharactorDto.Appellation);");
            this.PropertyLevelLabel_UILabel.set_text(data.get_GetPlayerModel().GetPlayerLevel().toString());
            GameDebuger.TODO("SetSlider(ExpSlider_UISlider, data.GetPlayerModel.CurentExp, data.GetPlayerModel.TotalSpellExp);");
            this.ExpLabel_UILabel.set_text(data.get_GetPlayerModel().get_ReserveExp().toString());
            this.CorporeityNum_UILabel.set_text(((data.get_GetPlayerModel().GetPropertyByType(AppDto.CharactorDto.CharacterPropertyType.PHYSIQUE)) | 0).toString());
            this.PowerNum_UILabel.set_text(((data.get_GetPlayerModel().GetPropertyByType(AppDto.CharactorDto.CharacterPropertyType.POWER)) | 0).toString());
            this.IntelligenceNum_UILabel.set_text(((data.get_GetPlayerModel().GetPropertyByType(AppDto.CharactorDto.CharacterPropertyType.INTELLECT)) | 0).toString());
            this.SkillNum_UILabel.set_text(((data.get_GetPlayerModel().GetPropertyByType(AppDto.CharactorDto.CharacterPropertyType.TECHNIQUE)) | 0).toString());
            this.AgilityNum_UILabel.set_text(((data.get_GetPlayerModel().GetPropertyByType(AppDto.CharactorDto.CharacterPropertyType.AGILITY)) | 0).toString());
            GameDebuger.TODO("战斗属性更新");
            this.SetSlider(this.VigourSlider_UISlider, data.get_GetPlayerModel().get_Vigour(), data.get_GetPlayerModel().get_VigourMax());
            this.VigourSliderLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", data.get_GetPlayerModel().get_Vigour(), data.get_GetPlayerModel().get_VigourMax()));
        },
        UpdateAddPointPanel: function (data){
            this.RemaindPointLabel.set_text(System.String.Format$$String$$Object("{0}", data.get_GetCharactorDto().potential));
            GameDebuger.TODO("SetLabelContent(BloodLabel_UILabel, data.GetPlayerModel.GetBaseProperty(BloodId));\r\n            SetLabelContent(PhysicalAttackLabel_UILabel, data.GetPlayerModel.GetBaseProperty(PhysicalAttackId));\r\n            SetLabelContent(PhysicalDefenseLabel_UILabel, data.GetPlayerModel.GetBaseProperty(PhysicalDefenseId));\r\n            SetLabelContent(MagicAttackLabel_UILabel, data.GetPlayerModel.GetBaseProperty(MagicAttackId));\r\n            SetLabelContent(MagicDefenseLabel_UILabel, data.GetPlayerModel.GetBaseProperty(MagicDefenseId));\r\n            SetLabelContent(HitLabel_UILabel, data.GetPlayerModel.GetBaseProperty(HitId));\r\n            SetLabelContent(DodgeLabel_UILabel, data.GetPlayerModel.GetBaseProperty(DodgeId));\r\n            SetLabelContent(CriticalLabel_UILabel, data.GetPlayerModel.GetBaseProperty((CriticalId));\r\n            SetLabelContent(SpeedLabel_UILabel, data.GetPlayerModel.GetBaseProperty(SpeedId));\r\n        ");
            GameDebuger.TODO("SetLabelContent(ConstitutionLabel_UILabel, data.GetPlayerPropertyInfo.playerDto.aptitudeProperties.constitution);\r\n            SetLabelContent(StrengthLabel_UILabel, data.GetPlayerPropertyInfo.playerDto.aptitudeProperties.strength);\r\n            SetLabelContent(IntelligenceLabel_UILabel, data.GetPlayerPropertyInfo.playerDto.aptitudeProperties.intelligent);\r\n            SetLabelContent(SkillLabel_UILabel, data.GetPlayerPropertyInfo.playerDto.aptitudeProperties.skill);\r\n            SetLabelContent(CorporeityLabel_UILabel, data.GetPlayerPropertyInfo.playerDto.aptitudeProperties.dexterity);\r\n        ");
        },
        UpdateInfoPanel: function (data){
            GameDebuger.TODO("UIHelper.SetItemIcon(PortraitIcon_UISprite, data.GetGeneralCharactor.texture.ToString());");
            this.InfoNameLabel_UILabel.set_text(data.get_GetPlayerModel().GetPlayerName().toString());
            this.IDLabel_UILabel.set_text(data.get_GetPlayerDto().id.toString());
            this.LevelLabel_UILabel.set_text(data.get_GetPlayerModel().GetPlayerLevel().toString());
            GameDebuger.TODO("SetLabelContent(CampLabel_UILabel, data.GetPlayerDto.Camp);");
            GameDebuger.TODO("SetLabelContent(GroupLabel_UILabel, data.GetPlayerDto.Group);");
            GameDebuger.TODO("SetLabelContent(GroupJobLabel_UILabel, data.GetPlayerDto.GroupJob);");
            GameDebuger.TODO("SetLabelContent(FirstOccupationLabel_UILabel, data.GetPlayerDto.FirstJob);");
            GameDebuger.TODO("SetLabelContent(SecondOccupationLabel_UILabel, data.GetPlayerDto.SecondJob);");
            for (var i = 0; i < this.Table_1_UITable.get_transform().get_childCount(); i++){
                var go = this.Table_1_UITable.get_transform().GetChild(i).get_gameObject();
                if (UnityEngine.Object.op_Inequality(go, null))
                    UnityEngine.Object.DestroyImmediate$$Object(go);
            }
            for (var i = 0; i < this.Table_2_UITable.get_transform().get_childCount(); i++){
                var go = this.Table_2_UITable.get_transform().GetChild(i).get_gameObject();
                if (UnityEngine.Object.op_Inequality(go, null))
                    UnityEngine.Object.DestroyImmediate$$Object(go);
            }
            GameDebuger.TODO("\r\n            for (int i = 0; i < data.GetPlayerDto.CurrentTagNameList.count; i++)\r\n            {\r\n                if (i < 3) {\r\n                    Table_1_UITable.gameObject.AddChildAndAdjustDepth(\'CharacterTagItem\');\r\n                    //设置tag属性TODO\r\n                }\r\n                else\r\n                {\r\n                    Table_2_UITable.gameObject.AddChildAndAdjustDepth(\'CharacterTagItem\');\r\n                //设置tag属性TODO\r\n            }\r\n            }\r\n        ");
            this.Table_1_UITable.Reposition();
            this.Table_2_UITable.Reposition();
            GameDebuger.TODO("SetLabelContent(LikeNum_UILabel, data.GetPlayerDto.Like.ToString());");
            GameDebuger.TODO("SetLabelContent(FlowerNum_UILabel, data.GetPlayerDto.Flower.ToString());");
            GameDebuger.TODO("UIHelper.SetItemIcon(JingJiScoreIcon_UISprite, data.GetPlayerDto.JingJiIcon);");
            GameDebuger.TODO(" SetLabelContent(JingJiLabel_UILabel, data.GetPlayerDto.JingJiScore.ToString());  ");
            GameDebuger.TODO("UIHelper.SetItemIcon(CorpsContributionIcon_UISprite, data.GetPlayerDto.CorpsContributionIcon);");
            GameDebuger.TODO(" SetLabelContent(CorpsContributionLabel_UILabel, data.GetPlayerDto.CorpsContribution.ToString());  ");
            GameDebuger.TODO("UIHelper.SetItemIcon(MengXinScoreIcon_UISprite, data.GetPlayerDto.MengXinScoreIcon);");
            GameDebuger.TODO(" SetLabelContent(MengXinScoreLabel_UILabel, data.GetPlayerDto.MengXinScore.ToString());  ");
            GameDebuger.TODO("UIHelper.SetItemIcon(CountryWarSocreIcon_UISprite, data.GetPlayerDto.CountryWarSocreIcon);");
            GameDebuger.TODO(" SetLabelContent(CountryWarSocreLabel_UILabel, data.GetPlayerDto.CountryWarSocre.ToString());  ");
            GameDebuger.TODO("UIHelper.SetItemIcon(ForgeSocreIcon_UISprite, data.GetPlayerDto.ForgeSocreIcon);");
            GameDebuger.TODO(" SetLabelContent(ForgeSocreLabel_UILabel, data.GetPlayerDto.ForgeSocre.ToString());  ");
        },
        InitModel: function (data){
            if (UnityEngine.Object.op_Equality(this.modelDisplayerController, null))
                this.modelDisplayerController = ModelDisplayController.GenerateUICom(this.HeroModelParent.get_transform(), -1);
            this.modelDisplayerController.Init$$Int32$$Int32$$Single$$Single(400, 400, 0, 1.5);
            this.modelDisplayerController.SetBoxCollider(350, 300);
        },
        UpdateCharactorModel: function (data){
            if (UnityEngine.Object.op_Inequality(this.modelDisplayerController, null))
                this.modelDisplayerController.SetupMainRoleModel(false);
        },
        InitAddPointPanel: function (data){
            this.RemaindPointLabel.set_text(System.String.Format$$String$$Object("{0}", data.get_GetCharactorDto().potential));
        },
        SetSlider: function (slider, min, max){
            if (UnityEngine.Object.op_Inequality(slider, null)){
                if (min == 0)
                    slider.set_value(0);
                else
                    slider.set_value(min / max);
            }
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindGameObject(root, "BaseWindow/CloseButton" /* CloseBtn_UIButtonStr */);
            this.PropertyToggleBtn_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/PropertyToggleBtn" /* PropertyToggleBtn_UIToggleStr */);
            this.AddPointToggleBtn_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/AddPointToggleBtn" /* AddPointToggleBtn_UIToggleStr */);
            this.InfoToggleBtn_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "ContentWindow/ToggleGroup/InfoToggleBtn" /* InfoToggleBtn_UIToggleStr */);
            this.ProfessionBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/ProfessionBtn" /* ProfessionBtn_UIButtonStr */);
            this.ProfessionBtn_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/ProfessionBtn" /* ProfessionBtn_UIButtonStr */);
            this.ChangeNameBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/ChangeNameBtn" /* ChangeNameBtn_UIButtonStr */);
            this.PropertyNameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/NameContainer/NameLabelBg/PropertyNameLabel" /* PropertyNameLabel_UILabelStr */);
            this.PropertyFightNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/FightContent/FightNum" /* PropertyFightNum_UILabelStr */);
            this.CampSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/CampSprite" /* CampSprite_UISpriteStr */);
            this.AppellationBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/Sprite/AppellationBtn" /* AppellationBtn_UIButtonStr */);
            this.AppellationLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/AppellationContainer/AppellationLabel" /* AppellationLabel_UILabelStr */);
            this.HeroModelParent = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/PortraitContainer/HeroModelParent" /* HeroModelParentStr */);
            this.PropertyLevelLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/LevelLabel" /* PropertyLevelLabel_UILabelStr */);
            this.ExpSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/ExpSlider" /* ExpSlider_UISliderStr */);
            this.ExpLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/ExpSlider/ExpLabel" /* ExpLabel_UILabelStr */);
            this.NoteBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/NoteBtn" /* NoteBtn_UIButtonStr */);
            this.StoreExpLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/LevelContainer/StoreExpLabel" /* StoreExpLabel_UILabelStr */);
            this.BasePropertyTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable" /* BasePropertyTable_UITableStr */);
            this.HighPropertyBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/HighPropertyBtn" /* HighPropertyBtn_UIButtonStr */);
            this.CorporeityNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Corporeity/CorporeityNum" /* CorporeityNum_UILabelStr */);
            this.PowerNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Power/PowerNum" /* PowerNum_UILabelStr */);
            this.IntelligenceNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Intelligence/IntelligenceNum" /* IntelligenceNum_UILabelStr */);
            this.SkillNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Skill/SkillNum" /* SkillNum_UILabelStr */);
            this.AgilityNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer/BasePropertyTable/Agility/AgilityNum" /* AgilityNum_UILabelStr */);
            this.FightPropertyTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/FightPropertyContainer/FightPropertyTable" /* FightPropertyTable_UITableStr */);
            this.VigourSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/VigourContainer/VigourSlider" /* VigourSlider_UISliderStr */);
            this.VigourSliderLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/PropertyPanel/VigourContainer/VigourSlider/VigourSliderLabel" /* VigourSliderLabel_UILabelStr */);
            this.VigourUseBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/VigourContainer/VigourUseBtn" /* VigourUseBtn_UIButtonStr */);
            this.BasePropertyContainer_UIbutton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/BasePropertyContainer" /* BasePropertyContainer_UIbuttonStr */);
            this.FightPropertyContainer_UIbutton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/PropertyPanel/FightPropertyContainer" /* FightPropertyContainer_UIbuttonStr */);
            this.RemaindPointLabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/RemaindPoint/RemaindPointLabel" /* RemaindPointLabel_UILabelStr */);
            this.AddPointLeftTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/AddPointPanel/LeftContainer/PropertyBG/AddPointLeftTable" /* AddPointLeftTable_UITableStr */);
            this.AutoAddPointToggle_UIToggle = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/AutoAddPointToggle" /* AutoAddPointToggle_UIToggleStr */);
            this.ToggleSelectSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/AutoAddPointToggle/ToggleSelectSprite" /* ToggleSelectSprite_UISpriteStr */);
            this.AddPointPlanBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/AddPointPanel/TopRightContainer/AddPointPlanBtn" /* AddPointPlanBtn_UIButtonStr */);
            this.AddPointRightTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/AddPointPanel/MiddleContainer/AddPointRightTable" /* AddPointRightTable_UITableStr */);
            this.ResetPointBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/AddPointPanel/BottomRightContainer/ResetPointBtn" /* ResetPointBtn_UIButtonStr */);
            this.ConfirmPointBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ToggleContent/AddPointPanel/BottomRightContainer/ConfirmPointBtn" /* ConfirmPointBtn_UIButtonStr */);
            this.PortraitIcon_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/PortraitIcon" /* PortraitIcon_UIButtonStr */);
            this.PortraitIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/PortraitIcon" /* PortraitIcon_UIButtonStr */);
            this.InfoNameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/TopRight/InfoNameLabel" /* InfoNameLabel_UILabelStr */);
            this.IDLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/TopRight/IDLabel" /* IDLabel_UILabelStr */);
            this.LevelLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/TopRight/LevelLabel" /* LevelLabel_UILabelStr */);
            this.CampLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/UnderTop/CampLabel" /* CampLabel_UILabelStr */);
            this.GroupLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/UnderTop/GroupLabel" /* GroupLabel_UILabelStr */);
            this.GroupJobLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/Top/UnderTop/GroupJobLabel" /* GroupJobLabel_UILabelStr */);
            this.MainJobChangeBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/MiddleContainer/MainJobChangeBtn" /* MainJobChangeBtn_UIButtonStr */);
            this.FirstOccupationLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/MiddleContainer/FirstOccupationLabel" /* FirstOccupationLabel_UILabelStr */);
            this.SecondOccupationLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/MiddleContainer/SecondOccupationLabel" /* SecondOccupationLabel_UILabelStr */);
            this.TagEditBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/TagEditBtn" /* TagEditBtn_UIButtonStr */);
            this.Table_1_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/Table_1" /* Table_1_UITableStr */);
            this.Table_2_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/Table_2" /* Table_2_UITableStr */);
            this.InfoInputField_UIInput = GameObjectExt.FindScript$1(UIInput.ctor, root, "ContentWindow/ToggleContent/InfoPanel/LeftContainer/BottomContainer/InputField" /* InfoInputField_UIInputStr */);
            this.LikeBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/LikeBtn" /* LikeBtn_UIButtonStr */);
            this.LikeNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/LikeNum" /* LikeNum_UILabelStr */);
            this.FlowerBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/FlowerBtn" /* FlowerBtn_UIButtonStr */);
            this.FlowerNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/TopContainer/FlowerNum" /* FlowerNum_UILabelStr */);
            this.InfoRightTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable" /* InfoRightTable_UITableStr */);
            this.JingJiAddBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/JingJiScore/JingJiAddBtn" /* JingJiAddBtn_UIButtonStr */);
            this.JingJiScoreIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/TaScoreTableble/JingJiScore/JingJiScoreIcon" /* JingJiScoreIcon_UISpriteStr */);
            this.JingJiLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/JingJiScore/JingJiLabel" /* JingJiLabel_UILabelStr */);
            this.JingJiUseBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/JingJiScore/JingJiUseBtn" /* JingJiUseBtn_UIButtonStr */);
            this.CorpsContributionAddBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionAddBtn" /* CorpsContributionAddBtn_UIButtonStr */);
            this.CorpsContributionIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionIcon" /* CorpsContributionIcon_UISpriteStr */);
            this.CorpsContributionLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionLabel" /* CorpsContributionLabel_UILabelStr */);
            this.CorpsContributionUseBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CorpsContribution/CorpsContributionUseBtn" /* CorpsContributionUseBtn_UIButtonStr */);
            this.MengXinScoreAddBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreAddBtn" /* MengXinScoreAddBtn_UIButtonStr */);
            this.MengXinScoreIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreIcon" /* MengXinScoreIcon_UISpriteStr */);
            this.MengXinScoreLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreLabel" /* MengXinScoreLabel_UILabelStr */);
            this.MengXinScoreUseBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/MengXinScore/MengXinScoreUseBtn" /* MengXinScoreUseBtn_UIButtonStr */);
            this.CountryWarSocreAddBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreAddBtn" /* CountryWarSocreAddBtn_UIButtonStr */);
            this.CountryWarSocreIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreIcon" /* CountryWarSocreIcon_UISpriteStr */);
            this.CountryWarSocreLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreLabel" /* CountryWarSocreLabel_UILabelStr */);
            this.CountryWarSocreUseBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/CountryWarSocre/CountryWarSocreUseBtn" /* CountryWarSocreUseBtn_UIButtonStr */);
            this.ForgeSocreAddBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreAddBtn" /* ForgeSocreAddBtn_UIButtonStr */);
            this.ForgeSocreIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreIcon" /* ForgeSocreIcon_UISpriteStr */);
            this.ForgeSocreLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreLabel" /* ForgeSocreLabel_UILabelStr */);
            this.ForgeSocreUseBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentWindow/ToggleContent/InfoPanel/RightContainer/ScoreTable/ForgeSocre/ForgeSocreUseBtn" /* ForgeSocreUseBtn_UIButtonStr */);
        },
        InitReactiveEvents: function (){
            this.AutoAddPointToggleBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.AutoAddPointToggle_UIToggle);
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CloseBtn_UIButton);
            this.ProfessionBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ProfessionBtn_UIButton);
            this.ChangeNameBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ChangeNameBtn_UIButton);
            this.AppellationBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.AppellationBtn_UIButton);
            this.NoteBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.NoteBtn_UIButton);
            this.HighPropertyBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.HighPropertyBtn_UIButton);
            this.VigourUseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.VigourUseBtn_UIButton);
            this.AddPointPlanBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.AddPointPlanBtn_UIButton);
            this.ResetPointBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ResetPointBtn_UIButton);
            this.ConfirmPointBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.ConfirmPointBtn_UIButton);
            this.PortraitIcon_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.PortraitIcon_UIButton);
            this.MainJobChangeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.MainJobChangeBtn_UIButton);
            this.TagEditBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.TagEditBtn_UIButton);
            this.LikeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.LikeBtn_UIButton);
            this.FlowerBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.FlowerBtn_UIButton);
            this.JingJiAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.JingJiAddBtn_UIButton);
            this.JingJiUseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.JingJiUseBtn_UIButton);
            this.CorpsContributionAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CorpsContributionAddBtn_UIButton);
            this.CorpsContributionUseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CorpsContributionUseBtn_UIButton);
            this.MengXinScoreAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.MengXinScoreAddBtn_UIButton);
            this.MengXinScoreUseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.MengXinScoreUseBtn_UIButton);
            this.CountryWarSocreAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CountryWarSocreAddBtn_UIButton);
            this.CountryWarSocreUseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CountryWarSocreUseBtn_UIButton);
            this.ForgeSocreAddBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ForgeSocreAddBtn_UIButton);
            this.ForgeSocreUseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.ForgeSocreUseBtn_UIButton);
            this.BasePropertyContainer_UIbuttonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.BasePropertyContainer_UIbutton);
            this.FightPropertyContainer_UIbuttonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.FightPropertyContainer_UIbutton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.ProfessionBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ProfessionBtn_UIButtonEvt);
            this.ChangeNameBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ChangeNameBtn_UIButtonEvt);
            this.AppellationBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AppellationBtn_UIButtonEvt);
            this.NoteBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.NoteBtn_UIButtonEvt);
            this.HighPropertyBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.HighPropertyBtn_UIButtonEvt);
            this.VigourUseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.VigourUseBtn_UIButtonEvt);
            this.AddPointPlanBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AddPointPlanBtn_UIButtonEvt);
            this.AutoAddPointToggleBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AutoAddPointToggleBtn_UIButtonEvt);
            this.ResetPointBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ResetPointBtn_UIButtonEvt);
            this.ConfirmPointBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ConfirmPointBtn_UIButtonEvt);
            this.PortraitIcon_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.PortraitIcon_UIButtonEvt);
            this.MainJobChangeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.MainJobChangeBtn_UIButtonEvt);
            this.TagEditBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TagEditBtn_UIButtonEvt);
            this.LikeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.LikeBtn_UIButtonEvt);
            this.FlowerBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.FlowerBtn_UIButtonEvt);
            this.JingJiAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.JingJiAddBtn_UIButtonEvt);
            this.JingJiUseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.JingJiUseBtn_UIButtonEvt);
            this.CorpsContributionAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CorpsContributionAddBtn_UIButtonEvt);
            this.CorpsContributionUseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CorpsContributionUseBtn_UIButtonEvt);
            this.MengXinScoreAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.MengXinScoreAddBtn_UIButtonEvt);
            this.MengXinScoreUseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.MengXinScoreUseBtn_UIButtonEvt);
            this.CountryWarSocreAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CountryWarSocreAddBtn_UIButtonEvt);
            this.CountryWarSocreUseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CountryWarSocreUseBtn_UIButtonEvt);
            this.ForgeSocreAddBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ForgeSocreAddBtn_UIButtonEvt);
            this.ForgeSocreUseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ForgeSocreUseBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnProfessionBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnProfessionBtn_UIButtonClick: function (){
            return this.ProfessionBtn_UIButtonEvt;
        },
        OnChangeNameBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnChangeNameBtn_UIButtonClick: function (){
            return this.ChangeNameBtn_UIButtonEvt;
        },
        OnAppellationBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAppellationBtn_UIButtonClick: function (){
            return this.AppellationBtn_UIButtonEvt;
        },
        OnNoteBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnNoteBtn_UIButtonClick: function (){
            return this.NoteBtn_UIButtonEvt;
        },
        OnHighPropertyBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnHighPropertyBtn_UIButtonClick: function (){
            return this.HighPropertyBtn_UIButtonEvt;
        },
        OnVigourUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnVigourUseBtn_UIButtonClick: function (){
            return this.VigourUseBtn_UIButtonEvt;
        },
        OnAddPointPlanBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAddPointPlanBtn_UIButtonClick: function (){
            return this.AddPointPlanBtn_UIButtonEvt;
        },
        OnBasePropertyContainer_UIbuttonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnBasePropertyContainer_UIbuttonClick: function (){
            return this.BasePropertyContainer_UIbuttonEvt;
        },
        OnFightPropertyContainer_UIbuttonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnFightPropertyContainer_UIbuttonClick: function (){
            return this.FightPropertyContainer_UIbuttonEvt;
        },
        OnAutoAddPointBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAutoAddPointBtn_UIButtonClick: function (){
            return this.AutoAddPointToggleBtn_UIButtonEvt;
        },
        OnResetPointBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnResetPointBtn_UIButtonClick: function (){
            return this.ResetPointBtn_UIButtonEvt;
        },
        OnConfirmPointBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnConfirmPointBtn_UIButtonClick: function (){
            return this.ConfirmPointBtn_UIButtonEvt;
        },
        OnPortraitIcon_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnPortraitIcon_UIButtonClick: function (){
            return this.PortraitIcon_UIButtonEvt;
        },
        OnMainJobChangeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnMainJobChangeBtn_UIButtonClick: function (){
            return this.MainJobChangeBtn_UIButtonEvt;
        },
        OnTagEditBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTagEditBtn_UIButtonClick: function (){
            return this.TagEditBtn_UIButtonEvt;
        },
        OnLikeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnLikeBtn_UIButtonClick: function (){
            return this.LikeBtn_UIButtonEvt;
        },
        OnFlowerBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnFlowerBtn_UIButtonClick: function (){
            return this.FlowerBtn_UIButtonEvt;
        },
        OnJingJiAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnJingJiAddBtn_UIButtonClick: function (){
            return this.JingJiAddBtn_UIButtonEvt;
        },
        OnJingJiUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnJingJiUseBtn_UIButtonClick: function (){
            return this.JingJiUseBtn_UIButtonEvt;
        },
        OnCorpsContributionAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCorpsContributionAddBtn_UIButtonClick: function (){
            return this.CorpsContributionAddBtn_UIButtonEvt;
        },
        OnCorpsContributionUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCorpsContributionUseBtn_UIButtonClick: function (){
            return this.CorpsContributionUseBtn_UIButtonEvt;
        },
        OnMengXinScoreAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnMengXinScoreAddBtn_UIButtonClick: function (){
            return this.MengXinScoreAddBtn_UIButtonEvt;
        },
        OnMengXinScoreUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnMengXinScoreUseBtn_UIButtonClick: function (){
            return this.MengXinScoreUseBtn_UIButtonEvt;
        },
        OnCountryWarSocreAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCountryWarSocreAddBtn_UIButtonClick: function (){
            return this.CountryWarSocreAddBtn_UIButtonEvt;
        },
        OnCountryWarSocreUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCountryWarSocreUseBtn_UIButtonClick: function (){
            return this.CountryWarSocreUseBtn_UIButtonEvt;
        },
        OnForgeSocreAddBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnForgeSocreAddBtn_UIButtonClick: function (){
            return this.ForgeSocreAddBtn_UIButtonEvt;
        },
        OnForgeSocreUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnForgeSocreUseBtn_UIButtonClick: function (){
            return this.ForgeSocreUseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(PlayerPropertyView);
var ProfessionDataMgr = {
    fullname: "ProfessionDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProfessionDataMgr._ins = null;
        },
        Instance$$: "ProfessionDataMgr",
        get_Instance: function (){
            if (ProfessionDataMgr._ins == null)
                ProfessionDataMgr._ins = new ProfessionDataMgr.ctor();
            return ProfessionDataMgr._ins;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.stream = new UniRx.Subject$1.ctor(IProfessionData.ctor);
            this._data = new ProfessionDataMgr.ProfessionData.ctor();
            System.Object.ctor.call(this);
        },
        Stream$$: "UniRx.IObservable`1[[IProfessionData]]",
        get_Stream: function (){
            return this.stream;
        },
        Dispose: function (){
            this._data.Dispose();
            this.stream = UniRx.SubjectExtensions.CloseOnceNull$1(IProfessionData.ctor, this.stream);
        }
    }
};
JsTypes.push(ProfessionDataMgr);
var IProfessionData = {
    fullname: "IProfessionData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IProfessionData);
var IProfessionView = {
    fullname: "IProfessionView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IProfessionView);
var ProfessionView = {
    fullname: "ProfessionView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            ProfessionView.NAME = "ProfessionView";
            ProfessionView.CloseBtn_UIButtonStr = "CloseBtn";
            ProfessionView.PortraitSprite_UISpriteStr = "PortraitSprite";
            ProfessionView.ProfessionNameLabel_UILabelStr = "RightContainer/ProfessionNameLabel";
            ProfessionView.SummaryLabel_UILabelStr = "RightContainer/SummaryLabel";
            ProfessionView.MainPropertyLabel_UILabelStr = "RightContainer/MainProperty/MainPropertyLabel";
            ProfessionView.MainElementLabel_UILabelStr = "RightContainer/MainElement/MainElementLabel";
            ProfessionView.DesLabel_UILabelStr = "RightContainer/DesLabel";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IProfessionView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.PortraitSprite_UISprite = null;
            this.ProfessionNameLabel_UILabel = null;
            this.SummaryLabel_UILabel = null;
            this.MainPropertyLabel_UILabel = null;
            this.MainElementLabel_UILabel = null;
            this.DesLabel_UILabel = null;
            this.CloseBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, ProfessionView.ctor, IProfessionView.ctor, IProfessionData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
            UIHelper.SetPetIcon(this.PortraitSprite_UISprite, data.get_GetPlayerDto().get_charactor().texture.toString(), false);
            this.ProfessionNameLabel_UILabel.set_text(data.get_GetCharactorDto().name);
            GameDebuger.TODO("SummaryLabel_UILabel.text = data.GetCharactorDto.summary;");
            GameDebuger.TODO("MainPropertyLabel_UILabel.text = data.GetCharactorDto.mainProperty;");
            GameDebuger.TODO("MainElementLabel_UILabel.text = data.GetCharactorDto.mainElementProperty;");
            GameDebuger.TODO("DesLabel_UILabel.text = data.GetCharactorDto.Des;");
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindGameObject(root, "CloseBtn" /* CloseBtn_UIButtonStr */);
            this.PortraitSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "PortraitSprite" /* PortraitSprite_UISpriteStr */);
            this.ProfessionNameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "RightContainer/ProfessionNameLabel" /* ProfessionNameLabel_UILabelStr */);
            this.SummaryLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "RightContainer/SummaryLabel" /* SummaryLabel_UILabelStr */);
            this.MainPropertyLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "RightContainer/MainProperty/MainPropertyLabel" /* MainPropertyLabel_UILabelStr */);
            this.MainElementLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "RightContainer/MainElement/MainElementLabel" /* MainElementLabel_UILabelStr */);
            this.DesLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "RightContainer/DesLabel" /* DesLabel_UILabelStr */);
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CloseBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(ProfessionView);
var PropertyInfoItemController = {
    fullname: "PropertyInfoItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.propertyID = 0;
            this.origin = 0;
            this.addNum = 0;
            MonolessViewController$1.ctor.call(this, PropertyInfoItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        AddNum$$: "System.Single",
        get_AddNum: function (){
            return this.addNum;
        },
        set_AddNum: function (value){
            this.addNum = value;
        },
        Origin$$: "System.Int32",
        get_Origin: function (){
            return this.origin;
        },
        Init: function (id, data){
            this.propertyID = id;
            var ca = data.get_GetPlayerModel().GetCharacterAbilityByID(id);
            this.get_View().titleLabel_UILabel.set_text(ca.name);
            this.origin = ((data.get_GetPlayerModel().GetPropertyByID(id)) | 0);
            this.get_View().NumLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color((this.origin.toString()), ColorConstantV3.Color_Black));
        },
        UpdateView: function (data){
            this.origin = ((data.get_GetPlayerModel().GetPropertyByID(this.propertyID)) | 0);
            this.addNum = 0;
            if (this.addNum == 0){
                this.get_View().NumLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color((this.origin.toString()), ColorConstantV3.Color_Black));
            }
            else if (this.addNum > 0){
                this.get_View().NumLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color(((((this.origin + this.addNum)) | 0).toString()), ColorConstantV3.Color_Green));
            }
        },
        PreSetNum: function (add){
            this.addNum += add;
            var temp = (this.addNum | 0);
            if (temp == 0){
                this.get_View().NumLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color((this.origin.toString()), ColorConstantV3.Color_Black));
            }
            else if (temp > 0){
                this.get_View().NumLabel_UILabel.set_text(AppStringHelper.WrapColor$$String$$Color(((this.origin + (this.addNum | 0)).toString()), ColorConstantV3.Color_Green));
            }
        },
        SetIntoProperty: function (add, data){
            data.get_GetPlayerModel().SetPropertyByID(this.propertyID, add + data.get_GetPlayerModel().GetPropertyByID(this.propertyID));
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(PropertyInfoItemController);
var PropertyInfoItem = {
    fullname: "PropertyInfoItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            PropertyInfoItem.NAME = "PropertyInfoItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.titleLabel_UILabel = null;
            this.NumLabel_UILabel = null;
            this.AddLabel_UILabel = null;
            this.Icon_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.titleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "titleLabel");
            this.NumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "NumLabel");
            this.AddLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "AddLabel");
            this.Icon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "Icon");
        }
    }
};
JsTypes.push(PropertyInfoItem);
var PropertyTipController = {
    fullname: "PropertyTipController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, PropertyTip.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            UICamera.onClick = $RemoveDelegate(UICamera.onClick, $CreateDelegate(this, this.Close));
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        Init: function (type, idList, data){
            if (type == 1)
                this.get_View().TitleLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}{1}属性效果", AppStringHelper.WrapColor$$String$$Color((data.get_GetCharactorDto().charactorType).toString(), ColorConstantV3.Color_Blue), AppStringHelper.WrapColor$$String$$Color("基础", ColorConstantV3.Color_Blue)));
            else
                this.get_View().TitleLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}{1}属性效果", AppStringHelper.WrapColor$$String$$Color((data.get_GetCharactorDto().charactorType).toString(), ColorConstantV3.Color_Blue), AppStringHelper.WrapColor$$String$$Color("战斗", ColorConstantV3.Color_Blue)));
            for (var i = 0; i < idList.get_Count(); i++){
                var com = this.AddChild$2(PropertyTipItemController.ctor, PropertyTipItem.ctor, this.get_View().Table_UITable.get_gameObject(), "PropertyTipItem" /* PropertyTipItem.NAME */, "");
                com.Init(type, idList.get_Item$$Int32(i), data);
            }
            this.get_View().Table_UITable.Reposition();
        },
        Close: function (go){
            this.RemoveChild$2(PropertyTipController.ctor, PropertyTip.ctor, this);
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(PropertyTipController);
var PropertyTip = {
    fullname: "PropertyTip",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            PropertyTip.NAME = "PropertyTip";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel_UILabel = null;
            this.Table_UITable = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TitleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "BG/TitleLabel");
            this.Table_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "BG/ScrollView/Table");
        }
    }
};
JsTypes.push(PropertyTip);
var PropertyTipItemController = {
    fullname: "PropertyTipItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, PropertyTipItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        Init: function (type, propertyID, data){
            this.get_View().TitleLabel_UILabel.set_text(data.get_GetPlayerModel().GetCharacterAbilityByID(propertyID).name);
            if (type == 1){
                var temp = data.get_GetPlayerModel().get_GetRateDic().get_Item$$TKey(propertyID);
                var sb = new System.Text.StringBuilder.ctor$$String("每点增加");
                var $it54 = temp.GetEnumerator();
                while ($it54.MoveNext()){
                    var item = $it54.get_Current();
                    var ca = data.get_GetPlayerModel().GetCharacterAbilityByID(item.get_Key());
                    if (item.get_Value() == 0)
                        continue;
                    sb.Append$$String(AppStringHelper.WrapColor$$String$$Color(item.get_Value().toString(), ColorConstantV3.Color_Green));
                    sb.Append$$String(ca.name);
                    sb.Append$$String("、");
                }
                sb.Remove(sb.toString().lastIndexOf("、"), 1);
                this.get_View().DesLabel_UILabel.set_text(sb.toString());
            }
            else if (type == 2){
                var ca = data.get_GetPlayerModel().GetCharacterAbilityByID(propertyID);
                this.get_View().DesLabel_UILabel.set_text(ca.desc);
            }
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(PropertyTipItemController);
var PropertyTipItem = {
    fullname: "PropertyTipItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            PropertyTipItem.NAME = "PropertyTipItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel_UILabel = null;
            this.DesLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TitleLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TitleLabel");
            this.DesLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "DesLabel");
        }
    }
};
JsTypes.push(PropertyTipItem);
var IRecommendAddPointUIView = {
    fullname: "IRecommendAddPointUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IRecommendAddPointUIView);
var RecommendAddPointUIView = {
    fullname: "RecommendAddPointUIView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            RecommendAddPointUIView.NAME = "RecommendAddPointUIView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IRecommendAddPointUIView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.ConfirmBtn_UIButton = null;
            this.Table_UITable = null;
            this.CloseBtn_UIButtonEvt = null;
            this.ConfirmBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, RecommendAddPointUIView.ctor, IRecommendAddPointUIView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        GetTable: function (){
            return this.Table_UITable;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseWindow/CloseBtn");
            this.ConfirmBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentWindow/ConfirmBtn");
            this.Table_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/Table");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.ConfirmBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.ConfirmBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.ConfirmBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ConfirmBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnConfirmBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnConfirmBtn_UIButtonClick: function (){
            return this.ConfirmBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(RecommendAddPointUIView);
var RecommendAPItemController = {
    fullname: "RecommendAPItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonolessViewController$1.ctor.call(this, RecommendAPItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (data){
        },
        Init: function (index, toogle, data){
            this.get_View().Toggle_UIToggle.set_value(toogle);
            var tip = data.get_tipsList().get_Item$$Int32(index);
            var sb = new System.Text.StringBuilder.ctor();
            if (tip.physique != 0)
                sb.Append$$String(System.String.Format$$String$$Object("{0}体质 ", tip.physique));
            if (tip.power != 0)
                sb.Append$$String(System.String.Format$$String$$Object("{0}力量 ", tip.power));
            if (tip.intellect != 0)
                sb.Append$$String(System.String.Format$$String$$Object("{0}智力 ", tip.intellect));
            if (tip.technique != 0)
                sb.Append$$String(System.String.Format$$String$$Object("{0}技巧 ", tip.technique));
            if (tip.agility != 0)
                sb.Append$$String(System.String.Format$$String$$Object("{0}敏捷 ", tip.agility));
            AppStringHelper.WrapColor$$String$$Color(sb.toString(), ColorConstantV3.Color_Green);
            sb.Append$$String(tip.desc);
            this.get_View().DescribeLabel_UILabel.set_text(sb.toString());
        },
        InitReactiveEvents: function (){
        },
        ClearReactiveEvents: function (){
        }
    }
};
JsTypes.push(RecommendAPItemController);
var RecommendAPItem = {
    fullname: "RecommendAPItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            RecommendAPItem.NAME = "RecommendAPItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Toggle_UIToggle = null;
            this.DescribeLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.Toggle_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "");
            this.DescribeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "DescribeLabel");
        }
    }
};
JsTypes.push(RecommendAPItem);
var IResetPointUIView = {
    fullname: "IResetPointUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IResetPointUIView);
var ResetPointUIView = {
    fullname: "ResetPointUIView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            ResetPointUIView.NAME = "ResetPointUIView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IResetPointUIView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.Table_UITable = null;
            this.RemaindLabel_UILabel = null;
            this.ItemTable_UITable = null;
            this.CloseBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, ResetPointUIView.ctor, IResetPointUIView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        Table: function (){
            return this.Table_UITable;
        },
        ItemTable: function (){
            return this.ItemTable_UITable;
        },
        RemaindLabel: function (){
            return this.RemaindLabel_UILabel;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseWindow/CloseBtn");
            this.Table_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/MiddleContainer/Table");
            this.RemaindLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentWindow/Label/Sprite/RemaindLabel");
            this.ItemTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ItemTable");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(ResetPointUIView);
var ResetPointItemController = {
    fullname: "ResetPointItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.propertyID = 0;
            this.UseBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, ResetPointItem.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().UseBtn_UIButton.onClick, $CreateDelegate(this, this.OnUseBtnClick));
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().UseBtn_UIButton.onClick, $CreateDelegate(this, this.OnUseBtnClick));
        },
        OnUseBtnClick: function (){
        },
        Init: function (id, data){
            this.propertyID = id;
            this.UpdateView(data);
        },
        UpdateView: function (data){
            var canResetPoint = data.get_GetPlayerModel().get_CanResetPoint();
            if (this.propertyID < 106){
                this.get_View().PropertyNameLabel_UILabel.set_text(data.get_GetPlayerModel().GetCharacterAbilityByID(this.propertyID).name);
                this.get_View().ProPertyNumLabel_UILabel.set_text(((data.get_GetPlayerModel().GetPropertyByID(this.propertyID)) | 0).toString());
                this.get_View().ResetNum_UILabel.set_text((((data.get_GetPlayerModel().GetPropertyByID(this.propertyID)) | 0) - canResetPoint).toString());
            }
            else {
                this.get_View().PropertyNameLabel_UILabel.set_text("全属性重置");
                var totalReset = 0;
                for (var i = 0; i < 5; i++){
                    totalReset += (((data.get_GetPlayerModel().GetPropertyByID(101 + i)) | 0) - canResetPoint);
                }
                this.get_View().ProPertyNumLabel_UILabel.set_text(totalReset.toString());
                this.get_View().ResetNum_UILabel.set_text(totalReset.toString());
            }
        },
        InitReactiveEvents: function (){
            this.UseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().UseBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.UseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.UseBtn_UIButtonEvt);
        },
        OnUseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnUseBtn_UIButtonClick: function (){
            return this.UseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(ResetPointItemController);
var ResetPointItem = {
    fullname: "ResetPointItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            ResetPointItem.NAME = "ResetPointItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.UseBtn_UIButton = null;
            this.ItemIcon_UISprite = null;
            this.ElementLabel_UISprite = null;
            this.ElementLabel_UILabel = null;
            this.ItemNumLabel_UILabel = null;
            this.PropertyNameLabel_UILabel = null;
            this.ProPertyNumLabel_UILabel = null;
            this.ResetNum_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.UseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "UseBtn");
            this.ItemIcon_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "IconBG/ItemIcon");
            this.ElementLabel_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "IconBG/ElementLabel");
            this.ElementLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "IconBG/ElementLabel");
            this.PropertyNameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "PropertyNameLabel");
            this.ItemNumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "IconBG/ItemNumLabel");
            this.ProPertyNumLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ProPertyNumLabel");
            this.ResetNum_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ResetNum");
        }
    }
};
JsTypes.push(ResetPointItem);
var IVigourUIView = {
    fullname: "IVigourUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IVigourUIView);
var VigourUIView = {
    fullname: "VigourUIView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            VigourUIView.NAME = "VigourUIView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IVigourUIView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.AddVigourBtn_UIButton = null;
            this.VigourSlider_UISlider = null;
            this.VigourSliderLabel_UILabel = null;
            this.GoBtn_UIButton = null;
            this.GainVigourScrollView_UIScrollView = null;
            this.LeftGrid_UIGrid = null;
            this.NoteBtn_UIButton = null;
            this.ExchangeVigourScrollView_UIScrollView = null;
            this.RightGrid_UIGrid = null;
            this.CloseBtn_UIButtonEvt = null;
            this.AddVigourBtn_UIButtonEvt = null;
            this.GoBtn_UIButtonEvt = null;
            this.NoteBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, VigourUIView.ctor, IVigourUIView.ctor, IHeroPropertyData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
            this.VigourSlider_UISlider.set_value(data.get_GetPlayerModel().get_Vigour() / data.get_GetPlayerModel().get_VigourMax());
            this.VigourSliderLabel_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}/{1}", data.get_GetPlayerModel().get_Vigour(), data.get_GetPlayerModel().get_VigourMax()));
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindGameObject(root, "BaseWindow/CloseBtn");
            this.AddVigourBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentPanel/TopContainer/AddVigourBtn");
            this.VigourSlider_UISlider = GameObjectExt.FindScript$1(UISlider.ctor, root, "ContentPanel/TopContainer/VigourSlider");
            this.VigourSliderLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentPanel/TopContainer/VigourSlider/VigourSliderLabel");
            this.GoBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentPanel/BottomContainer/GainVigourContainer/GoBtn");
            this.GainVigourScrollView_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "ContentPanel/BottomContainer/GainVigourContainer/ScrollViewBG/GainVigourScroll View");
            this.LeftGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "ContentPanel/BottomContainer/GainVigourContainer/ScrollViewBG/GainVigourScroll View/LeftGrid");
            this.NoteBtn_UIButton = GameObjectExt.FindGameObject(root, "ContentPanel/BottomContainer/GainVigourContainer/NoteBtn");
            this.ExchangeVigourScrollView_UIScrollView = GameObjectExt.FindScript$1(UIScrollView.ctor, root, "ContentPanel/BottomContainer/ExchangeVigour/BG/ExchangeVigourScroll View");
            this.RightGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "ContentPanel/BottomContainer/ExchangeVigour/BG/ExchangeVigourScroll View/RightGrid");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CloseBtn_UIButton);
            this.AddVigourBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.AddVigourBtn_UIButton);
            this.GoBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.GoBtn_UIButton);
            this.NoteBtn_UIButtonEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.NoteBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.AddVigourBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AddVigourBtn_UIButtonEvt);
            this.GoBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.GoBtn_UIButtonEvt);
            this.NoteBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.NoteBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnAddVigourBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAddVigourBtn_UIButtonClick: function (){
            return this.AddVigourBtn_UIButtonEvt;
        },
        OnGoBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnGoBtn_UIButtonClick: function (){
            return this.GoBtn_UIButtonEvt;
        },
        OnNoteBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnNoteBtn_UIButtonClick: function (){
            return this.NoteBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(VigourUIView);
var QRCodeDownloadViewController = {
    fullname: "QRCodeDownloadViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, QRCodeDownloadView.ctor);
        },
        SetData: function (){
        },
        AfterInitView: function (){
            this.get_View().DownloadTip_UILabel.set_text(System.String.Format$$String$$Object$$Object$$Object("[{0}]搜索[{1}]{2}[-]进行下载[-]", "502E10" /* ColorConstantV3.Color_SealBrown_Str */, "1D8E00" /* ColorConstantV3.Color_Green_Strong_Str */, GameSetting.get_GameName()));
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn_UIButton.onClick, $CreateDelegate(this, this.OnCloseBtnClick));
        },
        OnCloseBtnClick: function (){
            ProxyQRCodeModule.CloseQRCodeDownloadView();
        }
    }
};
JsTypes.push(QRCodeDownloadViewController);
var QRCodeEnsureViewController = {
    fullname: "QRCodeEnsureViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._closeCallback = null;
            this._sid = null;
            MonoViewController$1.ctor.call(this, QRCodeEnsureView.ctor);
        },
        SetData: function (closeCallback, sid){
            this._closeCallback = closeCallback;
            this._sid = sid;
        },
        AfterInitView: function (){
            this.get_View().TipLabel_UILabel.set_text(System.String.Format$$String$$Object("{0}电脑微端登录", GameSetting.get_GameName()));
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ReturnBtn_UIButton.onClick, $CreateDelegate(this, this.OnReturnBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().EnsureBtn_UIButton.onClick, $CreateDelegate(this, this.OnEnsureBtnClick));
        },
        OnEnsureBtnClick: function (){
            ServiceProviderManager.RequestQRCodeEnsureLogin(this._sid, WinGameSetting.get_Data().ToBase64UrlSafeJson(), $CreateAnonymousDelegate(this, function (dto){
                if (this.get_View() == null || dto == null){
                    return;
                }
                if (dto.code == 0){
                    ProxyWindowModule.OpenMessageWindow("登录成功", "", null, 3, null, UILayerType.Dialogue, false);
                    this.OnReturnBtnClick();
                }
                else if (dto.code == 1103){
                    ProxyWindowModule.OpenMessageWindow("二维码会话(sid)失效", "", null, 3, null, UILayerType.Dialogue, false);
                    this.OnReturnBtnClick();
                }
                else if (dto.code == 1104){
                    ProxyWindowModule.OpenMessageWindow("账号登录会话(token)失效", "", null, 3, null, UILayerType.Dialogue, false);
                    this.OnReturnBtnClick();
                }
                else {
                    ProxyWindowModule.OpenMessageWindow("登录失败", "", null, 3, null, UILayerType.Dialogue, false);
                    this.OnReturnBtnClick();
                }
            }));
        },
        OnReturnBtnClick: function (){
            ProxyQRCodeModule.CloseQRCodeEnsureView();
            if (this._closeCallback != null){
                this._closeCallback();
                this._closeCallback = null;
            }
        }
    }
};
JsTypes.push(QRCodeEnsureViewController);
var QRCodePayViewController = {
    fullname: "QRCodePayViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._itemDto = null;
            this._quantity = 0;
            this._orderDto = null;
            MonoViewController$1.ctor.call(this, QRCodePayView.ctor);
        },
        SetData: function (itemDto, quantity, orderDto){
            this._itemDto = itemDto;
            this._quantity = quantity;
            this._orderDto = orderDto;
            this.UpdateQRCodeTexture();
        },
        AfterInitView: function (){
            this.get_View().Title_UILabel.set_text(System.String.Format$$String$$Object("请使用{0}移动端扫码支付", GameSetting.get_GameName()));
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().EnsureBtn_UIButton.onClick, $CreateDelegate(this, this.OnReturnBtnClick));
        },
        UpdateQRCodeTexture: function (){
            this.get_View().QRTexture_UITexture.set_mainTexture(AntaresQRCodeUtil.Encode$$String$$Int32(QRCodeHelper.EncodeProductQRCode(this._itemDto, this._quantity, this._orderDto), this.get_View().QRTexture_UITexture.get_width()));
            this.get_View().OverTimeGroup_Transform.get_gameObject().SetActive(false);
        },
        OnReturnBtnClick: function (){
            ProxyQRCodeModule.CloseQRCodePayView();
        }
    }
};
JsTypes.push(QRCodePayViewController);
var QRCodeScanViewController = {
    fullname: "QRCodeScanViewController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            QRCodeScanViewController._internalCloseCallback = null;
            QRCodeScanViewController.CloseDelay = 0.1;
            QRCodeScanViewController.DecodeInterval = 1;
            QRCodeScanViewController.WebCamTextureInitSuccessSize = 100;
        },
        QRCodeScanDelayCallback: function (callback){
            JSTimer.get_Instance().SetupCoolDown("QRCodeScanDelayCallback", 0.1 /* CloseDelay */, null, function (){
                if (callback != null){
                    callback();
                }
                if (QRCodeScanViewController._internalCloseCallback != null){
                    QRCodeScanViewController._internalCloseCallback();
                    QRCodeScanViewController._internalCloseCallback = null;
                }
            }, 0.1, false);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._closeCallback = null;
            this._webCamTexture = null;
            this._lastDecodeTime = 0;
            this._waitServerResponse = false;
            this._firstInit = false;
            this._viewSize = 0;
            MonoViewController$1.ctor.call(this, QRCodeScanView.ctor);
        },
        SetData: function (closeCallback){
            this._closeCallback = closeCallback;
            this._webCamTexture = WebCamTextureHelper.GetNewWebCamTexture(800, 480, true, 0);
            var error = null;
            do{
                if (UnityEngine.Object.op_Equality(this._webCamTexture, null)){
                    error = "找不到可用的后置摄像头";
                    break;
                }
            }
            while (false)
            if (System.String.IsNullOrEmpty(error)){
            }
            else {
                ProxyWindowModule.OpenMessageWindow(error, "获取摄像头错误", null, 3, null, UILayerType.Dialogue, false);
                this.OnReturnBtnClick();
            }
        },
        AfterInitView: function (){
            if (UnityEngine.Object.op_Inequality(this._webCamTexture, null)){
                this._webCamTexture.Play();
            }
            this.get_View().ScanTexture_UITexture.set_mainTexture(this._webCamTexture);
            this._firstInit = true;
            this._waitServerResponse = false;
            this.get_View().TipLabel_UILabel.set_text(System.String.Format$$String$$Object("请把取景框对准{0}电脑微端二维码", GameSetting.get_GameName()));
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ReturnBtn_UIButton.onClick, $CreateDelegate(this, this.OnReturnBtnClick));
        },
        OnDispose: function (){
            this.get_View().ScanTexture_UITexture.set_mainTexture(null);
            if (UnityEngine.Object.op_Inequality(this._webCamTexture, null)){
                this._webCamTexture.Stop();
                UnityEngine.Object.Destroy$$Object(this._webCamTexture);
                this._webCamTexture = null;
            }
            this._waitServerResponse = false;
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        Update: function (){
            if (UnityEngine.Object.op_Inequality(this._webCamTexture, null) && this._webCamTexture.get_didUpdateThisFrame() && this._webCamTexture.get_width() > 100 /* WebCamTextureInitSuccessSize */ && this._webCamTexture.get_height() > 100 /* WebCamTextureInitSuccessSize */){
                this.get_View().ScanTexture_UITexture.get_transform().set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, this._webCamTexture.get_videoVerticallyMirrored() ? -1 /* -1f */ : 1, 1));
                this.get_View().ScanTexture_UITexture.get_transform().set_rotation(UnityEngine.Quaternion.AngleAxis(this._webCamTexture.get_videoRotationAngle(), UnityEngine.Vector3.get_forward()));
                if (this._firstInit){
                    this._firstInit = false;
                    var isBasedOnWidth = 1 * UnityEngine.Screen.get_width() / UnityEngine.Screen.get_height() > 1 * this._webCamTexture.get_width() / this._webCamTexture.get_height();
                    this.get_View().ScanTexture_UITexture.keepAspectRatio = isBasedOnWidth ? 1 : 2;
                    this.get_View().ScanTexture_UITexture.aspectRatio = 1 * this._webCamTexture.get_width() / this._webCamTexture.get_height();
                    this.get_View().ScanTexture_UITexture.ResetAndUpdateAnchors();
                    var scale = isBasedOnWidth ? 1 * this.get_View().ScanTexture_UITexture.get_width() / this._webCamTexture.get_width() : 1 * this.get_View().ScanTexture_UITexture.get_height() / this._webCamTexture.get_height();
                    this._viewSize = (((this.get_View().ViewTexture_UIWidget.get_width() / scale)) | 0);
                }
                if (UnityEngine.Time.get_realtimeSinceStartup() - this._lastDecodeTime > 1 /* DecodeInterval */ && !this._waitServerResponse){
                    var result = AntaresQRCodeUtil.Decode$$WebCamTexture$$Int32$$Int32(this._webCamTexture, this._viewSize, this._viewSize);
                    this._lastDecodeTime = UnityEngine.Time.get_realtimeSinceStartup();
                    if (result != null && !System.String.IsNullOrEmpty(result.get_Text())){
                        var loginCode = QRCodeHelper.Decode$1(LoginQRCode.ctor, result.get_Text());
                        if (loginCode != null){
                            if (GameSetting.get_Release() && ((loginCode.SpVersionCode / 1000) | 0) != ((AppGameVersion.get_SpVersionCode() / 1000) | 0)){
                                QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                                    ProxyWindowModule.OpenMessageWindow("扫码端和PC端版本不符", "", null, 3, null, UILayerType.Dialogue, false);
                                });
                                this.OnReturnBtnClick();
                                return;
                            }
                            this._waitServerResponse = true;
                            ServiceProviderManager.RequestQRCodeLogin(loginCode.Sid, ServerManager.get_Instance().loginAccountDto.token, $CreateAnonymousDelegate(this, function (dto){
                                this._waitServerResponse = false;
                                if (this.get_View() == null || dto == null){
                                    return;
                                }
                                if (dto.code == 0){
                                    var callback = this._closeCallback;
                                    this._closeCallback = null;
                                    QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                                        ProxyQRCodeModule.OpenQRCodeEnsureView(callback, loginCode.Sid, UILayerType.QRCodeScan);
                                    });
                                    this.OnReturnBtnClick();
                                }
                                else if (dto.code == 1103){
                                    QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                                        ProxyWindowModule.OpenMessageWindow("二维码会话(sid)失效", "", null, 3, null, UILayerType.Dialogue, false);
                                    });
                                    this.OnReturnBtnClick();
                                }
                                else if (dto.code == 1104){
                                    QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                                        ProxyWindowModule.OpenMessageWindow("账号登录会话(token)失效", "", null, 3, null, UILayerType.Dialogue, false);
                                    });
                                    this.OnReturnBtnClick();
                                }
                                else {
                                    QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                                        ProxyWindowModule.OpenMessageWindow(System.String.Format$$String$$Object("扫码失败，请把取景框对准{0}电脑微端二维码进行扫描，{0}电脑微端可在官网下载", GameSetting.get_GameName()), "扫描结果", null, 3, "重新扫码", UILayerType.Dialogue, false);
                                    });
                                    this.OnReturnBtnClick();
                                }
                            }));
                            return;
                        }
                        var productCode = QRCodeHelper.Decode$1(ProductQRCode.ctor, result.get_Text());
                        if (productCode != null){
                            QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                                ServiceProviderManager.RequestQRCodeScanPaySuccess(productCode.OrderDto.orderId);
                                PayManager.get_Instance().ChargeByOrderJsonDto(productCode.ItemDto, productCode.Quantity, productCode.OrderDto);
                                ProxyWindowModule.OpenMessageWindow("扫码成功，请耐心等待服务器返回订单信息。", "", null, 3, null, UILayerType.Dialogue, false);
                            });
                            this.OnReturnBtnClick();
                            return;
                        }
                        GameDebuger.LogError(result.get_Text(), null);
                        QRCodeScanViewController._internalCloseCallback = $CreateAnonymousDelegate(this, function (){
                            ProxyWindowModule.OpenMessageWindow("该二维码无效", "", null, 3, null, UILayerType.Dialogue, false);
                        });
                        this.OnReturnBtnClick();
                    }
                }
            }
        },
        OnReturnBtnClick: function (){
            QRCodeScanViewController.QRCodeScanDelayCallback(this._closeCallback);
            this._closeCallback = null;
            ProxyQRCodeModule.CloseQRCodeScanView();
        }
    }
};
JsTypes.push(QRCodeScanViewController);
var QRCodeWaitPayViewController = {
    fullname: "QRCodeWaitPayViewController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, QRCodeWaitPayView.ctor);
        },
        SetData: function (){
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ReturnBtn_UIButton.onClick, $CreateDelegate(this, this.OnReturnBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().HelpBtn_UIButton.onClick, $CreateDelegate(this, this.OnHelpBtnClick));
        },
        OnReturnBtnClick: function (){
            ProxyQRCodeModule.CloseQRCodeWaitPayView();
        },
        OnHelpBtnClick: function (){
            UnityEngine.Application.OpenURL("http://xl.tiancity.com/homepage/article/2016/05/09/44684.html");
        }
    }
};
JsTypes.push(QRCodeWaitPayViewController);
var QRCodeHelper = {
    fullname: "QRCodeHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        EncodeLoginQRCode: function (sid, spVersionCode){
            var code = (function (){
                var $v29 = new LoginQRCode.ctor();
                $v29.Sid = sid;
                $v29.SpVersionCode = spVersionCode;
                return $v29;
            }).call(this);
            return JsHelper.ToJson(code, false);
        },
        EncodeProductQRCode: function (itemDto, quantity, orderDto){
            var code = (function (){
                var $v30 = new ProductQRCode.ctor();
                $v30.ItemDto = itemDto;
                $v30.Quantity = quantity;
                $v30.OrderDto = orderDto;
                return $v30;
            }).call(this);
            return JsHelper.ToJson(code, false);
        },
        Decode$1: function (T, json){
            if (!System.String.IsNullOrEmpty(json)){
                try{
                    if (Typeof(T) == Typeof(LoginQRCode.ctor) && !json.Contains("Sid")){
                        return Default(T);
                    }
                    else if (Typeof(T) == Typeof(ProductQRCode.ctor) && (!json.Contains("ProductIdentifier") || !json.Contains("Quantity") || !json.Contains("OrderId"))){
                        return Default(T);
                    }
                    var obj = JsHelper.ToObject(T, json);
                    return obj;
                }
                catch($$e4){
                    return Default(T);
                }
            }
            return Default(T);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(QRCodeHelper);
var ProductQRCode = {
    fullname: "ProductQRCode",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Quantity = 0;
            this.ItemDto = null;
            this.OrderDto = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProductQRCode);
var LoginQRCode = {
    fullname: "LoginQRCode",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Sid = null;
            this.SpVersionCode = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(LoginQRCode);
var QRCodeDownloadView = {
    fullname: "QRCodeDownloadView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.DownloadTip_UILabel = null;
            this.CloseBtn_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.DownloadTip_UILabel = root.Find("Content/DownloadTip").GetComponent$1(UILabel.ctor);
            this.CloseBtn_UIButton = root.Find("CloseBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(QRCodeDownloadView);
var QRCodeEnsureView = {
    fullname: "QRCodeEnsureView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.EnsureBtn_UIButton = null;
            this.TipLabel_UILabel = null;
            this.ReturnBtn_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.EnsureBtn_UIButton = root.Find("Front/EnsureBtn").GetComponent$1(UIButton.ctor);
            this.TipLabel_UILabel = root.Find("Front/Sprite/TipLabel").GetComponent$1(UILabel.ctor);
            this.ReturnBtn_UIButton = root.Find("Front/ReturnBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(QRCodeEnsureView);
var QRCodePayView = {
    fullname: "QRCodePayView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Title_UILabel = null;
            this.QRTexture_UITexture = null;
            this.EnsureBtn_UIButton = null;
            this.OverTimeGroup_Transform = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.Title_UILabel = root.Find("WaitScanGroup/Title").GetComponent$1(UILabel.ctor);
            this.QRTexture_UITexture = root.Find("WaitScanGroup/QRTexture").GetComponent$1(UITexture.ctor);
            this.EnsureBtn_UIButton = root.Find("WaitScanGroup/EnsureBtn").GetComponent$1(UIButton.ctor);
            this.OverTimeGroup_Transform = root.Find("WaitScanGroup/OverTimeGroup");
        }
    }
};
JsTypes.push(QRCodePayView);
var QRCodeScanView = {
    fullname: "QRCodeScanView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ScanTexture_UITexture = null;
            this.TipLabel_UILabel = null;
            this.ReturnBtn_UIButton = null;
            this.ViewTexture_UIWidget = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.ScanTexture_UITexture = root.Find("ScanTexture").GetComponent$1(UITexture.ctor);
            this.TipLabel_UILabel = root.Find("Front/Sprite/TipLabel").GetComponent$1(UILabel.ctor);
            this.ReturnBtn_UIButton = root.Find("Front/ReturnBtn").GetComponent$1(UIButton.ctor);
            this.ViewTexture_UIWidget = root.Find("Front/ViewTexture").GetComponent$1(UIWidget.ctor);
        }
    }
};
JsTypes.push(QRCodeScanView);
var QRCodeWaitPayView = {
    fullname: "QRCodeWaitPayView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ReturnBtn_UIButton = null;
            this.HelpBtn_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.ReturnBtn_UIButton = root.Find("WaitPayGroup/ReturnBtn").GetComponent$1(UIButton.ctor);
            this.HelpBtn_UIButton = root.Find("WaitPayGroup/HelpBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(QRCodeWaitPayView);
var FactionCellController = {
    fullname: "FactionCellController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            FactionCellController.FactionCellEffect = "ui_eff_RoleCreate_Faction_Effect";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._faction = null;
            this._onSelect = null;
            this._selectEffect = null;
            this._view = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Faction$$: "AppDto.Faction",
        get_Faction: function (){
            return this._faction;
        },
        InitItem: function (pos, onSelect){
            var trans = this.get_transform();
            if (this._view == null){
                this._view = BaseView.Create$1$$Transform(FactionCell.ctor, trans);
                this.RegisterEvent();
            }
            trans.set_localPosition(pos);
            this._onSelect = onSelect;
            this._view.FactionIconSprite_UISprite.set_spriteName("");
            this._view.FactionSelectSprite.SetActive(false);
        },
        UpdateFactionId: function (factionId){
            this._faction = DataCache.getDtoByCls$1(AppDto.Faction.ctor, factionId);
            if (this._faction != null){
                UIHelper.SetOtherIcon(this._view.FactionIconSprite_UISprite, "faction_" + factionId, false);
                this._view.FactionNameLabel_UILabel.set_text(this._faction.name);
            }
        },
        RegisterEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.FactionBtn_UIButton.onClick, $CreateDelegate(this, this.OnSelectItem));
        },
        SetSelect: function (select){
            if (select){
                if (UnityEngine.Object.op_Equality(this._selectEffect, null)){
                    this._selectEffect = OneShotUIEffect.BeginFollowEffect("ui_eff_RoleCreate_Faction_Effect" /* FactionCellEffect */, this._view.FactionIconSprite_UISprite, UnityEngine.Vector2.get_zero(), 1, false, 1, null);
                }
                this._selectEffect.SetActive(true);
            }
            else {
                if (UnityEngine.Object.op_Inequality(this._selectEffect, null)){
                    this._selectEffect.SetActive(false);
                }
            }
        },
        OnSelectItem: function (){
            if (this._onSelect != null)
                this._onSelect(this);
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(this._selectEffect, null)){
                this._selectEffect.Dispose();
                this._selectEffect = null;
            }
        }
    }
};
JsTypes.push(FactionCellController);
var RoleCreateController = {
    fullname: "RoleCreateController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            RoleCreateController.RoleItemCellPath = "RoleItemCell";
            RoleCreateController.FactioncellPath = "FactionCell";
            RoleCreateController.Role2DBackRes = "roll2d_back";
            RoleCreateController.Role2DHeroPrefix = "roll2d_hero_";
            RoleCreateController.FactionCellPosList = (function (){
                var $v31 = new System.Collections.Generic.List$1.ctor$$Int32(UnityEngine.Vector3.ctor, 3);
                $v31.Add(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0, 0));
                $v31.Add(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(91, -32, 0));
                $v31.Add(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(180, -45, 0));
                $v31.Add(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(272, -45, 0));
                $v31.Add(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(364, -45, 0));
                $v31.Add(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(456, -45, 0));
                return $v31;
            }).call(this);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._lastSelectFactionItem = null;
            this._factionItemList = null;
            this._lastRandomRoleName = "";
            this._lastSelectRoleItem = null;
            this._onCreateSuccess = null;
            this._roleModelController = null;
            this._roleItemList = null;
            this._serverInfo = null;
            MonoViewController$1.ctor.call(this, RoleCreateView.ctor);
        },
        Open: function (info, onCreatePlayerSuccess){
            this._serverInfo = info;
            this._onCreateSuccess = onCreatePlayerSuccess;
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "ShowView");
            this.OnRollNameButtonClick();
            if (null == this._roleItemList || this._roleItemList.get_Count() <= 0)
                GameDebuger.LogError("_roleItemList is null or length invalid！", null);
            else
                this.OnSelectRoleItem(this._roleItemList.get_Item$$Int32(UnityEngine.Random.Range$$Int32$$Int32(0, this._roleItemList.get_Count())));
        },
        AfterInitView: function (){
            this.get_View().RoleNameInput_UIInput.characterLimit = 20;
            var mode = UnityEngine.Screen.get_width() * 1 / UnityEngine.Screen.get_height();
            if (mode >= 1.32333337306976 /* (float)4 / 3 - 0.01 */ && 1.34333337306976 /* (float)4 / 3 + 0.01 */ >= mode){
                this.get_View().RoleGrid_UIGrid.cellHeight = 80;
            }
            else {
                this.get_View().RoleGrid_UIGrid.cellHeight = 75;
            }
            this._roleItemList = new System.Collections.Generic.List$1.ctor$$Int32(RoleItemCellController.ctor, 6);
            var generalCharactors = DataCache.getArrayByCls$1(AppDto.GeneralCharactor.ctor);
            if (null == generalCharactors || generalCharactors.get_Count() <= 0)
                GameDebuger.LogError("GeneralCharactor 数据表读取失败！", null);
            else {
                for (var i = 0,imax = generalCharactors.get_Count(); i < imax; i++){
                    var mainCharactor = As(generalCharactors.get_Item$$Int32(i), AppDto.MainCharactor.ctor);
                    if (mainCharactor != null){
                        var com = this.AddCachedChild$2$$GameObject$$String$$String(RoleItemCellController.ctor, RoleItemCell.ctor, this.get_View().RoleGrid_UIGrid.get_gameObject(), "RoleItemCell" /* RoleItemCellPath */, "");
                        com.SetData(mainCharactor, $CreateDelegate(this, this.OnSelectRoleItem));
                        var item = com.get_gameObject();
                        this._roleItemList.Add(com);
                    }
                }
            }
            this.get_View().RoleGrid_UIGrid.Reposition();
            this._factionItemList = new System.Collections.Generic.List$1.ctor$$Int32(FactionCellController.ctor, 6);
            for (var i = 0; i < 6; i++){
                var item = NGUITools.AddChild$$GameObject$$GameObject(this.get_View().FactionGroup_Transform.get_gameObject(), AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("FactionCell" /* FactioncellPath */));
                var com = GameObjectExt.GetMissingComponent$1(FactionCellController.ctor, item);
                com.InitItem(RoleCreateController.FactionCellPosList.get_Item$$Int32(i), $CreateDelegate(this, this.OnSelectFactionItem));
                this._factionItemList.Add(com);
            }
            this.get_View().Role2DGroup_Transform.get_gameObject().SetActive(true);
            AssetPipeline.ResourcePoolManager.get_Instance().LoadImage("roll2d_back" /* Role2DBackRes */, $CreateAnonymousDelegate(this, function (asset){
                this.get_View().Back2D_UITexture.set_mainTexture(As(asset, UnityEngine.Texture.ctor));
            }), null);
            GameDebuger.TODO("SensitiveWordFilter.Instance.InitSpecialSymbols();");
            AudioManager.get_Instance().PlayMusic("music_login", true);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().StartGameButton_UIButton.onClick, $CreateDelegate(this, this.OnStartGameButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseButton_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RollNameButton_UIButton.onClick, $CreateDelegate(this, this.OnRollNameButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RoleNameInput_UIInput.onSubmit, $CreateDelegate(this, this.OnSubmitInputName));
            LoginManager.get_Instance().add_OnReloginSuccess($CreateDelegate(this, this.HandleOnReloginSuccess));
        },
        OnDispose: function (){
            LoginManager.get_Instance().remove_OnReloginSuccess($CreateDelegate(this, this.HandleOnReloginSuccess));
            UIHelper.DisposeUITexture(this.get_View().InfoTexture_UITexture);
            for (var i = 0; i < this._factionItemList.get_Count(); i++){
                this._factionItemList.get_Item$$Int32(i).Dispose();
            }
            UIHelper.DisposeUITexture(this.get_View().Back2D_UITexture);
            UIHelper.DisposeUITexture(this.get_View().Role2D_UITexture);
        },
        OnDragModelRotate: function (){
            var delta = UICamera.currentTouch.delta;
            this._roleModelController.Seek(delta.x);
        },
        HandleOnReloginSuccess: function (){
            if (this._lastRandomRoleName == this.get_View().RoleNameInput_UIInput.get_value()){
                this.OnRollNameButtonClick();
            }
        },
        RefreshFactionItemList: function (charactor){
            if (UnityEngine.Object.op_Inequality(this._lastSelectFactionItem, null))
                this._lastSelectFactionItem.SetSelect(false);
            this._lastSelectFactionItem = null;
            this.get_View().FactionDescLbl_UILabel.set_text("请选择门派");
            for (var i = 0; i < charactor.factionIds.get_Count(); i++){
                var factionItem = this._factionItemList.get_Item$$Int32(i);
                factionItem.UpdateFactionId(charactor.factionIds.get_Item$$Int32(i));
            }
        },
        OnSelectFactionItem: function (factionItem){
            TalkingDataHelper.OnEventSetp$$String$$String$$String$$String("CreatePlayer", "选择门派", "Faction", factionItem.get_Faction().id.toString());
            if (UnityEngine.Object.op_Inequality(this._lastSelectFactionItem, null))
                this._lastSelectFactionItem.SetSelect(false);
            this._lastSelectFactionItem = factionItem;
            this._lastSelectFactionItem.SetSelect(true);
            GameDebuger.TODO("View.FactionDescLbl_UILabel.text = factionItem.Faction.description;");
        },
        OnCloseButtonClick: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "Back");
            ProxyRoleCreateModule.Close();
            ProxyLoginModule.Show();
            ExitGameScript.get_Instance().HanderRelogin();
        },
        OnSelectRoleItem: function (roleItem){
            if (this._lastSelectRoleItem == roleItem)
                return;
            if (this._lastSelectRoleItem != null)
                this._lastSelectRoleItem.SetSelect(false);
            this._lastSelectRoleItem = roleItem;
            roleItem.SetSelect(true);
            var mainCharactor = roleItem.get_Charactor();
            TalkingDataHelper.OnEventSetp$$String$$String$$String$$String("CreatePlayer", "选择主角", "Character", mainCharactor.id.toString());
            var imageResKey = System.String.Format$$String$$Object("roll_tip_{0}", mainCharactor.id);
            AssetPipeline.ResourcePoolManager.get_Instance().LoadImage(imageResKey, $CreateAnonymousDelegate(this, function (asset){
                UIHelper.DisposeUITexture(this.get_View().InfoTexture_UITexture);
                var texture = As(asset, UnityEngine.Texture2D.ctor);
                if (UnityEngine.Object.op_Inequality(texture, null)){
                    this.get_View().InfoTexture_UITexture.set_mainTexture(texture);
                    this.get_View().InfoTexture_UITexture.MakePixelPerfect();
                }
            }), null);
            this.RefreshFactionItemList(this._lastSelectRoleItem.get_Charactor());
            AssetPipeline.ResourcePoolManager.get_Instance().LoadImage("roll2d_hero_" /* Role2DHeroPrefix */ + mainCharactor.id, $CreateAnonymousDelegate(this, function (asset){
                UIHelper.DisposeUITexture(this.get_View().Role2D_UITexture);
                var texture = As(asset, UnityEngine.Texture2D.ctor);
                if (UnityEngine.Object.op_Inequality(texture, null)){
                    this.get_View().Role2D_UITexture.set_mainTexture(texture);
                    this.get_View().Role2D_UITexture.MakePixelPerfect();
                }
            }), null);
            AudioManager.get_Instance().PlaySound(mainCharactor.sound);
            GameDebuger.Log("playSound:" + mainCharactor.sound, null);
        },
        OnRollNameButtonClick: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "随机取名");
            var gender = this._lastSelectRoleItem != null ? this._lastSelectRoleItem.get_Charactor().gender : 1;
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Login_RandomName(gender), "", $CreateAnonymousDelegate(this, function (e){
                var nameDto = As(e, AppDto.PlayerNameDto.ctor);
                this.get_View().RoleNameInput_UIInput.set_value(nameDto.name);
                this._lastRandomRoleName = nameDto.name;
            }), null);
        },
        OnSubmitInputName: function (){
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "手动取名");
        },
        OnStartGameButtonClick: function (){
            if (this._lastSelectRoleItem == null){
                return;
            }
            if (UnityEngine.Object.op_Equality(this._lastSelectFactionItem, null)){
                TipManager.AddTip("请选择门派", false, false, "");
                return;
            }
            if (System.String.IsNullOrEmpty(this.get_View().RoleNameInput_UIInput.get_value())){
                TipManager.AddTip("昵称不能为空", false, false, "");
                return;
            }
            GameDebuger.TODO("string specialSymbols = SensitiveWordFilter.Instance.SpecialSymbols.FindOne(View.RoleNameInput_UIInput.value);\n        if (SensitiveWordFilter.Instance.HasSpecialSymbols(View.RoleNameInput_UIInput.value)\n            || !string.IsNullOrEmpty(specialSymbols))\n        {\n            if (!string.IsNullOrEmpty(specialSymbols))\n            {\n                GameDebuger.Log(\'包含屏蔽字：\' + specialSymbols);\n            }\n            TipManager.AddTip(\'包含非法关键字\');\n            return;\n        }\n            ");
            var error = AppStringHelper.ValidateStrLength(this.get_View().RoleNameInput_UIInput.get_value(), 3, 10);
            if (!System.String.IsNullOrEmpty(error)){
                TipManager.AddTip(error, false, false, "");
                return;
            }
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "Start");
            var token = ServerManager.get_Instance().loginAccountDto.token;
            var ip = HaApplicationContext.getConfiguration().getLocalIp();
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Login_PlayerCreate(token, ip, this.get_View().RoleNameInput_UIInput.get_value(), this._lastSelectRoleItem.get_Charactor().id, this._lastSelectFactionItem.get_Faction().id, this._serverInfo.serverId, BaoyugameSdk.getUUID(), System.String.Empty), "创建角色中", $CreateDelegate(this, this.CreatePlayerSuccess), $CreateDelegate(this, this.CreatePlayerFail));
        },
        CreatePlayerSuccess: function (e){
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "Success");
            LoginManager.get_Instance().remove_OnReloginSuccess($CreateDelegate(this, this.HandleOnReloginSuccess));
            ProxyLoginModule.Show();
            if (this._onCreateSuccess != null){
                this._onCreateSuccess(e);
                this._onCreateSuccess = null;
            }
            ProxyRoleCreateModule.Close();
        },
        CreatePlayerFail: function (e){
            TalkingDataHelper.OnEventSetp$$String$$String("CreatePlayer", "Fail");
            TipManager.AddTip(e.message, false, false, "");
        }
    }
};
JsTypes.push(RoleCreateController);
var RoleCreateModelController = {
    fullname: "RoleCreateModelController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        GenerateModel: function (){
            var go = new UnityEngine.GameObject.ctor$$String("RoleCreate");
            UnityEngine.Object.DontDestroyOnLoad(go);
            CameraController.Instance.SetActive(false);
            var com = GameObjectExt.GetMissingComponent$1(RoleCreateModelController.ctor, go);
            return com;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._autoRotate = false;
            this._camAnimator = null;
            this._isRotatePercentage = 0;
            this._mCamera = null;
            this._sceneRoot = null;
            this._isReady = true;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        IsReady$$: "System.Boolean",
        get_IsReady: function (){
            return this._isReady;
        },
        SetupModel: function (modelId){
            this._isReady = false;
            this._autoRotate = false;
            this._isRotatePercentage = 0;
            AssetPipeline.AssetManager.get_Instance().LoadLevelAsync("hero_" + modelId, false, $CreateDelegate(this, this.LoadLevelFinish), null, null);
        },
        Update: function (){
            if (this._autoRotate && UnityEngine.Object.op_Inequality(this._camAnimator, null)){
                var delta = 0.1 * _jsComManager.dT;
                this._isRotatePercentage += delta;
                if (this._isRotatePercentage >= 0.2){
                    this._autoRotate = false;
                }
                var percentage = this._camAnimator.get_percentage();
                percentage += delta;
                if (percentage > 1)
                    percentage = 0;
                else if (percentage < 0){
                    percentage = 1;
                }
                this._camAnimator.Seek(percentage);
            }
        },
        LoadLevelFinish: function (){
            if (UnityEngine.Object.op_Equality(this.get_gameObject(), null))
                return;
            this._sceneRoot = UnityEngine.GameObject.Find("/HeroStage");
            this._camAnimator = UnityEngine.GameObject.Find("/HeroStage/ModelCameraPath").GetComponent$1(CameraPathAnimator.ctor);
            this._mCamera = UnityEngine.GameObject.Find("/HeroStage/ModelCamera").GetComponent$1(UnityEngine.Camera.ctor);
            this._mCamera.set_enabled(false);
            this._camAnimator.Seek(0.8);
            this._mCamera.set_enabled(true);
            this._autoRotate = true;
            this._isReady = true;
        },
        Seek: function (val){
            if (!this._isReady)
                return;
            this._autoRotate = false;
            var percentage = this._camAnimator.get_percentage();
            percentage += val > 0 ? 0.01 : -0.01 /* -0.01f */;
            if (percentage > 1)
                percentage = 0;
            else if (percentage < 0){
                percentage = 1;
            }
            this._camAnimator.Seek(percentage);
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Implicit(this._sceneRoot)){
                UnityEngine.Object.Destroy$$Object(this._sceneRoot);
                this._sceneRoot = null;
            }
            UnityEngine.Object.Destroy$$Object(this.get_gameObject());
            if (UnityEngine.Object.op_Implicit(CameraController.Instance)){
                CameraController.Instance.SetActive(true);
            }
        }
    }
};
JsTypes.push(RoleCreateModelController);
var RoleItemCellController = {
    fullname: "RoleItemCellController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._mainCharactor = null;
            this._onSelect = null;
            MonolessViewController$1.ctor.call(this, RoleItemCell.ctor);
        },
        Charactor$$: "AppDto.MainCharactor",
        get_Charactor: function (){
            return this._mainCharactor;
        },
        RegistCustomEvent: function (){
            MonolessAutoCacher.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RoleItemCell_UIButton.onClick, $CreateDelegate(this, this.OnSelectItem));
        },
        SetData: function (charactor, onSelect){
            this._mainCharactor = charactor;
            this._onSelect = onSelect;
            this.get_View().RoleItemCell_UISprite.set_spriteName(charactor.id.toString());
            this.SetSelect(false);
        },
        SetSelect: function (select){
            if (select){
                this.get_View().RoleItemCell_UISprite.set_isGrey(false);
                this.get_View().RoleItemCell_UISprite.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-28, this.get_View().RoleItemCell_UISprite.get_transform().get_localPosition().y, 0));
            }
            else {
                this.get_View().RoleItemCell_UISprite.set_isGrey(true);
                this.get_View().RoleItemCell_UISprite.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, this.get_View().RoleItemCell_UISprite.get_transform().get_localPosition().y, 0));
            }
        },
        OnSelectItem: function (){
            if (this._onSelect != null)
                this._onSelect(this);
        }
    }
};
JsTypes.push(RoleItemCellController);
var FactionCell = {
    fullname: "FactionCell",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.FactionSelectSprite = null;
            this.FactionNameLabel_UILabel = null;
            this.FactionIconSprite_UISprite = null;
            this.FactionBtn_UIButton = null;
            this.FactionSelectSprite_TweenRotation = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.FactionSelectSprite = root.Find("FactionSelectSprite").get_gameObject();
            this.FactionNameLabel_UILabel = root.Find("FactionNameLabel").GetComponent$1(UILabel.ctor);
            this.FactionIconSprite_UISprite = root.Find("FactionBtn/FactionIconSprite").GetComponent$1(UISprite.ctor);
            this.FactionBtn_UIButton = root.Find("FactionBtn").GetComponent$1(UIButton.ctor);
            this.FactionSelectSprite_TweenRotation = root.Find("FactionSelectSprite").GetComponent$1(TweenRotation.ctor);
        }
    }
};
JsTypes.push(FactionCell);
var RoleCreateView = {
    fullname: "RoleCreateView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            RoleCreateView.NAME = "RoleCreateView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.StartGameButton_UIButton = null;
            this.InfoTexture_UITexture = null;
            this.CloseButton_UIButton = null;
            this.RoleNameInput_UIInput = null;
            this.RollNameButton_UIButton = null;
            this.ModelDragregion_UIEventTrigger = null;
            this.RoleGrid_UIGrid = null;
            this.FactionGroup_Transform = null;
            this.FactionDescLbl_UILabel = null;
            this.Right_UISprite = null;
            this.Left_UISprite = null;
            this.Back2D_UITexture = null;
            this.Role2D_UITexture = null;
            this.Role2DGroup_Transform = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.StartGameButton_UIButton = root.Find("StartGameButton").GetComponent$1(UIButton.ctor);
            this.InfoTexture_UITexture = root.Find("RoleSelectGroup/InfoTexture").GetComponent$1(UITexture.ctor);
            this.CloseButton_UIButton = root.Find("CloseButton").GetComponent$1(UIButton.ctor);
            this.RoleNameInput_UIInput = root.Find("RoleNameInputGroup/RoleNameInput").GetComponent$1(UIInput.ctor);
            this.RollNameButton_UIButton = root.Find("RoleNameInputGroup/RollNameButton").GetComponent$1(UIButton.ctor);
            this.ModelDragregion_UIEventTrigger = root.Find("RoleSelectGroup/ModelDragregion").GetComponent$1(UIEventTrigger.ctor);
            this.RoleGrid_UIGrid = root.Find("RoleGrid").GetComponent$1(UIGrid.ctor);
            this.FactionGroup_Transform = root.Find("FactionGroup");
            this.FactionDescLbl_UILabel = root.Find("FactionDescLbl").GetComponent$1(UILabel.ctor);
            this.Right_UISprite = root.Find("Bottom/Right").GetComponent$1(UISprite.ctor);
            this.Left_UISprite = root.Find("Bottom/Left").GetComponent$1(UISprite.ctor);
            this.Back2D_UITexture = root.Find("Role2DGroup/Back2D").GetComponent$1(UITexture.ctor);
            this.Role2D_UITexture = root.Find("Role2DGroup/Role2D").GetComponent$1(UITexture.ctor);
            this.Role2DGroup_Transform = root.Find("Role2DGroup");
        }
    }
};
JsTypes.push(RoleCreateView);
var RoleItemCell = {
    fullname: "RoleItemCell",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.RoleItemCell_UIButton = null;
            this.RoleItemCell_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.RoleItemCell_UIButton = root.GetComponent$1(UIButton.ctor);
            this.RoleItemCell_UISprite = root.GetComponent$1(UISprite.ctor);
        }
    }
};
JsTypes.push(RoleItemCell);
var DistrictBtnController = {
    fullname: "DistrictBtnController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._index = 0;
            this._callBack = null;
            this._btnName = null;
            MonoViewController$1.ctor.call(this, DistrictBtn.ctor);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().DistrictBtn_UIButton.onClick, $CreateDelegate(this, this.OnBtnClick));
        },
        OnBtnClick: function (){
            if (this._callBack != null)
                this._callBack(this._index, false);
        },
        SetData: function (index, nameStr, callBack){
            this._index = index;
            this.get_View().NameLbl_UILabel.set_text(nameStr);
            this._btnName = nameStr;
            this._callBack = callBack;
        },
        SetSelected: function (select){
            if (select){
                this.get_View().Bg_UISprite.set_spriteName("little-button-selected");
            }
            else {
                this.get_View().Bg_UISprite.set_spriteName("little-button");
            }
        },
        SetRedPointState: function (state){
            this.get_View().RedPoint_UISprite.get_gameObject().SetActive(state);
        }
    }
};
JsTypes.push(DistrictBtnController);
var ServerListController = {
    fullname: "ServerListController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._areaDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Int32.ctor);
            this._curAccountPlayerDtos = null;
            this._currentServerListItem = null;
            this._curSelectServer = -1 /* -1 */;
            this._curSelectServerInfo = null;
            this._curSelectServerRoleCountIsFull = true;
            this._curSelectTab = -1 /* -1 */;
            this._districtBtnObject = null;
            this._districtBtnPrafab = null;
            this._emptyGameObject = null;
            this._isInitView = true;
            this._lastDistrictBtnController = null;
            this._onSelectCallBack = null;
            this._serverInfoDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, System.Collections.Generic.List$1.ctor);
            this._serverListItemDict = null;
            this._serverRoleBar = null;
            this._serverRoleBarGo = null;
            this._serverRoleBarPrefab = null;
            this._serverRoleItemPrefab = null;
            this._showCurSelectServer = false;
            this._tabBtnList = new System.Collections.Generic.List$1.ctor(DistrictBtnController.ctor);
            this.c = null;
            MonoViewController$1.ctor.call(this, ServerListView.ctor);
        },
        AfterInitView: function (){
            this._serverListItemDict = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, ServerListItemController.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ReturnBtn_UIButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().SubmitBtn_UIButton.onClick, $CreateDelegate(this, this.CreateRole));
        },
        OnDispose: function (){
            this._serverListItemDict.Clear();
        },
        CreateRole: function (){
            if (this._curSelectServerRoleCountIsFull){
                TipManager.AddTip("玩家在每个服务器，最多拥有3个角色", false, false, "");
            }
            else {
                this.LoginPlayer(this._curSelectServerInfo, null);
            }
        },
        LoginPlayer: function (serverInfo, playerDto){
            if (serverInfo.runState == 3){
            }
            if (playerDto != null && playerDto.id == ModelManager.get_Player().GetPlayerId()){
                GameDebuger.Log("select the same player at game", null);
            }
            else {
                if (this._onSelectCallBack != null){
                    this._onSelectCallBack(serverInfo, playerDto);
                }
            }
            ProxyServerListModule.Close();
        },
        OnCloseButtonClick: function (){
            ProxyServerListModule.Close();
        },
        Open: function (selectCallback){
            this._onSelectCallBack = selectCallback;
            this.Paging(GameServerInfoManager.GetOpenServerList(), GameServerInfoManager.GetRecommendServerList(false));
            this.InitTabBtn();
            this.RefreshServerList();
        },
        InitTabBtn: function (){
            var index = 0;
            var $it55 = this._serverInfoDic.GetEnumerator();
            while ($it55.MoveNext()){
                var serverInfo = $it55.get_Current();
                this._districtBtnObject = NGUITools.AddChild$$GameObject$$GameObject(this.get_View().ServerGrid_UIGrid.get_gameObject(), AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("DistrictBtn"));
                var con = GameObjectExt.GetMissingComponent$1(DistrictBtnController.ctor, this._districtBtnObject);
                con.SetData(index, GameServerInfoManager.GetAreaName(serverInfo.get_Key()), $CreateDelegate(this, this.TabBtnCallBack));
                this._tabBtnList.Add(con);
                ++index;
            }
            this.get_View().ServerGrid_UIGrid.Reposition();
            if (this._tabBtnList.get_Count() > 0){
                this.TabBtnCallBack(0, false);
            }
        },
        TabBtnCallBack: function (index, refresh){
            if (index == this._curSelectTab && !refresh)
                return;
            this.get_View().Tips.SetActive(false);
            if (UnityEngine.Object.op_Inequality(this._lastDistrictBtnController, null)){
                this._lastDistrictBtnController.SetSelected(false);
            }
            this._lastDistrictBtnController = this._tabBtnList.get_Item$$Int32(index);
            this._lastDistrictBtnController.SetSelected(true);
            this._curSelectTab = index;
            this._curSelectServer = -1 /* -1 */;
            if (this._areaDic.ContainsKey(index) && this._serverInfoDic.ContainsKey(this._areaDic.get_Item$$TKey(index))){
                this.RefreshServerListItem(this._serverInfoDic.get_Item$$TKey(this._areaDic.get_Item$$TKey(index)));
            }
        },
        Paging: function (serveromInfos, recommendServerList){
            this._serverInfoDic.Clear();
            this._areaDic.Clear();
            var tabIndex = 0;
            this._areaDic.Add(tabIndex, tabIndex);
            this._serverInfoDic.Add(tabIndex++, recommendServerList);
            var areaList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            for (var i = 0; i < serveromInfos.get_Count(); i++){
                if (!areaList.Contains(serveromInfos.get_Item$$Int32(i).areaId)){
                    areaList.Add(serveromInfos.get_Item$$Int32(i).areaId);
                }
            }
            for (var i = 0; i < areaList.get_Count(); i++){
                var areaId = areaList.get_Item$$Int32(i);
                var tList = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
                for (var j = 0; j < serveromInfos.get_Count(); j++){
                    if (serveromInfos.get_Item$$Int32(j).areaId == areaId){
                        tList.Add(serveromInfos.get_Item$$Int32(j));
                    }
                }
                if (tList.get_Count() > 0){
                    tList.Sort$$Comparison$1($CreateAnonymousDelegate(this, function (a, b){
                        if (a.openTime == b.openTime){
                            return a.serverId.CompareTo$$Int32(b.serverId);
                        }
                        return b.openTime.CompareTo$$Int64(a.openTime);
                    }));
                }
                this._areaDic.Add(tabIndex++, areaId);
                this._serverInfoDic.Add(areaId, tList);
            }
        },
        RefreshServerListItem: function (serverList){
            GameDebuger.Log("Refresh the ServerList", null);
            this._serverListItemDict.Clear();
            GameObjectExt.RemoveChildren$$GameObject(this.get_View().ServerListGrid_UIGrid.get_gameObject());
            var lastServerId = UnityEngine.PlayerPrefs.GetString$$String(GameSetting.get_LastServerPrefsName());
            var preServerId = UnityEngine.PlayerPrefs.GetString$$String("preServerId");
            var defaultServer = false;
            var list = serverList;
            this.get_View().Tips.SetActive(false);
            if (list.get_Count() > 0){
                GameDebuger.Log("ServerList Count=" + list.get_Count(), null);
                var recommendServerMsg = null;
                var firstServerMsg = null;
                var tmpServerItem = null;
                for (var i = 0,len = list.get_Count(); i < len; i++){
                    var serverMsg = list.get_Item$$Int32(i);
                    var passVerLimit = true;
                    if (serverMsg != null && serverMsg.dboState != 0 && passVerLimit){
                        tmpServerItem = this.AddCachedChild$2$$GameObject$$String$$String(ServerListItemController.ctor, ServerListItem.ctor, this.get_View().ServerListGrid_UIGrid.get_gameObject(), "ServerListItem", "");
                        tmpServerItem.SetData(i, serverMsg, $CreateDelegate(this, this.OnSelectServer));
                        var modVal = (i + 1) % 2;
                        modVal = modVal == 0 ? 2 : modVal;
                        var item = tmpServerItem.get_gameObject();
                        item.set_name(System.Math.Floor$$Double(i / 2) + "-" + modVal);
                        if (preServerId == serverMsg.GetServerUID() && serverMsg.dboState == 1){
                        }
                        if (lastServerId == serverMsg.GetServerUID() && serverMsg.dboState == 1){
                            this.OnSelectServer(tmpServerItem, false);
                            defaultServer = true;
                        }
                        if (!this._serverListItemDict.ContainsKey(serverMsg.serverId)){
                            GameDebuger.Log("Add serviceId : " + serverMsg.serverId, null);
                            this._serverListItemDict.Add(serverMsg.serverId, tmpServerItem);
                        }
                        if (serverMsg.recommendType > 0 && serverMsg.dboState == 1){
                            recommendServerMsg = serverMsg;
                        }
                        firstServerMsg = list.get_Item$$Int32(0);
                    }
                }
                if (list.get_Count() % 2 == 1){
                    var emptyGameObject = NGUITools.AddChild$$GameObject(this.get_View().ServerListGrid_UIGrid.get_gameObject());
                    emptyGameObject.set_name(System.Math.Floor$$Double(list.get_Count() / 2) + "-" + 2);
                }
                if (defaultServer == false){
                    if (recommendServerMsg != null){
                        this.OnSelectServer(this.GetServerItemControllerWithInfo(recommendServerMsg), false);
                    }
                    else {
                        if (firstServerMsg != null){
                            this.OnSelectServer(this.GetServerItemControllerWithInfo(firstServerMsg), false);
                        }
                    }
                }
            }
            this.get_View().ServerListGrid_UIGrid.set_enabled(true);
            this.get_View().ServerListGrid_UIGrid.Reposition();
        },
        GetServerItemControllerWithInfo: function (info){
            var controller = null;
            (function (){
                var $1 = $Ref(null, controller);
                var $res = this._serverListItemDict.TryGetValue(info.serverId, $1);
                controller = $1.Value;
                return $res;
            }).call(this);
            return controller;
        },
        SelectServerItem: function (serverItem){
            if (this._currentServerListItem == serverItem){
                return;
            }
            TalkingDataHelper.OnEventSetp$$String$$String("SelectServer", "选择服务器");
            if (this._currentServerListItem != null)
                this._currentServerListItem.UnSelectServer();
            serverItem.SelectServer();
            this._currentServerListItem = serverItem;
        },
        OnSelectServer: function (listItem, showRoleList){
            this.SelectServerItem(listItem);
            if (this._isInitView || showRoleList){
                if (this._curSelectServer != listItem.GetIndex()){
                    this._showCurSelectServer = true;
                }
                if (this._curSelectServer == listItem.GetIndex()){
                    this._showCurSelectServer = !this._showCurSelectServer;
                }
                if (this._showCurSelectServer){
                    this._curSelectServer = listItem.GetIndex();
                    if (UnityEngine.Object.op_Inequality(this._serverRoleBarGo, null)){
                        this._serverRoleBarGo.SetActive(true);
                    }
                    if (UnityEngine.Object.op_Inequality(this._emptyGameObject, null)){
                        this._emptyGameObject.SetActive(true);
                    }
                    this.get_View().Tips.SetActive(true);
                }
                else {
                    if (UnityEngine.Object.op_Inequality(this._serverRoleBarGo, null)){
                        this._serverRoleBarGo.SetActive(false);
                    }
                    if (UnityEngine.Object.op_Inequality(this._emptyGameObject, null)){
                        this._emptyGameObject.SetActive(false);
                    }
                    this.get_View().Tips.SetActive(false);
                }
                var index = listItem.GetIndex();
                if (UnityEngine.Object.op_Equality(this._serverRoleBarGo, null)){
                    this._serverRoleBarGo = this.AddCachedChild$$GameObject$$String(this.get_View().ServerListGrid_UIGrid.get_gameObject(), "ServerRoleBar");
                    this._emptyGameObject = NGUITools.AddChild$$GameObject(this.get_View().ServerListGrid_UIGrid.get_gameObject());
                    this._serverRoleBar = BaseView.Create$1$$GameObject(ServerRoleBar.ctor, this._serverRoleBarGo);
                }
                this._serverRoleBarGo.set_name(System.Math.Floor$$Double(index / 2) + "-" + 3);
                this._emptyGameObject.set_name(System.Math.Floor$$Double(index / 2) + "-" + 4);
                this._isInitView = false;
                this.ShowRoleList(this._serverRoleBar, listItem);
            }
            this.get_View().ServerListGrid_UIGrid.Reposition();
        },
        ShowRoleList: function (serverRoleBar, listItem){
            this._curSelectServerInfo = listItem.GetServerInfo();
            this._curAccountPlayerDtos = ServerManager.get_Instance().GetPlayersAtServer(this._curSelectServerInfo.serverId);
            this.get_View().SubmitBtn_UIButton.get_gameObject().SetActive(true);
            var roleListGridGo = serverRoleBar.RoleListGrid_UIGrid.get_gameObject();
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(ServerRoleItemController.ctor, this.c)){
                this.c = new System.Collections.Generic.List$1.ctor(ServerRoleItemController.ctor);
            }
            CollectionExtension.ForEach$1(ServerRoleItemController.ctor, this.c, $CreateAnonymousDelegate(this, function (s){
                this.RemoveCachedChild$2(ServerRoleItemController.ctor, ServerRoleItem.ctor, s);
            }));
            GameObjectExt.RemoveChildren$$GameObject(roleListGridGo);
            for (var i = 0,imax = this._curAccountPlayerDtos.get_Count(); i < imax; i++){
                this.get_View().SubmitBtn_UIButton.get_gameObject().SetActive(false);
                var accountPlayerDto = this._curAccountPlayerDtos.get_Item$$Int32(i);
                var com = this.AddCachedChild$2$$GameObject$$String$$String(ServerRoleItemController.ctor, ServerRoleItem.ctor, roleListGridGo, "ServerRoleItem", "");
                com.SetData(accountPlayerDto, $CreateDelegate(this, this.OnClickRoleItem), $CreateDelegate(this, this.OnDeleteRoleItem));
                CollectionExtension.AddIfNotExist$1$$List$1$$T(ServerRoleItemController.ctor, this.c, com);
            }
            if (this._curAccountPlayerDtos.get_Count() < 3){
                this._curSelectServerRoleCountIsFull = false;
                var com = this.AddCachedChild$2$$GameObject$$String$$String(ServerRoleItemController.ctor, ServerRoleItem.ctor, roleListGridGo, "ServerRoleItem", "");
                com.SetData(null, $CreateDelegate(this, this.OnClickRoleItem), null);
                CollectionExtension.AddIfNotExist$1$$List$1$$T(ServerRoleItemController.ctor, this.c, com);
            }
            serverRoleBar.RoleListGrid_UIGrid.set_enabled(true);
            serverRoleBar.RoleListGrid_UIGrid.Reposition();
        },
        OnClickRoleItem: function (roleItem){
            this.LoginPlayer(this._curSelectServerInfo, roleItem.get_PlayerDto());
        },
        OnDeleteRoleItem: function (roleItem){
            ProxyWindowModule.OpenInputWindow(0, 100, "", "角色删除后将无法恢复，请谨慎操作", "请输入你要删除的角色ID", "", $CreateAnonymousDelegate(this, function (playerId){
                var accountPlayerDto = roleItem.get_PlayerDto();
                if (playerId == accountPlayerDto.id.toString()){
                    if (accountPlayerDto.grade < 8){
                        ServiceProviderManager.RequestPlayerDelete(accountPlayerDto.id.toString(), this._curSelectServerInfo.destServerId.toString(), !ProxyLoginModule.IsOpen(), $CreateAnonymousDelegate(this, function (response){
                            if (response.code == 0){
                                for (var j = 0; j < this._curAccountPlayerDtos.get_Count(); j++){
                                    if (this._curAccountPlayerDtos.get_Item$$Int32(j).id == accountPlayerDto.id){
                                        ServerManager.get_Instance().DelectPlayer(this._curAccountPlayerDtos.get_Item$$Int32(j));
                                        if (accountPlayerDto.id == ModelManager.get_Player().GetPlayerId()){
                                            ExitGameScript.get_Instance().HanderRelogin();
                                        }
                                        else {
                                            this.Paging(GameServerInfoManager.GetOpenServerList(), GameServerInfoManager.GetRecommendServerList(true));
                                            this.TabBtnCallBack(this._curSelectTab, true);
                                        }
                                        break;
                                    }
                                }
                            }
                            else {
                                UnityEngine.Debug.LogError$$Object(response.msg);
                                TipManager.AddTip(response.msg, false, false, "");
                            }
                        }));
                    }
                    else {
                        TipManager.AddTip("8级以上角色不允许删除!", false, false, "");
                    }
                }
                else {
                    TipManager.AddTip("ID不符合，无法删除", false, false, "");
                    roleItem.ShowDeleteBtn(false);
                }
            }), $CreateAnonymousDelegate(this, function (){
                roleItem.ShowDeleteBtn(false);
            }), 3, "确定", "取消", 0, UILayerType.Dialogue, 0);
        },
        RefreshServerList: function (){
            if (GameServerInfoManager.CanRefreshServerList){
                GameServerInfoManager.RefreshServerList();
            }
        }
    }
};
JsTypes.push(ServerListController);
var ServerListItemController = {
    fullname: "ServerListItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._index = 0;
            this._callBackFunc = null;
            this._serverInfo = null;
            MonolessViewController$1.ctor.call(this, ServerListItem.ctor);
        },
        RegistCustomEvent: function (){
            MonolessAutoCacher.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ServerListItem_UIButton.onClick, $CreateDelegate(this, this.OnListItemClick));
        },
        SetData: function (index, serverInfo, func){
            this._index = index;
            this._serverInfo = serverInfo;
            this._callBackFunc = func;
            this.UpdateServerInfo();
            this.UpdateServerRunState();
        },
        SelectServer: function (){
            this._view.BgSprite_UISprite.set_spriteName("the-roll-under-lines-selected");
        },
        UnSelectServer: function (){
            this._view.BgSprite_UISprite.set_spriteName("the-roll-under-lines");
        },
        OnListItemClick: function (){
            if (this._serverInfo != null && this._serverInfo.runState == 3){
            }
            if (this._callBackFunc != null && this._serverInfo != null){
                this._callBackFunc(this, true);
            }
        },
        GetServerInfo: function (){
            return this._serverInfo;
        },
        UpdateServerInfo: function (){
            if (this._serverInfo == null)
                return;
            this._view.NameLabel_UILabel.set_text(this._serverInfo.name);
            if (this._serverInfo.recommendType > 0){
                this._view.NewSprite.SetActive(true);
                this._view.NewSprite_UISprite.set_spriteName("The-push");
            }
            else if (this._serverInfo.newServer){
                this._view.NewSprite.SetActive(true);
                this._view.NewSprite_UISprite.set_spriteName("The-server");
            }
            else {
                this._view.NewSprite.SetActive(false);
            }
            var count = ServerManager.get_Instance().GetPlayerCount(this._serverInfo.serverId);
            if (count > 0){
                this._view.RoleSprite.SetActive(true);
                this._view.RoleCountLabel_UILabel.set_text(count.toString());
            }
            else {
                this._view.RoleSprite.SetActive(false);
                this._view.RoleCountLabel_UILabel.set_text("");
            }
        },
        UpdateServerRunState: function (){
            if (this._serverInfo == null)
                return;
            this._view.StateSprite_UISprite.set_spriteName(ServerNameGetter.GetServiceStateSpriteName(this._serverInfo));
        },
        GetIndex: function (){
            return this._index;
        }
    }
};
JsTypes.push(ServerListItemController);
var ServerRoleBarController = {
    fullname: "ServerRoleBarController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, ServerRoleBar.ctor);
        },
        Open: function (){
        }
    }
};
JsTypes.push(ServerRoleBarController);
var ServerRoleItemController = {
    fullname: "ServerRoleItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._accountPlayerDto = null;
            MonolessViewController$1.ctor.call(this, ServerRoleItem.ctor);
        },
        PlayerDto$$: "AccountPlayerDto",
        get_PlayerDto: function (){
            return this._accountPlayerDto;
        },
        RegistCustomEvent: function (){
            MonolessAutoCacher.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.DelButton_UIEventTrigger.onDrag, $CreateAnonymousDelegate(this, function (){
                if (this._accountPlayerDto != null){
                    var delta = UICamera.currentTouch.delta;
                    if (delta.x > 2){
                        this.ShowDeleteBtn(false);
                    }
                }
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BgSprite_UIEventTrigger.onDrag, $CreateAnonymousDelegate(this, function (){
                if (this._accountPlayerDto != null){
                    var delta = UICamera.currentTouch.delta;
                    if (delta.x < -2){
                        this.ShowDeleteBtn(true);
                    }
                    if (delta.x > 2){
                        this.ShowDeleteBtn(false);
                    }
                }
            }));
        },
        SetData: function (accountPlayerDto, onClickBg, onClickDeletBtn){
            this._accountPlayerDto = accountPlayerDto;
            if (accountPlayerDto == null){
                this._view.NameLabel_UILabel.set_text("");
                this._view.FactionLabel_UILabel.set_text("");
                this._view.LvLabel_UILabel.get_cachedGameObject().SetActive(false);
                this._view.DelButton_UIButton.get_gameObject().SetActive(false);
                this._view.RoleIconSprite_UISprite.set_spriteName("");
                this._view.DelTipSprite.SetActive(false);
                this._view.AddRoleISprite.SetActive(true);
            }
            else {
                this._view.NameLabel_UILabel.set_text(accountPlayerDto.nickname);
                this._view.FactionLabel_UILabel.set_text(GameHintManager.GetFactionName(accountPlayerDto.factionId));
                this._view.LvLabel_UILabel.set_text(accountPlayerDto.grade.toString());
                this._view.LvLabel_UILabel.get_cachedGameObject().SetActive(true);
                this._view.DelButton_UIButton.get_gameObject().SetActive(false);
                this._view.DelTipSprite.SetActive(false);
                this._view.AddRoleISprite.SetActive(false);
                UIHelper.SetPetIcon(this._view.RoleIconSprite_UISprite, this.GetCharactorIcon(accountPlayerDto), false);
                if (accountPlayerDto.id == GameSetting.GetLastRolePlayerId()){
                    this._view.BgSprite_UISprite.set_spriteName("hero-face-under-lines001-selected");
                }
                else {
                    this._view.BgSprite_UISprite.set_spriteName("hero-face-under-lines001");
                }
            }
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BgSprite_UIEventTrigger.onClick, $CreateAnonymousDelegate(this, function (){
                if (onClickBg != null)
                    onClickBg(this);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.DelButton_UIEventTrigger.onClick, $CreateAnonymousDelegate(this, function (){
                if (onClickDeletBtn != null)
                    onClickDeletBtn(this);
            }));
        },
        GetCharactorIcon: function (accountPlayerDto){
            if (accountPlayerDto.charactorId > 0){
                var tCharactor = As(DataCache.getDtoByCls$1(AppDto.GeneralCharactor.ctor, accountPlayerDto.charactorId), AppDto.MainCharactor.ctor);
                if (tCharactor != null){
                    return tCharactor.texture.toString();
                }
                else {
                    return accountPlayerDto.icon.toString();
                }
            }
            else {
                return accountPlayerDto.icon.toString();
            }
        },
        ShowDeleteBtn: function (show){
            this._view.DelButton_UIButton.get_gameObject().SetActive(show);
            this._view.NameLabel_UILabel.get_gameObject().SetActive(!show);
            this._view.FactionLabel_UILabel.get_gameObject().SetActive(!show);
            this._view.DelTipSprite.SetActive(show);
        }
    }
};
JsTypes.push(ServerRoleItemController);
var PlayerDeleteResponse = {
    fullname: "PlayerDeleteResponse",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PlayerDeleteResponse);
var DistrictBtn = {
    fullname: "DistrictBtn",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameLbl_UILabel = null;
            this.RedPoint_UISprite = null;
            this.DistrictBtn_UIButton = null;
            this.Bg_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.NameLbl_UILabel = root.Find("NameLbl").GetComponent$1(UILabel.ctor);
            this.RedPoint_UISprite = root.Find("RedPoint").GetComponent$1(UISprite.ctor);
            this.DistrictBtn_UIButton = root.GetComponent$1(UIButton.ctor);
            this.Bg_UISprite = root.Find("Bg").GetComponent$1(UISprite.ctor);
        }
    }
};
JsTypes.push(DistrictBtn);
var ServerListItem = {
    fullname: "ServerListItem",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameLabel_UILabel = null;
            this.StateSprite_UISprite = null;
            this.NewSprite = null;
            this.RoleSprite = null;
            this.RoleCountLabel_UILabel = null;
            this.BgSprite_UISprite = null;
            this.ServerListItem_UIButton = null;
            this.NewSprite_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.NameLabel_UILabel = root.Find("NameLabel").GetComponent$1(UILabel.ctor);
            this.StateSprite_UISprite = root.Find("StateSprite").GetComponent$1(UISprite.ctor);
            this.NewSprite = root.Find("NewSprite").get_gameObject();
            this.RoleSprite = root.Find("RoleSprite").get_gameObject();
            this.RoleCountLabel_UILabel = root.Find("RoleCountLabel").GetComponent$1(UILabel.ctor);
            this.BgSprite_UISprite = root.Find("BgSprite").GetComponent$1(UISprite.ctor);
            this.ServerListItem_UIButton = root.GetComponent$1(UIButton.ctor);
            this.NewSprite_UISprite = root.Find("NewSprite").GetComponent$1(UISprite.ctor);
        }
    }
};
JsTypes.push(ServerListItem);
var ServerListView = {
    fullname: "ServerListView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ServerListGrid_UIGrid = null;
            this.ReturnBtn_UIButton = null;
            this.SubmitBtn_UIButton = null;
            this.ServerGrid_UIGrid = null;
            this.Tips = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.ServerListGrid_UIGrid = root.Find("ContentGroup/ServerDraggablePanel/ServerListGrid").GetComponent$1(UIGrid.ctor);
            this.ReturnBtn_UIButton = root.Find("ReturnBtn").GetComponent$1(UIButton.ctor);
            this.SubmitBtn_UIButton = root.Find("SubmitBtn").GetComponent$1(UIButton.ctor);
            this.ServerGrid_UIGrid = root.Find("ServerGroup/ServerGrid").GetComponent$1(UIGrid.ctor);
            this.Tips = root.Find("Tips").get_gameObject();
        }
    }
};
JsTypes.push(ServerListView);
var ServerRoleBar = {
    fullname: "ServerRoleBar",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.RoleListGrid_UIGrid = null;
            this.ArrowSprite_Transform = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.RoleListGrid_UIGrid = root.Find("RoleListGrid").GetComponent$1(UIGrid.ctor);
            this.ArrowSprite_Transform = root.Find("ArrowSprite");
        }
    }
};
JsTypes.push(ServerRoleBar);
var ServerRoleItem = {
    fullname: "ServerRoleItem",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.RoleIconSprite_UISprite = null;
            this.NameLabel_UILabel = null;
            this.DelButton_UIButton = null;
            this.AddRoleISprite = null;
            this.BgSprite_UIButton = null;
            this.BgSprite_UISprite = null;
            this.FactionLabel_UILabel = null;
            this.LvLabel_UILabel = null;
            this.DelTipSprite = null;
            this.BgSprite_UIEventTrigger = null;
            this.DelButton_UIEventTrigger = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.RoleIconSprite_UISprite = root.Find("IconBgSprite/RoleIconSprite").GetComponent$1(UISprite.ctor);
            this.NameLabel_UILabel = root.Find("NameLabel").GetComponent$1(UILabel.ctor);
            this.DelButton_UIButton = root.Find("DelButton").GetComponent$1(UIButton.ctor);
            this.AddRoleISprite = root.Find("IconBgSprite/AddRoleISprite").get_gameObject();
            this.BgSprite_UIButton = root.Find("BgSprite").GetComponent$1(UIButton.ctor);
            this.BgSprite_UISprite = root.Find("BgSprite").GetComponent$1(UISprite.ctor);
            this.FactionLabel_UILabel = root.Find("FactionLabel").GetComponent$1(UILabel.ctor);
            this.LvLabel_UILabel = root.Find("IconBgSprite/LvLabel").GetComponent$1(UILabel.ctor);
            this.DelTipSprite = root.Find("IconBgSprite/DelTipSprite").get_gameObject();
            this.BgSprite_UIEventTrigger = root.Find("BgSprite").GetComponent$1(UIEventTrigger.ctor);
            this.DelButton_UIEventTrigger = root.Find("DelButton").GetComponent$1(UIEventTrigger.ctor);
        }
    }
};
JsTypes.push(ServerRoleItem);
var SocialityButtonController = {
    fullname: "SocialityButtonController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ID = 0;
            this.SocialityButton_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, SocialityButton.ctor);
        },
        AfterInitView: function (){
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        Init: function (id, name, redPoint, showRedPoint){
            this.ID = id;
            this.get_View().NormalLabel_UILabel.set_text(name);
            this.get_View().SelectLabel_UILabel.set_text(name);
            this.UpdateBtn(redPoint, showRedPoint);
        },
        UpdateBtn: function (redPoint, showRedPoint){
            if (showRedPoint){
                this.get_View().RedPoint_GameObject.SetActive(true);
                this.get_View().RedPointNumLabel.set_text(redPoint.toString());
            }
            else {
                this.get_View().RedPoint_GameObject.SetActive(false);
            }
        },
        SetBtnSelect: function (b){
            this.get_View().Selected_UISprite.set_enabled(b);
            this.get_View().SelectLabel_UILabel.set_enabled(b);
            this.get_View().NormalLabel_UILabel.set_enabled(!b);
        },
        InitReactiveEvents: function (){
            this.SocialityButton_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().SocialityButton_UIButton);
        },
        ClearReactiveEvents: function (){
            this.SocialityButton_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.SocialityButton_UIButtonEvt);
        },
        OnSocialityButton_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnSocialityButton_UIButtonClick: function (){
            return this.SocialityButton_UIButtonEvt;
        }
    }
};
JsTypes.push(SocialityButtonController);
var SocialityButton = {
    fullname: "SocialityButton",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SocialityButton.NAME = "SocialityButton";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.SocialityButton_UIButton = null;
            this.NormalLabel_UILabel = null;
            this.Selected_UISprite = null;
            this.SelectLabel_UILabel = null;
            this.RedPoint_GameObject = null;
            this.RedPointNumLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.SocialityButton_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "");
            this.NormalLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "NormalLabel");
            this.Selected_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "Selected");
            this.SelectLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "Selected/SelectLabel");
            this.RedPoint_GameObject = GameObjectExt.FindGameObject(root, "RedPoint");
            this.RedPointNumLabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "RedPointNumLabel");
        }
    }
};
JsTypes.push(SocialityButton);
var SocialityDataMgr = {
    fullname: "SocialityDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SocialityDataMgr._ins = null;
            SocialityDataMgr.stream = new UniRx.Subject$1.ctor(ISocialityData.ctor);
        },
        Instance$$: "SocialityDataMgr",
        get_Instance: function (){
            if (SocialityDataMgr._ins == null)
                SocialityDataMgr._ins = new SocialityDataMgr.ctor();
            return SocialityDataMgr._ins;
        },
        Stream$$: "UniRx.IObservable`1[[ISocialityData]]",
        get_Stream: function (){
            return SocialityDataMgr.stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = null;
            System.Object.ctor.call(this);
            this._data = new SocialityDataMgr.SocialityData.ctor();
        },
        Dispose: function (){
            this._data.Dispose();
            this._data = null;
        }
    }
};
JsTypes.push(SocialityDataMgr);
var ISocialityData = {
    fullname: "ISocialityData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ISocialityData);
var ISocialityView = {
    fullname: "ISocialityView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ISocialityView);
var SocialityView = {
    fullname: "SocialityView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            SocialityView.NAME = "SocialityView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ISocialityView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.ToggleBtnTable_UITable = null;
            this.ContentContainer_UIWidget = null;
            this.CloseBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, SocialityView.ctor, ISocialityView.ctor, ISocialityData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        BtnTable$$: "UITable",
        get_BtnTable: function (){
            return this.ToggleBtnTable_UITable;
        },
        ContentContainer$$: "UnityEngine.Transform",
        get_ContentContainer: function (){
            return this.ContentContainer_UIWidget.get_transform();
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseWindow/CloseBtn");
            this.ToggleBtnTable_UITable = GameObjectExt.FindScript$1(UITable.ctor, root, "ContentWindow/ButtonGroup/Container/ToggleBtnTable");
            this.ContentContainer_UIWidget = GameObjectExt.FindScript$1(UIWidget.ctor, root, "ContentWindow/ContentContainer");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(SocialityView);
var TeamApplicationItemController = {
    fullname: "TeamApplicationItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._modelController = null;
            this._noti = null;
            this.TeamApplicationItem_UIButtonEvt = null;
            this.agreeBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, TeamApplicationItem.ctor);
        },
        AfterInitView: function (){
            this.get_View().agreeLabel_UILabel.set_text("同意申请");
            GameObjectExt.GetMissingComponent$1(UIDragScrollView.ctor, this.get_View().get_gameObject());
            this._modelController = ModelDisplayController.GenerateUICom(this.get_View().ModelAnchor_Transform, 4);
            this._modelController.Init$$Int32$$Int32$$Single$$Single(200, 200, 0, 1.5);
            this._modelController.SetBoxColliderEnabled(false);
            this.get_View().agreeBtn_UIButton.get_gameObject().SetActive(true);
            this.get_View().teamPosFlag_UISprite.get_cachedGameObject().SetActive(false);
            this.get_View().effectDescLbl_UILabel.get_cachedGameObject().SetActive(false);
            this.get_View().statusFlag_UISprite.get_cachedGameObject().SetActive(false);
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateInfo: function (joinRequest){
            this._noti = joinRequest;
            if (joinRequest != null){
                this.get_View().nameLabel_UILabel.set_text(joinRequest.playerNickname);
                this.get_View().lvLabel_UILabel.set_text(System.String.Format$$String$$Object("Lv.{0}", joinRequest.playerGrade));
                this.get_View().factionLabel_UILabel.set_text(joinRequest.get_playerFaction().name);
                UIHelper.SetOtherIcon(this.get_View().factionSprite_UISprite, System.String.Format$$String$$Object("small_faction_{0}", joinRequest.playerFactionId), false);
                this._modelController.SetupMainRoleModel(false);
                this._modelController.SetModelScale(1);
                this._modelController.SetModelOffset(-0.15 /* -0.15f */);
            }
            else {
                this._modelController.CleanUpModel();
                this.get_View().nameLabel_UILabel.set_text("");
                this.get_View().lvLabel_UILabel.set_text("");
                this.get_View().factionLabel_UILabel.set_text("");
                this.get_View().factionSprite_UISprite.set_spriteName("");
            }
        },
        SetPosLbl: function (pos){
            this.get_View().posLbl_UILabel.set_text(pos.toString());
        },
        InitReactiveEvents: function (){
            this.TeamApplicationItem_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().TeamApplicationItem_UIButton);
            this.agreeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().agreeBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.TeamApplicationItem_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TeamApplicationItem_UIButtonEvt);
            this.agreeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.agreeBtn_UIButtonEvt);
        },
        OnTeamApplicationItem_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTeamApplicationItem_UIButtonClick: function (){
            return this.TeamApplicationItem_UIButtonEvt;
        },
        OnagreeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnagreeBtn_UIButtonClick: function (){
            return this.agreeBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamApplicationItemController);
var TeamDataMgr = {
    fullname: "TeamDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            TeamDataMgr._stream = null;
            TeamDataMgr._ins = null;
            TeamDataMgr.TeamDefaultMemberCnt = 5;
            TeamDataMgr.PlayerTeamCnt = 5;
            TeamDataMgr.ApplicationShowItemNum = 6;
            TeamDataMgr.TeamDefaultShowApplyCnt = 20;
            TeamDataMgr.TeamDefaultSaveApplyCnt = 50;
            TeamDataMgr._cachedAction = null;
        },
        Instance$$: "TeamDataMgr",
        get_Instance: function (){
            if (TeamDataMgr._ins == null){
                TeamDataMgr._ins = new TeamDataMgr.ctor();
                TeamDataMgr._ins.Init();
            }
            if (TeamDataMgr._stream == null)
                TeamDataMgr._stream = new UniRx.Subject$1.ctor(ITeamData.ctor);
            return TeamDataMgr._ins;
        },
        Stream$$: "UniRx.IObservableExpand`1[[ITeamData]]",
        get_Stream: function (){
            return TeamDataMgr.get_stream();
        },
        stream$$: "UniRx.Subject`1[[ITeamData]]",
        get_stream: function (){
            if (TeamDataMgr._stream == null)
                TeamDataMgr._stream = new UniRx.Subject$1.ctor(ITeamData.ctor);
            return TeamDataMgr._stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._data = null;
            this._disposable = null;
            System.Object.ctor.call(this);
        },
        Init: function (){
            this._data = new TeamDataMgr.TeamData.ctor();
            if (this._disposable != null)
                this._disposable.Dispose();
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.TeamDto.ctor, GenericNotifyListener$1.get_Stream(), $CreateDelegate(this, this.HandleTeamDtoNotify)));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.TeamStatusNotify.ctor, GenericNotifyListener$1.get_Stream(), $CreateDelegate(this, this.HandleTeamStatusNotify)));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.LeaveTeamNotify.ctor, GenericNotifyListener$1.get_Stream(), $CreateDelegate(this, this.HandleLeaveTeamNotify)));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.JoinTeamNotify.ctor, GenericNotifyListener$1.get_Stream(), $CreateDelegate(this, this.HandleJoinTeamNotify)));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.TeamInvitationNotify.ctor, GenericNotifyListener$1.get_Stream(), $CreateDelegate(this, this.HandleTeamInvitationNotify)));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(AppDto.TeamRequestNotify.ctor, GenericNotifyListener$1.get_Stream(), $CreateDelegate(this, this.HandleTeamRequestNotify)));
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        Dispose: function (){
            this._disposable.Dispose();
            this._data.Dispose();
            this._data = null;
        },
        HandleTeamDtoNotify: function (notify){
            var isNeedChange = this._data.teamDto == null && notify != null;
            this._data.teamDto = notify;
            if (notify != null){
                this._data.teamDto.members.Sort$$Comparison$1(TeamDataHelper.TeamMemberIndexSorter);
            }
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        HandleTeamStatusNotify: function (notify){
            if (notify == null)
                return;
            if (!this.HasTeam() || this._data.teamDto.id != notify.teamId || CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberStatusDto.ctor, notify.memberStatusList, $CreateAnonymousDelegate(this, function (s){
                return s.playerId == ModelManager.get_IPlayer().GetPlayerId();
            })) == null){
                GameDebuger.LogError("team info is not correct", null);
            }
            var temp = new System.Collections.Generic.List$1.ctor$$Int32(AppDto.TeamMemberDto.ctor, this._data.GetMemberCount());
            this._data.teamDto.members.ForEach($CreateAnonymousDelegate(this, function (s){
                var member = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberStatusDto.ctor, notify.memberStatusList, $CreateAnonymousDelegate(this, function (m){
                    return m.playerId == s.id;
                }));
                if (member == null){
                    temp.Add(s);
                }
                else {
                    this._data.UpdateMemberByTeamMemberStatusDto(member);
                }
            }));
            CollectionExtension.ForEach$1(AppDto.TeamMemberDto.ctor, temp, $CreateAnonymousDelegate(this, function (s){
                this._data.RemoveMember$$TeamMemberDto(s);
            }));
            this._data.teamDto.members.Sort$$Comparison$1(TeamDataHelper.TeamMemberIndexSorter);
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        HandleJoinTeamNotify: function (notify){
            if (notify == null)
                return;
            this._data.AddMember(notify.member);
            this._data.teamDto.members.Sort$$Comparison$1(TeamDataHelper.TeamMemberIndexSorter);
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        HandleTeamRequestNotify: function (notify){
            if (notify == null)
                return;
            var pid = notify.playerId;
            if (this._data._joinTeamRequestNotifyList.ContainsKey(pid))
                this._data._joinTeamRequestNotifyList.set_Item$$TKey(pid, Tuple.Create$2$$T1$$T2(AppDto.TeamRequestNotify.ctor, System.Boolean.ctor, notify, true));
            else if (this._data._joinTeamRequestNotifyList.get_Count() < TeamDataMgr.TeamDefaultSaveApplyCnt){
                this._data._joinTeamRequestNotifyList.Add(pid, Tuple.Create$2$$T1$$T2(AppDto.TeamRequestNotify.ctor, System.Boolean.ctor, notify, true));
                JSTimer.get_Instance().SetupCoolDown(System.String.Format$$String$$Object("JoinTeamRequestNotify_{0}", pid), 300, null, $CreateAnonymousDelegate(this, function (){
                    this._data._joinTeamRequestNotifyList.set_Item$$TKey(pid, Tuple.Create$2$$T1$$T2(AppDto.TeamRequestNotify.ctor, System.Boolean.ctor, notify, false));
                    TeamDataMgr.get_stream().OnNext(this._data);
                }), 0.1, false);
            }
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        CleanUpApplicationInfo: function (){
            CollectionExtension.ForEach$1(Tuple$2.ctor, this._data._joinTeamRequestNotifyList.get_Values(), $CreateAnonymousDelegate(this, function (tuple){
                JSTimer.get_Instance().CancelCd(System.String.Format$$String$$Object("JoinTeamRequestNotify_{0}", tuple.p1.playerId));
            }));
            this._data._joinTeamRequestNotifyList.Clear();
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        RemoveJoinTeamRequestNotify: function (joinPlayerId){
            JSTimer.get_Instance().CancelCd(System.String.Format$$String$$Object("JoinTeamRequestNotify_{0}", joinPlayerId));
            this._data._joinTeamRequestNotifyList.Remove(joinPlayerId);
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        HandleTeamInvitationNotify: function (notify){
            if (notify == null)
                return;
            var b = false;
            if (this._data.curInvitationNoti == null){
                this._data.curInvitationNoti = notify;
                b = true;
            }
            CollectionExtension.ReplaceOrAdd$1(AppDto.TeamInvitationNotify.ctor, this._data._teamInviteNotifyList, $CreateAnonymousDelegate(this, function (n){
                return n.inviterPlayerId == notify.inviterPlayerId;
            }), notify);
            TeamDataMgr.get_stream().OnNext(this._data);
            if (b)
                ProxyTeamModule.OpinBeInvitatingView();
        },
        HandleLeaveTeamNotify: function (notify){
            if (notify == null)
                return;
            if (notify.playerId == ModelManager.get_IPlayer().GetPlayerId()){
                this._data.ClearTeamInfo();
            }
            else {
                this._data.RemoveMember$$Int64$$Int64(notify.teamId, notify.playerId);
            }
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        UpdateApproveJoinTeamResp: function (joinPlayerId){
            if (JSTimer.get_Instance().IsCdExist(System.String.Format$$String$$Object("JoinTeamRequestNotify_{0}", joinPlayerId)))
                JSTimer.get_Instance().CancelCd(System.String.Format$$String$$Object("JoinTeamRequestNotify_{0}", joinPlayerId));
            this._data._joinTeamRequestNotifyList.Remove(joinPlayerId);
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        UpdateByLeaveTeamResp: function (){
            this._data.ClearTeamInfo();
            TeamDataMgr.get_stream().OnNext(this._data);
        },
        HasTeam: function (){
            return this._data != null && this._data.teamDto != null && this._data.teamDto.id > 0;
        },
        GetCommanderId: function (){
            return this._data != null && this._data.teamDto != null ? this._data.teamDto.commanderId : 0;
        },
        FireData: function (){
            TeamDataMgr.get_stream().OnNext(this._data);
        }
    }
};
JsTypes.push(TeamDataMgr);
var TeamInfoTabContentViewController = {
    fullname: "TeamInfoTabContentViewController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._memberItemList = null;
            this.data = null;
            this.inviteBtn_UIButtonEvt = null;
            this.applicationBtn_UIButtonEvt = null;
            this.CreateTeamBtn_UIButtonEvt = null;
            this.LeaveBtn_UIButtonEvt = null;
            this.TeanFuncBtn_UIButtonEvt = null;
            this.partnerArrayBtn_UIButtonEvt = null;
            this.AwayBtn_UIButtonEvt = null;
            this.SummonBtn_UIButtonEvt = null;
            this.matchTargetBtn_UIButtonEvt = null;
            this.ArrayBtn_UIButtonEvt = null;
            this.matchBtn_UIButtonEvt = null;
            this.SpeechBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, TeamInfoTabContentView.ctor);
        },
        AfterInitView: function (){
            this._memberItemList = new System.Collections.Generic.List$1.ctor$$Int32(TeamPlayerInfoItemController.ctor, TeamDataMgr.TeamDefaultMemberCnt);
            for (var i = 0; i < TeamDataMgr.TeamDefaultMemberCnt; ++i){
                var ctrl = this.AddChild$2(TeamPlayerInfoItemController.ctor, TeamPlayerInfoItem.ctor, this.get_View().memberGrid_UIGrid.get_gameObject(), "TeamPlayerInfoItem" /* TeamPlayerInfoItem.NAME */, "TeamMemberInfo_" + i);
                ctrl.set_EnableDrag(false);
                UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, ctrl.get_OnTeamPlayerInfoItem_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                    this.OnSelectMemberInfoItem(ctrl.get_MemberDto(), ctrl.get_gameObject());
                }));
                ctrl.ResetItem();
                this._memberItemList.Add(ctrl);
                var pos = ctrl.get_transform().get_localPosition();
                ctrl.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(i * 20, pos.y, pos.z));
            }
            this.get_View().memberGrid_UIGrid.Reposition();
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            this._memberItemList.Clear();
        },
        RemoveCustomEvent: function (){
        },
        UpdateView: function (teamdata){
            this.data = teamdata.get_TeamMainViewData();
            var hasTeam = this.data.HasTeam();
            var isLeader = this.data.IsLeader();
            if (!hasTeam)
                this.UpdateApplicationBtnState(this.data.HasInvitationInfo());
            else if (!isLeader){
                this.UpdateApplicationBtnState(false);
            }
            else {
                this.UpdateApplicationBtnState(this.data.HasApplicationInfo());
            }
            this.UpdateApplicationBtn(hasTeam);
            this.UpdateTeamTarget(hasTeam);
            this.get_View().CreateTeamBtn_UIButton.get_gameObject().SetActive(!hasTeam);
            this.get_View().LeaveBtn_UIButton.get_gameObject().SetActive(hasTeam);
            this.get_View().AwayBtn_UIButton.get_gameObject().SetActive(hasTeam && !isLeader);
            this.get_View().SummonBtn_UIButton.get_gameObject().SetActive(hasTeam && isLeader);
            this.get_View().BottomBtnGroup_UIGrid.Reposition();
            this.UpdateMemberGrid(this.data);
        },
        UpdateTipLabel: function (str){
            this.get_View().tipLabel_UILabel.set_text(str);
        },
        UpdateApplicationBtn: function (hasTeam){
            this.get_View().applyLabel_UILabel.set_text(hasTeam ? "申请" : "邀请");
        },
        UpdateTeamTarget: function (hasTeam){
            this.get_View().TeamTarget.SetActive(hasTeam);
            if (hasTeam){
            }
        },
        UpdateMemberGrid: function (teamData){
            if (UnityEngine.Object.op_Equality(this.get_View().memberGrid_UIGrid, null)){
                GameDebuger.LogError("Error: can not find the correct grid: View.memberGrid_UIGrid", null);
                return;
            }
            var dataSet = teamData.GetMainViewMemberSet();
            var _selectedMemberIndex = -1 /* -1 */;
            var _setCommanderToggle = false;
            var i = 0;
            CollectionExtension.ForEach$1(System.Object.ctor, dataSet, $CreateAnonymousDelegate(this, function (data){
                var teamMember = As(data, AppDto.TeamMemberDto.ctor);
                var item = this._memberItemList.get_Item$$Int32(i);
                if (teamMember != null)
                    item.UpdateView$$TeamMemberDto$$Boolean(teamMember, teamData.IsCommander(teamMember.id));
                else {
                    var playerDto = As(data, AppDto.PlayerDto.ctor);
                    if (playerDto != null){
                        item.UpdateView$$PlayerDto(playerDto);
                    }
                    else {
                        item.ResetItem();
                    }
                }
                item.set_EnableDrag(!teamData.HasTeam() || teamData.IsLeader());
                i++;
            }));
            this.get_View().memberGrid_UIGrid.Reposition();
        },
        UpdateApplicationBtnState: function (showTween){
            this.get_View().applicationBtn_TweenScale.set_enabled(showTween);
            this.get_View().applicationBtn_TweenScale.ResetToBeginning();
        },
        OnSelectMemberInfoItem: function (memberDto, go){
            if (memberDto == null || memberDto.id == ModelManager.get_Player().GetPlayerId())
                return;
            var idx = memberDto.index;
            var optionDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.String.ctor, System.Action$1.ctor, 3);
            if (memberDto.id == ModelManager.get_IPlayer().GetPlayerId()){
                return;
            }
            optionDic.Add("查看信息", $CreateAnonymousDelegate(this, function (optName){
                ProxyMainUIModule.OpenPlayerInfoView$$Int64$$Vector3(memberDto.id, UnityEngine.Vector3.get_zero());
            }));
            if (this.data.IsLeader()){
                optionDic.Add("移交队长", $CreateAnonymousDelegate(this, function (optName){
                    TeamDataMgr.TeamNetMsg.AssignLeader(memberDto);
                }));
                optionDic.Add("请离队伍", $CreateAnonymousDelegate(this, function (optName){
                    TeamDataMgr.TeamNetMsg.KickOutMember$$TeamMemberDto(memberDto);
                }));
                optionDic.Add("召唤归队", $CreateAnonymousDelegate(this, function (optName){
                    TeamDataMgr.TeamNetMsg.SummonAwayTeamMembers();
                }));
                if (TeamDataMgr.get_Instance().GetCommanderId() == memberDto.id){
                    optionDic.Add("取消指挥", $CreateAnonymousDelegate(this, function (optName){
                        TeamDataMgr.TeamNetMsg.SetCommander(memberDto.id);
                    }));
                }
                else {
                    optionDic.Add("委任指挥", $CreateAnonymousDelegate(this, function (optName){
                        TeamDataMgr.TeamNetMsg.SetCommander(memberDto.id);
                    }));
                }
                MultipleSelectionManager.Open(go, optionDic, idx == this._memberItemList.get_Count() - 1 ? MultipleSelectionManager.Side.LeftTop : MultipleSelectionManager.Side.RightTop, null, 0, null);
            }
        },
        InitReactiveEvents: function (){
            this.inviteBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().inviteBtn_UIButton);
            this.applicationBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().applicationBtn_UIButton);
            this.CreateTeamBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().CreateTeamBtn_UIButton);
            this.LeaveBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().LeaveBtn_UIButton);
            this.TeanFuncBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().TeanFuncBtn_UIButton);
            this.partnerArrayBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().partnerArrayBtn_UIButton);
            this.AwayBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().AwayBtn_UIButton);
            this.SummonBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().SummonBtn_UIButton);
            this.matchTargetBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().matchTargetBtn_UIButton);
            this.ArrayBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().ArrayBtn_UIButton);
            this.matchBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().matchBtn_UIButton);
            this.SpeechBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().SpeechBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.inviteBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.inviteBtn_UIButtonEvt);
            this.applicationBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.applicationBtn_UIButtonEvt);
            this.CreateTeamBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CreateTeamBtn_UIButtonEvt);
            this.LeaveBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.LeaveBtn_UIButtonEvt);
            this.TeanFuncBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TeanFuncBtn_UIButtonEvt);
            this.partnerArrayBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.partnerArrayBtn_UIButtonEvt);
            this.AwayBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.AwayBtn_UIButtonEvt);
            this.SummonBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.SummonBtn_UIButtonEvt);
            this.matchTargetBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.matchTargetBtn_UIButtonEvt);
            this.ArrayBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ArrayBtn_UIButtonEvt);
            this.matchBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.matchBtn_UIButtonEvt);
            this.SpeechBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.SpeechBtn_UIButtonEvt);
        },
        OninviteBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OninviteBtn_UIButtonClick: function (){
            return this.inviteBtn_UIButtonEvt;
        },
        OnapplicationBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnapplicationBtn_UIButtonClick: function (){
            return this.applicationBtn_UIButtonEvt;
        },
        OnCreateTeamBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCreateTeamBtn_UIButtonClick: function (){
            return this.CreateTeamBtn_UIButtonEvt;
        },
        OnLeaveBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnLeaveBtn_UIButtonClick: function (){
            return this.LeaveBtn_UIButtonEvt;
        },
        OnTeanFuncBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTeanFuncBtn_UIButtonClick: function (){
            return this.TeanFuncBtn_UIButtonEvt;
        },
        OnpartnerArrayBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnpartnerArrayBtn_UIButtonClick: function (){
            return this.partnerArrayBtn_UIButtonEvt;
        },
        OnAwayBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnAwayBtn_UIButtonClick: function (){
            return this.AwayBtn_UIButtonEvt;
        },
        OnSummonBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnSummonBtn_UIButtonClick: function (){
            return this.SummonBtn_UIButtonEvt;
        },
        OnmatchTargetBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnmatchTargetBtn_UIButtonClick: function (){
            return this.matchTargetBtn_UIButtonEvt;
        },
        OnArrayBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnArrayBtn_UIButtonClick: function (){
            return this.ArrayBtn_UIButtonEvt;
        },
        OnmatchBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnmatchBtn_UIButtonClick: function (){
            return this.matchBtn_UIButtonEvt;
        },
        OnSpeechBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnSpeechBtn_UIButtonClick: function (){
            return this.SpeechBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamInfoTabContentViewController);
var TeamInvitationItemController = {
    fullname: "TeamInvitationItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.itemCtrlList = new System.Collections.Generic.List$1.ctor(HeroHeadItemController.ctor);
            this._dataIdx = -1 /* -1 */;
            this.headCtrl = null;
            this.applyBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, TeamInvitationItem.ctor);
        },
        DataIdx$$: "System.Int32",
        get_DataIdx: function (){
            return this._dataIdx;
        },
        set_DataIdx: function (value){
            this._dataIdx = value;
        },
        AfterInitView: function (){
            this.get_View().Label_UILabel.set_text("同意");
            this.headCtrl = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().leaderAnchor.get_gameObject(), "HeroHeadItem" /* HeroHeadItem.NAME */, "");
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
        },
        RemoveCustomEvent: function (){
        },
        UpdateView$$ITeamData: function (data){
        },
        UpdateView$$TeamInvitationNotify: function (notify){
            if (notify == null)
                this.get_gameObject().SetActive(false);
            else {
                this.get_gameObject().SetActive(true);
            }
            this.get_View().targetName_UILabel.set_text("");
            var dto = null;
            (function (){
                var $1 = $Ref(null, dto);
                var $res = CollectionExtension.TryGetValue$1(AppDto.TeamMemberSimpleDto.ctor, notify.inviteTeamMembers, 0, $1);
                dto = $1.Value;
                return $res;
            }).call(this);
            if (dto != null){
                this.get_View().leaderName_UILabel.set_text(dto.nickname);
                this.headCtrl.UpdateData$$TeamMemberSimpleDto(dto);
                this.get_View().lvLbl_UILabel.set_text("Lv." + dto.grade);
                this.get_View().factionLbl_UILabel.set_text(dto.get_faction().name);
                UIHelper.SetFactionIcon(this.get_View().factionInfo_UISprite, dto.factionId, false);
            }
            else {
                GameUtil.LogTeam("there is an error in data from server");
            }
        },
        UpdateView$$TeamInvitationNotify$$Int32: function (notify, dataindex){
            var show = notify == null;
            GameUtil.LogTeam("gameObject ActiveAnimation " + this.get_gameObject().get_name() + "   " + show.toString());
            if (notify == null){
                this.get_gameObject().SetActive(false);
                return;
            }
            GameUtil.LogTeam("item hash code" + this.get_gameObject().GetHashCode());
            this.get_gameObject().SetActive(true);
            var set = new System.Collections.Generic.List$1.ctor(AppDto.TeamMemberSimpleDto.ctor);
            if (notify != null){
                this._dataIdx = dataindex;
                set = notify.inviteTeamMembers.GetRange(1, notify.inviteTeamMembers.get_Count() - 1);
            }
            this.UpdateHeroGrid(set);
            this.UpdateView$$TeamInvitationNotify(notify);
        },
        UpdateHeroGrid: function (data){
            CollectionExtension.ForEachI$1(AppDto.TeamMemberSimpleDto.ctor, data, $CreateAnonymousDelegate(this, function (member, idx){
                var ctrl = null;
                (function (){
                    var $1 = $Ref(null, ctrl);
                    var $res = CollectionExtension.TryGetValue$1(HeroHeadItemController.ctor, this.itemCtrlList, idx, $1);
                    ctrl = $1.Value;
                    return $res;
                }).call(this);
                if (ctrl == null){
                    ctrl = this.AddCachedChild$2$$GameObject$$String$$String(HeroHeadItemController.ctor, HeroHeadItem.ctor, this.get_View().itemGrid_UIGrid.get_gameObject(), "HeroHeadItem" /* HeroHeadItem.NAME */, "");
                    this.itemCtrlList.Add(ctrl);
                }
                ctrl.UpdateData$$TeamMemberSimpleDto(member);
            }));
            for (var i = data.get_Count(); i < this.itemCtrlList.get_Count(); ++i){
                var ctrl = this.itemCtrlList.get_Item$$Int32(i);
                ctrl.UpdateWithNullData();
            }
        },
        InitReactiveEvents: function (){
            this.applyBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().applyBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.applyBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.applyBtn_UIButtonEvt);
        },
        OnapplyBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnapplyBtn_UIButtonClick: function (){
            return this.applyBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamInvitationItemController);
var TeamPlayerInfoItemController = {
    fullname: "TeamPlayerInfoItemController",
    baseTypeName: "MonolessViewController$1",
    staticDefinition: {
        GetPosFlagName: function (teamDto, isCommander){
            var flagName = System.String.Empty;
            if (teamDto.memberStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */)
                flagName = "teamPos_leader";
            else if (isCommander)
                flagName = "teamPos_order";
            else if (teamDto.memberStatus == 3 /* (int)TeamMemberDto.TeamMemberStatus.Away */)
                flagName = "flag_away";
            else if (teamDto.memberStatus == 4 /* (int)TeamMemberDto.TeamMemberStatus.Offline */)
                flagName = "flag_offline";
            else if (teamDto.memberStatus == 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */)
                flagName = "teamPos_member";
            return flagName;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._modelController = null;
            this.TeamPlayerInfoItem_UIButtonEvt = null;
            this.teamMemberDto = null;
            this.agreeBtn_UIButtonEvt = null;
            MonolessViewController$1.ctor.call(this, TeamPlayerInfoItem.ctor);
        },
        MemberDto$$: "AppDto.TeamMemberDto",
        get_MemberDto: function (){
            return this.teamMemberDto;
        },
        ModelCom$$: "ModelDisplayController",
        get_ModelCom: function (){
            return this._modelController;
        },
        AfterInitView: function (){
            this._modelController = ModelDisplayController.GenerateUICom(this.get_View().ModelAnchor_Transform, 4);
            this._modelController.Init$$Int32$$Int32$$Single$$Single(200, 200, 0, 1.5);
            this._modelController.SetBoxColliderEnabled(false);
        },
        RegistCustomEvent: function (){
            this.TeamPlayerInfoItem_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().TeamPlayerInfoItem_UIButton);
        },
        OnDispose: function (){
            this.get_View().TeamPlayerInfoItem_UIDragDropItem.set_enabled(false);
        },
        RemoveCustomEvent: function (){
            UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.TeamPlayerInfoItem_UIButtonEvt);
        },
        OnTeamPlayerInfoItem_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnTeamPlayerInfoItem_UIButtonClick: function (){
            return this.TeamPlayerInfoItem_UIButtonEvt;
        },
        ResetItem: function (){
            this.teamMemberDto = null;
            this._modelController.CleanUpModel();
            this.get_View().nameLabel_UILabel.set_text("");
            this.get_View().lvLabel_UILabel.set_text("");
            this.get_View().factionLabel_UILabel.set_text("");
            this.get_View().factionSprite_UISprite.set_enabled(false);
            this.get_View().teamPosFlag_UISprite.set_enabled(false);
            this.get_View().effectDescLbl_UILabel.set_text("");
        },
        EnableDrag$$: "System.Boolean",
        get_EnableDrag: function (){
            return this.get_View().TeamPlayerInfoItem_UIDragDropItem.get_enabled();
        },
        set_EnableDrag: function (value){
            this.get_View().TeamPlayerInfoItem_UIDragDropItem.set_enabled(value);
        },
        UpdateView$$PlayerDto: function (playerDto){
            this.teamMemberDto = null;
            if (playerDto == null){
                this.ResetItem();
            }
            else {
                this.UpdateInfo(playerDto.name, playerDto.grade);
                this.SetFaction(playerDto.get_faction());
                this.get_ModelCom().SetupMainRoleModel(false);
                this.get_ModelCom().SetModelScale(1);
                this.get_ModelCom().SetModelOffset(-0.15 /* -0.15f */);
                this.SetupPosFlag("");
            }
        },
        UpdateView$$TeamMemberDto$$Boolean: function (memberDto, isCommander){
            this.teamMemberDto = memberDto;
            if (memberDto == null){
                this.ResetItem();
            }
            else {
                this.SetMaskLbl("");
                this.UpdateInfo(memberDto.nickname, memberDto.grade);
                this.SetFaction(memberDto.get_faction());
                this.get_ModelCom().SetupMainRoleModel(false);
                this.get_ModelCom().get_mUITexture().set_color(UnityEngine.Color.get_white());
                this.get_ModelCom().SetModelScale(1);
                this.get_ModelCom().SetModelOffset(-0.15 /* -0.15f */);
                this.UpdateTeamPosInfo(isCommander);
            }
        },
        SetEffectDesc: function (effectInfo){
            var strBuilder = new System.Text.StringBuilder.ctor();
            CollectionExtension.ForEach$1(Tuple$2.ctor, effectInfo, $CreateAnonymousDelegate(this, function (info){
                var iconStr = info.p2 > 0 ? "#up1" : "#down1";
                strBuilder.Append$$String(System.String.Format$$String$$Object$$Object("{0}{1} ", info.p1, iconStr));
            }));
            this.get_View().effectDescLbl_UILabel.set_text(strBuilder.toString());
        },
        UpdateTeamPosInfo: function (isCommander){
            var flagName = TeamPlayerInfoItemController.GetPosFlagName(this.teamMemberDto, isCommander);
            this.SetupPosFlag(flagName);
        },
        SetMaskLbl: function (tips){
            if (System.String.IsNullOrEmpty(tips)){
                this.get_View().maskLbl_UILabel.get_cachedGameObject().SetActive(false);
            }
            else {
                this.get_View().maskLbl_UILabel.set_text(tips);
                this.get_View().maskLbl_UILabel.get_cachedGameObject().SetActive(true);
            }
        },
        SetupPosFlag: function (flagName){
            if (System.String.IsNullOrEmpty(flagName)){
                this.get_View().teamPosFlag_UISprite.set_enabled(false);
            }
            else {
                this.get_View().teamPosFlag_UISprite.set_enabled(true);
                this.get_View().teamPosFlag_UISprite.set_spriteName(flagName);
            }
        },
        SetFaction: function (faction){
            this.get_View().factionLabel_UILabel.set_text(faction.name);
            this.get_View().factionSprite_UISprite.set_enabled(true);
            UIHelper.SetOtherIcon(this.get_View().factionSprite_UISprite, System.String.Format$$String$$Object("small_faction_{0}", faction.id), false);
        },
        UpdateInfo: function (name, lv){
            this.get_View().nameLabel_UILabel.set_text(name);
            this.get_View().lvLabel_UILabel.set_text(System.String.Format$$String$$Object("Lv.{0}", lv));
        },
        InitReactiveEvents: function (){
            this.agreeBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.get_View().agreeBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.agreeBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.agreeBtn_UIButtonEvt);
        },
        OnagreeBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnagreeBtn_UIButtonClick: function (){
            return this.agreeBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamPlayerInfoItemController);
var ITeamBeInviteData = {
    fullname: "ITeamBeInviteData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamBeInviteData);
var IExpandTeamData = {
    fullname: "IExpandTeamData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IExpandTeamData);
var ITeamApplyViewData = {
    fullname: "ITeamApplyViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamApplyViewData);
var ITeamInviteViewData = {
    fullname: "ITeamInviteViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamInviteViewData);
var ITeamMainViewData = {
    fullname: "ITeamMainViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamMainViewData);
var TeamMainViewTab = {
    fullname: "TeamMainViewTab",
    staticDefinition: {
        Team: 0,
        CreateTeam: 1
    },
    Kind: "Enum"
};
JsTypes.push(TeamMainViewTab);
var ITeamData = {
    fullname: "ITeamData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamData);
var TeamDataHelper = {
    fullname: "TeamDataHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            TeamDataHelper.TeamMemberIndexSorter = function (x, y){
                return 1;
            };
            TeamDataHelper.StatusFlag = (function (){
                var $v32 = new System.Collections.Generic.Dictionary$2.ctor(AppDto.TeamMemberDto.TeamMemberStatus.ctor, System.String.ctor);
                $v32.Add(AppDto.TeamMemberDto.TeamMemberStatus.Leader, "teamPos_leader");
                $v32.Add(AppDto.TeamMemberDto.TeamMemberStatus.Away, "flag_away");
                $v32.Add(AppDto.TeamMemberDto.TeamMemberStatus.Offline, "flag_offline");
                $v32.Add(AppDto.TeamMemberDto.TeamMemberStatus.Member, "teamPos_member");
                $v32.Add(AppDto.TeamMemberDto.TeamMemberStatus.NoTeam, "");
                return $v32;
            }).call(this);
        },
        GetFlagByStatus: function (status){
            var s = status;
            var flagName = "";
            (function (){
                var $1 = $Ref(null, flagName);
                var $res = TeamDataHelper.StatusFlag.TryGetValue(s, $1);
                flagName = $1.Value;
                return $res;
            }).call(this);
            return flagName;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(TeamDataHelper);
var IMemberInfo = {
    fullname: "IMemberInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMemberInfo);
var TeamActionStatusDto = {
    fullname: "TeamActionStatusDto",
    baseTypeName: "AppDto.GeneralResponse",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.errorCode = 0;
            AppDto.GeneralResponse.ctor.call(this);
        }
    }
};
JsTypes.push(TeamActionStatusDto);
var TeamApplicationItem = {
    fullname: "TeamApplicationItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            TeamApplicationItem.NAME = "TeamApplicationItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.teamPosFlag_UISprite = null;
            this.posLbl_UILabel = null;
            this.ModelAnchor_Transform = null;
            this.nameLabel_UILabel = null;
            this.factionSprite_UISprite = null;
            this.factionLabel_UILabel = null;
            this.lvLabel_UILabel = null;
            this.TeamApplicationItem_UIButton = null;
            this.agreeBtn_UIButton = null;
            this.effectDescLbl_UILabel = null;
            this.agreeLabel_UILabel = null;
            this.statusFlag_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.teamPosFlag_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "teamPosFlag");
            this.posLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "posLbl");
            this.ModelAnchor_Transform = GameObjectExt.FindTrans(root, "ModelAnchor");
            this.nameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/nameInfo/nameLabel");
            this.factionSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "infoGroup/factionInfo/factionSprite");
            this.factionLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/factionInfo/factionLabel");
            this.lvLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/lvInfo/lvLabel");
            this.TeamApplicationItem_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "");
            this.agreeBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "infoGroup/agreeBtn");
            this.effectDescLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/effectDescLbl");
            this.agreeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/agreeBtn/agreeLabel");
            this.statusFlag_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "statusFlag");
        }
    }
};
JsTypes.push(TeamApplicationItem);
var ITeamApplicationView = {
    fullname: "ITeamApplicationView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamApplicationView);
var TeamApplicationView = {
    fullname: "TeamApplicationView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            TeamApplicationView.NAME = "TeamApplicationView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITeamApplicationView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.listStream = new UniRx.Subject$1.ctor(Tuple$3.ctor);
            this.CloseBtn_UIButton = null;
            this.IgnoreBtn_UIButton = null;
            this.teamInfoLbl_UILabel = null;
            this.titleLbl_UILabel = null;
            this.itemGrid_UIRecycledList = null;
            this.CloseBtn_UIButtonEvt = null;
            this.IgnoreBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, TeamApplicationView.ctor, ITeamApplicationView.ctor, ITeamData.ctor);
        },
        ListStream$$: "UniRx.IObservable`1[[Tuple`3[[UnityEngine.GameObject],[System.Int32],[System.Int32]]]]",
        get_ListStream: function (){
            return this.listStream;
        },
        LateElementBinding: function (){
            this.titleLbl_UILabel.set_text("组队申请");
            this.itemGrid_UIRecycledList.onUpdateItem = $CreateAnonymousDelegate(this, function (item, itemIndex, dataIndex){
                this.listStream.OnNext(Tuple.Create$3$$T1$$T2$$T3(UnityEngine.GameObject.ctor, System.Int32.ctor, System.Int32.ctor, item, itemIndex, dataIndex));
            });
        },
        OnDispose: function (){
            UniRx.SubjectExtensions.CloseOnceNull$1(Tuple$3.ctor, this.listStream);
        },
        UpdateView: function (teamData){
            var data = teamData.get_TeamApplyViewData();
            this.teamInfoLbl_UILabel.set_text(System.String.Format$$String$$Object("当前队伍：{0}/5", data.GetMemberCount()));
            var cnt = data.GetApplicationCnt();
            this.UpdateListInfo(cnt);
        },
        ItemGrid_GO$$: "UnityEngine.GameObject",
        get_ItemGrid_GO: function (){
            return this.itemGrid_UIRecycledList.get_gameObject();
        },
        UpdateListInfo: function (cnt){
            this.itemGrid_UIRecycledList.UpdateDataCount(cnt, false);
        },
        itemSize$$: "System.Single",
        get_itemSize: function (){
            return this.itemGrid_UIRecycledList.itemSize;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentBg/CloseBtn");
            this.IgnoreBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentBg/IgnoreBtn");
            this.teamInfoLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentBg/teamInfoLbl");
            this.titleLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentBg/titleLbl");
            this.itemGrid_UIRecycledList = GameObjectExt.FindScript$1(UIRecycledList.ctor, root, "ContentBg/ScrollView/itemGrid");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.IgnoreBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.IgnoreBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.IgnoreBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.IgnoreBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnIgnoreBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnIgnoreBtn_UIButtonClick: function (){
            return this.IgnoreBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamApplicationView);
var ITeamBeInviteView = {
    fullname: "ITeamBeInviteView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamBeInviteView);
var TeamBeInviteView = {
    fullname: "TeamBeInviteView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            TeamBeInviteView.NAME = "TeamBeInviteView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITeamBeInviteView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TeamInvitationItem = null;
            this.CancelButton_UIButton = null;
            this.OKButton_UIButton = null;
            this.InfoLabel2_UILabel = null;
            this.CancelLabel_UILabel = null;
            this.ShrinkBtn_UIButton = null;
            this.CancelButton_UIButtonEvt = null;
            this.OKButton_UIButtonEvt = null;
            this.ShrinkBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, TeamBeInviteView.ctor, ITeamBeInviteView.ctor, ITeamData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (teamData){
            var data = teamData.get_TeamBeInviteData();
            var tNotify = data.GetCurrentInvitation();
            var tShowTarget = false;
            var tYPos = tShowTarget ? 33 : 13;
            var leaderInfo = tNotify.inviteTeamMembers.Find($CreateAnonymousDelegate(this, function (m){
                return m.id == tNotify.inviterPlayerId;
            }));
            var lv = System.String.Format$$String$$Object("({0}级)", leaderInfo.grade.toString());
            this.InfoLabel2_UILabel.set_text(System.String.Format$$String$$Object$$Object("{0}{1}邀请你加入他的队伍", AppStringHelper.WrapColor$$String$$String(leaderInfo.nickname, "0081AB" /* ColorConstantV3.Color_MissionBlue_Str */), AppStringHelper.WrapColor$$String$$String(lv, "0081AB" /* ColorConstantV3.Color_MissionBlue_Str */)));
        },
        SetCancelLabel: function (time){
            var cancelLabelStr = "拒绝";
            if (time > 0){
                this.CancelLabel_UILabel.set_text(cancelLabelStr + "(" + time + ")");
            }
        },
        TeamInfoGO$$: "UnityEngine.GameObject",
        get_TeamInfoGO: function (){
            return this.TeamInvitationItem;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TeamInvitationItem = GameObjectExt.FindGameObject(root, "ContentFrame/TeamInvitationItem");
            this.CancelButton_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentFrame/CancelButton");
            this.OKButton_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentFrame/OKButton");
            this.InfoLabel2_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentFrame/InfoLabel2");
            this.CancelLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentFrame/CancelButton/CancelLabel");
            this.ShrinkBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ShrinkBtn");
        },
        InitReactiveEvents: function (){
            this.CancelButton_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CancelButton_UIButton);
            this.OKButton_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.OKButton_UIButton);
            this.ShrinkBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.ShrinkBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CancelButton_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CancelButton_UIButtonEvt);
            this.OKButton_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.OKButton_UIButtonEvt);
            this.ShrinkBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.ShrinkBtn_UIButtonEvt);
        },
        OnCancelButton_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCancelButton_UIButtonClick: function (){
            return this.CancelButton_UIButtonEvt;
        },
        OnOKButton_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnOKButton_UIButtonClick: function (){
            return this.OKButton_UIButtonEvt;
        },
        OnShrinkBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnShrinkBtn_UIButtonClick: function (){
            return this.ShrinkBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamBeInviteView);
var TeamInfoTabContentView = {
    fullname: "TeamInfoTabContentView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            TeamInfoTabContentView.NAME = "TeamInfoTabContentView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TopBtnGroup = null;
            this.inviteBtn_UIButton = null;
            this.applicationBtn_UIButton = null;
            this.tipLabel_UILabel = null;
            this.memberGrid_UIGrid = null;
            this.CreateTeamBtn_UIButton = null;
            this.LeaveBtn_UIButton = null;
            this.TeanFuncBtn_UIButton = null;
            this.partnerArrayBtn_UIButton = null;
            this.AwayBtn_UIButton = null;
            this.SummonBtn_UIButton = null;
            this.targetInfoLbl_UILabel = null;
            this.matchTargetBtn_UIButton = null;
            this.ArrayBtn_UIButton = null;
            this.matchBtn_UIButton = null;
            this.SpeechBtn_UIButton = null;
            this.TeamTarget = null;
            this.BottomBtnGroup_UIGrid = null;
            this.applyLabel_UILabel = null;
            this.matchBtn_UIButtonScale = null;
            this.applicationBtn_TweenScale = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TopBtnGroup = GameObjectExt.FindGameObject(root, "TopBtnGroup");
            this.inviteBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TopBtnGroup/inviteBtn");
            this.applicationBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TopBtnGroup/applicationBtn");
            this.tipLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TopBtnGroup/tipLabel");
            this.memberGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "memberGroup/memberGrid");
            this.CreateTeamBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomBtnGroup/CreateTeamBtn");
            this.LeaveBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomBtnGroup/LeaveBtn");
            this.TeanFuncBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomBtnGroup/TeanFuncBtn");
            this.partnerArrayBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomBtnGroup/partnerArrayBtn");
            this.AwayBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomBtnGroup/AwayBtn");
            this.SummonBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BottomBtnGroup/SummonBtn");
            this.targetInfoLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TeamTarget/targetInfoLbl");
            this.matchTargetBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TeamTarget/matchTargetBtn");
            this.ArrayBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ArrayBtn");
            this.matchBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TeamTarget/matchBtn");
            this.SpeechBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "TeamTarget/SpeechBtn");
            this.TeamTarget = GameObjectExt.FindGameObject(root, "TeamTarget");
            this.BottomBtnGroup_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "BottomBtnGroup");
            this.applyLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "TopBtnGroup/applicationBtn/btnSprite/applyLabel");
            this.matchBtn_UIButtonScale = GameObjectExt.FindScript$1(UIButtonScale.ctor, root, "TeamTarget/matchBtn");
            this.applicationBtn_TweenScale = GameObjectExt.FindScript$1(TweenScale.ctor, root, "TopBtnGroup/applicationBtn");
        }
    }
};
JsTypes.push(TeamInfoTabContentView);
var TeamInvitationItem = {
    fullname: "TeamInvitationItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            TeamInvitationItem.NAME = "TeamInvitationItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.leaderName_UILabel = null;
            this.lvLbl_UILabel = null;
            this.factionInfo_UISprite = null;
            this.factionLbl_UILabel = null;
            this.targetName_UILabel = null;
            this.applyBtn_UIButton = null;
            this.Label_UILabel = null;
            this.itemGrid_UIGrid = null;
            this.leaderAnchor = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.leaderName_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "leaderName");
            this.lvLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "lvLbl");
            this.factionInfo_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "factionInfo");
            this.factionLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "factionInfo/factionLbl");
            this.targetName_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "targetName");
            this.applyBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "applyBtn");
            this.Label_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "applyBtn/Label");
            this.itemGrid_UIGrid = GameObjectExt.FindScript$1(UIGrid.ctor, root, "itemGrid");
            this.leaderAnchor = GameObjectExt.FindGameObject(root, "leaderAnchor");
        }
    }
};
JsTypes.push(TeamInvitationItem);
var ITeamInvitationView = {
    fullname: "ITeamInvitationView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamInvitationView);
var TeamInvitationView = {
    fullname: "TeamInvitationView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            TeamInvitationView.NAME = "TeamInvitationView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITeamInvitationView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.titleLbl_UILabel = null;
            this.IgnoreBtn_UIButton = null;
            this.ItemGrid_UIRecycledList = null;
            this.leaderAnchor_GameObject = null;
            this.CloseBtn_UIButtonEvt = null;
            this.IgnoreBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, TeamInvitationView.ctor, ITeamInvitationView.ctor, ITeamData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (teamData){
            if (teamData == null)
                return;
            var data = teamData.get_TeamInviteViewData();
        },
        ItemUIRecycledList$$: "UIRecycledList",
        get_ItemUIRecycledList: function (){
            return this.ItemGrid_UIRecycledList;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "ContentBg/CloseBtn");
            this.titleLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "ContentBg/titleLbl");
            this.IgnoreBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "IgnoreBtn");
            this.ItemGrid_UIRecycledList = GameObjectExt.FindScript$1(UIRecycledList.ctor, root, "ScrollView/ItemGrid");
            this.leaderAnchor_GameObject = GameObjectExt.FindGameObject(root, "leaderAnchor");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
            this.IgnoreBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.IgnoreBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
            this.IgnoreBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.IgnoreBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        },
        OnIgnoreBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnIgnoreBtn_UIButtonClick: function (){
            return this.IgnoreBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamInvitationView);
var ITeamMainView = {
    fullname: "ITeamMainView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamMainView);
var TeamMainView = {
    fullname: "TeamMainView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            TeamMainView.NAME = "TeamMainView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITeamMainView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseBtn_UIButton = null;
            this.TitleNameSprite_UISprite = null;
            this.TabContentRoot = null;
            this.ToggleBtn_Team_UIToggle = null;
            this.ToggleBtn_Team_UIToggledObjects = null;
            this.ToggleBtn_CreateTeam_UIToggle = null;
            this.ToggleBtn_CreateTeam_UIToggledObjects = null;
            this.CteateTeamRoot = null;
            this.CloseBtn_UIButtonEvt = null;
            FRPBaseView$3.ctor.call(this, TeamMainView.ctor, ITeamMainView.ctor, ITeamData.ctor);
        },
        LateElementBinding: function (){
        },
        OnDispose: function (){
        },
        UpdateView: function (data){
        },
        Get_TabContentRoot: function (){
            return this.TabContentRoot;
        },
        Get_CreateTabRoot: function (){
            return this.CteateTeamRoot;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.CloseBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "BaseTabWindow/CloseBtn");
            this.TitleNameSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "BaseTabWindow/TitleNameSprite");
            this.TabContentRoot = GameObjectExt.FindGameObject(root, "ContentBg/TabContentRoot");
            this.ToggleBtn_Team_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "BaseTabWindow/WinTabGroup/ToggleBtn_Team");
            this.ToggleBtn_Team_UIToggledObjects = GameObjectExt.FindScript$1(UIToggledObjects.ctor, root, "BaseTabWindow/WinTabGroup/ToggleBtn_Team");
            this.ToggleBtn_CreateTeam_UIToggle = GameObjectExt.FindScript$1(UIToggle.ctor, root, "BaseTabWindow/WinTabGroup/ToggleBtn_CreateTeam");
            this.ToggleBtn_CreateTeam_UIToggledObjects = GameObjectExt.FindScript$1(UIToggledObjects.ctor, root, "BaseTabWindow/WinTabGroup/ToggleBtn_CreateTeam");
            this.CteateTeamRoot = GameObjectExt.FindGameObject(root, "ContentBg/CteateTeamRoot");
        },
        InitReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.NGUIEventExtensions.AsObservable$$UIButton(this.CloseBtn_UIButton);
        },
        ClearReactiveEvents: function (){
            this.CloseBtn_UIButtonEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.CloseBtn_UIButtonEvt);
        },
        OnCloseBtn_UIButtonClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtn_UIButtonClick: function (){
            return this.CloseBtn_UIButtonEvt;
        }
    }
};
JsTypes.push(TeamMainView);
var TeamPlayerInfoItem = {
    fullname: "TeamPlayerInfoItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            TeamPlayerInfoItem.NAME = "TeamPlayerInfoItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.teamPosFlag_UISprite = null;
            this.ModelAnchor_Transform = null;
            this.nameLabel_UILabel = null;
            this.factionSprite_UISprite = null;
            this.factionLabel_UILabel = null;
            this.TeamPlayerInfoItem_UIButton = null;
            this.agreeBtn_UIButton = null;
            this.maskLbl_UILabel = null;
            this.effectDescLbl_UILabel = null;
            this.TeamPlayerInfoItem_UISprite = null;
            this.agreeLabel_UILabel = null;
            this.lvLabel_UILabel = null;
            this.TeamPlayerInfoItem_UIDragDropItem = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject();
            this.TeamPlayerInfoItem_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "");
            this.TeamPlayerInfoItem_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "");
            this.TeamPlayerInfoItem_UIDragDropItem = GameObjectExt.FindScript$1(DragDropItem.ctor, root, "");
            this.ModelAnchor_Transform = GameObjectExt.FindTrans(root, "ModelAnchor");
            this.teamPosFlag_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "teamPosFlag");
            this.nameLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/nameInfo/nameLabel");
            this.factionSprite_UISprite = GameObjectExt.FindScript$1(UISprite.ctor, root, "infoGroup/factionInfo/factionSprite");
            this.factionLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/factionInfo/factionLabel");
            this.agreeBtn_UIButton = GameObjectExt.FindScript$1(UIButton.ctor, root, "infoGroup/agreeBtn");
            this.maskLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/maskLbl");
            this.effectDescLbl_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/effectDescLbl");
            this.agreeLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/agreeBtn/agreeLabel");
            this.lvLabel_UILabel = GameObjectExt.FindScript$1(UILabel.ctor, root, "infoGroup/lvInfo/lvLabel");
        }
    }
};
JsTypes.push(TeamPlayerInfoItem);
var TestSdkController = {
    fullname: "TestSdkController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            TestSdkController.CheckQRCodeLoginInterval = 1;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._qrCodeSid = null;
            this._requestLoginNow = false;
            MonoViewController$1.ctor.call(this, TestSdkView.ctor);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LocalLoginButton_UIButton.onClick, $CreateDelegate(this, this.OnLocalLoginButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ExternalLoginButton_UIButton.onClick, $CreateDelegate(this, this.OnExternalLoginButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().TestLoginButton_UIButton.onClick, $CreateDelegate(this, this.OnTestLoginButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RegButton_UIButton.onClick, $CreateDelegate(this, this.OnRegButtonClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().UseGuideLabel_UIButton.onClick, $CreateDelegate(this, this.OnUseGuideBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().DownloadLabel_UIButton.onClick, $CreateDelegate(this, this.OnDownloadBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RefreshBtn_UIButton.onClick, $CreateDelegate(this, this.RequestQRCode));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().RefreshScanBtn_UIButton.onClick, $CreateDelegate(this, this.RequestQRCode));
        },
        LockLoginButton: function (locked){
            this.get_View().LocalLoginButton_UIButton.GetComponent$1(UISprite.ctor).set_isGrey(locked);
            this.get_View().LocalLoginButton_UIButton.set_enabled(!locked);
            this.get_View().ExternalLoginButton_UIButton.GetComponent$1(UISprite.ctor).set_isGrey(locked);
            this.get_View().ExternalLoginButton_UIButton.set_enabled(!locked);
            this.get_View().TestLoginButton_UIButton.GetComponent$1(UISprite.ctor).set_isGrey(locked);
            this.get_View().TestLoginButton_UIButton.set_enabled(!locked);
        },
        OnLocalLoginButtonClick: function (){
            var account = this.get_View().NameInput_UIInput.get_value();
            var password = this.get_View().PasswordInput_UIInput.get_value();
            this.RequestSdkAccountLogin(account, password);
        },
        OnExternalLoginButtonClick: function (){
            var playerId = this.get_View().NameInput_UIInput.get_value();
            var password = this.get_View().PasswordInput_UIInput.get_value();
            if (System.String.IsNullOrEmpty(playerId)){
                TipManager.AddTip("提示：请先输入账号", false, false, "");
                return;
            }
            if (System.String.IsNullOrEmpty(password)){
                TipManager.AddTip("提示：请先输入密码", false, false, "");
                return;
            }
            this.LockLoginButton(true);
            ServiceProviderManager.RequestTokenByGM(playerId, password, $CreateAnonymousDelegate(this, function (token){
                if (token.Contains("-")){
                    GameDebuger.Debug_PlayerId = System.Int32.Parse$$String(playerId);
                    var accountSession = new AccountSession.ctor();
                    accountSession.sid = token;
                    this.RequestSsoAccountLogin(accountSession);
                }
                else {
                    ProxyWindowModule.OpenMessageWindow(token, "", null, 3, null, UILayerType.Dialogue, false);
                    this.LockLoginButton(false);
                }
            }));
        },
        OnTestLoginButtonClick: function (){
            GameSetting.SSO_SERVER = "http://t2.cilugame.com/h1";
            var accountName = this.get_View().NameInput_UIInput.get_value();
            var password = this.get_View().PasswordInput_UIInput.get_value();
            this.RequestSdkAccountLogin(accountName, password);
        },
        OnRegButtonClick: function (){
            UnityEngine.Application.OpenURL("http://bbs.cilugame.com/member.php?mod=register");
        },
        OnUseGuideBtnClick: function (){
            UnityEngine.Application.OpenURL("http://xl.tiancity.com/homepage/article/2016/05/05/44674.html");
        },
        OnDownloadBtnClick: function (){
            UnityEngine.Application.OpenURL("http://xl.tiancity.com/homepage/");
        },
        RequestSdkAccountLogin: function (accountName, password){
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                if (System.String.IsNullOrEmpty(accountName)){
                    TipManager.AddTip("提示：请先输入账号", false, false, "");
                    return;
                }
                else if (accountName.length > 20){
                    TipManager.AddTip("提示：用户名最多20个字符", false, false, "");
                    return;
                }
                if (GameSetting.DeviceLoginMode){
                    if (AppStringHelper.ValidateAccount(accountName) == false){
                        TipManager.AddTip("提示：用户名含有非法字符", false, false, "");
                        return;
                    }
                }
                else {
                }
            }
            if (!GameSetting.DeviceLoginMode){
                if (System.String.IsNullOrEmpty(password)){
                    TipManager.AddTip("提示：请先输入密码", false, false, "");
                    return;
                }
            }
            this.LockLoginButton(true);
            if (GameSetting.DeviceLoginMode){
                ServiceProviderManager.RequestSdkAccountLogin$$String$$Int32$$Int32$$Int32$$Action$1$AccountResponse(accountName, GameSetting.AppId, GameSetting.CpId, AppGameVersion.get_SpVersionCode(), $CreateAnonymousDelegate(this, function (response){
                    LoginManager.get_Instance().set_LoginId(accountName);
                    this.HandleSdkAccountLoginResponse(response);
                }));
            }
            else {
                ServiceProviderManager.RequestSdkAccountLogin$$String$$String$$Int32$$Int32$$Int32$$Action$1$AccountResponse(accountName, password, GameSetting.AppId, GameSetting.CpId, AppGameVersion.get_SpVersionCode(), $CreateAnonymousDelegate(this, function (response){
                    LoginManager.get_Instance().set_LoginId(accountName);
                    this.HandleSdkAccountLoginResponse(response);
                }));
            }
        },
        HandleSdkAccountLoginResponse: function (response){
            if (response != null && response.code == 0){
                if (response.data == null){
                    ProxyWindowModule.OpenMessageWindow("登陆数据返回为空", "", null, 3, null, UILayerType.Dialogue, false);
                    this.LockLoginButton(false);
                }
                else {
                    this.RequestSsoAccountLogin(response.data);
                }
            }
            else if (response != null && response.code == 200){
                this.OpenInputVerifyCode(response);
            }
            else {
                var msg = "服务器请求失败，请检查网络";
                if (response != null){
                    msg = response.msg;
                }
                ProxyWindowModule.OpenMessageWindow(msg, "", null, 3, null, UILayerType.Dialogue, false);
                this.LockLoginButton(false);
            }
        },
        OpenInputVerifyCode: function (response){
            ProxyWindowModule.OpenInputWindow(10, 10, "激活", "请输入10位激活码进行账号激活", "点击输入激活码", "", $CreateAnonymousDelegate(this, function (verifyCode){
                ServiceProviderManager.RequestVerifyCode(response.data.sid, verifyCode, $CreateAnonymousDelegate(this, function (response2){
                    if (response2 != null && response2.code == 0){
                        if (response2.data == null){
                            ProxyWindowModule.OpenMessageWindow("登陆数据返回为空", "", null, 3, null, UILayerType.Dialogue, false);
                            this.LockLoginButton(false);
                        }
                        else {
                            this.RequestSsoAccountLogin(response2.data);
                        }
                    }
                    else {
                        var msg2 = "服务器请求失败，请检查网络";
                        if (response2 != null){
                            msg2 = response2.msg;
                        }
                        ProxyWindowModule.OpenMessageWindow(msg2, "", $CreateAnonymousDelegate(this, function (){
                            this.OpenInputVerifyCode(response);
                        }), 3, null, UILayerType.Dialogue, false);
                    }
                }));
            }), $CreateAnonymousDelegate(this, function (){
                this.LockLoginButton(false);
            }), 3, "确定", "取消", 0, UILayerType.Dialogue, 0);
        },
        RequestSsoAccountLogin: function (session){
            SPSdkManager.get_Instance().CallbackLoginSuccess(false, session.sid);
            var account = this.get_View().NameInput_UIInput.get_value();
            var password = this.get_View().PasswordInput_UIInput.get_value();
            UnityEngine.PlayerPrefs.SetString(GameSetting.Channel + "_name", account);
            UnityEngine.PlayerPrefs.SetString(GameSetting.Channel + "_psw", password);
            ProxyLoginModule.CloseTestSdk();
        },
        RequestQRCode: function (){
            JSTimer.get_Instance().CancelTimer("CheckQRCodeLogin");
            this.get_View().WaitScanGroup_Transform.get_gameObject().SetActive(true);
            this.get_View().OverTimeGroup_Transform.get_gameObject().SetActive(false);
            this.get_View().WaitEnsureGroup_Transform.get_gameObject().SetActive(false);
            ServiceProviderManager.RequestQRCodeSid($CreateAnonymousDelegate(this, function (dto){
                if (this.get_View() == null){
                    return;
                }
                if (dto != null){
                    if (dto.code == 0){
                        this._qrCodeSid = dto.msg;
                        this.UpdateQRCodeTexture();
                        this._requestLoginNow = false;
                        JSTimer.get_Instance().SetupTimer("CheckQRCodeLogin", $CreateDelegate(this, this.CheckQRCodeLogin), 1 /* CheckQRCodeLoginInterval */, false);
                    }
                    else {
                        ProxyWindowModule.OpenMessageWindow(dto.msg, null, $CreateDelegate(this, this.RequestQRCode), 3, null, UILayerType.Dialogue, false);
                    }
                }
                else {
                    this.RequestQRCode();
                }
            }));
        },
        UpdateQRCodeTexture: function (){
            var tex = AntaresQRCodeUtil.Encode$$String$$Int32(QRCodeHelper.EncodeLoginQRCode(this._qrCodeSid, AppGameVersion.get_SpVersionCode()), this.get_View().QRTexture_UITexture.get_width());
            this.get_View().QRTexture_UITexture.set_mainTexture(tex);
        },
        CheckQRCodeLogin: function (){
            if (this._requestLoginNow){
                return;
            }
            this._requestLoginNow = true;
            ServiceProviderManager.RequestQRCodeLoginState(this._qrCodeSid, $CreateAnonymousDelegate(this, function (dto){
                this._requestLoginNow = false;
                if (this.get_View() == null){
                    return;
                }
                if (dto == null){
                    return;
                }
                if (dto.code == 0){
                    JSTimer.get_Instance().CancelTimer("CheckQRCodeLogin");
                    if (!System.String.IsNullOrEmpty(dto.clientExtra)){
                        WinGameSetting.Setup(WinGameSetting.WinGameSettingData.CreateFromBase64UrlSafeJson(dto.clientExtra), $CreateAnonymousDelegate(this, function (){
                            LoginManager.get_Instance().set_LoginId(dto.loginAccount.accountId.toString());
                            ServerManager.get_Instance().loginAccountDto = dto.loginAccount;
                            this.RequestQRCodeSsoAccountLogin(dto.loginAccount.token);
                        }), $CreateAnonymousDelegate(this, function (error){
                            ProxyWindowModule.OpenMessageWindow(error, null, $CreateDelegate(this, this.RequestQRCode), 3, null, UILayerType.Dialogue, false);
                        }));
                    }
                    else {
                        ProxyWindowModule.OpenMessageWindow("登陆信息不完整，请重试", null, $CreateDelegate(this, this.RequestQRCode), 3, null, UILayerType.Dialogue, false);
                    }
                }
                else if (dto.code == 1101){
                }
                else if (dto.code == 1102){
                    this.get_View().WaitScanGroup_Transform.get_gameObject().SetActive(false);
                    this.get_View().WaitEnsureGroup_Transform.get_gameObject().SetActive(true);
                }
                else if (dto.code == 1100){
                    JSTimer.get_Instance().CancelTimer("CheckQRCodeLogin");
                    this.get_View().OverTimeGroup_Transform.get_gameObject().SetActive(true);
                    this.get_View().WaitScanGroup_Transform.get_gameObject().SetActive(true);
                    this.get_View().WaitEnsureGroup_Transform.get_gameObject().SetActive(false);
                }
                else if (dto.code == 1104){
                    JSTimer.get_Instance().CancelTimer("CheckQRCodeLogin");
                    ProxyWindowModule.OpenMessageWindow("账号登录会话(token)失效", null, $CreateDelegate(this, this.RequestQRCode), 3, null, UILayerType.Dialogue, false);
                }
                else {
                    JSTimer.get_Instance().CancelTimer("CheckQRCodeLogin");
                    ProxyWindowModule.OpenMessageWindow(dto.msg, dto.code.toString(), $CreateDelegate(this, this.RequestQRCode), 3, null, UILayerType.Dialogue, false);
                }
            }));
        },
        RequestQRCodeSsoAccountLogin: function (sid){
            SPSdkManager.get_Instance().CallbackLoginSuccess(false, sid);
            ProxyLoginModule.CloseTestSdk();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            JSTimer.get_Instance().CancelTimer("CheckQRCodeLogin");
        },
        Open: function (){
            this.get_View().AccountInputGroup_Transform.get_gameObject().SetActive(!GameSetting.get_IsOriginWinPlatform());
            this.get_View().PasswordInputGroup.SetActive(GameSetting.get_GMMode() && !GameSetting.get_IsOriginWinPlatform());
            this.get_View().ExternalLoginGroup.SetActive(GameSetting.get_GMMode() && !GameSetting.get_IsOriginWinPlatform());
            this.get_View().LocalLoginGroup.SetActive(!GameSetting.get_GMMode() && !GameSetting.get_IsOriginWinPlatform());
            this.get_View().QRCodeLoginGroup_Transform.get_gameObject().SetActive(GameSetting.get_IsOriginWinPlatform());
            this.get_View().TestLoginGroup.SetActive(false);
            this.get_View().RegGroup.SetActive(false);
            this._view.NameInput_UIInput.set_value(UnityEngine.PlayerPrefs.GetString$$String(GameSetting.Channel + "_name"));
            this._view.PasswordInput_UIInput.set_value(UnityEngine.PlayerPrefs.GetString$$String(GameSetting.Channel + "_psw"));
            if (GameSetting.get_IsOriginWinPlatform()){
                this.get_View().Describe_UILabel.set_text(System.String.Format$$String$$Object$$Object$$Object("[{0}]在[{1}]{2}[-]移动设备端登录\n界面点击    按钮扫码登录[-]", "FFF9E3" /* ColorConstantV3.Color_White_Str */, "E4D328" /* ColorConstantV3.Color_QRCodeYellow_Str */, GameSetting.get_GameName()));
                this.RequestQRCode();
            }
        }
    }
};
JsTypes.push(TestSdkController);
var TestSdkView = {
    fullname: "TestSdkView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameInput_UIInput = null;
            this.ExternalLoginButton_UIButton = null;
            this.LocalLoginButton_UIButton = null;
            this.LocalLoginGroup = null;
            this.ExternalLoginGroup = null;
            this.PasswordInputGroup = null;
            this.PasswordInput_UIInput = null;
            this.TestLoginGroup = null;
            this.TestLoginButton_UIButton = null;
            this.RegButton_UIButton = null;
            this.RegGroup = null;
            this.QRCodeLoginGroup_Transform = null;
            this.OverTimeGroup_Transform = null;
            this.WaitScanGroup_Transform = null;
            this.AccountInputGroup_Transform = null;
            this.QRTexture_UITexture = null;
            this.RefreshBtn_UIButton = null;
            this.UseGuideLabel_UIButton = null;
            this.DownloadLabel_UIButton = null;
            this.Describe_UILabel = null;
            this.WaitEnsureGroup_Transform = null;
            this.RefreshScanBtn_UIButton = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.NameInput_UIInput = root.Find("AccountInputGroup/NameInput").GetComponent$1(UIInput.ctor);
            this.ExternalLoginButton_UIButton = root.Find("ExternalLoginGroup/ExternalLoginButton").GetComponent$1(UIButton.ctor);
            this.LocalLoginButton_UIButton = root.Find("LocalLoginGroup/LocalLoginButton").GetComponent$1(UIButton.ctor);
            this.LocalLoginGroup = root.Find("LocalLoginGroup").get_gameObject();
            this.ExternalLoginGroup = root.Find("ExternalLoginGroup").get_gameObject();
            this.PasswordInputGroup = root.Find("PasswordInputGroup").get_gameObject();
            this.PasswordInput_UIInput = root.Find("PasswordInputGroup/PasswordInput").GetComponent$1(UIInput.ctor);
            this.TestLoginGroup = root.Find("TestLoginGroup").get_gameObject();
            this.TestLoginButton_UIButton = root.Find("TestLoginGroup/TestLoginButton").GetComponent$1(UIButton.ctor);
            this.RegButton_UIButton = root.Find("RegGroup/RegButton").GetComponent$1(UIButton.ctor);
            this.RegGroup = root.Find("RegGroup").get_gameObject();
            this.QRCodeLoginGroup_Transform = root.Find("QRCodeLoginGroup");
            this.OverTimeGroup_Transform = root.Find("QRCodeLoginGroup/WaitScanGroup/OverTimeGroup");
            this.WaitScanGroup_Transform = root.Find("QRCodeLoginGroup/WaitScanGroup");
            this.AccountInputGroup_Transform = root.Find("AccountInputGroup");
            this.QRTexture_UITexture = root.Find("QRCodeLoginGroup/WaitScanGroup/QRTexture").GetComponent$1(UITexture.ctor);
            this.RefreshBtn_UIButton = root.Find("QRCodeLoginGroup/WaitScanGroup/OverTimeGroup/RefreshBtn").GetComponent$1(UIButton.ctor);
            this.UseGuideLabel_UIButton = root.Find("QRCodeLoginGroup/WaitScanGroup/UseGuideLabel").GetComponent$1(UIButton.ctor);
            this.DownloadLabel_UIButton = root.Find("QRCodeLoginGroup/WaitScanGroup/DownloadLabel").GetComponent$1(UIButton.ctor);
            this.Describe_UILabel = root.Find("QRCodeLoginGroup/WaitScanGroup/Describe").GetComponent$1(UILabel.ctor);
            this.WaitEnsureGroup_Transform = root.Find("QRCodeLoginGroup/WaitEnsureGroup");
            this.RefreshScanBtn_UIButton = root.Find("QRCodeLoginGroup/WaitEnsureGroup/RefreshScanBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(TestSdkView);
var SkillTipsViewController = {
    fullname: "SkillTipsViewController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            SkillTipsViewController.AddSpace = 150;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SkillTipsView.ctor);
        },
        RegistCustomEvent: function (){
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
        },
        OnDispose: function (){
            UICamera.onClick = $RemoveDelegate(UICamera.onClick, $CreateDelegate(this, this.ClickEventHandler));
        },
        Show: function (skillObj, anchor, extText){
            var skillName = "";
            var skillDesc = "";
            var skillIcon = "0";
            GameDebuger.TODO("if (skillObj is ScenarioSkill)\n        {\n            ScenarioSkill scenarioSkill = skillObj as ScenarioSkill;\n            skillName = scenarioSkill.name;\n            skillDesc = scenarioSkill.memo;\n            skillIcon = scenarioSkill.icon;\n        }\n        else if (skillObj is AssistSkillVo)\n        {\n            AssistSkillVo assistSkill = skillObj as AssistSkillVo;\n            skillName = assistSkill.name;\n            skillDesc = assistSkill.memo;\n            skillIcon = assistSkill.icon;\n        }\n        else");
            if (Is(skillObj, AppDto.Skill.ctor)){
                var skillInfo = As(skillObj, AppDto.Skill.ctor);
                skillName = skillInfo.name;
                skillDesc = skillInfo.shortDescription;
                skillIcon = skillInfo.icon;
            }
            else {
                UnityEngine.Debug.LogError$$Object("SkillTipsViewController.show don\'t support " + skillObj.toString());
            }
            GameDebuger.TODO("else if (skillObj is CrewSkillInfo)\n        {\n            CrewSkillInfo crewSkill = skillObj as CrewSkillInfo;\n            skillName = crewSkill.skill.name;\n            skillDesc = crewSkill.skill.crewDescription;\n            skillDesc = System.Text.RegularExpressions.Regex.Replace(skillDesc, @\'\\w+等级达到\\[Lv\\]级\', string.Format(\'需要伙伴达到{0}级\', crewSkill.acquireLevel));\n            skillIcon = crewSkill.skill.icon;\n        }\n        else if (skillObj is RidePassiveNotify)     //坐骑通用被动技能 (为空报错，完成通用技能学习，在修复）\n        {\n            RidePassiveNotify ridePassiveSkill = skillObj as RidePassiveNotify;\n            skillName = ridePassiveSkill.passiveSkill.name;\n            skillDesc = ridePassiveSkill.passiveSkill.description;\n            skillIcon = ridePassiveSkill.passiveSkill.icon;\n        }\n        else if (skillObj is RideFactionPassiveNotify) //坐骑门派被动技能\n        {\n            RideFactionPassiveNotify rideFactionPassiveSkill = skillObj as RideFactionPassiveNotify;\n            MountFactionPassiveSkill skill = ModelManager.Mount.GetMountFactionPassiveSkillDic()[rideFactionPassiveSkill.passiveSkillId];\n            skillName = skill.name;\n            skillDesc = skill.description;\n            skillIcon = skill.icon;\n        }\n        else if (skillObj is FactionSkill)\n        {\n            FactionSkill factionSkill = skillObj as FactionSkill;\n            skillName = factionSkill.name;\n            skillDesc = ModelManager.FactionSkill.GetFactionShowTips(factionSkill);\n            skillIcon = ModelManager.FactionSkill.GetFactionSkillIcon(factionSkill);\n        }");
            this.get_View().NameLabel.set_text(skillName);
            this.get_View().ExtLabel.set_text(extText);
            this.get_View().SkillDescriptionLbl.set_text(skillDesc);
            UIHelper.SetSkillIcon(this.get_View().IconSprite, skillIcon, false);
            this.get_View().ContentBg.set_height(150 /* AddSpace */ + this.get_View().SkillDescriptionLbl.get_height());
            this.get_View().posAnchor.container = anchor;
            this.get_View().posAnchor.pixelOffset = new UnityEngine.Vector2.ctor$$Single$$Single(((-this.get_View().ContentBg.get_width() / 2) | 0), 0);
            this.get_View().posAnchor.Update();
            var panel = UIPanel.Find$$Transform(this.get_View().ContentBg.get_cachedTransform());
            panel.ConstrainTargetToBounds$$Transform$$Boolean(this.get_View().ContentBg.get_cachedTransform(), true);
        },
        ClickEventHandler: function (go){
            this.CloseView();
        },
        CloseView: function (){
            ProxyTipsModule.CloseSkillTips();
        }
    }
};
JsTypes.push(SkillTipsViewController);
var ItemIconConst = {
    fullname: "ItemIconConst",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ItemIconConst.Voucher = "#wb1";
            ItemIconConst.Ingot = "#w1";
            ItemIconConst.Silver = "#w2";
            ItemIconConst.Copper = "#w3";
            ItemIconConst.Score = "#w4";
            ItemIconConst.Contribute = "#w5";
            ItemIconConst.Trophy = "#w6";
            ItemIconConst.ClothFragment = "#w7";
            ItemIconConst.ExpCurrency = "#w8";
            ItemIconConst.Exp = "#exp1";
            ItemIconConst.Exp2 = "#exp2";
            ItemIconConst.Rmb = "#wrmb";
            ItemIconConst.Prestige = "#prestige";
            ItemIconConst.VoucherAltas = "ICON_1b";
            ItemIconConst.IngotAltas = "ICON_1";
            ItemIconConst.SilverAltas = "ICON_2";
            ItemIconConst.CopperAltas = "ICON_3";
            ItemIconConst.ScoreAltas = "ICON_4";
            ItemIconConst.ContributeAltas = "ICON_5";
            ItemIconConst.TrophyAltas = "ICON_6";
            ItemIconConst.ExpCurrencyAltas = "ICON_7";
            ItemIconConst.ExpAltas = "ICON_11";
            ItemIconConst.Exp2Altas = "ICON_13";
            ItemIconConst.RmbAltas = "RMB-little-icon";
            ItemIconConst.GrowthFlag_Green = "#gf1";
            ItemIconConst.GrowthFlag_Blue = "#gf2";
            ItemIconConst.GrowthFlag_Orange = "#gf3";
            ItemIconConst.GrowthFlag_Purple = "#gf4";
            ItemIconConst.GrowthFlag_Red = "#gf5";
            ItemIconConst.Achievement_Star = "#ac1";
            ItemIconConst.Achievement_Moon = "#ac2";
            ItemIconConst.Achievement_Sun = "#ac3";
            ItemIconConst.Achievement_Crown = "#ac4";
        },
        GetIconConstByItemId: function (itemId){
            var tempStr = System.String.Empty;
            switch (itemId){
            }
            return tempStr;
        },
        IsCurrencyItem: function (itemId){
            var isCurrency = false;
            switch (itemId){
                default:
                    isCurrency = false;
                    break;
            }
            return isCurrency;
        },
        GetIconAltasConstByItemId: function (itemId){
            var tempStr = System.String.Empty;
            switch (itemId){
            }
            return tempStr;
        },
        GetCirculationTypeSprite: function (circulationType){
            GameDebuger.TODO("if (circulationType == RealItem.CirculationType.Stall)\n        {\n            return \'h1-transaction-title\';\n        }\n        else");
            if (circulationType == AppDto.RealItem.CirculationType.Gift){
                return "send";
            }
            else if (circulationType == AppDto.RealItem.CirculationType.Bind){
                return "specialues";
            }
            else {
                return "";
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ItemIconConst);
var SkillTipsView = {
    fullname: "SkillTipsView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SkillTipsView.NAME = "SkillTipsView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.IconSprite = null;
            this.NameLabel = null;
            this.SkillDescriptionLbl = null;
            this.ContentBg = null;
            this.posAnchor = null;
            this.ExtLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.IconSprite = root.Find("ContentBg/TopGroup/IconSprite").GetComponent$1(UISprite.ctor);
            this.NameLabel = root.Find("ContentBg/TopGroup/NameLabel").GetComponent$1(UILabel.ctor);
            this.SkillDescriptionLbl = root.Find("ContentBg/SkillDescriptionLbl").GetComponent$1(UILabel.ctor);
            this.ContentBg = root.Find("ContentBg").GetComponent$1(UISprite.ctor);
            this.posAnchor = root.Find("ContentBg").GetComponent$1(UIAnchor.ctor);
            this.ExtLabel = root.Find("ContentBg/TopGroup/ExtLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SkillTipsView);
var QueueWindowPrefabController = {
    fullname: "QueueWindowPrefabController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._loginAction = null;
            MonoViewController$1.ctor.call(this, QueueWindowPrefab.ctor);
        },
        Open: function (serverName, queuePosition, waitTime){
            this.UpdateData(serverName, queuePosition, waitTime);
        },
        UpdateData: function (serverName, queuePosition, waitTime){
            this.get_View().ServerName_UILabel.set_text(serverName);
            this.get_View().QueuePositionLbl_UILabel.set_text(System.String.Format$$String$$Object("队列位置:{0}", queuePosition));
            var span = System.TimeSpan.FromSeconds(waitTime);
            var txt = "";
            if (span.get_Days() != 0){
                txt += span.get_Days() + "天";
            }
            if (span.get_Hours() != 0){
                txt += span.get_Hours() + "小时";
            }
            if (span.get_Minutes() != 0){
                txt += span.get_Minutes() + "分";
            }
            txt += span.get_Seconds() + "秒";
            this.get_View().WaitTimeLbl_UILabel.set_text(System.String.Format$$String$$Object("预计等待时间:{0}", txt));
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ChangeServerBtn_UIButton.onClick, $CreateDelegate(this, this.OnChangeServerBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn_UIButton.onClick, $CreateDelegate(this, this.OnCloseBtnClick));
        },
        SetCloseTime: function (time, finishCallBack){
            this.get_View().QueuePositionLbl_UILabel.set_text("请在倒计时结束前进入游戏");
            this.get_View().ChangeServerBtnNameLbl_UILabel.set_text("进入游戏");
            this._loginAction = finishCallBack;
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ChangeServerBtn_UIButton.onClick, $CreateDelegate(this, this.Login));
            this.AddOrResetCDTask("CloseLoginQueueWindow", time, $CreateDelegate(this, this.UpdateCloseTimeOfView), $CreateDelegate(this, this.OnCloseBtnClick), 0.1, false);
        },
        Login: function (){
            if (this._loginAction != null){
                this._loginAction();
                ProxyWindowModule.CloseQueueWindow();
            }
        },
        UpdateCloseTimeOfView: function (time){
            var span = System.TimeSpan.FromSeconds(time);
            var txt = "";
            if (span.get_Days() != 0){
                txt += span.get_Days() + "天";
            }
            if (span.get_Hours() != 0){
                txt += span.get_Hours() + "小时";
            }
            if (span.get_Minutes() != 0){
                txt += span.get_Minutes() + "分";
            }
            txt += span.get_Seconds() + "秒";
            if (this.get_View() != null){
                this.get_View().WaitTimeLbl_UILabel.set_text("倒计时:" + txt);
            }
        },
        CloseTimeFinish: function (){
        },
        OnChangeServerBtnClick: function (){
            this.OnCloseBtnClick();
        },
        OnCloseBtnClick: function (){
            ExitGameScript.get_Instance().HanderRelogin();
            ProxyWindowModule.CloseQueueWindow();
        }
    }
};
JsTypes.push(QueueWindowPrefabController);
var SimpleWindowPrefabController = {
    fullname: "SimpleWindowPrefabController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._topWin = false;
            this.OnOkHandler = null;
            this.OnCancelHandler = null;
            MonoViewController$1.ctor.call(this, SimpleWindowPrefab.ctor);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().simple_OKButton.onClick, $CreateDelegate(this, this.OnClickOkButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().simple_CancelButton.onClick, $CreateDelegate(this, this.OnClickCancelButton));
        },
        add_OnOkHandler: function (value){
            this.OnOkHandler = $CombineDelegates(this.OnOkHandler, value);
        },
        remove_OnOkHandler: function (value){
            this.OnOkHandler = $RemoveDelegate(this.OnOkHandler, value);
        },
        add_OnCancelHandler: function (value){
            this.OnCancelHandler = $CombineDelegates(this.OnCancelHandler, value);
        },
        remove_OnCancelHandler: function (value){
            this.OnCancelHandler = $RemoveDelegate(this.OnCancelHandler, value);
        },
        OpenConfirmWindow: function (msg, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, time, closeWinTimeForOk){
            var strArr = msg.ToCharArray();
            if (strArr.length < 19){
                this.get_View().simple_InfoLabel.set_pivot(4);
            }
            else {
                this.get_View().simple_InfoLabel.set_pivot(3);
            }
            this.get_View().simple_InfoLabel.set_text(msg);
            this.get_View().simple_OKLabel.set_text(okLabelStr);
            this.get_View().simple_OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
            this.get_View().simple_OKButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(103, -48, 0));
            this.get_View().simple_CancelLabel.set_text(cancelLabelStr);
            this.get_View().simple_CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
            if (time > 0){
                if (closeWinTimeForOk){
                    this.get_View().simple_OKLabel.set_text(okLabelStr + "(" + time + ")");
                    this.get_View().simple_OKLabel.set_spacingX(this.GetLabelSpacingX(this.get_View().simple_OKLabel.get_text()));
                    this.AddOrResetCDTask("WindowPrefabTime", time, $CreateAnonymousDelegate(this, function (currTime){
                        var t = ((System.Math.Ceiling$$Double(currTime)) | 0);
                        if (t > 0){
                            this.get_View().simple_OKLabel.set_text(okLabelStr + "(" + t + ")");
                        }
                        else {
                            this.get_View().simple_OKLabel.set_text(okLabelStr);
                            this.get_View().simple_OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
                        }
                    }), $CreateAnonymousDelegate(this, function (){
                        this.get_View().simple_OKLabel.set_text(okLabelStr);
                        this.get_View().simple_OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
                        this.OnClickOkButton();
                    }), 1, false);
                }
                else {
                    this.get_View().simple_CancelLabel.set_text(cancelLabelStr + "(" + time + ")");
                    this.get_View().simple_CancelLabel.set_spacingX(this.GetLabelSpacingX(this.get_View().simple_CancelLabel.get_text()));
                    this.AddOrResetCDTask("WindowPrefabTime", time, $CreateAnonymousDelegate(this, function (currTime){
                        var t = ((System.Math.Ceiling$$Double(currTime)) | 0);
                        if (t > 0){
                            this.get_View().simple_CancelLabel.set_text(cancelLabelStr + "(" + t + ")");
                        }
                        else {
                            this.get_View().simple_CancelLabel.set_text(cancelLabelStr);
                            this.get_View().simple_CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                        }
                    }), $CreateAnonymousDelegate(this, function (){
                        this.get_View().simple_CancelLabel.set_text(cancelLabelStr);
                        this.get_View().simple_CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                        this.OnClickCancelButton();
                    }), 1, false);
                }
            }
            this.get_View().simple_OKButton.get_gameObject().SetActive(true);
            this.get_View().simple_CancelButton.get_gameObject().SetActive(true);
            this.OnOkHandler = onHandler;
            this.OnCancelHandler = cancelHandler;
        },
        OpenMessageWindow: function (msg, onHandler, pivot, okLabelStr, topWin){
            this._topWin = topWin;
            var strArr = msg.ToCharArray();
            if (strArr.length < 19){
                this.get_View().simple_InfoLabel.set_pivot(4);
            }
            else {
                this.get_View().simple_InfoLabel.set_pivot(3);
            }
            this.get_View().simple_InfoLabel.set_text(msg);
            this.get_View().simple_OKLabel.set_text(okLabelStr);
            this.get_View().simple_OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
            this.get_View().simple_OKButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -48, 0));
            this.get_View().simple_OKButton.get_gameObject().SetActive(true);
            this.get_View().simple_CancelButton.get_gameObject().SetActive(false);
            this.OnOkHandler = onHandler;
        },
        GetLabelSpacingX: function (text){
            if (text.length <= 2){
                return 12;
            }
            else if (text.length <= 3){
                return 6;
            }
            else {
                return 1;
            }
        },
        OnClickOkButton: function (){
            this.RemoveCDTask("WindowPrefabTime");
            this.CloseWin();
            if (this.OnOkHandler != null){
                this.OnOkHandler();
            }
        },
        OnClickCancelButton: function (){
            this.RemoveCDTask("WindowPrefabTime");
            this.CloseWin();
            if (this.OnCancelHandler != null){
                this.OnCancelHandler();
            }
        },
        CloseWin: function (){
            if (this._topWin){
                ProxyWindowModule.closeSimpleWinForTop();
            }
            else {
                ProxyWindowModule.closeSimpleWin();
            }
        }
    }
};
JsTypes.push(SimpleWindowPrefabController);
var WindowInputPrefabController = {
    fullname: "WindowInputPrefabController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            WindowInputPrefabController.TYPE_CHANGE_ROLE_NAME = 1;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._type = 0;
            this._minChar = 0;
            this._maxChar = 0;
            this._illegalStrCheck = false;
            this.OnOkHandler = null;
            this.OnCancelHandler = null;
            MonoViewController$1.ctor.call(this, WindowInputPrefab.ctor);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().OKButton.onClick, $CreateDelegate(this, this.OnClickOkButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CancelButton.onClick, $CreateDelegate(this, this.OnClickCancelButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn.onClick, $CreateDelegate(this, this.OnClickCloseButton));
        },
        add_OnOkHandler: function (value){
            this.OnOkHandler = $CombineDelegates(this.OnOkHandler, value);
        },
        remove_OnOkHandler: function (value){
            this.OnOkHandler = $RemoveDelegate(this.OnOkHandler, value);
        },
        add_OnCancelHandler: function (value){
            this.OnCancelHandler = $CombineDelegates(this.OnCancelHandler, value);
        },
        remove_OnCancelHandler: function (value){
            this.OnCancelHandler = $RemoveDelegate(this.OnCancelHandler, value);
        },
        OpenInputWindow: function (minChar, maxChars, title, desContent, inputTips, inputVlaue, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, time, type){
            this._minChar = minChar;
            this._maxChar = maxChars;
            this._type = type;
            this.get_View().NameInput.characterLimit = 20;
            this.get_View().NameInput.label.set_pivot(pivot);
            this.get_View().NameInput.label.set_text(inputTips);
            this.get_View().NameInput.set_value(inputVlaue);
            this.get_View().NameInput.set_isSelected(System.String.IsNullOrEmpty(inputVlaue) ? false : true);
            this.get_View().TitleLabel.set_text(title);
            this.get_View().desLabel.set_text(desContent);
            this.get_View().OKLabel.set_text(okLabelStr);
            this.get_View().OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
            this.get_View().OKButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(118, -80, 0));
            if (time > 0){
                this.get_View().CancelLabel.set_text(cancelLabelStr + "(" + time + ")");
                this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(this.get_View().CancelLabel.get_text()));
                this.AddOrResetCDTask("InputWindowPrefabTime", time, $CreateAnonymousDelegate(this, function (currTime){
                    var t = ((System.Math.Ceiling$$Double(currTime)) | 0);
                    if (t > 0){
                        this.get_View().CancelLabel.set_text(cancelLabelStr + "(" + t + ")");
                    }
                    else {
                        this.get_View().CancelLabel.set_text(cancelLabelStr);
                        this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                    }
                }), $CreateAnonymousDelegate(this, function (){
                    this.get_View().CancelLabel.set_text(cancelLabelStr);
                    this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                    this.OnClickCancelButton();
                }), 1, false);
            }
            else {
                this.get_View().CancelLabel.set_text(cancelLabelStr);
                this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
            }
            this.get_View().OKButton.get_gameObject().SetActive(true);
            this.get_View().CancelButton.get_gameObject().SetActive(true);
            this.get_View().DefaultButton.get_gameObject().SetActive(false);
            this.get_View().defaultLabel.get_gameObject().SetActive(false);
            this.OnOkHandler = onHandler;
            this.OnCancelHandler = cancelHandler;
        },
        GetLabelSpacingX: function (text){
            if (text.length <= 2){
                return 12;
            }
            else if (text.length <= 3){
                return 6;
            }
            else {
                return 1;
            }
        },
        OnClickOkButton: function (){
            if (System.String.IsNullOrEmpty(this.get_View().NameInput.get_value()) && this._minChar > 0){
                TipManager.AddTip("输入不能为空", false, false, "");
                return;
            }
            var error = AppStringHelper.ValidateStrLength(this.get_View().NameInput.get_value(), this._minChar, this._maxChar);
            if (!System.String.IsNullOrEmpty(error)){
                TipManager.AddTip(error, false, false, "");
                return;
            }
            var tValue = this.get_View().NameInput.get_value();
            this.RemoveCDTask("InputWindowPrefabTime");
            if (this._type == 1 /* TYPE_CHANGE_ROLE_NAME */){
                if (ModelManager.get_Player().hasEnoughMoneyChangeName()){
                    ProxyWindowModule.closeInputWin();
                }
            }
            else {
                ProxyWindowModule.closeInputWin();
            }
            if (this.OnOkHandler != null){
                this.OnOkHandler(tValue);
            }
        },
        OnClickCancelButton: function (){
            this.RemoveCDTask("InputWindowPrefabTime");
            ProxyWindowModule.closeInputWin();
            if (this.OnCancelHandler != null){
                this.OnCancelHandler();
            }
        },
        OnClickCloseButton: function (){
            this.RemoveCDTask("InputWindowPrefabTime");
            ProxyWindowModule.closeInputWin();
            if (this.OnCancelHandler != null){
                this.OnCancelHandler();
            }
        }
    }
};
JsTypes.push(WindowInputPrefabController);
var WindowOptSavePrefabController = {
    fullname: "WindowOptSavePrefabController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isComfirmWin = false;
            this._isCloseCallCancelHandler = true;
            this.OnOkHandler = null;
            this.OnCancelHandler = null;
            MonoViewController$1.ctor.call(this, WindowOptSavePrefab.ctor);
        },
        AfterInitView: function (){
            this.get_View().SelectToggle.set_value(false);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().OKButton.onClick, $CreateDelegate(this, this.OnClickOkButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CancelButton.onClick, $CreateDelegate(this, this.OnClickCancelButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn.onClick, $CreateDelegate(this, this.OnClickCloseButton));
        },
        add_OnOkHandler: function (value){
            this.OnOkHandler = $CombineDelegates(this.OnOkHandler, value);
        },
        remove_OnOkHandler: function (value){
            this.OnOkHandler = $RemoveDelegate(this.OnOkHandler, value);
        },
        add_OnCancelHandler: function (value){
            this.OnCancelHandler = $CombineDelegates(this.OnCancelHandler, value);
        },
        remove_OnCancelHandler: function (value){
            this.OnCancelHandler = $RemoveDelegate(this.OnCancelHandler, value);
        },
        OpenOptSaveWindow: function (msg, title, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, toggleStr, time, isCloseCallCancelHandler){
            this._isComfirmWin = true;
            this._isCloseCallCancelHandler = isCloseCallCancelHandler;
            var strArr = msg.ToCharArray();
            if (strArr.length < 19){
                this.get_View().InfoLabel.set_pivot(4);
            }
            else {
                this.get_View().InfoLabel.set_pivot(pivot);
            }
            this.get_View().InfoLabel.set_text(msg);
            this.get_View().TitleLabel.set_text(title);
            this.get_View().OKLabel.set_text(okLabelStr);
            this.get_View().OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
            this.get_View().OKButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(103, -91, 0));
            this.get_View().ToggleLabel_UILabel.set_text(toggleStr);
            if (time > 0){
                this.get_View().CancelLabel.set_text(cancelLabelStr + "(" + time + ")");
                this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(this.get_View().CancelLabel.get_text()));
                this.AddOrResetCDTask("WindowPrefabTime", time, $CreateAnonymousDelegate(this, function (currTime){
                    var t = ((System.Math.Ceiling$$Double(currTime)) | 0);
                    if (t > 0){
                        this.get_View().CancelLabel.set_text(cancelLabelStr + "(" + t + ")");
                    }
                    else {
                        this.get_View().CancelLabel.set_text(cancelLabelStr);
                        this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                    }
                }), $CreateAnonymousDelegate(this, function (){
                    this.get_View().CancelLabel.set_text(cancelLabelStr);
                    this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                    this.OnClickCancelButton();
                }), 1, false);
            }
            else {
                this.get_View().CancelLabel.set_text(cancelLabelStr);
                this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
            }
            this.get_View().OKButton.get_gameObject().SetActive(true);
            this.get_View().CancelButton.get_gameObject().SetActive(true);
            this.OnOkHandler = onHandler;
            this.OnCancelHandler = cancelHandler;
        },
        GetLabelSpacingX: function (text){
            if (text.length <= 2){
                return 12;
            }
            else if (text.length <= 3){
                return 6;
            }
            else {
                return 1;
            }
        },
        OnClickOkButton: function (){
            this.RemoveCDTask("WindowPrefabTime");
            ProxyWindowModule.closeOptWin();
            if (this.OnOkHandler != null){
                this.OnOkHandler(this.get_View().SelectToggle.get_value());
            }
        },
        OnClickCancelButton: function (){
            this.RemoveCDTask("WindowPrefabTime");
            ProxyWindowModule.closeOptWin();
            if (this.OnCancelHandler != null){
                this.OnCancelHandler(this.get_View().SelectToggle.get_value());
            }
        },
        OnClickCloseButton: function (){
            if (this._isCloseCallCancelHandler){
                this.OnClickCancelButton();
            }
            else if (this._isComfirmWin == false){
                this.OnClickOkButton();
            }
            else {
                this.RemoveCDTask("WindowPrefabTime");
                ProxyWindowModule.closeOptWin();
            }
        }
    }
};
JsTypes.push(WindowOptSavePrefabController);
var WindowPrefabController = {
    fullname: "WindowPrefabController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isComfirmWin = false;
            this._isCloseCallCancelHandler = true;
            this._topWin = false;
            this.OnOkHandler = null;
            this.OnCancelHandler = null;
            MonoViewController$1.ctor.call(this, WindowPrefab.ctor);
        },
        RegistCustomEvent: function (){
            MonoViewController$1.commonPrototype.RegistCustomEvent.call(this);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().OKButton.onClick, $CreateDelegate(this, this.OnClickOkButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CancelButton.onClick, $CreateDelegate(this, this.OnClickCancelButton));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn.onClick, $CreateDelegate(this, this.OnClickCloseButton));
        },
        add_OnOkHandler: function (value){
            this.OnOkHandler = $CombineDelegates(this.OnOkHandler, value);
        },
        remove_OnOkHandler: function (value){
            this.OnOkHandler = $RemoveDelegate(this.OnOkHandler, value);
        },
        add_OnCancelHandler: function (value){
            this.OnCancelHandler = $CombineDelegates(this.OnCancelHandler, value);
        },
        remove_OnCancelHandler: function (value){
            this.OnCancelHandler = $RemoveDelegate(this.OnCancelHandler, value);
        },
        OpenConfirmWindow: function (msg, title, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, time, isCloseCallCancelHandler, isClearColor){
            this._isComfirmWin = true;
            this._isCloseCallCancelHandler = isCloseCallCancelHandler;
            if (System.String.IsNullOrEmpty(msg)){
                msg = "";
            }
            var strArr = msg.ToCharArray();
            if (strArr.length < 19){
                this.get_View().InfoLabel.set_pivot(4);
            }
            else {
                this.get_View().InfoLabel.set_pivot(pivot);
            }
            if (isClearColor)
                this.get_View().InfoLabel.set_color(UnityEngine.Color.get_white());
            this.get_View().InfoLabel.set_text(msg);
            this.get_View().TitleLabel.set_text(title);
            this.get_View().OKLabel.set_text(okLabelStr);
            this.get_View().OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
            this.get_View().OKButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(103, this.get_View().OKButton.get_transform().get_localPosition().y, 0));
            if (time > 0){
                this.get_View().CancelLabel.set_text(cancelLabelStr + "(" + time + ")");
                this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(this.get_View().CancelLabel.get_text()));
                this.AddOrResetCDTask("WindowPrefabTime", time, $CreateAnonymousDelegate(this, function (currTime){
                    var t = ((System.Math.Ceiling$$Double(currTime)) | 0);
                    if (t > 0){
                        this.get_View().CancelLabel.set_text(cancelLabelStr + "(" + t + ")");
                    }
                    else {
                        this.get_View().CancelLabel.set_text(cancelLabelStr);
                        this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                    }
                }), $CreateAnonymousDelegate(this, function (){
                    this.get_View().CancelLabel.set_text(cancelLabelStr);
                    this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
                    this.OnClickCancelButton();
                }), 1, false);
            }
            else {
                this.get_View().CancelLabel.set_text(cancelLabelStr);
                this.get_View().CancelLabel.set_spacingX(this.GetLabelSpacingX(cancelLabelStr));
            }
            this.UpdateBtnStatus(this.get_View().OKButton.get_gameObject(), true, false);
            this.UpdateBtnStatus(this.get_View().CancelButton.get_gameObject(), true, true);
            this.OnOkHandler = onHandler;
            this.OnCancelHandler = cancelHandler;
        },
        OpenMessageWindow: function (msg, title, onHandler, pivot, okLabelStr, justClose, topWin){
            this._isCloseCallCancelHandler = false;
            this._isComfirmWin = justClose;
            this._topWin = topWin;
            if (System.String.IsNullOrEmpty(msg)){
                msg = "";
            }
            var strArr = msg.ToCharArray();
            if (strArr.length < 19){
                this.get_View().InfoLabel.set_pivot(4);
            }
            else {
                this.get_View().InfoLabel.set_pivot(3);
            }
            this.get_View().InfoLabel.set_text(msg);
            this.get_View().TitleLabel.set_text(title);
            this.get_View().OKLabel.set_text(okLabelStr);
            this.get_View().OKLabel.set_spacingX(this.GetLabelSpacingX(okLabelStr));
            this.get_View().OKButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, this.get_View().OKButton.get_transform().get_localPosition().y, 0));
            this.UpdateBtnStatus(this.get_View().OKButton.get_gameObject(), true, false);
            this.UpdateBtnStatus(this.get_View().CancelButton.get_gameObject(), false, true);
            this.OnOkHandler = onHandler;
        },
        GetLabelSpacingX: function (text){
            if (text.length <= 2){
                return 12;
            }
            else if (text.length <= 3){
                return 6;
            }
            else {
                return 1;
            }
        },
        OnClickOkButton: function (){
            this.RemoveCDTask("WindowPrefabTime");
            this.CloseWin();
            if (this.OnOkHandler != null){
                this.OnOkHandler();
            }
        },
        OnClickCancelButton: function (){
            this.RemoveCDTask("WindowPrefabTime");
            this.CloseWin();
            if (this.OnCancelHandler != null){
                this.OnCancelHandler();
            }
        },
        OnClickCloseButton: function (){
            if (this._isCloseCallCancelHandler){
                this.OnClickCancelButton();
            }
            else if (this._isComfirmWin == false){
                this.OnClickOkButton();
            }
            else {
                this.RemoveCDTask("WindowPrefabTime");
                this.CloseWin();
            }
        },
        CloseWin: function (){
            if (this._topWin){
                ProxyWindowModule.CloseForTop();
            }
            else {
                ProxyWindowModule.Close();
            }
        },
        UpdateBtnStatus: function (pUIButton, pVisible, pUpdateGrid){
            if (pVisible){
                pUIButton.get_transform().set_parent(this.get_View().BtnGrid_UIGrid.get_transform());
                pUIButton.get_gameObject().SetActive(true);
            }
            else {
                pUIButton.get_transform().set_parent(this.get_View().get_transform());
                pUIButton.get_gameObject().SetActive(false);
            }
            if (pUpdateGrid)
                this.get_View().BtnGrid_UIGrid.Reposition();
        },
        OnDispose: function (){
            this.RemoveCDTask("WindowPrefabTime");
        }
    }
};
JsTypes.push(WindowPrefabController);
var DivorceWindowPrefab = {
    fullname: "DivorceWindowPrefab",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel_UILabel = null;
            this.InfoLabel_UILabel = null;
            this.CancelButton_UIEventTrigger = null;
            this.OKButton_UIEventTrigger = null;
            this.CancelLabel_UILabel = null;
            this.OKLabel_UILabel = null;
            this.CloseBtn_UIEventTrigger = null;
            this.CancelButton_UISprite = null;
            this.OKButton_UISprite = null;
            this.CoolDownTimeLbl_UILabel = null;
            this.CloseBtn_UISprite = null;
            this.CancelButton_BoxCollider = null;
            this.OKButton_BoxCollider = null;
            this.CloseBtn_BoxCollider = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.TitleLabel_UILabel = root.Find("ContentFrame/TitleLabel").GetComponent$1(UILabel.ctor);
            this.InfoLabel_UILabel = root.Find("ContentFrame/InfoLabel").GetComponent$1(UILabel.ctor);
            this.CancelButton_UIEventTrigger = root.Find("ContentFrame/CancelButton").GetComponent$1(UIEventTrigger.ctor);
            this.OKButton_UIEventTrigger = root.Find("ContentFrame/OKButton").GetComponent$1(UIEventTrigger.ctor);
            this.CancelLabel_UILabel = root.Find("ContentFrame/CancelButton/CancelLabel").GetComponent$1(UILabel.ctor);
            this.OKLabel_UILabel = root.Find("ContentFrame/OKButton/OKLabel").GetComponent$1(UILabel.ctor);
            this.CloseBtn_UIEventTrigger = root.Find("CloseBtn").GetComponent$1(UIEventTrigger.ctor);
            this.CancelButton_UISprite = root.Find("ContentFrame/CancelButton").GetComponent$1(UISprite.ctor);
            this.OKButton_UISprite = root.Find("ContentFrame/OKButton").GetComponent$1(UISprite.ctor);
            this.CoolDownTimeLbl_UILabel = root.Find("CoolDownTimeLbl").GetComponent$1(UILabel.ctor);
            this.CloseBtn_UISprite = root.Find("CloseBtn").GetComponent$1(UISprite.ctor);
            this.CancelButton_BoxCollider = root.Find("ContentFrame/CancelButton").GetComponent$1(UnityEngine.BoxCollider.ctor);
            this.OKButton_BoxCollider = root.Find("ContentFrame/OKButton").GetComponent$1(UnityEngine.BoxCollider.ctor);
            this.CloseBtn_BoxCollider = root.Find("CloseBtn").GetComponent$1(UnityEngine.BoxCollider.ctor);
        }
    }
};
JsTypes.push(DivorceWindowPrefab);
var GameDescriptionView = {
    fullname: "GameDescriptionView",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel_UILabel = null;
            this.CloseButton_UIButton = null;
            this.ContentTable_UITable = null;
            this.ContentScrollView_UIScrollView = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.TitleLabel_UILabel = root.Find("TitleGroup/TitleLabel").GetComponent$1(UILabel.ctor);
            this.CloseButton_UIButton = root.Find("CloseButton").GetComponent$1(UIButton.ctor);
            this.ContentTable_UITable = root.Find("ContentGroup/ContentScrollView/ContentTable").GetComponent$1(UITable.ctor);
            this.ContentScrollView_UIScrollView = root.Find("ContentGroup/ContentScrollView").GetComponent$1(UIScrollView.ctor);
        }
    }
};
JsTypes.push(GameDescriptionView);
var MarryWindowPrefab = {
    fullname: "MarryWindowPrefab",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ContentLbl_UILabel = null;
            this.TopLbl_UILabel = null;
            this.OkBtn_UIButton = null;
            this.RemainTimeLbl_UILabel = null;
            this.ExtraLbl_UILabel = null;
            this.ProposeMarriage = null;
            this.MarriageCosts = null;
            this.PayAllBtn_UIButton = null;
            this.PayHalfBtn_UIButton = null;
            this.CloseBtn_UIButton = null;
            this.OkBtn_UISprite = null;
            this.PayAllBtn_UISprite = null;
            this.PayHalfBtn_UISprite = null;
            this.ExtraBg = null;
            this.CloseBtn_UISprite = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.ContentLbl_UILabel = root.Find("Content/ContentBg/ContentLbl").GetComponent$1(UILabel.ctor);
            this.TopLbl_UILabel = root.Find("Content/ProposeMarriage/TopLbl").GetComponent$1(UILabel.ctor);
            this.OkBtn_UIButton = root.Find("Content/ProposeMarriage/OkBtn").GetComponent$1(UIButton.ctor);
            this.RemainTimeLbl_UILabel = root.Find("Content/RemainTimeLbl").GetComponent$1(UILabel.ctor);
            this.ExtraLbl_UILabel = root.Find("Content/ExtraBg/ExtraLbl").GetComponent$1(UILabel.ctor);
            this.ProposeMarriage = root.Find("Content/ProposeMarriage").get_gameObject();
            this.MarriageCosts = root.Find("Content/MarriageCosts").get_gameObject();
            this.PayAllBtn_UIButton = root.Find("Content/MarriageCosts/PayAllBtn").GetComponent$1(UIButton.ctor);
            this.PayHalfBtn_UIButton = root.Find("Content/MarriageCosts/PayHalfBtn").GetComponent$1(UIButton.ctor);
            this.CloseBtn_UIButton = root.Find("Content/CloseBtn").GetComponent$1(UIButton.ctor);
            this.OkBtn_UISprite = root.Find("Content/ProposeMarriage/OkBtn").GetComponent$1(UISprite.ctor);
            this.PayAllBtn_UISprite = root.Find("Content/MarriageCosts/PayAllBtn").GetComponent$1(UISprite.ctor);
            this.PayHalfBtn_UISprite = root.Find("Content/MarriageCosts/PayHalfBtn").GetComponent$1(UISprite.ctor);
            this.ExtraBg = root.Find("Content/ExtraBg").get_gameObject();
            this.CloseBtn_UISprite = root.Find("Content/CloseBtn").GetComponent$1(UISprite.ctor);
        }
    }
};
JsTypes.push(MarryWindowPrefab);
var QueueWindowPrefab = {
    fullname: "QueueWindowPrefab",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ServerName_UILabel = null;
            this.QueuePositionLbl_UILabel = null;
            this.WaitTimeLbl_UILabel = null;
            this.ChangeServerBtn_UIButton = null;
            this.CloseBtn_UIButton = null;
            this.ChangeServerBtnNameLbl_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.ServerName_UILabel = root.Find("Bg/ServerNameBg/ServerName").GetComponent$1(UILabel.ctor);
            this.QueuePositionLbl_UILabel = root.Find("Bg/QueuePositionLbl").GetComponent$1(UILabel.ctor);
            this.WaitTimeLbl_UILabel = root.Find("Bg/WaitTimeLbl").GetComponent$1(UILabel.ctor);
            this.ChangeServerBtn_UIButton = root.Find("Bg/ChangeServerBtn").GetComponent$1(UIButton.ctor);
            this.CloseBtn_UIButton = root.Find("CloseBtn").GetComponent$1(UIButton.ctor);
            this.ChangeServerBtnNameLbl_UILabel = root.Find("Bg/ChangeServerBtn/ChangeServerBtnNameLbl").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(QueueWindowPrefab);
var SimpleWindowPrefab = {
    fullname: "SimpleWindowPrefab",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.simple_InfoLabel = null;
            this.simple_OKButton = null;
            this.simple_OKLabel = null;
            this.simple_CancelButton = null;
            this.simple_CancelLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.simple_InfoLabel = root.Find("SimpleWin/simple_InfoLabel").GetComponent$1(UILabel.ctor);
            this.simple_OKButton = root.Find("SimpleWin/simple_OKButton").GetComponent$1(UIButton.ctor);
            this.simple_OKLabel = root.Find("SimpleWin/simple_OKButton/simple_OKLabel").GetComponent$1(UILabel.ctor);
            this.simple_CancelButton = root.Find("SimpleWin/simple_CancelButton").GetComponent$1(UIButton.ctor);
            this.simple_CancelLabel = root.Find("SimpleWin/simple_CancelButton/simple_CancelLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SimpleWindowPrefab);
var WindowInputPrefab = {
    fullname: "WindowInputPrefab",
    baseTypeName: "BaseView",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.NameInput = null;
            this.CancelButton = null;
            this.CloseBtn = null;
            this.OKButton = null;
            this.tipsLabel = null;
            this.DefaultButton = null;
            this.TitleLabel = null;
            this.CancelLabel = null;
            this.OKLabel = null;
            this.defaultLabel = null;
            this.desLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.NameInput = root.Find("ContentFrame/NameInput").GetComponent$1(UIInput.ctor);
            this.CancelButton = root.Find("ContentFrame/CancelButton").GetComponent$1(UIButton.ctor);
            this.CloseBtn = root.Find("ContentFrame/CloseBtn").GetComponent$1(UIButton.ctor);
            this.OKButton = root.Find("ContentFrame/OKButton").GetComponent$1(UIButton.ctor);
            this.tipsLabel = root.Find("ContentFrame/tipsLabel").GetComponent$1(UILabel.ctor);
            this.DefaultButton = root.Find("ContentFrame/DefaultButton").GetComponent$1(UIButton.ctor);
            this.TitleLabel = root.Find("ContentFrame/TitleLabel").GetComponent$1(UILabel.ctor);
            this.CancelLabel = root.Find("ContentFrame/CancelButton/CancelLabel").GetComponent$1(UILabel.ctor);
            this.OKLabel = root.Find("ContentFrame/OKButton/OKLabel").GetComponent$1(UILabel.ctor);
            this.defaultLabel = root.Find("ContentFrame/DefaultButton/defaultLabel").GetComponent$1(UILabel.ctor);
            this.desLabel = root.Find("ContentFrame/desLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(WindowInputPrefab);
var WindowOptSavePrefab = {
    fullname: "WindowOptSavePrefab",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            WindowOptSavePrefab.NAME = "WindowOptSavePrefab";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel = null;
            this.InfoLabel = null;
            this.CancelButton = null;
            this.OKButton = null;
            this.CancelLabel = null;
            this.OKLabel = null;
            this.CloseBtn = null;
            this.SelectToggle = null;
            this.ToggleLabel_UILabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.TitleLabel = root.Find("ContentFrame/TitleLabel").GetComponent$1(UILabel.ctor);
            this.InfoLabel = root.Find("ContentFrame/InfoLabel").GetComponent$1(UILabel.ctor);
            this.CancelButton = root.Find("ContentFrame/CancelButton").GetComponent$1(UIButton.ctor);
            this.OKButton = root.Find("ContentFrame/OKButton").GetComponent$1(UIButton.ctor);
            this.CancelLabel = root.Find("ContentFrame/CancelButton/CancelLabel").GetComponent$1(UILabel.ctor);
            this.OKLabel = root.Find("ContentFrame/OKButton/OKLabel").GetComponent$1(UILabel.ctor);
            this.CloseBtn = root.Find("CloseBtn").GetComponent$1(UIButton.ctor);
            this.SelectToggle = root.Find("ContentFrame/SelectToggle").GetComponent$1(UIToggle.ctor);
            this.ToggleLabel_UILabel = root.Find("ContentFrame/SelectToggle/ToggleLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(WindowOptSavePrefab);
var WindowPrefab = {
    fullname: "WindowPrefab",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            WindowPrefab.NAME = "WindowPrefab";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel = null;
            this.InfoLabel = null;
            this.CancelLabel = null;
            this.OKButton = null;
            this.OKLabel = null;
            this.CloseBtn = null;
            this.ContentBg_UISprite = null;
            this.Sprite_UISprite = null;
            this.CancelButton = null;
            this.BtnGrid_UIGrid = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.TitleLabel = root.Find("ContentFrame/CntrTitle/TitleLabel").GetComponent$1(UILabel.ctor);
            this.InfoLabel = root.Find("ContentFrame/InfoLabel").GetComponent$1(UILabel.ctor);
            this.CancelLabel = root.Find("ContentFrame/BtnGrid/CancelButton/CancelLabel").GetComponent$1(UILabel.ctor);
            this.OKButton = root.Find("ContentFrame/BtnGrid/OKButton").GetComponent$1(UIButton.ctor);
            this.OKLabel = root.Find("ContentFrame/BtnGrid/OKButton/OKLabel").GetComponent$1(UILabel.ctor);
            this.CloseBtn = root.Find("CloseBtn").GetComponent$1(UIButton.ctor);
            this.ContentBg_UISprite = root.Find("ContentFrame/ContentBg").GetComponent$1(UISprite.ctor);
            this.Sprite_UISprite = root.Find("ContentFrame/Sprite").GetComponent$1(UISprite.ctor);
            this.CancelButton = root.Find("ContentFrame/BtnGrid/CancelButton").GetComponent$1(UIButton.ctor);
            this.BtnGrid_UIGrid = root.Find("ContentFrame/BtnGrid").GetComponent$1(UIGrid.ctor);
        }
    }
};
JsTypes.push(WindowPrefab);
var MiniMapController = {
    fullname: "MiniMapController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            MiniMapController._minMapConfig = null;
            MiniMapController.Grap = 3;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._walkPointList = new System.Collections.Generic.List$1.ctor(UnityEngine.GameObject.ctor);
            this._cachedPoints = new System.Collections.Generic.Queue$1.ctor(UnityEngine.GameObject.ctor);
            this._heroView = null;
            this._mapOffX = 299;
            this._mapOffY = 333;
            this._scale = 7.2 /* 72f / 10f */;
            this._timer = 0;
            this._walkPointPrefab = null;
            MonoViewController$1.ctor.call(this, MiniMapView.ctor);
        },
        AfterInitView: function (){
            this._walkPointPrefab = AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("WalkPointSprite", null);
            ChangeSkinHelper.ChangeMiniMapSkin(this);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().Texture_UIEventTrigger.onClick, $CreateDelegate(this, this.OnClickMinMapTexture));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseBtn_UIButton.onClick, $CreateDelegate(this, this.CloseView));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().ChangeMapBtn_UIButton.onClick, $CreateDelegate(this, this.OnChangeMapButtonClick));
        },
        OnDispose: function (){
            UIHelper.DisposeUITexture(this.get_View().Texture_UITexture);
            this._heroView = null;
            this._walkPointPrefab = null;
        },
        Open: function (){
            this.get_View().Content.SetActive(false);
            if (MiniMapController._minMapConfig == null){
                AssetPipeline.ResourcePoolManager.get_Instance().LoadConfig("MiniMapConfig", $CreateAnonymousDelegate(this, function (asset){
                    if (UnityEngine.Object.op_Inequality(asset, null)){
                        var textAsset = As(asset, UnityEngine.TextAsset.ctor);
                        if (UnityEngine.Object.op_Inequality(textAsset, null)){
                            MiniMapController._minMapConfig = JsHelper.ToObject(MinMapConfig.ctor, textAsset.get_text());
                            this.InitMinMapData();
                        }
                    }
                }), null, 100);
            }
            else {
                this.InitMinMapData();
            }
        },
        CloseView: function (){
            ProxyWorldMapModule.CloseMiniMap();
        },
        OnChangeMapButtonClick: function (){
            ProxyWorldMapModule.CloseMiniMap();
            ProxyWorldMapModule.OpenMiniWorldMap();
        },
        OnClickMinMapTexture: function (){
            if (JoystickModule.get_DisableMove())
                return;
            var clickPos = UnityEngine.Vector2.op_Implicit$$Vector2(UICamera.get_lastEventPosition());
            var factor = UIRoot.GetPixelSizeAdjustment$$GameObject(this.get_gameObject());
            var startX = (UnityEngine.Screen.get_width() - this.get_View().Texture_UITexture.get_width() / factor) / 2;
            var startY = (UnityEngine.Screen.get_height() - this.get_View().Texture_UITexture.get_height() / factor) / 2;
            var x = clickPos.x - startX;
            var y = UnityEngine.Screen.get_height() - clickPos.y - startY;
            x *= factor;
            y *= factor;
            var dest = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(-1 * (this._mapOffX - x) / this._scale, 0, -1 * (y - this._mapOffY) / this._scale);
            dest = SceneHelper.GetSceneStandPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(dest.x, 0, dest.z), UnityEngine.Vector3.get_zero());
            GameDebuger.Log("walkTo=" + dest, null);
            this._heroView.WalkToPoint(dest, null, false);
            GameDebuger.TODO("MissionDataModel.Instance.HeroCharacterControllerEnable(true, 0);");
            this.get_View().WalkSpriteTrans.set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x, -y, 0));
            this.get_View().WalkSpriteGo.SetActive(true);
            this.StartCoroutine$$IEnumerator(this.DelayUpdatePathPoint());
        },
        DelayUpdatePathPoint: function*(){
            yield(null);
            yield(null);
            this.UpdateWalkPoints(this._heroView.GetWalkPathList());
        },
        ConverWorldPosToMinMapPos: function (worldX, worldZ){
            return new UnityEngine.Vector3.ctor$$Single$$Single$$Single(worldX * this._scale + this._mapOffX, worldZ * this._scale - this._mapOffY, 0);
        },
        UpdateWalkPoints: function (corners){
            for (var i = 0; i < this._walkPointList.get_Count(); i++){
                this.DespawnWalkPoint(this._walkPointList.get_Item$$Int32(i));
            }
            this._walkPointList.Clear();
            for (var i = 0,len = corners.length; i < len; i++){
                if (i + 1 < len){
                    this.GeneratePoints(corners[i], corners[i + 1]);
                }
            }
        },
        SpawnWalkPoint: function (){
            var go = null;
            if (this._cachedPoints.get_Count() > 0){
                go = this._cachedPoints.Dequeue();
                go.SetActive(true);
                return go;
            }
            return NGUITools.AddChild$$GameObject$$GameObject(this.get_View().SignPanel, this._walkPointPrefab);
        },
        DespawnWalkPoint: function (go){
            go.SetActive(false);
            this._cachedPoints.Enqueue(go);
        },
        GeneratePoints: function (start, end){
            var beginPoint = new UnityEngine.Vector2.ctor$$Single$$Single(start.x, start.z);
            var endPoint = new UnityEngine.Vector2.ctor$$Single$$Single(end.x, end.z);
            var Ox = beginPoint.x;
            var Oy = beginPoint.y;
            var radian = System.Math.Atan2(endPoint.y - Oy, endPoint.x - Ox);
            var totalLen = UnityEngine.Vector2.Distance(beginPoint, endPoint);
            var currLen = 3 /* Grap */;
            var x,y;
            while (currLen < totalLen){
                x = Ox + System.Math.Cos(radian) * currLen;
                y = Oy + System.Math.Sin(radian) * currLen;
                var go = this.SpawnWalkPoint();
                go.get_transform().set_localPosition(this.ConverWorldPosToMinMapPos(x, y));
                this._walkPointList.Add(go);
                currLen += 3 /* Grap */;
            }
        },
        Update: function (){
            if (UnityEngine.Object.op_Equality(this._heroView, null))
                return;
            this._timer += _jsComManager.dT;
            if (this._timer > 0.3){
                this._timer = 0;
                this.get_View().HeroSpriteTrans.set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, this.get_View().HeroSpriteTrans.get_localEulerAngles().y + 180, 0));
            }
            var heroWorldPos = this._heroView.get_transform().get_localPosition();
            var heroPosition = this.ConverWorldPosToMinMapPos(heroWorldPos.x, heroWorldPos.z);
            this.get_View().HeroSpriteTrans.set_localPosition(heroPosition);
            var needReomve = 0;
            for (var i = this._walkPointList.get_Count() - 1; i >= 0; i--){
                var go = this._walkPointList.get_Item$$Int32(i);
                var distance = UnityEngine.Vector3.op_Subtraction(heroPosition, go.get_transform().get_localPosition());
                var magnitude = distance.get_magnitude();
                if (magnitude < 1.5 || i < needReomve){
                    needReomve = i;
                    this.DespawnWalkPoint(go);
                    this._walkPointList.Remove(go);
                }
            }
            if (this.get_View().WalkSpriteGo.get_activeInHierarchy()){
                var distance2 = UnityEngine.Vector3.op_Subtraction(heroPosition, this.get_View().WalkSpriteTrans.get_localPosition());
                if (distance2.get_magnitude() < 0.5){
                    this.get_View().WalkSpriteGo.SetActive(false);
                }
            }
        },
        InitMinMapData: function (){
            if (WorldManager.get_Instance().GetModel().GetSceneDto() == null){
                this.get_View().Texture_UITexture.set_mainTexture(null);
                this.get_View().Texture_UITexture.get_gameObject().SetActive(false);
                return;
            }
            this.get_View().Texture_UITexture.get_gameObject().SetActive(true);
            var resId = WorldManager.get_Instance().GetModel().GetSceneDto().get_sceneMap().resId;
            var configStr = null;
            (function (){
                var $1 = $Ref(null, configStr);
                var $res = MiniMapController._minMapConfig.map.TryGetValue(resId.toString(), $1);
                configStr = $1.Value;
                return $res;
            }).call(this);
            if (System.String.IsNullOrEmpty(configStr)){
                UnityEngine.Debug.LogError$$Object(System.String.Format$$String$$Object("预览图{0}无配置数据", resId));
                configStr = "100,200,200";
            }
            var configs = configStr.Split$$Char$Array([","]);
            this._scale = System.Single.Parse$$String(configs[0]) / 10;
            this._mapOffX = System.Single.Parse$$String(configs[1]);
            this._mapOffY = System.Single.Parse$$String(configs[2]);
            this._heroView = WorldManager.get_Instance().GetHeroView();
            this.get_View().WalkSpriteGo.SetActive(false);
            var imageResKey = System.String.Format$$String$$Object("{0}", resId);
            AssetPipeline.ResourcePoolManager.get_Instance().LoadImage(imageResKey, $CreateAnonymousDelegate(this, function (asset){
                if (UnityEngine.Object.op_Inequality(asset, null)){
                    var tex = As(asset, UnityEngine.Texture2D.ctor);
                    UIHelper.DisposeUITexture(this.get_View().Texture_UITexture);
                    this.get_View().Texture_UITexture.set_mainTexture(tex);
                    if (UnityEngine.Object.op_Inequality(tex, null)){
                        this.get_View().Texture_UITexture.set_width(this.get_View().Texture_UITexture.get_mainTexture().get_width());
                        this.get_View().Texture_UITexture.set_height(this.get_View().Texture_UITexture.get_mainTexture().get_height());
                        this.get_View().BgSprite_UISprite.set_width(this.get_View().Texture_UITexture.get_width());
                        this.get_View().BgSprite_UISprite.set_height(this.get_View().Texture_UITexture.get_height());
                        this.get_View().ChangeMapBtn_UISprite.UpdateAnchors();
                        this.get_View().TopBorderSprite_UISprite.set_width(this.get_View().Texture_UITexture.get_width() + 14);
                        this.get_View().TopBorderSprite_UISprite.set_height(this.get_View().Texture_UITexture.get_height() + 14);
                        this.get_View().Texture_UITexture.get_cachedTransform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(((-1 /* -1 */ * this.get_View().Texture_UITexture.get_width() / 2) | 0), ((this.get_View().Texture_UITexture.get_height() / 2) | 0), 0));
                        this.get_View().CloseBtn_UIButton.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(((this.get_View().Texture_UITexture.get_width() / 2) | 0) - 8, ((this.get_View().Texture_UITexture.get_height() / 2) | 0) - 10, 0));
                    }
                }
                this.Update();
                this.get_View().Content.SetActive(true);
                this.get_View().Texture_UITexture.ResizeCollider();
                var npcs = WorldManager.get_Instance().GetNpcViewManager().GetNpcUnits();
                var $it56 = npcs.get_Values().GetEnumerator();
                while ($it56.MoveNext()){
                    var npc = $it56.get_Current();
                    if (npc.IsVisible()){
                        var tNPCType = (npc.GetNpc().type);
                        if (tNPCType == AppDto.Npc.NpcType.DoubleTeleport && Is(npc.GetNpc(), AppDto.NpcDoubleTeleport.ctor)){
                            this.AddTeleportNpc(npc.GetNpc());
                        }
                        else if (tNPCType == AppDto.Npc.NpcType.DoubleTeleport && Is(npc.GetNpc(), NpcSceneTeleportUnit.ctor)){
                            this.AddSceneTeleportNpc(As(npc, NpcSceneTeleportUnit.ctor));
                        }
                        else if (tNPCType == AppDto.Npc.NpcType.General){
                            this.AddGeneralNpc(As(npc.GetNpc(), AppDto.NpcGeneral.ctor));
                        }
                    }
                }
            }), null);
        },
        GetNpcName: function (npcName){
            return npcName.Replace$$String$$String("#", "\n");
        },
        AddTeleportNpc: function (npc){
            if (Is(npc, AppDto.NpcDoubleTeleport.ctor)){
                var go = NGUITools.AddChild$$GameObject$$GameObject(this.get_View().SignPanel, AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("TeleportSprite", null));
                var uiLabel = go.GetComponentInChildren$1(UILabel.ctor);
                if (UnityEngine.Object.op_Inequality(uiLabel, null)){
                    uiLabel.set_text("[b]" + this.GetNpcName(npc.name));
                }
                go.get_transform().set_localPosition(this.ConverWorldPosToMinMapPos(npc.x, npc.z));
            }
        },
        AddSceneTeleportNpc: function (npc){
            var go = NGUITools.AddChild$$GameObject$$GameObject(this.get_View().SignPanel, AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("TeleportSprite", null));
            var uiLabel = go.GetComponentInChildren$1(UILabel.ctor);
            if (UnityEngine.Object.op_Inequality(uiLabel, null)){
                uiLabel.set_text("[b]" + this.GetNpcName(npc.GetNpc().name));
            }
            go.get_transform().set_localPosition(this.ConverWorldPosToMinMapPos(npc.getNpcState().x, npc.getNpcState().z));
        },
        AddGeneralNpc: function (npc){
            if (npc == null){
                return;
            }
            var go = NGUITools.AddChild$$GameObject$$GameObject(this.get_View().SignPanel, AssetPipeline.ResourcePoolManager.get_Instance().SpawnUIGo("NpcSprite", null));
            var nameLabel = go.GetComponentInChildren$1(UILabel.ctor);
            var pointSprite = go.GetComponentInChildren$1(UISprite.ctor);
            nameLabel.set_text("[b]" + this.GetNpcName(npc.shortName));
            var textColor = UnityEngine.Color.get_white();
            var pointName = "green-npc";
            switch (npc.kind){
                case AppDto.NpcGeneral.NpcGeneralKindEnum.Idler:
                    textColor = ColorConstant.Color_MiniMap_Npc_Idle;
                    pointName = "yellow-npc";
                    break;
                case AppDto.NpcGeneral.NpcGeneralKindEnum.Function:
                    textColor = ColorConstant.Color_MiniMap_Npc_Function;
                    pointName = "green-npc";
                    break;
                case AppDto.NpcGeneral.NpcGeneralKindEnum.Area:
                    textColor = ColorConstant.Color_MiniMap_Npc_Area;
                    pointName = "green-npc";
                    break;
            }
            nameLabel.set_color(textColor);
            pointSprite.set_spriteName(pointName);
            go.get_transform().set_localPosition(this.ConverWorldPosToMinMapPos(npc.x, npc.z));
        }
    }
};
JsTypes.push(MiniMapController);
var MinMapConfig = {
    fullname: "MinMapConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.map = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(MinMapConfig);
var WorldMapDataMgr = {
    fullname: "WorldMapDataMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            WorldMapDataMgr._ins = null;
        },
        Instance$$: "WorldMapDataMgr",
        get_Instance: function (){
            if (WorldMapDataMgr._ins == null)
                WorldMapDataMgr._ins = new WorldMapDataMgr.ctor();
            return WorldMapDataMgr._ins;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.stream = null;
            this._data = new WorldMapDataMgr.WorldMapData.ctor();
            System.Object.ctor.call(this);
            this.stream = UniRx.Observable.CombineLatest$3$$IObservable$1$$IObservable$1$$Func$3(System.String.ctor, IPlayerModel.ctor, IMiniWorldMapData.ctor, UniRx.Observable.Select$2$$IObservable$1$$Func$2(IWorldModel.ctor, System.String.ctor, WorldManager.get_Instance().get_WorkdModelStream(), $CreateAnonymousDelegate(this, function (d){
                return d.GetSceneName();
            })), PlayerModel.get_Stream(), $CreateAnonymousDelegate(this, function (namestr, iplayer){
                return As(this._data, IMiniWorldMapData.ctor);
            }));
        },
        Dispose: function (){
            this._data.Dispose();
            UniRx.Observable.DoOnCompleted$1(IMiniWorldMapData.ctor, this.stream, null);
        }
    }
};
JsTypes.push(WorldMapDataMgr);
var WorldMapController = {
    fullname: "WorldMapController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, WorldMapView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().CloseButton.onClick, $CreateDelegate(this, this.OnCloseButtonClick));
        },
        OnCloseButtonClick: function (){
            ProxyWorldMapModule.CloseWorldMap();
        },
        AfterInitView: function (){
            var sceneMaps = DataCache.getArrayByCls$1(AppDto.SceneMap.ctor);
            var scene2dList = new System.Collections.Generic.List$1.ctor(AppDto.SceneMap.ctor);
            var scene3dList = new System.Collections.Generic.List$1.ctor(AppDto.SceneMap.ctor);
            if (sceneMaps != null){
                var tableRoot = this.get_View().WorldTable_UITable.get_gameObject();
                for (var i = 0; i < sceneMaps.get_Count(); i++){
                    var map = sceneMaps.get_Item$$Int32(i);
                    if (map.name.Contains("2D")){
                        scene2dList.Add(map);
                    }
                    else {
                        scene3dList.Add(map);
                    }
                }
                for (var i = 0; i < scene2dList.get_Count(); i++){
                    var map = scene2dList.get_Item$$Int32(i);
                    var btn = this.AddCachedChild$$GameObject$$String(tableRoot, "BaseSmallButton");
                    this.InitMapBtn(btn, map);
                }
                for (var i = 0; i < scene3dList.get_Count(); i++){
                    var map = scene3dList.get_Item$$Int32(i);
                    var btn = this.AddCachedChild$$GameObject$$String(tableRoot, "BaseSmallButton");
                    NGUITools.AddMissingComponent$1(UIDragScrollView.ctor, btn);
                    this.InitMapBtn(btn, map);
                }
            }
        },
        InitMapBtn: function (btn, map){
            btn.set_name("Map_" + map.id);
            btn.GetComponentInChildren$1(UILabel.ctor).set_text(map.name);
            var uiButton = btn.GetComponent$1(UIButton.ctor);
            EventDelegate.Set$$List$1$EventDelegate$$Callback(uiButton.onClick, $CreateAnonymousDelegate(this, function (){
                WorldManager.get_Instance().Enter(map.id, false, false, true, null);
                ProxyWorldMapModule.CloseWorldMap();
            }));
        }
    }
};
JsTypes.push(WorldMapController);
var IMiniWorldMapData = {
    fullname: "IMiniWorldMapData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMiniWorldMapData);
var MiniMapView = {
    fullname: "MiniMapView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            MiniMapView.NAME = "MiniMapView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BgSprite_UISprite = null;
            this.Texture_UITexture = null;
            this.SignPanel = null;
            this.HeroSpriteTrans = null;
            this.ChangeMapBtn_UIButton = null;
            this.TopBorderSprite_UISprite = null;
            this.Texture_UIEventTrigger = null;
            this.CloseBtn_UIButton = null;
            this.WalkSpriteTrans = null;
            this.Content = null;
            this.ChangeMapBtn_UISprite = null;
            this.WalkSpriteGo = null;
            this.HeroSpriteGo = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BgSprite_UISprite = root.Find("Content/BgSprite").GetComponent$1(UISprite.ctor);
            this.Texture_UITexture = root.Find("Content/Texture").GetComponent$1(UITexture.ctor);
            this.SignPanel = root.Find("Content/Texture/SignPanel").get_gameObject();
            this.HeroSpriteTrans = root.Find("Content/Texture/SignPanel/HeroSprite");
            this.ChangeMapBtn_UIButton = root.Find("Content/ChangeMapBtn").GetComponent$1(UIButton.ctor);
            this.TopBorderSprite_UISprite = root.Find("Content/TopBorderSprite").GetComponent$1(UISprite.ctor);
            this.Texture_UIEventTrigger = root.Find("Content/Texture").GetComponent$1(UIEventTrigger.ctor);
            this.CloseBtn_UIButton = root.Find("Content/CloseBtn").GetComponent$1(UIButton.ctor);
            this.WalkSpriteTrans = root.Find("Content/Texture/SignPanel/WalkSprite");
            this.Content = root.Find("Content").get_gameObject();
            this.ChangeMapBtn_UISprite = root.Find("Content/ChangeMapBtn").GetComponent$1(UISprite.ctor);
            this.WalkSpriteGo = root.Find("Content/Texture/SignPanel/WalkSprite").get_gameObject();
            this.HeroSpriteGo = root.Find("Content/Texture/SignPanel/HeroSprite").get_gameObject();
        }
    }
};
JsTypes.push(MiniMapView);
var IMiniWorldMapView = {
    fullname: "IMiniWorldMapView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IMiniWorldMapView);
var MiniWorldMapView = {
    fullname: "MiniWorldMapView",
    baseTypeName: "FRPBaseView$3",
    staticDefinition: {
        cctor: function (){
            MiniWorldMapView.WorldMap = "WorldMap";
            MiniWorldMapView.NAME = "MiniWorldMapView";
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IMiniWorldMapView"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._oneShotUIEffect = null;
            this.sceneBtnDic = null;
            this.CloseBtn = null;
            this.PlaceGroup = null;
            this.BackMyFactionBtn = null;
            this.CurrMapBtn = null;
            this.GoHomeBtn = null;
            this.HeroSprite = null;
            this.PlayerHeadSprite = null;
            this.EffPos = null;
            this.Map_UITexture = null;
            this.closeBtnEvt = null;
            this.backMyFactionBtnEvt = null;
            this.currMapBtnEvt = null;
            this.goHomeBtnEvt = null;
            FRPBaseView$3.ctor.call(this, MiniWorldMapView.ctor, IMiniWorldMapView.ctor, IMiniWorldMapData.ctor);
        },
        LateElementBinding: function (){
            this.GoHomeBtn.get_gameObject().SetActive(false);
            var textureName = ChangeSkinHelper.GetWorldMapTexResName("WorldMap" /* WorldMap */);
            var asset = AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$ResGroup$$Type(textureName, 13, null);
            ChangeSkinHelper.ChangeTexture(this.Map_UITexture, As(asset, UnityEngine.Texture.ctor), true);
            AssetPipeline.AssetManager.get_Instance().UnloadBundle$$String$$ResGroup$$Boolean(textureName, 13, false);
        },
        InitSceneBtn: function (maps, act){
            this.sceneBtnDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, UnityEngine.GameObject.ctor);
            CollectionExtension.ForEach$1(AppDto.SceneMap.ctor, maps, $CreateAnonymousDelegate(this, function (map){
                var sceneBtn = GameObjectExt.FindGameObject(this.PlaceGroup, "Place_" + map.id);
                if (UnityEngine.Object.op_Inequality(sceneBtn, null)){
                    this.sceneBtnDic.Add(map.id, sceneBtn);
                    UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(sceneBtn), $CreateAnonymousDelegate(this, function (_){
                        GameUtil.SafeRun$1$$Action$1$$T$$Action$1$Exception(System.Int32.ctor, act, map.id, null);
                    }));
                }
            }));
        },
        UpdateHeroSpritePos: function (curSceneId){
            var sceneBtn = null;
            (function (){
                var $1 = $Ref(null, sceneBtn);
                var $res = this.sceneBtnDic.TryGetValue(curSceneId, $1);
                sceneBtn = $1.Value;
                return $res;
            }).call(this);
            if (UnityEngine.Object.op_Inequality(sceneBtn, null)){
                this.HeroSprite.SetActive(true);
                var nodePos = sceneBtn.get_transform().get_localPosition();
                var heroPosition = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(nodePos.x + 13, nodePos.y + 37, nodePos.z);
                this.HeroSprite.get_transform().set_localPosition(heroPosition);
                if (UnityEngine.Object.op_Equality(this._oneShotUIEffect, null)){
                    this._oneShotUIEffect = OneShotUIEffect.BeginFollowEffect("ui_eff_MiniWorldMap_Effect", this.EffPos, UnityEngine.Vector2.get_zero(), 1, true, 1, null);
                }
            }
            else {
                this.HeroSprite.SetActive(false);
            }
        },
        OnDispose: function (){
            if (UnityEngine.Object.op_Inequality(this._oneShotUIEffect, null)){
                this._oneShotUIEffect.Dispose();
            }
        },
        UpdateView: function (data){
            UIHelper.SetPetIcon(this.PlayerHeadSprite, data.get_HeadTex().toString(), false);
            this.UpdateHeroSpritePos(data.get_CurSceneId());
        },
        OnCloseBtnClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCloseBtnClick: function (){
            return this.closeBtnEvt;
        },
        OnBackMyFactionBtnClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnBackMyFactionBtnClick: function (){
            return this.backMyFactionBtnEvt;
        },
        OnCurrMapBtnClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnCurrMapBtnClick: function (){
            return this.currMapBtnEvt;
        },
        OnGoHomeBtnClick$$: "UniRx.IObservable`1[[UniRx.Unit]]",
        get_OnGoHomeBtnClick: function (){
            return this.goHomeBtnEvt;
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseBtn = root.Find("CloseBtn").get_gameObject();
            this.PlaceGroup = root.Find("PlaceGroup").get_gameObject();
            this.BackMyFactionBtn = root.Find("BackMyFactionBtn").get_gameObject();
            this.CurrMapBtn = root.Find("CurrMapBtn").get_gameObject();
            this.GoHomeBtn = root.Find("GoHomeBtn").get_gameObject();
            this.HeroSprite = root.Find("HeroSprite").get_gameObject();
            this.PlayerHeadSprite = root.Find("HeroSprite/PlayerHeadSprite").GetComponent$1(UISprite.ctor);
            this.EffPos = root.Find("HeroSprite/Sprite").GetComponent$1(UISprite.ctor);
            this.Map_UITexture = root.Find("Texture").GetComponent$1(UITexture.ctor);
        },
        InitReactiveEvents: function (){
            BaseView.commonPrototype.InitReactiveEvents.call(this);
            this.closeBtnEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CloseBtn);
            this.backMyFactionBtnEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.BackMyFactionBtn);
            this.currMapBtnEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.CurrMapBtn);
            this.goHomeBtnEvt = UniRx.NGUIEventExtensions.OnClickAsObservable$$GameObject(this.GoHomeBtn);
        },
        ClearReactiveEvents: function (){
            this.closeBtnEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.closeBtnEvt);
            this.backMyFactionBtnEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.backMyFactionBtnEvt);
            this.currMapBtnEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.currMapBtnEvt);
            this.goHomeBtnEvt = UniRx.SubjectExtensions.CloseOnceNull$1(UniRx.Unit.ctor, this.goHomeBtnEvt);
            BaseView.commonPrototype.ClearReactiveEvents.call(this);
        }
    }
};
JsTypes.push(MiniWorldMapView);
var WorldMapView = {
    fullname: "WorldMapView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            WorldMapView.NAME = "WorldMapView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CloseButton = null;
            this.WorldTable_UITable = null;
            this.DraggablePanel_UIScrollView = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CloseButton = root.Find("CloseButton").GetComponent$1(UIButton.ctor);
            this.WorldTable_UITable = root.Find("DraggablePanel/WorldTable").GetComponent$1(UITable.ctor);
            this.DraggablePanel_UIScrollView = root.Find("DraggablePanel").GetComponent$1(UIScrollView.ctor);
        }
    }
};
JsTypes.push(WorldMapView);
var DataManager = {
    fullname: "DataManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            DataManager.PreLoadTypes = (function (){
                var $v33 = new System.Collections.Generic.HashSet$1.ctor(System.Type.ctor);
                $v33.Add(Typeof(AppDto.GeneralCharactor.ctor));
                $v33.Add(Typeof(AppDto.Faction.ctor));
                $v33.Add(Typeof(AppDto.StaticConfig.ctor));
                return $v33;
            }).call(this);
            DataManager._instance = null;
            DataManager._allDataLoadFinish = false;
        },
        Instance$$: "DataManager",
        get_Instance: function (){
            if (DataManager._instance == null){
                DataManager._instance = new DataManager.ctor();
            }
            return DataManager._instance;
        },
        CleanUp: function (){
            AssetPipeline.FileHelper.DeleteDirectory(DataManager.get_StaticDataDir(), true);
            DataManager.Reset();
        },
        GetFileName: function (dataType){
            return dataType + ".jsz.bytes";
        },
        GetDataPath: function (dataType){
            var fileName = DataManager.GetFileName(dataType);
            if (AssetPipeline.AssetManager.ResLoadMode == 0){
                return "Assets/GameResources/StaticData/" + fileName;
            }
            else {
                return DataManager.get_StaticDataDir() + fileName;
            }
        },
        StaticDataDir$$: "System.String",
        get_StaticDataDir: function (){
            return AssetPipeline.GameResPath.get_persistentDataPath() + "/StaticData/";
        },
        AllDataLoadFinish$$: "System.Boolean",
        get_AllDataLoadFinish: function (){
            return DataManager._allDataLoadFinish;
        },
        Reset: function (){
            DataManager._allDataLoadFinish = false;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._allStaticDataTypes = null;
            this._curUpdateType = null;
            this._finishUpdateList = null;
            this._loadingMsgHandler = null;
            this._loadingProcessHandler = null;
            this._needUpdateAllCount = 0;
            this._needUpdatePreLoadCount = 0;
            this._needUpdateQueue = null;
            this._newDataVersionList = null;
            this._newDataVersionBytes = null;
            this._oldDataVersionList = null;
            this._onAllLoadFinish = null;
            this._onPreLoadFinish = null;
            this._staticDataByteArrayDic = null;
            System.Object.ctor.call(this);
        },
        Setup: function (){
            this._allStaticDataTypes = AppDto.DataCacheMap.serviceList();
            this._allStaticDataTypes.Sort$$Comparison$1($CreateAnonymousDelegate(this, function (a, b){
                if (a == Typeof(AppDto.DataListVersion.ctor))
                    return -1 /* -1 */;
                var existA = DataManager.PreLoadTypes.Contains(a);
                var existB = DataManager.PreLoadTypes.Contains(b);
                if (existA != existB){
                    if (existA)
                        return -1 /* -1 */;
                    return 1;
                }
                return 0;
            }));
            this._newDataVersionList = null;
            this._oldDataVersionList = null;
            var versionPath = DataManager.GetDataPath(Typeof(AppDto.DataListVersion.ctor).get_FullName());
            this.CopyDataFromPackage(versionPath);
            var ba = AssetPipeline.FileHelper.LoadByteArrayFromFile(versionPath);
            if (ba != null){
                try{
                    this._oldDataVersionList = JsHelper.ParseJsz(AppDto.DataList.ctor, ba, true);
                }
                catch(e){
                    GameDebuger.LogError("JsHelper.ParseProtoObj失败，错误信息：" + e.get_Message(), null);
                }
                this.LoadPreLoadStaticData();
            }
            else {
                UnityEngine.Debug.LogError$$Object("Load Local <DataListVersion> failed");
            }
        },
        CopyDataFromPackage: function (versionPath){
            if (AssetPipeline.FileHelper.IsExist(versionPath))
                return;
            UnityEngine.Debug.LogError$$Object("包外找不到DataListVersion数据,可能被恶意删除");
            var fileName = DataManager.GetFileName(Typeof(AppDto.DataListVersion.ctor).get_FullName());
            var datalistVerAsset = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$String$$Type("config/allstaticdata", fileName, null), UnityEngine.TextAsset.ctor);
            if (UnityEngine.Object.op_Inequality(datalistVerAsset, null)){
                AssetPipeline.FileHelper.WriteAllBytes$$String$$TextAsset(versionPath, datalistVerAsset);
                var $it57 = this._allStaticDataTypes.GetEnumerator();
                while ($it57.MoveNext()){
                    var type = $it57.get_Current();
                    fileName = DataManager.GetFileName(type.get_FullName());
                    var textAsset = As(AssetPipeline.AssetManager.get_Instance().LoadAsset$$String$$String$$Type("config/allstaticdata", fileName, null), UnityEngine.TextAsset.ctor);
                    if (UnityEngine.Object.op_Inequality(textAsset, null)){
                        AssetPipeline.FileHelper.WriteAllBytes$$String$$TextAsset(DataManager.get_StaticDataDir() + fileName, textAsset);
                    }
                }
            }
        },
        LoadPreLoadStaticData: function (){
            var caches = new System.Collections.Generic.Dictionary$2.ctor(System.Type.ctor, ByteArray.ctor);
            var $it58 = DataManager.PreLoadTypes.GetEnumerator();
            while ($it58.MoveNext()){
                var type = $it58.get_Current();
                var byteArray = AssetPipeline.FileHelper.LoadByteArrayFromFile(DataManager.GetDataPath(type.get_FullName()));
                if (byteArray != null){
                    caches.Add(type, byteArray);
                }
            }
            DataCache.Setup(caches);
        },
        UpdateStaticData: function (onPreLoadFinish, onAllFinish, logHandler, processHandler){
            if (DataManager._allDataLoadFinish){
                if (onAllFinish != null)
                    onAllFinish();
                return;
            }
            this._onPreLoadFinish = onPreLoadFinish;
            this._onAllLoadFinish = onAllFinish;
            this._loadingMsgHandler = logHandler;
            this._loadingProcessHandler = processHandler;
            DataCache.Dispose();
            this._oldDataVersionList = null;
            this._newDataVersionList = null;
            var versionPath = DataManager.GetDataPath(Typeof(AppDto.DataListVersion.ctor).get_FullName());
            var ba = AssetPipeline.FileHelper.LoadByteArrayFromFile(versionPath);
            if (ba != null){
                try{
                    this._oldDataVersionList = JsHelper.ParseJsz(AppDto.DataList.ctor, ba, true);
                }
                catch(e){
                    GameDebuger.LogError("JsHelper.ParseProtoObj失败，错误信息：" + e.get_Message(), null);
                }
            }
            else {
                UnityEngine.Debug.LogError$$Object("Load Local <DataListVersion> failed");
            }
            this.PrintInfo("获取静态数据版本信息，请稍后...");
            this.RequestStaticData(Typeof(AppDto.DataListVersion.ctor), $CreateAnonymousDelegate(this, function (byteArray){
                this.PrintInfo("读取版本信息成功，更新静态数据中...");
                this._newDataVersionBytes = byteArray;
                this._newDataVersionList = JsHelper.ParseJsz(AppDto.DataList.ctor, byteArray, true);
                this.CheckDataVersion();
            }), $CreateAnonymousDelegate(this, function (exception){
                UnityEngine.Debug.LogError$$Object("RequestStaticData: " + exception.get_Message());
                this.ShowLoadErrorMsg(Typeof(AppDto.DataListVersion.ctor));
            }));
        },
        RequestStaticData: function (type, onSuccess, onError){
            var url = this.GetStaticDataUrl(type);
            GameDebuger.Log("RequestStaticData " + url, null);
            HttpController.get_Instance().DownLoad(url, onSuccess, null, onError, false, 1, null);
        },
        CheckDataVersion: function (){
            if (this._newDataVersionList == null){
                UnityEngine.Debug.LogError$$Object("CheckDataVersion failed , newDataVersionList is null");
                return;
            }
            this._needUpdateQueue = new System.Collections.Generic.Queue$1.ctor(System.Type.ctor);
            this._needUpdatePreLoadCount = 0;
            this._needUpdateAllCount = 0;
            this._staticDataByteArrayDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Type.ctor, ByteArray.ctor, this._allStaticDataTypes.get_Count());
            if (this._oldDataVersionList != null){
                for (var i = 0; i < this._allStaticDataTypes.get_Count(); i++){
                    var type = this._allStaticDataTypes.get_Item$$Int32(i);
                    if (type == Typeof(AppDto.DataListVersion.ctor))
                        continue;
                    var typeName = type.get_Name();
                    var oldVersionInfo = this.GetOldDataListVersion(typeName);
                    var newVersionInfo = this.GetNewDataListVersion(typeName);
                    if (newVersionInfo != null){
                        if (oldVersionInfo != null && oldVersionInfo.ver == newVersionInfo.ver){
                            var byteArray = AssetPipeline.FileHelper.LoadByteArrayFromFile(DataManager.GetDataPath(type.get_FullName()));
                            if (byteArray != null){
                                var md5 = MD5Hashing.HashBytes$$ByteArray(byteArray);
                                if (System.String.Equals$$String$$String$$StringComparison(md5, newVersionInfo.ver, 1)){
                                    this._staticDataByteArrayDic.Add(type, byteArray);
                                }
                                else {
                                    this.EnqueueUpdateList(type);
                                }
                            }
                            else {
                                this.EnqueueUpdateList(type);
                            }
                        }
                        else {
                            this.EnqueueUpdateList(type);
                        }
                    }
                    else {
                        GameDebuger.LogError(System.String.Format$$String$$Object("游戏数据({0})不在NewDataListVersion数据表里，如果未使用该配置表，不受影响", typeName), null);
                    }
                }
            }
            else {
                for (var i = 0; i < this._allStaticDataTypes.get_Count(); i++){
                    var type = this._allStaticDataTypes.get_Item$$Int32(i);
                    if (type == Typeof(AppDto.DataListVersion.ctor))
                        continue;
                    this.EnqueueUpdateList(type);
                }
            }
            this._needUpdateAllCount = this._needUpdateQueue.get_Count();
            this._finishUpdateList = new System.Collections.Generic.List$1.ctor$$Int32(System.Type.ctor, this._needUpdateQueue.get_Count());
            GameDebuger.Log("CheckDataVersion needUpdateCount=" + this._needUpdateQueue.get_Count(), null);
            this.CheckOutUpdateQueue();
        },
        EnqueueUpdateList: function (type){
            if (DataManager.PreLoadTypes.Contains(type))
                this._needUpdatePreLoadCount++;
            this._needUpdateQueue.Enqueue(type);
        },
        CheckOutUpdateQueue: function (){
            if (this._needUpdateQueue.get_Count() > 0){
                if (this._finishUpdateList.get_Count() >= this._needUpdatePreLoadCount){
                    if (this._onPreLoadFinish != null){
                        var preloadBytes = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Type.ctor, ByteArray.ctor, DataManager.PreLoadTypes.get_Count());
                        var $it59 = DataManager.PreLoadTypes.GetEnumerator();
                        while ($it59.MoveNext()){
                            var type = $it59.get_Current();
                            try{
                                preloadBytes.Add(type, this._staticDataByteArrayDic.get_Item$$TKey(type));
                            }
                            catch(e){
                                GameDebuger.LogError(System.String.Format$$String$$Object$$Object("CheckOutUpdateQueue failed ,type:{1},Exception:{0}", e, type), null);
                            }
                        }
                        DataCache.Setup(preloadBytes);
                        this._onPreLoadFinish();
                        this._onPreLoadFinish = null;
                    }
                }
                var process = this._finishUpdateList.get_Count() / this._needUpdateAllCount;
                this.PrintLoadingPrecent(process);
                this.DownloadStaticData(this._needUpdateQueue.Dequeue());
            }
            else {
                this.OnFinishUpdateStaticData();
            }
        },
        DownloadStaticData: function (type){
            this._curUpdateType = type;
            var typeName = this._curUpdateType.get_Name();
            this.RequestStaticData(this._curUpdateType, $CreateAnonymousDelegate(this, function (byteArray){
                GameDebuger.Log("OnDownloadStaticDataSuccess: " + typeName + " " + byteArray.get_Length(), null);
                this._staticDataByteArrayDic.set_Item$$TKey(this._curUpdateType, byteArray);
                this._finishUpdateList.Add(this._curUpdateType);
                this.CheckOutUpdateQueue();
            }), $CreateAnonymousDelegate(this, function (e){
                GameDebuger.Log("OnDownloadStaticDataError: " + e.get_Message(), null);
                if (GameSetting.get_Release()){
                    this.ShowLoadErrorMsg(this._curUpdateType);
                }
                else {
                    GameDebuger.LogError(System.String.Format$$String$$Object("游戏数据({0})加载出错，可能会影响使用", typeName), null);
                    TipManager.AddTip(System.String.Format$$String$$Object("游戏数据({0})加载出错，可能会影响使用", typeName), false, false, "");
                    this.CheckOutUpdateQueue();
                }
            }));
        },
        ShowLoadErrorMsg: function (type){
            ExitGameScript.OpenReloginTipWindow(System.String.Format$$String$$Object("游戏数据({0})加载出错，请重试", type.get_Name()), false, false);
        },
        OnFinishUpdateStaticData: function (){
            this.SaveNewStaticData();
            DataCache.Setup(this._staticDataByteArrayDic);
            this.PrintLoadingPrecent(1);
            if (this._onPreLoadFinish != null)
                this._onPreLoadFinish();
            if (this._onAllLoadFinish != null)
                this._onAllLoadFinish();
            this._curUpdateType = null;
            this._finishUpdateList = null;
            this._needUpdateQueue = null;
            this._staticDataByteArrayDic = null;
            this._loadingMsgHandler = null;
            this._loadingProcessHandler = null;
            this._onPreLoadFinish = null;
            this._onAllLoadFinish = null;
            this._newDataVersionList = null;
            this._newDataVersionBytes = null;
            this._oldDataVersionList = null;
            DataManager._allDataLoadFinish = true;
            GameDebuger.Log("DataManager finish update StaticData", null);
        },
        SaveNewStaticData: function (){
            if (this._finishUpdateList != null){
                for (var i = 0; i < this._finishUpdateList.get_Count(); i++){
                    var type = this._finishUpdateList.get_Item$$Int32(i);
                    var ba = this._staticDataByteArrayDic.get_Item$$TKey(type);
                    if (ba != null){
                        AssetPipeline.FileHelper.WriteFileAsync(DataManager.GetDataPath(type.get_FullName()), ba, null, null);
                    }
                }
            }
            if (this._newDataVersionList != null){
                var filePath = DataManager.GetDataPath(Typeof(AppDto.DataListVersion.ctor).get_FullName());
                this._newDataVersionBytes.Compress();
                AssetPipeline.FileHelper.WriteFileAsync(filePath, this._newDataVersionBytes, null, null);
                this._newDataVersionBytes = null;
            }
        },
        GetOldDataListVersion: function (typeName){
            if (this._oldDataVersionList != null){
                for (var i = 0; i < this._oldDataVersionList.items.get_Count(); i++){
                    var version = Cast(this._oldDataVersionList.items.get_Item$$Int32(i), AppDto.DataListVersion.ctor);
                    if (version.type == typeName){
                        return version;
                    }
                }
            }
            return null;
        },
        GetNewDataListVersion: function (typeName){
            if (this._newDataVersionList != null){
                for (var i = 0; i < this._newDataVersionList.items.get_Count(); i++){
                    var version = Cast(this._newDataVersionList.items.get_Item$$Int32(i), AppDto.DataListVersion.ctor);
                    if (version.type == typeName){
                        return version;
                    }
                }
            }
            return null;
        },
        GetDataVersion: function (dataType){
            if (this._newDataVersionList != null){
                var typeName = dataType.get_Name();
                for (var i = 0; i < this._newDataVersionList.items.get_Count(); i++){
                    var version = Cast(this._newDataVersionList.items.get_Item$$Int32(i), AppDto.DataListVersion.ctor);
                    if (version.type == typeName){
                        return version.ver;
                    }
                }
            }
            return System.DateTime.get_Now().get_Ticks().toString();
        },
        GetStaticDataUrl: function (type){
            var url = System.String.Format$$String$$Object$$Object$$Object(GameSetting.DATA_SERVER + "/staticData/{0}/{1}.jsz?ver={2}", ServerManager.get_Instance().GetServerInfo().destServerId, type.get_Name(), this.GetDataVersion(type));
            return url;
        },
        PrintInfo: function (msg){
            if (this._loadingMsgHandler != null)
                this._loadingMsgHandler(msg);
            else
                GameDebuger.Log(msg, null);
        },
        PrintLoadingPrecent: function (basePercent){
            var percent = UnityEngine.Mathf.FloorToInt(basePercent * 100);
            this.PrintInfo(percent + "％");
            if (this._loadingProcessHandler != null){
                this._loadingProcessHandler(basePercent);
            }
        }
    }
};
JsTypes.push(DataManager);
var GameServerConfig = {
    fullname: "GameServerConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.serverInfoList = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
            this.areaInfoList = new System.Collections.Generic.List$1.ctor(AreaInfo.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameServerConfig);
var AreaInfo = {
    fullname: "AreaInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.name = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AreaInfo);
var GameServerInfo = {
    fullname: "GameServerInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.areaId = 0;
            this.dboState = 1;
            this.destServerId = 0;
            this.haVer = 0;
            this.host = null;
            this.name = null;
            this.needPayUrl = false;
            this.openTime = 0;
            this.port = 0;
            this.recommendType = 0;
            this.newServer = false;
            this.runState = 0;
            this.serverId = 0;
            this.serviceId = 0;
            System.Object.ctor.call(this);
        },
        GetServerUID: function (){
            return this.host + "|" + this.serviceId + "|" + this.serverId;
        },
        isTestServer: function (){
            return this.serverId == 1000;
        }
    }
};
JsTypes.push(GameServerInfo);
var GameServerInfoManager = {
    fullname: "GameServerInfoManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            GameServerInfoManager._gameServerConfigs = null;
            GameServerInfoManager._recommendServerList = null;
            GameServerInfoManager.RefreshTime = 10;
            GameServerInfoManager.RefreshServerListTimer = "RefreshServerList";
            GameServerInfoManager.CanRefreshServerList = true;
        },
        ServerList$$: "System.Collections.Generic.List`1[[GameServerInfo]]",
        get_ServerList: function (){
            return GameServerInfoManager._gameServerConfigs.serverInfoList;
        },
        GetRecommendServerList: function (needRefresh){
            if (GameServerInfoManager._recommendServerList == null || needRefresh){
                if (GameServerInfoManager._recommendServerList == null){
                    GameServerInfoManager._recommendServerList = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
                }
                else {
                    GameServerInfoManager._recommendServerList.Clear();
                }
                var serveromInfos = GameServerInfoManager._gameServerConfigs.serverInfoList;
                var tRecomentList = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
                var hasRoleList = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
                var lastServerId = UnityEngine.PlayerPrefs.GetString$$String(GameSetting.get_LastServerPrefsName());
                var lastSelect = null;
                var lestServerInfoList = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
                for (var i = 0; i < serveromInfos.get_Count(); i++){
                    var serverInfo = serveromInfos.get_Item$$Int32(i);
                    if (serverInfo.dboState == 0){
                        continue;
                    }
                    if (lastServerId == serverInfo.GetServerUID()){
                        lastSelect = serverInfo;
                    }
                    else if (ServerManager.get_Instance().GetPlayersAtServer(serverInfo.serverId).get_Count() > 0){
                        hasRoleList.Add(serverInfo);
                    }
                    else if (serverInfo.recommendType > 0){
                        tRecomentList.Add(serverInfo);
                    }
                    else {
                        lestServerInfoList.Add(serverInfo);
                    }
                }
                hasRoleList.Sort$$Comparison$1(function (a, b){
                    var aRecentLoginTime = ServerManager.get_Instance().GetPlayerRecentLoginTime(b.serverId);
                    var bRecentLoginTime = ServerManager.get_Instance().GetPlayerRecentLoginTime(a.serverId);
                    return aRecentLoginTime.CompareTo$$Int64(bRecentLoginTime);
                });
                new RandomHelper.ctor().GetRandomArray$1(GameServerInfo.ctor, tRecomentList);
                lestServerInfoList.Sort$$Comparison$1(function (a, b){
                    return b.openTime.CompareTo$$Int64(a.openTime);
                });
                if (lastSelect != null){
                    GameServerInfoManager._recommendServerList.Add(lastSelect);
                }
                GameServerInfoManager._recommendServerList.AddRange(hasRoleList);
                GameServerInfoManager._recommendServerList.AddRange(tRecomentList);
                GameServerInfoManager._recommendServerList.AddRange(lestServerInfoList);
                var limitCount = 8;
                if (GameServerInfoManager._recommendServerList.get_Count() > limitCount){
                    GameServerInfoManager._recommendServerList.RemoveRange(limitCount, GameServerInfoManager._recommendServerList.get_Count() - limitCount);
                }
            }
            return GameServerInfoManager._recommendServerList;
        },
        Setup: function (onFinish, onError){
            if (GameSetting.get_TestServerMode()){
                var textAsset = As(UnityEngine.Resources.Load$$String("Setting/LocalServerConfig"), UnityEngine.TextAsset.ctor);
                if (UnityEngine.Object.op_Inequality(textAsset, null)){
                    var config = JsHelper.ToObject(GameServerConfig.ctor, textAsset.get_text());
                    if (config != null){
                        GameServerInfoManager._gameServerConfigs = config;
                        if (onFinish != null)
                            onFinish();
                    }
                    else {
                        if (onError != null)
                            onError("加载服务器列表失败");
                    }
                }
                else {
                    if (onError != null)
                        onError("加载< LocalServerConfig >失败");
                }
            }
            else {
                TalkingDataHelper.OnEventSetp$$String("GameServerInfoManager/Setup");
                GameStaticConfigManager.get_Instance().LoadStaticConfig("staticServerList.txt" /* GameStaticConfigManager.Type_StaticServerList */, function (json){
                    var config = JsHelper.ToObject(GameServerConfig.ctor, json);
                    if (config != null){
                        GameServerInfoManager._gameServerConfigs = config;
                        if (onFinish != null)
                            onFinish();
                    }
                    else {
                        if (onError != null)
                            onError("加载服务器列表失败");
                    }
                }, onError);
            }
        },
        AdjustGameServerConfigs: function (gameServerConfig){
            for (var i = 0; i < gameServerConfig.serverInfoList.get_Count(); i++){
                var serverInfo = gameServerConfig.serverInfoList.get_Item$$Int32(i);
                if (serverInfo.destServerId != serverInfo.serverId){
                    var destServerInfo = GameServerInfoManager.GetServerInfoWithDestServerId(gameServerConfig, serverInfo.destServerId);
                    serverInfo.serviceId = destServerInfo.serviceId;
                    serverInfo.host = destServerInfo.host;
                    serverInfo.port = destServerInfo.port;
                    serverInfo.haVer = destServerInfo.haVer;
                    serverInfo.runState = destServerInfo.runState;
                    serverInfo.dboState = destServerInfo.dboState;
                }
            }
        },
        GetServerInfoWithDestServerId: function (gameServerConfig, destServerId){
            for (var i = 0; i < gameServerConfig.serverInfoList.get_Count(); i++){
                var serverInfo = gameServerConfig.serverInfoList.get_Item$$Int32(i);
                if (serverInfo.destServerId == serverInfo.serverId && serverInfo.destServerId == destServerId){
                    return serverInfo;
                }
            }
            return null;
        },
        InitDefaultServer: function (){
            var list = GameServerInfoManager.GetRecommendServerList(false);
            if (list.get_Count() > 0){
                UnityEngine.PlayerPrefs.SetString(GameSetting.get_LastServerPrefsName(), list.get_Item$$Int32(0).GetServerUID());
            }
        },
        GetServerInfoByName: function (name){
            if (System.String.IsNullOrEmpty(name)){
                return null;
            }
            var splits = name.Split$$Char$Array(["|"]);
            for (var i = 0; i < GameServerInfoManager._gameServerConfigs.serverInfoList.get_Count(); i++){
                var serverInfo = GameServerInfoManager._gameServerConfigs.serverInfoList.get_Item$$Int32(i);
                if (splits.length == 2){
                    if (serverInfo.host == splits[0] && serverInfo.serviceId == System.Int32.Parse$$String(splits[1])){
                        return serverInfo;
                    }
                }
                else if (splits.length == 3){
                    if (serverInfo.host == splits[0] && serverInfo.serviceId == System.Int32.Parse$$String(splits[1]) && serverInfo.serverId == System.Int32.Parse$$String(splits[2])){
                        return serverInfo;
                    }
                }
            }
            return null;
        },
        GetServerInfoById: function (serverId){
            for (var i = 0; i < GameServerInfoManager._gameServerConfigs.serverInfoList.get_Count(); i++){
                var serverInfo = GameServerInfoManager._gameServerConfigs.serverInfoList.get_Item$$Int32(i);
                if (serverInfo.serverId == serverId)
                    return serverInfo;
            }
            return null;
        },
        GetServerName: function (serverId){
            var tServerName = System.String.Empty;
            var tGameServerInfo = GameServerInfoManager.GetServerInfoById(serverId);
            if (null != tGameServerInfo)
                tServerName = tGameServerInfo.name;
            if (System.String.IsNullOrEmpty(tServerName)){
                if (serverId >= 4000)
                    tServerName = "安卓&越狱";
                else
                    tServerName = "iOS";
            }
            return tServerName;
        },
        GetAreaName: function (areaId){
            if (areaId == 0)
                return "推荐";
            for (var i = 0; i < GameServerInfoManager._gameServerConfigs.areaInfoList.get_Count(); i++){
                if (GameServerInfoManager._gameServerConfigs.areaInfoList.get_Item$$Int32(i).id == areaId){
                    return GameServerInfoManager._gameServerConfigs.areaInfoList.get_Item$$Int32(i).name;
                }
            }
            return "区名";
        },
        GetOpenServerList: function (){
            var list = new System.Collections.Generic.List$1.ctor(GameServerInfo.ctor);
            for (var i = 0,len = GameServerInfoManager._gameServerConfigs.serverInfoList.get_Count(); i < len; i++){
                var serverInfo = GameServerInfoManager._gameServerConfigs.serverInfoList.get_Item$$Int32(i);
                if (serverInfo.dboState != 0){
                    list.Add(serverInfo);
                }
            }
            return list;
        },
        CheckSameDestServer: function (serverId1, serverId2){
            if (serverId1 == 0 || serverId2 == 0)
                return true;
            else {
                var serverInfo1 = GameServerInfoManager.GetServerInfoById(serverId1);
                var serverInfo2 = GameServerInfoManager.GetServerInfoById(serverId2);
                if (serverInfo1 != null && serverInfo2 != null){
                    return serverInfo1.destServerId == serverInfo2.destServerId;
                }
                else {
                    return serverId1 == serverId2;
                }
            }
        },
        RequestDynamicServerList: function (version, channel, platform, onFinish, onError){
            var url = GameSetting.SSO_SERVER + "/gssoc/gameserver/list.json?version={0}&channel={1}&platform={2}";
            url = System.String.Format$$String$$Object$$Object$$Object(url, version, channel, platform);
            ServiceProviderManager.RequestJson(url, "RequestDynamicServerList", function (json){
                var dynamicServerInfos = JsHelper.ToCollection(System.Collections.Generic.List$1.ctor, DynamicServerInfo.ctor, json);
                if (dynamicServerInfos != null){
                    GameServerInfoManager.UpdateServerInfo(dynamicServerInfos);
                    GameServerInfoManager.AdjustGameServerConfigs(GameServerInfoManager._gameServerConfigs);
                    if (onFinish != null)
                        onFinish();
                }
                else {
                    if (onError != null)
                        onError();
                }
            }, false, true, null);
        },
        UpdateServerInfo: function (dynamicServerInfos){
            for (var i = 0; i < GameServerInfoManager._gameServerConfigs.serverInfoList.get_Count(); i++){
                var gameServerInfo = GameServerInfoManager.get_ServerList().get_Item$$Int32(i);
                var dynamicServerInfo = null;
                for (var j = 0; j < dynamicServerInfos.get_Count(); j++){
                    if (gameServerInfo.serverId == dynamicServerInfos.get_Item$$Int32(j).serverId){
                        dynamicServerInfo = dynamicServerInfos.get_Item$$Int32(j);
                        break;
                    }
                }
                if (dynamicServerInfo != null){
                    gameServerInfo.host = dynamicServerInfo.host;
                    gameServerInfo.port = dynamicServerInfo.port;
                    gameServerInfo.runState = dynamicServerInfo.runState;
                    var openDate = new System.DateTime.ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32(1970, 1, 1, 0, 0, 0, 0).AddTicks(gameServerInfo.openTime * 10000).ToLocalTime();
                    var span = System.DateTime.op_Subtraction$$DateTime$$DateTime(System.DateTime.get_Now(), openDate);
                    gameServerInfo.newServer = span.get_Days() < 14;
                    gameServerInfo.dboState = 1;
                }
                else {
                    gameServerInfo.dboState = 0;
                }
            }
        },
        SetupRefreshTimer: function (){
            JSTimer.get_Instance().SetupCoolDown("RefreshServerList" /* RefreshServerListTimer */, 10 /* RefreshTime */, null, function (){
                GameServerInfoManager.CanRefreshServerList = true;
            }, 0.1, false);
        },
        RefreshServerList: function (){
            GameServerInfoManager.CanRefreshServerList = false;
            GameServerInfoManager.RequestDynamicServerList(AppGameVersion.get_SpVersionCode(), GameSetting.Channel, GameSetting.get_PlatformTypeId(), null, null);
            GameServerInfoManager.SetupRefreshTimer();
        },
        Dispose: function (){
            GameServerInfoManager.CanRefreshServerList = true;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GameServerInfoManager);
var BaseDtoListener$1 = {
    fullname: "BaseDtoListener$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["MessageProcessor"],
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            System.Object.ctor.call(this);
        },
        getEventType: function (){
            return Typeof(this.T).get_FullName();
        },
        ProcessMsg: function (message){
            this.HandleNotify(As(message, this.T));
        },
        Dispose: function (){
            this.OnDispose();
        },
        OnDispose: function (){
        }
    }
};
JsTypes.push(BaseDtoListener$1);
var GenericNotifyListener$1 = {
    fullname: "GenericNotifyListener$1",
    baseTypeName: "BaseDtoListener$1",
    staticDefinition: {
        cctor: function (T){
            GenericNotifyListener$1._instance = null;
            GenericNotifyListener$1._stream = null;
        },
        Instance$$: "GenericNotifyListener`1[[`0]]",
        get_Instance: function (){
            return GenericNotifyListener$1.Create();
        },
        set_Instance: function (value){
            GenericNotifyListener$1._instance = value;
        },
        Create: function (){
            if (GenericNotifyListener$1._instance == null){
                GenericNotifyListener$1._stream = new UniRx.Subject$1.ctor(this.T);
                GenericNotifyListener$1._instance = new GenericNotifyListener$1.ctor(this.T);
            }
            return GenericNotifyListener$1._instance;
        },
        Stream$$: "UniRx.IObservableExpand`1[[`0]]",
        get_Stream: function (){
            if (GenericNotifyListener$1._stream == null)
                GenericNotifyListener$1._stream = new UniRx.Subject$1.ctor(this.T);
            return GenericNotifyListener$1._stream;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            BaseDtoListener$1.ctor.call(this, this.T);
        },
        OnDispose: function (){
            GenericNotifyListener$1._stream = UniRx.SubjectExtensions.CloseOnceNull$1(this.T, GenericNotifyListener$1._stream);
        },
        HandleNotify: function (notify){
            GameUtil.LOG_Notify(System.String.Format$$String$$Object("HandleNotify------------------{0}", notify.GetType()));
            GenericNotifyListener$1._stream.OnNext(notify);
        }
    }
};
JsTypes.push(GenericNotifyListener$1);
var MessageProcessor = {
    fullname: "MessageProcessor",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(MessageProcessor);
var MultipleNotifyListener = {
    fullname: "MultipleNotifyListener",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._listener = null;
            this._notifyClass = null;
            System.Object.ctor.call(this);
            this._listener = new System.Collections.Generic.List$1.ctor(NotifyHandler.ctor);
            this._notifyClass = new System.Collections.Generic.List$1.ctor(System.Type.ctor);
        },
        AddNotify: function (notifyClass){
            this._notifyClass.Add(notifyClass);
        },
        Start: function (onHandleNotify){
            for (var i = 0; i < this._notifyClass.get_Count(); i++){
                var notifyClass = this._notifyClass.get_Item$$Int32(i);
                this._listener.Add(NotifyListenerRegister.AddNotifyHandler(notifyClass, onHandleNotify));
            }
            this._notifyClass.Clear();
        },
        Stop: function (){
            if (this._listener != null){
                for (var i = 0; i < this._listener.get_Count(); i++){
                    var handler = this._listener.get_Item$$Int32(i);
                    NotifyListenerRegister.RemoveNotifyHandler(handler);
                }
            }
            this._listener = null;
            this._notifyClass = null;
        }
    }
};
JsTypes.push(MultipleNotifyListener);
var NotifyHandler = {
    fullname: "NotifyHandler",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["MessageProcessor"],
    Kind: "Class",
    definition: {
        ctor: function (type, handler){
            this._type = null;
            this._handler = null;
            System.Object.ctor.call(this);
            this._type = type;
            this._handler = handler;
        },
        getEventType: function (){
            return this._type.get_FullName();
        },
        ProcessMsg: function (message){
            if (this._handler != null)
                this._handler(message);
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(NotifyHandler);
var ServiceRequestAction = {
    fullname: "ServiceRequestAction",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ServiceRequestAction._lockRequestKeySet = new System.Collections.Generic.HashSet$1.ctor(System.String.ctor);
            ServiceRequestAction.ServerRequestCheck = true;
            ServiceRequestAction.ServerRequestDelay = false;
            ServiceRequestAction.ServerRequestLock = true;
            ServiceRequestAction.SimulateNet = false;
        },
        GenerateRequestKey: function (request, withParams){
            var key = request.action;
            if (withParams){
                for (var i = 0; i < request.xparams.get_Count(); i++){
                    key += request.xparams.get_Item$$Int32(i);
                }
            }
            return key;
        },
        AddRequestKey: function (request, withParams){
            var key = ServiceRequestAction.GenerateRequestKey(request, withParams);
            if (ServiceRequestAction._lockRequestKeySet.Contains(key)){
                return "";
            }
            ServiceRequestAction._lockRequestKeySet.Add(key);
            return key;
        },
        requestServer$$GeneralRequest$$RequestLockType$$OnRequestSuccess$$OnRequestError: function (request, lockType, onSuccess, onRequestError){
            if (ServiceRequestAction.ServerRequestLock == false || onSuccess == null){
                lockType = ServiceRequestAction.RequestLockType.NoLock;
            }
            if (onSuccess != null || onRequestError != null){
                request.needResponse = true;
            }
            else {
                request.needResponse = false;
            }
            var action = new ServiceRequestAction.ctor(request);
            if (onSuccess != null){
                if (lockType == ServiceRequestAction.RequestLockType.LockAction || lockType == ServiceRequestAction.RequestLockType.LockActionAndParam || lockType == ServiceRequestAction.RequestLockType.LockScreen){
                    var key = ServiceRequestAction.AddRequestKey(request, lockType != ServiceRequestAction.RequestLockType.LockAction);
                    if (System.String.IsNullOrEmpty(key)){
                        return;
                    }
                    action._lockKey = key;
                }
            }
            if (onSuccess != null)
                action._onSuccess = onSuccess;
            if (onRequestError != null)
                action._onError = onRequestError;
            var tip = "";
            if (lockType == ServiceRequestAction.RequestLockType.LockScreen){
                tip = ServiceRequestAction.GenerateRequestKey(request, true);
            }
            action.ShowTips(tip);
            if (SocketManager.IsOnLink){
                if (ServiceRequestAction.ServerRequestDelay){
                    JSTimer.get_Instance().SetupCoolDown(ServiceRequestAction.GenerateRequestKey(action.request, true) + UnityEngine.Random.Range$$Int32$$Int32(1, 9999999), 3, null, $CreateDelegate(action, action.Send), 0.1, false);
                }
                else {
                    action.Send();
                }
            }
            else {
                action.onTimeout();
            }
        },
        requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError: function (request, tip, onSuccess, onRequestError){
            var lockType = ServiceRequestAction.RequestLockType.NoLock;
            if (System.String.IsNullOrEmpty(tip)){
                lockType = ServiceRequestAction.RequestLockType.LockActionAndParam;
            }
            else {
                lockType = ServiceRequestAction.RequestLockType.LockScreen;
            }
            ServiceRequestAction.requestServer$$GeneralRequest$$RequestLockType$$OnRequestSuccess$$OnRequestError(request, lockType, onSuccess, onRequestError);
        },
        requestServerWithSimulate: function (request, tip, onSuccess, onRequestError){
            if (ServiceRequestAction.SimulateNet)
                onSuccess(null);
            else
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(request, tip, onSuccess, onRequestError);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (request){
            this.request = null;
            this._lockKey = null;
            this._onError = null;
            this._onSuccess = null;
            this._tip = null;
            this._SendTimeStamp = 0;
            System.Object.ctor.call(this);
            this.request = request;
        },
        SendTimeStamp$$: "System.Int64",
        get_SendTimeStamp: function (){
            return this._SendTimeStamp;
        },
        set_SendTimeStamp: function (value){
            this._SendTimeStamp = value;
        },
        ShowTips: function (tip){
            this._tip = tip;
            if (!System.String.IsNullOrEmpty(tip)){
                if (!GameSetting.get_Release()){
                    RequestLoadingTip.Show(this._tip, true, false, 0);
                }
            }
        },
        HideTips: function (){
            ServiceRequestAction._lockRequestKeySet.Remove(this._lockKey);
            if (!System.String.IsNullOrEmpty(this._tip)){
                if (!GameSetting.get_Release()){
                    RequestLoadingTip.Stop(this._tip);
                }
            }
        },
        Send: function (){
            if (this._onSuccess != null || this._onError != null){
                this.set_SendTimeStamp(SystemTimeManager.get_Instance().GetUTCTimeStamp());
                ServiceRequestActionMgr.Add(this);
                GameDebuger.TODO(" ModelManager.GameAnaly.StartRequestAction(request.action, request.serial);");
                SocketManager.get_Instance().SendRequest(this.request);
            }
            else {
                this.request.serial = -1 /* -1 */;
                SocketManager.get_Instance().SendRequest(this.request);
            }
        },
        onSuccess: function (generalResponse){
            this.HideTips();
            if (this._onSuccess != null)
                this._onSuccess(generalResponse);
        },
        onError: function (errorResponse){
            this.HideTips();
            if (this._onError != null){
                this._onError(errorResponse);
            }
            else {
                TipManager.AddTopTip(errorResponse.message, "");
            }
            GameDebuger.Log(AppStringHelper.WrapColorWithLog(System.String.Format$$String$$Object$Array("ErrorResponse: action={0} error={1} id={2} serialId={3}", [this.request.action, errorResponse.message, errorResponse.id, errorResponse.serialId]), "yellow"), null);
        },
        onTimeout: function (){
            this.HideTips();
            GameDebuger.Log("onTimeout: action=" + this.request.action + " error=" + "请求超时", null);
            var errorResponse = new AppDto.ErrorResponse.ctor();
            errorResponse.id = -1 /* -1 */;
            errorResponse.message = "请求超时";
            if (this._onError != null){
                this._onError(errorResponse);
            }
        }
    }
};
JsTypes.push(ServiceRequestAction);
var ServiceRequestActionMgr = {
    fullname: "ServiceRequestActionMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ServiceRequestActionMgr._requestActionDic = null;
            ServiceRequestActionMgr._mSerialNum = 1;
        },
        Setup: function (){
            ServiceRequestActionMgr._requestActionDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, ServiceRequestAction.ctor);
        },
        Remove: function (serial){
            if (ServiceRequestActionMgr._requestActionDic == null || !ServiceRequestActionMgr._requestActionDic.ContainsKey(serial))
                return null;
            var requestAction = ServiceRequestActionMgr._requestActionDic.get_Item$$TKey(serial);
            ServiceRequestActionMgr._requestActionDic.Remove(serial);
            return requestAction;
        },
        Add: function (requestAction){
            if (requestAction == null)
                return;
            ServiceRequestActionMgr.CheckOutTimeoutAction();
            var serialNum = ServiceRequestActionMgr._mSerialNum++;
            if (serialNum == 2147483647 /* Int32.MaxValue */){
                ServiceRequestActionMgr._mSerialNum = 1;
            }
            requestAction.request.serial = serialNum;
            ServiceRequestActionMgr._requestActionDic.set_Item$$TKey(serialNum, requestAction);
        },
        CheckOutTimeoutAction: function (){
            var checkTime = SystemTimeManager.get_Instance().GetUTCTimeStamp() - 30000;
            var removeKeys = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            var $it60 = ServiceRequestActionMgr._requestActionDic.GetEnumerator();
            while ($it60.MoveNext()){
                var item = $it60.get_Current();
                var serial = item.get_Key();
                var requestAction = item.get_Value();
                if (checkTime > requestAction.get_SendTimeStamp()){
                    removeKeys.Add(serial);
                    GameDebuger.Log(System.String.Format$$String$$Object$$Object("Remove TimeOut action={0} serial={1}", requestAction.request.action, serial), null);
                }
            }
            if (removeKeys.get_Count() > 0){
                for (var i = 0; i < removeKeys.get_Count(); i++){
                    ServiceRequestActionMgr._requestActionDic.Remove(removeKeys.get_Item$$Int32(i));
                }
            }
        },
        CleanAllCallback: function (withTimeout){
            if (withTimeout){
                ServiceRequestActionMgr.CheckOutTimeoutAction();
            }
            if (ServiceRequestActionMgr._requestActionDic != null){
                if (withTimeout){
                    var $it61 = ServiceRequestActionMgr._requestActionDic.get_Values().GetEnumerator();
                    while ($it61.MoveNext()){
                        var callBack = $it61.get_Current();
                        callBack.onTimeout();
                    }
                }
                ServiceRequestActionMgr._requestActionDic.Clear();
            }
        },
        ResetSerialNum: function (){
            ServiceRequestActionMgr._mSerialNum = 1;
            GameDebuger.TODO(" ModelManager.GameAnaly.Dispose();");
        },
        Dispose: function (){
            ServiceRequestActionMgr.CleanAllCallback(true);
            ServiceRequestActionMgr.ResetSerialNum();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ServiceRequestActionMgr);
var NotifyListenerRegister = {
    fullname: "NotifyListenerRegister",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            NotifyListenerRegister.HasInited = false;
            NotifyListenerRegister._hasAAddLoginQueueNotifyListener = false;
        },
        Setup: function (){
            if (NotifyListenerRegister.HasInited){
                return;
            }
            NotifyListenerRegister.HasInited = true;
            NotifyListenerRegister.AddListener(new VideoListener.ctor());
            NotifyListenerRegister.AddListener(new DemoVideoListener.ctor());
            NotifyListenerRegister.AddListener(new BattleOrderListener.ctor());
            NotifyListenerRegister.AddListener(new GameServerTimeDtoListener.ctor());
            NotifyListenerRegister.AddListener(new SceneDtoListener.ctor());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(GenericNotifyListener$1.Create());
            NotifyListenerRegister.AddListener(new MailNotifyListener.ctor());
        },
        AddLoginQueueNotifyListener: function (){
            if (!NotifyListenerRegister._hasAAddLoginQueueNotifyListener){
                NotifyListenerRegister._hasAAddLoginQueueNotifyListener = true;
                SocketManager.get_Instance().AddMessageProcessor(new QueueDtoListener.ctor());
            }
        },
        AddListener: function (lis){
            SocketManager.get_Instance().AddMessageProcessor(lis);
        },
        AddNotifyHandler: function (type, onHandleNotify){
            if (type == null || onHandleNotify == null)
                return null;
            var notifyHandler = new NotifyHandler.ctor(type, onHandleNotify);
            NotifyListenerRegister.AddListener(notifyHandler);
            return notifyHandler;
        },
        RemoveNotifyHandler: function (listener){
            listener.Dispose();
            SocketManager.get_Instance().RemoveMessageProcessor(listener);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(NotifyListenerRegister);
var BattleOrderListener = {
    fullname: "BattleOrderListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.CommandNotify.ctor);
        },
        HandleNotify: function (notify){
            if (ModelManager.get_BattleDemo().IsSameBattle(notify.battleId))
                MonsterManager.get_Instance().showOrder(notify);
        }
    }
};
JsTypes.push(BattleOrderListener);
var DemoVideoListener = {
    fullname: "DemoVideoListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.DemoVideo.ctor);
        },
        HandleNotify: function (notify){
            BattleNetworkManager.get_Instance().HandleDemoVideo(notify);
        }
    }
};
JsTypes.push(DemoVideoListener);
var VideoListener = {
    fullname: "VideoListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.Video.ctor);
        },
        HandleNotify: function (notify){
            BattleManager.get_Instance().PlayBattle(notify, 0, false, false);
        }
    }
};
JsTypes.push(VideoListener);
var MailNotifyListener = {
    fullname: "MailNotifyListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.PlayerMailDto.ctor);
        },
        HandleNotify: function (notify){
            EmailContentDataMgr.get_Instance().AddMailFromNotify(notify);
        }
    }
};
JsTypes.push(MailNotifyListener);
var SceneDtoListener = {
    fullname: "SceneDtoListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.SceneDto.ctor);
        },
        HandleNotify: function (notify){
            GameDebuger.TODO("if (TeamModel.ShowDebugInfo)\n        {\n            GameDebuger.Log(string.Format(\'SceneDto sceneId:{0} 场景名:{1} 场景人数:{2}\', notify.id, notify.name, notify.playerDtos.Count).WrapColorWithLog());\n        }");
            WorldManager.get_Instance().EnterWithSceneDto(notify);
        }
    }
};
JsTypes.push(SceneDtoListener);
var GameServerTimeDtoListener = {
    fullname: "GameServerTimeDtoListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.GameServerTimeDto.ctor);
        },
        HandleNotify: function (notify){
            SystemTimeManager.get_Instance().SyncServerTime(notify.time);
        }
    }
};
JsTypes.push(GameServerTimeDtoListener);
var QueueDtoListener = {
    fullname: "QueueDtoListener",
    baseTypeName: "BaseDtoListener$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            BaseDtoListener$1.ctor.call(this, AppDto.QueueDto.ctor);
        },
        HandleNotify: function (notify){
            LoginManager.get_Instance().UpdateLoginQueueData(notify);
        }
    }
};
JsTypes.push(QueueDtoListener);
var NpcViewPool = {
    fullname: "NpcViewPool",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (_master){
            this.master = null;
            this.npcViewPool = null;
            System.Object.ctor.call(this);
            this.master = _master;
            this.npcViewPool = new System.Collections.Generic.Queue$1.ctor$$Int32(UnityEngine.GameObject.ctor, GameDisplayManager.MaxNpcViewPoolCount);
        },
        UsePool$$: "System.Boolean",
        get_UsePool: function (){
            return WorldView.UsePool;
        },
        CreateNpcViewGo: function (){
            var _unitGo = NGUITools.AddChild$$GameObject(LayerManager.get_Root().WorldActors);
            var checker = GameObjectExt.GetMissingComponent$1(ModelVisibleChecker.ctor, _unitGo);
            return checker;
        },
        DespawnPlayerView: function (npcView){
            if (UnityEngine.Object.op_Equality(npcView, null))
                return;
            if (this.get_UsePool() && this.npcViewPool.get_Count() < GameDisplayManager.MaxNpcViewPoolCount){
                npcView.SetActive(false);
                npcView.set_name("NPCViewX");
                this.npcViewPool.Enqueue(npcView);
            }
            else {
                UnityEngine.Object.Destroy$$Object(npcView);
            }
        },
        SpawnPlayerView: function (){
            var modelVisibleChecker = null;
            if (this.npcViewPool.get_Count() > 0){
                var go = this.npcViewPool.Dequeue();
                modelVisibleChecker = GameObjectExt.GetMissingComponent$1(ModelVisibleChecker.ctor, go);
            }
            else {
                modelVisibleChecker = this.CreateNpcViewGo();
            }
            modelVisibleChecker.get_gameObject().SetActive(true);
            return modelVisibleChecker;
        }
    }
};
JsTypes.push(NpcViewPool);
var PlayerViewPool = {
    fullname: "PlayerViewPool",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (_master){
            this._playerViewPool = null;
            this.master = null;
            System.Object.ctor.call(this);
            this._playerViewPool = new System.Collections.Generic.Queue$1.ctor$$Int32(PlayerView.ctor, GameDisplayManager.MaxPlayerDataCount);
            this.master = _master;
        },
        UsePool$$: "System.Boolean",
        get_UsePool: function (){
            return WorldView.UsePool;
        },
        CreatePlayerViewGo: function (){
            var playerGo = new UnityEngine.GameObject.ctor();
            GameObjectExt.AddPoolChild(LayerManager.get_Root().WorldActors, playerGo, 0, 0, 0);
            playerGo.set_tag("Player" /* GameTag.Tag_Player */);
            playerGo.get_transform().set_localEulerAngles(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 180, 0));
            var characterController = GameObjectExt.GetMissingComponent$1(UnityEngine.CharacterController.ctor, playerGo);
            characterController.set_center(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 0.75, 0));
            characterController.set_radius(0.4);
            characterController.set_height(2);
            return playerGo;
        },
        DespawnPlayerView: function (playerView){
            if (UnityEngine.Object.op_Equality(playerView, null))
                return;
            if (playerView.get_IsHero()){
                playerView.SetUnitActive(false);
                return;
            }
            if (this.get_UsePool() && this._playerViewPool.get_Count() < GameDisplayManager.MaxPlayerDataCount){
                playerView.SetUnitActive(false);
                playerView.get_cachedGameObject().set_name("playerViewX");
                this._playerViewPool.Enqueue(playerView);
            }
            else {
                UnityEngine.Object.Destroy$$Object(playerView.get_cachedGameObject());
            }
        },
        SpawnPlayerView: function (){
            if (this._playerViewPool.get_Count() > 0){
                var playerView = this._playerViewPool.Dequeue();
                playerView.SetUnitActive(true);
                return playerView;
            }
            var playerGo = this.CreatePlayerViewGo();
            return GameObjectExt.GetMissingComponent$1(PlayerView.ctor, playerGo);
        }
    }
};
JsTypes.push(PlayerViewPool);
var PathologicalGames$PoolManagerConfig = {
    fullname: "PathologicalGames.PoolManagerConfig",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            PathologicalGames.PoolManagerConfig.World2DMaPoolOption = (function (){
                var $v34 = new AssetPipeline.PrefabPoolOption.ctor();
                $v34.preloadAmount = 30;
                $v34.preloadTime = true;
                $v34.preloadFrames = 10;
                $v34.cullAbove = 50;
                $v34.cullDelay = 10;
                $v34.cullDespawned = false;
                $v34.cullMaxPerPass = 5;
                $v34.limitFIFO = false;
                return $v34;
            }).call(this);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PathologicalGames$PoolManagerConfig);
var UIModulePool = {
    fullname: "UIModulePool",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            UIModulePool.CheckTaskName = "CheckModuleTime";
            UIModulePool.CheckFrequence = 1;
            UIModulePool.Capacity = 5;
            UIModulePool._instance = null;
        },
        Instance$$: "UIModulePool",
        get_Instance: function (){
            UIModulePool.CreateInstance();
            return UIModulePool._instance;
        },
        CreateInstance: function (){
            if (UnityEngine.Object.op_Equality(UIModulePool._instance, null)){
                var go = new UnityEngine.GameObject.ctor$$String("_UIModulePool");
                UnityEngine.Object.DontDestroyOnLoad(go);
                UIModulePool._instance = go.AddComponent$1(UIModulePool.ctor);
                UIModulePool._instance.Init();
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._moduleDict = null;
            this._neverDestroyModuleDict = null;
            this._root = null;
            this._tempCheckList = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Init: function (){
            this._root = this.get_transform();
            this._tempCheckList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this._moduleDict = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UIModulePool.ModuleInstance.ctor);
            this._neverDestroyModuleDict = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UnityEngine.GameObject.ctor);
            this.SetupTimer();
        },
        SetupTimer: function (){
            if (!JSTimer.get_Instance().IsTimerExist("CheckModuleTime" /* CheckTaskName */)){
                JSTimer.get_Instance().SetupTimer("CheckModuleTime" /* CheckTaskName */, $CreateDelegate(this, this.CheckModuleTime), 1, false);
            }
        },
        Dispose: function (){
            JSTimer.get_Instance().CancelCd("CheckModuleTime" /* CheckTaskName */);
            this.Clear();
            if (UnityEngine.Object.op_Inequality(this._root, null)){
                UnityEngine.Object.Destroy$$Object(this._root.get_gameObject());
                UIModulePool._instance = null;
            }
        },
        Clear: function (){
            var $it62 = this._moduleDict.GetEnumerator();
            while ($it62.MoveNext()){
                var moduleInstance = $it62.get_Current();
                this.DestroyModule(moduleInstance.get_Value().Module, true);
            }
            this._moduleDict.Clear();
            var $it63 = this._neverDestroyModuleDict.GetEnumerator();
            while ($it63.MoveNext()){
                var go = $it63.get_Current();
                this.DestroyModule(go.get_Value(), true);
            }
            this._neverDestroyModuleDict.Clear();
        },
        OpenModule: function (moduleName){
            this.CheckSharePrefabModule(moduleName);
            if (this._moduleDict.ContainsKey(moduleName)){
                var module = this._moduleDict.get_Item$$TKey(moduleName);
                this._moduleDict.Remove(moduleName);
                module.Module.SetActive(true);
                return module.Module;
            }
            if (this._neverDestroyModuleDict.ContainsKey(moduleName)){
                var module = this._neverDestroyModuleDict.get_Item$$TKey(moduleName);
                this._neverDestroyModuleDict.Remove(moduleName);
                module.SetActive(true);
                return module;
            }
            return null;
        },
        HasModuleInPool: function (moduleName){
            return this._moduleDict.ContainsKey(moduleName) || this._neverDestroyModuleDict.ContainsKey(moduleName);
        },
        CloseModule: function (moduleName, module){
            var time = UIModulePoolDefinition.GetModulePoolTime(moduleName);
            if (!this._moduleDict.ContainsKey(moduleName) && !this._neverDestroyModuleDict.ContainsKey(moduleName)){
                if (time == -1 /* (int)UIModulePoolDefinition.ModulePoolType.Destroy */){
                    this.DestroyModule(module, true);
                }
                else if (time == 2147483647 /* (int)UIModulePoolDefinition.ModulePoolType.NeverDestroy */){
                    module.SetActive(false);
                    module.get_transform().SetParent$$Transform(this._root);
                    this._neverDestroyModuleDict.Add(moduleName, module);
                }
                else {
                    GameDebuger.TODO(" if (!SystemSetting.UsePool)");
                    if (false){
                        this.DestroyModule(module, true);
                        return;
                    }
                    if (this._moduleDict.get_Count() >= 5 /* Capacity */){
                        var minModule = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(System.Collections.Generic.KeyValuePair$2.ctor, System.Linq.Enumerable.OrderBy$2$$IEnumerable$1$$Func$2(System.Collections.Generic.KeyValuePair$2.ctor, System.Single.ctor, System.Linq.Enumerable.Select$2$$IEnumerable$1$$Func$2(System.Collections.Generic.KeyValuePair$2.ctor, System.Collections.Generic.KeyValuePair$2.ctor, this._moduleDict, $CreateAnonymousDelegate(this, function (pair){
                            return pair;
                        })), $CreateAnonymousDelegate(this, function (pair){
                            return pair.get_Value().LeftTime;
                        })));
                        if (minModule.get_Value().LeftTime > time){
                            this.DestroyModule(module, true);
                        }
                        else {
                            this._moduleDict.Remove(minModule.get_Key());
                            this.DestroyModule(minModule.get_Value().Module, true);
                            module.SetActive(false);
                            module.get_transform().SetParent$$Transform(this._root);
                            this._moduleDict.Add(moduleName, new UIModulePool.ModuleInstance.ctor(module, time));
                        }
                    }
                    else {
                        module.SetActive(false);
                        module.get_transform().SetParent$$Transform(this._root);
                        this._moduleDict.Add(moduleName, new UIModulePool.ModuleInstance.ctor(module, time));
                    }
                }
            }
            else {
                GameDebuger.LogError(System.String.Format$$String$$Object("{0} 情况特殊，需要特殊处理！", moduleName), null);
                this.DestroyModule(module, true);
            }
        },
        CreateModule: function (moduleName){
            return As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI(moduleName), UnityEngine.GameObject.ctor);
        },
        DestroyModule: function (go, gc){
            if (UnityEngine.Object.op_Inequality(go, null)){
                UnityEngine.Object.Destroy$$Object(go);
                AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(false);
            }
        },
        CheckModuleTime: function (){
            this._tempCheckList.Clear();
            this._tempCheckList.AddRange(this._moduleDict.get_Keys());
            for (var i = 0; i < this._tempCheckList.get_Count(); i++){
                var moduleName = this._tempCheckList.get_Item$$Int32(i);
                if (this._moduleDict.ContainsKey(moduleName)){
                    var moduleInstance = this._moduleDict.get_Item$$TKey(moduleName);
                    moduleInstance.LeftTime -= 1;
                    if (moduleInstance.LeftTime <= 0){
                        this._moduleDict.Remove(moduleName);
                        this.DestroyModule(moduleInstance.Module, true);
                    }
                }
            }
            this._tempCheckList.Clear();
        },
        CheckSharePrefabModule: function (moduleName){
            if (!this.IsInSharePrefabDict(moduleName)){
                return;
            }
            if (this._moduleDict.ContainsKey(moduleName)){
                var ins = this._moduleDict.get_Item$$TKey(moduleName);
                this._moduleDict.Remove(moduleName);
                this.DestroyModule(ins.Module, false);
            }
        },
        IsInSharePrefabDict: function (moduleName){
            return UIModulePoolDefinition.SharePrefabDict.ContainsKey(moduleName);
        }
    }
};
JsTypes.push(UIModulePool);
var UIModulePoolDefinition = {
    fullname: "UIModulePoolDefinition",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            UIModulePoolDefinition.SharePrefabDict = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Object.ctor);
            UIModulePoolDefinition._moduleDict = (function (){
                var $v35 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.Int32.ctor);
                $v35.Add("QRCodeDownloadView" /* ProxyQRCodeModule.QRCodeDownloadView */, 30 /* (int)ModulePoolType.Default */);
                $v35.Add("QRCodeScanView" /* ProxyQRCodeModule.QRCodeScanView */, 30 /* (int)ModulePoolType.Default */);
                $v35.Add("QRCodeEnsureView" /* ProxyQRCodeModule.QRCodeEnsureView */, 30 /* (int)ModulePoolType.Default */);
                $v35.Add("QRCodePayView" /* ProxyQRCodeModule.QRCodePayView */, 30 /* (int)ModulePoolType.Default */);
                $v35.Add("QRCodeWaitPayView" /* ProxyQRCodeModule.QRCodeWaitPayView */, 30 /* (int)ModulePoolType.Default */);
                return $v35;
            }).call(this);
        },
        GetModulePoolTime: function (moduleName){
            if (UIModulePoolDefinition._moduleDict.ContainsKey(moduleName)){
                return UIModulePoolDefinition._moduleDict.get_Item$$TKey(moduleName);
            }
            return -1 /* (int)ModulePoolType.Destroy */;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(UIModulePoolDefinition);
var ProxyBuiltInWebModule = {
    fullname: "ProxyBuiltInWebModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        Open: function (url){
            UnityEngine.Application.OpenURL(url);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("BuiltInWebView" /* BuiltInWebView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyBuiltInWebModule);
var ProxyGeneralModule = {
    fullname: "ProxyGeneralModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenGeneralModule: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(GeneralDataMgr.GeneralViewController.ctor, "GeneralView" /* GeneralView.NAME */, UILayerType.BaseModule, true, true);
        },
        CloseGeneralModule: function (){
            UIModuleManager.get_Instance().CloseModule("GeneralView" /* GeneralView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyGeneralModule);
var ProxyGMTestModule = {
    fullname: "ProxyGMTestModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyGMTestModule.NAME = "GMTestView";
        },
        Open: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("GMTestView" /* NAME */, UILayerType.DefaultModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(GMTestViewController.ctor, ui);
            controller.Open();
        },
        Close: function (){
            UIModuleManager.get_Instance().HideModule("GMTestView" /* NAME */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyGMTestModule);
var ProxyItemUseModule = {
    fullname: "ProxyItemUseModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyItemUseModule.NAME = "ItemUseView";
        },
        OpenBattleItem: function (itemUsedCount, charactorType, battleType, callBackDelegate){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("ItemUseView" /* ItemUseView.NAME */, UILayerType.FourModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(BattleItemUseController.ctor, ui);
            controller.SetOtherParam(itemUsedCount, callBackDelegate);
            GameDebuger.TODO("controller.UpdateView(null, ModelManager.Backpack.GetBattleItemList(charactorType, battleType), false, true);");
            controller.SetData(null, DemoSimulateHelper.SimulateBagItemDtoList(5), false, true, true);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("ItemUseView" /* ItemUseView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyItemUseModule);
var ProxyLoginModule = {
    fullname: "ProxyLoginModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyLoginModule.NAME = "LoginView";
            ProxyLoginModule.serverInfo = null;
            ProxyLoginModule.accountPlayerDto = null;
            ProxyLoginModule.NAME_TESTSDK = "TestSdkView";
            ProxyLoginModule.NAME_Announcement = "AnnouncementView";
            ProxyLoginModule.NAME_Agreement = "AgreementView";
        },
        Open: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("LoginView" /* NAME */, UILayerType.DefaultModule, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(LoginController.ctor, ui);
            controller.Open();
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("LoginView" /* NAME */, true);
        },
        Hide: function (){
            UIModuleManager.get_Instance().HideModule("LoginView" /* NAME */);
        },
        Show: function (){
            if (UIModuleManager.get_Instance().IsModuleCacheContainsModule("LoginView" /* NAME */)){
                UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("LoginView" /* NAME */, UILayerType.DefaultModule, false, true);
            }
        },
        IsOpen: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("LoginView" /* NAME */);
        },
        ShowAndOpenServerList: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("LoginView" /* NAME */, UILayerType.DefaultModule, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(LoginController.ctor, ui);
            controller.OpenServerListModule();
        },
        OpenTestSdk: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("TestSdkView" /* NAME_TESTSDK */, UILayerType.FourModule, false, false);
            var controller = GameObjectExt.GetMissingComponent$1(TestSdkController.ctor, ui);
            controller.Open();
        },
        CloseTestSdk: function (){
            UIModuleManager.get_Instance().CloseModule("TestSdkView" /* NAME_TESTSDK */, true);
        },
        OpenAnnouncement: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("AnnouncementView" /* NAME_Announcement */, UILayerType.FiveModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(AnnouncementController.ctor, ui);
            controller.Open();
        },
        CloseAnnouncement: function (){
            UIModuleManager.get_Instance().CloseModule("AnnouncementView" /* NAME_Announcement */, true);
        },
        OpenAgreement: function (callback){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("AgreementView" /* NAME_Agreement */, UILayerType.FiveModule, true, false);
            var controller = GameObjectExt.GetMissingComponent$1(AgreementController.ctor, ui);
            controller.Open(callback);
        },
        CloseAgreement: function (){
            UIModuleManager.get_Instance().CloseModule("AgreementView" /* NAME_Agreement */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyLoginModule);
var ProxyMainUIModule = {
    fullname: "ProxyMainUIModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyMainUIModule.MAINUI_VIEW = "MainUIView";
            ProxyMainUIModule.PLAYERINFO_VIEW = "PlayerInfoView";
            ProxyMainUIModule.BUFFTIPS_VIEW = "MainUIBuffTipsView";
            ProxyMainUIModule.BATTLE_BUFFTIPS_VIEW = "BattleBuffTipsView";
            ProxyMainUIModule.SATIATIONPROPSUSE_VIEW = "SatiationPropsUseView";
            ProxyMainUIModule.FUNCTIONOPEN_VIEW = "FunctionOpenView";
            ProxyMainUIModule.BATTLE_ORDER_LIST_VIEW = "BattleOrderListView";
            ProxyMainUIModule.BATTLE_ORDER_EDITOR_VIEW = "BattleOrderEditorView";
        },
        CheckMainViewOpen$$: "System.Boolean",
        get_CheckMainViewOpen: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("MainUIView" /* ProxyMainUIModule.MAINUI_VIEW */);
        },
        Open: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(MainUIDataMgr.MainUIViewController.ctor, "MainUIView" /* MAINUI_VIEW */, UILayerType.BaseModule, false, true);
        },
        Hide: function (){
            UIModuleManager.get_Instance().HideModule("MainUIView" /* MAINUI_VIEW */);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("MainUIView" /* MAINUI_VIEW */, true);
        },
        Show: function (){
            if (UIModuleManager.get_Instance().IsModuleCacheContainsModule("MainUIView" /* MAINUI_VIEW */)){
                UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("MainUIView" /* MAINUI_VIEW */, UILayerType.BaseModule, false, true);
            }
        },
        TogleDisplayModel: function (){
            GameDebuger.TODO("if (UIModuleManager.Instance.IsModuleCacheContainsModule(MAINUI_VIEW))\r\n        {\r\n           GameObject ui = UIModuleManager.Instance.OpenFunModule(MAINUI_VIEW, 0, false);\r\n           var controller = ui.GetMissingComponent<MainUIViewController>();\r\n            controller.ToggleDisplayModel();\r\n        }");
        },
        OpenPlayerInfoView$$Vector3$$ScenePlayerDto: function (position, playerDto){
            if (playerDto == null){
                GameDebuger.LogError("select playerID       " + playerDto.charactorId.toString(), null);
                return;
            }
            var com = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Vector3$$Boolean(PlayerInfoViewController.ctor, "PlayerInfoView" /* PlayerInfoView.NAME */, UILayerType.ThreeModule, false, position, true);
            com.UpdateView(playerDto);
        },
        OpenPlayerInfoView$$Int64$$Vector3: function (playerId, position){
            GameDebuger.TODO("ServiceRequestAction.requestServer (PlayerService.playerInfo(playerId),\'GetPlayerInfo\',(e)=>{\');\r\n            OpenPlayerInfoView(e as ScenePlayerDto,position);\r\n        });");
        },
        OpenPlayerInfoViewDynamic: function (playerId, layer){
            GameDebuger.TODO("ServiceRequestAction.requestServer(PlayerService.playerInfo(playerId), \'\', (e) =>\r\n            {\');\r\n                GameObject view = UIModuleManager.Instance.OpenFunModule(PLAYERINFO_VIEW, layer, false);\r\n                PlayerInfoViewController com = view.GetMissingComponent<PlayerInfoViewController>();\r\n                com.Open(e as ScenePlayerDto);\r\n            });");
        },
        OpenPlayerInfoView$$ScenePlayerDto$$Vector3: function (playerDto, position){
            GameDebuger.TODO("GameObject view = UIModuleManager.Instance.OpenFunModule(PLAYERINFO_VIEW,UILayerType.ThreeModule,false);\r\n\t\tview.transform.localPosition = position;\r\n\t\tPlayerInfoViewController com = view.GetMissingComponent<PlayerInfoViewController>();\r\n\t\tcom.Open(playerDto);");
        },
        ClosePlayerInfoView: function (){
            UIModuleManager.get_Instance().CloseModule("PlayerInfoView" /* PLAYERINFO_VIEW */, true);
        },
        OpenBuffTipsView: function (){
            GameDebuger.TODO("GameObject view = UIModuleManager.Instance.OpenFunModule(BUFFTIPS_VIEW,UILayerType.SubModule,false);\r\n        var com = view.GetMissingComponent<MainUIBuffTipsViewController>();");
        },
        CloseBuffTipsView: function (){
            UIModuleManager.get_Instance().CloseModule("MainUIBuffTipsView" /* BUFFTIPS_VIEW */, true);
        },
        OpenSatiationPropsUseView: function (){
            GameDebuger.TODO("if(!ModelManager.Player.isFullSatiation()){\r\n            GameObject view = UIModuleManager.Instance.OpenFunModule(SATIATIONPROPSUSE_VIEW,UILayerType.FourModule,false);\r\n            var com = view.GetMissingComponent<SatiationPropsUseViewController>();\r\n            com.Open();\r\n        }else");
            TipManager.AddTip("饱食次数已满", false, false, "");
        },
        CloseSatiationPropsUseView: function (){
            UIModuleManager.get_Instance().CloseModule("SatiationPropsUseView" /* SATIATIONPROPSUSE_VIEW */, true);
        },
        OpenBattleBuffTipsView: function (mc){
            GameDebuger.TODO("GameObject view = UIModuleManager.Instance.OpenFunModule(BATTLE_BUFFTIPS_VIEW,UILayerType.SubModule,false);\r\n        var com = view.GetMissingComponent<BattleBuffTipsViewController>();\r\n        com.Open(mc);");
        },
        IsBattleBuffTipsViewOpening: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("BattleBuffTipsView" /* BATTLE_BUFFTIPS_VIEW */);
        },
        CloseBattleBuffTipsView: function (){
            UIModuleManager.get_Instance().CloseModule("BattleBuffTipsView" /* BATTLE_BUFFTIPS_VIEW */, true);
        },
        OpenFunctionOpenView: function (openFuncIds){
            GameDebuger.TODO(" view = UIModuleManager.Instance.OpenFunModule(FUNCTIONOPEN_VIEW, UILayerType.Guide, false);\r\n        var com = view.GetMissingComponent<FunctionOpenViewController>();\r\n        com.Open(openFuncIds);");
        },
        CloaseFunctionOpenView: function (){
            UIModuleManager.get_Instance().CloseModule("FunctionOpenView" /* FUNCTIONOPEN_VIEW */, true);
        },
        HeadBtnGray$$: "System.Boolean",
        set_HeadBtnGray: function (value){
            GameDebuger.TODO("if (null != MainUIViewController.Instance)\r\n                MainUIViewController.Instance.HeadBtnGray = value;");
        },
        HideBtnsbByFuncIDs: function (openFuncIds){
            GameDebuger.TODO("MainUIViewController.Instance.View.UpdateGOActiveByFuncIDSet (openFuncIds, false);");
        },
        GetTopRightAnchorTrans: function (){
            GameDebuger.TODO("var ctrl = UIModuleManager.Instance.GetModuleController<MainUIViewController>(MainUIView.NAME);\r\n        return ctrl != null ? ctrl.View.topRightAnchor.transform : null;");
            return null;
        },
        SetMainUITopBtnGrid: function (b){
            GameDebuger.TODO("var ctrl = UIModuleManager.Instance.GetModuleController<MainUIViewController>(MainUIView.NAME);\r\n        if (ctrl != null){\r\n            MainUIViewController.Instance.View.topBtnGrid.gameObject.SetActive(b);\r\n        }");
        },
        GetBottomRightAnchor: function (){
            GameDebuger.TODO("var ctrl = UIModuleManager.Instance.GetModuleController<MainUIViewController>(MainUIView.NAME);\r\n        return ctrl != null ?  ctrl.View.BottomRightAnchor.transform : null;");
            return null;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyMainUIModule);
var ProxyPlayerPropertyModule = {
    fullname: "ProxyPlayerPropertyModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenPlayerPropertyModule: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.PlayerPropertyViewController.ctor, "PlayerPropertyView" /* PlayerPropertyView.NAME */, UILayerType.BaseModule, true, true);
        },
        OpenProfessionView: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(ProfessionDataMgr.ProfessionViewController.ctor, "ProfessionView" /* ProfessionView.NAME */, UILayerType.SubModule, true, true);
        },
        CloseProfessionView: function (){
            UIModuleManager.get_Instance().CloseModule("ProfessionView" /* ProfessionView.NAME */, true);
        },
        OpenChangeNamePanel: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.ChangeNameViewController.ctor, "ChangeNameView" /* ChangeNameView.NAME */, UILayerType.BaseModule, true, true);
        },
        CloseChangeNamePanel: function (){
            UIModuleManager.get_Instance().CloseModule("ChangeNameView" /* ChangeNameView.NAME */, true);
        },
        OpenConfirmPanel: function (title, onCancel, onConfirm){
            var controller = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(ConfirmViewController.ctor, "ConfirmView" /* ConfirmView.NAME */, UILayerType.BaseModule, true, true);
            controller.OpenConfirmWindow(title, onCancel, onConfirm);
        },
        CloseConfirmPanel: function (){
            UIModuleManager.get_Instance().CloseModule("ConfirmView" /* ConfirmView.NAME */, true);
        },
        OpneHighPropertyPanel: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.HighPropertyUIViewController.ctor, "HighPropertyUIView" /* HighPropertyUIView.NAME */, UILayerType.BaseModule, true, true);
        },
        CloseHighPropertyPanel: function (){
            UIModuleManager.get_Instance().CloseModule("HighPropertyUIView" /* HighPropertyUIView.NAME */, true);
        },
        OpenVigourPanel: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.VigourUIViewController.ctor, "VigourUIView" /* VigourUIView.NAME */, UILayerType.BaseModule, true, true);
        },
        CloseVigourPanel: function (){
            UIModuleManager.get_Instance().CloseModule("VigourUIView" /* VigourUIView.NAME */, true);
        },
        OpenAddPointPanel: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.AddPointPlanViewController.ctor, "AddPointPlanView" /* AddPointPlanView.NAME */, UILayerType.BaseModule, true, true);
        },
        CloseAddPointPanel: function (){
            UIModuleManager.get_Instance().CloseModule("AddPointPlanView" /* AddPointPlanView.NAME */, true);
        },
        OpenRecommendAPPanel: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.RecommendAddPointUIViewController.ctor, "RecommendAddPointUIView" /* RecommendAddPointUIView.NAME */, UILayerType.ThreeModule, true, true);
        },
        CloseRecommendAPPanel: function (){
            UIModuleManager.get_Instance().CloseModule("RecommendAddPointUIView" /* RecommendAddPointUIView.NAME */, true);
        },
        OpenResetPointPanel: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.ResetPointUIViewController.ctor, "ResetPointUIView" /* ResetPointUIView.NAME */, UILayerType.BaseModule, true, true);
        },
        CloseResetPointPanel: function (){
            UIModuleManager.get_Instance().CloseModule("ResetPointUIView" /* ResetPointUIView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyPlayerPropertyModule);
var ProxyQRCodeModule = {
    fullname: "ProxyQRCodeModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyQRCodeModule.QRCodeDownloadView = "QRCodeDownloadView";
            ProxyQRCodeModule.QRCodeScanView = "QRCodeScanView";
            ProxyQRCodeModule.QRCodeEnsureView = "QRCodeEnsureView";
            ProxyQRCodeModule.QRCodePayView = "QRCodePayView";
            ProxyQRCodeModule.QRCodeWaitPayView = "QRCodeWaitPayView";
        },
        OpenQRCodeDownloadView: function (depth){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("QRCodeDownloadView" /* QRCodeDownloadView */, depth, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(QRCodeDownloadViewController.ctor, ui);
            controller.SetData();
        },
        CloseQRCodeDownloadView: function (){
            UIModuleManager.get_Instance().CloseModule("QRCodeDownloadView" /* QRCodeDownloadView */, true);
        },
        OpenQRCodeScanView: function (closeCallback, depth){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("QRCodeScanView" /* QRCodeScanView */, depth, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(QRCodeScanViewController.ctor, ui);
            controller.SetData(closeCallback);
        },
        CloseQRCodeScanView: function (){
            UIModuleManager.get_Instance().CloseModule("QRCodeScanView" /* QRCodeScanView */, true);
        },
        OpenQRCodeEnsureView: function (closeCallback, sid, depth){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("QRCodeEnsureView" /* QRCodeEnsureView */, depth, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(QRCodeEnsureViewController.ctor, ui);
            controller.SetData(closeCallback, sid);
        },
        CloseQRCodeEnsureView: function (){
            UIModuleManager.get_Instance().CloseModule("QRCodeEnsureView" /* QRCodeEnsureView */, true);
        },
        OpenQRCodePayView: function (itemDto, quantity, orderDto, depth){
            ProxyQRCodeModule.CloseQRCodeWaitPayView();
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("QRCodePayView" /* QRCodePayView */, depth, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(QRCodePayViewController.ctor, ui);
            controller.SetData(itemDto, quantity, orderDto);
        },
        CloseQRCodePayView: function (){
            UIModuleManager.get_Instance().CloseModule("QRCodePayView" /* QRCodePayView */, true);
        },
        OpenQRCodeWaitPayView: function (depth){
            ProxyQRCodeModule.CloseQRCodePayView();
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("QRCodeWaitPayView" /* QRCodeWaitPayView */, depth, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(QRCodeWaitPayViewController.ctor, ui);
            controller.SetData();
        },
        CloseQRCodeWaitPayView: function (){
            UIModuleManager.get_Instance().CloseModule("QRCodeWaitPayView" /* QRCodeWaitPayView */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyQRCodeModule);
var ProxyRoleCreateModule = {
    fullname: "ProxyRoleCreateModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyRoleCreateModule.NAME = "RoleCreateView";
        },
        Open: function (info, onCreatePlayerSuccess){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("RoleCreateView" /* NAME */, UILayerType.SubModule, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(RoleCreateController.ctor, ui);
            controller.Open(info, onCreatePlayerSuccess);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("RoleCreateView" /* NAME */, true);
        },
        IsOpen: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("RoleCreateView" /* NAME */);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyRoleCreateModule);
var ProxyServerListModule = {
    fullname: "ProxyServerListModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyServerListModule.NAME = "ServerListView";
        },
        Open: function (selectCallback){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("ServerListView" /* NAME */, UILayerType.ThreeModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(ServerListController.ctor, ui);
            controller.Open(selectCallback);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("ServerListView" /* NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyServerListModule);
var ProxySocialityPanel = {
    fullname: "ProxySocialityPanel",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenSocialityPanel: function (pos){
            return UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Vector3$$Boolean(SocialityDataMgr.SocialityViewController.ctor, "SocialityView" /* SocialityView.NAME */, UILayerType.BaseModule, false, pos, true);
        },
        CloseSocialityPanel: function (){
            UIModuleManager.get_Instance().CloseModule("SocialityView" /* SocialityView.NAME */, true);
        },
        OpenEmailContentModule: function (){
            return UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(EmailContentDataMgr.EmailContentController.ctor, "EmailContent" /* EmailContent.NAME */, UILayerType.BaseModule, false, true);
        },
        CloseEmailContentModule: function (){
            UIModuleManager.get_Instance().CloseModule("EmailContent" /* EmailContent.NAME */, true);
        },
        CloseEmailView: function (){
            UIModuleManager.get_Instance().CloseModule("EmailView" /* EmailView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxySocialityPanel);
var ProxyTeamModule = {
    fullname: "ProxyTeamModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenMainView: function (tab){
            TeamDataMgr.TeamMainViewController.Open(tab);
        },
        OpenApplicationView: function (){
            TeamDataMgr.TeamApplicationViewController.Open();
        },
        OpinInvitationView: function (){
            TeamDataMgr.TeamInvitationViewController.Open();
        },
        OpinBeInvitatingView: function (){
            TeamDataMgr.TeamBeInviteViewController.Open();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyTeamModule);
var ProxyTipsModule = {
    fullname: "ProxyTipsModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        ShowSkillTips$$Object$$GameObject$$String: function (skillObj, anchor, extText){
            var view = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("SkillTipsView" /* SkillTipsView.NAME */, UILayerType.FiveModule, false, true);
            var controller = GameObjectExt.GetMissingComponent$1(SkillTipsViewController.ctor, view);
            controller.Show(skillObj, anchor, extText);
        },
        ShowSkillTips$$Int32$$GameObject: function (skillId, anchor){
            var skill = DataCache.getDtoByCls$1(AppDto.Skill.ctor, skillId);
            if (skill != null){
                GameDebuger.TODO("if (skill is PetSkill)\n            {\n                PetSkill petSkill = skill as PetSkill;\n                if (petSkill == null)\n                    return;\n                ShowSkillTips(skill, anchor, SkillId2TypeText(petSkill.type));\n            }\n            else");
                ProxyTipsModule.ShowSkillTips$$Object$$GameObject$$String(skill, anchor, "");
            }
        },
        CloseSkillTips: function (){
            UIModuleManager.get_Instance().CloseModule("SkillTipsView" /* SkillTipsView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyTipsModule);
var ProxyWindowModule = {
    fullname: "ProxyWindowModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ProxyWindowModule.NAME_WindowPrefab = "WindowPrefab";
            ProxyWindowModule.SIMPLE_NAME_WindowPrefab = "SimpleWindowPrefab";
            ProxyWindowModule.NAME_WindowPrefabForTop = "WindowPrefabTop";
            ProxyWindowModule.SIMPLE_NAME_WindowPrefabForTop = "SimpleWindowPrefabTop";
            ProxyWindowModule.INPUT_NAME_WINDOWPREFAB = "WindowInputPrefab";
            ProxyWindowModule.NAME_WindowOptSavePrefab = "WindowOptSavePrefab";
            ProxyWindowModule.QueueWindowPrefabPath = "QueueWindowPrefab";
            ProxyWindowModule.MarryWindowPrefabPath = "MarryWindowPrefab";
            ProxyWindowModule.DivorceWindowPrefabPath = "DivorceWindowPrefab";
            ProxyWindowModule.PhoneConfirmWindowPrefabPath = "PhoneConfirmWindowPrefab";
        },
        OpenConfirmWindow: function (msg, title, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, closeWinTime, isCloseCallCancelHandler, clearColor){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("WindowPrefab" /* NAME_WindowPrefab */, UILayerType.Dialogue, true, false);
            if (System.String.IsNullOrEmpty(title)){
                title = "提示";
            }
            if (System.String.IsNullOrEmpty(okLabelStr)){
                okLabelStr = "确定";
            }
            if (System.String.IsNullOrEmpty(cancelLabelStr)){
                cancelLabelStr = "取消";
            }
            if (UnityEngine.Object.op_Equality(ui, null)){
                BuiltInDialogueViewController.OpenView(msg, onHandler, cancelHandler, 4, okLabelStr, cancelLabelStr);
                return;
            }
            var controller = GameObjectExt.GetMissingComponent$1(WindowPrefabController.ctor, ui);
            controller.OpenConfirmWindow(msg, title, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, closeWinTime, isCloseCallCancelHandler, clearColor);
        },
        OpenSimpleConfirmWindow: function (msg, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, closeWinTime, layer, closeWinTimeForOk){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("SimpleWindowPrefab" /* SIMPLE_NAME_WindowPrefab */, layer, true, false);
            if (System.String.IsNullOrEmpty(okLabelStr)){
                okLabelStr = "确定";
            }
            if (System.String.IsNullOrEmpty(cancelLabelStr)){
                cancelLabelStr = "取消";
            }
            var controller = GameObjectExt.GetMissingComponent$1(SimpleWindowPrefabController.ctor, ui);
            controller.OpenConfirmWindow(msg, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, closeWinTime, closeWinTimeForOk);
        },
        OpenMessageWindow: function (msg, title, onHandler, pivot, okLabelStr, layer, justClose){
            var prefabName = "WindowPrefab" /* NAME_WindowPrefab */;
            if (layer == UILayerType.TopDialogue){
                prefabName = "WindowPrefabTop" /* NAME_WindowPrefabForTop */;
            }
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean(prefabName, layer, true, false);
            if (System.String.IsNullOrEmpty(title)){
                title = "提示";
            }
            if (System.String.IsNullOrEmpty(okLabelStr)){
                okLabelStr = "确定";
            }
            var controller = GameObjectExt.GetMissingComponent$1(WindowPrefabController.ctor, ui);
            controller.OpenMessageWindow(msg, title, onHandler, pivot, okLabelStr, justClose, layer == UILayerType.TopDialogue);
        },
        OpenSimpleMessageWindow: function (msg, onHandler, pivot, okLabelStr, layer){
            var prefabName = "SimpleWindowPrefab" /* SIMPLE_NAME_WindowPrefab */;
            if (layer == UILayerType.TopDialogue){
                prefabName = "SimpleWindowPrefabTop" /* SIMPLE_NAME_WindowPrefabForTop */;
            }
            if (System.String.IsNullOrEmpty(okLabelStr)){
                okLabelStr = "确定";
            }
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean(prefabName, layer, true, false);
            if (UnityEngine.Object.op_Equality(ui, null)){
                BuiltInDialogueViewController.OpenView(msg, onHandler, null, 4, okLabelStr, "取消");
                return;
            }
            var controller = GameObjectExt.GetMissingComponent$1(SimpleWindowPrefabController.ctor, ui);
            controller.OpenMessageWindow(msg, onHandler, pivot, okLabelStr, layer == UILayerType.TopDialogue);
        },
        OpenInputWindow: function (minChar, maxChar, title, desContent, inputTips, inputVlaue, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, closeWinTime, layer, type){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("WindowInputPrefab" /* INPUT_NAME_WINDOWPREFAB */, layer, true, false);
            if (System.String.IsNullOrEmpty(title)){
                title = "系统";
            }
            if (System.String.IsNullOrEmpty(okLabelStr)){
                okLabelStr = "确定";
            }
            if (System.String.IsNullOrEmpty(cancelLabelStr)){
                cancelLabelStr = "取消";
            }
            var controller = GameObjectExt.GetMissingComponent$1(WindowInputPrefabController.ctor, ui);
            controller.OpenInputWindow(minChar, maxChar, title, desContent, inputTips, inputVlaue, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, closeWinTime, type);
        },
        OpenOptSaveWindow: function (msg, title, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, toggleStr, closeWinTime, layer, isCloseCallCancelHandler){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("WindowOptSavePrefab" /* NAME_WindowOptSavePrefab */, layer, true, false);
            if (System.String.IsNullOrEmpty(title)){
                title = "提示";
            }
            if (System.String.IsNullOrEmpty(okLabelStr)){
                okLabelStr = "确定";
            }
            if (System.String.IsNullOrEmpty(cancelLabelStr)){
                cancelLabelStr = "取消";
            }
            if (System.String.IsNullOrEmpty(toggleStr)){
                toggleStr = "不再提示";
            }
            var controller = GameObjectExt.GetMissingComponent$1(WindowOptSavePrefabController.ctor, ui);
            controller.OpenOptSaveWindow(msg, title, onHandler, cancelHandler, pivot, okLabelStr, cancelLabelStr, toggleStr, closeWinTime, isCloseCallCancelHandler);
        },
        OpenQueueWindow: function (serverName, queuePosition, waitTime, layer, onHandler){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("QueueWindowPrefab" /* QueueWindowPrefabPath */, layer, true, false);
            var controller = GameObjectExt.GetMissingComponent$1(QueueWindowPrefabController.ctor, ui);
            controller.Open(serverName, queuePosition, waitTime);
            return controller;
        },
        IsOpen: function (){
            return UIModuleManager.get_Instance().IsModuleCacheContainsModule("WindowPrefab" /* NAME_WindowPrefab */) || UIModuleManager.get_Instance().IsModuleCacheContainsModule("SimpleWindowPrefab" /* SIMPLE_NAME_WindowPrefab */) || UIModuleManager.get_Instance().IsModuleCacheContainsModule("WindowOptSavePrefab" /* NAME_WindowOptSavePrefab */) || UIModuleManager.get_Instance().IsModuleCacheContainsModule("MarryWindowPrefab" /* MarryWindowPrefabPath */);
        },
        Close: function (){
            UIModuleManager.get_Instance().CloseModule("WindowPrefab" /* NAME_WindowPrefab */, true);
        },
        CloseForTop: function (){
            UIModuleManager.get_Instance().CloseModule("WindowPrefabTop" /* NAME_WindowPrefabForTop */, true);
        },
        closeInputWin: function (){
            UIModuleManager.get_Instance().CloseModule("WindowInputPrefab" /* INPUT_NAME_WINDOWPREFAB */, true);
        },
        closeSimpleWin: function (){
            UIModuleManager.get_Instance().CloseModule("SimpleWindowPrefab" /* SIMPLE_NAME_WindowPrefab */, true);
        },
        closeSimpleWinForTop: function (){
            UIModuleManager.get_Instance().CloseModule("SimpleWindowPrefabTop" /* SIMPLE_NAME_WindowPrefabForTop */, true);
        },
        closeOptWin: function (){
            UIModuleManager.get_Instance().CloseModule("WindowOptSavePrefab" /* NAME_WindowOptSavePrefab */, true);
        },
        CloseQueueWindow: function (){
            UIModuleManager.get_Instance().CloseModule("QueueWindowPrefab" /* QueueWindowPrefabPath */, true);
        },
        CloseMarryWindow: function (){
            UIModuleManager.get_Instance().CloseModule("MarryWindowPrefab" /* MarryWindowPrefabPath */, true);
        },
        ClosePhoneConfirmWindow: function (){
            UIModuleManager.get_Instance().CloseModule("PhoneConfirmWindowPrefab" /* PhoneConfirmWindowPrefabPath */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyWindowModule);
var ProxyWorldMapModule = {
    fullname: "ProxyWorldMapModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        CloseAllModule: function (){
            GameDebuger.TODO("ProxyDialogueModule.CloseNpcDialogue();");
            ProxyWorldMapModule.CloseWorldMap();
            ProxyWorldMapModule.CloseMiniMap();
            ProxyWorldMapModule.CloseMiniWorldMap();
            GameDebuger.TODO("ProxyPromoteModule.Close();");
        },
        OpenWorldMap: function (){
            GameDebuger.TODO("if (!FunctionOpenHelper.isFuncOpen(FunctionOpen.FunctionOpenEnum_GameMap, true))\n        {\n            return;\n        }");
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(WorldMapController.ctor, "WorldMapView" /* WorldMapView.NAME */, UILayerType.ThreeModule, true, true);
        },
        CloseWorldMap: function (){
            UIModuleManager.get_Instance().CloseModule("WorldMapView" /* WorldMapView.NAME */, true);
        },
        OpenMiniMap: function (){
            var ui = UIModuleManager.get_Instance().OpenFunModule$$String$$UILayerType$$Boolean$$Boolean("MiniMapView" /* MiniMapView.NAME */, UILayerType.ThreeModule, true, true);
            var controller = GameObjectExt.GetMissingComponent$1(MiniMapController.ctor, ui);
            controller.Open();
        },
        CloseMiniMap: function (){
            UIModuleManager.get_Instance().CloseModule("MiniMapView" /* MiniMapView.NAME */, true);
        },
        OpenMiniWorldMap: function (){
            if (!WorldManager.get_Instance().CanFlyable()){
                TipManager.AddTip("此地插翅难飞", false, false, "");
                return;
            }
            if (WorldManager.get_Instance().GetModel().GetSceneDto() == null){
                TipManager.AddTip("还没有进入任何地图，不能打开此功能", false, false, "");
                return;
            }
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(WorldMapDataMgr.MiniWorldMapViewController.ctor, "MiniWorldMapView" /* MiniWorldMapView.NAME */, UILayerType.ThreeModule, true, true);
        },
        CloseMiniWorldMap: function (){
            UIModuleManager.get_Instance().CloseModule("MiniWorldMapView" /* MiniWorldMapView.NAME */, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ProxyWorldMapModule);
var SdkLoginMessage = {
    fullname: "SdkLoginMessage",
    baseTypeName: "SdkLoginMessageBase",
    staticDefinition: {
        cctor: function (){
            SdkLoginMessage.Instance = new SdkLoginMessage.ctor();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            SdkLoginMessageBase.ctor.call(this);
        },
        Sdk2CLogin: function (bGuest, sid){
            SPSdkManager.get_Instance().CallbackLoginSuccess(false, sid);
        },
        Sdk2CLogout: function (){
            ExitGameScript.get_Instance().DoReloginAccount(true);
        },
        Sdk2CReLogin: function (){
            ExitGameScript.get_Instance().DoReloginAccount(true);
        },
        GetGameID: function (){
            return 1 /* GameConfig.APP_ID */;
        },
        GetLayer: function (){
            return 500;
        },
        SetupCoolDown: function (taskName, totalTime, onUpdate, onFinished){
            CSTimer.get_Instance().SetupCoolDown(taskName, totalTime, $CreateAnonymousDelegate(this, function (remainTime){
                onUpdate(remainTime);
            }), $CreateAnonymousDelegate(this, function (){
                onFinished();
            }), 1, false);
        }
    }
};
JsTypes.push(SdkLoginMessage);
var SdkLoginMessageBase = {
    fullname: "SdkLoginMessageBase",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        C2SdkInitRoot: function (root){
            SdkModuleMgr.Instance.InitRoot(root);
        },
        C2SdkLogin: function (){
            SdkProxyModule.ClearModule();
            SdkProxyModule.OpenLogin();
        },
        C2SdkBind: function (){
            SdkProxyModule.OpenBind();
        },
        C2SdkUserCenter: function (){
            SdkProxyModule.OpenGameCenter();
        },
        C2SdkLogout: function (){
            SdkAccountModel.get_Instance().Game2Logout();
        },
        GetServerUrl: function (){
            return GameSetting.SDK_SERVER;
        },
        GetRegistUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/register.json";
        },
        GetFindPasswordUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/findPassword.json";
        },
        GetModifyPasswordUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/updatePassword.json";
        },
        GetLoginUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/login.json";
        },
        GetBoundUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/bound.json";
        },
        GetCheckSessionUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/checkSession.json";
        },
        GetPhoneCodeUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/phoneVerifyCode.json";
        },
        GetSendVerifyCodeUrl: function (){
            return this.GetServerUrl() + "/sdkc/account/smsCode.json";
        },
        GetBindMobileNum: function (){
            return this.GetServerUrl() + "/sdkc/account/showPhone.json";
        },
        GetUUID: function (){
            return BaoyugameSdk.getUUID();
        },
        GetPay: function (){
        }
    }
};
JsTypes.push(SdkLoginMessageBase);
var SdkLoadingTip = {
    fullname: "SdkLoadingTip",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkLoadingTip.NAME = "SdkLoadingTip";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.LoadingGroup_Transform = null;
            this.TipLabel_UILabel = null;
            this.CircleSprite_UISprite = null;
            this.BgSprite_UISprite = null;
            this.BlackSprite_BoxCollider = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.LoadingGroup_Transform = root.Find("LoadingGroup");
            this.TipLabel_UILabel = root.Find("LoadingGroup/TipLabel").GetComponent$1(UILabel.ctor);
            this.CircleSprite_UISprite = root.Find("LoadingGroup/CircleSprite").GetComponent$1(UISprite.ctor);
            this.BgSprite_UISprite = root.Find("LoadingGroup/BgSprite").GetComponent$1(UISprite.ctor);
            this.BlackSprite_BoxCollider = root.Find("BlackSprite").GetComponent$1(UnityEngine.BoxCollider.ctor);
        }
    }
};
JsTypes.push(SdkLoadingTip);
var SdkLoadingTipController = {
    fullname: "SdkLoadingTipController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            SdkLoadingTipController._instance = null;
        },
        Setup: function (parent){
            var prefab = AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("SdkLoadingTip" /* SdkLoadingTip.NAME */);
            if (UnityEngine.Object.op_Inequality(prefab, null)){
                if (UnityEngine.Object.op_Equality(parent, null)){
                    UnityEngine.Debug.LogError$$Object("SdkLoadingTipController Setup not find parent");
                    return;
                }
                var loadingTip = NGUITools.AddChild$$GameObject$$GameObject(parent, prefab);
                loadingTip.set_name("SdkLoadingTip" /* SdkLoadingTip.NAME */);
                SdkLoadingTipController._instance = GameObjectExt.GetMissingComponent$1(SdkLoadingTipController.ctor, loadingTip);
                SdkLoadingTipController._instance.InitView();
                NGUITools.AdjustDepth(loadingTip, SdkModuleMgr.get_SdkTopLayer());
            }
        },
        Show: function (tip, showCircle, boxCollider, autoCloseTime){
            if (UnityEngine.Object.op_Inequality(SdkLoadingTipController._instance, null)){
                if (showCircle || boxCollider){
                    SdkLoadingTipController._instance._Show(tip, showCircle, boxCollider, autoCloseTime);
                }
            }
        },
        Stop: function (tip){
            if (UnityEngine.Object.op_Inequality(SdkLoadingTipController._instance, null)){
                SdkLoadingTipController._instance._Stop(tip);
            }
        },
        Reset: function (){
            if (UnityEngine.Object.op_Inequality(SdkLoadingTipController._instance, null)){
                SdkLoadingTipController._instance._Reset();
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._loadingCount = 0;
            this._mGo = null;
            this._tipList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            this._view = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        InitView: function (){
            this._mGo = this.get_gameObject();
            this._view = BaseView.Create$1$$GameObject(SdkLoadingTip.ctor, this._mGo);
            this._mGo.SetActive(false);
        },
        _Show: function (tip, showCircle, boxCollider, autoCloseTime){
            this._loadingCount++;
            this._view.LoadingGroup_Transform.get_gameObject().SetActive(showCircle);
            this._view.BlackSprite_BoxCollider.set_enabled(boxCollider);
            this._tipList.Add(tip);
            if (showCircle){
                this.UpdateTip();
            }
            this._mGo.SetActive(true);
            if (autoCloseTime > 0){
                this.CancelInvoke$$String("_Reset");
                this.Invoke("_Reset", autoCloseTime);
            }
        },
        UpdateTip: function (){
            var tips = "";
            tips = System.String.Join$$String$$String$Array("\n\n", this._tipList.ToArray());
            this._view.TipLabel_UILabel.set_text(tips);
        },
        _Stop: function (tip){
            this._loadingCount--;
            if (this._tipList.Contains(tip)){
                this._tipList.Remove(tip);
            }
            if (this._loadingCount > 0){
                this.UpdateTip();
                return;
            }
            this._Reset();
        },
        _Reset: function (){
            this._tipList.Clear();
            this._loadingCount = 0;
            this._mGo.SetActive(false);
            this.CancelInvoke$$String("_Reset");
        }
    }
};
JsTypes.push(SdkLoadingTipController);
var SdkBaseController = {
    fullname: "SdkBaseController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            SdkBaseController.Instance = null;
        },
        Setup: function (module){
            SdkBaseController.Instance = GameObjectExt.GetMissingComponent$1(SdkBaseController.ctor, module);
            SdkBaseController.Instance.Open();
        },
        PreLoginObject$$: "UnityEngine.GameObject",
        get_PreLoginObject: function (){
            return SdkBaseController.Instance._view.PreLogin.get_gameObject();
        },
        GameCenterObject$$: "UnityEngine.GameObject",
        get_GameCenterObject: function (){
            return SdkBaseController.Instance._view.GameCenter.get_gameObject();
        },
        GameCenterBarObject$$: "UnityEngine.GameObject",
        get_GameCenterBarObject: function (){
            return SdkBaseController.Instance._view.GameCenterBarTrans.get_gameObject();
        },
        PreLoginPos$$: "UnityEngine.Vector3",
        get_PreLoginPos: function (){
            return SdkBaseController.Instance._view.PreLogin.get_position();
        },
        PreLoginHidePos$$: "UnityEngine.Vector3",
        get_PreLoginHidePos: function (){
            return SdkBaseController.Instance._view.HidePos.get_position();
        },
        GameCenterPos$$: "UnityEngine.Vector3",
        get_GameCenterPos: function (){
            return SdkBaseController.Instance._view.GameCenter.get_position();
        },
        GameCenterHidePos$$: "UnityEngine.Vector3",
        get_GameCenterHidePos: function (){
            return SdkBaseController.Instance._view.GameCenterHidePosTrans.get_position();
        },
        View$$: "SdkBaseView",
        get_View: function (){
            return SdkBaseController.Instance._view;
        },
        SetModuleType: function (type){
            if (SdkBaseController.Instance.PreModuleType == type)
                return;
            SdkProxyModule.ClearModule();
            SdkBaseController.Instance.PreModuleType = type;
            if (type == SdkModuleMgr.ModuleType.preLogin){
                if (SdkAccountModel.get_Instance().IsLogin()){
                    SdkBaseController.Instance.SetExpand(false);
                }
                else {
                    SdkBaseController.get_GameCenterBarObject().SetActive(false);
                }
                SdkBaseController.get_GameCenterObject().SetActive(false);
                SdkBaseController.get_PreLoginObject().SetActive(true);
            }
            else {
                SdkBaseController.get_GameCenterBarObject().SetActive(true);
                SdkBaseController.get_GameCenterObject().SetActive(true);
                SdkBaseController.get_PreLoginObject().SetActive(false);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._isExpand = true;
            this.PreModuleType = SdkModuleMgr.ModuleType.preLogin;
            MonoViewController$1.ctor.call(this, SdkBaseView.ctor);
        },
        Open: function (){
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.IconBtn.onClick, $CreateDelegate(this, this.OnIcon));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.AccountBtn.onClick, $CreateDelegate(this, this.OnAccount));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateDelegate(this, this.OnBack));
        },
        OnIcon: function (){
            this.SetExpand(!this._isExpand);
        },
        OnAccount: function (){
            if (SdkModuleMgr.Instance.IsModuleOpen("SdkGameCenterView" /* SdkGameCenterView.NAME */)){
                SdkProxyModule.ClearModule();
            }
            else {
                SdkProxyModule.OpenGameCenter();
            }
        },
        OnBack: function (){
            this.SetExpand(false);
        },
        SetExpand: function (bExpand){
            if (this._isExpand == bExpand)
                return;
            this._isExpand = bExpand;
            var scale = bExpand ? new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1, 1, 1) : new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 1, 1);
            var com = TweenScale.Begin$$GameObject$$Single$$Vector3(this._view.BarTrans.get_gameObject(), 0.5, scale);
            com.method = 0;
        }
    }
};
JsTypes.push(SdkBaseController);
var SdkBindCodeController = {
    fullname: "SdkBindCodeController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._editType = SdkAccountDto.AccountDto.AccountType.free;
            MonoViewController$1.ctor.call(this, SdkBindCodeView.ctor);
        },
        InitData$$String$$AccountType: function (title, type){
            this._editType = type;
            this._view.TitleLabel.set_text(title);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkBindCodeView" /* SdkBindCodeView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.GetCodeBtn.onClick, $CreateDelegate(this, this.OnGetCode));
        },
        OnGetCode: function (){
            var account = this._view.AccoutInput.get_value();
            if (this._editType == SdkAccountDto.AccountDto.AccountType.phone){
                if (!SdkAccountModel.CheckPhone(account))
                    return;
            }
            else {
                if (!SdkAccountModel.CheckEmail(account))
                    return;
            }
            SdkService.RequestPhoneCode(account, $CreateAnonymousDelegate(this, function (code){
                if (code == 0){
                    if (BaseView.IsViewDestroy(this.get_View()))
                        return;
                    var com = SdkProxyModule.OpenModule$1(SdkBindConfirmController.ctor, "SdkBindConfirmView" /* SdkBindConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
                    com.InitData$$String$$String$$AccountType("账号绑定", account, this._editType);
                }
            }));
        }
    }
};
JsTypes.push(SdkBindCodeController);
var SdkBindConfirmController = {
    fullname: "SdkBindConfirmController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._account = null;
            this._editType = SdkAccountDto.AccountDto.AccountType.free;
            MonoViewController$1.ctor.call(this, SdkBindConfirmView.ctor);
        },
        InitData$$String$$String$$AccountType: function (title, account, type){
            this._account = account;
            this._editType = type;
            this._view.TitleLabel.set_text(title);
            this.StartCodeLimit();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkBindConfirmView" /* SdkBindConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.CommitBtn.onClick, $CreateDelegate(this, this.CommitBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ReSendCodeBtn.onClick, $CreateDelegate(this, this.ResendCodeBtn));
        },
        CommitBtn: function (){
            var sid = SdkAccountModel.get_Instance().GetSid();
            if (System.String.IsNullOrEmpty(sid)){
                SdkProxyModule.ShowTips("未登录的情况下不能绑定");
                return;
            }
            var code = this._view.CodeInput.get_value();
            var psd1 = this._view.PasswordInput.get_value();
            var psd2 = this._view.PasswordInput2.get_value();
            if (!SdkAccountModel.CheckVerifyCode(code) || !SdkAccountModel.CheckPassword(psd1, psd2)){
                return;
            }
            var password = MD5Hashing.HashString$$String(psd1);
            SdkService.RequestBind(sid, this._account, password, this._editType, code, $CreateAnonymousDelegate(this, function (backcode){
                if (backcode == 0){
                    SdkProxyModule.ClearModule();
                    SdkProxyModule.ShowTips("绑定成功");
                }
            }));
        },
        ResendCodeBtn: function (){
            if (this._editType == SdkAccountDto.AccountDto.AccountType.phone){
                SdkService.RequestPhoneCode(this._account, $CreateAnonymousDelegate(this, function (code){
                    if (code == 0){
                        if (BaseView.IsViewDestroy(this.get_View()))
                            return;
                        this.StartCodeLimit();
                    }
                }));
            }
        },
        StartCodeLimit: function (){
            this._view.ReSendCodeBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(false);
            this._view.ReSendCodeBtn.SetState(3, true);
            CSTimer.get_Instance().SetupCoolDown("SdkBindCode", 100 /* SdkAccountModel.CODE_LIMIT_SEC */, $CreateDelegate(this, this.OnLimitUpdate), $CreateDelegate(this, this.OnLimitFinish), 0.1, false);
        },
        OnLimitUpdate: function (remainSec){
            this._view.SendCodeLbl.set_text(System.String.Format$$String$$Object("{0}秒", UnityEngine.Mathf.Ceil(remainSec)));
        },
        OnLimitFinish: function (){
            this._view.SendCodeLbl.set_text("重发验证码");
            this._view.ReSendCodeBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(true);
            this._view.ReSendCodeBtn.SetState(0, true);
        },
        OnDispose: function (){
            CSTimer.get_Instance().CancelCd("SdkBindCode");
        }
    }
};
JsTypes.push(SdkBindConfirmController);
var SdkBindController = {
    fullname: "SdkBindController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkBindView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkBindView" /* SdkBindView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.PhoneBtn.onClick, $CreateDelegate(this, this.OnPhoneBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.WeixinBtn.onClick, $CreateDelegate(this, this.OnWeixinBtn));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.QQBtn.onClick, $CreateDelegate(this, this.OnQQBtn));
        },
        OnPhoneBtn: function (){
            var com = SdkProxyModule.OpenModule$1(SdkBindCodeController.ctor, "SdkBindCodeView" /* SdkBindCodeView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            com.InitData$$String$$AccountType("账号绑定", SdkAccountDto.AccountDto.AccountType.phone);
        },
        OnWeixinBtn: function (){
        },
        OnQQBtn: function (){
        }
    }
};
JsTypes.push(SdkBindController);
var SdkFindPasswordConfirmController = {
    fullname: "SdkFindPasswordConfirmController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._phone = null;
            MonoViewController$1.ctor.call(this, SdkFindPasswordConfirmView.ctor);
        },
        Phone$$: "System.String",
        get_Phone: function (){
            return this._phone;
        },
        set_Phone: function (value){
            this._phone = value;
        },
        InitData$$String: function (phone){
            this.set_Phone(phone);
            this.StartCodeLimit();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkFindPasswordConfirmView" /* SdkFindPasswordConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ConfirmBtn.onClick, $CreateDelegate(this, this.OnConfirm));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ReSendBtn.onClick, $CreateDelegate(this, this.OnReSendCode));
        },
        OnConfirm: function (){
            var code = this._view.CodeInput.get_value();
            var psd1 = this._view.PasswordInput.get_value();
            var psd2 = this._view.PasswordInput2.get_value();
            if (!SdkAccountModel.CheckVerifyCode(code) || !SdkAccountModel.CheckPassword(psd1, psd2)){
                return;
            }
            var password = MD5Hashing.HashString$$String(psd1);
            SdkService.RequestFindPassword(this._phone, password, SdkAccountDto.AccountDto.AccountType.phone, code, $CreateAnonymousDelegate(this, function (backcode){
                if (this._view == null)
                    return;
                if (backcode == 0){
                    SdkProxyModule.OpenModule$1(SdkPlatformLoginController.ctor, "SdkPlatformLoginView" /* SdkPlatformLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
                    GameDebuger.Log("找回密码成功", null);
                }
            }));
        },
        OnReSendCode: function (){
            SdkService.RequestPhoneCode(this._phone, $CreateAnonymousDelegate(this, function (backcode){
                if (backcode == 0){
                    if (BaseView.IsViewDestroy(this.get_View()))
                        return;
                    this.StartCodeLimit();
                    GameDebuger.Log("重发验证码成功", null);
                }
            }));
        },
        StartCodeLimit: function (){
            this._view.ReSendBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(false);
            this._view.ReSendBtn.SetState(3, true);
            CSTimer.get_Instance().SetupCoolDown("SdkFindPasswordCode", 100 /* SdkAccountModel.CODE_LIMIT_SEC */, $CreateDelegate(this, this.OnLimitUpdate), $CreateDelegate(this, this.OnLimitFinish), 0.1, false);
        },
        OnLimitUpdate: function (remainSec){
            this._view.SendCodeLbl.set_text(System.String.Format$$String$$Object("{0}秒", UnityEngine.Mathf.Ceil(remainSec)));
        },
        OnLimitFinish: function (){
            this._view.SendCodeLbl.set_text("重发验证码");
            this._view.ReSendBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(true);
            this._view.ReSendBtn.SetState(0, true);
        },
        OnDispose: function (){
            CSTimer.get_Instance().CancelCd("SdkFindPasswordCode");
        }
    }
};
JsTypes.push(SdkFindPasswordConfirmController);
var SdkFindPasswordController = {
    fullname: "SdkFindPasswordController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkFindPasswordView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkFindPasswordView" /* SdkFindPasswordView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.GetCodeBtn.onClick, $CreateDelegate(this, this.OnGetCode));
        },
        OnGetCode: function (){
            var phone = this._view.AccoutInput.get_value();
            if (!SdkAccountModel.CheckPhone(phone)){
                return;
            }
            SdkService.RequestPhoneCode(phone, $CreateAnonymousDelegate(this, function (code){
                if (BaseView.IsViewDestroy(this.get_View()))
                    return;
                if (code == 0){
                    var com = SdkProxyModule.OpenModule$1(SdkFindPasswordConfirmController.ctor, "SdkFindPasswordConfirmView" /* SdkFindPasswordConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
                    com.InitData$$String(phone);
                }
            }));
        }
    }
};
JsTypes.push(SdkFindPasswordController);
var SdkGameCenterController = {
    fullname: "SdkGameCenterController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkGameCenterView.ctor);
        },
        RefreshShow: function (){
            var oAccount = SdkAccountModel.get_Instance().get_loginAccount();
            if (oAccount == null)
                return;
            this._view.NameLabel.set_text(System.String.Format$$String$$Object("昵称：{0}", oAccount.seesionDto.nickname));
            this._view.UIDLabel.set_text(System.String.Format$$String$$Object("UID：{0}", oAccount.seesionDto.uid));
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ChangeAccountBtn.onClick, $CreateDelegate(this, this.OnChangeAccount));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ModifyNameBtn.onClick, $CreateDelegate(this, this.OnModifyName));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ModifyPasswordBtn.onClick, $CreateDelegate(this, this.OnModifyPassword));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BindBtn.onClick, $CreateDelegate(this, this.OnBindAccount));
        },
        OnChangeAccount: function (){
            SdkAccountModel.get_Instance().Logout();
        },
        OnModifyPassword: function (){
            SdkProxyModule.OpenModule$1(SdkModifyPasswordController.ctor, "SdkModifyPasswordView" /* SdkModifyPasswordView.NAME */, SdkModuleMgr.ModuleType.gameEnter);
        },
        OnModifyName: function (){
            SdkProxyModule.OpenModule$1(SdkModifyPasswordController.ctor, "SdkModifyPasswordView" /* SdkModifyPasswordView.NAME */, SdkModuleMgr.ModuleType.gameEnter);
        },
        OnBindAccount: function (){
            SdkProxyModule.OpenModule$1(SdkBindController.ctor, "SdkBindView" /* SdkBindView.NAME */, SdkModuleMgr.ModuleType.preLogin);
        }
    }
};
JsTypes.push(SdkGameCenterController);
var SdkLastAccountItemController = {
    fullname: "SdkLastAccountItemController",
    baseTypeName: "MonolessViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._index = 0;
            this._commitCallback = null;
            this._deleteCallback = null;
            MonolessViewController$1.ctor.call(this, SdkLastAccountItem.ctor);
        },
        InitItem: function (index, commit, pDelete){
            this._index = index;
            this._commitCallback = commit;
            this._deleteCallback = pDelete;
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.LastAccountItemBtn.onClick, $CreateAnonymousDelegate(this, function (){
                this._commitCallback(this._index);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.DeleteBtn.onClick, $CreateAnonymousDelegate(this, function (){
                this._deleteCallback(this._index);
            }));
        },
        RefreshShow: function (dto){
            var spriteName = "account-icon";
            switch (dto.type){
                case SdkAccountDto.AccountDto.AccountType.device:
                    break;
                case SdkAccountDto.AccountDto.AccountType.phone:
                    break;
                case SdkAccountDto.AccountDto.AccountType.qq:
                    break;
                case SdkAccountDto.AccountDto.AccountType.weixin:
                    break;
            }
            this._view.LastLabel.set_text(dto.get_name());
            this._view.LastIcon.set_spriteName(spriteName);
        }
    }
};
JsTypes.push(SdkLastAccountItemController);
var SdkModifyPasswordConfirmController = {
    fullname: "SdkModifyPasswordConfirmController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._phone = null;
            MonoViewController$1.ctor.call(this, SdkModifyPasswordConfirmView.ctor);
        },
        Phone$$: "System.String",
        get_Phone: function (){
            return this._phone;
        },
        set_Phone: function (value){
            this._phone = value;
        },
        InitData$$String: function (phone){
            this.set_Phone(phone);
            this.StartCodeLimit();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkModifyPasswordConfirmView" /* SdkModifyPasswordConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ConfirmBtn.onClick, $CreateDelegate(this, this.OnConfirm));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.GetCodeBtn.onClick, $CreateDelegate(this, this.OnReSendCode));
        },
        OnConfirm: function (){
            var code = this._view.CodeInput.get_value();
            var psd1 = this._view.PasswordInput1.get_value();
            var psd2 = this._view.PasswordInput2.get_value();
            if (!SdkAccountModel.CheckVerifyCode(code) || !SdkAccountModel.CheckPassword(psd1, psd2)){
                return;
            }
            var password = MD5Hashing.HashString$$String(psd1);
            var sid = SdkAccountModel.get_Instance().GetSid();
            SdkService.RequestModifyPassword(sid, password, code, $CreateAnonymousDelegate(this, function (backcode){
                if (backcode == 0){
                    SdkProxyModule.OpenGameCenter();
                    GameDebuger.Log("修改密码成功", null);
                }
            }));
        },
        OnReSendCode: function (){
            SdkService.RequestPhoneCode(this._phone, $CreateAnonymousDelegate(this, function (backcode){
                if (backcode == 0){
                    if (BaseView.IsViewDestroy(this.get_View()))
                        return;
                    this.StartCodeLimit();
                    GameDebuger.Log("重发验证码成功", null);
                }
            }));
        },
        StartCodeLimit: function (){
            this._view.GetCodeBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(false);
            this._view.GetCodeBtn.SetState(3, true);
            CSTimer.get_Instance().SetupCoolDown("SdkModifyPasswordCode", 100 /* SdkAccountModel.CODE_LIMIT_SEC */, $CreateDelegate(this, this.OnLimitUpdate), $CreateDelegate(this, this.OnLimitFinish), 0.1, false);
        },
        OnLimitUpdate: function (remainSec){
            this._view.SendCodeLbl.set_text(System.String.Format$$String$$Object("{0}秒", UnityEngine.Mathf.Ceil(remainSec)));
        },
        OnLimitFinish: function (){
            this._view.SendCodeLbl.set_text("重发验证码");
            this._view.GetCodeBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(true);
            this._view.GetCodeBtn.SetState(0, true);
        },
        OnDispose: function (){
            CSTimer.get_Instance().CancelCd("SdkModifyPasswordCode");
        }
    }
};
JsTypes.push(SdkModifyPasswordConfirmController);
var SdkModifyPasswordController = {
    fullname: "SdkModifyPasswordController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkModifyPasswordView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkModifyPasswordView" /* SdkModifyPasswordView.NAME */, SdkModuleMgr.ModuleType.gameEnter);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.GetCodeBtn.onClick, $CreateDelegate(this, this.OnGetCode));
        },
        OnGetCode: function (){
            var phone = this._view.AccoutInput.get_value();
            if (!SdkAccountModel.CheckPhone(phone)){
                return;
            }
            SdkService.RequestPhoneCode(phone, $CreateAnonymousDelegate(this, function (code){
                if (BaseView.IsViewDestroy(this.get_View()))
                    return;
                if (code == 0){
                    var com = SdkProxyModule.OpenModule$1(SdkModifyPasswordConfirmController.ctor, "SdkModifyPasswordConfirmView" /* SdkModifyPasswordConfirmView.NAME */, SdkModuleMgr.ModuleType.gameEnter);
                    com.InitData$$String(phone);
                }
            }));
        }
    }
};
JsTypes.push(SdkModifyPasswordController);
var SdkNotifyTipController = {
    fullname: "SdkNotifyTipController",
    baseTypeName: "MonoViewController$1",
    staticDefinition: {
        cctor: function (){
            SdkNotifyTipController._instance = null;
        },
        Instance$$: "SdkNotifyTipController",
        get_Instance: function (){
            return SdkNotifyTipController._instance;
        },
        Setup: function (parent){
            var prefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("SdkNotifyTip" /* SdkNotifyTip.NAME */), UnityEngine.GameObject.ctor);
            if (UnityEngine.Object.op_Inequality(prefab, null)){
                if (UnityEngine.Object.op_Equality(parent, null)){
                    return;
                }
                var go = NGUITools.AddChild$$GameObject$$GameObject(parent, prefab);
                go.SetActive(false);
                SdkNotifyTipController._instance = GameObjectExt.GetMissingComponent$1(SdkNotifyTipController.ctor, go);
                NGUITools.AdjustDepth(go, SdkModuleMgr.get_SdkTopLayer());
            }
        },
        SetShow: function (bShow){
            SdkNotifyTipController._instance.get_gameObject().SetActive(bShow);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkNotifyTip.ctor);
        },
        ShowTips: function (tips){
            SdkNotifyTipController.SetShow(true);
            this._view.TipLabel.set_text(tips);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.commitBtn.onClick, $CreateDelegate(this, this.CommitBtn));
        },
        CommitBtn: function (){
            SdkNotifyTipController.SetShow(false);
        }
    }
};
JsTypes.push(SdkNotifyTipController);
var SdkPlatformLoginController = {
    fullname: "SdkPlatformLoginController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkPlatformLoginView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkPlatformLoginView" /* SdkPlatformLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.RegisterBtn.onClick, $CreateDelegate(this, this.OnRegister));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.EnterBtn.onClick, $CreateDelegate(this, this.OnEnterGame));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.FindpasswordBtn.onClick, $CreateDelegate(this, this.OnFindPassword));
        },
        OnFindPassword: function (){
            SdkProxyModule.OpenModule$1(SdkFindPasswordController.ctor, "SdkFindPasswordView" /* SdkFindPasswordView.NAME */, SdkModuleMgr.ModuleType.preLogin);
        },
        OnRegister: function (){
            SdkProxyModule.OpenModule$1(SdkPlatformRegisterController.ctor, "SdkPlatformRegisterView" /* SdkPlatformRegisterView.NAME */, SdkModuleMgr.ModuleType.preLogin);
        },
        OnEnterGame: function (){
            var account = this._view.AccoutInput.get_value();
            var password = this._view.PasswordInput.get_value();
            if (System.String.IsNullOrEmpty(account) || System.String.IsNullOrEmpty(password)){
                SdkProxyModule.ShowTips("账号或密码为空");
                return;
            }
            password = MD5Hashing.HashString$$String(password);
            SdkAccountModel.get_Instance().DoLogin(account, password, SdkAccountDto.AccountDto.AccountType.phone);
        }
    }
};
JsTypes.push(SdkPlatformLoginController);
var SdkPlatformRegisterController = {
    fullname: "SdkPlatformRegisterController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkPlatformRegisterView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkPlatformRegisterView" /* SdkPlatformRegisterView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.RegisterBtn.onClick, $CreateDelegate(this, this.OnRegister));
        },
        OnRegister: function (){
            var phone = this._view.AccoutInput.get_value();
            SdkService.RequestPhoneCode(phone, $CreateAnonymousDelegate(this, function (code){
                if (BaseView.IsViewDestroy(this.get_View()))
                    return;
                if (code == 0){
                    var com = SdkProxyModule.OpenModule$1(SdkRegisterConfirmController.ctor, "SdkRegisterConfirmView" /* SdkRegisterConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
                    com.InitData$$String(phone);
                }
            }));
        }
    }
};
JsTypes.push(SdkPlatformRegisterController);
var SdkQuickLoginController = {
    fullname: "SdkQuickLoginController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._lastItemList = null;
            this._accountList = null;
            this._selectAccount = null;
            MonoViewController$1.ctor.call(this, SdkQuickLoginView.ctor);
        },
        AfterInitView: function (){
            this.CreateLastListItem(3);
            this.RefreshAccount();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().PlatformBtn.onClick, $CreateDelegate(this, this.OnDemiAccount));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().TencentBtn.onClick, $CreateDelegate(this, this.OnTencentAccount));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LoginBtn.onClick, $CreateDelegate(this, this.OnLogin));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().LastAccountBtn.onClick, $CreateDelegate(this, this.SwitchAccountGrid));
        },
        CreateLastListItem: function (count){
            this._lastItemList = new System.Collections.Generic.List$1.ctor(SdkLastAccountItemController.ctor);
            var prefab = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("SdkLastAccountItem" /* SdkLastAccountItem.NAME */), UnityEngine.GameObject.ctor);
            for (var i = 0; i < count; ++i){
                var com = this.AddChild$2$$GameObject$$GameObject$$String(SdkLastAccountItemController.ctor, SdkLastAccountItem.ctor, this.get_View().AccountGrid.get_gameObject(), prefab, "");
                com.InitItem(i, $CreateDelegate(this, this.OnSelectItem), $CreateDelegate(this, this.OnDeleteItem));
                this._lastItemList.Add(com);
            }
        },
        RefreshAccount: function (){
            this._accountList = SdkAccountModel.get_Instance().GetLastAccount();
            for (var i = 0; i < this._lastItemList.get_Count(); ++i){
                var com = this._lastItemList.get_Item$$Int32(i);
                if (i < this._accountList.get_Count()){
                    com.RefreshShow(this._accountList.get_Item$$Int32(i));
                    com.get_gameObject().SetActive(true);
                }
                else
                    com.get_gameObject().SetActive(false);
            }
            if (this._accountList.get_Count() > 0)
                this.SetSelectAccount(this._accountList.get_Item$$Int32(0));
        },
        SetSelectAccount: function (dto){
            this._selectAccount = dto;
            if (dto == null){
                this.get_View().LastLabel.set_text("");
                this.get_View().LastIcon.set_spriteName("");
                return;
            }
            var spriteName = "account-icon";
            switch (dto.type){
                case SdkAccountDto.AccountDto.AccountType.device:
                    break;
                case SdkAccountDto.AccountDto.AccountType.phone:
                    break;
                case SdkAccountDto.AccountDto.AccountType.qq:
                    break;
                case SdkAccountDto.AccountDto.AccountType.weixin:
                    break;
            }
            this.get_View().LastLabel.set_text(dto.get_name());
            this.get_View().LastIcon.set_spriteName(spriteName);
        },
        OnSelectItem: function (index){
            this.SetSelectAccount(this._accountList.get_Item$$Int32(index));
            this.SwitchAccountGrid();
        },
        OnDeleteItem: function (index){
            var deleteDto = this._accountList.get_Item$$Int32(index);
            this._accountList.RemoveAt(index);
            if (deleteDto == this._selectAccount){
                if (this._accountList.get_Count() <= 0){
                    SdkProxyModule.ClearModule();
                    SdkProxyModule.OpenLogin();
                    return;
                }
                this.SetSelectAccount(this._accountList.get_Item$$Int32(0));
                this.SwitchAccountGrid();
            }
            this.RefreshAccount();
        },
        OnLogin: function (){
            if (this._selectAccount == null)
                return;
            SdkAccountModel.get_Instance().DoLogin(this._selectAccount.get_name(), this._selectAccount.password, this._selectAccount.type);
        },
        SwitchAccountGrid: function (){
            var obj = this.get_View().AccountGrid.get_gameObject();
            obj.SetActive(!obj.get_activeSelf());
        },
        OnDemiAccount: function (){
            SdkProxyModule.OpenModule$1(SdkPlatformLoginController.ctor, "SdkPlatformLoginView" /* SdkPlatformLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
        },
        OnTencentAccount: function (){
            QQLoginHelper.OpenLoginPage();
        }
    }
};
JsTypes.push(SdkQuickLoginController);
var SdkRegisterConfirmController = {
    fullname: "SdkRegisterConfirmController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._phone = null;
            MonoViewController$1.ctor.call(this, SdkRegisterConfirmView.ctor);
        },
        Phone$$: "System.String",
        get_Phone: function (){
            return this._phone;
        },
        set_Phone: function (value){
            this._phone = value;
        },
        InitData$$String: function (phone){
            this.set_Phone(phone);
            this.StartCodeLimit();
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.BackBtn.onClick, $CreateAnonymousDelegate(this, function (){
                SdkProxyModule.CloseModuleSlow("SdkRegisterConfirmView" /* SdkRegisterConfirmView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.RegisterBtn.onClick, $CreateDelegate(this, this.OnConfirm));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.ReSendBtn.onClick, $CreateDelegate(this, this.OnReSendCode));
        },
        OnConfirm: function (){
            var code = this._view.CodeInput.get_value();
            var psd1 = this._view.PasswordInput.get_value();
            var psd2 = this._view.PasswordInput2.get_value();
            if (!SdkAccountModel.CheckVerifyCode(code) || !SdkAccountModel.CheckPassword(psd1, psd2)){
                return;
            }
            var password = MD5Hashing.HashString$$String(psd1);
            SdkService.RequestRegister(this._phone, password, SdkAccountDto.AccountDto.AccountType.phone, code, $CreateAnonymousDelegate(this, function (backcode){
                if (backcode == 0){
                    SdkProxyModule.OpenModule$1(SdkPlatformLoginController.ctor, "SdkPlatformLoginView" /* SdkPlatformLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
                    GameDebuger.Log("注册成功", null);
                }
            }));
        },
        OnReSendCode: function (){
            SdkService.RequestPhoneCode(this._phone, $CreateAnonymousDelegate(this, function (backcode){
                if (backcode == 0){
                    this.StartCodeLimit();
                    GameDebuger.Log("重发验证码成功", null);
                }
            }));
        },
        StartCodeLimit: function (){
            this._view.ReSendBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(false);
            this._view.ReSendBtn.SetState(3, true);
            CSTimer.get_Instance().SetupCoolDown("SdkRegisterCode", 100 /* SdkAccountModel.CODE_LIMIT_SEC */, $CreateDelegate(this, this.OnLimitUpdate), $CreateDelegate(this, this.OnLimitFinish), 0.1, false);
        },
        OnLimitUpdate: function (remainSec){
            this._view.SendCodeLbl.set_text(System.String.Format$$String$$Object("{0}秒", UnityEngine.Mathf.Ceil(remainSec)));
        },
        OnLimitFinish: function (){
            this._view.SendCodeLbl.set_text("重发验证码");
            this._view.ReSendBtn.GetComponent$1(UnityEngine.BoxCollider.ctor).set_enabled(true);
            this._view.ReSendBtn.SetState(0, true);
        },
        OnDispose: function (){
            CSTimer.get_Instance().CancelCd("SdkRegisterCode");
        }
    }
};
JsTypes.push(SdkRegisterConfirmController);
var SdkSelectLoginController = {
    fullname: "SdkSelectLoginController",
    baseTypeName: "MonoViewController$1",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            MonoViewController$1.ctor.call(this, SdkSelectLoginView.ctor);
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.QuickLoginBtn.onClick, $CreateDelegate(this, this.OnQuickLogin));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.PlatformLoginBtn.onClick, $CreateDelegate(this, this.OnPlatformLogin));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this._view.QQLoginBtn.onClick, $CreateDelegate(this, this.OnQQLogin));
        },
        OnQuickLogin: function (){
            var uuid = SdkLoginMessage.Instance.GetUUID();
            SdkAccountModel.get_Instance().DoLogin(System.String.Empty, uuid, SdkAccountDto.AccountDto.AccountType.device);
        },
        OnPlatformLogin: function (){
            SdkProxyModule.OpenModule$1(SdkPlatformLoginController.ctor, "SdkPlatformLoginView" /* SdkPlatformLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
        },
        OnQQLogin: function (){
        }
    }
};
JsTypes.push(SdkSelectLoginController);
var SdkAccountDto$LoginSessionDto = {
    fullname: "SdkAccountDto.LoginSessionDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = null;
            this.currencyName = null;
            this.currencyRate = 0;
            this.sid = null;
            this.uid = null;
            this.nickname = null;
            this.accountId = null;
            this.accountName = null;
            this.accountSession = null;
            this.accountBound = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SdkAccountDto$LoginSessionDto);
var SdkAccountDto$LoginResponseDto = {
    fullname: "SdkAccountDto.LoginResponseDto",
    baseTypeName: "SdkAccountDto.ResponseDto",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.item = null;
            SdkAccountDto.ResponseDto.ctor.call(this);
        }
    }
};
JsTypes.push(SdkAccountDto$LoginResponseDto);
var SdkAccountDto$AccountDto = {
    fullname: "SdkAccountDto.AccountDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._name = null;
            this.password = null;
            this.type = SdkAccountDto.AccountDto.AccountType.free;
            this.seesionDto = null;
            System.Object.ctor.call(this);
        },
        name$$: "System.String",
        get_name: function (){
            if (!System.String.IsNullOrEmpty(this._name))
                return this._name;
            return this.seesionDto.accountName;
        },
        set_name: function (value){
            this._name = value;
        },
        ctor$$LoginResponseDto: function (dto){
            this._name = null;
            this.password = null;
            this.type = SdkAccountDto.AccountDto.AccountType.free;
            this.seesionDto = null;
            System.Object.ctor.call(this);
            this.seesionDto = dto.item;
        }
    }
};
JsTypes.push(SdkAccountDto$AccountDto);
var SdkAccountDto$ResponseDto = {
    fullname: "SdkAccountDto.ResponseDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SdkAccountDto$ResponseDto);
var SdkModuleMgr = {
    fullname: "SdkModuleMgr",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SdkModuleMgr.Instance = new SdkModuleMgr.ctor();
            SdkModuleMgr._layer = 0;
        },
        SdkAcountLayer$$: "System.Int32",
        get_SdkAcountLayer: function (){
            if (SdkModuleMgr._layer == 0)
                SdkModuleMgr._layer = SdkLoginMessage.Instance.GetLayer();
            return SdkModuleMgr._layer;
        },
        SdkTopLayer$$: "System.Int32",
        get_SdkTopLayer: function (){
            return SdkModuleMgr.get_SdkAcountLayer() + 100;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._moduleCache = null;
            this._singleModule = null;
            System.Object.ctor.call(this);
            this._moduleCache = new SdkModuleMgr.ModuleCache.ctor();
        },
        InitRoot: function (root){
            if (UnityEngine.Object.op_Inequality(SdkBaseController.Instance, null))
                return;
            var module = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("SdkBaseView" /* SdkBaseView.NAME */), UnityEngine.GameObject.ctor);
            module.SetActive(true);
            module = NGUITools.AddChild$$GameObject$$GameObject(root, module);
            NGUITools.AddMissingComponent$1(UIPanel.ctor, module);
            NGUITools.AdjustDepth(module, SdkModuleMgr.get_SdkAcountLayer());
            SdkBaseController.Setup(module);
            SdkLoadingTipController.Setup(module);
            SdkNotifyTipController.Setup(module);
        },
        OpenModule: function (name, type){
            var module = this._moduleCache.GetModule(name);
            if (UnityEngine.Object.op_Inequality(module, null)){
                this.CloseTopperModule(name);
                return module;
            }
            var parent = (type == SdkModuleMgr.ModuleType.preLogin) ? SdkBaseController.get_PreLoginObject() : SdkBaseController.get_GameCenterObject();
            module = As(AssetPipeline.ResourcePoolManager.get_Instance().LoadUI(name), UnityEngine.GameObject.ctor);
            module.SetActive(true);
            module = NGUITools.AddChild$$GameObject$$GameObject(parent, module);
            NGUITools.AddMissingComponent$1(UIPanel.ctor, module);
            var uiLayer = this._moduleCache.GetNextLayer();
            NGUITools.AdjustDepth(module, uiLayer);
            this._moduleCache.Add(name, module);
            if (uiLayer != SdkModuleMgr.get_SdkAcountLayer()){
                this.MoveIn(module, type);
            }
            return module;
        },
        CloseTopperModule: function (moduleName){
            var closeList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            for (var i = this._moduleCache.get_NameList().get_Count() - 1; i >= 0; --i){
                if (this._moduleCache.get_NameList().get_Item$$Int32(i) == moduleName)
                    break;
                closeList.Add(this._moduleCache.get_NameList().get_Item$$Int32(i));
            }
            var $it64 = closeList.GetEnumerator();
            while ($it64.MoveNext()){
                var closeName = $it64.get_Current();
                this.CloseModule$$String(closeName);
            }
        },
        MoveIn: function (module, type){
            module.get_transform().set_position((type == SdkModuleMgr.ModuleType.preLogin) ? SdkBaseController.get_PreLoginHidePos() : SdkBaseController.get_GameCenterHidePos());
            var des = (type == SdkModuleMgr.ModuleType.preLogin) ? SdkBaseController.get_PreLoginPos() : SdkBaseController.get_GameCenterPos();
            var com = TweenPosition.Begin$$GameObject$$Single$$Vector3$$Boolean(module, 0.5, des, true);
            com.method = 0;
            com.onFinished.Clear();
        },
        MoveOut: function (module, type){
            var des = (type == SdkModuleMgr.ModuleType.preLogin) ? SdkBaseController.get_PreLoginHidePos() : SdkBaseController.get_GameCenterHidePos();
            var com = TweenPosition.Begin$$GameObject$$Single$$Vector3$$Boolean(module, 0.5, des, true);
            com.method = 0;
            EventDelegate.Set$$List$1$EventDelegate$$Callback(com.onFinished, $CreateAnonymousDelegate(this, function (){
                this.CloseModule$$GameObject(module);
            }));
        },
        CloseModuleSlow: function (name, type){
            var module = this._moduleCache.GetModule(name);
            if (UnityEngine.Object.op_Inequality(module, null)){
                if (this._moduleCache.get_ModuleCount() == 1)
                    this.CloseModule$$GameObject(module);
                else
                    this.MoveOut(module, type);
            }
        },
        CloseModule$$String: function (moduleName){
            var module = this._moduleCache.GetModule(moduleName);
            if (UnityEngine.Object.op_Inequality(module, null)){
                var viewController = this.GetViewController(module);
                this._moduleCache.Remove(moduleName);
                if (viewController != null){
                    viewController.Dispose();
                }
                this.DestroyModule(module, true);
            }
        },
        CloseModule$$GameObject: function (module){
            var moduleName = this._moduleCache.GetModuleName(module);
            if (moduleName != System.String.Empty){
                var viewController = this.GetViewController(module);
                this._moduleCache.Remove(moduleName);
                if (viewController != null){
                    viewController.Dispose();
                }
                this.DestroyModule(module, true);
            }
        },
        ClearModule: function (){
            var list = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            var $it65 = this._moduleCache.get_NameList().GetEnumerator();
            while ($it65.MoveNext()){
                var name = $it65.get_Current();
                list.Add(name);
            }
            var $it66 = list.GetEnumerator();
            while ($it66.MoveNext()){
                var name = $it66.get_Current();
                this.CloseModule$$String(name);
            }
        },
        DestroyModule: function (go, gc){
            if (UnityEngine.Object.op_Inequality(go, null)){
                UnityEngine.Object.Destroy$$Object(go);
                AssetPipeline.ResourcePoolManager.UnloadAssetsAndGC(false);
            }
        },
        GetViewController: function (module){
            var list = module.GetComponents$1(UnityEngine.MonoBehaviour.ctor);
            for (var i = 0,len = list.length; i < len; i++){
                var mono = list[i];
                if (Is(mono, IViewController.ctor)){
                    return As(mono, IViewController.ctor);
                }
            }
            return null;
        },
        IsModuleOpen: function (name){
            var module = this._moduleCache.GetModule(name);
            return UnityEngine.Object.op_Inequality(module, null);
        }
    }
};
JsTypes.push(SdkModuleMgr);
var SdkAccountModel = {
    fullname: "SdkAccountModel",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SdkAccountModel._instance = new SdkAccountModel.ctor();
            SdkAccountModel.CODE_LIMIT_SEC = 100;
            SdkAccountModel.LOGINCACHE_KEY = "logincache";
        },
        Instance$$: "SdkAccountModel",
        get_Instance: function (){
            return SdkAccountModel._instance;
        },
        CheckAccount: function (account){
            return true;
        },
        CheckPhone: function (phone){
            if (System.String.IsNullOrEmpty(phone) || phone.length != 11 || !SdkAccountModel.IsDigit(phone)){
                SdkProxyModule.ShowTips("请输入正确的手机号");
                return false;
            }
            return true;
        },
        CheckEmail: function (email){
            if (System.String.IsNullOrEmpty(email)){
                SdkProxyModule.ShowTips("请输入正确的邮箱");
                return false;
            }
            return true;
        },
        CheckPassword: function (password1, password2){
            if (System.String.IsNullOrEmpty(password1)){
                SdkProxyModule.ShowTips("密码不能为空");
                return false;
            }
            if (password1 != password2){
                SdkProxyModule.ShowTips("两次密码不一致");
                return false;
            }
            return true;
        },
        CheckVerifyCode: function (code){
            if (System.String.IsNullOrEmpty(code)){
                SdkProxyModule.ShowTips("验证码不能为空");
                return false;
            }
            return true;
        },
        IsDigit: function (str){
            return System.Text.RegularExpressions.Regex.IsMatch$$String$$String(str, "^[0-9]+$");
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._loginAccount = null;
            this._accountList = null;
            System.Object.ctor.call(this);
        },
        loginAccount$$: "SdkAccountDto.AccountDto",
        get_loginAccount: function (){
            return this._loginAccount;
        },
        GetLastAccount: function (){
            if (this._accountList != null)
                return this._accountList;
            this._accountList = new System.Collections.Generic.List$1.ctor(SdkAccountDto.AccountDto.ctor);
            var sCache = UnityEngine.PlayerPrefs.GetString$$String("logincache" /* LOGINCACHE_KEY */);
            if (System.String.IsNullOrEmpty(sCache))
                return this._accountList;
            var sAccountList = sCache.Split$$Char$Array(["|"]);
            for (var $i68 = 0,$l68 = sAccountList.length,sInfo = sAccountList[$i68]; $i68 < $l68; $i68++, sInfo = sAccountList[$i68]){
                var sList = sInfo.Split$$Char$Array([";"]);
                if (sList.length != 3)
                    continue;
                var dto = new SdkAccountDto.AccountDto.ctor();
                dto.type = System.Int32.Parse$$String(sList[0]);
                dto.set_name(sList[1]);
                dto.password = sList[2];
                this._accountList.Add(dto);
            }
            return this._accountList;
        },
        SaveAccount: function (dto){
            this._loginAccount = dto;
            var $it68 = this._accountList.GetEnumerator();
            while ($it68.MoveNext()){
                var account = $it68.get_Current();
                if (account.type == dto.type){
                    this._accountList.Remove(account);
                    break;
                }
            }
            this._accountList.Insert(0, dto);
            var sSave = "";
            for (var i = 0; i < this._accountList.get_Count(); ++i){
                var account = this._accountList.get_Item$$Int32(i);
                sSave += System.String.Format$$String$$Object$$Object$$Object("{0};{1};{2}", account.type, account.get_name(), account.password);
                if (i != this._accountList.get_Count() - 1)
                    sSave += "|";
            }
            UnityEngine.PlayerPrefs.SetString("logincache" /* LOGINCACHE_KEY */, sSave);
        },
        DoLogin: function (account, password, type){
            SdkService.RequestLogin(account, password, type, $CreateDelegate(this, this.OnLoginSuccess));
        },
        OnLoginSuccess: function (dto){
            this.SaveAccount(dto);
            SdkProxyModule.ClearModule();
            SdkProxyModule.SetModuleType(SdkModuleMgr.ModuleType.gameEnter);
            var bGuest = (dto.type == SdkAccountDto.AccountDto.AccountType.device);
            SdkLoginMessage.Instance.Sdk2CLogin(bGuest, dto.seesionDto.sid);
        },
        Logout: function (){
            SdkLoginMessage.Instance.Sdk2CLogout();
        },
        Game2Logout: function (){
            this._loginAccount = null;
            SdkProxyModule.ClearModule();
            SdkProxyModule.OpenLogin();
        },
        IsLogin: function (){
            return this._loginAccount != null;
        },
        GetSid: function (){
            if (this._loginAccount == null)
                return "";
            return this._loginAccount.seesionDto.sid;
        }
    }
};
JsTypes.push(SdkAccountModel);
var SdkProxyModule = {
    fullname: "SdkProxyModule",
    baseTypeName: "System.Object",
    staticDefinition: {
        OpenLogin: function (){
            var accountList = SdkAccountModel.get_Instance().GetLastAccount();
            if (accountList.get_Count() == 0){
                SdkProxyModule.OpenModule$1(SdkSelectLoginController.ctor, "SdkSelectLoginView" /* SdkSelectLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }
            else {
                SdkProxyModule.OpenModule$1(SdkQuickLoginController.ctor, "SdkQuickLoginView" /* SdkQuickLoginView.NAME */, SdkModuleMgr.ModuleType.preLogin);
            }
        },
        OpenBind: function (){
        },
        OpenGameCenter: function (){
            var com = SdkProxyModule.OpenModule$1(SdkGameCenterController.ctor, "SdkGameCenterView" /* SdkGameCenterView.NAME */, SdkModuleMgr.ModuleType.gameEnter);
            com.RefreshShow();
        },
        ClearModule: function (){
            SdkModuleMgr.Instance.ClearModule();
        },
        OpenModule$1: function (T, name, type){
            SdkBaseController.SetModuleType(type);
            var module = SdkModuleMgr.Instance.OpenModule(name, type);
            var com = GameObjectExt.GetMissingComponent$1(T, module);
            return com;
        },
        CloseModuleSlow: function (name, type){
            SdkModuleMgr.Instance.CloseModuleSlow(name, type);
        },
        ShowTips: function (tips){
            SdkNotifyTipController.get_Instance().ShowTips(tips);
        },
        SetModuleType: function (type){
            SdkBaseController.SetModuleType(type);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SdkProxyModule);
var SdkService = {
    fullname: "SdkService",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SdkService._jsonDics = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
        },
        RequestLogin: function (name, password, type, downLoadFinishCallBack){
            var manager = SdkLoginMessage.Instance;
            var url = manager.GetLoginUrl();
            if (type == SdkAccountDto.AccountDto.AccountType.device){
                url = url + System.String.Format$$String$$Object$$Object$$Object("?gameId={0}&name={1}&type={2}", manager.GetGameID(), password, type);
            }
            else {
                url = url + System.String.Format$$String$$Object$Array("?gameId={0}&name={1}&password={2}&type={3}", [manager.GetGameID(), name, password, type]);
            }
            SdkService.RequestJson(url, "SdkLogin", "登录中", function (json){
                var dto = JsHelper.ToObject(SdkAccountDto.LoginResponseDto.ctor, json);
                if (SdkService.CheckDtoValid(dto)){
                    var dAccount = new SdkAccountDto.AccountDto.ctor$$LoginResponseDto(dto);
                    dAccount.password = password;
                    dAccount.type = type;
                    downLoadFinishCallBack(dAccount);
                }
            }, true, true, null);
        },
        RequestPhoneCode: function (phone, downLoadFinishCallBack){
            var manager = SdkLoginMessage.Instance;
            var url = manager.GetPhoneCodeUrl();
            url = url + "?phone=" + phone;
            SdkService.RequestJson(url, "SdkRegister", "请求验证码中", function (json){
                var dto = JsHelper.ToObject(SdkAccountDto.ResponseDto.ctor, json);
                if (SdkService.CheckDtoValid(dto)){
                    downLoadFinishCallBack(0);
                }
            }, true, true, null);
        },
        RequestRegister: function (name, password, type, verifyCode, downLoadFinishCallBack){
            var manager = SdkLoginMessage.Instance;
            var url = manager.GetRegistUrl();
            url = url + System.String.Format$$String$$Object$Array("?gameId={0}&name={1}&password={2}&type={3}&verifyCode={4}", [manager.GetGameID(), name, password, type, verifyCode]);
            SdkService.RequestJson(url, "SdkRegister", "请求中", function (json){
                var dto = JsHelper.ToObject(SdkAccountDto.ResponseDto.ctor, json);
                if (SdkService.CheckDtoValid(dto)){
                    downLoadFinishCallBack(0);
                }
            }, true, true, null);
        },
        RequestFindPassword: function (name, password, type, verifyCode, downLoadFinishCallBack){
            var manager = SdkLoginMessage.Instance;
            var url = manager.GetFindPasswordUrl();
            url = url + System.String.Format$$String$$Object$Array("?gameId={0}&name={1}&password={2}&type={3}&verifyCode={4}", [manager.GetGameID(), name, password, type, verifyCode]);
            SdkService.RequestJson(url, "SdkFindPassword", "请求中", function (json){
                var dto = JsHelper.ToObject(SdkAccountDto.ResponseDto.ctor, json);
                if (SdkService.CheckDtoValid(dto)){
                    downLoadFinishCallBack(0);
                }
            }, true, true, null);
        },
        RequestModifyPassword: function (sid, password, verifyCode, downLoadFinishCallBack){
            var manager = SdkLoginMessage.Instance;
            var url = manager.GetModifyPasswordUrl();
            url = url + System.String.Format$$String$$Object$Array("?gameId={0}&sid={1}&password={2}&verifyCode={3}", [manager.GetGameID(), sid, password, verifyCode]);
            SdkService.RequestJson(url, "SdkModifyPassword", "请求中", function (json){
                var dto = JsHelper.ToObject(SdkAccountDto.ResponseDto.ctor, json);
                if (SdkService.CheckDtoValid(dto)){
                    downLoadFinishCallBack(0);
                }
            }, true, true, null);
        },
        RequestBind: function (sid, name, password, type, verifyCode, downLoadFinishCallBack){
            var manager = SdkLoginMessage.Instance;
            var url = manager.GetBoundUrl();
            url = url + System.String.Format$$String$$Object$Array("?gameId={0}&sid={1}&name={2}&password={3}&type={4}&verifyCode={5}", [manager.GetGameID(), sid, name, password, type, verifyCode]);
            SdkService.RequestJson(url, "SdkBind", "请求绑定中", function (json){
                var dto = JsHelper.ToObject(SdkAccountDto.ResponseDto.ctor, json);
                if (SdkService.CheckDtoValid(dto)){
                    downLoadFinishCallBack(0);
                }
            }, true, true, null);
        },
        CheckDtoValid: function (dto){
            if (dto == null){
                SdkProxyModule.ShowTips("请求超时");
                return false;
            }
            if (dto.code > 0){
                SdkProxyModule.ShowTips(dto.msg);
                return false;
            }
            return true;
        },
        RequestJson: function (url, jsonName, tips, downLoadFinishCallBack, needLock, refresh, headers){
            if (!refresh && SdkService._jsonDics.ContainsKey(jsonName)){
                var json = SdkService._jsonDics.get_Item$$TKey(jsonName);
                downLoadFinishCallBack(json);
                return;
            }
            GameDebuger.Log("RequestJson " + url, null);
            if (needLock){
                SdkLoadingTipController.Show(tips, true, true, 0);
            }
            var hashHeaders = null;
            if (headers != null){
                hashHeaders = new System.Collections.Hashtable.ctor();
                var $it69 = headers.GetEnumerator();
                while ($it69.MoveNext()){
                    var header = $it69.get_Current();
                    hashHeaders.set_Item$$Object(header.get_Key(), header.get_Value());
                }
            }
            HttpController.get_Instance().DownLoad(url, function (byteArray){
                if (needLock){
                    SdkLoadingTipController.Stop(tips);
                }
                var json = byteArray.ToUTF8String();
                SdkService._jsonDics.set_Item$$TKey(jsonName, json);
                GameDebuger.Log("下载成功", null);
                GameDebuger.Log(json, null);
                downLoadFinishCallBack(json);
            }, null, function (exception){
                if (needLock){
                    SdkLoadingTipController.Stop(tips);
                }
                GameDebuger.Log(System.String.Format$$String$$Object$$Object("RequestJson url={0} error={1}", url, exception.toString()), null);
                downLoadFinishCallBack(null);
            }, false, 1, hashHeaders);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SdkService);
var QQLoginHelper = {
    fullname: "QQLoginHelper",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            QQLoginHelper.QQLogin_APPID = "101369233";
            QQLoginHelper.QQLogin_redirect_uri = "http://qzs.qq.com/qzone/openapi/success.html";
            QQLoginHelper.QQLogin_scope = "get_user_info";
            QQLoginHelper.QQLogin_URL = "https://graph.qq.com/oauth2.0/authorize?response_type=token&client_id={0}&redirect_uri={1}&scope={2}&display={3}";
            QQLoginHelper.QQ_accessToken = "";
            QQLoginHelper.QQ_OpenId = "";
        },
        OpenLoginPage: function (){
            var display = "mobile";
            var loginUrl = System.String.Format$$String$$Object$Array("https://graph.qq.com/oauth2.0/authorize?response_type=token&client_id={0}&redirect_uri={1}&scope={2}&display={3}" /* QQLogin_URL */, ["101369233" /* QQLogin_APPID */, UnityEngine.WWW.EscapeURL$$String("http://qzs.qq.com/qzone/openapi/success.html" /* QQLogin_redirect_uri */), "get_user_info" /* QQLogin_scope */, display]);
            ProxyBuiltInWebModule.Open(loginUrl);
        },
        RequestQQOpenID: function (){
            var url = System.String.Format$$String$$Object("https://graph.qq.com/oauth2.0/me?access_token={0}", QQLoginHelper.QQ_accessToken);
            ServiceProviderManager.RequestJson(url, "RequestQQOpenID", function (result){
                GameDebuger.Log("RequestQQOpenID：" + result, null);
                if (System.String.IsNullOrEmpty(result)){
                    GameDebuger.LogError("RequestQQOpenID result is null", null);
                }
                else {
                    var regex = new System.Text.RegularExpressions.Regex.ctor$$String("callback(\\s)*?\\((?<STR>([^()])+?)\\)(\\s)*?\\;");
                    var match = regex.Match$$String(result);
                    if (match.get_Success()){
                        var json = match.get_Groups().get_Item$$String("STR").toString();
                        GameDebuger.Log("json=" + json, null);
                        var info = JsHelper.ToObject(QQOpenIDInfo.ctor, json);
                        GameDebuger.Log(System.String.Format$$String$$Object$$Object("client_id={0} openid={1}", info.client_id, info.openid), null);
                        var loginDto = new SdkAccountDto.LoginSessionDto.ctor();
                        loginDto.sid = info.openid;
                        loginDto.uid = info.openid;
                        QQLoginHelper.QQ_OpenId = info.openid;
                        var accountDto = new SdkAccountDto.AccountDto.ctor();
                        accountDto.seesionDto = loginDto;
                        accountDto.type = SdkAccountDto.AccountDto.AccountType.qq;
                        SdkAccountModel.get_Instance().OnLoginSuccess(accountDto);
                    }
                }
            }, true, true, null);
        },
        RequestQQUserInfo: function (){
            var url = System.String.Format$$String$$Object$$Object$$Object("https://graph.qq.com/user/get_user_info?access_token={0}&oauth_consumer_key={1}&openid={2}", QQLoginHelper.QQ_accessToken, "101369233" /* QQLogin_APPID */, QQLoginHelper.QQ_OpenId);
            ServiceProviderManager.RequestJson(url, "GetQQUserInfo", function (result){
                GameDebuger.Log("RequestQQUserInfo：" + result, null);
                if (System.String.IsNullOrEmpty(result)){
                    GameDebuger.LogError("RequestQQUserInfo result is null", null);
                }
                else {
                }
            }, true, true, null);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(QQLoginHelper);
var QQOpenIDInfo = {
    fullname: "QQOpenIDInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.client_id = null;
            this.openid = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(QQOpenIDInfo);
var SdkBaseView = {
    fullname: "SdkBaseView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkBaseView.NAME = "SdkBaseView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.PreLogin = null;
            this.GameCenter = null;
            this.HidePos = null;
            this.GameCenterBarTrans = null;
            this.IconBtn = null;
            this.BarTrans = null;
            this.AccountBtn = null;
            this.BackBtn = null;
            this.GameCenterHidePosTrans = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.PreLogin = root.Find("PreLogin");
            this.GameCenter = root.Find("GameCenter");
            this.HidePos = root.Find("PreLogin/HidePos");
            this.GameCenterBarTrans = root.Find("GameCenterBar");
            this.IconBtn = root.Find("GameCenterBar/IconBtn").GetComponent$1(UIButton.ctor);
            this.BarTrans = root.Find("GameCenterBar/Bar");
            this.AccountBtn = root.Find("GameCenterBar/Bar/AccountBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("GameCenterBar/Bar/BackBtn").GetComponent$1(UIButton.ctor);
            this.GameCenterHidePosTrans = root.Find("GameCenter/HidePos");
        }
    }
};
JsTypes.push(SdkBaseView);
var SdkBindCodeView = {
    fullname: "SdkBindCodeView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkBindCodeView.NAME = "SdkBindCodeView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AccoutInput = null;
            this.GetCodeBtn = null;
            this.BackBtn = null;
            this.TitleLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.AccoutInput = root.Find("AccoutInput").GetComponent$1(UIInput.ctor);
            this.GetCodeBtn = root.Find("GetCodeBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
            this.TitleLabel = root.Find("TitleLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkBindCodeView);
var SdkBindConfirmView = {
    fullname: "SdkBindConfirmView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkBindConfirmView.NAME = "SdkBindConfirmView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TitleLabel = null;
            this.CodeInput = null;
            this.CommitBtn = null;
            this.ReSendCodeBtn = null;
            this.BackBtn = null;
            this.PasswordInput = null;
            this.PasswordInput2 = null;
            this.SendCodeLbl = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.TitleLabel = root.Find("TitleLabel").GetComponent$1(UILabel.ctor);
            this.CodeInput = root.Find("CodeInput").GetComponent$1(UIInput.ctor);
            this.CommitBtn = root.Find("CommitBtn").GetComponent$1(UIButton.ctor);
            this.ReSendCodeBtn = root.Find("ReSendCodeBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
            this.PasswordInput = root.Find("PasswordInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput2 = root.Find("PasswordInput2").GetComponent$1(UIInput.ctor);
            this.SendCodeLbl = root.Find("ReSendCodeBtn/Label").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkBindConfirmView);
var SdkBindView = {
    fullname: "SdkBindView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkBindView.NAME = "SdkBindView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.WeixinBtn = null;
            this.PhoneBtn = null;
            this.QQBtn = null;
            this.BackBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.WeixinBtn = root.Find("WeixinBtn").GetComponent$1(UIButton.ctor);
            this.PhoneBtn = root.Find("PhoneBtn").GetComponent$1(UIButton.ctor);
            this.QQBtn = root.Find("QQBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkBindView);
var SdkFindPasswordConfirmView = {
    fullname: "SdkFindPasswordConfirmView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkFindPasswordConfirmView.NAME = "SdkFindPasswordConfirmView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CodeInput = null;
            this.PasswordInput = null;
            this.PasswordInput2 = null;
            this.ConfirmBtn = null;
            this.ReSendBtn = null;
            this.BackBtn = null;
            this.SendCodeLbl = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CodeInput = root.Find("CodeInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput = root.Find("PasswordInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput2 = root.Find("PasswordInput2").GetComponent$1(UIInput.ctor);
            this.ConfirmBtn = root.Find("ConfirmBtn").GetComponent$1(UIButton.ctor);
            this.ReSendBtn = root.Find("ReSendBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
            this.SendCodeLbl = root.Find("ReSendBtn/Label").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkFindPasswordConfirmView);
var SdkFindPasswordView = {
    fullname: "SdkFindPasswordView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkFindPasswordView.NAME = "SdkFindPasswordView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AccoutInput = null;
            this.GetCodeBtn = null;
            this.BackBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.AccoutInput = root.Find("AccoutInput").GetComponent$1(UIInput.ctor);
            this.GetCodeBtn = root.Find("GetCodeBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkFindPasswordView);
var SdkGameCenterView = {
    fullname: "SdkGameCenterView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkGameCenterView.NAME = "SdkGameCenterView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.BindBtn = null;
            this.ModifyPasswordBtn = null;
            this.ChangeAccountBtn = null;
            this.ModifyNameBtn = null;
            this.AvatarIcon = null;
            this.NameLabel = null;
            this.UIDLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.BindBtn = root.Find("BindBtn").GetComponent$1(UIButton.ctor);
            this.ModifyPasswordBtn = root.Find("ModifyPasswordBtn").GetComponent$1(UIButton.ctor);
            this.ChangeAccountBtn = root.Find("ChangeAccountBtn").GetComponent$1(UIButton.ctor);
            this.ModifyNameBtn = root.Find("ModifyNameBtn").GetComponent$1(UIButton.ctor);
            this.AvatarIcon = root.Find("AccountInfo/AvatarIcon").GetComponent$1(UISprite.ctor);
            this.NameLabel = root.Find("AccountInfo/NameLabel").GetComponent$1(UILabel.ctor);
            this.UIDLabel = root.Find("AccountInfo/UIDLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkGameCenterView);
var SdkLastAccountItem = {
    fullname: "SdkLastAccountItem",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkLastAccountItem.NAME = "SdkLastAccountItem";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.LastAccountItemBtn = null;
            this.LastLabel = null;
            this.LastIcon = null;
            this.DeleteBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.LastAccountItemBtn = root.GetComponent$1(UIButton.ctor);
            this.LastLabel = root.Find("LastLabel").GetComponent$1(UILabel.ctor);
            this.LastIcon = root.Find("LastIcon").GetComponent$1(UISprite.ctor);
            this.DeleteBtn = root.Find("DeleteBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkLastAccountItem);
var SdkModifyPasswordConfirmView = {
    fullname: "SdkModifyPasswordConfirmView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkModifyPasswordConfirmView.NAME = "SdkModifyPasswordConfirmView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CodeInput = null;
            this.PasswordInput1 = null;
            this.PasswordInput2 = null;
            this.ConfirmBtn = null;
            this.GetCodeBtn = null;
            this.BackBtn = null;
            this.SendCodeLbl = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CodeInput = root.Find("CodeInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput1 = root.Find("PasswordInput1").GetComponent$1(UIInput.ctor);
            this.PasswordInput2 = root.Find("PasswordInput2").GetComponent$1(UIInput.ctor);
            this.ConfirmBtn = root.Find("ConfirmBtn").GetComponent$1(UIButton.ctor);
            this.GetCodeBtn = root.Find("GetCodeBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
            this.SendCodeLbl = root.Find("GetCodeBtn/Label").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkModifyPasswordConfirmView);
var SdkModifyPasswordView = {
    fullname: "SdkModifyPasswordView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkModifyPasswordView.NAME = "SdkModifyPasswordView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AccoutInput = null;
            this.GetCodeBtn = null;
            this.BackBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.AccoutInput = root.Find("AccoutInput").GetComponent$1(UIInput.ctor);
            this.GetCodeBtn = root.Find("GetCodeBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkModifyPasswordView);
var SdkNotifyTip = {
    fullname: "SdkNotifyTip",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkNotifyTip.NAME = "SdkNotifyTip";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.TipLabel = null;
            this.commitBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.TipLabel = root.Find("TipLabel").GetComponent$1(UILabel.ctor);
            this.commitBtn = root.Find("commitBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkNotifyTip);
var SdkPlatformLoginView = {
    fullname: "SdkPlatformLoginView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkPlatformLoginView.NAME = "SdkPlatformLoginView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AccoutInput = null;
            this.PasswordInput = null;
            this.FindpasswordBtn = null;
            this.RegisterBtn = null;
            this.EnterBtn = null;
            this.BackBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.AccoutInput = root.Find("AccoutInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput = root.Find("PasswordInput").GetComponent$1(UIInput.ctor);
            this.FindpasswordBtn = root.Find("FindpasswordBtn").GetComponent$1(UIButton.ctor);
            this.RegisterBtn = root.Find("RegisterBtn").GetComponent$1(UIButton.ctor);
            this.EnterBtn = root.Find("EnterBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkPlatformLoginView);
var SdkPlatformRegisterView = {
    fullname: "SdkPlatformRegisterView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkPlatformRegisterView.NAME = "SdkPlatformRegisterView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.AccoutInput = null;
            this.RegisterBtn = null;
            this.BackBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.AccoutInput = root.Find("AccoutInput").GetComponent$1(UIInput.ctor);
            this.RegisterBtn = root.Find("RegisterBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkPlatformRegisterView);
var SdkQuickLoginView = {
    fullname: "SdkQuickLoginView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkQuickLoginView.NAME = "SdkQuickLoginView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.LoginBtn = null;
            this.LastAccountBtn = null;
            this.PlatformBtn = null;
            this.TencentBtn = null;
            this.AccountGrid = null;
            this.LastIcon = null;
            this.LastLabel = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.LoginBtn = root.Find("LoginButton").GetComponent$1(UIButton.ctor);
            this.LastAccountBtn = root.Find("LastAccount").GetComponent$1(UIButton.ctor);
            this.PlatformBtn = root.Find("PlatformBtn").GetComponent$1(UIButton.ctor);
            this.TencentBtn = root.Find("TencentBtn").GetComponent$1(UIButton.ctor);
            this.AccountGrid = root.Find("AccountGrid").GetComponent$1(UIGrid.ctor);
            this.LastIcon = root.Find("LastAccount/LastIcon").GetComponent$1(UISprite.ctor);
            this.LastLabel = root.Find("LastAccount/LastLabel").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkQuickLoginView);
var SdkRegisterConfirmView = {
    fullname: "SdkRegisterConfirmView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkRegisterConfirmView.NAME = "SdkRegisterConfirmView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.CodeInput = null;
            this.PasswordInput = null;
            this.PasswordInput2 = null;
            this.RegisterBtn = null;
            this.ReSendBtn = null;
            this.BackBtn = null;
            this.SendCodeLbl = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.CodeInput = root.Find("CodeInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput = root.Find("PasswordInput").GetComponent$1(UIInput.ctor);
            this.PasswordInput2 = root.Find("PasswordInput2").GetComponent$1(UIInput.ctor);
            this.RegisterBtn = root.Find("RegisterBtn").GetComponent$1(UIButton.ctor);
            this.ReSendBtn = root.Find("ReSendBtn").GetComponent$1(UIButton.ctor);
            this.BackBtn = root.Find("BackBtn").GetComponent$1(UIButton.ctor);
            this.SendCodeLbl = root.Find("ReSendBtn/Label").GetComponent$1(UILabel.ctor);
        }
    }
};
JsTypes.push(SdkRegisterConfirmView);
var SdkSelectLoginView = {
    fullname: "SdkSelectLoginView",
    baseTypeName: "BaseView",
    staticDefinition: {
        cctor: function (){
            SdkSelectLoginView.NAME = "SdkSelectLoginView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.QuickLoginBtn = null;
            this.PlatformLoginBtn = null;
            this.QQLoginBtn = null;
            BaseView.ctor.call(this);
        },
        InitElementBinding: function (){
            var root = this.get_gameObject().get_transform();
            this.QuickLoginBtn = root.Find("QuickLogin").GetComponent$1(UIButton.ctor);
            this.PlatformLoginBtn = root.Find("PlatformLogin").GetComponent$1(UIButton.ctor);
            this.QQLoginBtn = root.Find("QQLogin").GetComponent$1(UIButton.ctor);
        }
    }
};
JsTypes.push(SdkSelectLoginView);
var AppStoreInAppManager = {
    fullname: "AppStoreInAppManager",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            AppStoreInAppManager._instance = null;
        },
        Instance$$: "AppStoreInAppManager",
        get_Instance: function (){
            return AppStoreInAppManager._instance;
        },
        Setup: function (){
            GameDebuger.Log("AppStoreInAppManager Setup...", null);
            if (UnityEngine.Object.op_Equality(UnityEngine.GameObject.Find("AppStoreInAppManager"), null)){
                var obj = new UnityEngine.GameObject.ctor$$String("AppStoreInAppManager");
                obj.AddComponent$1(AppStoreInAppManager.ctor);
                UnityEngine.Object.DontDestroyOnLoad(obj);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._hasInit = false;
            this._hasWaitRestoredPurchases = false;
            this.onProductListReceived = null;
            this.onProductListRequestFailed = null;
            this.onBaoyugamePurchaseSuccessed = null;
            this.onBaoyugamePurchaseFailed = null;
            this.onBaoyugamePurchaseCancel = null;
            this._orderDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        CanMakePayments$$: "System.Boolean",
        get_CanMakePayments: function (){
            return IOSInAppPurchaseManager.get_JsbInstance().get_IsInAppPurchasesEnabled();
        },
        ProductListHasReceived$$: "System.Boolean",
        get_ProductListHasReceived: function (){
            return IOSInAppPurchaseManager.get_JsbInstance().get_Products() != null && IOSInAppPurchaseManager.get_JsbInstance().get_Products().get_Count() > 0;
        },
        Awake: function (){
            GameDebuger.Log("AppStoreInAppManager Awake...", null);
            AppStoreInAppManager._instance = this;
        },
        OnDestroy: function (){
            GameDebuger.Log("AppStoreInAppManager OnDestroy...", null);
            this.Destroy();
            AppStoreInAppManager._instance = null;
        },
        Init: function (productIdentifiers){
            if (!this._hasInit){
                this._hasInit = true;
                for (var i = 0; i < productIdentifiers.length; i++){
                    IOSInAppPurchaseManager.get_JsbInstance().AddProductId$$String(productIdentifiers[i]);
                }
                IOSInAppPurchaseManager.add_OnStoreKitInitComplete($CreateDelegate(this, this.OnStoreKitInitComplete));
                IOSInAppPurchaseManager.add_OnTransactionComplete($CreateDelegate(this, this.OnTransactionComplete));
                this._hasWaitRestoredPurchases = false;
                IOSInAppPurchaseManager.get_JsbInstance().LoadStore();
            }
        },
        Destroy: function (){
            if (this._hasInit){
                IOSInAppPurchaseManager.remove_OnStoreKitInitComplete($CreateDelegate(this, this.OnStoreKitInitComplete));
                IOSInAppPurchaseManager.remove_OnTransactionComplete($CreateDelegate(this, this.OnTransactionComplete));
            }
        },
        OnEnable: function (){
            GameDebuger.Log("AppStoreInAppManager OnEnable...", null);
        },
        OnDisable: function (){
            GameDebuger.Log("AppStoreInAppManager OnDisable...", null);
        },
        OnStoreKitInitComplete: function (result){
            if (result.get_IsSucceeded()){
                GameDebuger.Log("OnStoreKitInitComplete Success", null);
                var products = IOSInAppPurchaseManager.get_JsbInstance().get_Products();
                for (var i = 0; i < products.get_Count(); i++){
                    GameDebuger.Log(products.get_Item$$Int32(i).toString(), null);
                }
            }
            else {
                GameDebuger.LogError("Error code: " + result.get_Error().get_Code() + "\n" + "Error description:" + result.get_Error().get_Description(), null);
            }
        },
        OnTransactionComplete: function (result){
            GameDebuger.Log("OnTransactionComplete: " + result.get_ProductIdentifier(), null);
            GameDebuger.Log("OnTransactionComplete: state: " + result.get_State(), null);
            GameDebuger.Log("OnTransactionComplete: transactionIdentifier " + result.get_TransactionIdentifier(), null);
            switch (result.get_State()){
                case 0:
                    this.productPurchaseAwaitingConfirmationEvent(result);
                    break;
                case 3:
                    this.productPurchaseAwaitingConfirmationEvent(result);
                    break;
                case 2:
                    break;
                case 1:
                    GameDebuger.Log("Transaction failed with error, code: " + result.get_Error().get_Code(), null);
                    GameDebuger.Log("Transaction failed with error, description: " + result.get_Error().get_Description(), null);
                    this.FinishTransaction(result.get_TransactionIdentifier());
                    this.RaiseBaoyugamePurchaseFailed(result.get_Error().get_Description());
                    break;
            }
        },
        FinishTransaction: function (transactionIdentifier){
            UnityEngine.Debug.Log$$Object("FinishTransaction, transactionIdentifier: " + transactionIdentifier);
            IOSInAppPurchaseManager.get_JsbInstance().FinishTransaction(transactionIdentifier);
        },
        RestoreCompletedTransactions: function (){
            if (this._hasWaitRestoredPurchases){
                this._hasWaitRestoredPurchases = false;
                IOSInAppPurchaseManager.get_JsbInstance().RestorePurchases();
            }
        },
        PurchaseProduct: function (productIdentifier, quantity, orderId){
            if (this._orderDic.ContainsKey(productIdentifier)){
                this._orderDic.set_Item$$TKey(productIdentifier, orderId);
            }
            else {
                this._orderDic.Add(productIdentifier, orderId);
            }
            GameDebuger.Log("PurchaseProduct .. productIdentifier: " + productIdentifier + ", quantity: " + quantity + ", orderId: " + orderId, null);
            IOSInAppPurchaseManager.get_JsbInstance().BuyProduct(productIdentifier);
        },
        productPurchaseAwaitingConfirmationEvent: function (result){
            if (this._orderDic.ContainsKey(result.get_ProductIdentifier())){
                var orderId = this._orderDic.get_Item$$TKey(result.get_ProductIdentifier());
                this._orderDic.Remove(result.get_ProductIdentifier());
                this.StartCoroutine$$IEnumerator(this.SendReceiptToServer(result, orderId));
            }
            else {
                if (ModelManager.get_Player() == null || ModelManager.get_Player().GetPlayerId() == 0){
                    this._hasWaitRestoredPurchases = true;
                    return;
                }
                ServiceProviderManager.RequestOrderId(GameSetting.Channel, ModelManager.get_Player().GetPlayerId().toString(), result.get_ProductIdentifier(), 0, GameSetting.LoginWay, GameSetting.Channel, GameSetting.BundleId, $CreateAnonymousDelegate(this, function (dto){
                    if (dto.code == 0){
                        this.StartCoroutine$$IEnumerator(this.SendReceiptToServer(result, dto.orderId));
                    }
                    else {
                        GameDebuger.Log(dto.msg, null);
                        TipManager.AddTip(dto.msg, false, false, "");
                        RequestLoadingTip.Reset();
                    }
                }));
            }
        },
        SendReceiptToServer: function*(result, orderId){
            var tpl = IOSInAppPurchaseManager.get_JsbInstance().GetProductById(result.get_ProductIdentifier());
            var receipt = result.get_Receipt();
            var local = tpl == null ? "" : tpl.get_CountryCode();
            var price = tpl == null ? "" : (tpl.get_CurrencyCode() + "_" + tpl.get_Price());
            var form = new UnityEngine.WWWForm.ctor();
            form.AddField$$String$$String("receipt", receipt);
            form.AddField$$String$$String("orderId", orderId);
            form.AddField$$String$$String("deviceId", BaoyugameSdk.getUUID());
            if (tpl != null){
                form.AddField$$String$$String("local", local);
                form.AddField$$String$$String("price", price);
            }
            var payUrl = GameSetting.PAY_SERVER + "/gpayc/tcappstore/validate.json";
            GameDebuger.Log(System.String.Format$$String$$Object$$Object$$Object("payUrl={0} receipt={1} orderId={2}", payUrl, receipt, orderId), null);
            var www = new UnityEngine.WWW.ctor$$String$$WWWForm(payUrl, form);
            try{
                yield(www);
                GameDebuger.Log("purchased product id = " + result.get_ProductIdentifier(), null);
                if (System.String.IsNullOrEmpty(www.get_error())){
                    if (!System.String.IsNullOrEmpty(www.get_text())){
                        var json = www.get_text();
                        GameDebuger.Log(json, null);
                        var dto = JsHelper.ToObject(ValidateJsonDto.ctor, json);
                        if (dto.code == 0){
                            this.FinishTransaction(result.get_TransactionIdentifier());
                            this.RaiseBaoyugamePurchaseSuccessed();
                            RequestLoadingTip.Reset();
                        }
                        else if (dto.code == 8){
                            this.FinishTransaction(result.get_TransactionIdentifier());
                            RequestLoadingTip.Reset();
                        }
                        else {
                            this.RaiseBaoyugamePurchaseFailed("statusCode=" + dto.msg);
                        }
                    }
                    else {
                        this.RaiseBaoyugamePurchaseFailed(null);
                    }
                }
                else {
                    this.RaiseBaoyugamePurchaseFailed(www.get_error());
                }
            }
            finally{
                www.Dispose();
            }
        },
        RaiseBaoyugamePurchaseSuccessed: function (){
            if (this.onBaoyugamePurchaseSuccessed != null){
                this.onBaoyugamePurchaseSuccessed();
            }
        },
        RaiseBaoyugamePurchaseFailed: function (error){
            RequestLoadingTip.Reset();
            if (this.onBaoyugamePurchaseFailed != null){
                this.onBaoyugamePurchaseFailed(error);
            }
        },
        RaiseBaoyugamePurchaseCancel: function (error){
            RequestLoadingTip.Reset();
            if (this.onBaoyugamePurchaseCancel != null){
                this.onBaoyugamePurchaseCancel(error);
            }
        }
    }
};
JsTypes.push(AppStoreInAppManager);
var ServiceProviderManager = {
    fullname: "ServiceProviderManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            ServiceProviderManager._jsonDics = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
        },
        RequestSdkAccountLogin$$String$$Int32$$Int32$$Int32$$Action$1$AccountResponse: function (deviceId, appId, cpId, version, downLoadFinishCallBack){
            var url = GameSetting.SSO_SERVER + "/sdkc/account/login.json?deviceId={0}&appId={1}&cpId={2}&version={3}";
            url = System.String.Format$$String$$Object$Array(url, [deviceId, appId, cpId, version]);
            ServiceProviderManager.RequestJson(url, "SdkAccountLogin", function (json){
                var data = JsHelper.ToObject(AccountResponse.ctor, json);
                downLoadFinishCallBack(data);
            }, true, true, null);
        },
        RequestSdkAccountLogin$$String$$String$$Int32$$Int32$$Int32$$Action$1$AccountResponse: function (name, password, appId, cpId, version, downLoadFinishCallBack){
            name = UnityEngine.WWW.EscapeURL$$String(name);
            var url = GameSetting.SSO_SERVER + "/sdkc/account/login.json?name={0}&password={1}&appId={2}&cpId={3}&version={4}";
            url = System.String.Format$$String$$Object$Array(url, [name, password, appId, cpId, version]);
            ServiceProviderManager.RequestJson(url, "SdkAccountLogin", function (json){
                var data = JsHelper.ToObject(AccountResponse.ctor, json);
                downLoadFinishCallBack(data);
            }, true, true, null);
        },
        RequestVerifyCode: function (sid, code, downLoadFinishCallBack){
            sid = UnityEngine.WWW.EscapeURL$$String(sid);
            var url = GameSetting.SSO_SERVER + "/sdkc/account/activate.json?sid={0}&code={1}";
            url = System.String.Format$$String$$Object$$Object(url, sid, code);
            ServiceProviderManager.RequestJson(url, "RequestVerifyCode", function (json){
                var data = JsHelper.ToObject(AccountResponse.ctor, json);
                downLoadFinishCallBack(data);
            }, true, true, null);
        },
        RequestTokenByGM: function (playerId, password, downLoadFinishCallBack){
            var url = GameSetting.SSO_SERVER + "/gsso/di3dkVfteLufD09.jsp?p={0}&playerId={1}";
            url = System.String.Format$$String$$Object$$Object(url, password, playerId);
            ServiceProviderManager.RequestJson(url, "RequestTokenByGM", function (token){
                token = token.Replace$$String$$String("\r", "");
                token = token.Replace$$String$$String("\n", "");
                downLoadFinishCallBack(token);
            }, true, true, null);
        },
        RequestSsoAccountLogin: function (sid, channel, subChannel, loginWay, appId, platform, deviceId, p, bundleId, downLoadFinishCallBack){
            var accountId = null;
            sid = UnityEngine.WWW.EscapeURL$$String(sid);
            var url = GameSetting.SSO_SERVER + "/gssoc/account/login.json?sid={0}&aid={1}&channel={2}&subChannel={3}&loginWay={4}&appId={5}&platform={6}&deviceId={7}&p={8}&bundleId={9}";
            url = System.String.Format$$String$$Object$Array(url, [sid, accountId, channel, subChannel, loginWay, appId, platform, deviceId, p, bundleId]);
            ServiceProviderManager.RequestJson(url, "SsoAccountLogin", function (json){
                var data = JsHelper.ToObject(LoginAccountDto.ctor, json);
                downLoadFinishCallBack(data);
            }, true, true, null);
        },
        RequestOrderId: function (channel, playerId, payItemId, money, payWay, p, bundleId, requestFinishCallBack){
            var url = GameSetting.PAY_SERVER + "/gpayc/order/id.json?channel={0}&playerId={1}&payItemId={2}&money={3}&payWay={4}&p={5}&bundleId={6}";
            url = System.String.Format$$String$$Object$Array(url, [channel, playerId, payItemId, money, payWay, p, bundleId]);
            var headers = null;
            if (GameSetting.get_IsOriginWinPlatform()){
                headers = (function (){
                    var $v36 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
                    $v36.Add("x-cilugame-qr", "pay");
                    return $v36;
                }).call(this);
            }
            ServiceProviderManager.RequestJson(url, "RequestOrderId", function (json){
                GameDebuger.Log("RequestSsoAccountLogin return = " + json, null);
                var data = JsHelper.ToObject(OrderJsonDto.ctor, json);
                requestFinishCallBack(data);
            }, false, true, headers);
        },
        RequestOrderItems: function (channel, bundleId, requestFinishCallBack){
            var url = GameSetting.PAY_SERVER + "/gpayc/order/items.json?channel={0}&bundleId={1}";
            url = System.String.Format$$String$$Object$$Object(url, channel, bundleId);
            ServiceProviderManager.RequestJson(url, "RequestOrderItems", function (json){
                GameDebuger.Log("RequestOrderItems return = " + json, null);
                var data = JsHelper.ToObject(OrderItemsJsonDto.ctor, json);
                requestFinishCallBack(data);
            }, false, true, null);
        },
        RequestDeductions: function (openid, openkey, pf, pfkey, playerId, money, payWay, payItemId, requestFinishCallBack){
            var url = GameSetting.PAY_SERVER + "/gpayc/pay/tencent.json?openid={0}&openkey={1}&pf={2}&pfkey={3}&playerId={4}&money={5}&payWay={6}&payItemId={7}";
            url = System.String.Format$$String$$Object$Array(url, [openid, openkey, pf, pfkey, playerId, money, payWay, payItemId]);
            ServiceProviderManager.RequestJson(url, "RequestDeductions", function (json){
                GameDebuger.Log("RequestRequestDeductions return = " + json, null);
                var data = JsHelper.ToObject(PayResponse.ctor, json);
                requestFinishCallBack(data);
            }, false, true, null);
        },
        RequestJson: function (url, jsonName, downLoadFinishCallBack, needLock, refresh, headers){
            if (!refresh && ServiceProviderManager._jsonDics.ContainsKey(jsonName)){
                var json = ServiceProviderManager._jsonDics.get_Item$$TKey(jsonName);
                downLoadFinishCallBack(json);
                return;
            }
            GameDebuger.Log("RequestJson " + url, null);
            if (needLock){
                RequestLoadingTip.Show("RequestJson", true, true, 0);
            }
            var hashHeaders = null;
            if (headers != null){
                hashHeaders = new System.Collections.Hashtable.ctor();
                var $it70 = headers.GetEnumerator();
                while ($it70.MoveNext()){
                    var header = $it70.get_Current();
                    hashHeaders.set_Item$$Object(header.get_Key(), header.get_Value());
                }
            }
            HttpController.get_Instance().DownLoad(url, function (byteArray){
                if (needLock){
                    RequestLoadingTip.Stop("RequestJson");
                }
                var json = byteArray.ToUTF8String();
                ServiceProviderManager._jsonDics.set_Item$$TKey(jsonName, json);
                downLoadFinishCallBack(json);
            }, null, function (exception){
                if (needLock){
                    RequestLoadingTip.Stop("RequestJson");
                }
                GameDebuger.Log(System.String.Format$$String$$Object$$Object("RequestJson url={0} error={1}", url, exception.toString()), null);
                downLoadFinishCallBack(null);
            }, false, 1, hashHeaders);
        },
        RequestPlayerDelete: function (playerId, gameServerId, game, downLoadFinishCallBack){
            var url = GameSetting.SSO_SERVER + "/gssoc/account/playerDelete.json?playerId={0}&gameServerId={1}&game={2}&token={3}";
            url = System.String.Format$$String$$Object$Array(url, [playerId, gameServerId, game, ServerManager.get_Instance().loginAccountDto.token]);
            ServiceProviderManager.RequestJson(url, "PlayerDelete", function (json){
                var data = JsHelper.ToObject(PlayerDeleteResponse.ctor, json);
                downLoadFinishCallBack(data);
            }, true, true, null);
        },
        RequestQRCodeSid: function (callback){
            var url = System.String.Format$$String$$Object("{0}/gsso/qr/sid.jsp", GameSetting.SSO_SERVER);
            ServiceProviderManager.RequestJson(url, "QRCodeSid", function (s){
                if (s != null){
                    callback(JsHelper.ToObject(QrVerifyDto.ctor, s));
                }
                else {
                    callback(null);
                }
            }, true, true, null);
        },
        RequestQRCodeLoginState: function (sid, callback){
            var url = System.String.Format$$String$$Object$$Object("{0}/gsso/qr/verify.jsp?sid={1}", GameSetting.SSO_SERVER, sid);
            ServiceProviderManager.RequestJson(url, "QRCodeLogin", function (s){
                if (s != null){
                    callback(JsHelper.ToObject(QrVerifyDto.ctor, s));
                }
                else {
                    callback(null);
                }
            }, false, true, null);
        },
        RequestQRCodeLogin: function (sid, token, callback){
            var url = System.String.Format$$String$$Object$$Object$$Object("{0}/gsso/qr/login.jsp?sid={1}&token={2}", GameSetting.SSO_SERVER, sid, token);
            var headers = (function (){
                var $v37 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
                $v37.Add("x-cilugame-qr", "login");
                return $v37;
            }).call(this);
            ServiceProviderManager.RequestJson(url, "QRCodeLogin", function (s){
                if (s != null){
                    callback(JsHelper.ToObject(QrVerifyDto.ctor, s));
                }
                else {
                    callback(null);
                }
            }, true, true, headers);
        },
        RequestQRCodeEnsureLogin: function (sid, extra, callback){
            var url = System.String.Format$$String$$Object$$Object$$Object("{0}/gsso/qr/confirm.jsp?sid={1}&extra={2}", GameSetting.SSO_SERVER, sid, extra);
            var headers = (function (){
                var $v38 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
                $v38.Add("x-cilugame-qr", "confirm");
                return $v38;
            }).call(this);
            ServiceProviderManager.RequestJson(url, "QRCodeLogin", function (s){
                GameDebuger.Log("RequestQRCodeEnsureLogin：" + s, null);
                if (s != null){
                    callback(JsHelper.ToObject(QrVerifyDto.ctor, s));
                }
                else {
                    callback(null);
                }
            }, true, true, headers);
        },
        RequestQRCodeScanPaySuccess: function (orderId){
            var url = System.String.Format$$String$$Object$$Object("{0}/gpayc/order/confirm.json?orderId={1}", GameSetting.PAY_SERVER, orderId);
            var headers = (function (){
                var $v39 = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, System.String.ctor);
                $v39.Add("x-cilugame-qr", "pay");
                return $v39;
            }).call(this);
            ServiceProviderManager.RequestJson(url, "QRCodeLogin", null, false, true, headers);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ServiceProviderManager);
var SPChannel = {
    fullname: "SPChannel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.name = null;
            this.alias = null;
            this.bundleId = null;
            this.projmods = null;
            this.symbol = null;
            this.platforms = null;
            this.domains = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SPChannel);
var SPSdkManager = {
    fullname: "SPSdkManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            SPSdkManager.instance = new SPSdkManager.ctor();
            SPSdkManager._spChannelDic = null;
            SPSdkManager.Config_Path = "Assets/Editor/BuildTools/Configs/SPChannelConfig{0}.json";
        },
        Instance$$: "SPSdkManager",
        get_Instance: function (){
            return SPSdkManager.instance;
        },
        SpChannelDic: function (configSuffix, forceLoad){
            if (forceLoad){
                SPSdkManager.LoadSPChannelConfigAtEditor(configSuffix);
            }
            else {
                if (SPSdkManager._spChannelDic == null){
                    SPSdkManager.LoadSPChannelConfigAtEditor(configSuffix);
                }
            }
            return SPSdkManager._spChannelDic;
        },
        LoadSPChannelConfigAtEditor: function (configSuffix){
            if (configSuffix == null){
                configSuffix = "";
            }
            if (!System.String.IsNullOrEmpty(configSuffix)){
                configSuffix = "_" + configSuffix;
            }
            SPSdkManager._spChannelDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SPChannel.ctor);
            var path = System.String.Format$$String$$Object("Assets/Editor/BuildTools/Configs/SPChannelConfig{0}.json" /* Config_Path */, configSuffix);
            GameDebuger.Log("path=" + path, null);
            var json = AssetPipeline.FileHelper.ReadAllText(path);
            if (!System.String.IsNullOrEmpty(json)){
                var spChannels = JsHelper.ToCollection(System.Collections.Generic.List$1.ctor, SPChannel.ctor, json);
                for (var i = 0; i < spChannels.get_Count(); i++){
                    var channel = spChannels.get_Item$$Int32(i);
                    SPSdkManager._spChannelDic.set_Item$$TKey(channel.name, channel);
                }
            }
        },
        LoadSPChannelConfig: function (callback){
            SPSdkManager._spChannelDic = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, SPChannel.ctor);
            callback(true);
        },
        GetChannelBundleId: function (id){
            var info = null;
            if ((function (){
                var $1 = $Ref(null, info);
                var $res = SPSdkManager._spChannelDic.TryGetValue(id, $1);
                info = $1.Value;
                return $res;
            }).call(this)){
                return info.bundleId;
            }
            else {
                return "";
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.WaitingLoginResult = false;
            this.OnInitCallback = null;
            this.OnLoginSuccess = null;
            this.OnLoginFail = null;
            this.OnLoginCancel = null;
            this.OnLogoutNotify = null;
            this.OnLogoutCallback = null;
            this.OnExitCallback = null;
            this.OnNoExiterProvideCallback = null;
            this.OnPayCallback = null;
            System.Object.ctor.call(this);
        },
        add_OnInitCallback: function (value){
            this.OnInitCallback = $CombineDelegates(this.OnInitCallback, value);
        },
        remove_OnInitCallback: function (value){
            this.OnInitCallback = $RemoveDelegate(this.OnInitCallback, value);
        },
        add_OnLoginSuccess: function (value){
            this.OnLoginSuccess = $CombineDelegates(this.OnLoginSuccess, value);
        },
        remove_OnLoginSuccess: function (value){
            this.OnLoginSuccess = $RemoveDelegate(this.OnLoginSuccess, value);
        },
        add_OnLoginFail: function (value){
            this.OnLoginFail = $CombineDelegates(this.OnLoginFail, value);
        },
        remove_OnLoginFail: function (value){
            this.OnLoginFail = $RemoveDelegate(this.OnLoginFail, value);
        },
        add_OnLoginCancel: function (value){
            this.OnLoginCancel = $CombineDelegates(this.OnLoginCancel, value);
        },
        remove_OnLoginCancel: function (value){
            this.OnLoginCancel = $RemoveDelegate(this.OnLoginCancel, value);
        },
        add_OnLogoutNotify: function (value){
            this.OnLogoutNotify = $CombineDelegates(this.OnLogoutNotify, value);
        },
        remove_OnLogoutNotify: function (value){
            this.OnLogoutNotify = $RemoveDelegate(this.OnLogoutNotify, value);
        },
        add_OnLogoutCallback: function (value){
            this.OnLogoutCallback = $CombineDelegates(this.OnLogoutCallback, value);
        },
        remove_OnLogoutCallback: function (value){
            this.OnLogoutCallback = $RemoveDelegate(this.OnLogoutCallback, value);
        },
        add_OnExitCallback: function (value){
            this.OnExitCallback = $CombineDelegates(this.OnExitCallback, value);
        },
        remove_OnExitCallback: function (value){
            this.OnExitCallback = $RemoveDelegate(this.OnExitCallback, value);
        },
        add_OnNoExiterProvideCallback: function (value){
            this.OnNoExiterProvideCallback = $CombineDelegates(this.OnNoExiterProvideCallback, value);
        },
        remove_OnNoExiterProvideCallback: function (value){
            this.OnNoExiterProvideCallback = $RemoveDelegate(this.OnNoExiterProvideCallback, value);
        },
        add_OnPayCallback: function (value){
            this.OnPayCallback = $CombineDelegates(this.OnPayCallback, value);
        },
        remove_OnPayCallback: function (value){
            this.OnPayCallback = $RemoveDelegate(this.OnPayCallback, value);
        },
        CallbackInit: function (success){
            GameDebuger.Log("CallbackInit " + success, null);
            if (this.OnInitCallback != null){
                this.OnInitCallback(success);
            }
        },
        CallbackLoginSuccess: function (isGuest, sid){
            GameDebuger.Log(System.String.Format$$String$$Object$$Object("CallbackLoginSuccess isGuest={0} sid={1}", isGuest, sid), null);
            this.WaitingLoginResult = false;
            if (this.OnLoginSuccess != null){
                this.OnLoginSuccess(isGuest, sid);
            }
        },
        CallbackLoginFail: function (){
            GameDebuger.Log("CallbackLoginFail", null);
            this.WaitingLoginResult = false;
            if (this.OnLoginFail != null){
                this.OnLoginFail();
            }
        },
        CallbackLoginCancel: function (){
            GameDebuger.Log("CallbackLoginCancel", null);
            this.WaitingLoginResult = false;
            if (this.OnLoginCancel != null){
                this.OnLoginCancel();
            }
        },
        CallbackLogout: function (success){
            GameDebuger.Log("CallbackLogout " + success, null);
            if (this.OnLogoutCallback != null){
                this.OnLogoutCallback(success);
                this.OnLogoutCallback = null;
            }
            else {
                if (this.OnLogoutNotify != null){
                    this.OnLogoutNotify(success);
                }
            }
        },
        CallbackNoExiterProvide: function (){
            GameDebuger.Log("CallbackNoExiterProvide", null);
            if (this.OnNoExiterProvideCallback != null){
                this.OnNoExiterProvideCallback();
            }
        },
        CallbackExit: function (success){
            GameDebuger.Log("CallbackExit " + success, null);
            if (this.OnExitCallback != null){
                this.OnExitCallback(success);
            }
        },
        CallbackPay: function (success){
            GameDebuger.Log("CallbackPay " + success, null);
            if (this.OnPayCallback != null){
                this.OnPayCallback(success);
                this.OnPayCallback = null;
            }
        },
        Setup: function (){
            GameDebuger.Log("SPSDK Setup", null);
            SPSDK.Setup();
        },
        Init: function (callback){
            GameDebuger.Log("SPSDK Init", null);
            this.OnInitCallback = callback;
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                this.OnInitCallback(true);
            }
            else if (GameSetting.Channel == AgencyPlatform.Channel_demi){
                SdkLoginMessage.Instance.C2SdkInitRoot(LayerManager.get_Root().UIModuleRoot);
                this.OnInitCallback(true);
            }
            else {
                this.OnInitCallback(true);
            }
        },
        Login: function (){
            GameDebuger.Log("SPSDK Login", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame || GameSetting.get_GMMode() || GameSetting.get_IsOriginWinPlatform()){
                ProxyLoginModule.OpenTestSdk();
            }
            else if (GameSetting.Channel == AgencyPlatform.Channel_demi){
                SdkLoginMessage.Instance.C2SdkLogin();
            }
            else {
                this.OnLoginFail();
            }
        },
        Bind: function (){
            GameDebuger.Log("SPSDK Bind", null);
            this.OnLoginFail();
        },
        IsSupportLogout: function (){
            GameDebuger.Log("SPSDK IsSupportLogout", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                return true;
            }
            else {
                return true;
            }
        },
        Logout: function (callback){
            this.OnLogoutCallback = callback;
            GameDebuger.Log("SPSDK Logout", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                this.OnLogoutCallback(true);
            }
            else if (GameSetting.Channel == AgencyPlatform.Channel_demi){
                SdkLoginMessage.Instance.C2SdkLogout();
                this.OnLogoutCallback(true);
            }
            else {
                this.OnLogoutCallback(true);
            }
        },
        DoExiter: function (exitCallback, noExiterCallback){
            this.OnExitCallback = exitCallback;
            this.OnNoExiterProvideCallback = noExiterCallback;
            GameDebuger.Log("SPSDK DoExiter", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                this.OnNoExiterProvideCallback();
            }
            else {
                this.OnNoExiterProvideCallback();
            }
        },
        Exit: function (){
            GameDebuger.Log("SPSDK Exit", null);
            return;
        },
        Regster: function (account, uid){
            GameDebuger.Log(System.String.Format$$String$$Object$$Object("SPSDK Regster account={0} uid={1}", account, uid), null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame)
                return;
            return;
        },
        UpdateUserInfo: function (uid){
            if (System.String.IsNullOrEmpty(uid)){
                return;
            }
            GameDebuger.Log("SPSDK UpdateUserInfo uid=" + uid, null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame)
                return;
            return;
        },
        SubmitRoleData: function (uid, newRole, playerId, playerName, playerLv, serverId, serverName){
            GameDebuger.Log("SPSDK SubmitRoleData", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame)
                return;
            return;
        },
        GetChannel: function (){
            GameDebuger.Log("SPSDK GetChannelId", null);
            if (GameSetting.Channel != AgencyPlatform.Channel_cilugame && GameSetting.Channel != AgencyPlatform.Channel_demi){
                return !GameSetting.get_IsOriginWinPlatform() ? GameSetting.Channel : WinGameSetting.get_Channel();
            }
            else {
                return GameSetting.Channel;
            }
        },
        IsSupportUserCenter: function (){
            GameDebuger.Log("SPSDK IsSupportUserCenter", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                return false;
            }
            else {
                return false;
            }
        },
        EnterUserCenter: function (){
            GameDebuger.Log("SPSDK EnterUserCenter", null);
            return;
        },
        IsSupportBBS: function (){
            GameDebuger.Log("SPSDK IsSupportBBS", null);
            if (GameSetting.Channel == AgencyPlatform.Channel_cilugame){
                return false;
            }
            else {
                return false;
            }
        },
        EnterSdkBBS: function (){
            GameDebuger.Log("SPSDK EnterSdkBBS", null);
            return;
        },
        IsSupportShowOrHideToolbar: function (){
            GameDebuger.Log("SPSDK IsSupportShowOrHideToolbar", null);
            return false;
        },
        ShowFloatToolBar: function (){
            GameDebuger.Log("SPSDK ShowFloatToolBar", null);
            return;
        },
        HideFloatToolBar: function (){
            GameDebuger.Log("SPSDK HideFloatToolBar", null);
            return;
        },
        DoPay: function (orderSerial, productId, productName, productPrice, productCount, serverId, payNotifyUrl, payKey, channelOrderSerial, payCallback){
            this.OnPayCallback = payCallback;
            GameDebuger.Log("SPSDK DoPay", null);
            return;
        }
    }
};
JsTypes.push(SPSdkManager);
var AccountPlayerDto = {
    fullname: "AccountPlayerDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = 0;
            this.nickname = null;
            this.grade = 0;
            this.charactorId = 0;
            this.icon = 0;
            this.factionId = 0;
            this.gameServerId = 0;
            this.recentLoginTime = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AccountPlayerDto);
var AccountResponse = {
    fullname: "AccountResponse",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            this.data = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AccountResponse);
var AccountSession = {
    fullname: "AccountSession",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.sid = null;
            this.id = 0;
            this.appId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(AccountSession);
var DynamicServerInfo = {
    fullname: "DynamicServerInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.host = null;
            this.port = 0;
            this.runState = 0;
            this.serverId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(DynamicServerInfo);
var LoginAccountDto = {
    fullname: "LoginAccountDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            this.token = null;
            this.uid = null;
            this.firstRegister = false;
            this.accountId = 0;
            this.players = new System.Collections.Generic.List$1.ctor(AccountPlayerDto.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(LoginAccountDto);
var OrderJsonDto = {
    fullname: "OrderJsonDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            this.orderId = null;
            this.extra = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OrderJsonDto);
var OrderExtraJsonDto = {
    fullname: "OrderExtraJsonDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            this.tsiPayCburl = null;
            this.p = null;
            this.vivoAccessKey = null;
            this.vivoOrderAmount = null;
            this.vivoOrderNumber = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OrderExtraJsonDto);
var OrderItemsJsonDto = {
    fullname: "OrderItemsJsonDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.items = new System.Collections.Generic.List$1.ctor(OrderItemJsonDto.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OrderItemsJsonDto);
var OrderItemJsonDto = {
    fullname: "OrderItemJsonDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.id = null;
            this.cent = 0;
            this.gold = 0;
            this.goldOfAddition = 0;
            this.gameShopItemId = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(OrderItemJsonDto);
var PayExtInfo = {
    fullname: "PayExtInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.openid = null;
            this.openkey = null;
            this.pf = null;
            this.pfkey = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PayExtInfo);
var PayResponse = {
    fullname: "PayResponse",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ret = 0;
            this.msg = null;
            this.billno = null;
            this.balance = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(PayResponse);
var QrVerifyDto = {
    fullname: "QrVerifyDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            this.loginAccount = null;
            this.clientExtra = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(QrVerifyDto);
var SdkCallbackInfo = {
    fullname: "SdkCallbackInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.type = null;
            this.code = 0;
            this.data = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SdkCallbackInfo);
var ValidateJsonDto = {
    fullname: "ValidateJsonDto",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.code = 0;
            this.msg = null;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(ValidateJsonDto);
var TipManager = {
    fullname: "TipManager",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            TipManager.mDialogueText = null;
            TipManager.mTopDialogueText = null;
            TipManager.delayShowList = new System.Collections.Generic.List$1.ctor(TipManager.DelayTipStruct.ctor);
            TipManager.delayItemShowList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            TipManager.tipQueue = new System.Collections.Generic.Queue$1.ctor(TipManager.TipStruct.ctor);
            TipManager._isWaiting = true;
            TipManager._intervalDelayTime = 0.1;
            TipManager._coolDownName = "TipManagerTimer";
            TipManager.WaitingShowGainItemQueue = new System.Collections.Generic.Queue$1.ctor(System.String.ctor);
            TipManager.GainItemShowing = false;
        },
        Setup: function (){
            var floatTipPrefab = AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("FloatTipText");
            var floatTipEntryPrefab = AssetPipeline.ResourcePoolManager.get_Instance().LoadUI("DialogueHUDTextEntry");
            var dialogueHudText = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().FloatTipPanel.get_cachedGameObject(), floatTipPrefab);
            TipManager.mDialogueText = dialogueHudText.GetComponent$1(FloatTipText.ctor);
            TipManager.mDialogueText.prefab = floatTipEntryPrefab;
            dialogueHudText.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 70, 0));
            var topDialogueHudText = NGUITools.AddChild$$GameObject$$GameObject(LayerManager.get_Root().TopFloatTipPanel.get_cachedGameObject(), floatTipPrefab);
            TipManager.mTopDialogueText = topDialogueHudText.GetComponent$1(FloatTipText.ctor);
            TipManager.mTopDialogueText.prefab = floatTipEntryPrefab;
            topDialogueHudText.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, 70, 0));
        },
        CheckDelayShow: function (){
            for (var i = 0; i < TipManager.delayShowList.get_Count(); i++){
                var delayTipStruct = TipManager.delayShowList.get_Item$$Int32(i);
                TipManager.AddTip(delayTipStruct.tip, delayTipStruct.addToSystemNotify, false, "");
            }
            TipManager.delayShowList.Clear();
            for (var i = 0; i < TipManager.delayItemShowList.get_Count(); i++){
                TipManager.ShowGainItem(TipManager.delayItemShowList.get_Item$$Int32(i), false);
            }
            TipManager.delayItemShowList.Clear();
        },
        AddTip: function (tip, addToSystemNotify, delayShow, icon){
            if (System.String.IsNullOrEmpty(tip)){
                return;
            }
            if (delayShow){
                TipManager.delayShowList.Add(new TipManager.DelayTipStruct.ctor$$String$$Boolean(tip, addToSystemNotify));
            }
            else {
                if (addToSystemNotify){
                    GameDebuger.TODO("ModelManager.Chat.AddSystemNotifyFromTips(tip);");
                }
                TipManager.AddColorTip(tip, icon, UnityEngine.Color.get_white(), 0.5, false);
            }
        },
        AddTopTip: function (tip, icon){
            TipManager.AddColorTip(tip, icon, UnityEngine.Color.get_white(), 0.5, false);
        },
        AddColorTip: function (tip, icon, color, stayDuration, topLayer){
            if (!System.String.IsNullOrEmpty(tip)){
                if (UnityEngine.Object.op_Inequality(TipManager.mDialogueText, null)){
                    var tipStruct = new TipManager.TipStruct.ctor$$String$$String$$Color$$Single$$Boolean(tip, icon, color, stayDuration, topLayer);
                    TipManager.tipQueue.Enqueue(tipStruct);
                    if (TipManager._isWaiting){
                        TipManager._isWaiting = false;
                        JSTimer.get_Instance().SetupCoolDown("TipManagerTimer" /* _coolDownName */, TipManager._intervalDelayTime, null, TipManager.OnFinishedTime, 0.1, false);
                    }
                }
            }
        },
        OnFinishedTime: function (){
            var tipInfo = TipManager.tipQueue.Dequeue();
            var floatTipText = tipInfo.topLayer ? TipManager.mTopDialogueText : TipManager.mDialogueText;
            var itemAtlas = UIHelper.GetIconAtlas(tipInfo.tipIcon, "ItemIconAtlas");
            floatTipText.Add(tipInfo.tipInfo, itemAtlas, tipInfo.tipIcon, tipInfo.tipColor, TipManager._intervalDelayTime);
            if (TipManager.tipQueue.get_Count() > 0){
                JSTimer.get_Instance().SetupCoolDown("TipManagerTimer" /* _coolDownName */, TipManager._intervalDelayTime, null, TipManager.OnFinishedTime, 0.1, false);
            }
            else {
                TipManager._isWaiting = true;
            }
        },
        AddGainCurrencyTip$$Int64$$String$$Boolean$$String: function (changeValue, currencyType, delayShow, customTip){
            if (System.String.IsNullOrEmpty(customTip)){
                customTip = "获得{0}{1}";
            }
            var tips = System.String.Format$$String$$Object$$Object(customTip, AppStringHelper.WrapColor$$String$$Color(System.Math.Abs$$Int64(changeValue).toString(), ColorConstant.Color_Tip_GainCurrency), currencyType);
            TipManager.AddTip(tips, true, delayShow, "");
        },
        AddLostCurrencyTip$$Int64$$String$$Boolean$$String: function (changeValue, currencyType, delayShow, customTip){
            if (System.String.IsNullOrEmpty(customTip)){
                customTip = "消耗{0}{1}";
            }
            var tips = System.String.Format$$String$$Object$$Object(customTip, AppStringHelper.WrapColor$$String$$Color(System.Math.Abs$$Int64(changeValue).toString(), ColorConstant.Color_Tip_LostCurrency), currencyType);
            TipManager.AddTip(tips, true, delayShow, "");
        },
        AddGainCurrencyTip$$Int64$$Int32$$Boolean: function (changeValue, itemId, delayShow){
            var tips = System.String.Format$$String$$Object$$Object("获得{0}{1}", AppStringHelper.WrapColor$$String$$Color(System.Math.Abs$$Int64(changeValue).toString(), ColorConstant.Color_Tip_GainCurrency), ItemIconConst.GetIconConstByItemId(itemId));
            TipManager.AddTip(tips, true, delayShow, "");
        },
        AddLostCurrencyTip$$Int64$$Int32$$Boolean: function (changeValue, itemId, delayShow){
            var tips = System.String.Format$$String$$Object$$Object("消耗{0}{1}", AppStringHelper.WrapColor$$String$$Color(System.Math.Abs$$Int64(changeValue).toString(), ColorConstant.Color_Tip_LostCurrency), ItemIconConst.GetIconConstByItemId(itemId));
            TipManager.AddTip(tips, true, delayShow, "");
        },
        ShowGainItem: function (icon, delayShow){
            if (delayShow){
                TipManager.delayItemShowList.Add(icon);
            }
            else {
                TipManager.WaitingShowGainItemQueue.Enqueue(icon);
                if (TipManager.GainItemShowing == false){
                    GameDebuger.TODO("ShowNextGainItem();");
                }
            }
        },
        Dispose: function (){
            if (TipManager.delayShowList != null)
                TipManager.delayShowList.Clear();
            if (TipManager.delayItemShowList != null)
                TipManager.delayItemShowList.Clear();
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(TipManager);
var Range = {
    fullname: "Range",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (floor, ceil){
            this.m_Floor = 0;
            this.m_Ceil = 0;
            System.Object.ctor.call(this);
            this.m_Floor = floor;
            this.m_Ceil = ceil;
        },
        getFloor: function (){
            return this.m_Floor;
        },
        setFloor: function (f){
            this.m_Floor = f;
        },
        getCeil: function (){
            return this.m_Ceil;
        },
        setCeil: function (c){
            this.m_Ceil = c;
        },
        move: function (s){
            this.m_Floor += s;
            this.m_Ceil += s;
        },
        start$$: "System.Single",
        get_start: function (){
            return this.getFloor();
        },
        set_start: function (value){
            this.setFloor(value);
        },
        end$$: "System.Single",
        get_end: function (){
            return this.getCeil();
        },
        set_end: function (value){
            this.setCeil(value);
        }
    }
};
JsTypes.push(Range);
var Summary = {
    fullname: "Summary",
    baseTypeName: "System.Object",
    staticDefinition: {
        create: function (iTotal, iTotalPage, iCurrentPage, iPageSize){
            var r = new Summary.ctor();
            r.m_iTotal = iTotal;
            r.m_iTotalPage = iTotalPage;
            r.m_iCurrentPage = iCurrentPage;
            r.m_iPageSize = iPageSize;
            return r;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.m_iTotal = 0;
            this.m_iTotalPage = 0;
            this.m_iCurrentPage = 0;
            this.m_iPageSize = 0;
            System.Object.ctor.call(this);
        },
        getTotal: function (){
            return this.m_iTotal;
        },
        setTotal: function (total){
            this.m_iTotal = total;
            var iTotal = this.m_iTotal;
            var iPageSize = this.m_iPageSize;
            this.m_iTotalPage = ((System.Math.Ceiling$$Double(iTotal / iPageSize)) | 0);
        },
        getTotalPage: function (){
            return this.m_iTotalPage;
        },
        setTotalPage: function (t){
            this.m_iTotalPage = t;
        },
        isFirstPage: function (){
            return this.m_iCurrentPage <= 1;
        },
        isLastPage: function (){
            return this.m_iCurrentPage >= this.m_iTotalPage;
        },
        getCurrentPage: function (){
            return this.m_iCurrentPage;
        },
        getPrevPage: function (){
            return this.m_iCurrentPage - 1;
        },
        getNextPage: function (){
            return this.m_iCurrentPage + 1;
        },
        setCurrentPage: function (page){
            this.m_iCurrentPage = page;
        },
        getPageSize: function (){
            return this.m_iPageSize;
        },
        setPageSize: function (ps){
            this.m_iPageSize = ps;
        },
        equal: function (t){
            return this.m_iCurrentPage == t.m_iCurrentPage && this.m_iPageSize == t.m_iPageSize && this.m_iTotal == t.m_iTotal && this.m_iTotalPage == t.m_iTotalPage;
        },
        getRange: function (){
            var f = (this.m_iCurrentPage - 1) * this.m_iPageSize;
            var c = this.m_iCurrentPage * this.m_iPageSize;
            c = c < this.m_iTotal ? c : this.m_iTotal;
            --c;
            return new Range.ctor(f, c);
        },
        destroy: function (){
        }
    }
};
JsTypes.push(Summary);
var EmojiAnimationController = {
    fullname: "EmojiAnimationController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        cctor: function (){
            EmojiAnimationController.EMOTION_FORMAT = "{0}_{1:00}";
            EmojiAnimationController.FRAME_INTERVAL = 0.25;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.mLabel = null;
            this._strBuilder = null;
            this._dynamicEmojiDic = null;
            this._timer = 0;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            this.mLabel = this.GetComponent$1(UILabel.ctor);
        },
        SetEmojiText: function (content){
            if (UnityEngine.Object.op_Equality(this.mLabel, null))
                return false;
            if (!content.Contains("#" /* EmojiDataUtil.EMOTION_PREFIX */)){
                this._strBuilder = null;
                this._dynamicEmojiDic = null;
                this.mLabel.set_text(content);
                return false;
            }
            else {
                EmojiDataUtil.InitEmojiInfo(this.mLabel.get_bitmapFont().get_emojiFont().get_atlas());
                this._dynamicEmojiDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.String.ctor, System.Int32.ctor, 10 /* EmojiDataUtil.MAX_EMOJICOUNT */);
                this._strBuilder = new System.Text.StringBuilder.ctor$$String(EmojiDataUtil.ReplaceEmojiPrefix(content, this._dynamicEmojiDic));
                this._timer = 0;
                this.mLabel.set_text(this._strBuilder.toString());
                return true;
            }
        },
        PlayerEmotionAnimation: function (){
            var keyList = new System.Collections.Generic.List$1.ctor$$IEnumerable$1(System.String.ctor, this._dynamicEmojiDic.get_Keys());
            for (var i = 0; i < keyList.get_Count(); ++i){
                var prefix = keyList.get_Item$$Int32(i);
                var curFrame = this._dynamicEmojiDic.get_Item$$TKey(prefix);
                var nextFrame = (curFrame + 1) < EmojiDataUtil.GetEmotionMaxFrameCount(prefix) ? curFrame + 1 : 0;
                this._strBuilder.Replace$$String$$String(System.String.Format$$String$$Object$$Object("{0}_{1:00}" /* EMOTION_FORMAT */, prefix, curFrame), System.String.Format$$String$$Object$$Object("{0}_{1:00}" /* EMOTION_FORMAT */, prefix, nextFrame));
                this._dynamicEmojiDic.set_Item$$TKey(prefix, nextFrame);
            }
            this.mLabel.set_text(this._strBuilder.toString());
        },
        Update: function (){
            if (UnityEngine.Object.op_Equality(this.mLabel, null))
                return;
            if (this._dynamicEmojiDic != null && this._dynamicEmojiDic.get_Count() > 0){
                this._timer += _jsComManager.dT;
                if (this._timer > 0.25 /* FRAME_INTERVAL */){
                    this.PlayerEmotionAnimation();
                    this._timer = 0;
                }
            }
        }
    }
};
JsTypes.push(EmojiAnimationController);
var EmojiDataUtil = {
    fullname: "EmojiDataUtil",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            EmojiDataUtil.MAX_EMOJICOUNT = 10;
            EmojiDataUtil.EMOTION_PREFIX = "#";
            EmojiDataUtil._emotionInfoDic = null;
        },
        GetEmojiInfo: function (){
            return EmojiDataUtil._emotionInfoDic;
        },
        StripEmojiPrefix: function (input){
            m = input.match(/#\d{1,3}/i);
            if (m != null) {
                return m[0];
            }

            return null;
        },
        ReplaceEmojiPrefix: function (input, prefixDic){
            return input.replace(new RegExp("#\\d{1,3}", "g"), function (m, offset, str){
                var prefix1 = m;
                if (EmojiDataUtil.GetEmotionMaxFrameCount(prefix1) >= 1){
                    prefixDic.set_Item$$TKey(prefix1, 0);
                    return prefix1 + "_00";
                }
                return prefix1;
            });
        },
        InitEmojiInfo: function (emojiAtlas){
            if (UnityEngine.Object.op_Equality(emojiAtlas, null))
                return;
            if (EmojiDataUtil._emotionInfoDic == null){
                var spriteList = emojiAtlas.get_spriteList();
                EmojiDataUtil._emotionInfoDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.String.ctor, System.Int32.ctor, 1000);
                for (var i = 0,imax = spriteList.get_Count(); i < imax; ++i){
                    var prefix = EmojiDataUtil.StripEmojiPrefix(spriteList.get_Item$$Int32(i).name);
                    if (!System.String.IsNullOrEmpty(prefix)){
                        if (EmojiDataUtil._emotionInfoDic.ContainsKey(prefix))
                            EmojiDataUtil._emotionInfoDic.set_Item$$TKey(prefix, EmojiDataUtil._emotionInfoDic.get_Item$$TKey(prefix) + 1);
                        else {
                            EmojiDataUtil._emotionInfoDic.Add(prefix, 1);
                        }
                    }
                }
            }
        },
        GetEmotionMaxFrameCount: function (prefix){
            if (EmojiDataUtil._emotionInfoDic != null && EmojiDataUtil._emotionInfoDic.ContainsKey(prefix)){
                return EmojiDataUtil._emotionInfoDic.get_Item$$TKey(prefix);
            }
            return 0;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(EmojiDataUtil);
var OneShotSceneEffect = {
    fullname: "OneShotSceneEffect",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        Begin: function (effName, worldPos, effTime, scaleFactor, callBackFinish){
            var controller = LayerManager.get_Root().EffectsAnchor.AddComponent$1(OneShotSceneEffect.ctor);
            controller.Play(effName, worldPos, effTime, scaleFactor, callBackFinish);
            return controller;
        },
        BeginFollowEffect: function (effName, folowTransform, effTime, scaleFactor, callBackFinish){
            if (System.String.IsNullOrEmpty(effName))
                return null;
            if (UnityEngine.Object.op_Equality(folowTransform, null))
                return null;
            var controller = LayerManager.get_Root().EffectsAnchor.AddComponent$1(OneShotSceneEffect.ctor);
            controller.PlayFollowEffect(effName, folowTransform, effTime, scaleFactor, callBackFinish);
            return controller;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._effGo = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Play: function (effName, worldPos, effTime, scaleFactor, onLoadFinish){
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effName, $CreateAnonymousDelegate(this, function (effectGo){
                if (UnityEngine.Object.op_Equality(effectGo, null))
                    return;
                this._effGo = GameObjectExt.AddPoolChild(this.get_gameObject(), effectGo, 0, 0, 0);
                this._effGo.get_transform().set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(worldPos.x, worldPos.y, worldPos.z));
                var scaler = this._effGo.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Inequality(scaler, null)){
                    scaler.SetScale(scaleFactor);
                }
                if (onLoadFinish != null)
                    onLoadFinish();
                JSTimer.get_Instance().SetupCoolDown(System.String.Format$$String$$Object("OneShotSceneEffect_{0}", this._effGo.GetInstanceID()), effTime, null, $CreateDelegate(this, this.Dispose), 0.1, false);
            }), null, 100);
        },
        PlayFollowEffect: function (effName, folowTransform, effTime, scaleFactor, onLoadFinish){
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effName, $CreateAnonymousDelegate(this, function (effectGo){
                if (UnityEngine.Object.op_Equality(effectGo, null))
                    return;
                if (UnityEngine.Object.op_Equality(folowTransform, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(effectGo, false);
                    return;
                }
                this._effGo = GameObjectExt.AddPoolChild(folowTransform.get_gameObject(), effectGo, 0, 0, 0);
                var scaler = this._effGo.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Inequality(scaler, null)){
                    scaler.SetScale(scaleFactor);
                }
                if (onLoadFinish != null)
                    onLoadFinish(this._effGo);
                JSTimer.get_Instance().SetupCoolDown(System.String.Format$$String$$Object("OneShotSceneEffect_{0}", this._effGo.GetInstanceID()), effTime, null, $CreateDelegate(this, this.Dispose), 0.1, false);
            }), null, 100);
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(this._effGo, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this._effGo, false);
                this._effGo = null;
            }
            UnityEngine.Object.Destroy$$Object(this);
        }
    }
};
JsTypes.push(OneShotSceneEffect);
var OneShotUIEffect = {
    fullname: "OneShotUIEffect",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        Begin: function (effName, worldPos, effTime, scaleFactor, onLoadFinish){
            var controller = LayerManager.get_Root().EffectsAnchor.AddComponent$1(OneShotUIEffect.ctor);
            controller.PlayerOneShot(effName, worldPos, effTime, scaleFactor, onLoadFinish);
            return controller;
        },
        BeginFollowEffect: function (effName, widget, offsetVector, additiveQueue, needClip, scaleFactor, onLoadFinish){
            if (UnityEngine.Object.op_Equality(widget, null))
                return null;
            var controller = LayerManager.get_Root().EffectsAnchor.AddComponent$1(OneShotUIEffect.ctor);
            controller.PlayFollowEffect(effName, widget, offsetVector, additiveQueue, needClip, scaleFactor, onLoadFinish);
            return controller;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._effGo = null;
            this._renderQSync = null;
            this._disposed = false;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        PlayerOneShot: function (effName, worldPos, effTime, scaleFactor, onLoadFinish){
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effName, $CreateAnonymousDelegate(this, function (inst){
                if (this._disposed){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(inst, false);
                    return;
                }
                this._effGo = GameObjectExt.AddPoolChild(this.get_gameObject(), As(inst, UnityEngine.GameObject.ctor), 0, 0, 0);
                this._effGo.get_transform().set_position(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(worldPos.x, worldPos.y, this._effGo.get_transform().get_position().z));
                var scaler = this._effGo.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Inequality(scaler, null)){
                    scaler.SetScale(scaleFactor);
                }
                this._renderQSync = GameObjectExt.GetMissingComponent$1(UIEffectRenderQueueSync.ctor, this._effGo);
                this._renderQSync.Init();
                if (onLoadFinish != null)
                    onLoadFinish();
                JSTimer.get_Instance().SetupCoolDown(System.String.Format$$String$$Object("OneShotUIEffect_{0}", this._effGo.GetInstanceID()), effTime, null, $CreateDelegate(this, this.Dispose), 0.1, false);
            }), null, 100);
        },
        PlayFollowEffect: function (effName, widget, offsetVector, additiveQueue, needClip, scaleFactor, onLoadFinish){
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effName, $CreateAnonymousDelegate(this, function (inst){
                if (this._disposed || UnityEngine.Object.op_Equality(widget, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(inst, false);
                    return;
                }
                this._effGo = GameObjectExt.AddPoolChild(widget.get_cachedGameObject(), As(inst, UnityEngine.GameObject.ctor), 0, 0, 0);
                this._effGo.get_transform().set_localPosition(UnityEngine.Vector3.op_Addition(this._effGo.get_transform().get_localPosition(), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(offsetVector.x, offsetVector.y, 0)));
                var scaler = this._effGo.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Inequality(scaler, null)){
                    scaler.SetScale(scaleFactor);
                }
                this._renderQSync = GameObjectExt.GetMissingComponent$1(UIEffectRenderQueueSync.ctor, this._effGo);
                this._renderQSync.additiveQueue = additiveQueue;
                this._renderQSync.needClip = needClip;
                this._renderQSync.Init();
                if (onLoadFinish != null)
                    onLoadFinish();
            }), null, 100);
        },
        Play: function (){
            if (UnityEngine.Object.op_Inequality(this._effGo, null)){
                var pt = this._effGo.GetComponent$1(UnityEngine.ParticleSystem.ctor);
                if (UnityEngine.Object.op_Inequality(pt, null))
                    pt.Play$$Boolean(true);
            }
        },
        ReclipEffectRegion: function (){
            if (UnityEngine.Object.op_Inequality(this._renderQSync, null))
                this._renderQSync.RecalculateEffectRegion();
        },
        SetActive: function (active){
            if (UnityEngine.Object.op_Inequality(this._effGo, null))
                this._effGo.SetActive(active);
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(this._effGo, null))
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this._effGo, false);
            this._disposed = true;
            UnityEngine.Object.Destroy$$Object(this);
        }
    }
};
JsTypes.push(OneShotUIEffect);
var StaticUIEffect = {
    fullname: "StaticUIEffect",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        Begin: function (effName, widget, needClip, scaleFactor, onLoadFinish){
            if (UnityEngine.Object.op_Equality(widget, null) || !widget.get_cachedGameObject().get_activeInHierarchy())
                return null;
            var controller = widget.get_cachedGameObject().AddComponent$1(StaticUIEffect.ctor);
            controller.Play(effName, widget, needClip, scaleFactor, onLoadFinish);
            return controller;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._effGo = null;
            this._widget = null;
            this._renderQSync = null;
            this._disposed = false;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Play: function (effName, widget, needClip, scaleFactor, onLoadFinish){
            this._widget = widget;
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effName, $CreateAnonymousDelegate(this, function (inst){
                if (this._disposed || UnityEngine.Object.op_Equality(this._widget, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(inst, false);
                    return;
                }
                this._effGo = GameObjectExt.AddPoolChild(widget.get_cachedGameObject(), As(inst, UnityEngine.GameObject.ctor), 0, 0, 0);
                var scaler = this._effGo.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Inequality(scaler, null)){
                    scaler.SetScale(scaleFactor);
                }
                this._renderQSync = GameObjectExt.GetMissingComponent$1(UIEffectRenderQueueSync.ctor, this._effGo);
                this._renderQSync.needClip = needClip;
                this._renderQSync.Init();
                if (onLoadFinish != null)
                    onLoadFinish();
            }), null, 100);
        },
        ReclipEffectRegion: function (){
            if (UnityEngine.Object.op_Inequality(this._renderQSync, null))
                this._renderQSync.RecalculateEffectRegion();
        },
        Dispose: function (){
            if (UnityEngine.Object.op_Inequality(this._effGo, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this._effGo, false);
                this._effGo = null;
            }
            this._disposed = true;
            UnityEngine.Object.Destroy$$Object(this);
        },
        OnDestroy: function (){
            if (UnityEngine.Object.op_Inequality(this._effGo, null))
                this.Dispose();
        }
    }
};
JsTypes.push(StaticUIEffect);
var SurroundUIEffect = {
    fullname: "SurroundUIEffect",
    baseTypeName: "UnityEngine.MonoBehaviour",
    staticDefinition: {
        Begin: function (effName, widget, tweenTime, needClip, pathType, scaleFactor, onLoadFinish){
            if (UnityEngine.Object.op_Equality(widget, null) || !widget.get_cachedGameObject().get_activeInHierarchy())
                return null;
            var controller = widget.get_cachedGameObject().AddComponent$1(SurroundUIEffect.ctor);
            controller.Play(effName, widget, tweenTime, needClip, pathType, scaleFactor, onLoadFinish);
            return controller;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._effGo = null;
            this._widget = null;
            this._tweenTime = 0;
            this._pathTweener = null;
            this._pathType = 0;
            this._renderQSync = null;
            this._disposed = false;
            this.mEffectName = null;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Play: function (effName, widget, tweenTime, needClip, pathType, scaleFactor, onLoadFinish){
            this._widget = widget;
            this._tweenTime = tweenTime;
            this._pathType = pathType;
            this.mEffectName = effName;
            AssetPipeline.ResourcePoolManager.get_Instance().SpawnEffectAsync(effName, $CreateAnonymousDelegate(this, function (inst){
                if (this._disposed || UnityEngine.Object.op_Equality(this._widget, null)){
                    AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(inst, false);
                    return;
                }
                this._effGo = GameObjectExt.AddPoolChild(widget.get_cachedGameObject(), As(inst, UnityEngine.GameObject.ctor), 0, 0, 0);
                var scaler = this._effGo.GetComponent$1(ParticleScaler.ctor);
                if (UnityEngine.Object.op_Inequality(scaler, null)){
                    scaler.SetScale(scaleFactor);
                }
                this._renderQSync = GameObjectExt.GetMissingComponent$1(UIEffectRenderQueueSync.ctor, this._effGo);
                this._renderQSync.needClip = needClip;
                this._renderQSync.Init();
                this.ResetPathTween();
                if (onLoadFinish != null)
                    onLoadFinish();
            }), null, 100);
        },
        GetEffectName: function (){
            return this.mEffectName;
        },
        ResetPathTween: function (){
            if (UnityEngine.Object.op_Equality(this._effGo, null))
                return;
            if (this._pathTweener != null){
                DG.Tweening.TweenExtensions.Kill(this._pathTweener, false);
                this._pathTweener = null;
            }
            var wayPoints = null;
            if (this._pathType == 1){
                wayPoints = new Array(4);
                var wt = this._widget.get_cachedTransform();
                var width = this._widget.get_width() * 0.8;
                var height = this._widget.get_height() * 0.8;
                var offset = this._widget.get_pivotOffset();
                var x0 = -offset.x * width;
                var y0 = -offset.y * height;
                var x1 = x0 + width;
                var y1 = y0 + height;
                wayPoints[0] = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x0, y0, -5 /* -5f */);
                wayPoints[1] = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x0, y1, -5 /* -5f */);
                wayPoints[2] = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x1, y1, -5 /* -5f */);
                wayPoints[3] = new UnityEngine.Vector3.ctor$$Single$$Single$$Single(x1, y0, -5 /* -5f */);
            }
            else {
                wayPoints = this._widget.get_localCorners();
            }
            this._effGo.get_transform().set_localPosition(wayPoints[0]);
            this._pathTweener = DG.Tweening.TweenSettingsExtensions.SetLoops$1$$T$$Int32(DG.Tweening.Core.TweenerCore$3.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Core.TweenerCore$3.ctor, DG.Tweening.TweenSettingsExtensions.SetOptions$$TweenerCore$3$Vector3$Path$PathOptions$$Boolean$$AxisConstraint$$AxisConstraint(DG.Tweening.ShortcutExtensions.DOLocalPath(this._effGo.get_transform(), wayPoints, this._tweenTime, this._pathType, 1, 10, null), true, 0, 0), 1), -1 /* -1 */);
        },
        Dispose: function (){
            if (this._pathTweener != null){
                DG.Tweening.TweenExtensions.Kill(this._pathTweener, false);
                this._pathTweener = null;
            }
            if (UnityEngine.Object.op_Inequality(this._effGo, null)){
                AssetPipeline.ResourcePoolManager.get_Instance().DespawnEffect$$GameObject$$Boolean(this._effGo, false);
                this._effGo = null;
            }
            this.mEffectName = System.String.Empty;
            this._disposed = true;
            UnityEngine.Object.Destroy$$Object(this);
        },
        OnDestroy: function (){
            if (UnityEngine.Object.op_Inequality(this._effGo, null))
                this.Dispose();
        },
        ReclipEffectRegion: function (){
            if (UnityEngine.Object.op_Inequality(this._renderQSync, null))
                this._renderQSync.RecalculateEffectRegion();
        },
        SetActive: function (active){
            if (UnityEngine.Object.op_Inequality(this._effGo, null)){
                this._effGo.SetActive(active);
            }
        }
    }
};
JsTypes.push(SurroundUIEffect);
var WinGameSetting = {
    fullname: "WinGameSetting",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            WinGameSetting._data = null;
        },
        Setup: function (data, onFinish, onError){
            GameDebuger.Log("WinGameSetting Setup", null);
            GameDebuger.Log(JsHelper.ToJson(data, true), null);
            if (!GameSetting.get_IsOriginWinPlatform()){
                return;
            }
            WinGameSetting.set_Data(data);
            WinGameSetting.ReloadPlatformType();
            WinGameSetting.ReloadDomainType();
            WinGameSetting.ReloadChannel();
            WinGameSetting.ReloadStaticData(onFinish, onError);
        },
        ReloadPlatformType: function (){
            GameDebuger.Log("WinGameSetting ReloadPlatformType", null);
            GameSetting.set_Platform(WinGameSetting.get_Data().PlatformType);
        },
        ReloadDomainType: function (){
            GameDebuger.Log("WinGameSetting ReloadDomainType", null);
            GameSetting.set_DomainName(WinGameSetting.get_Data().DomainType);
            GameSetting.set_ResDir(WinGameSetting.get_Data().ResDir);
            GameSetting.set_PlatformHttpRoot(System.String.Format$$String$$Object$$Object$$Object("{0}/{1}/{2}", WinGameSetting.get_Data().HttpRoot, WinGameSetting.get_Data().ResDir, GameSetting.get_PlatformTypeName()));
        },
        ReloadChannel: function (){
            GameDebuger.Log("WinGameSetting ReloadChannel", null);
            AppGameManager.get_Instance().SetupChannel();
        },
        ReloadStaticData: function (onFinish, onError){
            GameDebuger.Log("WinGameSetting ReloadStaticData", null);
            GameStaticConfigManager.get_Instance().Setup(function (){
                GameStaticConfigManager.get_Instance().LoadStaticConfig("staticServerList.txt" /* GameStaticConfigManager.Type_StaticServerList */, function (json){
                    var config = JsHelper.ToObject(ServerUrlConfig.ctor, json);
                    if (config != null){
                        GameSetting.SetupServerUrlConfig(config);
                        GameServerInfoManager.Setup(function (){
                            GameServerInfoManager.RequestDynamicServerList(AppGameVersion.get_SpVersionCode(), GameSetting.Channel, GameSetting.get_PlatformTypeId(), onFinish, function (){
                                onError("加载服务器列表失败, 请重新进入游戏");
                            });
                        }, onError);
                    }
                    else {
                        onError("解析服务器配置信息失败");
                    }
                }, onError);
            }, onError);
        },
        Channel$$: "System.String",
        get_Channel: function (){
            return WinGameSetting.get_Data().Channel;
        },
        Data$$: "WinGameSetting+WinGameSettingData",
        get_Data: function (){
            if (WinGameSetting._data == null){
                WinGameSetting._data = WinGameSetting.WinGameSettingData.CreateOriginWinGameSettingData();
            }
            return WinGameSetting._data;
        },
        set_Data: function (value){
            WinGameSetting._data = value;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(WinGameSetting);
var DataCache$DataCollection$1 = {
    fullname: "DataCache.DataCollection$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T, count){
            this.T = T;
            this.list = null;
            this.map = null;
            System.Object.ctor.call(this);
            this.map = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int32.ctor, this.T, count);
            this.list = new System.Collections.Generic.List$1.ctor$$Int32(this.T, count);
        },
        AddMap: function (id, obj){
            if (this.map.ContainsKey(id)){
                UnityEngine.Debug.LogError$$Object("ths same key:" + id + " to add <" + obj.GetType().get_Name() + ">");
            }
            this.map.set_Item$$TKey(id, obj);
        },
        AddList: function (obj){
            this.list.Add(obj);
        },
        ContainsKey: function (key){
            return this.map.ContainsKey(key);
        }
    }
};
JsTypes.push(DataCache$DataCollection$1);
var AppDto$BagItemDto$CirculationType = {
    fullname: "AppDto.BagItemDto.CirculationType",
    staticDefinition: {
        Free: 0,
        Trade: 1,
        Gift: 2,
        Bind: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$BagItemDto$CirculationType);
var AppDto$BagItemDto$SourceOfTrade = {
    fullname: "AppDto.BagItemDto.SourceOfTrade",
    staticDefinition: {
        Unknown: 0,
        Stall: 1,
        Auction: 2
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$BagItemDto$SourceOfTrade);
var AppDto$CharacterAbility$Type = {
    fullname: "AppDto.CharacterAbility.Type",
    staticDefinition: {
        NONE: 0,
        COMMON: 1,
        PHYSICAL: 2,
        MAGIC: 3,
        ASSIST: 4,
        EXCEPTION: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$CharacterAbility$Type);
var AppDto$CharactorDto$CharacterPropertyType = {
    fullname: "AppDto.CharactorDto.CharacterPropertyType",
    staticDefinition: {
        PHYSIQUE: 101,
        POWER: 102,
        INTELLECT: 103,
        TECHNIQUE: 104,
        AGILITY: 105,
        MAX_HP: 201,
        PHY_ATTACK: 202,
        PHY_DEFENSE: 203,
        MAGIC_ATTAK: 204,
        MAGIC_DEFENSE: 205,
        SPEED: 206,
        CRIT: 207,
        HIT: 208,
        DODGE: 209,
        ANTI_CRIT: 210,
        TENACITY: 211,
        TREAT: 212,
        PHY_CRIT_RATE: 301,
        MAGIC_CRIT_RATE: 302,
        TREAT_CRIT_RATE: 303,
        PHY_ANTI_CRIT_RATE: 304,
        MAGIC_ANTI_CRIT_RATE: 305,
        PHY_HIT_RATE: 306,
        MAGIC_HIT_RATE: 307,
        PHY_DODGE_RATE: 308,
        MAGIC_DODGE_RATE: 309,
        FIXED_RELEASE_TIME: 310,
        PHY_STRIKE: 311,
        MAGIC_STRIKE: 312,
        CRIT_DAMAGE_ADDIDTION: 313,
        CRIT_DAMAGE_REDUCE: 314,
        EXCEPT_HIT_RATE: 315,
        EXCEPT_ANTI_RATE: 316,
        SILENCE_ADDITION: 317,
        CHAOS_ADDITION: 318,
        TRANCE_ADDITION: 319,
        FROZEN_ADDITION: 320,
        IMPRISON_ADDITION: 321,
        DISARM_ADDITION: 322,
        SNEER_ADDITION: 323,
        ANTI_SILENCE: 324,
        ANTI_CHAOS: 325,
        ANTI_TRANCE: 326,
        ANTI_FROZEN: 327,
        ANTI_IMPRISON: 328,
        ANTI_DISARM: 329,
        ANTI_SNEER: 330
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$CharactorDto$CharacterPropertyType);
var AppDto$Faction$FactionType = {
    fullname: "AppDto.Faction.FactionType",
    staticDefinition: {
        Unknown: 0,
        Civilian: 1,
        Soldier: 2,
        Ranger: 3,
        Counsellor: 4,
        Scholar: 5,
        EliteInfantry: 6,
        HeavyInfantry: 7
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Faction$FactionType);
var AppDto$Formation$FormationType = {
    fullname: "AppDto.Formation.FormationType",
    staticDefinition: {
        Unknown: 0,
        Regular: 1,
        SkyFlip: 2,
        EarthLoad: 3,
        CloudDown: 4,
        WindRise: 5,
        DragonFly: 6,
        BirdShit: 7,
        Snake: 8,
        TigerWing: 9
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Formation$FormationType);
var AppDto$GeneralCharactor$CharactorType = {
    fullname: "AppDto.GeneralCharactor.CharactorType",
    staticDefinition: {
        Unknown: 0,
        MainCharactor: 1,
        Child: 2,
        Crew: 3,
        Pet: 4,
        Monster: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$GeneralCharactor$CharactorType);
var AppDto$LeaveTeamNotify$LeaveTeamReason = {
    fullname: "AppDto.LeaveTeamNotify.LeaveTeamReason",
    staticDefinition: {
        REASON_LEAVE: 0,
        REASON_KICKOUT: 1,
        REASON_DISMISS: 2
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$LeaveTeamNotify$LeaveTeamReason);
var AppDto$MailType$MailTypeEnum = {
    fullname: "AppDto.MailType.MailTypeEnum",
    staticDefinition: {
        Unknown: 0,
        SysAnnouncement: 1,
        SysNoice: 2,
        SysReward: 3,
        Gift: 4,
        GroupNoice: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$MailType$MailTypeEnum);
var AppDto$Npc$NpcType = {
    fullname: "AppDto.Npc.NpcType",
    staticDefinition: {
        Unknown: 0,
        DoubleTeleport: 1,
        General: 2,
        Monster: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Npc$NpcType);
var AppDto$Npc$NpcNameType = {
    fullname: "AppDto.Npc.NpcNameType",
    staticDefinition: {
        Local: 0,
        Wildcard: 1,
        GhostName: 2,
        MaleName: 3,
        FemaleName: 4,
        Unknown: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Npc$NpcNameType);
var AppDto$NpcGeneral$NpcGeneralKindEnum = {
    fullname: "AppDto.NpcGeneral.NpcGeneralKindEnum",
    staticDefinition: {
        Unknown: 0,
        Idler: 1,
        Function: 2,
        Area: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$NpcGeneral$NpcGeneralKindEnum);
var AppDto$RealItem$CirculationType = {
    fullname: "AppDto.RealItem.CirculationType",
    staticDefinition: {
        Free: 0,
        Trade: 1,
        Gift: 2,
        Bind: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$RealItem$CirculationType);
var AppDto$SceneMap$SceneType = {
    fullname: "AppDto.SceneMap.SceneType",
    staticDefinition: {
        Unknown: 0,
        City: 1,
        General: 2,
        Wild: 3,
        Leveling: 4,
        School: 5,
        Guild: 6,
        Tournament: 7,
        FirstTournament: 8,
        TeamScene: 9,
        HeroTrial: 10,
        MythlandLobby: 11,
        MythlandLayer: 12,
        GuildComp: 13,
        CampWar: 14,
        Maze: 15,
        Evil: 16
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SceneMap$SceneType);
var AppDto$SceneObjectDto$SceneObjectType = {
    fullname: "AppDto.SceneObjectDto.SceneObjectType",
    staticDefinition: {
        Player: 0,
        Npc: 1
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SceneObjectDto$SceneObjectType);
var AppDto$Skill$SkillType = {
    fullname: "AppDto.Skill.SkillType",
    staticDefinition: {
        None: 0,
        Passive: 1,
        Phy: 2,
        Magic: 3,
        Recovery: 4,
        Controll: 5,
        Assist: 6
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$SkillType);
var AppDto$Skill$SkillOwnerType = {
    fullname: "AppDto.Skill.SkillOwnerType",
    staticDefinition: {
        None: 0,
        Player: 1,
        Npc: 2,
        Pet: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$SkillOwnerType);
var AppDto$Skill$UserTargetScopeType = {
    fullname: "AppDto.Skill.UserTargetScopeType",
    staticDefinition: {
        Unknown: 0,
        Enemy: 1,
        Self: 2,
        FriendsExceptSelfWithPet: 3,
        FriendsWithPet: 4,
        FriendPets: 5,
        ExceptSelf: 6,
        PetsInBag: 7,
        Fere: 8,
        EnemyPlayer: 9,
        FriendWithoutPetAndMe: 10,
        MyTeamPlayer: 11,
        EnemyPlayerOrPet: 12
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$UserTargetScopeType);
var AppDto$SkillBuff$BuffType = {
    fullname: "AppDto.SkillBuff.BuffType",
    staticDefinition: {
        UNKNOW: 0,
        ABNORMAL: 1,
        PROPERTY: 2,
        SPECIAL: 3,
        TEMPORARY: 4
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SkillBuff$BuffType);
var AppDto$SkillBuff$BuffGroup = {
    fullname: "AppDto.SkillBuff.BuffGroup",
    staticDefinition: {
        NORMAL: 0,
        SEAL: 1,
        FIXED_TIME: 2,
        TIMES: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SkillBuff$BuffGroup);
var AppDto$TeamCommand$EnemyCommand = {
    fullname: "AppDto.TeamCommand.EnemyCommand",
    staticDefinition: {
        Unknown: 0,
        ConcentrateAttack: 1,
        SorcerySeal: 2,
        PhysicalAttack: 3,
        SpellAttack: 4,
        GuardCorpse: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$TeamCommand$EnemyCommand);
var AppDto$TeamMemberDto$TeamMemberStatus = {
    fullname: "AppDto.TeamMemberDto.TeamMemberStatus",
    staticDefinition: {
        NoTeam: 0,
        Leader: 1,
        Member: 2,
        Away: 3,
        Offline: 4
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$TeamMemberDto$TeamMemberStatus);
var AppDto$VideoSoldier$SoldierStatus = {
    fullname: "AppDto.VideoSoldier.SoldierStatus",
    staticDefinition: {
        Normal: 0,
        SelfDefense: 1
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$VideoSoldier$SoldierStatus);
var GameEventAgent$GameEventDelegate = {
    fullname: "GameEventAgent.GameEventDelegate",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._action = null;
            this.needUpdate = false;
            this.delegateList = null;
            System.Object.ctor.call(this);
        },
        Add: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this._action = $CombineDelegates(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Action: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Object: function (listener){
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                var _delegate = this.delegateList[i];
                if (_delegate.get_Target() == listener){
                    this.Remove$$Action(As(_delegate, System.Action.ctor));
                }
            }
        },
        Invoke: function (){
            if (this._action == null)
                return;
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                try{
                    var _delegate = As(this.delegateList[i], System.Action.ctor);
                    _delegate();
                }
                catch(e){
                    UnityEngine.Debug.LogError$$Object(e);
                }
            }
        },
        GetInvokeList: function (){
            this.CheckUpdate();
            return this.delegateList;
        },
        CheckUpdate: function (){
            if (this.needUpdate){
                this.needUpdate = false;
                if (this._action != null)
                    this.delegateList = this._action.GetInvocationList();
                else
                    this.delegateList = null;
            }
        }
    }
};
JsTypes.push(GameEventAgent$GameEventDelegate);
var GameEventAgent$GameEventDelegate$1 = {
    fullname: "GameEventAgent.GameEventDelegate$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T){
            this.T = T;
            this._action = null;
            this.needUpdate = false;
            this.delegateList = null;
            System.Object.ctor.call(this);
        },
        Add: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this._action = $CombineDelegates(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Action$1: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Object: function (listener){
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                var _delegate = this.delegateList[i];
                if (_delegate.get_Target() == listener){
                    this.Remove$$Action$1(As(_delegate, System.Action$1.ctor));
                }
            }
        },
        Invoke: function (param){
            if (this._action == null)
                return;
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                try{
                    var _delegate = As(this.delegateList[i], System.Action$1.ctor);
                    _delegate(param);
                }
                catch(e){
                    UnityEngine.Debug.LogError$$Object(e);
                }
            }
        },
        GetInvokeList: function (){
            this.CheckUpdate();
            return this.delegateList;
        },
        CheckUpdate: function (){
            if (this.needUpdate){
                this.needUpdate = false;
                if (this._action != null)
                    this.delegateList = this._action.GetInvocationList();
                else
                    this.delegateList = null;
            }
        }
    }
};
JsTypes.push(GameEventAgent$GameEventDelegate$1);
var GameEventAgent$GameEventDelegate$2 = {
    fullname: "GameEventAgent.GameEventDelegate$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2){
            this.T1 = T1;
            this.T2 = T2;
            this._action = null;
            this.needUpdate = false;
            this.delegateList = null;
            System.Object.ctor.call(this);
        },
        Add: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this._action = $CombineDelegates(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Action$2: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Object: function (listener){
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                var _delegate = this.delegateList[i];
                if (_delegate.get_Target() == listener){
                    this.Remove$$Action$2(As(_delegate, System.Action$2.ctor));
                }
            }
        },
        Invoke: function (param1, param2){
            if (this._action == null)
                return;
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                try{
                    var _delegate = As(this.delegateList[i], System.Action$2.ctor);
                    _delegate(param1, param2);
                }
                catch(e){
                    UnityEngine.Debug.LogError$$Object(e);
                }
            }
        },
        GetInvokeList: function (){
            this.CheckUpdate();
            return this.delegateList;
        },
        CheckUpdate: function (){
            if (this.needUpdate){
                this.needUpdate = false;
                if (this._action != null)
                    this.delegateList = this._action.GetInvocationList();
                else
                    this.delegateList = null;
            }
        }
    }
};
JsTypes.push(GameEventAgent$GameEventDelegate$2);
var GameEventAgent$GameEventDelegate$3 = {
    fullname: "GameEventAgent.GameEventDelegate$3",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this._action = null;
            this.needUpdate = false;
            this.delegateList = null;
            System.Object.ctor.call(this);
        },
        Add: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this._action = $CombineDelegates(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Action$3: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Object: function (listener){
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                var _delegate = this.delegateList[i];
                if (_delegate.get_Target() == listener){
                    this.Remove$$Action$3(As(_delegate, System.Action$3.ctor));
                }
            }
        },
        Invoke: function (param1, param2, param3){
            if (this._action == null)
                return;
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                try{
                    var _delegate = As(this.delegateList[i], System.Action$3.ctor);
                    _delegate(param1, param2, param3);
                }
                catch(e){
                    UnityEngine.Debug.LogError$$Object(e);
                }
            }
        },
        GetInvokeList: function (){
            this.CheckUpdate();
            return this.delegateList;
        },
        CheckUpdate: function (){
            if (this.needUpdate){
                this.needUpdate = false;
                if (this._action != null)
                    this.delegateList = this._action.GetInvocationList();
                else
                    this.delegateList = null;
            }
        }
    }
};
JsTypes.push(GameEventAgent$GameEventDelegate$3);
var GameEventAgent$GameEventDelegate$4 = {
    fullname: "GameEventAgent.GameEventDelegate$4",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this._action = null;
            this.needUpdate = false;
            this.delegateList = null;
            System.Object.ctor.call(this);
        },
        Add: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this._action = $CombineDelegates(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Action$4: function (action){
            this._action = $RemoveDelegate(this._action, action);
            this.needUpdate = true;
        },
        Remove$$Object: function (listener){
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                var _delegate = this.delegateList[i];
                if (_delegate.get_Target() == listener){
                    this.Remove$$Action$4(As(_delegate, System.Action$4.ctor));
                }
            }
        },
        Invoke: function (param1, param2, param3, param4){
            if (this._action == null)
                return;
            this.CheckUpdate();
            if (this.delegateList == null)
                return;
            for (var i = 0; i < this.delegateList.length; i++){
                try{
                    var _delegate = As(this.delegateList[i], System.Action$4.ctor);
                    _delegate(param1, param2, param3, param4);
                }
                catch(e){
                    UnityEngine.Debug.LogError$$Object(e);
                }
            }
        },
        GetInvokeList: function (){
            this.CheckUpdate();
            return this.delegateList;
        },
        CheckUpdate: function (){
            if (this.needUpdate){
                this.needUpdate = false;
                if (this._action != null)
                    this.delegateList = this._action.GetInvocationList();
                else
                    this.delegateList = null;
            }
        }
    }
};
JsTypes.push(GameEventAgent$GameEventDelegate$4);
var GameEvents$Event = {
    fullname: "GameEvents.Event",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (_eventName){
            this.eventName = null;
            System.Object.ctor.call(this);
            this.eventName = _eventName;
        }
    }
};
JsTypes.push(GameEvents$Event);
var GameEvents$Event$1 = {
    fullname: "GameEvents.Event$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T, _eventName){
            this.T = T;
            this.eventName = null;
            System.Object.ctor.call(this);
            this.eventName = _eventName;
        }
    }
};
JsTypes.push(GameEvents$Event$1);
var GameEvents$Event$2 = {
    fullname: "GameEvents.Event$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, _eventName){
            this.T1 = T1;
            this.T2 = T2;
            this.eventName = null;
            System.Object.ctor.call(this);
            this.eventName = _eventName;
        }
    }
};
JsTypes.push(GameEvents$Event$2);
var GameEvents$Event$3 = {
    fullname: "GameEvents.Event$3",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, _eventName){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.eventName = null;
            System.Object.ctor.call(this);
            this.eventName = _eventName;
        }
    }
};
JsTypes.push(GameEvents$Event$3);
var GameEvents$Event$4 = {
    fullname: "GameEvents.Event$4",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (T1, T2, T3, T4, _eventName){
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.T4 = T4;
            this.eventName = null;
            System.Object.ctor.call(this);
            this.eventName = _eventName;
        }
    }
};
JsTypes.push(GameEvents$Event$4);
var BattleHelper$BattleWatchType = {
    fullname: "BattleHelper.BattleWatchType",
    staticDefinition: {
        WatchType_Nothing: 0,
        WatchType_Duel: 1,
        WatchType_CSPK: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleHelper$BattleWatchType);
var BattleTargetSelector$TargetType = {
    fullname: "BattleTargetSelector.TargetType",
    staticDefinition: {
        ALL: 0,
        PLAYER: 1,
        ENEMY: 2,
        SELF: 3,
        NONE: 4
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$TargetType);
var BattleTargetSelector$SelfType = {
    fullname: "BattleTargetSelector.SelfType",
    staticDefinition: {
        SELF: 0,
        NOTSELF: 1
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$SelfType);
var BattleTargetSelector$CharacterType = {
    fullname: "BattleTargetSelector.CharacterType",
    staticDefinition: {
        ALL: 0,
        PET: 1,
        NOTPET: 2,
        HERO: 3,
        COUPLE: 4,
        PLAYER: 5
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$CharacterType);
var BattleTargetSelector$LifeState = {
    fullname: "BattleTargetSelector.LifeState",
    staticDefinition: {
        ALL: 0,
        ALIVE: 1,
        DEAD: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$LifeState);
var BattleTargetSelector$SelectorType = {
    fullname: "BattleTargetSelector.SelectorType",
    staticDefinition: {
        CAPTURE: 0,
        SKILL: 1,
        ITEM: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$SelectorType);
var MonsterController$ActionEnd = {
    fullname: "MonsterController.ActionEnd",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(MonsterController$ActionEnd);
var MonsterController$MonsterSide = {
    fullname: "MonsterController.MonsterSide",
    staticDefinition: {
        Player: 0,
        Enemy: 1,
        None: 2
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$MonsterSide);
var MonsterController$RetreatMode = {
    fullname: "MonsterController.RetreatMode",
    staticDefinition: {
        Normal: 0,
        Fly: 1,
        Flash: 2,
        Run: 3
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$RetreatMode);
var MonsterController$ShowMessageEffect = {
    fullname: "MonsterController.ShowMessageEffect",
    staticDefinition: {
        DODGE: 1,
        CRITICAL: 2,
        IMMUNE: 4
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$ShowMessageEffect);
var BattleSkillSelectController$SkillType = {
    fullname: "BattleSkillSelectController.SkillType",
    staticDefinition: {
        None: 0,
        Stunt: 1,
        Guide: 2,
        Skill: 3
    },
    Kind: "Enum"
};
JsTypes.push(BattleSkillSelectController$SkillType);
var BattleDemoController$BattleResult = {
    fullname: "BattleDemoController.BattleResult",
    staticDefinition: {
        NULL: 0,
        DRAW: 1,
        WIN: 2,
        LOSE: 3,
        Retreat: 4,
        NoResult: 5
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoController$BattleResult);
var SkillButtonCellController$PivotPosition = {
    fullname: "SkillButtonCellController.PivotPosition",
    staticDefinition: {
        CenterBottom: 0,
        Bottom: 1
    },
    Kind: "Enum"
};
JsTypes.push(SkillButtonCellController$PivotPosition);
var BattleDemoModel$ActionState = {
    fullname: "BattleDemoModel.ActionState",
    staticDefinition: {
        HERO: 0,
        PET: 1
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoModel$ActionState);
var BattleDemoModel$BattleSceneStat = {
    fullname: "BattleDemoModel.BattleSceneStat",
    staticDefinition: {
        GAME_OVER: 0,
        ON_WAITING: 1,
        BATTLE_READY: 2,
        FINISH_COMMAND: 3,
        ON_PROGRESS: 4,
        ON_COMMAND_ENTER: 5,
        ON_COMMAND_EXIT: 6,
        ON_SELECT_SKILL: 7,
        ON_SELECT_TARGET: 8,
        ON_CAPTURE: 9,
        ON_CAPTURE_SUCCESS: 10
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoModel$BattleSceneStat);
var MonsterOptionStateManager$MonsterOptionState = {
    fullname: "MonsterOptionStateManager.MonsterOptionState",
    staticDefinition: {
        Disable: 0,
        Enable: 1
    },
    Kind: "Enum"
};
JsTypes.push(MonsterOptionStateManager$MonsterOptionState);
var WorldModel$WorldModelData = {
    fullname: "WorldModel.WorldModelData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IWorldModelData", "IWorldViewData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._playersDic = new System.Collections.Generic.Dictionary$2.ctor$$Int32(System.Int64.ctor, AppDto.ScenePlayerDto.ctor, 10);
            this.latestPlayerChageTeamStatusSet = new System.Collections.Generic.List$1.ctor$$Int32(System.Int64.ctor, 10);
            System.Object.ctor.call(this);
        },
        Dispose: function (){
            this._playersDic.Clear();
        },
        WorldViewData$$: "IWorldViewData",
        get_WorldViewData: function (){
            return this;
        },
        LatestPlayerChageTeamStatusSet$$: "System.Collections.Generic.IEnumerable`1[[System.Int64]]",
        get_LatestPlayerChageTeamStatusSet: function (){
            return this.latestPlayerChageTeamStatusSet;
        },
        UpdateWithSceneNotify: function (noti){
            if (noti != null && noti.teamId > 0){
                var newSet = noti.inTeamPlayerIds;
                var oldSet = CollectionExtension.Filter$1(System.Collections.Generic.KeyValuePair$2.ctor, this._playersDic, $CreateAnonymousDelegate(this, function (p){
                    return p.get_Value().teamId == noti.teamId;
                }));
                this.latestPlayerChageTeamStatusSet.Clear();
                CollectionExtension.ForEach$1(System.Collections.Generic.KeyValuePair$2.ctor, oldSet, $CreateAnonymousDelegate(this, function (o){
                    if (!noti.inTeamPlayerIds.Contains(o.get_Key())){
                        this.latestPlayerChageTeamStatusSet.Add(o.get_Key());
                        this._playersDic.get_Item$$TKey(o.get_Key()).teamStatus = 0 /* (int)TeamMemberDto.TeamMemberStatus.NoTeam */;
                        this._playersDic.get_Item$$TKey(o.get_Key()).teamId = 0;
                    }
                    else {
                        if (o.get_Key() != noti.leaderPlayerId && o.get_Value().teamStatus == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */){
                            this.latestPlayerChageTeamStatusSet.Add(o.get_Key());
                            this._playersDic.get_Item$$TKey(o.get_Key()).teamStatus = 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */;
                            this._playersDic.get_Item$$TKey(o.get_Key()).teamId = noti.teamId;
                            CollectionExtension.RemoveItem$1(System.Int64.ctor, newSet, o.get_Key());
                        }
                        else if (o.get_Key() == noti.leaderPlayerId && o.get_Value().teamStatus != 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */){
                            this.latestPlayerChageTeamStatusSet.Add(o.get_Key());
                            this._playersDic.get_Item$$TKey(o.get_Key()).teamStatus = 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */;
                            this._playersDic.get_Item$$TKey(o.get_Key()).teamId = noti.teamId;
                            CollectionExtension.RemoveItem$1(System.Int64.ctor, newSet, o.get_Key());
                        }
                    }
                }));
                newSet.ForEach($CreateAnonymousDelegate(this, function (o){
                    this.latestPlayerChageTeamStatusSet.Add(o);
                    if (this._playersDic.ContainsKey(o)){
                        var p = this._playersDic.get_Item$$TKey(o);
                        p.teamStatus = o == noti.leaderPlayerId ? 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */ : 2 /* (int)TeamMemberDto.TeamMemberStatus.Member */;
                        p.teamId = noti.teamId;
                        this.latestPlayerChageTeamStatusSet.Add(o);
                    }
                }));
            }
        }
    }
};
JsTypes.push(WorldModel$WorldModelData);
var GamePlot$PlotTransformAction$TweenType = {
    fullname: "GamePlot.PlotTransformAction.TweenType",
    staticDefinition: {
        NavMove: 0,
        Rotate: 1,
        Scale: 2,
        PosMove: 3
    },
    Kind: "Enum"
};
JsTypes.push(GamePlot$PlotTransformAction$TweenType);
var GamePlot$PlayAudioAction$AudioType = {
    fullname: "GamePlot.PlayAudioAction.AudioType",
    staticDefinition: {
        Music: 0,
        Sound: 1
    },
    Kind: "Enum"
};
JsTypes.push(GamePlot$PlayAudioAction$AudioType);
var UIHelper$ItemTipType = {
    fullname: "UIHelper.ItemTipType",
    staticDefinition: {
        None: 0,
        NormalTip: 1,
        GainWay: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIHelper$ItemTipType);
var UIHelper$BtnType = {
    fullname: "UIHelper.BtnType",
    staticDefinition: {
        Little: 0,
        Middle: 1,
        Big: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIHelper$BtnType);
var JSTimer$Task = {
    fullname: "JSTimer.Task",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.taskName = null;
            this.updateFrequence = 0.1;
            this.cumulativeTime = 0;
            this.isPause = false;
            this.timeScale = false;
            this.isValid = false;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(JSTimer$Task);
var JSTimer$TimerTask = {
    fullname: "JSTimer.TimerTask",
    baseTypeName: "JSTimer.Task",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (taskName, onUpdate, updateFrequence, timeScale){
            this.onUpdate = null;
            JSTimer.Task.ctor.call(this);
            this.taskName = taskName;
            this.Reset(onUpdate, updateFrequence, timeScale);
        },
        Reset: function (onUpdate, updateFrequence, timeScale){
            this.cumulativeTime = 0;
            this.updateFrequence = updateFrequence;
            this.onUpdate = onUpdate;
            this.isPause = false;
            this.timeScale = timeScale;
            this.isValid = true;
        },
        Cancel: function (){
            this.isValid = false;
        },
        DoUpdate: function (){
            if (this.onUpdate != null)
                this.onUpdate();
        },
        Dispose: function (){
            this.onUpdate = null;
        }
    }
};
JsTypes.push(JSTimer$TimerTask);
var JSTimer$CdTask = {
    fullname: "JSTimer.CdTask",
    baseTypeName: "JSTimer.Task",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (taskName, totalTime, onUpdate, onFinished, updateFrequence, timeScale){
            this.onUpdate = null;
            this.onFinished = null;
            this.totalTime = 0;
            this.remainTime = 0;
            JSTimer.Task.ctor.call(this);
            this.taskName = taskName;
            this.Reset(totalTime, onUpdate, onFinished, updateFrequence, timeScale);
        },
        Reset: function (totalTime, onUpdate, onFinished, updateFrequence, timeScale){
            this.totalTime = totalTime;
            this.remainTime = totalTime;
            this.onUpdate = onUpdate;
            this.onFinished = onFinished;
            this.updateFrequence = updateFrequence;
            this.cumulativeTime = 0;
            this.isPause = false;
            this.timeScale = timeScale;
            this.isValid = true;
            JSTimer.get_Instance().AddCdIsNotExist(this);
        },
        DoFinish: function (){
            if (this.onFinished != null)
                this.onFinished();
        },
        DoUpdate: function (){
            if (this.onUpdate != null)
                this.onUpdate(this.remainTime);
        },
        Dispose: function (){
            this.onUpdate = null;
            this.onFinished = null;
        }
    }
};
JsTypes.push(JSTimer$CdTask);
var JSTimer$TimerTask$OnTimerUpdate = {
    fullname: "JSTimer.TimerTask.OnTimerUpdate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(JSTimer$TimerTask$OnTimerUpdate);
var JSTimer$CdTask$OnCdUpdate = {
    fullname: "JSTimer.CdTask.OnCdUpdate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(JSTimer$CdTask$OnCdUpdate);
var JSTimer$CdTask$OnCdFinish = {
    fullname: "JSTimer.CdTask.OnCdFinish",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(JSTimer$CdTask$OnCdFinish);
var GameDisplayManager$DisplayLevel = {
    fullname: "GameDisplayManager.DisplayLevel",
    staticDefinition: {
        Low: 0,
        Middle: 1,
        High: 2
    },
    Kind: "Enum"
};
JsTypes.push(GameDisplayManager$DisplayLevel);
var GameDisplayManager$VisibleType = {
    fullname: "GameDisplayManager.VisibleType",
    staticDefinition: {
        Player: 0,
        Npc: 1
    },
    Kind: "Enum"
};
JsTypes.push(GameDisplayManager$VisibleType);
var HotKeyManager$OpenUIModule = {
    fullname: "HotKeyManager.OpenUIModule",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.HotKeyList = null;
            this.ModuleName = null;
            this.OnOpened = null;
            this.OnClosed = null;
            System.Object.ctor.call(this);
        },
        Trigger: function (){
            if (!UIModuleManager.get_Instance().IsModuleOpened(this.ModuleName)){
                if (this.OnOpened != null){
                    this.OnOpened();
                }
            }
            else {
                if (this.OnClosed != null){
                    this.OnClosed();
                }
            }
        }
    }
};
JsTypes.push(HotKeyManager$OpenUIModule);
var HotKeyManager$BattleAction = {
    fullname: "HotKeyManager.BattleAction",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.HotKeyList = null;
            this.OnTrigger = null;
            System.Object.ctor.call(this);
        },
        Trigger: function (){
            if (this.OnTrigger != null){
                this.OnTrigger();
            }
        }
    }
};
JsTypes.push(HotKeyManager$BattleAction);
var LoadingTipManager$HintMsgConfig = {
    fullname: "LoadingTipManager.HintMsgConfig",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.list = new System.Collections.Generic.List$1.ctor(LoadingTipManager.HintMsg.ctor);
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(LoadingTipManager$HintMsgConfig);
var LoadingTipManager$HintMsg = {
    fullname: "LoadingTipManager.HintMsg",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.level = 0;
            this.endLevel = 0;
            this.tips = null;
            this.isLoadingTip = 0;
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(LoadingTipManager$HintMsg);
var AssetPipeline$ResourcePoolManager$PoolType = {
    fullname: "AssetPipeline.ResourcePoolManager.PoolType",
    staticDefinition: {
        UI: 0,
        Model: 1,
        Effect: 2,
        Scene: 3
    },
    Kind: "Enum"
};
JsTypes.push(AssetPipeline$ResourcePoolManager$PoolType);
var ServerManager$OnRequestTokenDelegate = {
    fullname: "ServerManager.OnRequestTokenDelegate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(ServerManager$OnRequestTokenDelegate);
var ServerManager$OnRequestOrderIdDelegate = {
    fullname: "ServerManager.OnRequestOrderIdDelegate",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(ServerManager$OnRequestOrderIdDelegate);
var UIModuleDefinition$ModuleType = {
    fullname: "UIModuleDefinition.ModuleType",
    staticDefinition: {
        None: 0,
        MainModule: 1,
        SubModule: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIModuleDefinition$ModuleType);
var UIModuleManager$OnModuleOpen = {
    fullname: "UIModuleManager.OnModuleOpen",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(UIModuleManager$OnModuleOpen);
var UIModuleManager$ModuleRecord = {
    fullname: "UIModuleManager.ModuleRecord",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (moduleName, depth, active){
            this.ModuleName = null;
            this.Depth = 0;
            this.Active = false;
            System.Object.ctor.call(this);
            this.ModuleName = moduleName;
            this.Depth = depth;
            this.Active = active;
        }
    }
};
JsTypes.push(UIModuleManager$ModuleRecord);
var QuadTree$QuadNode$1 = {
    fullname: "QuadTree.QuadNode$1",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (T){
            QuadTree.QuadNode$1._id = 0;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor$$Bounds: function (T, bounds){
            this.T = T;
            this.ID = QuadTree.QuadNode$1._id++;
            this._nodes = new Array(4);
            this.Nodes = null;
            this.quadObjects = new System.Collections.Generic.List$1.ctor(this.T);
            this.Objects = null;
            this._Parent = null;
            this._Bounds = new UnityEngine.Bounds.ctor();
            System.Object.ctor.call(this);
            this.set_Bounds(bounds);
            this.Nodes = new System.Collections.ObjectModel.ReadOnlyCollection$1.ctor(QuadTree.QuadNode$1.ctor, this._nodes);
            this.Objects = new System.Collections.ObjectModel.ReadOnlyCollection$1.ctor(this.T, this.quadObjects);
        },
        Parent$$: "QuadTree`1+QuadNode[[`0]]",
        get_Parent: function (){
            return this._Parent;
        },
        set_Parent: function (value){
            this._Parent = value;
        },
        Item$$: "QuadTree`1+QuadNode[[`0]]",
        get_Item$$Direction$1: function (direction){
            switch (direction){
                case QuadTree.Direction$1.NW:
                    return this._nodes[0];
                case QuadTree.Direction$1.NE:
                    return this._nodes[1];
                case QuadTree.Direction$1.SW:
                    return this._nodes[2];
                case QuadTree.Direction$1.SE:
                    return this._nodes[3];
                default:
                    return null;
            }
        },
        set_Item$$Direction$1: function (direction, value){
            switch (direction){
                case QuadTree.Direction$1.NW:
                    this._nodes[0] = value;
                    break;
                case QuadTree.Direction$1.NE:
                    this._nodes[1] = value;
                    break;
                case QuadTree.Direction$1.SW:
                    this._nodes[2] = value;
                    break;
                case QuadTree.Direction$1.SE:
                    this._nodes[3] = value;
                    break;
            }
            if (value != null)
                value.set_Parent(this);
        },
        Bounds$$: "UnityEngine.Bounds",
        get_Bounds: function (){
            return this._Bounds;
        },
        set_Bounds: function (value){
            this._Bounds = value;
        },
        HasChildNodes: function (){
            return this._nodes[0] != null;
        },
        ctor$$Single$$Single$$Single$$Single: function (T, x, y, width, height){
            this.T = T;
            this.ID = QuadTree.QuadNode$1._id++;
            this._nodes = new Array(4);
            this.Nodes = null;
            this.quadObjects = new System.Collections.Generic.List$1.ctor(this.T);
            this.Objects = null;
            this._Parent = null;
            this._Bounds = new UnityEngine.Bounds.ctor();
            QuadTree.QuadNode$1.ctor$$Bounds.call(this, this.T, MathHelper.Bounds2D$$Single$$Single$$Single$$Single(x, y, width, height));
        }
    }
};
JsTypes.push(QuadTree$QuadNode$1);
var QuadTree$Direction$1 = {
    fullname: "QuadTree.Direction$1",
    staticDefinition: {
        NW: 0,
        NE: 1,
        SW: 2,
        SE: 3
    },
    Kind: "Enum"
};
JsTypes.push(QuadTree$Direction$1);
var BackpackDataMgr$BackpackViewController = {
    fullname: "BackpackDataMgr.BackpackViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        cctor: function (){
            BackpackDataMgr.BackpackViewController.tabNameArr = [Tuple.Create$2$$T1$$T2(BackpackViewTab.ctor, System.String.ctor, BackpackViewTab.Backpack, "包裹"), Tuple.Create$2$$T1$$T2(BackpackViewTab.ctor, System.String.ctor, BackpackViewTab.Warehouse, "仓库")];
        },
        Open: function (tab, itemTab){
            if (BackpackDataMgr.get_Instance()._data._BagDto == null){
                GameDebuger.LogError("there is no bagdto data", null);
                return;
            }
            BackpackDataMgr.get_Instance()._data.curTab = tab;
            BackpackDataMgr.get_Instance()._data.curBagTab = itemTab;
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(BackpackDataMgr.BackpackViewController.ctor, "BackpackView" /* BackpackView.NAME */, UILayerType.DefaultModule, true, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.tabMgr = TabbtnManager.Create();
            this._backpack = null;
            this._modelDisplay = null;
            this._equipDic = new System.Collections.Generic.Dictionary$2.ctor(Equipment.ctor, ItemCellController.ctor);
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, BackpackView.ctor, IBackpackView.ctor, IBackpackData.ctor);
        },
        AfterInitView: function (){
            this.CreateTabItem();
            this.InitBackPackPageContainer();
            this.InitWareHouse();
            this.InitPlayerInfo();
        },
        RegistCustomEvent: function (){
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IBackpackData.ctor, BackpackDataMgr.stream, $CreateDelegate(this, this.UpdateWithData));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IPlayerModel.ctor, PlayerModel.get_Stream(), $CreateDelegate(this.get_View(), this.get_View().UpdatePlayerInfo$$IPlayerModel));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        OnDispose: function (){
            this._backpack = null;
            this.tabMgr.Dispose();
            this._modelDisplay.CleanUpModel();
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        InitPlayerInfo: function (){
            this.InitEquipment();
            this.IntiPlayerProperty();
            this.InitPlayerModel();
        },
        InitPlayerModel: function (){
            this._modelDisplay = ModelDisplayController.GenerateUICom(this.get_View().get_ModelAnchorGO().get_transform(), 3);
            this._modelDisplay.Init$$Int32$$Int32$$Single$$Single(450, 450, 0, 1.5);
            this._modelDisplay.SetBoxCollider(260, 350);
        },
        IntiPlayerProperty: function (){
            this.get_View().SetPlayerRanking(0);
        },
        InitEquipment: function (){
            this.AddEquipmentCell(Equipment.EquipPartType_Weapon, this.get_View().get_LeftEquipGrid().get_gameObject());
            this.AddEquipmentCell(Equipment.EquipPartType_Armor, this.get_View().get_LeftEquipGrid().get_gameObject());
            this.AddEquipmentCell(Equipment.EquipPartType_Girdle, this.get_View().get_LeftEquipGrid().get_gameObject());
            this.get_View().get_LeftEquipGrid().Reposition();
            this.AddEquipmentCell(Equipment.EquipPartType_Helmet, this.get_View().get_RightEquipGrid().get_gameObject());
            this.AddEquipmentCell(Equipment.EquipPartType_Necklace, this.get_View().get_RightEquipGrid().get_gameObject());
            this.AddEquipmentCell(Equipment.EquipPartType_Shoe, this.get_View().get_RightEquipGrid().get_gameObject());
            this.get_View().get_RightEquipGrid().Reposition();
        },
        AddEquipmentCell: function (partType, parent){
            var cell = this.AddCachedChild$2$$GameObject$$String$$String(ItemCellController.ctor, ItemCell.ctor, parent, "ItemCell" /* ItemCell.NAME */, "Equip_" + partType.toString());
            cell.UpdateEquipView$$Equipment$$Boolean(partType, false);
            this._equipDic.set_Item$$TKey(partType, cell);
        },
        InitBackPackPageContainer: function (){
            this._backpack = this.AddChild$2$$GameObject$$String$$String(ItemsPageContainerController.ctor, ItemsPageContainer.ctor, this.get_View().get_ItemsPosAnchor(), "ItemsPageContainer" /* ItemsPageContainer.NAME */, "backpack");
            this._backpack.InitTabBtns(BackpackDataMgr.BackpackData.ItemTabNameSet, BackpackDataMgr.get_Instance()._data.get_ItemTabIndex());
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(System.Int32.ctor, this._backpack.get_OnTabbtnClick(), $CreateAnonymousDelegate(this, function (tabIdx){
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IBackpackData.ctor, BackpackDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (data){
                this._backpack.UpdateView$$IBackpackViewData(data.get_BackpackViewData());
            })));
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(System.Int32.ctor, this._backpack.get_OnItemClick(), $CreateAnonymousDelegate(this, function (index){
                if (BackpackDataMgr.get_Instance()._data.curBagTab == ItemTypeTab.Item && index >= BackpackDataMgr.get_Instance()._data._BagDto.capability){
                }
                else {
                    var item = BackpackDataMgr.get_Instance()._data.GetBagItemByTabAndIndex(BackpackDataMgr.get_Instance()._data.curBagTab, index);
                    if (item != null){
                    }
                }
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        InitWareHouse: function (){
        },
        CreateTabItem: function (){
            CollectionExtension.ForEachI$1(Tuple$2.ctor, BackpackDataMgr.BackpackViewController.tabNameArr, $CreateAnonymousDelegate(this, function (tuple, i){
                var ctrl = this.AddChild$2$$GameObject$$String$$String(TabBtnWidgetController.ctor, TabBtnWidget.ctor, this.get_View().get_TabGridAnchor(), TabbtnPrefabPath.TabBtnWidget.toString(), "Tabbtn_" + i);
                ctrl.SetBtnLbl(tuple.p2);
                this.tabMgr.AddTabCtrl(ctrl);
            }));
            var btnIdx = CollectionExtension.FindElementIdx$1(Tuple$2.ctor, BackpackDataMgr.BackpackViewController.tabNameArr, $CreateAnonymousDelegate(this, function (tuple){
                return tuple.p1 == BackpackDataMgr.get_Instance()._data.curTab;
            }));
            this.tabMgr.SetTabBtn(btnIdx);
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.SubscribeAndFire$1(System.Int32.ctor, this.tabMgr.get_Stream(), $CreateAnonymousDelegate(this, function (index){
                BackpackDataMgr.get_Instance()._data.curTab = BackpackDataMgr.BackpackViewController.tabNameArr[index].p1;
                BackpackDataMgr.get_Instance().FireData();
            })));
        },
        UpdateWithData: function (_data){
            if (_data == null)
                return;
            var data = _data.get_BackpackViewData();
            switch (data.get_CurTab()){
                case BackpackViewTab.Backpack:
                    {
                    this.get_View().ShowPlayerInfo(true);
                    this.UpdatePlayerInfo(data);
                    this.UpdatePlayerModel();
                    this.get_View().ShowWarehouse(false);
                    }
                    break;
                case BackpackViewTab.Warehouse:
                    {
                    this.get_View().ShowPlayerInfo(false);
                    this.get_View().ShowWarehouse(true);
                    this.UpdateWarehouseView(data);
                    }
                    break;
            }
        },
        UpdatePlayerInfo: function (data){
        },
        UpdatePlayerModel: function (){
            this._modelDisplay.SetupMainRoleModel(false);
            this._modelDisplay.CleanUpCustomAnimations();
        },
        UpdateWarehouseView: function (data){
        },
        CloseBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("BackpackView" /* BackpackView.NAME */, true);
        },
        ArrangeBtn_UIButtonClickHandler: function (){
        },
        DecomposeBtn_UIButtonClickHandler: function (){
        },
        Composite_UIButtonClickHandler: function (){
        },
        CopperAddBtnSprite_UIButtonClickHandler: function (){
        },
        SiliverAddBtnSprite_UIButtonClickHandler: function (){
        },
        InitViewWithStream: function (){
            BackpackDataMgr.stream.OnNext(BackpackDataMgr.get_Instance()._data);
        },
        RegistEvent: function (){
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnArrangeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ArrangeBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnDecomposeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.DecomposeBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnComposite_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Composite_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCopperAddBtnSprite_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CopperAddBtnSprite_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnSiliverAddBtnSprite_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.SiliverAddBtnSprite_UIButtonClickHandler();
            })));
        }
    }
};
JsTypes.push(BackpackDataMgr$BackpackViewController);
var BackpackDataMgr$TempBackPackViewController = {
    fullname: "BackpackDataMgr.TempBackPackViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        Open: function (){
            BackpackDataMgr.get_Instance()._data.curTempPageNum = 0;
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(BackpackDataMgr.TempBackPackViewController.ctor, "TempBackPackView" /* TempBackPackView.NAME */, UILayerType.DefaultModule, true, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.myPackContainer = null;
            this.tempPackContainer = null;
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, TempBackPackView.ctor, ITempBackPackView.ctor, IBackpackData.ctor);
        },
        AfterInitView: function (){
            this.myPackContainer = this.AddChild$2$$GameObject$$String$$String(ItemsPageContainerController.ctor, ItemsPageContainer.ctor, this.get_View().get_MyBackAnchor(), "ItemsPageContainer" /* ItemsPageContainer.NAME */, "TempBackpack");
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IBackpackData.ctor, BackpackDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (data){
                this.myPackContainer.UpdateView$$ITempBackpackViewData(data.get_TempBackpackViewData());
            })));
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(System.Int32.ctor, this.myPackContainer.get_OnItemClick(), $CreateAnonymousDelegate(this, function (i){
                if (i >= BackpackDataMgr.get_Instance()._data._BagDto.capability){
                }
                else {
                    var item = BackpackDataMgr.get_Instance()._data.GetBagItemByIndex(i);
                    if (item != null){
                    }
                }
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            this.tempPackContainer = this.AddChild$2$$GameObject$$String$$String(ItemContainerController.ctor, ItemContainer.ctor, this.get_View().get_TempBackAnchor(), "ItemContainer" /* ItemContainer.NAME */, "MyBackpack");
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IBackpackData.ctor, BackpackDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (data){
                this.tempPackContainer.UpdateView(data.get_TempBackpackViewData().GetTempBagItems(), 25 /* ItemsContainerConst.PageCapability */);
            })));
            d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(System.Int32.ctor, this.tempPackContainer.get_OnItemClick(), $CreateAnonymousDelegate(this, function (i){
                var item = BackpackDataMgr.get_Instance()._data.GetTempBagItemByIndex(i);
                if (item != null){
                    BackpackDataMgr.get_Instance()._data.curSelectTempItem = item;
                }
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            BackpackDataMgr.get_Instance()._data.curSelectTempItem = null;
            BackpackDataMgr.get_Instance()._data.curTempPageNum = 0;
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        TransBtn_UIButtonClickHandler: function (){
        },
        CloseBtn_UIButtonClickHandler: function (){
        },
        TransAllBtn_UIButtonClickHandler: function (){
        },
        ArrangeBtn_UIButtonClickHandler: function (){
        },
        DecomposeBtn_UIButtonClickHandler: function (){
        },
        Composite_UIButtonClickHandler: function (){
        },
        InitViewWithStream: function (){
            BackpackDataMgr.stream.OnNext(BackpackDataMgr.get_Instance()._data);
        },
        RegistEvent: function (){
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IBackpackData.ctor, BackpackDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnTransBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.TransBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnTransAllBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.TransAllBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnArrangeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ArrangeBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnDecomposeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.DecomposeBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnComposite_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Composite_UIButtonClickHandler();
            })));
        }
    }
};
JsTypes.push(BackpackDataMgr$TempBackPackViewController);
var BackpackDataMgr$BackpackData = {
    fullname: "BackpackDataMgr.BackpackData",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            BackpackDataMgr.BackpackData.ItemTabNameSet = [Tuple.Create$2$$T1$$T2(ItemTypeTab.ctor, System.String.ctor, ItemTypeTab.Item, "物品"), Tuple.Create$2$$T1$$T2(ItemTypeTab.ctor, System.String.ctor, ItemTypeTab.Task, "任务"), Tuple.Create$2$$T1$$T2(ItemTypeTab.ctor, System.String.ctor, ItemTypeTab.Pet, "武将")];
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["IBackpackData", "IBackpackViewData", "ITempBackpackViewData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._BagDto = null;
            this._TaskDto = null;
            this._PetDto = null;
            this.curBagTab = ItemTypeTab.Item;
            this.curTab = BackpackViewTab.Backpack;
            this.itemPageNum = 0;
            this.taskPageNum = 0;
            this.petPageNum = 0;
            this.curTempPageNum = 0;
            this.curSelectTempItem = null;
            System.Object.ctor.call(this);
        },
        Dispose: function (){
        },
        BackpackViewData$$: "IBackpackViewData",
        get_BackpackViewData: function (){
            return this;
        },
        TempBackpackViewData$$: "ITempBackpackViewData",
        get_TempBackpackViewData: function (){
            return this;
        },
        CurTab$$: "BackpackViewTab",
        get_CurTab: function (){
            return this.curTab;
        },
        ItemTabIndex$$: "System.Int32",
        get_ItemTabIndex: function (){
            return CollectionExtension.FindElementIdx$1(Tuple$2.ctor, BackpackDataMgr.BackpackData.ItemTabNameSet, $CreateAnonymousDelegate(this, function (tuple){
                return tuple.p1 == this.curBagTab;
            }));
        },
        CurPageNum$$: "System.Int32",
        get_CurPageNum: function (){
            switch (this.curBagTab){
                case ItemTypeTab.Item:
                    return this.itemPageNum;
                case ItemTypeTab.Task:
                    return this.taskPageNum;
                case ItemTypeTab.Pet:
                    return this.petPageNum;
                default:
                    return 0;
            }
        },
        CurTempPageNum$$: "System.Int32",
        get_CurTempPageNum: function (){
            return this.curTempPageNum;
        },
        PageNum$$: "System.Int32",
        get_PageNum: function (){
            switch (this.curBagTab){
                case ItemTypeTab.Item:
                    return ((System.Math.Ceiling$$Double(System.Math.Max$$Int32$$Int32(this._BagDto.capability + 5 /* ItemsContainerConst.RowCapability */, this._BagDto.maxCapability) * 1 / 25)) | 0);
                case ItemTypeTab.Task:
                    return ((System.Math.Ceiling$$Double(this._TaskDto.capability * 1 / 25)) | 0);
                case ItemTypeTab.Pet:
                    return ((System.Math.Ceiling$$Double(this._PetDto.capability * 1 / 25)) | 0);
                default:
                    return 1;
            }
        },
        GetTempBagItems: function (){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        GetTempBagItemByIndex: function (index){
            return null;
        },
        GetBagItems: function (){
            if (this._BagDto == null || CollectionExtension.IsNullOrEmpty$1$$List$1(AppDto.BagItemDto.ctor, this._BagDto.items))
                return null;
            return CollectionExtension.Filter$1(AppDto.BagItemDto.ctor, this._BagDto.items, $CreateAnonymousDelegate(this, function (i){
                return i.index >= 0;
            }));
        },
        GetBagItemByIndex: function (index){
            if (this._BagDto == null || CollectionExtension.IsNullOrEmpty$1$$List$1(AppDto.BagItemDto.ctor, this._BagDto.items))
                return null;
            return this._BagDto.items.Find($CreateAnonymousDelegate(this, function (i){
                return i.index == index;
            }));
        },
        GetBagItemByTabAndIndex: function (tab, index){
            return null;
        },
        ItemBagCapability$$: "System.Int32",
        get_ItemBagCapability: function (){
            return this._BagDto == null ? 0 : this._BagDto.capability;
        }
    }
};
JsTypes.push(BackpackDataMgr$BackpackData);
var BackPackDataMgr$BackPackNetMsg = {
    fullname: "BackPackDataMgr.BackPackNetMsg",
    baseTypeName: "System.Object",
    staticDefinition: {
        StartAsynInit: function (onComplete, onError){
            var version = GameDataManager.get_Instance().GetDataVersion(GameDataManager.get_Data_Self_PackDto_Backpack());
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(BackPackDataMgr$BackPackNetMsg);
var BattleAutoSkillConfigController$BattleConfigSkillType = {
    fullname: "BattleAutoSkillConfigController.BattleConfigSkillType",
    staticDefinition: {
        Undefined: 0,
        MainRoleAutoSkill: 1,
        MainPetAutoSkill: 2,
        MainRoleSubSkill: 3,
        MainPetSubSkill: 4
    },
    Kind: "Enum"
};
JsTypes.push(BattleAutoSkillConfigController$BattleConfigSkillType);
var BattleAutoSummonHeroController$PositionType = {
    fullname: "BattleAutoSummonHeroController.PositionType",
    staticDefinition: {
        Undefined: 0,
        CurrentUsed: 1,
        CurrentSelected: 2,
        ToBeSelected: 3
    },
    Kind: "Enum"
};
JsTypes.push(BattleAutoSummonHeroController$PositionType);
var MultipleSelectionManager$Side = {
    fullname: "MultipleSelectionManager.Side",
    staticDefinition: {
        Left: 0,
        LeftTop: 1,
        LeftBottom: 2,
        Right: 3,
        RightTop: 4,
        RightBottom: 5,
        Top: 6,
        TopLeft: 7,
        TopRight: 8,
        Bottom: 9,
        BottomLeft: 10,
        BottomRight: 11
    },
    Kind: "Enum"
};
JsTypes.push(MultipleSelectionManager$Side);
var EmailContentDataMgr$EmailContentController = {
    fullname: "EmailContentDataMgr.EmailContentController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.itemCtlDic = null;
            this.viewCtl = null;
            this.curSelectDto = null;
            this.curIndex = 0;
            FRPBaseController$3.ctor.call(this, EmailContent.ctor, IEmailContent.ctor, IEmailContentData.ctor);
        },
        InitViewWithStream: function (){
        },
        AfterInitView: function (){
            this.InitEmailItemList();
        },
        RegistEvent: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IEmailContentData.ctor, EmailContentDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
                this.UpdateView(data);
            }));
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().get_OneKeyBtn().onClick, $CreateDelegate(this, this.OnOneKeyReceiveBtnClick));
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().get_DelReadBtn().onClick, $CreateDelegate(this, this.OnDelReadBtnClick));
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().get_DelReadBtn().onClick, $CreateDelegate(this, this.OnDelReadBtnClick));
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().get_OneKeyBtn().onClick, $CreateDelegate(this, this.OnOneKeyReceiveBtnClick));
        },
        OnEnable: function (){
            for (var i = this.itemCtlDic.get_Count() - 1; i >= 0; i--){
                if (this.CheckEmailTimeOut(this.itemCtlDic.get_Item$$Int32(i).get_MailDto()) || (this.itemCtlDic.get_Item$$Int32(i).get_MailDto().get_mailType().readDelete && this.itemCtlDic.get_Item$$Int32(i).get_MailDto().read)){
                    this.RemoveChild$2(EmailItemController.ctor, EmailItem.ctor, this.itemCtlDic.get_Item$$Int32(i));
                    this.itemCtlDic.Remove(this.itemCtlDic.get_Item$$Int32(i));
                }
            }
            for (var i = EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Count() - 1; i >= 0; i--){
                if (this.CheckEmailTimeOut(EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i)) || (EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i).get_mailType().readDelete && EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i).read))
                    EmailContentDataMgr.get_Instance()._data.get_MailSortList().Remove(EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i));
            }
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        },
        UpdateView: function (data){
            if (data.get_AddEmail()){
                var com = this.AddChild$2$$GameObject$$String$$String(EmailItemController.ctor, EmailItem.ctor, this.get_View().get_Grid().get_gameObject(), "EmailItem" /* EmailItem.NAME */, "");
                com.SetData(data.get_MailSortList().get_Item$$Int32(0), $CreateDelegate(this, this.OnItemCellSelect));
                this.itemCtlDic.Insert(0, com);
                if (this.curSelectDto != null)
                    this.curIndex++;
                for (var i = 0; i < this.itemCtlDic.get_Count(); i++){
                    this.itemCtlDic.get_Item$$Int32(i).get_transform().SetSiblingIndex(i);
                    this.itemCtlDic.get_Item$$Int32(i).get_transform().set_localPosition(UnityEngine.Vector3.op_Addition(this.itemCtlDic.get_Item$$Int32(i).get_transform().get_localPosition(), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -5 /* -5f */, 0)));
                    if (i == 0)
                        this.itemCtlDic.get_Item$$Int32(i).get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
                }
                data.set_AddEmail(false);
            }
            var $it71 = this.itemCtlDic.GetEnumerator();
            while ($it71.MoveNext()){
                var item = $it71.get_Current();
                item.UpdateView();
            }
            if (UnityEngine.Object.op_Inequality(this.get_View().get_Grid(), null))
                this.get_View().get_Grid().Reposition();
            if (UnityEngine.Object.op_Inequality(this.get_View().get_ScrollView(), null))
                this.get_View().get_ScrollView().UpdatePosition();
        },
        CheckEmailTimeOut: function (dto){
            var curTime = SystemTimeManager.get_Instance().GetServerTime();
            var expirationTime = DateUtil.UnixTimeStampToDateTime(dto.sendTime);
            expirationTime = expirationTime.AddDays(dto.get_mailType().saveDate);
            return System.DateTime.Compare(curTime, expirationTime) > 0;
        },
        OnOneKeyReceiveBtnClick: function (){
            ServiceRequestAction.SimulateNet = true;
            ServiceRequestAction.requestServerWithSimulate(AppServices.Services.Mail_DeleteAllRead(), "", $CreateDelegate(this, this.OneKeyReceiveSuccess), null);
        },
        OnDelReadBtnClick: function (){
            var susess = false;
            for (var i = 0; i < EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Count(); i++){
                if (EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i).read && EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i).attachments.get_Count() <= 0){
                    susess = true;
                    break;
                }
            }
            if (susess){
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Mail_DeleteAllRead(), "", $CreateDelegate(this, this.DelAllReadSuccessCallBack), null);
            }
            else {
                TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("没有找到已读邮件", ColorConstantV3.Color_Blue), false, false, "");
            }
        },
        DelAllReadSuccessCallBack: function (e){
            TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("已删除所有已读邮件", ColorConstantV3.Color_Blue), false, false, "");
            for (var i = this.itemCtlDic.get_Count() - 1; i >= 0; i--){
                if (this.itemCtlDic.get_Item$$Int32(i).get_MailDto().read){
                    this.RemoveChild$2(EmailItemController.ctor, EmailItem.ctor, this.itemCtlDic.get_Item$$Int32(i));
                    this.itemCtlDic.Remove(this.itemCtlDic.get_Item$$Int32(i));
                }
            }
            for (var i = EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Count() - 1; i >= 0; i--){
                if (EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i).read){
                    EmailContentDataMgr.get_Instance()._data.get_MailSortList().Remove(EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i));
                }
            }
            var list = EmailContentDataMgr.get_Instance()._data.get_MailSortList();
            if (!EmailContentDataMgr.get_Instance()._data.get_MailSortList().Contains(this.curSelectDto))
                this.curSelectDto = null;
            if (this.curSelectDto == null){
                if (EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Count() > 0){
                    this.curIndex = 0;
                    this.curSelectDto = EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(0);
                    this.OnItemCellSelect(this.itemCtlDic.get_Item$$Int32(0));
                    this.get_View().get_Grid().Reposition();
                }
                else {
                    this.curIndex = -1 /* -1 */;
                    this.curSelectDto = null;
                    ProxySocialityPanel.CloseEmailView();
                }
            }
            this.get_View().get_ScrollView().ResetPosition();
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        },
        OneKeyReceiveSuccess: function (e){
            for (var i = 0; i < EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Count(); i++){
            }
            TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("一键领取暂未开放", ColorConstantV3.Color_Blue), false, false, "");
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        },
        InitEmailItemList: function (){
            if (this.itemCtlDic == null)
                this.itemCtlDic = new System.Collections.Generic.List$1.ctor(EmailItemController.ctor);
            EmailContentDataMgr.get_Instance()._data.get_MailSortList().Sort$$Comparison$1($CreateDelegate(EmailModel.instance, EmailModel.instance.CustomSort));
            var list = EmailContentDataMgr.get_Instance()._data.get_MailSortList();
            for (var i = 0; i < EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Count(); i++){
                var com = this.AddChild$2$$GameObject$$String$$String(EmailItemController.ctor, EmailItem.ctor, this.get_View().get_Grid().get_gameObject(), "EmailItem" /* EmailItem.NAME */, "");
                com.SetData(EmailContentDataMgr.get_Instance()._data.get_MailSortList().get_Item$$Int32(i), $CreateDelegate(this, this.OnItemCellSelect));
                com.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -i * 100, 0));
                com.get_transform().SetSiblingIndex(i);
                this.itemCtlDic.Add(com);
            }
            this.get_View().get_Grid().Reposition();
            EmailContentDataMgr.get_Instance()._data.set_AddEmail(false);
        },
        OnItemCellSelect: function (ctl){
            if (ctl != null){
                for (var i = 0; i < this.itemCtlDic.get_Count(); i++){
                    var select = (this.itemCtlDic.get_Item$$Int32(i) == ctl);
                    this.itemCtlDic.get_Item$$Int32(i).Select(select);
                    if (select){
                        this.curSelectDto = this.itemCtlDic.get_Item$$Int32(i).get_MailDto();
                        this.curIndex = i;
                    }
                    if (select){
                        var emailViewCtl = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(EmailContentDataMgr.EmailViewController.ctor, "EmailView" /* EmailView.NAME */, UILayerType.BaseModule, false, false);
                        emailViewCtl.SetData(this.curSelectDto, this, this.CheckEmailTimeOut(this.curSelectDto));
                        emailViewCtl.get_transform().set_parent(this.get_View().get_EmailViewParent().get_transform());
                        emailViewCtl.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
                    }
                }
                if (!this.curSelectDto.read){
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Mail_Read(this.curSelectDto.id), "", $CreateDelegate(this, this.OnReadCallBack), null);
                }
            }
        },
        OnReadCallBack: function (e){
            var $it72 = EmailContentDataMgr.get_Instance()._data.get_MailSortList().GetEnumerator();
            while ($it72.MoveNext()){
                var item = $it72.get_Current();
                if (this.curSelectDto == item){
                    item.read = true;
                    break;
                }
            }
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        },
        AutoSelectnextEmail: function (delDto){
            if (this.itemCtlDic.get_Count() > 1){
                this.RemoveChild$2(EmailItemController.ctor, EmailItem.ctor, this.itemCtlDic.get_Item$$Int32(this.curIndex));
                this.itemCtlDic.RemoveAt(this.curIndex);
            }
            else {
                this.curSelectDto = null;
                this.RemoveChild$2(EmailItemController.ctor, EmailItem.ctor, this.itemCtlDic.get_Item$$Int32((this.itemCtlDic.get_Count() - 1)));
                this.itemCtlDic.RemoveAt(this.itemCtlDic.get_Count() - 1);
                ProxySocialityPanel.CloseEmailView();
            }
            this.get_View().get_Grid().Reposition();
            EmailContentDataMgr.get_Instance()._data.get_MailSortList().Remove(delDto);
            var dtoList = EmailContentDataMgr.get_Instance()._data.get_MailSortList();
            if (dtoList.get_Count() > 0){
                if (this.curIndex >= dtoList.get_Count()){
                    this.curIndex = 0;
                    this.get_View().get_ScrollView().ResetPosition();
                }
                if (this.curIndex >= 0)
                    this.OnItemCellSelect(this.itemCtlDic.get_Item$$Int32(this.curIndex));
            }
            this.get_View().get_Grid().Reposition();
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        }
    }
};
JsTypes.push(EmailContentDataMgr$EmailContentController);
var EmailContentDataMgr$EmailContentData = {
    fullname: "EmailContentDataMgr.EmailContentData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IEmailContentData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.addEmail = false;
            this._mailList = null;
            System.Object.ctor.call(this);
        },
        AddEmail$$: "System.Boolean",
        get_AddEmail: function (){
            return this.addEmail;
        },
        set_AddEmail: function (value){
            this.addEmail = value;
        },
        MailSortList$$: "System.Collections.Generic.List`1[[AppDto.PlayerMailDto]]",
        get_MailSortList: function (){
            if (this._mailList == null){
                this._mailList = new System.Collections.Generic.List$1.ctor(AppDto.PlayerMailDto.ctor);
                this._mailList = this.get_MailSortDtoList();
            }
            return this._mailList;
        },
        set_MailSortList: function (value){
            this._mailList = value;
        },
        MailSortDtoList$$: "System.Collections.Generic.List`1[[AppDto.PlayerMailDto]]",
        get_MailSortDtoList: function (){
            return EmailModel.instance.get_MailSortList();
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(EmailContentDataMgr$EmailContentData);
var EmailContentDataMgr$EmailViewController = {
    fullname: "EmailContentDataMgr.EmailViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.mailDto = null;
            this.emailContentCtl = null;
            this.hasAttachment = false;
            this.outTime = false;
            FRPBaseController$3.ctor.call(this, EmailView.ctor, IEmailView.ctor, IEmailContentData.ctor);
        },
        InitViewWithStream: function (){
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
        },
        RegistEvent: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IEmailContentData.ctor, EmailContentDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnGetOrDelBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.GetOrDelBtn_UIButtonClickHandler();
            }));
        },
        RegistCustomEvent: function (){
            EventDelegate.Set$$List$1$EventDelegate$$Callback(this.get_View().get_ContentRegionTrigger().onClick, $CreateDelegate(this, this.OnEmailContentClick));
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
            EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.get_View().get_ContentRegionTrigger().onClick, $CreateDelegate(this, this.OnEmailContentClick));
        },
        CloseBtn_UIButtonClickHandler: function (){
            ProxySocialityPanel.CloseEmailView();
        },
        GetOrDelBtn_UIButtonClickHandler: function (){
            if (this.hasAttachment){
                if (this.outTime){
                    TipManager.AddTip("邮件过期", false, false, "");
                    return;
                }
                ServiceRequestAction.SimulateNet = true;
                ServiceRequestAction.requestServerWithSimulate(AppServices.Services.Mail_Delete(this.mailDto.id), "", $CreateDelegate(this, this.OnExtractSuccess), null);
                TipManager.AddTip("未开放领取，此为客户端模拟", false, false, "");
            }
            else {
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Mail_Delete(this.mailDto.id), "", $CreateDelegate(this, this.OnDelSuccess), null);
            }
        },
        SetData: function (dto, contentCtl, isOutTime){
            this.mailDto = dto;
            this.emailContentCtl = contentCtl;
            this.hasAttachment = (dto.attachments.get_Count() > 0 ? true : false);
            this.get_View().get_BtnLabel().set_text(this.hasAttachment ? "领取" : "删除");
            this.get_View().get_TitleLabel().set_text(dto.title);
            this.get_View().get_ContentLabel().set_text(dto.content);
            this.outTime = isOutTime;
            if (this.mailDto.mailTypeId == 5){
                this.get_View().get_TimeLabel().set_enabled(false);
                this.get_View().get_SenderLabel().set_enabled(false);
            }
            else {
                this.get_View().get_TimeLabel().set_text(DateUtil.GetDateStr(dto.sendTime, "yyyy-MM-dd").toString());
                this.get_View().get_SenderLabel().set_text("系统");
            }
            if (dto.attachments.get_Count() > 0){
                this.get_View().get_AttachmentWidget().get_gameObject().SetActive(true);
            }
            else {
                this.get_View().get_AttachmentWidget().get_gameObject().SetActive(false);
            }
            if (this.mailDto != dto)
                this.SetBtnEnable(true);
        },
        SetBtnEnable: function (b){
            this.get_View().get_BtnGetOrDel().set_enabled(b);
            this.get_View().get_BtnGetOrDel().get_sprite().set_isGrey(!b);
            this.get_View().get_ButtonScale().set_enabled(b);
        },
        OnExtractSuccess: function (e){
            this.SetBtnEnable(true);
            if (this.mailDto.get_mailType().readDelete){
                this.emailContentCtl.AutoSelectnextEmail(this.mailDto);
            }
            else {
                this.mailDto.read = true;
                this.hasAttachment = false;
                this.get_View().get_BtnLabel().set_text("删除");
            }
            EmailContentDataMgr.stream.OnNext(EmailContentDataMgr.get_Instance()._data);
        },
        OnExtractFail: function (e){
            this.SetBtnEnable(true);
            TipManager.AddTip("领取失败", false, false, "");
        },
        OnDelSuccess: function (e){
            this.emailContentCtl.AutoSelectnextEmail(this.mailDto);
        },
        OnEmailContentClick: function (){
            var urlStr = this.get_View().get_ContentLabel().GetUrlAtPosition$$Vector3(UICamera.lastWorldPosition);
            if (!System.String.IsNullOrEmpty(urlStr)){
            }
        }
    }
};
JsTypes.push(EmailContentDataMgr$EmailViewController);
var GeneralDataMgr$GeneralViewController = {
    fullname: "GeneralDataMgr.GeneralViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.baseProCtlList = null;
            this.highProCtlList = null;
            this.iconCtlList = null;
            this.iconTransList = null;
            this.curIndex = 0;
            this.preTrans = null;
            this.curTrans = null;
            FRPBaseController$3.ctor.call(this, GeneralView.ctor, IGeneralView.ctor, IGeneralData.ctor);
        },
        AfterInitView: function (){
            this.Init();
            this.get_View().Init(GeneralDataMgr.get_Instance()._data);
        },
        RegistCustomEvent: function (){
            this.get_View().get_UICenterOnChild().onCenter = $CreateDelegate(this, this.OnCenterOnChild);
        },
        OnDispose: function (){
            this.baseProCtlList = null;
            this.highProCtlList = null;
            this.iconCtlList = null;
            this.iconTransList = null;
            this.preTrans = null;
            this._disposable.Dispose();
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        InitData: function (){
        },
        CloseButton_UIButtonClickHandler: function (){
            ProxyGeneralModule.CloseGeneralModule();
        },
        SpeakBtn_UIButtonClickHandler: function (){
        },
        AppraiseBtn_UIButtonClickHandler: function (){
        },
        HelpBtn_UIButtonClickHandler: function (){
        },
        SoulAddBtn_UIButtonClickHandler: function (){
        },
        StrenthenBtn_UIButtonClickHandler: function (){
        },
        AdvanceBtn_UIButtonClickHandler: function (){
        },
        EmbattleBtn_UIButtonClickHandler: function (){
        },
        FollowBtn_UIButtonClickHandler: function (){
        },
        EXPAddBtn_UIButtonClickHandler: function (){
        },
        LeftBtn_UIButtonClickHandler: function (){
        },
        Init: function (){
            this.baseProCtlList = new System.Collections.Generic.List$1.ctor(FightPropertyItemController.ctor);
            this.highProCtlList = new System.Collections.Generic.List$1.ctor(FightPropertyItemController.ctor);
            this.iconCtlList = new System.Collections.Generic.List$1.ctor(GeneralIconController.ctor);
            this.iconTransList = new System.Collections.Generic.List$1.ctor(UnityEngine.Transform.ctor);
            for (var i = 0; i < 12; i++){
                var baseCtl = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().get_BaseProTable().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                this.baseProCtlList.Add(baseCtl);
            }
            var defendCtl = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().get_DefendTable().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
            this.highProCtlList.Add(defendCtl);
            this.get_View().get_DefendTable().Reposition();
            for (var i = 0; i < 2; i++){
                var critCtl = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().get_CritTable().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                this.highProCtlList.Add(critCtl);
            }
            this.get_View().get_CritTable().Reposition();
            for (var i = 0; i < 7; i++){
                var physicsCtl = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().get_PhysicsTable().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                this.highProCtlList.Add(physicsCtl);
            }
            this.get_View().get_PhysicsTable().Reposition();
            for (var i = 0; i < 7; i++){
                var magicCtl = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().get_MagicTable().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                this.highProCtlList.Add(magicCtl);
            }
            this.get_View().get_MagicTable().Reposition();
            for (var i = 0; i < 14; i++){
                var fightCtl = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().get_FightTable().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                this.highProCtlList.Add(fightCtl);
            }
            this.get_View().get_FightTable().Reposition();
            this.get_View().get_HighProTable().Reposition();
            for (var i = 0; i < 5; i++){
                var com = this.AddChild$2$$GameObject$$String$$String(GeneralIconController.ctor, GeneralIcon.ctor, this.get_View().get_UICenterOnChild().get_gameObject(), "GeneralIcon" /* GeneralIcon.NAME */, "");
                this.iconCtlList.Add(com);
                this.iconTransList.Add(com.get_transform());
            }
            this.get_View().get_GridTable().Reposition();
            this.curIndex = 0;
            this.preTrans = this.iconTransList.get_Item$$Int32(0);
            this.get_View().get_UICenterOnChild().Recenter();
        },
        UpdateView: function (){
            var curGeneral = GeneralDataMgr.get_Instance()._data.get_CurrentGeneral();
            for (var i = 0; i < this.baseProCtlList.get_Count(); i++){
                this.baseProCtlList.get_Item$$Int32(i).UpdateFightPropertyNum(100);
            }
            for (var i = 0; i < this.highProCtlList.get_Count(); i++){
                this.highProCtlList.get_Item$$Int32(i).UpdateFightPropertyNum(100);
            }
        },
        OnCenterOnChild: function (go){
            this.preTrans.set_localScale(UnityEngine.Vector3.get_one());
            go.get_transform().set_localScale(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(1.2, 1.2, 1.2));
            this.curTrans = go.get_transform();
            this.preTrans = this.curTrans;
            this.get_View().get_GridTable().Reposition();
            GeneralDataMgr.stream.OnNext(GeneralDataMgr.get_Instance()._data);
        },
        InitViewWithStream: function (){
            GeneralDataMgr.stream.OnNext(GeneralDataMgr.get_Instance()._data);
            this.get_View().get_UICenterOnChild().Recenter();
        },
        RegistEvent: function (){
            var d = UniRx.ObservableExtensions.SubscribeAndFire$1(IGeneralData.ctor, GeneralDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.UpdateView();
                this.get_View().UpdateView(data);
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseButton_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseButton_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnSpeakBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.SpeakBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnAppraiseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.AppraiseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnHelpBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.HelpBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnSoulAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.SoulAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnStrenthenBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.StrenthenBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnAdvanceBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.AdvanceBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnEmbattleBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.EmbattleBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnFollowBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.FollowBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnEXPAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.EXPAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnLeftBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.LeftBtn_UIButtonClickHandler();
            }));
        }
    }
};
JsTypes.push(GeneralDataMgr$GeneralViewController);
var GeneralDataMgr$GeneralData = {
    fullname: "GeneralDataMgr.GeneralData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IGeneralData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.currentGeneral = null;
            System.Object.ctor.call(this);
        },
        Dispose: function (){
        },
        CacheHaveGeneralList$$: "System.Collections.Generic.List`1[[General]]",
        get_CacheHaveGeneralList: function (){
            return (function (){
                var $v40 = new System.Collections.Generic.List$1.ctor(General.ctor);
                $v40.Add(new General.ctor());
                return $v40;
            }).call(this);
            return GeneralModel.get_Instance().get_CacheHaveList();
        },
        CacheSoulCountDic$$: "System.Collections.Generic.Dictionary`2[[System.Int32],[System.Int32]]",
        get_CacheSoulCountDic: function (){
            return GeneralModel.get_Instance().get_CacheSoulDic();
        },
        CurrentGeneral$$: "General",
        get_CurrentGeneral: function (){
            if (this.currentGeneral == null)
                this.currentGeneral = this.get_CacheHaveGeneralList().get_Item$$Int32(0);
            return this.currentGeneral;
        },
        set_CurrentGeneral: function (value){
            this.currentGeneral = value;
        }
    }
};
JsTypes.push(GeneralDataMgr$GeneralData);
var GeneralDataMgr$GeneralNetMsg = {
    fullname: "GeneralDataMgr.GeneralNetMsg",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(GeneralDataMgr$GeneralNetMsg);
var JoystickModule$JoystickController = {
    fullname: "JoystickModule.JoystickController",
    baseTypeName: "UnityEngine.MonoBehaviour",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._bgCollider = null;
            this._joystick = null;
            this._listener = null;
            this.mRay = new UnityEngine.Ray.ctor();
            this.mRayHits = null;
            this._IsDragging = false;
            UnityEngine.MonoBehaviour.ctor.call(this);
        },
        Awake: function (){
            var trigger = this.get_transform().Find("Trigger");
            this._bgCollider = trigger.GetComponent$1(UnityEngine.BoxCollider.ctor);
            this._listener = trigger.GetComponent$1(UIEventListener.ctor);
            this._listener.onClick = $CreateDelegate(this, this.OnClickBg);
            this._joystick = trigger.GetComponent$1(NGUIJoystick.ctor);
            this._joystick.OnMoveStart = $CreateDelegate(this, this.OnStartDrag);
            this._joystick.OnMoveEnd = $CreateDelegate(this, this.OnEndDrag);
            this._joystick.OnHolding = $CreateDelegate(this, this.OnDragJoystick);
        },
        SetCollider: function (enable){
            if (UnityEngine.Object.op_Inequality(this._bgCollider, null)){
                this._bgCollider.set_enabled(enable);
            }
        },
        OnDrawGizmos: function (){
            UnityEngine.Gizmos.set_color(UnityEngine.Color.get_red());
            UnityEngine.Gizmos.DrawRay$$Vector3$$Vector3(this.mRay.get_origin(), UnityEngine.Vector3.op_Multiply$$Vector3$$Single(this.mRay.get_direction(), 1000));
            if (this.mRayHits != null){
                for (var $i74 = 0,$t74 = this.mRayHits,$l74 = $t74.length,hit = $t74[$i74]; $i74 < $l74; $i74++, hit = $t74[$i74]){
                    UnityEngine.Gizmos.DrawSphere(hit.get_point(), 0.5);
                }
            }
        },
        IsDragging$$: "System.Boolean",
        get_IsDragging: function (){
            return this._IsDragging;
        },
        set_IsDragging: function (value){
            this._IsDragging = value;
        },
        OnStartDrag: function (){
            if (JoystickModule.get_DisableMove())
                return;
            if (LayerManager.get_Instance().get_CurUIMode() != UIMode.GAME)
                return;
            if (CameraController.Instance.get_CameraMove().isMultiTouch)
                return;
            if (!this.get_IsDragging()){
                this.set_IsDragging(true);
                var heroView = WorldManager.get_Instance().GetHeroView();
                if (UnityEngine.Object.op_Inequality(heroView, null)){
                    heroView.DragBeginToWalk();
                }
            }
        },
        OnEndDrag: function (){
            if (JoystickModule.get_DisableMove())
                return;
            if (LayerManager.get_Instance().get_CurUIMode() != UIMode.GAME)
                return;
            if (CameraController.Instance.get_CameraMove().isMultiTouch)
                return;
            if (this.get_IsDragging()){
                this.set_IsDragging(false);
                var heroView = WorldManager.get_Instance().GetHeroView();
                if (UnityEngine.Object.op_Inequality(heroView, null)){
                    heroView.StopAndIdle();
                }
            }
        },
        OnDragJoystick: function (){
            if (JoystickModule.get_DisableMove())
                return;
            if (LayerManager.get_Instance().get_CurUIMode() != UIMode.GAME)
                return;
            if (CameraController.Instance.get_CameraMove().isMultiTouch)
                return;
            this.set_IsDragging(true);
            var heroView = WorldManager.get_Instance().GetHeroView();
            if (UnityEngine.Object.op_Inequality(heroView, null)){
                heroView.WalkWithJoystick(this._joystick.get_Forward());
            }
        },
        OnClickBg: function (go){
            if (LayerManager.get_Instance().get_CurUIMode() != UIMode.GAME)
                return;
            if (CameraController.Instance.get_CameraMove().isMultiTouch)
                return;
            var ray = LayerManager.get_Root().SceneCamera.ScreenPointToRay(UnityEngine.Input.get_mousePosition());
            var hits = UnityEngine.Physics.RaycastAll$$Ray$$Single(ray, 500);
            var hitNpc = false;
            var hitPlayer = false;
            var hitTrans = null;
            var hitPos = UnityEngine.Vector3.get_zero();
            this.mRay = ray;
            this.mRayHits = hits;
            for (var i = 0,len = hits.length; i < len; i++){
                var hit = hits[i];
                var col = hit.get_collider();
                if (this.IsNpc(col)){
                    hitNpc = true;
                    hitTrans = hit.get_transform();
                    break;
                }
                if (this.IsPlayer(col)){
                    hitPlayer = true;
                    hitTrans = hit.get_transform();
                    break;
                }
                if (this.IsTerrain(col)){
                    hitPos = hit.get_point();
                }
            }
            if (hitNpc){
                this.HandleNpcClick(hitTrans.get_gameObject());
            }
            else if (hitPlayer){
                this.HandlePlayerClick(hitTrans.get_gameObject());
            }
            else {
                this.HandleTerrainClick(hitPos, true);
                JoystickModule.get_Instance().UpdateSelectPlayerInfo(null);
                GameDebuger.TODO("ModelManager.MissionData.HeroCharacterControllerEnable(true, 0);");
            }
        },
        IsNpc: function (c){
            if (UnityEngine.Object.op_Equality(c, null))
                return false;
            return c.CompareTag("Npc" /* GameTag.Tag_Npc */);
        },
        IsPlayer: function (c){
            if (UnityEngine.Object.op_Equality(c, null))
                return false;
            return c.CompareTag("Player" /* GameTag.Tag_Player */);
        },
        IsTerrain: function (c){
            if (UnityEngine.Object.op_Equality(c, null))
                return false;
            return c.CompareTag("Terrain" /* GameTag.Tag_Terrain */);
        },
        HandleNpcClick: function (npcGo){
            if (JoystickModule.get_DisableMove())
                return;
            GameDebuger.TODO("if (ModelManager.BridalSedan.IsMe())\n        {\n            TipManager.AddTip(BridalSedanModel.CanNotMove);\n            return;\n        }");
            var npcUnit = WorldManager.get_Instance().GetNpcViewManager().GetNpcUnit$$GameObject(npcGo);
            if (npcUnit == null)
                return;
            var npc = npcUnit.GetNpc();
            if (npc == null)
                return;
            if (Is(npc, AppDto.NpcDoubleTeleport.ctor))
                return;
            GameDebuger.TODO("ModelManager.MissionData.HeroCharacterControllerEnable(true, 0);");
            npcUnit.Trigger();
        },
        HandlePlayerClick: function (playerGo){
            if (UnityEngine.Object.op_Inequality(playerGo, null)){
                GameDebuger.TODO("if (ModelManager.BridalSedan.IsMe())\n            {\n                TipManager.AddTip(BridalSedanModel.CanNotMove);\n                return;\n            }");
                var playerView = playerGo.GetComponent$1(PlayerView.ctor);
                if (UnityEngine.Object.op_Equality(playerView, null))
                    return;
                if (playerView.GetPlayerDto().id != ModelManager.get_Player().GetPlayerId()){
                    JoystickModule.get_Instance().UpdateSelectPlayerInfo(playerView.GetPlayerDto());
                    var effpath = GameEffectConst.GetGameEffectPath("game_eff_2017" /* GameEffectConst.Effect_CharactorClick */);
                    OneShotSceneEffect.BeginFollowEffect(effpath, playerView.get_transform(), 2, 1, null);
                }
                this.HandleTerrainClick(playerView.get_cachedTransform().get_position(), false);
            }
        },
        HandleTerrainClick: function (hitPos, showEff){
            if (JoystickModule.get_DisableMove())
                return;
            GameDebuger.TODO("if (ModelManager.BridalSedan.IsMe())\n        {\n            TipManager.AddTip(BridalSedanModel.CanNotMove);\n            return;\n        }");
            var heroView = WorldManager.get_Instance().GetHeroView();
            if (UnityEngine.Object.op_Implicit(heroView)){
                heroView.WalkToPoint(hitPos, null, false);
                GameDebuger.TODO("ModelManager.MissionData.HeroCharacterControllerEnable(true, 0);");
                ModelManager.get_Player().StopAutoNav();
            }
            if (showEff){
                OneShotSceneEffect.Begin(GameEffectConst.GetGameEffectPath("game_eff_2012" /* GameEffectConst.Effect_TerrainClick */), hitPos, 2, 1, null);
            }
        }
    }
};
JsTypes.push(JoystickModule$JoystickController);
var JoystickModule$JoystickModuleData = {
    fullname: "JoystickModule.JoystickModuleData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IJoystickModuleData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this._selectedPlayerDto = null;
            System.Object.ctor.call(this);
        },
        SelectedPlayerDto$$: "AppDto.ScenePlayerDto",
        get_SelectedPlayerDto: function (){
            return this._selectedPlayerDto;
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(JoystickModule$JoystickModuleData);
var MainUIExpandContentViewController$ExpandContentType = {
    fullname: "MainUIExpandContentViewController.ExpandContentType",
    staticDefinition: {
        nothing: 0,
        mission: 1,
        team: 2
    },
    Kind: "Enum"
};
JsTypes.push(MainUIExpandContentViewController$ExpandContentType);
var MainUIExpandContentViewController$OperateTeamType = {
    fullname: "MainUIExpandContentViewController.OperateTeamType",
    staticDefinition: {
        NONE: 0,
        LEAVETEAM: 1,
        BACKTEAM: 2,
        CHECKINFO: 3,
        LEADBYOTHER: 4,
        PLEASELEAVE: 5,
        SUMMON: 6,
        LEAVELITTLE: 7,
        APPLYLEADTEAM: 8,
        SAMERIDING: 9,
        RIDEOFF: 10,
        KICKRIDING: 11
    },
    Kind: "Enum"
};
JsTypes.push(MainUIExpandContentViewController$OperateTeamType);
var MainUIDataMgr$MainUIViewController = {
    fullname: "MainUIDataMgr.MainUIViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        cctor: function (){
            MainUIDataMgr.MainUIViewController.CharacterPropertyViewName = "CharacterPropertyView";
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, MainUIView.ctor, IMainUIView.ctor, IMainUIData.ctor);
        },
        AfterInitView: function (){
            this.InitCharactorInfo();
            this.InitExpandContentInfo();
        },
        Button_GmTest_UIButtonClickHandler: function (){
            ProxyGMTestModule.Open();
        },
        MiniMapBtn_UIButtonClickHandler: function (){
            ProxyWorldMapModule.OpenMiniMap();
        },
        WorldMapBtn_UIButtonClickHandler: function (){
            ProxyWorldMapModule.OpenMiniWorldMap();
        },
        Button_PlayerInfo_UIButtonClickHandler: function (){
            if (MainUIDataMgr.get_Instance()._data.selectedPlayer != null){
                var pos = this.get_View().get_PlayerInfoViewAnchor_GO().get_transform().get_parent().TransformPoint$$Vector3(this.get_View().get_PlayerInfoViewAnchorPos());
                ProxyMainUIModule.OpenPlayerInfoView$$Vector3$$ScenePlayerDto(pos, MainUIDataMgr.get_Instance()._data.selectedPlayer);
            }
        },
        Friend_UIButtonClickHandler: function (){
            var pos = this.get_View().get_FriendBtnPivotTrans().get_parent().TransformPoint$$Vector3(this.get_View().get_FriendBtnPivotTrans().get_localPosition());
            ProxySocialityPanel.OpenSocialityPanel(pos);
        },
        Button_Pack_UIButtonClickHandler: function (){
            ProxyBackpack.OpenBackpack(BackpackViewTab.Backpack);
        },
        TempBtn_UIButtonClickHandler: function (){
            ProxyBackpack.OpenTempBackpack();
            this.get_View().ShowTempBagBtn(false);
        },
        Button_Partner_UIButtonClickHandler: function (){
            ProxyGeneralModule.OpenGeneralModule();
        },
        OpenPlayerPropView: function (){
            GameDebuger.TODO("if (ModelManager.BridalSedan.IsMe())\r\n        {\r\n            TipManager.AddTip(\'你正在乘坐花轿，不能到处乱跑哦！\');\r\n            return;\r\n        }");
            ProxyPlayerPropertyModule.OpenPlayerPropertyModule();
        },
        OnDispose: function (){
            this._disposable.Dispose();
            this._disposable = null;
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IMainUIData.ctor, MainUIDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.SubscribeAndFire$1(UIMode.ctor, LayerManager.get_Stream(), $CreateAnonymousDelegate(this, function (mode){
                this.get_View().ChangeMode(mode);
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = GenericNotifyListener$1.get_Stream().Subscribe($CreateAnonymousDelegate(this, function (noti){
                if (noti.bagId == 3 && !CollectionExtension.IsNullOrEmpty$1$$List$1(AppDto.BagItemDto.ctor, noti.updateItems)){
                    this.get_View().ShowTempBagBtn(true);
                    this.get_View().ShakeTempBagBtn();
                }
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        InitCharactorInfo: function (){
            var _playerInfo = this.AddChild$2$$GameObject$$String$$String(CharacterPropertyController.ctor, CharacterPropertyView.ctor, this.get_View().get_TR_UpRoll_Go(), "CharacterPropertyView" /* CharacterPropertyView.NAME */, "");
            if (_playerInfo != null){
                var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IMainUIData.ctor, MainUIDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (data){
                    _playerInfo.UpdateView(true, data);
                }));
                UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
                d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, _playerInfo.get_OnIconBtnClick(), $CreateAnonymousDelegate(this, function (_){
                    this.OpenPlayerPropView();
                }));
                UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
                d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UIMode.ctor, LayerManager.get_Stream(), $CreateAnonymousDelegate(this, function (mode){
                    _playerInfo.ChangeMode(mode);
                }));
                UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            }
        },
        InitExpandContentInfo: function (){
            var ctrl = this.AddChild$2$$GameObject$$String$$String(MainUIExpandContentViewController.ctor, MainUIExpandContentView.ctor, this.get_View().get_ExpandAnchor(), "MainUIExpandContentView" /* MainUIExpandContentView.NAME */, "");
            var d = UniRx.ObservableExtensions.SubscribeAndFire$1(ITeamData.ctor, TeamDataMgr.get_Stream(), $CreateAnonymousDelegate(this, function (data){
                ctrl.UpdateView$$ITeamData(data);
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.SubscribeAndFire$1(UIMode.ctor, LayerManager.get_Stream(), $CreateAnonymousDelegate(this, function (data){
                ctrl.UpdateView$$UIMode(data);
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, ctrl.get_OnjoinOrLeaveBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                MainUIDataMgr.OnEasyCreateTeamBtnClick();
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, ctrl.get_OncallOrAwayBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                MainUIDataMgr.OnCreateTeamBtnClick();
            }));
            UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        InitViewWithStream: function (){
            MainUIDataMgr.stream.OnNext(MainUIDataMgr.get_Instance()._data);
        },
        RegistEvent: function (){
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IMainUIData.ctor, MainUIDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnButton_GmTest_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Button_GmTest_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnWorldMapBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.WorldMapBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnMiniMapBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.MiniMapBtn_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnButton_PlayerInfo_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Button_PlayerInfo_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnFriend_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Friend_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnButton_Pack_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Button_Pack_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnButton_Partner_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.Button_Partner_UIButtonClickHandler();
            })));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnTempBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.TempBtn_UIButtonClickHandler();
            })));
        }
    }
};
JsTypes.push(MainUIDataMgr$MainUIViewController);
var MainUIDataMgr$MainUIData = {
    fullname: "MainUIDataMgr.MainUIData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IMainUIData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.selectedPlayer = null;
            System.Object.ctor.call(this);
        },
        SelectedPlayer$$: "AppDto.ScenePlayerDto",
        get_SelectedPlayer: function (){
            return this.selectedPlayer;
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(MainUIDataMgr$MainUIData);
var PlayerPropertyDataMgr$AddPointPlanViewController = {
    fullname: "PlayerPropertyDataMgr.AddPointPlanViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.remainPoint = 10;
            this.apPlanItemList = new System.Collections.Generic.List$1.ctor(AddPointPlanItemController.ctor);
            this.addList = null;
            FRPBaseController$3.ctor.call(this, AddPointPlanView.ctor, IAddPointPlanView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(PlayerPropertyDataMgr.get_Instance()._data);
            this.Init();
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
                this.UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnRecommendBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.RecommendBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnConfirmBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ConfirmBtn_UIButtonClickHandler();
            }));
        },
        CloseBtn_UIButtonClickHandler: function (){
            var temp = 0;
            for (var i = 0; i < this.apPlanItemList.get_Count(); i++){
                temp += this.apPlanItemList.get_Item$$Int32(i).get_AddNum();
            }
            if (temp < 10)
                PlayerPropertyDataMgr.get_Instance()._data.set_SetToggleFalse(true);
            PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
            ProxyPlayerPropertyModule.CloseAddPointPanel();
        },
        RecommendBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpenRecommendAPPanel();
        },
        ConfirmBtn_UIButtonClickHandler: function (){
            if (this.remainPoint > 0){
                TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("方案还未分配完毕，配置完10点属性方可使用", ColorConstantV3.Color_Blue), false, false, "");
                return;
            }
            PlayerPropertyDataMgr.get_Instance()._data.set_NeedCheck(true);
            var num = ((PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential / 10) | 0);
            if (this.addList == null)
                this.addList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            else
                this.addList.Clear();
            for (var i = 0; i < this.apPlanItemList.get_Count(); i++){
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetAPPlan(this.apPlanItemList.get_Item$$Int32(i).get_ID(), this.apPlanItemList.get_Item$$Int32(i).get_AddNum());
                this.addList.Add(this.apPlanItemList.get_Item$$Int32(i).get_AddNum() * num);
            }
            if (PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential >= 10){
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Character_AddPoint(this.apPlanItemList.get_Item$$Int32(0).get_AddNum() * num, this.apPlanItemList.get_Item$$Int32(1).get_AddNum() * num, this.apPlanItemList.get_Item$$Int32(2).get_AddNum() * num, this.apPlanItemList.get_Item$$Int32(3).get_AddNum() * num, this.apPlanItemList.get_Item$$Int32(4).get_AddNum() * num), "", $CreateDelegate(this, this.AddPointSuccessCallBack), null);
            }
            this.CloseBtn_UIButtonClickHandler();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
        },
        InitData: function (){
            if (PlayerPropertyDataMgr.get_Instance()._data.get_CurrentTip() == null)
                PlayerPropertyDataMgr.get_Instance()._data.set_CurrentTip(PlayerPropertyDataMgr.get_Instance()._data.get_tipsList().get_Item$$Int32(0));
        },
        RegistCustomEvent: function (){
        },
        RemainPoint$$: "System.Int32",
        get_RemainPoint: function (){
            return this.remainPoint;
        },
        Init: function (){
            var name = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPlayerName();
            var b = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_AutoAddPoint();
            var temp = 0;
            var $it74 = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_APPlandic().GetEnumerator();
            while ($it74.MoveNext()){
                var item = $it74.get_Current();
                temp += item.get_Value();
            }
            this.get_View().GetLabel().set_text((10 - temp).toString());
            this.remainPoint = 10 - temp;
            for (var i = 0; i < 5; i++){
                var com = this.AddChild$2$$GameObject$$String$$String(AddPointPlanItemController.ctor, AddPointPlanItem.ctor, this.get_View().GetTable().get_gameObject(), "AddPointPlanItem" /* AddPointPlanItem.NAME */, "");
                com.Init(101 + i, PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_APPlandic().get_Item$$TKey(101 + i), this);
                this.apPlanItemList.Add(com);
            }
            this.get_View().GetTable().Reposition();
        },
        UpdateView: function (data){
            if (PlayerPropertyDataMgr.get_Instance()._data.get_RefreshAddPoint()){
                var aTip = data.get_CurrentTip();
                var tempList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                tempList.Add(aTip.physique);
                tempList.Add(aTip.power);
                tempList.Add(aTip.intellect);
                tempList.Add(aTip.technique);
                tempList.Add(aTip.agility);
                for (var i = 0; i < this.apPlanItemList.get_Count(); i++){
                    this.apPlanItemList.get_Item$$Int32(i).UpdateView$$Int32(tempList.get_Item$$Int32(i));
                }
                PlayerPropertyDataMgr.get_Instance()._data.set_RefreshAddPoint(false);
            }
            this.UpdateRemainPoint(0);
        },
        OnAdd: function (ctl, point){
            if (point > 0 && this.remainPoint - point >= 0){
                ctl.SetAddPointVal(ctl.get_AddNum() + point);
                this.UpdateRemainPoint(this.remainPoint - point);
            }
            else {
                TipManager.AddTip("无可分配点数", false, false, "");
            }
        },
        OnMinus: function (ctl, point){
            if (point > 0 && point <= ctl.get_AddNum()){
                ctl.SetAddPointVal(ctl.get_AddNum() - point);
                this.UpdateRemainPoint(this.remainPoint + point);
            }
            else {
                TipManager.AddTip("无法继续减少", false, false, "");
            }
        },
        UpdateRemainPoint: function (val){
            this.remainPoint = val;
            this.get_View().GetLabel().set_text(this.remainPoint.toString());
        },
        AddPointSuccessCallBack: function (e){
            var num = ((PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential / 10) | 0);
            var totalAddPoint = 0;
            for (var i = 0; i < this.apPlanItemList.get_Count(); i++){
                var originPoint = ((PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPropertyByID(i + 101)) | 0);
                var addPoint = this.apPlanItemList.get_Item$$Int32(i).get_AddNum() * num;
                totalAddPoint += addPoint;
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetPropertyByID(i + 101, addPoint + originPoint);
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetSecondProperty(i + 101, addPoint);
                this.apPlanItemList.get_Item$$Int32(i).set_AddNum(0);
            }
            PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential = PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential - totalAddPoint;
            PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$AddPointPlanViewController);
var PlayerPropertyDataMgr$ChangeNameViewController = {
    fullname: "PlayerPropertyDataMgr.ChangeNameViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.oldName = null;
            this.needIgot = 0;
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, ChangeNameView.ctor, IChangeNameView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(PlayerPropertyDataMgr.get_Instance()._data);
            this.get_View().InitView(PlayerPropertyDataMgr.get_Instance()._data);
            this.oldName = this.get_View().InputValue();
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCancelBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CancelBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnConfirmBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ConfirmBtn_UIButtonClickHandler();
            }));
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        },
        CancelBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.CloseChangeNamePanel();
        },
        ConfirmBtn_UIButtonClickHandler: function (){
            if (!this.get_View().IsInputContentlegal())
                return;
            GameDebuger.LogError("[TODO]模拟发送改名", null);
            ServiceRequestAction.requestServerWithSimulate(new AppDto.GeneralRequest.ctor(), "", $CreateAnonymousDelegate(this, function (e){
                this.OnSuccess();
            }), $CreateAnonymousDelegate(this, function (e){
                this.OnError();
            }));
        },
        OnSuccess: function (){
            ProxyPlayerPropertyModule.OpenConfirmPanel(this.SetConfirmTile(), $CreateAnonymousDelegate(this, function (){
                ProxyPlayerPropertyModule.CloseConfirmPanel();
            }), $CreateDelegate(this, this.OnConfirmViewOKBtnCallBack));
        },
        OnError: function (){
            TipManager.AddTip(AppStringHelper.WrapColor$$String$$Color("新名字已经被占用，请重新输入", ColorConstantV3.Color_Blue), false, false, "");
        },
        OnConfirmViewOKBtnCallBack: function (){
            ProxyPlayerPropertyModule.CloseChangeNamePanel();
        },
        ChangeNameSuccessCallback: function (){
            var message = System.String.Format$$String$$Object$Array("{0}{1}已经成功改名为{2}{3}", [AppStringHelper.WrapColor$$String$$Color(this.oldName, ColorConstantV3.Color_Blue), AppStringHelper.WrapColor$$String$$Color("(旧名字)", ColorConstantV3.Color_Blue), AppStringHelper.WrapColor$$String$$Color(PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPlayerName(), ColorConstantV3.Color_Purple), AppStringHelper.WrapColor$$String$$Color("(新名字)", ColorConstantV3.Color_Purple)]);
            var email = message + "，请及时修改备注，以防遗忘！";
            GameDebuger.TODO("改名成功，发放邮件给玩家好友");
            GameDebuger.TODO(" if(Instance._data.GetPlayerModel.GetPlayerLevel() >= 30){ } ");
        },
        ChangeNameErrorCallBack: function (){
        },
        SetConfirmTile: function (){
            return null;
        },
        CalculateNeedIgot: function (){
            return System.Math.Min$$Int32$$Int32(PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPlayerLevel() * 5 + 250, 1000);
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$ChangeNameViewController);
var PlayerPropertyDataMgr$HighPropertyUIViewController = {
    fullname: "PlayerPropertyDataMgr.HighPropertyUIViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.containerCtlList = null;
            this.itemCtlList = null;
            FRPBaseController$3.ctor.call(this, HighPropertyUIView.ctor, IHighPropertyUIView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.InitView(PlayerPropertyDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
        },
        CloseBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.CloseHighPropertyPanel();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        },
        InitView: function (data){
            var typeList = data.get_GetPlayerModel().GetThirdProType();
            var propertyType = ["", "通用", "物理", "法术", "辅助", "异常"];
            var $it75 = typeList.GetEnumerator();
            while ($it75.MoveNext()){
                var kvp = $it75.get_Current();
                if (kvp.get_Value().get_Count() <= 0)
                    continue;
                var highProContainer = this.AddCachedChild$2$$GameObject$$String$$String(HighPropertyContainerController.ctor, HighPropertyContainer.ctor, this.get_View().GetTabel().get_gameObject(), "HighPropertyContainer" /* HighPropertyContainer.NAME */, "");
                var title = kvp.get_Key();
                highProContainer.Init(propertyType[title]);
                if (this.containerCtlList == null)
                    this.containerCtlList = new System.Collections.Generic.List$1.ctor(HighPropertyContainerController.ctor);
                this.containerCtlList.Clear();
                this.containerCtlList.Add(highProContainer);
                for (var j = 0; j < kvp.get_Value().get_Count(); j++){
                    var itemCtl = this.AddCachedChild$2$$GameObject$$String$$String(HighPropertyItemController.ctor, HighPropertyItem.ctor, highProContainer.get_Tabel().get_gameObject(), "HighPropertyItem" /* HighPropertyItem.NAME */, "");
                    var ca = data.get_GetPlayerModel().GetCharacterAbilityByID(kvp.get_Value().get_Item$$Int32(j).propId);
                    itemCtl.Init(ca.icon, ca.name, kvp.get_Value().get_Item$$Int32(j).propValue);
                    if (this.itemCtlList == null)
                        this.itemCtlList = new System.Collections.Generic.List$1.ctor(HighPropertyItemController.ctor);
                    this.itemCtlList.Clear();
                    this.itemCtlList.Add(itemCtl);
                }
                highProContainer.Reposition();
            }
            this.get_View().GetTabel().Reposition();
        },
        UpdateView: function (data){
            this.InitView(data);
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$HighPropertyUIViewController);
var PlayerPropertyDataMgr$PlayerPropertyViewController = {
    fullname: "PlayerPropertyDataMgr.PlayerPropertyViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        OpenPlayerPropertyViewModule: function (){
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(PlayerPropertyDataMgr.PlayerPropertyViewController.ctor, "PlayerPropertyView" /* PlayerPropertyView.NAME */, UILayerType.ThreeModule, true, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.fightPropertyItemCtr = null;
            this._curPlanId = -1 /* -1 */;
            this._remainPotential = 0;
            this.bpInfoCtlDic = null;
            this.addPointSliderCtlDic = null;
            this.addPointList = null;
            this.addPoint = null;
            FRPBaseController$3.ctor.call(this, PlayerPropertyView.ctor, IPlayerPropertyView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().InitView(PlayerPropertyDataMgr.get_Instance()._data);
            this.InitFightProperty(PlayerPropertyDataMgr.get_Instance()._data);
            this.get_View().UpdateView(PlayerPropertyDataMgr.get_Instance()._data);
            this.InitPointInfoGroup();
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
                this.UpdateFightProperty(data);
                this.UpdateAddPointPanel(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnProfessionBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ProfessionBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnChangeNameBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ChangeNameBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnAppellationBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.AppellationBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnNoteBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.NoteBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnHighPropertyBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.HighPropertyBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnVigourUseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.VigourUseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnAddPointPlanBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.AddPointPlanBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnAutoAddPointBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.AutoAddPointToggleBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnResetPointBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ResetPointBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnConfirmPointBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ConfirmPointBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnPortraitIcon_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.PortraitIcon_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnMainJobChangeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.MainJobChangeBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnTagEditBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.TagEditBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnLikeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.LikeBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnFlowerBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.FlowerBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnJingJiAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.JingJiAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnJingJiUseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.JingJiUseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCorpsContributionAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CorpsContributionAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCorpsContributionUseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CorpsContributionUseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnMengXinScoreAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.MengXinScoreAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnMengXinScoreUseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.MengXinScoreUseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCountryWarSocreAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CountryWarSocreAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCountryWarSocreUseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CountryWarSocreUseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnForgeSocreAddBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ForgeSocreAddBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnForgeSocreUseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ForgeSocreUseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnBasePropertyContainer_UIbuttonClick(), $CreateAnonymousDelegate(this, function (_){
                this.BasePropertyContainer_UIbuttonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnFightPropertyContainer_UIbuttonClick(), $CreateAnonymousDelegate(this, function (_){
                this.FightPropertyContainer_UIbuttonClickHandler();
            }));
        },
        AutoAddPointToggleBtn_UIButtonClickHandler: function (){
            var b = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_AutoAddPoint();
            this.get_View().GetToggleSelect().set_enabled(!b);
            PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().set_AutoAddPoint(!b);
            if (!b){
                var temp = 0;
                var dic = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_APPlandic();
                for (var i = 0; i < 5; i++){
                    temp += dic.get_Item$$TKey(i + 101);
                }
                if (temp == 0)
                    ProxyPlayerPropertyModule.OpenAddPointPanel();
                else if (PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential >= 10){
                    var frequency = ((PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential / 10) | 0);
                    if (this.addPointList == null)
                        this.addPointList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                    else
                        this.addPointList.Clear();
                    var $it76 = dic.GetEnumerator();
                    while ($it76.MoveNext()){
                        var item = $it76.get_Current();
                        this.addPointList.Add(item.get_Value() * frequency);
                    }
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Character_AddPoint(this.addPointList.get_Item$$Int32(0), this.addPointList.get_Item$$Int32(1), this.addPointList.get_Item$$Int32(2), this.addPointList.get_Item$$Int32(3), this.addPointList.get_Item$$Int32(4)), "", $CreateDelegate(this, this.OnToggleCheckAddPointSuccessCallBack), null);
                }
                PlayerPropertyDataMgr.get_Instance()._data.set_SetToggleFalse(false);
            }
        },
        CloseBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("PlayerPropertyView" /* PlayerPropertyView.NAME */, true);
        },
        ProfessionBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpenProfessionView();
        },
        ChangeNameBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpenChangeNamePanel();
        },
        AppellationBtn_UIButtonClickHandler: function (){
        },
        NoteBtn_UIButtonClickHandler: function (){
        },
        HighPropertyBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpneHighPropertyPanel();
        },
        VigourUseBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpenVigourPanel();
        },
        AddPointPlanBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpenAddPointPanel();
        },
        ReduceBtn_UIButtonClickHandler: function (){
        },
        CorporeityReduceBtn_UIButtonClickHandler: function (){
        },
        CorporeityAddBtn_UIButtonClickHandler: function (){
        },
        StrengthReduceBtn_UIButtonClickHandler: function (){
        },
        StrengthAddBtn_UIButtonClickHandler: function (){
        },
        IntelligenceReduceBtn_UIButtonClickHandler: function (){
        },
        IntelligenceAddBtn_UIButtonClickHandler: function (){
        },
        SkillReduceBtn_UIButtonClickHandler: function (){
        },
        SkillAddBtn_UIButtonClickHandler: function (){
        },
        EgilityReduceBtn_UIButtonClickHandler: function (){
        },
        EgilityAddBtn_UIButtonClickHandler: function (){
        },
        ResetPointBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.OpenResetPointPanel();
        },
        ConfirmPointBtn_UIButtonClickHandler: function (){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Character_AddPoint(this.addPointSliderCtlDic.get_Item$$TKey(101).get_AddPoint(), this.addPointSliderCtlDic.get_Item$$TKey(102).get_AddPoint(), this.addPointSliderCtlDic.get_Item$$TKey(103).get_AddPoint(), this.addPointSliderCtlDic.get_Item$$TKey(104).get_AddPoint(), this.addPointSliderCtlDic.get_Item$$TKey(105).get_AddPoint()), "", $CreateDelegate(this, this.AddPointSucceseeCallBack), null);
        },
        PortraitIcon_UIButtonClickHandler: function (){
        },
        MainJobChangeBtn_UIButtonClickHandler: function (){
        },
        TagEditBtn_UIButtonClickHandler: function (){
        },
        LikeBtn_UIButtonClickHandler: function (){
        },
        FlowerBtn_UIButtonClickHandler: function (){
        },
        JingJiAddBtn_UIButtonClickHandler: function (){
        },
        JingJiUseBtn_UIButtonClickHandler: function (){
        },
        CorpsContributionAddBtn_UIButtonClickHandler: function (){
        },
        CorpsContributionUseBtn_UIButtonClickHandler: function (){
        },
        MengXinScoreAddBtn_UIButtonClickHandler: function (){
        },
        MengXinScoreUseBtn_UIButtonClickHandler: function (){
        },
        CountryWarSocreAddBtn_UIButtonClickHandler: function (){
        },
        CountryWarSocreUseBtn_UIButtonClickHandler: function (){
        },
        ForgeSocreAddBtn_UIButtonClickHandler: function (){
        },
        ForgeSocreUseBtn_UIButtonClickHandler: function (){
        },
        BasePropertyContainer_UIbuttonClickHandler: function (){
            var com = this.AddChild$2$$GameObject$$String$$String(PropertyTipController.ctor, PropertyTip.ctor, this.get_View().GetFightPropertyTabel().get_transform().get_parent().get_gameObject(), "PropertyTip" /* PropertyTip.NAME */, "");
            var proList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            for (var i = 0; i < 5; i++){
                proList.Add(101 + i);
            }
            com.Init(1, proList, PlayerPropertyDataMgr.get_Instance()._data);
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(com, com.Close));
        },
        FightPropertyContainer_UIbuttonClickHandler: function (){
            var com = this.AddChild$2$$GameObject$$String$$String(PropertyTipController.ctor, PropertyTip.ctor, this.get_View().GetFightPropertyTabel().get_transform().get_parent().get_gameObject(), "PropertyTip" /* PropertyTip.NAME */, "");
            var proList = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
            for (var i = 0; i < 12; i++){
                proList.Add(201 + i);
            }
            com.Init(2, proList, PlayerPropertyDataMgr.get_Instance()._data);
            UICamera.onClick = $CombineDelegates(UICamera.onClick, $CreateDelegate(com, com.Close));
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
            this.fightPropertyItemCtr.Clear();
            this.bpInfoCtlDic.Clear();
            this.bpInfoCtlDic = null;
            this.addPointSliderCtlDic.Clear();
            this.addPointSliderCtlDic = null;
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        },
        CustomAfterInitView: function (){
        },
        InitFightProperty: function (data){
            if (this.fightPropertyItemCtr == null)
                this.fightPropertyItemCtr = new System.Collections.Generic.List$1.ctor(FightPropertyItemController.ctor);
            var temp = 0;
            for (var i = 0; i < 12; i++){
                temp = 201 + i;
                var tCharacterAbility = DataCache.getDtoByCls$1(AppDto.CharacterAbility.ctor, temp);
                var fightProCtr = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().GetFightPropertyTabel().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                fightProCtr.Init(tCharacterAbility.name, ((data.get_GetPlayerModel().GetPropertyByID(temp)) | 0), temp, ColorConstantV3.Color_Black, "10022");
                this.fightPropertyItemCtr.Add(fightProCtr);
            }
            this.get_View().GetFightPropertyTabel().Reposition();
        },
        UpdateFightProperty: function (data){
            var temp = 0;
            for (var i = 0; i < this.fightPropertyItemCtr.get_Count(); i++){
                temp = 201 + i;
                this.fightPropertyItemCtr.get_Item$$Int32(i).UpdateFightPropertyNum(((data.get_GetPlayerModel().GetPropertyByID(temp)) | 0));
            }
        },
        RemainPotential$$: "System.Int32",
        get_RemainPotential: function (){
            return this._remainPotential;
        },
        InitPointInfoGroup: function (){
            this.get_View().GetToggleSelect().set_enabled(PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_AutoAddPoint());
            this.UpdateRemainPotential(PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential);
            var num = 9;
            this.bpInfoCtlDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, PropertyInfoItemController.ctor);
            for (var i = 0; i < 9; i++){
                var com = this.AddChild$2$$GameObject$$String$$String(PropertyInfoItemController.ctor, PropertyInfoItem.ctor, this.get_View().GetAPLeftTabel().get_gameObject(), "PropertyInfoItem" /* PropertyInfoItem.NAME */, "");
                com.Init(201 + i, PlayerPropertyDataMgr.get_Instance()._data);
                com.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(com.get_transform().get_localPosition().x, -200 /* -200 */ - i, com.get_transform().get_localPosition().z));
                this.bpInfoCtlDic.Add(201 + i, com);
            }
            this.get_View().GetAPLeftTabel().Reposition();
            this.addPointSliderCtlDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int32.ctor, AddPointSliderItemController.ctor);
            for (var i = 0; i < 5; i++){
                var com = this.AddChild$2$$GameObject$$String$$String(AddPointSliderItemController.ctor, AddPointSliderItem.ctor, this.get_View().GetApRightTabel().get_gameObject(), "AddPointSliderItem" /* AddPointSliderItem.NAME */, "");
                com.InitItem(101 + i, this, PlayerPropertyDataMgr.get_Instance()._data);
                this.addPointSliderCtlDic.Add(101 + i, com);
            }
            this.get_View().GetApRightTabel().Reposition();
        },
        UpdateAddPointPanel: function (data){
            var $it77 = this.bpInfoCtlDic.GetEnumerator();
            while ($it77.MoveNext()){
                var item = $it77.get_Current();
                item.get_Value().UpdateView(data);
            }
            this._remainPotential = data.get_GetCharactorDto().potential;
            if (PlayerPropertyDataMgr.get_Instance()._data.get_NeedCheck()){
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().set_AutoAddPoint(true);
                this.get_View().GetToggleSelect().set_enabled(true);
                PlayerPropertyDataMgr.get_Instance()._data.set_NeedCheck(false);
            }
            var b = PlayerPropertyDataMgr.get_Instance()._data.get_SetToggleFalse();
            if (PlayerPropertyDataMgr.get_Instance()._data.get_SetToggleFalse()){
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().set_AutoAddPoint(false);
                this.get_View().GetToggleSelect().set_enabled(false);
            }
            var $it78 = this.addPointSliderCtlDic.GetEnumerator();
            while ($it78.MoveNext()){
                var item = $it78.get_Current();
                item.get_Value().UpdateView(data);
            }
            this.UpdateRemainPotential(this._remainPotential);
            this.get_View().GetRemainPotentialLabel().set_text(this._remainPotential.toString());
        },
        OnApSliderAdd: function (com, point){
            if (point > 0 && this._remainPotential - point >= 0){
                com.SetAddPointVal(com.get_AddPoint() + point, PlayerPropertyDataMgr.get_Instance()._data);
                this.UpdateRemainPotential(this._remainPotential - point);
                com.SetAddBtnState();
                this.CalculatePreviewBp(point, com);
            }
            if (this.get_RemainPotential() == 0){
                var $it79 = this.addPointSliderCtlDic.GetEnumerator();
                while ($it79.MoveNext()){
                    var item = $it79.get_Current();
                    item.get_Value().SetAddBtnGrey(true);
                }
            }
        },
        OnApSliderMinus: function (com, point){
            if (point > 0 && this._remainPotential + point <= PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential){
                com.SetAddPointVal(com.get_AddPoint() - point, PlayerPropertyDataMgr.get_Instance()._data);
                this.UpdateRemainPotential(this._remainPotential + point);
                com.SetAddBtnState();
                this.CalculatePreviewBp(-point, com);
            }
            if (this.get_RemainPotential() != 0){
                var $it80 = this.addPointSliderCtlDic.GetEnumerator();
                while ($it80.MoveNext()){
                    var item = $it80.get_Current();
                    item.get_Value().SetAddBtnGrey(false);
                }
            }
        },
        SetApSliderThumbActive: function (b){
            var $it81 = this.addPointSliderCtlDic.GetEnumerator();
            while ($it81.MoveNext()){
                var item = $it81.get_Current();
                item.get_Value().SetThumbActive(b);
            }
        },
        UpdateRemainPotential: function (val){
            this._remainPotential = val;
            this.get_View().GetRemainPotentialLabel().set_text(this._remainPotential.toString());
            if (this._remainPotential != PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential)
                this.get_View().GetConfirmBtn().set_isEnabled(true);
            else
                this.get_View().GetConfirmBtn().set_isEnabled(false);
        },
        CalculatePreviewBp: function (addPoint, com){
            var dicTemp = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_GetRateDic();
            var influenceDic;
            (function (){
                var $1 = $Ref(null, influenceDic);
                var $res = dicTemp.TryGetValue(com.get_PropertyID(), $1);
                influenceDic = $1.Value;
                return $res;
            }).call(this);
            if (influenceDic != null){
                var $it82 = influenceDic.GetEnumerator();
                while ($it82.MoveNext()){
                    var item = $it82.get_Current();
                    this.bpInfoCtlDic.get_Item$$TKey(item.get_Key()).PreSetNum(item.get_Value() * addPoint);
                }
            }
        },
        OnToggleCheckAddPointSuccessCallBack: function (e){
            var $it83 = this.addPointSliderCtlDic.GetEnumerator();
            while ($it83.MoveNext()){
                var item = $it83.get_Current();
                item.get_Value().set_AddPoint(0);
            }
            var total = 0;
            for (var i = 0; i < this.addPointList.get_Count(); i++){
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetPropertyByID(i + 101, PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPropertyByID(i + 101) + this.addPointList.get_Item$$Int32(i));
                total += this.addPointList.get_Item$$Int32(i);
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetSecondProperty(i + 101, this.addPointList.get_Item$$Int32(i));
            }
            PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential = PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential - total;
            PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
        },
        AddPointSucceseeCallBack: function (e){
            var level = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPlayerLevel();
            var totalAddPoint = 0;
            var $it84 = this.addPointSliderCtlDic.GetEnumerator();
            while ($it84.MoveNext()){
                var item = $it84.get_Current();
                var realVal = item.get_Value().get_RealNum();
                var addPoint = item.get_Value().get_AddPoint();
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetPropertyByID(item.get_Key(), realVal + addPoint);
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetSecondProperty(item.get_Value().get_PropertyID(), item.get_Value().get_AddPoint());
                totalAddPoint += item.get_Value().get_AddPoint();
                item.get_Value().set_AddPoint(0);
            }
            var $it85 = this.bpInfoCtlDic.GetEnumerator();
            while ($it85.MoveNext()){
                var item = $it85.get_Current();
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetPropertyByID(item.get_Key(), item.get_Value().get_Origin() + item.get_Value().get_AddNum());
                item.get_Value().set_AddNum(0);
            }
            PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential = PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential - totalAddPoint;
            PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
        },
        CalculateMaxPoint: function (totalPoint, level){
            if (level < 50)
                return totalPoint - 8 * level + 200;
            else
                return totalPoint - 4 * level;
        },
        Upgrade: function (){
            if (PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_AutoAddPoint()){
                var frequency = ((PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential / 10) | 0);
                if (this.addPoint == null)
                    this.addPoint = new System.Collections.Generic.List$1.ctor(System.Int32.ctor);
                else
                    this.addPoint.Clear();
                var apPlan = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_APPlandic();
                for (var i = 0; i < 5; i++){
                    var num = apPlan.get_Item$$TKey(i + 101) * frequency;
                    this.addPoint.Add(num);
                }
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Character_AddPoint(this.addPoint.get_Item$$Int32(0), this.addPoint.get_Item$$Int32(1), this.addPoint.get_Item$$Int32(2), this.addPoint.get_Item$$Int32(3), this.addPoint.get_Item$$Int32(4)), "", $CreateDelegate(this, this.UpgradeAutoAddPoint), null);
            }
            else {
                PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
            }
        },
        UpgradeAutoAddPoint: function (e){
            var level = PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPlayerLevel();
            var totalAddPoint = 0;
            for (var i = 0; i < this.addPoint.get_Count(); i++){
                totalAddPoint += this.addPoint.get_Item$$Int32(i);
                PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().SetPropertyByID(i + 101, PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().GetPropertyByID(i + 101) + this.addPoint.get_Item$$Int32(i));
            }
            PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential = PlayerPropertyDataMgr.get_Instance()._data.get_GetCharactorDto().potential - totalAddPoint;
            PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
        },
        Update: function (){
            if (UnityEngine.Input.GetKeyDown$$KeyCode(32)){
                PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
            }
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$PlayerPropertyViewController);
var PlayerPropertyDataMgr$HeroPropertyData = {
    fullname: "PlayerPropertyDataMgr.HeroPropertyData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IHeroPropertyData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.current = null;
            this.needCheck = false;
            this.setToggleFalse = false;
            this.refreshAddPoint = false;
            System.Object.ctor.call(this);
        },
        GetPlayerDto$$: "AppDto.PlayerDto",
        get_GetPlayerDto: function (){
            return ModelManager.get_Player().GetPlayer();
        },
        GetPlayerPropertyInfo$$: "PlayerPropertyInfo",
        get_GetPlayerPropertyInfo: function (){
            return ModelManager.get_Player().GetPlayerPropertyInfo();
        },
        GetCharactorDto$$: "AppDto.CharactorDto",
        get_GetCharactorDto: function (){
            return this.get_GetPlayerPropertyInfo().playerDto;
        },
        GetPlayerModel$$: "PlayerModel",
        get_GetPlayerModel: function (){
            return ModelManager.get_Player();
        },
        GetGeneralCharactor$$: "AppDto.GeneralCharactor",
        get_GetGeneralCharactor: function (){
            return this.get_GetCharactorDto().get_charactor();
        },
        CurrentTip$$: "AppDto.AptitudeTips",
        get_CurrentTip: function (){
            return this.current;
        },
        set_CurrentTip: function (value){
            this.current = value;
        },
        tipsList$$: "System.Collections.Generic.List`1[[AppDto.AptitudeTips]]",
        get_tipsList: function (){
            return this.get_GetPlayerModel().get_TipsList();
        },
        NeedCheck$$: "System.Boolean",
        get_NeedCheck: function (){
            return this.needCheck;
        },
        set_NeedCheck: function (value){
            this.needCheck = value;
        },
        SetToggleFalse$$: "System.Boolean",
        get_SetToggleFalse: function (){
            return this.setToggleFalse;
        },
        set_SetToggleFalse: function (value){
            this.setToggleFalse = value;
        },
        RefreshAddPoint$$: "System.Boolean",
        get_RefreshAddPoint: function (){
            return this.refreshAddPoint;
        },
        set_RefreshAddPoint: function (value){
            this.refreshAddPoint = value;
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$HeroPropertyData);
var PlayerPropertyDataMgr$RecommendAddPointUIViewController = {
    fullname: "PlayerPropertyDataMgr.RecommendAddPointUIViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.toggleList = new System.Collections.Generic.List$1.ctor(UIToggle.ctor);
            FRPBaseController$3.ctor.call(this, RecommendAddPointUIView.ctor, IRecommendAddPointUIView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(PlayerPropertyDataMgr.get_Instance()._data);
            this.Init(PlayerPropertyDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnConfirmBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ConfirmBtn_UIButtonClickHandler();
            }));
        },
        CloseBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.CloseRecommendAPPanel();
        },
        ConfirmBtn_UIButtonClickHandler: function (){
            for (var i = 0; i < this.toggleList.get_Count(); i++){
                if (this.toggleList.get_Item$$Int32(i).get_value()){
                    PlayerPropertyDataMgr.get_Instance()._data.set_CurrentTip(PlayerPropertyDataMgr.get_Instance()._data.get_tipsList().get_Item$$Int32(i));
                    PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().set_RecommendIndex(i);
                }
            }
            PlayerPropertyDataMgr.get_Instance()._data.set_RefreshAddPoint(true);
            PlayerPropertyDataMgr.get_Instance().stream.OnNext(PlayerPropertyDataMgr.get_Instance()._data);
            this.CloseBtn_UIButtonClickHandler();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
        },
        InitData: function (){
            if (PlayerPropertyDataMgr.get_Instance()._data.get_CurrentTip() == null)
                PlayerPropertyDataMgr.get_Instance()._data.set_CurrentTip(PlayerPropertyDataMgr.get_Instance()._data.get_tipsList().get_Item$$Int32(0));
        },
        RegistCustomEvent: function (){
        },
        Init: function (data){
            var tempList = PlayerPropertyDataMgr.get_Instance()._data.get_tipsList();
            for (var i = 0; i < tempList.get_Count(); i++){
                var com = this.AddChild$2$$GameObject$$String$$String(RecommendAPItemController.ctor, RecommendAPItem.ctor, this.get_View().GetTable().get_gameObject(), "RecommendAPItem" /* RecommendAPItem.NAME */, "");
                var b = i == PlayerPropertyDataMgr.get_Instance()._data.get_GetPlayerModel().get_RecommendIndex() ? true : false;
                com.Init(i, b, data);
                this.toggleList.Add(com.get_View().Toggle_UIToggle);
            }
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$RecommendAddPointUIViewController);
var PlayerPropertyDataMgr$ResetPointUIViewController = {
    fullname: "PlayerPropertyDataMgr.ResetPointUIViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.remaindPoint = 0;
            this.fightItemCtl = new System.Collections.Generic.List$1.ctor(FightPropertyItemController.ctor);
            this.resetItemCtl = new System.Collections.Generic.List$1.ctor(ResetPointItemController.ctor);
            FRPBaseController$3.ctor.call(this, ResetPointUIView.ctor, IResetPointUIView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(PlayerPropertyDataMgr.get_Instance()._data);
            this.Init(PlayerPropertyDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
                this.UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
        },
        CloseBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.CloseResetPointPanel();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
            this.fightItemCtl = null;
            this.resetItemCtl = null;
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        },
        Init: function (data){
            this.fightItemCtl.Clear();
            for (var i = 0; i < 5; i++){
                var com = this.AddChild$2$$GameObject$$String$$String(FightPropertyItemController.ctor, FightPropertyItem.ctor, this.get_View().Table().get_gameObject(), "FightPropertyItem" /* FightPropertyItem.NAME */, "");
                var num = ((data.get_GetPlayerModel().GetPropertyByID(i + 101)) | 0);
                var name = data.get_GetPlayerModel().GetCharacterAbilityByID(i + 101).name;
                com.Init(name, num, i + 101, ColorConstantV3.Color_Blue, null);
                this.fightItemCtl.Add(com);
                var resetCom = this.AddChild$2$$GameObject$$String$$String(ResetPointItemController.ctor, ResetPointItem.ctor, this.get_View().ItemTable().get_gameObject(), "ResetPointItem" /* ResetPointItem.NAME */, "");
                resetCom.Init(i + 101, data);
                this.resetItemCtl.Add(resetCom);
            }
            var resetAllCom = this.AddChild$2$$GameObject$$String$$String(ResetPointItemController.ctor, ResetPointItem.ctor, this.get_View().ItemTable().get_gameObject(), "ResetPointItem" /* ResetPointItem.NAME */, "");
            resetAllCom.Init(106, data);
            this.resetItemCtl.Add(resetAllCom);
            this.get_View().RemaindLabel().set_text(data.get_GetCharactorDto().potential.toString());
        },
        UpdateView: function (data){
            for (var i = 0; i < 5; i++){
                this.fightItemCtl.get_Item$$Int32(i).UpdateView(data);
                this.resetItemCtl.get_Item$$Int32(i).UpdateView(data);
            }
            this.resetItemCtl.get_Item$$Int32(5).UpdateView(data);
            this.get_View().RemaindLabel().set_text(data.get_GetCharactorDto().potential.toString());
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$ResetPointUIViewController);
var PlayerPropertyDataMgr$VigourUIViewController = {
    fullname: "PlayerPropertyDataMgr.VigourUIViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, VigourUIView.ctor, IVigourUIView.ctor, IHeroPropertyData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(PlayerPropertyDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IHeroPropertyData.ctor, PlayerPropertyDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnAddVigourBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.AddVigourBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnGoBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.GoBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnNoteBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.NoteBtn_UIButtonClickHandler();
            }));
        },
        CloseBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.CloseVigourPanel();
        },
        AddVigourBtn_UIButtonClickHandler: function (){
        },
        GoBtn_UIButtonClickHandler: function (){
        },
        NoteBtn_UIButtonClickHandler: function (){
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        }
    }
};
JsTypes.push(PlayerPropertyDataMgr$VigourUIViewController);
var PlayerPropertyDataMgr$ChangeNameViewController$ChangeNameProType = {
    fullname: "PlayerPropertyDataMgr.ChangeNameViewController.ChangeNameProType",
    Kind: "Enum"
};
JsTypes.push(PlayerPropertyDataMgr$ChangeNameViewController$ChangeNameProType);
var ProfessionDataMgr$ProfessionViewController = {
    fullname: "ProfessionDataMgr.ProfessionViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, ProfessionView.ctor, IProfessionView.ctor, IProfessionData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(ProfessionDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IProfessionData.ctor, ProfessionDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
        },
        CloseBtn_UIButtonClickHandler: function (){
            ProxyPlayerPropertyModule.CloseProfessionView();
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        }
    }
};
JsTypes.push(ProfessionDataMgr$ProfessionViewController);
var ProfessionDataMgr$ProfessionData = {
    fullname: "ProfessionDataMgr.ProfessionData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IProfessionData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetCharactorDto$$: "AppDto.CharactorDto",
        get_GetCharactorDto: function (){
            return ModelManager.get_Player().GetPlayerPropertyInfo().playerDto;
        },
        GetPlayerDto$$: "AppDto.PlayerDto",
        get_GetPlayerDto: function (){
            return ModelManager.get_Player().GetPlayer();
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(ProfessionDataMgr$ProfessionData);
var ServerListItemController$GetServerMessageFunc = {
    fullname: "ServerListItemController.GetServerMessageFunc",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(ServerListItemController$GetServerMessageFunc);
var SocialityDataMgr$SocialityViewController = {
    fullname: "SocialityDataMgr.SocialityViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.btnCtlList = null;
            this.curBtnIndex = 0;
            this.preBtnIndex = 0;
            this.emailContentController = null;
            this.isInit = true;
            FRPBaseController$3.ctor.call(this, SocialityView.ctor, ISocialityView.ctor, ISocialityData.ctor);
        },
        InitViewWithStream: function (){
            SocialityDataMgr.stream.OnNext(SocialityDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this.Init();
        },
        RegistEvent: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ISocialityData.ctor, SocialityDataMgr.stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtnClick();
            }));
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this._disposable.Dispose();
            for (var i = 0; i < 4; i++){
                EventDelegate.Remove$$List$1$EventDelegate$$Callback(this.btnCtlList.get_Item$$Int32(i).get_View().SocialityButton_UIButton.onClick, $CreateDelegate(this, this.OnBtnClick));
            }
        },
        CloseBtnClick: function (){
            switch (this.curBtnIndex){
                case 0:
                    break;
                case 1:
                    break;
                case 2:
                    break;
                case 3:
                    ProxySocialityPanel.CloseEmailView();
                    ProxySocialityPanel.CloseEmailContentModule();
                    break;
            }
            ProxySocialityPanel.CloseSocialityPanel();
        },
        InitData: function (){
        },
        Init: function (){
            if (this.btnCtlList == null)
                this.btnCtlList = new System.Collections.Generic.List$1.ctor(SocialityButtonController.ctor);
            var nameStr = ["聊天", "私信", "好友", "邮箱"];
            for (var i = 0; i < 4; i++){
                var btnCtl = this.AddCachedChild$2$$GameObject$$String$$String(SocialityButtonController.ctor, SocialityButton.ctor, this.get_View().get_BtnTable().get_gameObject(), "SocialityButton" /* SocialityButton.NAME */, "");
                btnCtl.get_transform().set_localPosition(UnityEngine.Vector3.op_Addition(btnCtl.get_transform().get_localPosition(), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(10 * i, 0, 0)));
                btnCtl.Init(i, nameStr[i], 0, false);
                this.btnCtlList.Add(btnCtl);
            }
            for (var i = 0; i < 4; i++){
                this.curBtnIndex = 0;
                this.preBtnIndex = 0;
                if (i == 0)
                    this.btnCtlList.get_Item$$Int32(i).SetBtnSelect(true);
                else
                    this.btnCtlList.get_Item$$Int32(i).SetBtnSelect(false);
                EventDelegate.Set$$List$1$EventDelegate$$Callback(this.btnCtlList.get_Item$$Int32(i).get_View().SocialityButton_UIButton.onClick, $CreateDelegate(this, this.OnBtnClick));
            }
            this.get_View().get_BtnTable().Reposition();
            this.emailContentController = UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(EmailContentDataMgr.EmailContentController.ctor, "EmailContent" /* EmailContent.NAME */, UILayerType.SubModule, false, true);
            this.emailContentController.get_transform().set_parent(this.get_View().get_ContentContainer());
            this.emailContentController.get_transform().set_localPosition(UnityEngine.Vector3.get_zero());
            this.emailContentController.get_gameObject().SetActive(false);
        },
        SetDefaultModuleIndex: function (index){
            UIButton.current = this.btnCtlList.get_Item$$Int32(index).get_View().SocialityButton_UIButton;
            this.OnBtnClick();
        },
        OnBtnClick: function (){
            var curBtn = UIButton.current;
            for (var i = 0; i < 4; i++){
                if (UnityEngine.Object.op_Equality(curBtn, this.btnCtlList.get_Item$$Int32(i).get_View().SocialityButton_UIButton)){
                    this.curBtnIndex = i;
                    break;
                }
            }
            if (this.curBtnIndex != this.preBtnIndex){
                this.btnCtlList.get_Item$$Int32(this.preBtnIndex).SetBtnSelect(false);
                this.btnCtlList.get_Item$$Int32(this.curBtnIndex).SetBtnSelect(true);
                switch (this.preBtnIndex){
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        ProxySocialityPanel.CloseEmailView();
                        this.emailContentController.get_gameObject().SetActive(false);
                        break;
                }
                switch (this.curBtnIndex){
                    case 0:
                        break;
                    case 1:
                        break;
                    case 2:
                        break;
                    case 3:
                        this.emailContentController.get_gameObject().SetActive(true);
                        break;
                }
            }
            this.preBtnIndex = this.curBtnIndex;
        }
    }
};
JsTypes.push(SocialityDataMgr$SocialityViewController);
var SocialityDataMgr$SocialityData = {
    fullname: "SocialityDataMgr.SocialityData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ISocialityData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        Dispose: function (){
        },
        UpdateView: function (data){
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(SocialityDataMgr$SocialityData);
var TeamDataMgr$MyClass = {
    fullname: "TeamDataMgr.MyClass",
    baseTypeName: "System.Object",
    staticDefinition: {
        Create: function (_ctrl, _dataIndex){
            var c = new TeamDataMgr.MyClass.ctor();
            c.ctrl = _ctrl;
            c.dataIndex = _dataIndex;
            return c;
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.ctrl = null;
            this.dataIndex = 0;
            System.Object.ctor.call(this);
        },
        Ctrl$$: "TeamApplicationItemController",
        get_Ctrl: function (){
            return this.ctrl;
        },
        set_Ctrl: function (value){
            this.ctrl = value;
        },
        DataIndex$$: "System.Int32",
        get_DataIndex: function (){
            return this.dataIndex;
        },
        set_DataIndex: function (value){
            this.dataIndex = value;
        }
    }
};
JsTypes.push(TeamDataMgr$MyClass);
var TeamDataMgr$TeamApplicationViewController = {
    fullname: "TeamDataMgr.TeamApplicationViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        Open: function (){
            if (!TeamDataMgr.get_Instance()._data.HasTeam()){
                TipManager.AddTip("你没有队伍", false, false, "");
            }
            else if (!TeamDataMgr.get_Instance()._data.IsLeader()){
                TipManager.AddTip("你已经在队伍中", false, false, "");
            }
            else if (!TeamDataMgr.get_Instance()._data.HasApplicationInfo()){
                TipManager.AddTip("现在没人申请进组", false, false, "");
            }
            else {
                UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(TeamDataMgr.TeamApplicationViewController.ctor, "TeamApplicationView" /* TeamApplicationView.NAME */, UILayerType.SubModule, true, true);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this._applicationItemSet = new System.Collections.Generic.List$1.ctor$$Int32(TeamDataMgr.MyClass.ctor, TeamDataMgr.ApplicationShowItemNum);
            FRPBaseController$3.ctor.call(this, TeamApplicationView.ctor, ITeamApplicationView.ctor, ITeamData.ctor);
        },
        InitViewWithStream: function (){
            TeamDataMgr.get_stream().OnNext(TeamDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            for (var i = 0; i < TeamDataMgr.ApplicationShowItemNum; ++i){
                var ctrl = this.AddChild$2$$GameObject$$String$$String(TeamApplicationItemController.ctor, TeamApplicationItem.ctor, this.get_View().get_ItemGrid_GO(), "TeamApplicationItem" /* TeamApplicationItem.NAME */, "TeamApplication_" + i + 1);
                ctrl.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(i * this.get_View().get_itemSize(), 0, 0));
                this._applicationItemSet.Add(TeamDataMgr.MyClass.Create(ctrl, i));
                var idx = i;
                var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, ctrl.get_OnagreeBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                    var index = this._applicationItemSet.get_Item$$Int32(idx).get_DataIndex();
                    var noti = TeamDataMgr.get_Instance()._data.GetJoinTeamRequestByIndex(index);
                    if (noti != null){
                        TeamDataMgr.TeamNetMsg.ApproveJoinTeam(noti.playerId);
                    }
                }));
                this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            }
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnIgnoreBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.IgnoreBtn_UIButtonClickHandler();
            }));
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ITeamData.ctor, TeamDataMgr.get_stream(), $CreateAnonymousDelegate(this, function (data){
                if (data == null || data.get_TeamApplyViewData().GetApplicationCnt() <= 0){
                    UIModuleManager.get_Instance().CloseModule("TeamApplicationView" /* TeamApplicationView.NAME */, true);
                }
                else {
                    this.get_View().UpdateView(data);
                }
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        RegistCustomEvent: function (){
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(Tuple$2.ctor, UniRx.Observable.CombineLatest$3$$IObservable$1$$IObservable$1$$Func$3(ITeamData.ctor, Tuple$3.ctor, Tuple$2.ctor, TeamDataMgr.get_stream(), this.get_View().get_ListStream(), $CreateAnonymousDelegate(this, function (data, tuple){
                return Tuple.Create$2$$T1$$T2(ITeamData.ctor, Tuple$3.ctor, data, tuple);
            })), $CreateAnonymousDelegate(this, function (tuple){
                if (tuple.p1 == null)
                    return;
                var listData = tuple.p2;
                GameUtil.LogTeam("_applicationItemSet.GetHashCode()  after " + this._applicationItemSet.GetHashCode());
                if (Tuple$3.op_Inequality(listData, null) && UnityEngine.Object.op_Inequality(listData.p1, null)){
                    var obj = this._applicationItemSet.get_Item$$Int32(listData.p2);
                    obj.set_DataIndex(listData.p3);
                }
                var teamData = tuple.p1.get_TeamApplyViewData();
                this._applicationItemSet.ForEach($CreateAnonymousDelegate(this, function (obj){
                    var ctrl = obj.get_Ctrl();
                    var info = teamData.GetJoinTeamRequestByIndex(obj.get_DataIndex());
                    ctrl.UpdateInfo(info);
                }));
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        CloseBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("TeamApplicationView" /* TeamApplicationView.NAME */, true);
        },
        IgnoreBtn_UIButtonClickHandler: function (){
            TeamDataMgr.get_Instance().CleanUpApplicationInfo();
            UIModuleManager.get_Instance().CloseModule("TeamApplicationView" /* TeamApplicationView.NAME */, true);
        },
        OnDispose: function (){
            this._disposable.Dispose();
            this._disposable = null;
            this._applicationItemSet.Clear();
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        InitData: function (){
        }
    }
};
JsTypes.push(TeamDataMgr$TeamApplicationViewController);
var TeamDataMgr$TeamBeInviteViewController = {
    fullname: "TeamDataMgr.TeamBeInviteViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        cctor: function (){
            TeamDataMgr.TeamBeInviteViewController.CountingTime = 30;
        },
        Open: function (){
            if (TeamDataMgr.get_Instance()._data.curInvitationNoti != null){
                UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(TeamDataMgr.TeamBeInviteViewController.ctor, "TeamBeInviteView" /* TeamBeInviteView.NAME */, UILayerType.SubModule, true, true);
            }
            else {
                GameUtil.LogTeam("Instance._data.curInvitationNoti == null");
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.teamInvitationCtrl = null;
            FRPBaseController$3.ctor.call(this, TeamBeInviteView.ctor, ITeamBeInviteView.ctor, ITeamData.ctor);
        },
        AfterInitView: function (){
            this.teamInvitationCtrl = this.AddController$2(TeamInvitationItemController.ctor, TeamInvitationItem.ctor, this.get_View().get_TeamInfoGO());
            this.get_View().SetCancelLabel(TeamDataMgr.TeamBeInviteViewController.CountingTime);
            JSTimer.get_Instance().SetupCoolDown("TeamBeInviteTime", TeamDataMgr.TeamBeInviteViewController.CountingTime, $CreateAnonymousDelegate(this, function (currTime){
                var t = System.Math.Max$$Int32$$Int32(0, ((System.Math.Ceiling$$Double(currTime)) | 0));
                this.get_View().SetCancelLabel(t);
            }), $CreateAnonymousDelegate(this, function (){
                if (UIModuleManager.get_Instance().IsModuleCacheContainsModule("TeamBeInviteView" /* TeamBeInviteView.NAME */)){
                    this.CloseView();
                }
            }), 1, false);
        },
        RegistEvent: function (){
            var d = UniRx.ObservableExtensions.SubscribeAndFire$1(ITeamData.ctor, TeamDataMgr.get_stream(), $CreateAnonymousDelegate(this, function (teamData){
                this.teamInvitationCtrl.UpdateView$$TeamInvitationNotify(teamData.get_TeamBeInviteData().GetCurrentInvitation());
                this.get_View().UpdateView(teamData);
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnShrinkBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.ShrinkBtn_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCancelButton_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CancelButton_UIButtonClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnOKButton_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.OKButton_UIButtonClickHandler();
            }));
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            this.teamInvitationCtrl = null;
            this._disposable.Dispose();
            this._disposable = null;
            this.StopAllCoroutines();
            JSTimer.get_Instance().CancelCd("TeamBeInviteTime");
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        InitData: function (){
        },
        ShrinkBtn_UIButtonClickHandler: function (){
            DG.Tweening.ShortcutExtensions.DOLocalMove(this.get_gameObject().get_transform(), new UnityEngine.Vector3.ctor$$Single$$Single$$Single(145, 205, 0), 0.4, false);
            DG.Tweening.TweenSettingsExtensions.OnComplete$1(DG.Tweening.Tweener.ctor, DG.Tweening.TweenSettingsExtensions.SetEase$1$$T$$Ease(DG.Tweening.Tweener.ctor, DG.Tweening.ShortcutExtensions.DOScale$$Transform$$Vector3$$Single(this.get_gameObject().get_transform(), UnityEngine.Vector3.op_Division(UnityEngine.Vector3.get_one(), 100), 0.3), 9), $CreateAnonymousDelegate(this, function (){
                this.CloseView();
            }));
        },
        CancelButton_UIButtonClickHandler: function (){
            this.CloseView();
        },
        OKButton_UIButtonClickHandler: function (){
            TeamDataMgr.TeamNetMsg.ApproveInviteMember(TeamDataMgr.get_Instance()._data.get_TeamBeInviteData().GetCurrentInvitation().inviterPlayerId, null);
            this.CloseView();
        },
        CloseView: function (){
            UIModuleManager.get_Instance().CloseModule("TeamBeInviteView" /* TeamBeInviteView.NAME */, true);
            TeamDataMgr.get_Instance()._data.curInvitationNoti = null;
        }
    }
};
JsTypes.push(TeamDataMgr$TeamBeInviteViewController);
var TeamDataMgr$TeamInvitationViewController = {
    fullname: "TeamDataMgr.TeamInvitationViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        cctor: function (){
            TeamDataMgr.TeamInvitationViewController.ItemCnt = 5;
        },
        Open: function (){
            if (TeamDataMgr.get_Instance()._data.HasTeam()){
                TipManager.AddTip("你已经在队伍中", false, false, "");
            }
            else if (!TeamDataMgr.get_Instance()._data.HasInvitationInfo()){
                TipManager.AddTip("现在没有组队邀请", false, false, "");
            }
            else {
                UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(TeamDataMgr.TeamInvitationViewController.ctor, "TeamInvitationView" /* TeamInvitationView.NAME */, UILayerType.SubModule, true, true);
            }
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this.itemList = new Array(5 /* ItemCnt */);
            FRPBaseController$3.ctor.call(this, TeamInvitationView.ctor, ITeamInvitationView.ctor, ITeamData.ctor);
        },
        InitViewWithStream: function (){
            TeamDataMgr.get_stream().OnNext(TeamDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this.InitInviteItem();
        },
        InitInviteItem: function (){
            var pUIRecycledList = this.get_View().get_ItemUIRecycledList();
            for (var i = 0; i < 5 /* ItemCnt */; ++i){
                var com = this.AddChild$2$$GameObject$$String$$String(TeamInvitationItemController.ctor, TeamInvitationItem.ctor, pUIRecycledList.get_gameObject().get_gameObject(), "TeamInvitationItem" /* TeamInvitationItem.NAME */, "TeamInvitationItem" /* TeamInvitationItem.NAME */ + i);
                var item = com.get_gameObject();
                item.get_transform().set_localPosition(new UnityEngine.Vector3.ctor$$Single$$Single$$Single(0, -i * pUIRecycledList.itemSize, 0));
                this.itemList[i] = com;
                GameUtil.LogTeam("item idx" + i);
                com.UpdateView$$TeamInvitationNotify$$Int32(TeamDataMgr.get_Instance()._data.GetTeamInvitationNotifyByIndex(i), i);
                var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, com.get_OnapplyBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                    var notify = TeamDataMgr.get_Instance()._data.GetTeamInvitationNotifyByIndex(com.get_DataIdx());
                    if (notify != null){
                        TeamDataMgr.TeamNetMsg.ApproveInviteMember(notify.inviterPlayerId, null);
                    }
                }));
                this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
                d = TeamDataMgr.get_Stream().Subscribe($CreateAnonymousDelegate(this, function (data){
                    this.get_View().get_ItemUIRecycledList().UpdateDataCount(data.get_TeamInviteViewData().GetInvitationCount(), false);
                    CollectionExtension.ForEach$1(TeamInvitationItemController.ctor, this.itemList, $CreateAnonymousDelegate(this, function (s){
                        var notify = TeamDataMgr.get_Instance()._data.GetTeamInvitationNotifyByIndex(s.get_DataIdx());
                        s.UpdateView$$TeamInvitationNotify(notify);
                    }));
                }));
                this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
                d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Tuple$3.ctor, UniRx.NGUIEventExtensions.OnUpdateAsObservable(pUIRecycledList), $CreateAnonymousDelegate(this, function (tuple){
                    if (!tuple.Equals$$Object(null)){
                        var ctrl = this.itemList[tuple.get_Item2()];
                        if (ctrl != null){
                            var dataIdx = tuple.get_Item3();
                            GameUtil.LogTeam(System.String.Format$$String$$Object$$Object("dataindex {0} itemindex {1}", dataIdx, tuple.get_Item2()));
                            ctrl.UpdateView$$TeamInvitationNotify$$Int32(TeamDataMgr.get_Instance()._data.GetTeamInvitationNotifyByIndex(dataIdx), dataIdx);
                        }
                    }
                }));
                this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            }
        },
        RegistEvent: function (){
            var d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ITeamData.ctor, TeamDataMgr.get_stream(), $CreateAnonymousDelegate(this, function (data){
                if (TeamDataMgr.get_Instance()._data.GetInvitationCount() <= 0){
                    UIModuleManager.get_Instance().CloseModule("TeamInvitationView" /* TeamInvitationView.NAME */, true);
                }
                else {
                    this.get_View().UpdateView(data);
                }
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
            d = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnIgnoreBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.IgnoreBtn_UIButtonClickHandler();
            }));
            this._disposable = UniRx.SubjectExtensions.CombineRelease(this._disposable, d);
        },
        RegistCustomEvent: function (){
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            this.get_View().get_ItemUIRecycledList().onUpdateItem = null;
            this._disposable.Dispose();
        },
        InitData: function (){
        },
        CloseBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("TeamInvitationView" /* TeamInvitationView.NAME */, true);
        },
        IgnoreBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("TeamInvitationView" /* TeamInvitationView.NAME */, true);
            TeamDataMgr.get_Instance()._data.ClearTeamInviteNotifyList();
            TeamDataMgr.get_stream().OnNext(TeamDataMgr.get_Instance()._data);
        }
    }
};
JsTypes.push(TeamDataMgr$TeamInvitationViewController);
var TeamDataMgr$TeamMainViewController = {
    fullname: "TeamDataMgr.TeamMainViewController",
    baseTypeName: "FRPBaseController$3",
    staticDefinition: {
        Open: function (tab){
            TeamDataMgr.get_Instance()._data.curTab = tab;
            UIModuleManager.get_Instance().OpenFunModule$1$$String$$UILayerType$$Boolean$$Boolean(TeamDataMgr.TeamMainViewController.ctor, "TeamMainView" /* TeamMainView.NAME */, UILayerType.DefaultModule, true, true);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            this._infoTab_disposable = null;
            FRPBaseController$3.ctor.call(this, TeamMainView.ctor, ITeamMainView.ctor, ITeamData.ctor);
        },
        InitViewWithStream: function (){
            TeamDataMgr.get_stream().OnNext(TeamDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(ITeamData.ctor, TeamDataMgr.get_stream(), $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
            var teamTab = this.AddChild$2$$GameObject$$String$$String(TeamInfoTabContentViewController.ctor, TeamInfoTabContentView.ctor, this.get_View().Get_TabContentRoot(), "TeamInfoTabContentView" /* TeamInfoTabContentView.NAME */, "");
            this._infoTab_disposable = UniRx.ObservableExtensions.SubscribeAndFire$1(ITeamData.ctor, TeamDataMgr.get_stream(), $CreateAnonymousDelegate(this, function (data){
                teamTab.UpdateView(data);
            }));
            teamTab.UpdateTipLabel(TeamDataMgr.get_Instance()._data.GetUITips());
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OnCreateTeamBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                TeamDataMgr.TeamNetMsg.CreateTeam(null);
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OnLeaveBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                TeamDataMgr.TeamNetMsg.LeaveTeam();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OnSummonBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                TeamDataMgr.TeamNetMsg.SummonAwayTeamMembers();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OnSummonBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                TeamDataMgr.TeamNetMsg.SummonAwayTeamMembers();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OnAwayBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                TeamDataMgr.TeamNetMsg.AwayTeam();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OninviteBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.OninviteBtnClickHandler();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, teamTab.get_OnapplicationBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.OnapplicationBtnClickHandler();
            }));
        },
        RegistEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtn_UIButtonClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseBtn_UIButtonClickHandler();
            }));
        },
        OnDispose: function (){
            this._disposable.Dispose();
            this._infoTab_disposable.Dispose();
            MonoViewController$1.commonPrototype.OnDispose.call(this);
        },
        InitData: function (){
        },
        RegistCustomEvent: function (){
        },
        CloseBtn_UIButtonClickHandler: function (){
            UIModuleManager.get_Instance().CloseModule("TeamMainView" /* TeamMainView.NAME */, true);
        },
        OninviteBtnClickHandler: function (){
        },
        OnapplicationBtnClickHandler: function (){
            if (TeamDataMgr.get_Instance().HasTeam())
                ProxyTeamModule.OpenApplicationView();
            else
                ProxyTeamModule.OpinInvitationView();
        }
    }
};
JsTypes.push(TeamDataMgr$TeamMainViewController);
var TeamDataMgr$TeamData = {
    fullname: "TeamDataMgr.TeamData",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            TeamDataMgr.TeamData.tipsList = null;
        }
    },
    assemblyName: "SharpKitProj",
    interfaceNames: ["ITeamData", "ITeamMainViewData", "ITeamInviteViewData", "ITeamApplyViewData", "IExpandTeamData", "ITeamBeInviteData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            this.teamDto = null;
            this._joinTeamRequestNotifyList = new System.Collections.Generic.SortedList$2.ctor(System.Int64.ctor, Tuple$2.ctor);
            this._teamInviteNotifyList = new System.Collections.Generic.List$1.ctor(AppDto.TeamInvitationNotify.ctor);
            this.curTab = TeamMainViewTab.Team;
            this.curInvitationNoti = null;
            this.tabInfoSet = null;
            System.Object.ctor.call(this);
            this.InitClientData();
            this.InitUITipsData();
        },
        InitClientData: function (){
            this.tabInfoSet = (function (){
                var $v41 = new System.Collections.Generic.Dictionary$2.ctor$$Int32(TeamMainViewTab.ctor, System.String.ctor, 4);
                $v41.Add(TeamMainViewTab.Team, "我的队伍");
                $v41.Add(TeamMainViewTab.CreateTeam, "便捷组队");
                return $v41;
            }).call(this);
            this.curTab = TeamMainViewTab.Team;
        },
        InitUITipsData: function (){
            if (TeamDataMgr.TeamData.tipsList == null){
                TeamDataMgr.TeamData.tipsList = CollectionExtension.ToList$1(AppDto.UITips.ctor, CollectionExtension.Filter$1(AppDto.UITips.ctor, DataCache.getArrayByCls$1(AppDto.UITips.ctor), $CreateAnonymousDelegate(this, function (s){
                    return s.clientModule == "team";
                })));
            }
        },
        Dispose: function (){
            this._teamInviteNotifyList.Clear();
            this._joinTeamRequestNotifyList.Clear();
        },
        LeaderID$$: "System.Int64",
        get_LeaderID: function (){
            return this.teamDto == null ? -1 : this.teamDto.leaderPlayerId;
        },
        GetMainRoleTeamMemberDto: function (){
            return this.teamDto == null ? null : this.teamDto.members.Find($CreateAnonymousDelegate(this, function (t){
                return t.id == ModelManager.get_IPlayer().GetPlayerId();
            }));
        },
        TeamUniqueId$$: "System.Int64",
        get_TeamUniqueId: function (){
            return this.teamDto != null ? this.teamDto.id : -1;
        },
        UpdateMemberByTeamMemberStatusDto: function (sDto){
            if (this.teamDto == null)
                return false;
            var item = CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (s){
                return s.id == sDto.playerId;
            }));
            if (item == null){
                return false;
            }
            item.memberStatus = sDto.status;
            item.index = sDto.index;
            if (sDto.status == 1 /* (int)TeamMemberDto.TeamMemberStatus.Leader */){
                this.teamDto.leaderPlayerId = sDto.playerId;
            }
            return false;
        },
        AddMember: function (member){
            if (this.teamDto == null || this.teamDto.members == null)
                return;
            CollectionExtension.ReplaceOrAdd$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (s){
                return s.id == member.id;
            }), member);
        },
        RemoveMember$$Int64$$Int64: function (teamID, memberID){
            if (this.teamDto == null || this.teamDto.members == null || this.teamDto.id != teamID)
                return;
            CollectionExtension.Remove$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (s){
                return s.id == memberID;
            }));
        },
        RemoveMember$$TeamMemberDto: function (member){
            if (this.teamDto == null || this.teamDto.members == null)
                return;
            CollectionExtension.Remove$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (s){
                return s.id == member.id;
            }));
        },
        GetTeamMemberDtoByPlayerID: function (id){
            if (this.teamDto == null)
                return null;
            return CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (s){
                return s.id == id;
            }));
        },
        ClearTeamInfo: function (){
            this.CleanUpApplicationInfo();
            this.ClearTeamInviteNotifyList();
            this.teamDto = null;
        },
        CleanUpApplicationInfo: function (){
            if (this._joinTeamRequestNotifyList != null)
                this._joinTeamRequestNotifyList.Clear();
        },
        ClearTeamInviteNotifyList: function (){
            if (this._teamInviteNotifyList != null)
                this._teamInviteNotifyList.Clear();
        },
        FindTembersByStatus: function (status){
            if (this.teamDto == null)
                return null;
            return CollectionExtension.Find$1$$IEnumerable$1$$Predicate$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (m){
                return m.memberStatus == status;
            }));
        },
        GetTembersByStatus: function (status){
            if (this.teamDto == null)
                return null;
            return CollectionExtension.Filter$1(AppDto.TeamMemberDto.ctor, this.teamDto.members, $CreateAnonymousDelegate(this, function (m){
                return m.memberStatus == status;
            }));
        },
        GetMemberCount: function (){
            return this.teamDto == null ? 0 : this.teamDto.members.get_Count();
        },
        TeamMembers$$: "System.Collections.Generic.IEnumerable`1[[AppDto.TeamMemberDto]]",
        get_TeamMembers: function (){
            return this.teamDto == null ? null : this.teamDto.members;
        },
        CheckApplicationOverTime: function (playerID){
            var data = null;
            (function (){
                var $1 = $Ref(null, data);
                var $res = this._joinTeamRequestNotifyList.TryGetValue(playerID, $1);
                data = $1.Value;
                return $res;
            }).call(this);
            return Tuple$2.op_Equality(data, null) ? false : data.p2;
        },
        TeamMainViewData$$: "ITeamMainViewData",
        get_TeamMainViewData: function (){
            return this;
        },
        TeamInviteViewData$$: "ITeamInviteViewData",
        get_TeamInviteViewData: function (){
            return this;
        },
        TeamApplyViewData$$: "ITeamApplyViewData",
        get_TeamApplyViewData: function (){
            return this;
        },
        ExpandTeamViewData$$: "IExpandTeamData",
        get_ExpandTeamViewData: function (){
            return this;
        },
        TeamBeInviteData$$: "ITeamBeInviteData",
        get_TeamBeInviteData: function (){
            return this;
        },
        GetJoinTeamRequestByIndex: function (idx){
            return idx >= this._joinTeamRequestNotifyList.get_Count() ? null : this._joinTeamRequestNotifyList.get_Values().get_Item$$Int32(idx).p1;
        },
        GetJoinTeamRequestList: function (){
            var maxCount = UnityEngine.Mathf.Min$$Int32$$Int32(this._joinTeamRequestNotifyList.get_Count(), TeamDataMgr.TeamDefaultShowApplyCnt);
            var result = new System.Collections.Generic.List$1.ctor$$Int32(AppDto.TeamRequestNotify.ctor, maxCount);
            var i = 0;
            var $it86 = this._joinTeamRequestNotifyList.GetEnumerator();
            while ($it86.MoveNext()){
                var kv = $it86.get_Current();
                if (i < maxCount){
                    result.Add(kv.get_Value().p1);
                    i++;
                }
                else
                    break;
            }
            return result;
        },
        GetApplicationCnt: function (){
            return this._joinTeamRequestNotifyList == null ? 0 : this._joinTeamRequestNotifyList.get_Count();
        },
        IsCommander: function (playerID){
            return this.teamDto != null && this.teamDto.commanderId == playerID;
        },
        HasApplicationInfo: function (){
            return this._joinTeamRequestNotifyList != null && this._joinTeamRequestNotifyList.get_Count() > 0;
        },
        HasInvitationInfo: function (){
            return this._teamInviteNotifyList != null && this._teamInviteNotifyList.get_Count() > 0;
        },
        GetTabInfo: function (){
            return this.tabInfoSet;
        },
        CurTab$$: "TeamMainViewTab",
        get_CurTab: function (){
            return this.curTab;
        },
        HasTeam: function (){
            return this.teamDto != null;
        },
        IsLeader: function (){
            return this.teamDto != null && this.teamDto.leaderPlayerId == ModelManager.get_IPlayer().GetPlayerId();
        },
        GetUITips: function (){
            var tip = null;
            if (CollectionExtension.IsNullOrEmpty$1$$List$1(AppDto.UITips.ctor, TeamDataMgr.TeamData.tipsList))
                return System.String.Empty;
            var random = new System.Random.ctor();
            var idx = random.Next$$Int32(TeamDataMgr.TeamData.tipsList.get_Count());
            (function (){
                var $1 = $Ref(null, tip);
                var $res = CollectionExtension.TryGetValue$1(AppDto.UITips.ctor, TeamDataMgr.TeamData.tipsList, idx, $1);
                tip = $1.Value;
                return $res;
            }).call(this);
            return tip == null ? System.String.Empty : tip.tips;
        },
        GetMainViewMemberSet: function (){
            var memberArray = null;
            if (this.teamDto != null){
                memberArray = new Array(this.teamDto.maxMemberSize);
                this.teamDto.members.ForEach($CreateAnonymousDelegate(this, function (m){
                    memberArray[m.index] = m;
                }));
            }
            else {
                memberArray = new Array(TeamDataMgr.PlayerTeamCnt);
                memberArray[0] = ModelManager.get_IPlayer().GetPlayer();
            }
            return memberArray;
        },
        GetInvitationList: function (){
            return this._teamInviteNotifyList;
        },
        GetTeamInvitationNotifyByIndex: function (idx){
            var notify = null;
            (function (){
                var $1 = $Ref(null, notify);
                var $res = CollectionExtension.TryGetValue$1(AppDto.TeamInvitationNotify.ctor, this._teamInviteNotifyList, idx, $1);
                notify = $1.Value;
                return $res;
            }).call(this);
            return notify;
        },
        GetInvitationCount: function (){
            return CollectionExtension.IsNullOrEmpty$1$$List$1(AppDto.TeamInvitationNotify.ctor, this._teamInviteNotifyList) ? 0 : this._teamInviteNotifyList.get_Count();
        },
        RemoveInvitation: function (leaderId){
            CollectionExtension.Remove$1(AppDto.TeamInvitationNotify.ctor, this._teamInviteNotifyList, $CreateAnonymousDelegate(this, function (s){
                return s.inviterPlayerId == leaderId;
            }));
        },
        GetCurrentInvitation: function (){
            return this.curInvitationNoti;
        }
    }
};
JsTypes.push(TeamDataMgr$TeamData);
var TeamDataMgr$TeamAction = {
    fullname: "TeamDataMgr.TeamAction",
    staticDefinition: {
        Away: 0,
        Back: 1,
        Leave: 2,
        KickOutMember: 3,
        AssignLeader: 4
    },
    Kind: "Enum"
};
JsTypes.push(TeamDataMgr$TeamAction);
var TeamDataMgr$TeamOpAction = {
    fullname: "TeamDataMgr.TeamOpAction",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (action, target){
            this.action = TeamDataMgr.TeamAction.Away;
            this.target = null;
            System.Object.ctor.call(this);
            this.action = action;
            this.target = target;
        }
    }
};
JsTypes.push(TeamDataMgr$TeamOpAction);
var TeamDataMgr$TeamNetMsg = {
    fullname: "TeamDataMgr.TeamNetMsg",
    baseTypeName: "System.Object",
    staticDefinition: {
        cctor: function (){
            TeamDataMgr.TeamNetMsg._kickOutMemberDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, AppDto.TeamMemberDto.ctor);
            TeamDataMgr.TeamNetMsg._teamInviteNotifyDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, AppDto.TeamInvitationNotify.ctor);
            TeamDataMgr.TeamNetMsg._joinTeamRequestNotifyDic = new System.Collections.Generic.Dictionary$2.ctor(System.Int64.ctor, AppDto.JoinTeamNotify.ctor);
        },
        CreateTeam: function (success){
            if (TeamDataMgr.get_Instance().HasTeam()){
                TipManager.AddTip("已经创建队伍了，无法重复创建", false, false, "");
                return;
            }
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_CreateTeam(""), "CreateTeam", function (e){
                TipManager.AddTip("创建队伍成功", false, false, "");
                GameUtil.SafeRun$$Action$$Action$1$Exception(success, null);
            }, null);
        },
        JoinTeam: function (teamPlayerId){
            if (TeamDataMgr.get_Instance().HasTeam()){
                TipManager.AddTip("已有队伍，无法申请加入", false, false, "");
                return;
            }
            var checkCopy = true;
            var notCooldown = false;
            var taskName = System.String.Format$$String$$Object("JoinTeamTimer_{0}", teamPlayerId);
            if (!JSTimer.get_Instance().IsCdExist(taskName) || notCooldown){
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_JoinTeam(teamPlayerId, ""), "JoinTeam", function (e){
                    if (checkCopy){
                        TipManager.AddTip("已发起入队申请，请耐心等待回复", false, false, "");
                    }
                    JSTimer.get_Instance().SetupCoolDown(taskName, 10, null, null, 0.1, false);
                }, null);
            }
            else
                TipManager.AddTip("请耐心等待回复", false, false, "");
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_JoinTeam(teamPlayerId, checkCopy.toString()), "JoinTeam", function (e){
                if (checkCopy){
                    TipManager.AddTip("已发起入队申请，请耐心等待回复", false, false, "");
                }
                JSTimer.get_Instance().SetupCoolDown(taskName, 10, null, null, 0.1, false);
            }, null);
        },
        ApproveJoinTeam: function (pendingJoinPlayerId){
            var isOverTime = TeamDataMgr.get_Instance()._data.CheckApplicationOverTime(pendingJoinPlayerId);
            if (isOverTime){
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_ApproveJoin(pendingJoinPlayerId, ""), "", function (response){
                    TeamDataMgr.get_Instance().UpdateApproveJoinTeamResp(pendingJoinPlayerId);
                }, function (errorResponse){
                    GameDebuger.LogError(errorResponse, null);
                });
            }
            else {
                TipManager.AddTip("申请已超时", false, false, "");
            }
        },
        InviteMember: function (playerId, nickName){
            TeamDataMgr.TeamNetMsg.DoInviteMember(playerId, nickName);
        },
        DoInviteMember: function (playerId, nickName){
            var taskName = System.String.Format$$String$$Object("InviteMemberTimer_{0}", playerId);
            if (TeamDataMgr.get_Instance()._data.GetMemberCount() >= 5){
                TipManager.AddTip("队伍人数已满，无法发送邀请", false, false, "");
                return;
            }
            if (!JSTimer.get_Instance().IsCdExist(taskName)){
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_InvitePlayer(playerId, ""), "InviteMember", function (e){
                    TipManager.AddTip(System.String.Format$$String$$Object("已邀请[2DC6F8]{0}[-]加入队伍，请耐心等待回复", nickName), false, false, "");
                    JSTimer.get_Instance().SetupCoolDown(taskName, 10, null, null, 0.1, false);
                }, null);
            }
            else {
                TipManager.AddTip("请耐心等待回复", false, false, "");
            }
        },
        ApproveInviteMember: function (leaderPlayerId, onSuccess){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_ApproveInvitation(leaderPlayerId, ""), "", function (response){
                TeamDataMgr.get_Instance()._data.RemoveInvitation(leaderPlayerId);
                TeamDataMgr.get_Instance().FireData();
                GameUtil.SafeRun$$Action$$Action$1$Exception(onSuccess, null);
            }, null);
        },
        ValidateBattleState: function (status, target){
            if (BattleManager.get_Instance().IsInBattle()){
                TipManager.AddTip("此操作将在战斗结束后自动执行", false, false, "");
                return true;
            }
            return false;
        },
        LeaveTeam: function (){
            if (!TeamDataMgr.get_Instance().HasTeam()){
                TipManager.AddTip("当前没有队伍信息，无法离队", false, false, "");
                return;
            }
            if (TeamDataMgr.TeamNetMsg.ValidateBattleState(TeamDataMgr.TeamAction.Leave, null))
                return;
            TeamDataMgr.TeamNetMsg.LeaveTeamRequest();
        },
        LeaveTeamRequest: function (){
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_LeaveTeam(), "LeaveTeam", function (e){
                TeamDataMgr._cachedAction = null;
                TeamDataMgr.get_Instance().UpdateByLeaveTeamResp();
            }, null);
        },
        ValidateTeamActionStatusDto: function (statusDto){
            if (statusDto != null){
                if (statusDto.errorCode == 0){
                    return true;
                }
                else if (statusDto.errorCode == 4003)
                    TipManager.AddTip("已离队", false, false, "");
                else if (statusDto.errorCode == 4000)
                    TipManager.AddTip("队伍不存在", false, false, "");
                else if (statusDto.errorCode == 4004)
                    TipManager.AddTip("已归队", false, false, "");
                else if (statusDto.errorCode == 4005)
                    TipManager.AddTip("不在同一队伍里", false, false, "");
            }
            else
                GameDebuger.LogError("TeamActionStatusDto is null", null);
            return false;
        },
        AwayTeam: function (){
            if (TeamDataMgr.TeamNetMsg.ValidateBattleState(TeamDataMgr.TeamAction.Away, null))
                return;
        },
        BackTeam: function (){
            if (TeamDataMgr.TeamNetMsg.ValidateBattleState(TeamDataMgr.TeamAction.Back, null))
                return;
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_BackTeam(), "BackTeam", function (e){
                TeamDataMgr.TeamNetMsg.ValidateTeamActionStatusDto(As(e, TeamActionStatusDto.ctor));
                TeamDataMgr.TeamNetMsg.SpecialActivityDispose();
            }, null);
        },
        SpecialActivityDispose: function (){
            if (!TeamDataMgr.get_Instance().HasTeam())
                return;
        },
        AssignLeader: function (memberDto){
            if (TeamDataMgr.TeamNetMsg.ValidateBattleState(TeamDataMgr.TeamAction.AssignLeader, memberDto))
                return;
            if (memberDto != null){
                if (memberDto.memberStatus == 3 /* (int)TeamMemberDto.TeamMemberStatus.Away */)
                    TipManager.AddTip("暂离状态无法提升为队长", false, false, "");
                else if (memberDto.memberStatus == 4 /* (int)TeamMemberDto.TeamMemberStatus.Offline */)
                    TipManager.AddTip("离线状态无法提升为队长", false, false, "");
                else {
                    ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_AssignLeader(memberDto.id), "", null, null);
                }
            }
        },
        KickOutMember$$TeamMemberDto: function (memberDto){
            if (TeamDataMgr.TeamNetMsg.ValidateBattleState(TeamDataMgr.TeamAction.KickOutMember, memberDto)){
                if (!TeamDataMgr.TeamNetMsg._kickOutMemberDic.ContainsKey(memberDto.id)){
                    TeamDataMgr.TeamNetMsg._kickOutMemberDic.Add(memberDto.id, memberDto);
                }
                return;
            }
            ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_Kickout(memberDto.id), "", null, null);
        },
        KickOutMember: function (){
            var $it87 = TeamDataMgr.TeamNetMsg._kickOutMemberDic.get_Values().GetEnumerator();
            while ($it87.MoveNext()){
                var tTeamMemberDto = $it87.get_Current();
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_Kickout(tTeamMemberDto.id), "", null, null);
            }
            TeamDataMgr.TeamNetMsg._kickOutMemberDic.Clear();
        },
        SummonAwayTeamMembers: function (){
            var member = TeamDataMgr.get_Instance()._data.FindTembersByStatus(AppDto.TeamMemberDto.TeamMemberStatus.Away);
            if (member != null){
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_Recall(0), "", null, null);
                TipManager.AddTip("召唤成功", false, false, "");
            }
            else {
                TipManager.AddTip("没有暂离的队员", false, false, "");
            }
        },
        SummonAwayTeamMember: function (playerId){
        },
        SetCommander: function (playerId){
            if (!TeamDataMgr.get_Instance().HasTeam())
                return;
            var teamDto = TeamDataMgr.get_Instance()._data.teamDto;
            if (playerId != teamDto.commanderId)
                ServiceRequestAction.requestServer$$GeneralRequest$$String$$OnRequestSuccess$$OnRequestError(AppServices.Services.Team_SetCommander(playerId), "", null, null);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(TeamDataMgr$TeamNetMsg);
var WorldMapDataMgr$MiniWorldMapViewController = {
    fullname: "WorldMapDataMgr.MiniWorldMapViewController",
    baseTypeName: "FRPBaseController$3",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._disposable = null;
            FRPBaseController$3.ctor.call(this, MiniWorldMapView.ctor, IMiniWorldMapView.ctor, IMiniWorldMapData.ctor);
        },
        InitViewWithStream: function (){
            this.get_View().UpdateView(WorldMapDataMgr.get_Instance()._data);
        },
        AfterInitView: function (){
            this.InitSceneByStaticData(this.get_View());
            this._disposable = UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(IMiniWorldMapData.ctor, WorldMapDataMgr.get_Instance().stream, $CreateAnonymousDelegate(this, function (data){
                this.get_View().UpdateView(data);
            }));
        },
        RegistCustomEvent: function (){
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCloseBtnClick(), $CreateAnonymousDelegate(this, function (_){
                this.CloseMiniMapView();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnBackMyFactionBtnClick(), $CreateAnonymousDelegate(this, function (_){
                this.OnBackMyFactionBtn();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnGoHomeBtnClick(), $CreateAnonymousDelegate(this, function (_){
                this.OnGoHomeBtn();
            }));
            UniRx.ObservableExtensions.Subscribe$1$$IObservable$1$$Action$1(UniRx.Unit.ctor, this.get_View().get_OnCurrMapBtnClick(), $CreateAnonymousDelegate(this, function (_){
                this.OnCurrMapBtn();
            }));
        },
        OnBackMyFactionBtn: function (){
            WorldManager.get_Instance().Enter(ModelManager.get_Player().GetPlayer().get_faction().factionSceneId, false, false, true, null);
            this.CloseMiniMapView();
        },
        OnGoHomeBtn: function (){
            WorldManager.get_Instance().Enter(999, false, false, true, null);
            this.CloseMiniMapView();
        },
        OnCurrMapBtn: function (){
            this.CloseMiniMapView();
            ProxyWorldMapModule.OpenMiniMap();
        },
        CloseMiniMapView: function (){
            ProxyWorldMapModule.CloseMiniWorldMap();
        },
        InitSceneByStaticData: function (view){
            var clickAction = $CreateAnonymousDelegate(this, function (mapID){
                WorldManager.get_Instance().Enter(mapID, false, false, true, null);
                this.CloseMiniMapView();
            });
            var maps = DataCache.getArrayByCls$1(AppDto.SceneMap.ctor);
            view.InitSceneBtn(maps, clickAction);
        },
        OnDispose: function (){
            MonoViewController$1.commonPrototype.OnDispose.call(this);
            if (this._disposable != null){
                this._disposable.Dispose();
                this._disposable = null;
            }
        }
    }
};
JsTypes.push(WorldMapDataMgr$MiniWorldMapViewController);
var WorldMapDataMgr$WorldMapData = {
    fullname: "WorldMapDataMgr.WorldMapData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IMiniWorldMapData"],
    Kind: "Class",
    definition: {
        ctor: function (){
            System.Object.ctor.call(this);
        },
        GetSceneName$$: "System.String",
        get_GetSceneName: function (){
            return WorldManager.get_Instance().GetModel().GetSceneName();
        },
        FactionID$$: "System.Int32",
        get_FactionID: function (){
            return ModelManager.get_Player().get_FactionID();
        },
        CurSceneId$$: "System.Int32",
        get_CurSceneId: function (){
            return WorldManager.get_Instance().GetModel().GetSceneId();
        },
        HeadTex$$: "System.Int32",
        get_HeadTex: function (){
            return ModelManager.get_Player().GetPlayer().get_charactor().texture;
        },
        Dispose: function (){
        }
    }
};
JsTypes.push(WorldMapDataMgr$WorldMapData);
var NotifyHandler$OnHandleNotify = {
    fullname: "NotifyHandler.OnHandleNotify",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(NotifyHandler$OnHandleNotify);
var ServiceRequestAction$OnRequestError = {
    fullname: "ServiceRequestAction.OnRequestError",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(ServiceRequestAction$OnRequestError);
var ServiceRequestAction$OnRequestSuccess = {
    fullname: "ServiceRequestAction.OnRequestSuccess",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(ServiceRequestAction$OnRequestSuccess);
var ServiceRequestAction$RequestLockType = {
    fullname: "ServiceRequestAction.RequestLockType",
    staticDefinition: {
        LockScreen: 0,
        LockAction: 1,
        LockActionAndParam: 2,
        NoLock: 3
    },
    Kind: "Enum"
};
JsTypes.push(ServiceRequestAction$RequestLockType);
var UIModulePool$ModuleInstance = {
    fullname: "UIModulePool.ModuleInstance",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (module, leftTime){
            this.Module = null;
            this.LeftTime = 0;
            System.Object.ctor.call(this);
            this.Module = module;
            this.LeftTime = leftTime;
        }
    }
};
JsTypes.push(UIModulePool$ModuleInstance);
var UIModulePoolDefinition$ModulePoolType = {
    fullname: "UIModulePoolDefinition.ModulePoolType",
    staticDefinition: {
        NeverDestroy: 2147483647,
        Destroy: -1,
        Default: 30
    },
    Kind: "Enum"
};
JsTypes.push(UIModulePoolDefinition$ModulePoolType);
var SdkAccountDto$AccountDto$AccountType = {
    fullname: "SdkAccountDto.AccountDto.AccountType",
    staticDefinition: {
        free: 0,
        phone: 1,
        mail: 2,
        device: 3,
        qq: 4,
        weixin: 5
    },
    Kind: "Enum"
};
JsTypes.push(SdkAccountDto$AccountDto$AccountType);
var SdkModuleMgr$ModuleType = {
    fullname: "SdkModuleMgr.ModuleType",
    staticDefinition: {
        preLogin: 0,
        gameEnter: 1
    },
    Kind: "Enum"
};
JsTypes.push(SdkModuleMgr$ModuleType);
var SdkModuleMgr$ModuleCache = {
    fullname: "SdkModuleMgr.ModuleCache",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this._name2Module = null;
            this._nameList = null;
            System.Object.ctor.call(this);
            this._name2Module = new System.Collections.Generic.Dictionary$2.ctor(System.String.ctor, UnityEngine.GameObject.ctor);
            this._nameList = new System.Collections.Generic.List$1.ctor(System.String.ctor);
        },
        ModuleCount$$: "System.Int32",
        get_ModuleCount: function (){
            return this._name2Module.get_Count();
        },
        NameList$$: "System.Collections.Generic.List`1[[System.String]]",
        get_NameList: function (){
            return this._nameList;
        },
        Add: function (name, module){
            this._name2Module.set_Item$$TKey(name, module);
            if (this._nameList.Contains(name)){
                this._nameList.Remove(name);
            }
            this._nameList.Add(name);
        },
        Remove: function (name){
            if (!this._nameList.Contains(name))
                return;
            this._name2Module.Remove(name);
            this._nameList.Remove(name);
        },
        GetModule: function (name){
            if (this._name2Module.ContainsKey(name)){
                return this._name2Module.get_Item$$TKey(name);
            }
            return null;
        },
        GetModuleName: function (module){
            var moduleName = System.String.Empty;
            var $it88 = this._name2Module.get_Keys().GetEnumerator();
            while ($it88.MoveNext()){
                var sName = $it88.get_Current();
                if (UnityEngine.Object.op_Equality(this._name2Module.get_Item$$TKey(sName), module)){
                    moduleName = sName;
                    break;
                }
            }
            return moduleName;
        },
        GetNextLayer: function (){
            var module = null;
            if (this._nameList.get_Count() > 0){
                module = this._name2Module.get_Item$$TKey(this._nameList.get_Item$$Int32(this._nameList.get_Count() - 1));
            }
            if (UnityEngine.Object.op_Inequality(module, null)){
                return module.GetComponent$1(UIPanel.ctor).get_depth();
            }
            return SdkModuleMgr.get_SdkAcountLayer();
        }
    }
};
JsTypes.push(SdkModuleMgr$ModuleCache);
var AppStoreInAppManager$OnProductListReceived = {
    fullname: "AppStoreInAppManager.OnProductListReceived",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(AppStoreInAppManager$OnProductListReceived);
var AppStoreInAppManager$OnProductListRequestFailed = {
    fullname: "AppStoreInAppManager.OnProductListRequestFailed",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(AppStoreInAppManager$OnProductListRequestFailed);
var AppStoreInAppManager$OnBaoyugamePurchaseSuccessed = {
    fullname: "AppStoreInAppManager.OnBaoyugamePurchaseSuccessed",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(AppStoreInAppManager$OnBaoyugamePurchaseSuccessed);
var AppStoreInAppManager$OnBaoyugamePurchaseFailed = {
    fullname: "AppStoreInAppManager.OnBaoyugamePurchaseFailed",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(AppStoreInAppManager$OnBaoyugamePurchaseFailed);
var AppStoreInAppManager$OnBaoyugamePurchaseCancel = {
    fullname: "AppStoreInAppManager.OnBaoyugamePurchaseCancel",
    Kind: "Delegate",
    definition: {
        ctor: function (obj, func){
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(AppStoreInAppManager$OnBaoyugamePurchaseCancel);
var TipManager$DelayTipStruct = {
    fullname: "TipManager.DelayTipStruct",
    baseTypeName: "System.ValueType",
    assemblyName: "SharpKitProj",
    Kind: "Struct",
    definition: {
        ctor$$String$$Boolean: function (info, addTo){
            this.tip = null;
            this.addToSystemNotify = false;
            System.ValueType.ctor.call(this);
            this.tip = info;
            this.addToSystemNotify = addTo;
        },
        ctor: function (){
            this.tip = null;
            this.addToSystemNotify = false;
            System.ValueType.ctor.call(this);
        }
    }
};
JsTypes.push(TipManager$DelayTipStruct);
var TipManager$TipStruct = {
    fullname: "TipManager.TipStruct",
    baseTypeName: "System.ValueType",
    assemblyName: "SharpKitProj",
    Kind: "Struct",
    definition: {
        ctor$$String$$String$$Color$$Single$$Boolean: function (info, icon, color, delay, top){
            this.tipInfo = null;
            this.tipColor = new UnityEngine.Color.ctor();
            this.delayTime = 0;
            this.topLayer = false;
            this.tipIcon = null;
            System.ValueType.ctor.call(this);
            this.tipInfo = info;
            this.tipColor = color;
            this.delayTime = delay;
            this.topLayer = top;
            this.tipIcon = icon;
        },
        ctor: function (){
            this.tipInfo = null;
            this.tipColor = new UnityEngine.Color.ctor();
            this.delayTime = 0;
            this.topLayer = false;
            this.tipIcon = null;
            System.ValueType.ctor.call(this);
        }
    }
};
JsTypes.push(TipManager$TipStruct);
var WinGameSetting$WinGameSettingData = {
    fullname: "WinGameSetting.WinGameSettingData",
    baseTypeName: "System.Object",
    staticDefinition: {
        CreateOriginWinGameSettingData: function (){
            var winData = new WinGameSetting.WinGameSettingData.ctor();
            var originData = GameSetting.LoadGameSettingData();
            if (!GameSetting.get_IsOriginWinPlatform()){
                winData.Channel = originData.channel;
                winData.PlatformType = originData.platformType;
                winData.DomainType = GameSetting.get_DomainName();
                winData.HttpRoot = System.IO.Path.GetDirectoryName(System.IO.Path.GetDirectoryName(GameSetting.get_PlatformHttpRoot()));
                winData.ResDir = GameSetting.get_ResDir();
            }
            else {
                winData.Channel = originData.channel;
                winData.PlatformType = 1;
                winData.DomainType = originData.domainType;
                winData.HttpRoot = originData.httpRoot;
                winData.ResDir = originData.resdir;
            }
            return winData;
        },
        CreateFromBase64UrlSafeJson: function (json){
            json = ByteArray.CreateFromBase64(UnityEngine.WWW.UnEscapeURL$$String(json)).ToUTF8String();
            GameDebuger.Log("WinGameSettingData CreateFromBase64UrlSafeJson: " + json, null);
            return JsHelper.ToObject(WinGameSetting.WinGameSettingData.ctor, json);
        }
    },
    assemblyName: "SharpKitProj",
    Kind: "Class",
    definition: {
        ctor: function (){
            this.Channel = null;
            this.PlatformType = 1;
            this.DomainType = null;
            this.HttpRoot = null;
            this.ResDir = null;
            System.Object.ctor.call(this);
        },
        ToBase64UrlSafeJson: function (){
            var json = JsHelper.ToJson(this, false);
            GameDebuger.Log("WinGameSettingData ToBase64UrlSafeJson: " + json, null);
            return UnityEngine.WWW.EscapeURL$$String(ByteArray.CreateFromUtf8(json).ToBase64String());
        }
    }
};
JsTypes.push(WinGameSetting$WinGameSettingData);
var AppDto$BagItemDto$CirculationType = {
    fullname: "AppDto.BagItemDto.CirculationType",
    staticDefinition: {
        Free: 0,
        Trade: 1,
        Gift: 2,
        Bind: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$BagItemDto$CirculationType);
var AppDto$BagItemDto$SourceOfTrade = {
    fullname: "AppDto.BagItemDto.SourceOfTrade",
    staticDefinition: {
        Unknown: 0,
        Stall: 1,
        Auction: 2
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$BagItemDto$SourceOfTrade);
var AppDto$CharacterAbility$Type = {
    fullname: "AppDto.CharacterAbility.Type",
    staticDefinition: {
        NONE: 0,
        COMMON: 1,
        PHYSICAL: 2,
        MAGIC: 3,
        ASSIST: 4,
        EXCEPTION: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$CharacterAbility$Type);
var AppDto$CharactorDto$CharacterPropertyType = {
    fullname: "AppDto.CharactorDto.CharacterPropertyType",
    staticDefinition: {
        PHYSIQUE: 101,
        POWER: 102,
        INTELLECT: 103,
        TECHNIQUE: 104,
        AGILITY: 105,
        MAX_HP: 201,
        PHY_ATTACK: 202,
        PHY_DEFENSE: 203,
        MAGIC_ATTAK: 204,
        MAGIC_DEFENSE: 205,
        SPEED: 206,
        CRIT: 207,
        HIT: 208,
        DODGE: 209,
        ANTI_CRIT: 210,
        TENACITY: 211,
        TREAT: 212,
        PHY_CRIT_RATE: 301,
        MAGIC_CRIT_RATE: 302,
        TREAT_CRIT_RATE: 303,
        PHY_ANTI_CRIT_RATE: 304,
        MAGIC_ANTI_CRIT_RATE: 305,
        PHY_HIT_RATE: 306,
        MAGIC_HIT_RATE: 307,
        PHY_DODGE_RATE: 308,
        MAGIC_DODGE_RATE: 309,
        FIXED_RELEASE_TIME: 310,
        PHY_STRIKE: 311,
        MAGIC_STRIKE: 312,
        CRIT_DAMAGE_ADDIDTION: 313,
        CRIT_DAMAGE_REDUCE: 314,
        EXCEPT_HIT_RATE: 315,
        EXCEPT_ANTI_RATE: 316,
        SILENCE_ADDITION: 317,
        CHAOS_ADDITION: 318,
        TRANCE_ADDITION: 319,
        FROZEN_ADDITION: 320,
        IMPRISON_ADDITION: 321,
        DISARM_ADDITION: 322,
        SNEER_ADDITION: 323,
        ANTI_SILENCE: 324,
        ANTI_CHAOS: 325,
        ANTI_TRANCE: 326,
        ANTI_FROZEN: 327,
        ANTI_IMPRISON: 328,
        ANTI_DISARM: 329,
        ANTI_SNEER: 330
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$CharactorDto$CharacterPropertyType);
var AppDto$Faction$FactionType = {
    fullname: "AppDto.Faction.FactionType",
    staticDefinition: {
        Unknown: 0,
        Civilian: 1,
        Soldier: 2,
        Ranger: 3,
        Counsellor: 4,
        Scholar: 5,
        EliteInfantry: 6,
        HeavyInfantry: 7
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Faction$FactionType);
var AppDto$Formation$FormationType = {
    fullname: "AppDto.Formation.FormationType",
    staticDefinition: {
        Unknown: 0,
        Regular: 1,
        SkyFlip: 2,
        EarthLoad: 3,
        CloudDown: 4,
        WindRise: 5,
        DragonFly: 6,
        BirdShit: 7,
        Snake: 8,
        TigerWing: 9
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Formation$FormationType);
var AppDto$GeneralCharactor$CharactorType = {
    fullname: "AppDto.GeneralCharactor.CharactorType",
    staticDefinition: {
        Unknown: 0,
        MainCharactor: 1,
        Child: 2,
        Crew: 3,
        Pet: 4,
        Monster: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$GeneralCharactor$CharactorType);
var AppDto$LeaveTeamNotify$LeaveTeamReason = {
    fullname: "AppDto.LeaveTeamNotify.LeaveTeamReason",
    staticDefinition: {
        REASON_LEAVE: 0,
        REASON_KICKOUT: 1,
        REASON_DISMISS: 2
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$LeaveTeamNotify$LeaveTeamReason);
var AppDto$MailType$MailTypeEnum = {
    fullname: "AppDto.MailType.MailTypeEnum",
    staticDefinition: {
        Unknown: 0,
        SysAnnouncement: 1,
        SysNoice: 2,
        SysReward: 3,
        Gift: 4,
        GroupNoice: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$MailType$MailTypeEnum);
var AppDto$Npc$NpcType = {
    fullname: "AppDto.Npc.NpcType",
    staticDefinition: {
        Unknown: 0,
        DoubleTeleport: 1,
        General: 2,
        Monster: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Npc$NpcType);
var AppDto$Npc$NpcNameType = {
    fullname: "AppDto.Npc.NpcNameType",
    staticDefinition: {
        Local: 0,
        Wildcard: 1,
        GhostName: 2,
        MaleName: 3,
        FemaleName: 4,
        Unknown: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Npc$NpcNameType);
var AppDto$NpcGeneral$NpcGeneralKindEnum = {
    fullname: "AppDto.NpcGeneral.NpcGeneralKindEnum",
    staticDefinition: {
        Unknown: 0,
        Idler: 1,
        Function: 2,
        Area: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$NpcGeneral$NpcGeneralKindEnum);
var AppDto$RealItem$CirculationType = {
    fullname: "AppDto.RealItem.CirculationType",
    staticDefinition: {
        Free: 0,
        Trade: 1,
        Gift: 2,
        Bind: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$RealItem$CirculationType);
var AppDto$SceneMap$SceneType = {
    fullname: "AppDto.SceneMap.SceneType",
    staticDefinition: {
        Unknown: 0,
        City: 1,
        General: 2,
        Wild: 3,
        Leveling: 4,
        School: 5,
        Guild: 6,
        Tournament: 7,
        FirstTournament: 8,
        TeamScene: 9,
        HeroTrial: 10,
        MythlandLobby: 11,
        MythlandLayer: 12,
        GuildComp: 13,
        CampWar: 14,
        Maze: 15,
        Evil: 16
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SceneMap$SceneType);
var AppDto$SceneObjectDto$SceneObjectType = {
    fullname: "AppDto.SceneObjectDto.SceneObjectType",
    staticDefinition: {
        Player: 0,
        Npc: 1
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SceneObjectDto$SceneObjectType);
var AppDto$Skill$SkillType = {
    fullname: "AppDto.Skill.SkillType",
    staticDefinition: {
        None: 0,
        Passive: 1,
        Phy: 2,
        Magic: 3,
        Recovery: 4,
        Controll: 5,
        Assist: 6
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$SkillType);
var AppDto$Skill$SkillOwnerType = {
    fullname: "AppDto.Skill.SkillOwnerType",
    staticDefinition: {
        None: 0,
        Player: 1,
        Npc: 2,
        Pet: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$SkillOwnerType);
var AppDto$Skill$UserTargetScopeType = {
    fullname: "AppDto.Skill.UserTargetScopeType",
    staticDefinition: {
        Unknown: 0,
        Enemy: 1,
        Self: 2,
        FriendsExceptSelfWithPet: 3,
        FriendsWithPet: 4,
        FriendPets: 5,
        ExceptSelf: 6,
        PetsInBag: 7,
        Fere: 8,
        EnemyPlayer: 9,
        FriendWithoutPetAndMe: 10,
        MyTeamPlayer: 11,
        EnemyPlayerOrPet: 12
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$UserTargetScopeType);
var AppDto$SkillBuff$BuffType = {
    fullname: "AppDto.SkillBuff.BuffType",
    staticDefinition: {
        UNKNOW: 0,
        ABNORMAL: 1,
        PROPERTY: 2,
        SPECIAL: 3,
        TEMPORARY: 4
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SkillBuff$BuffType);
var AppDto$SkillBuff$BuffGroup = {
    fullname: "AppDto.SkillBuff.BuffGroup",
    staticDefinition: {
        NORMAL: 0,
        SEAL: 1,
        FIXED_TIME: 2,
        TIMES: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SkillBuff$BuffGroup);
var AppDto$TeamCommand$EnemyCommand = {
    fullname: "AppDto.TeamCommand.EnemyCommand",
    staticDefinition: {
        Unknown: 0,
        ConcentrateAttack: 1,
        SorcerySeal: 2,
        PhysicalAttack: 3,
        SpellAttack: 4,
        GuardCorpse: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$TeamCommand$EnemyCommand);
var AppDto$TeamMemberDto$TeamMemberStatus = {
    fullname: "AppDto.TeamMemberDto.TeamMemberStatus",
    staticDefinition: {
        NoTeam: 0,
        Leader: 1,
        Member: 2,
        Away: 3,
        Offline: 4
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$TeamMemberDto$TeamMemberStatus);
var AppDto$VideoSoldier$SoldierStatus = {
    fullname: "AppDto.VideoSoldier.SoldierStatus",
    staticDefinition: {
        Normal: 0,
        SelfDefense: 1
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$VideoSoldier$SoldierStatus);
var IPoolController = {
    fullname: "IPoolController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IPoolController);
var IViewController = {
    fullname: "IViewController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IViewController);
var ICloseableView = {
    fullname: "ICloseableView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ICloseableView);
var IGameEventAgent = {
    fullname: "IGameEventAgent",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IGameEventAgent);
var BattleHelper$BattleWatchType = {
    fullname: "BattleHelper.BattleWatchType",
    staticDefinition: {
        WatchType_Nothing: 0,
        WatchType_Duel: 1,
        WatchType_CSPK: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleHelper$BattleWatchType);
var BattleTargetSelector$TargetType = {
    fullname: "BattleTargetSelector.TargetType",
    staticDefinition: {
        ALL: 0,
        PLAYER: 1,
        ENEMY: 2,
        SELF: 3,
        NONE: 4
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$TargetType);
var BattleTargetSelector$SelfType = {
    fullname: "BattleTargetSelector.SelfType",
    staticDefinition: {
        SELF: 0,
        NOTSELF: 1
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$SelfType);
var BattleTargetSelector$CharacterType = {
    fullname: "BattleTargetSelector.CharacterType",
    staticDefinition: {
        ALL: 0,
        PET: 1,
        NOTPET: 2,
        HERO: 3,
        COUPLE: 4,
        PLAYER: 5
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$CharacterType);
var BattleTargetSelector$LifeState = {
    fullname: "BattleTargetSelector.LifeState",
    staticDefinition: {
        ALL: 0,
        ALIVE: 1,
        DEAD: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$LifeState);
var BattleTargetSelector$SelectorType = {
    fullname: "BattleTargetSelector.SelectorType",
    staticDefinition: {
        CAPTURE: 0,
        SKILL: 1,
        ITEM: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$SelectorType);
var MonsterController$MonsterSide = {
    fullname: "MonsterController.MonsterSide",
    staticDefinition: {
        Player: 0,
        Enemy: 1,
        None: 2
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$MonsterSide);
var MonsterController$RetreatMode = {
    fullname: "MonsterController.RetreatMode",
    staticDefinition: {
        Normal: 0,
        Fly: 1,
        Flash: 2,
        Run: 3
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$RetreatMode);
var MonsterController$ShowMessageEffect = {
    fullname: "MonsterController.ShowMessageEffect",
    staticDefinition: {
        DODGE: 1,
        CRITICAL: 2,
        IMMUNE: 4
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$ShowMessageEffect);
var BattleSkillSelectController$SkillType = {
    fullname: "BattleSkillSelectController.SkillType",
    staticDefinition: {
        None: 0,
        Stunt: 1,
        Guide: 2,
        Skill: 3
    },
    Kind: "Enum"
};
JsTypes.push(BattleSkillSelectController$SkillType);
var BATTLE_DEMO_MODEL_S1 = {
    fullname: "BATTLE_DEMO_MODEL_S1",
    staticDefinition: {
        Battle: 0,
        Watch: 1
    },
    Kind: "Enum"
};
JsTypes.push(BATTLE_DEMO_MODEL_S1);
var BattleDemoController$BattleResult = {
    fullname: "BattleDemoController.BattleResult",
    staticDefinition: {
        NULL: 0,
        DRAW: 1,
        WIN: 2,
        LOSE: 3,
        Retreat: 4,
        NoResult: 5
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoController$BattleResult);
var SkillButtonCellController$PivotPosition = {
    fullname: "SkillButtonCellController.PivotPosition",
    staticDefinition: {
        CenterBottom: 0,
        Bottom: 1
    },
    Kind: "Enum"
};
JsTypes.push(SkillButtonCellController$PivotPosition);
var BattleDemoModel$ActionState = {
    fullname: "BattleDemoModel.ActionState",
    staticDefinition: {
        HERO: 0,
        PET: 1
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoModel$ActionState);
var BattleDemoModel$BattleSceneStat = {
    fullname: "BattleDemoModel.BattleSceneStat",
    staticDefinition: {
        GAME_OVER: 0,
        ON_WAITING: 1,
        BATTLE_READY: 2,
        FINISH_COMMAND: 3,
        ON_PROGRESS: 4,
        ON_COMMAND_ENTER: 5,
        ON_COMMAND_EXIT: 6,
        ON_SELECT_SKILL: 7,
        ON_SELECT_TARGET: 8,
        ON_CAPTURE: 9,
        ON_CAPTURE_SUCCESS: 10
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoModel$BattleSceneStat);
var MonsterOptionStateManager$MonsterOptionState = {
    fullname: "MonsterOptionStateManager.MonsterOptionState",
    staticDefinition: {
        Disable: 0,
        Enable: 1
    },
    Kind: "Enum"
};
JsTypes.push(MonsterOptionStateManager$MonsterOptionState);
var IPlayerModel = {
    fullname: "IPlayerModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IPlayerModel);
var IWorldModel = {
    fullname: "IWorldModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldModel);
var IWorldViewData = {
    fullname: "IWorldViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldViewData);
var IWorldModelData = {
    fullname: "IWorldModelData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldModelData);
var GamePlot$PlotTransformAction$TweenType = {
    fullname: "GamePlot.PlotTransformAction.TweenType",
    staticDefinition: {
        NavMove: 0,
        Rotate: 1,
        Scale: 2,
        PosMove: 3
    },
    Kind: "Enum"
};
JsTypes.push(GamePlot$PlotTransformAction$TweenType);
var GamePlot$PlayAudioAction$AudioType = {
    fullname: "GamePlot.PlayAudioAction.AudioType",
    staticDefinition: {
        Music: 0,
        Sound: 1
    },
    Kind: "Enum"
};
JsTypes.push(GamePlot$PlayAudioAction$AudioType);
var IntEnum$1 = {
    fullname: "IntEnum$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IntEnum$1);
var TabbtnPrefabPath = {
    fullname: "TabbtnPrefabPath",
    staticDefinition: {
        TabBtnWidget: 0,
        TabBtnWidget_H1: 1,
        TabBtnWidget_H2: 2,
        TabBtnWidget_H3: 3,
        TabBtnWidget_H3_SHORT: 4,
        TABBUTTON_H4: 5
    },
    Kind: "Enum"
};
JsTypes.push(TabbtnPrefabPath);
var UIHelper$ItemTipType = {
    fullname: "UIHelper.ItemTipType",
    staticDefinition: {
        None: 0,
        NormalTip: 1,
        GainWay: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIHelper$ItemTipType);
var UIHelper$BtnType = {
    fullname: "UIHelper.BtnType",
    staticDefinition: {
        Little: 0,
        Middle: 1,
        Big: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIHelper$BtnType);
var GameDisplayManager$DisplayLevel = {
    fullname: "GameDisplayManager.DisplayLevel",
    staticDefinition: {
        Low: 0,
        Middle: 1,
        High: 2
    },
    Kind: "Enum"
};
JsTypes.push(GameDisplayManager$DisplayLevel);
var GameDisplayManager$VisibleType = {
    fullname: "GameDisplayManager.VisibleType",
    staticDefinition: {
        Player: 0,
        Npc: 1
    },
    Kind: "Enum"
};
JsTypes.push(GameDisplayManager$VisibleType);
var IModuleModel = {
    fullname: "IModuleModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Interface"
};
JsTypes.push(IModuleModel);
var UILayerType = {
    fullname: "UILayerType",
    staticDefinition: {
        Invalid: -100,
        JOYSTICK: -20,
        HudLayer: -10,
        BaseModule: 0,
        BarrageLayer: 3,
        SceneChange: 10,
        ChatModule: 20,
        DefaultModule: 30,
        SubModule: 40,
        ThreeModule: 50,
        FourModule: 60,
        FiveModule: 70,
        Guide: 100,
        Dialogue: 110,
        ItemTip: 120,
        FloatTip: 130,
        FadeInOut: 140,
        LockScreen: 150,
        TopDialogue: 160,
        TopLockScreen: 170,
        QRCodeScan: 180
    },
    Kind: "Enum"
};
JsTypes.push(UILayerType);
var UIMode = {
    fullname: "UIMode",
    staticDefinition: {
        NULL: 0,
        LOGIN: 1,
        GAME: 2,
        BATTLE: 3,
        STORY: 4,
        MARRY: 5
    },
    Kind: "Enum"
};
JsTypes.push(UIMode);
var AssetPipeline$ResourcePoolManager$PoolType = {
    fullname: "AssetPipeline.ResourcePoolManager.PoolType",
    staticDefinition: {
        UI: 0,
        Model: 1,
        Effect: 2,
        Scene: 3
    },
    Kind: "Enum"
};
JsTypes.push(AssetPipeline$ResourcePoolManager$PoolType);
var UIModuleDefinition$ModuleType = {
    fullname: "UIModuleDefinition.ModuleType",
    staticDefinition: {
        None: 0,
        MainModule: 1,
        SubModule: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIModuleDefinition$ModuleType);
var IQuadObject$1 = {
    fullname: "IQuadObject$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.Collections.Generic.IEqualityComparer$1"],
    Kind: "Interface"
};
JsTypes.push(IQuadObject$1);
var QuadTree$Direction$1 = {
    fullname: "QuadTree.Direction$1",
    staticDefinition: {
        NW: 0,
        NE: 1,
        SW: 2,
        SE: 3
    },
    Kind: "Enum"
};
JsTypes.push(QuadTree$Direction$1);
var Equipment = {
    fullname: "Equipment",
    staticDefinition: {
        EquipPartType_Unknown: 0,
        EquipPartType_Weapon: 1,
        EquipPartType_Helmet: 2,
        EquipPartType_Armor: 3,
        EquipPartType_Necklace: 4,
        EquipPartType_Girdle: 5,
        EquipPartType_Shoe: 6
    },
    Kind: "Enum"
};
JsTypes.push(Equipment);
var ITempBackpackViewData = {
    fullname: "ITempBackpackViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITempBackpackViewData);
var IBackpackViewData = {
    fullname: "IBackpackViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IBackpackViewData);
var IBackpackData = {
    fullname: "IBackpackData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IBackpackData);
var BackpackViewTab = {
    fullname: "BackpackViewTab",
    staticDefinition: {
        Backpack: 0,
        Warehouse: 1
    },
    Kind: "Enum"
};
JsTypes.push(BackpackViewTab);
var ItemTypeTab = {
    fullname: "ItemTypeTab",
    staticDefinition: {
        Item: 0,
        Task: 1,
        Pet: 2
    },
    Kind: "Enum"
};
JsTypes.push(ItemTypeTab);
var IBackpackView = {
    fullname: "IBackpackView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IBackpackView);
var ITempBackPackView = {
    fullname: "ITempBackPackView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITempBackPackView);
var BattleAutoSkillConfigController$BattleConfigSkillType = {
    fullname: "BattleAutoSkillConfigController.BattleConfigSkillType",
    staticDefinition: {
        Undefined: 0,
        MainRoleAutoSkill: 1,
        MainPetAutoSkill: 2,
        MainRoleSubSkill: 3,
        MainPetSubSkill: 4
    },
    Kind: "Enum"
};
JsTypes.push(BattleAutoSkillConfigController$BattleConfigSkillType);
var BattleAutoSummonHeroController$PositionType = {
    fullname: "BattleAutoSummonHeroController.PositionType",
    staticDefinition: {
        Undefined: 0,
        CurrentUsed: 1,
        CurrentSelected: 2,
        ToBeSelected: 3
    },
    Kind: "Enum"
};
JsTypes.push(BattleAutoSummonHeroController$PositionType);
var ITabBtnController = {
    fullname: "ITabBtnController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITabBtnController);
var ItemType = {
    fullname: "ItemType",
    staticDefinition: {
        defaultType: 0
    },
    Kind: "Enum"
};
JsTypes.push(ItemType);
var OperatorType = {
    fullname: "OperatorType",
    staticDefinition: {
        defaultType: 0
    },
    Kind: "Enum"
};
JsTypes.push(OperatorType);
var MultipleSelectionManager$Side = {
    fullname: "MultipleSelectionManager.Side",
    staticDefinition: {
        Left: 0,
        LeftTop: 1,
        LeftBottom: 2,
        Right: 3,
        RightTop: 4,
        RightBottom: 5,
        Top: 6,
        TopLeft: 7,
        TopRight: 8,
        Bottom: 9,
        BottomLeft: 10,
        BottomRight: 11
    },
    Kind: "Enum"
};
JsTypes.push(MultipleSelectionManager$Side);
var IEmailContentData = {
    fullname: "IEmailContentData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IEmailContentData);
var IEmailContent = {
    fullname: "IEmailContent",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IEmailContent);
var IEmailView = {
    fullname: "IEmailView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IEmailView);
var eGeneralQuality = {
    fullname: "eGeneralQuality",
    staticDefinition: {
        NONE: 0,
        PURPLE: 1,
        ORANGE: 2,
        RED: 3,
        GOLD: 4
    },
    Kind: "Enum"
};
JsTypes.push(eGeneralQuality);
var eArmorType = {
    fullname: "eArmorType",
    staticDefinition: {
        NONE: 0,
        HEAVY: 1,
        LEATHER: 2,
        QUILTED: 3
    },
    Kind: "Enum"
};
JsTypes.push(eArmorType);
var IGeneralData = {
    fullname: "IGeneralData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IGeneralData);
var IGeneralView = {
    fullname: "IGeneralView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IGeneralView);
var IItemCellController = {
    fullname: "IItemCellController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IItemCellController);
var IJoystickModuleData = {
    fullname: "IJoystickModuleData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IJoystickModuleData);
var MainUIExpandContentViewController$ExpandContentType = {
    fullname: "MainUIExpandContentViewController.ExpandContentType",
    staticDefinition: {
        nothing: 0,
        mission: 1,
        team: 2
    },
    Kind: "Enum"
};
JsTypes.push(MainUIExpandContentViewController$ExpandContentType);
var MainUIExpandContentViewController$OperateTeamType = {
    fullname: "MainUIExpandContentViewController.OperateTeamType",
    staticDefinition: {
        NONE: 0,
        LEAVETEAM: 1,
        BACKTEAM: 2,
        CHECKINFO: 3,
        LEADBYOTHER: 4,
        PLEASELEAVE: 5,
        SUMMON: 6,
        LEAVELITTLE: 7,
        APPLYLEADTEAM: 8,
        SAMERIDING: 9,
        RIDEOFF: 10,
        KICKRIDING: 11
    },
    Kind: "Enum"
};
JsTypes.push(MainUIExpandContentViewController$OperateTeamType);
var IMainUIData = {
    fullname: "IMainUIData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMainUIData);
var IMainUIView = {
    fullname: "IMainUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IMainUIView);
var IAddPointPlanData = {
    fullname: "IAddPointPlanData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IAddPointPlanData);
var IAddPointPlanView = {
    fullname: "IAddPointPlanView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IAddPointPlanView);
var PlayerPropertyDataMgr$ChangeNameViewController$ChangeNameProType = {
    fullname: "PlayerPropertyDataMgr.ChangeNameViewController.ChangeNameProType",
    Kind: "Enum"
};
JsTypes.push(PlayerPropertyDataMgr$ChangeNameViewController$ChangeNameProType);
var IChangeNameView = {
    fullname: "IChangeNameView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IChangeNameView);
var IConfirmView = {
    fullname: "IConfirmView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IConfirmView);
var IHighPropertyUIView = {
    fullname: "IHighPropertyUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IHighPropertyUIView);
var IHeroPropertyData = {
    fullname: "IHeroPropertyData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IAddPointPlanData"],
    Kind: "Interface"
};
JsTypes.push(IHeroPropertyData);
var IPlayerPropertyView = {
    fullname: "IPlayerPropertyView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IPlayerPropertyView);
var IProfessionData = {
    fullname: "IProfessionData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IProfessionData);
var IProfessionView = {
    fullname: "IProfessionView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IProfessionView);
var IRecommendAddPointUIView = {
    fullname: "IRecommendAddPointUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IRecommendAddPointUIView);
var IResetPointUIView = {
    fullname: "IResetPointUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IResetPointUIView);
var IVigourUIView = {
    fullname: "IVigourUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IVigourUIView);
var ISocialityData = {
    fullname: "ISocialityData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ISocialityData);
var ISocialityView = {
    fullname: "ISocialityView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ISocialityView);
var ITeamBeInviteData = {
    fullname: "ITeamBeInviteData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamBeInviteData);
var IExpandTeamData = {
    fullname: "IExpandTeamData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IExpandTeamData);
var ITeamApplyViewData = {
    fullname: "ITeamApplyViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamApplyViewData);
var ITeamInviteViewData = {
    fullname: "ITeamInviteViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamInviteViewData);
var ITeamMainViewData = {
    fullname: "ITeamMainViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamMainViewData);
var TeamMainViewTab = {
    fullname: "TeamMainViewTab",
    staticDefinition: {
        Team: 0,
        CreateTeam: 1
    },
    Kind: "Enum"
};
JsTypes.push(TeamMainViewTab);
var ITeamData = {
    fullname: "ITeamData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamData);
var IMemberInfo = {
    fullname: "IMemberInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMemberInfo);
var TeamDataMgr$TeamAction = {
    fullname: "TeamDataMgr.TeamAction",
    staticDefinition: {
        Away: 0,
        Back: 1,
        Leave: 2,
        KickOutMember: 3,
        AssignLeader: 4
    },
    Kind: "Enum"
};
JsTypes.push(TeamDataMgr$TeamAction);
var ITeamApplicationView = {
    fullname: "ITeamApplicationView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamApplicationView);
var ITeamBeInviteView = {
    fullname: "ITeamBeInviteView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamBeInviteView);
var ITeamInvitationView = {
    fullname: "ITeamInvitationView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamInvitationView);
var ITeamMainView = {
    fullname: "ITeamMainView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamMainView);
var IMiniWorldMapData = {
    fullname: "IMiniWorldMapData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMiniWorldMapData);
var IMiniWorldMapView = {
    fullname: "IMiniWorldMapView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IMiniWorldMapView);
var MessageProcessor = {
    fullname: "MessageProcessor",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(MessageProcessor);
var ServiceRequestAction$RequestLockType = {
    fullname: "ServiceRequestAction.RequestLockType",
    staticDefinition: {
        LockScreen: 0,
        LockAction: 1,
        LockActionAndParam: 2,
        NoLock: 3
    },
    Kind: "Enum"
};
JsTypes.push(ServiceRequestAction$RequestLockType);
var UIModulePoolDefinition$ModulePoolType = {
    fullname: "UIModulePoolDefinition.ModulePoolType",
    staticDefinition: {
        NeverDestroy: 2147483647,
        Destroy: -1,
        Default: 30
    },
    Kind: "Enum"
};
JsTypes.push(UIModulePoolDefinition$ModulePoolType);
var SdkAccountDto$AccountDto$AccountType = {
    fullname: "SdkAccountDto.AccountDto.AccountType",
    staticDefinition: {
        free: 0,
        phone: 1,
        mail: 2,
        device: 3,
        qq: 4,
        weixin: 5
    },
    Kind: "Enum"
};
JsTypes.push(SdkAccountDto$AccountDto$AccountType);
var SdkModuleMgr$ModuleType = {
    fullname: "SdkModuleMgr.ModuleType",
    staticDefinition: {
        preLogin: 0,
        gameEnter: 1
    },
    Kind: "Enum"
};
JsTypes.push(SdkModuleMgr$ModuleType);
var AppDto$BagItemDto$CirculationType = {
    fullname: "AppDto.BagItemDto.CirculationType",
    staticDefinition: {
        Free: 0,
        Trade: 1,
        Gift: 2,
        Bind: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$BagItemDto$CirculationType);
var AppDto$BagItemDto$SourceOfTrade = {
    fullname: "AppDto.BagItemDto.SourceOfTrade",
    staticDefinition: {
        Unknown: 0,
        Stall: 1,
        Auction: 2
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$BagItemDto$SourceOfTrade);
var AppDto$CharacterAbility$Type = {
    fullname: "AppDto.CharacterAbility.Type",
    staticDefinition: {
        NONE: 0,
        COMMON: 1,
        PHYSICAL: 2,
        MAGIC: 3,
        ASSIST: 4,
        EXCEPTION: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$CharacterAbility$Type);
var AppDto$CharactorDto$CharacterPropertyType = {
    fullname: "AppDto.CharactorDto.CharacterPropertyType",
    staticDefinition: {
        PHYSIQUE: 101,
        POWER: 102,
        INTELLECT: 103,
        TECHNIQUE: 104,
        AGILITY: 105,
        MAX_HP: 201,
        PHY_ATTACK: 202,
        PHY_DEFENSE: 203,
        MAGIC_ATTAK: 204,
        MAGIC_DEFENSE: 205,
        SPEED: 206,
        CRIT: 207,
        HIT: 208,
        DODGE: 209,
        ANTI_CRIT: 210,
        TENACITY: 211,
        TREAT: 212,
        PHY_CRIT_RATE: 301,
        MAGIC_CRIT_RATE: 302,
        TREAT_CRIT_RATE: 303,
        PHY_ANTI_CRIT_RATE: 304,
        MAGIC_ANTI_CRIT_RATE: 305,
        PHY_HIT_RATE: 306,
        MAGIC_HIT_RATE: 307,
        PHY_DODGE_RATE: 308,
        MAGIC_DODGE_RATE: 309,
        FIXED_RELEASE_TIME: 310,
        PHY_STRIKE: 311,
        MAGIC_STRIKE: 312,
        CRIT_DAMAGE_ADDIDTION: 313,
        CRIT_DAMAGE_REDUCE: 314,
        EXCEPT_HIT_RATE: 315,
        EXCEPT_ANTI_RATE: 316,
        SILENCE_ADDITION: 317,
        CHAOS_ADDITION: 318,
        TRANCE_ADDITION: 319,
        FROZEN_ADDITION: 320,
        IMPRISON_ADDITION: 321,
        DISARM_ADDITION: 322,
        SNEER_ADDITION: 323,
        ANTI_SILENCE: 324,
        ANTI_CHAOS: 325,
        ANTI_TRANCE: 326,
        ANTI_FROZEN: 327,
        ANTI_IMPRISON: 328,
        ANTI_DISARM: 329,
        ANTI_SNEER: 330
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$CharactorDto$CharacterPropertyType);
var AppDto$Faction$FactionType = {
    fullname: "AppDto.Faction.FactionType",
    staticDefinition: {
        Unknown: 0,
        Civilian: 1,
        Soldier: 2,
        Ranger: 3,
        Counsellor: 4,
        Scholar: 5,
        EliteInfantry: 6,
        HeavyInfantry: 7
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Faction$FactionType);
var AppDto$Formation$FormationType = {
    fullname: "AppDto.Formation.FormationType",
    staticDefinition: {
        Unknown: 0,
        Regular: 1,
        SkyFlip: 2,
        EarthLoad: 3,
        CloudDown: 4,
        WindRise: 5,
        DragonFly: 6,
        BirdShit: 7,
        Snake: 8,
        TigerWing: 9
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Formation$FormationType);
var AppDto$GeneralCharactor$CharactorType = {
    fullname: "AppDto.GeneralCharactor.CharactorType",
    staticDefinition: {
        Unknown: 0,
        MainCharactor: 1,
        Child: 2,
        Crew: 3,
        Pet: 4,
        Monster: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$GeneralCharactor$CharactorType);
var AppDto$LeaveTeamNotify$LeaveTeamReason = {
    fullname: "AppDto.LeaveTeamNotify.LeaveTeamReason",
    staticDefinition: {
        REASON_LEAVE: 0,
        REASON_KICKOUT: 1,
        REASON_DISMISS: 2
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$LeaveTeamNotify$LeaveTeamReason);
var AppDto$MailType$MailTypeEnum = {
    fullname: "AppDto.MailType.MailTypeEnum",
    staticDefinition: {
        Unknown: 0,
        SysAnnouncement: 1,
        SysNoice: 2,
        SysReward: 3,
        Gift: 4,
        GroupNoice: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$MailType$MailTypeEnum);
var AppDto$Npc$NpcType = {
    fullname: "AppDto.Npc.NpcType",
    staticDefinition: {
        Unknown: 0,
        DoubleTeleport: 1,
        General: 2,
        Monster: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Npc$NpcType);
var AppDto$Npc$NpcNameType = {
    fullname: "AppDto.Npc.NpcNameType",
    staticDefinition: {
        Local: 0,
        Wildcard: 1,
        GhostName: 2,
        MaleName: 3,
        FemaleName: 4,
        Unknown: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Npc$NpcNameType);
var AppDto$NpcGeneral$NpcGeneralKindEnum = {
    fullname: "AppDto.NpcGeneral.NpcGeneralKindEnum",
    staticDefinition: {
        Unknown: 0,
        Idler: 1,
        Function: 2,
        Area: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$NpcGeneral$NpcGeneralKindEnum);
var AppDto$RealItem$CirculationType = {
    fullname: "AppDto.RealItem.CirculationType",
    staticDefinition: {
        Free: 0,
        Trade: 1,
        Gift: 2,
        Bind: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$RealItem$CirculationType);
var AppDto$SceneMap$SceneType = {
    fullname: "AppDto.SceneMap.SceneType",
    staticDefinition: {
        Unknown: 0,
        City: 1,
        General: 2,
        Wild: 3,
        Leveling: 4,
        School: 5,
        Guild: 6,
        Tournament: 7,
        FirstTournament: 8,
        TeamScene: 9,
        HeroTrial: 10,
        MythlandLobby: 11,
        MythlandLayer: 12,
        GuildComp: 13,
        CampWar: 14,
        Maze: 15,
        Evil: 16
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SceneMap$SceneType);
var AppDto$SceneObjectDto$SceneObjectType = {
    fullname: "AppDto.SceneObjectDto.SceneObjectType",
    staticDefinition: {
        Player: 0,
        Npc: 1
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SceneObjectDto$SceneObjectType);
var AppDto$Skill$SkillType = {
    fullname: "AppDto.Skill.SkillType",
    staticDefinition: {
        None: 0,
        Passive: 1,
        Phy: 2,
        Magic: 3,
        Recovery: 4,
        Controll: 5,
        Assist: 6
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$SkillType);
var AppDto$Skill$SkillOwnerType = {
    fullname: "AppDto.Skill.SkillOwnerType",
    staticDefinition: {
        None: 0,
        Player: 1,
        Npc: 2,
        Pet: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$SkillOwnerType);
var AppDto$Skill$UserTargetScopeType = {
    fullname: "AppDto.Skill.UserTargetScopeType",
    staticDefinition: {
        Unknown: 0,
        Enemy: 1,
        Self: 2,
        FriendsExceptSelfWithPet: 3,
        FriendsWithPet: 4,
        FriendPets: 5,
        ExceptSelf: 6,
        PetsInBag: 7,
        Fere: 8,
        EnemyPlayer: 9,
        FriendWithoutPetAndMe: 10,
        MyTeamPlayer: 11,
        EnemyPlayerOrPet: 12
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$Skill$UserTargetScopeType);
var AppDto$SkillBuff$BuffType = {
    fullname: "AppDto.SkillBuff.BuffType",
    staticDefinition: {
        UNKNOW: 0,
        ABNORMAL: 1,
        PROPERTY: 2,
        SPECIAL: 3,
        TEMPORARY: 4
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SkillBuff$BuffType);
var AppDto$SkillBuff$BuffGroup = {
    fullname: "AppDto.SkillBuff.BuffGroup",
    staticDefinition: {
        NORMAL: 0,
        SEAL: 1,
        FIXED_TIME: 2,
        TIMES: 3
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$SkillBuff$BuffGroup);
var AppDto$TeamCommand$EnemyCommand = {
    fullname: "AppDto.TeamCommand.EnemyCommand",
    staticDefinition: {
        Unknown: 0,
        ConcentrateAttack: 1,
        SorcerySeal: 2,
        PhysicalAttack: 3,
        SpellAttack: 4,
        GuardCorpse: 5
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$TeamCommand$EnemyCommand);
var AppDto$TeamMemberDto$TeamMemberStatus = {
    fullname: "AppDto.TeamMemberDto.TeamMemberStatus",
    staticDefinition: {
        NoTeam: 0,
        Leader: 1,
        Member: 2,
        Away: 3,
        Offline: 4
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$TeamMemberDto$TeamMemberStatus);
var AppDto$VideoSoldier$SoldierStatus = {
    fullname: "AppDto.VideoSoldier.SoldierStatus",
    staticDefinition: {
        Normal: 0,
        SelfDefense: 1
    },
    Kind: "Enum"
};
JsTypes.push(AppDto$VideoSoldier$SoldierStatus);
var IPoolController = {
    fullname: "IPoolController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IPoolController);
var IViewController = {
    fullname: "IViewController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IViewController);
var ICloseableView = {
    fullname: "ICloseableView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ICloseableView);
var IGameEventAgent = {
    fullname: "IGameEventAgent",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IGameEventAgent);
var BattleHelper$BattleWatchType = {
    fullname: "BattleHelper.BattleWatchType",
    staticDefinition: {
        WatchType_Nothing: 0,
        WatchType_Duel: 1,
        WatchType_CSPK: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleHelper$BattleWatchType);
var BattleTargetSelector$TargetType = {
    fullname: "BattleTargetSelector.TargetType",
    staticDefinition: {
        ALL: 0,
        PLAYER: 1,
        ENEMY: 2,
        SELF: 3,
        NONE: 4
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$TargetType);
var BattleTargetSelector$SelfType = {
    fullname: "BattleTargetSelector.SelfType",
    staticDefinition: {
        SELF: 0,
        NOTSELF: 1
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$SelfType);
var BattleTargetSelector$CharacterType = {
    fullname: "BattleTargetSelector.CharacterType",
    staticDefinition: {
        ALL: 0,
        PET: 1,
        NOTPET: 2,
        HERO: 3,
        COUPLE: 4,
        PLAYER: 5
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$CharacterType);
var BattleTargetSelector$LifeState = {
    fullname: "BattleTargetSelector.LifeState",
    staticDefinition: {
        ALL: 0,
        ALIVE: 1,
        DEAD: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$LifeState);
var BattleTargetSelector$SelectorType = {
    fullname: "BattleTargetSelector.SelectorType",
    staticDefinition: {
        CAPTURE: 0,
        SKILL: 1,
        ITEM: 2
    },
    Kind: "Enum"
};
JsTypes.push(BattleTargetSelector$SelectorType);
var MonsterController$MonsterSide = {
    fullname: "MonsterController.MonsterSide",
    staticDefinition: {
        Player: 0,
        Enemy: 1,
        None: 2
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$MonsterSide);
var MonsterController$RetreatMode = {
    fullname: "MonsterController.RetreatMode",
    staticDefinition: {
        Normal: 0,
        Fly: 1,
        Flash: 2,
        Run: 3
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$RetreatMode);
var MonsterController$ShowMessageEffect = {
    fullname: "MonsterController.ShowMessageEffect",
    staticDefinition: {
        DODGE: 1,
        CRITICAL: 2,
        IMMUNE: 4
    },
    Kind: "Enum"
};
JsTypes.push(MonsterController$ShowMessageEffect);
var BattleSkillSelectController$SkillType = {
    fullname: "BattleSkillSelectController.SkillType",
    staticDefinition: {
        None: 0,
        Stunt: 1,
        Guide: 2,
        Skill: 3
    },
    Kind: "Enum"
};
JsTypes.push(BattleSkillSelectController$SkillType);
var BATTLE_DEMO_MODEL_S1 = {
    fullname: "BATTLE_DEMO_MODEL_S1",
    staticDefinition: {
        Battle: 0,
        Watch: 1
    },
    Kind: "Enum"
};
JsTypes.push(BATTLE_DEMO_MODEL_S1);
var BattleDemoController$BattleResult = {
    fullname: "BattleDemoController.BattleResult",
    staticDefinition: {
        NULL: 0,
        DRAW: 1,
        WIN: 2,
        LOSE: 3,
        Retreat: 4,
        NoResult: 5
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoController$BattleResult);
var SkillButtonCellController$PivotPosition = {
    fullname: "SkillButtonCellController.PivotPosition",
    staticDefinition: {
        CenterBottom: 0,
        Bottom: 1
    },
    Kind: "Enum"
};
JsTypes.push(SkillButtonCellController$PivotPosition);
var BattleDemoModel$ActionState = {
    fullname: "BattleDemoModel.ActionState",
    staticDefinition: {
        HERO: 0,
        PET: 1
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoModel$ActionState);
var BattleDemoModel$BattleSceneStat = {
    fullname: "BattleDemoModel.BattleSceneStat",
    staticDefinition: {
        GAME_OVER: 0,
        ON_WAITING: 1,
        BATTLE_READY: 2,
        FINISH_COMMAND: 3,
        ON_PROGRESS: 4,
        ON_COMMAND_ENTER: 5,
        ON_COMMAND_EXIT: 6,
        ON_SELECT_SKILL: 7,
        ON_SELECT_TARGET: 8,
        ON_CAPTURE: 9,
        ON_CAPTURE_SUCCESS: 10
    },
    Kind: "Enum"
};
JsTypes.push(BattleDemoModel$BattleSceneStat);
var MonsterOptionStateManager$MonsterOptionState = {
    fullname: "MonsterOptionStateManager.MonsterOptionState",
    staticDefinition: {
        Disable: 0,
        Enable: 1
    },
    Kind: "Enum"
};
JsTypes.push(MonsterOptionStateManager$MonsterOptionState);
var IPlayerModel = {
    fullname: "IPlayerModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IPlayerModel);
var IWorldModel = {
    fullname: "IWorldModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldModel);
var IWorldViewData = {
    fullname: "IWorldViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldViewData);
var IWorldModelData = {
    fullname: "IWorldModelData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IWorldModelData);
var GamePlot$PlotTransformAction$TweenType = {
    fullname: "GamePlot.PlotTransformAction.TweenType",
    staticDefinition: {
        NavMove: 0,
        Rotate: 1,
        Scale: 2,
        PosMove: 3
    },
    Kind: "Enum"
};
JsTypes.push(GamePlot$PlotTransformAction$TweenType);
var GamePlot$PlayAudioAction$AudioType = {
    fullname: "GamePlot.PlayAudioAction.AudioType",
    staticDefinition: {
        Music: 0,
        Sound: 1
    },
    Kind: "Enum"
};
JsTypes.push(GamePlot$PlayAudioAction$AudioType);
var IntEnum$1 = {
    fullname: "IntEnum$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IntEnum$1);
var TabbtnPrefabPath = {
    fullname: "TabbtnPrefabPath",
    staticDefinition: {
        TabBtnWidget: 0,
        TabBtnWidget_H1: 1,
        TabBtnWidget_H2: 2,
        TabBtnWidget_H3: 3,
        TabBtnWidget_H3_SHORT: 4,
        TABBUTTON_H4: 5
    },
    Kind: "Enum"
};
JsTypes.push(TabbtnPrefabPath);
var UIHelper$ItemTipType = {
    fullname: "UIHelper.ItemTipType",
    staticDefinition: {
        None: 0,
        NormalTip: 1,
        GainWay: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIHelper$ItemTipType);
var UIHelper$BtnType = {
    fullname: "UIHelper.BtnType",
    staticDefinition: {
        Little: 0,
        Middle: 1,
        Big: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIHelper$BtnType);
var GameDisplayManager$DisplayLevel = {
    fullname: "GameDisplayManager.DisplayLevel",
    staticDefinition: {
        Low: 0,
        Middle: 1,
        High: 2
    },
    Kind: "Enum"
};
JsTypes.push(GameDisplayManager$DisplayLevel);
var GameDisplayManager$VisibleType = {
    fullname: "GameDisplayManager.VisibleType",
    staticDefinition: {
        Player: 0,
        Npc: 1
    },
    Kind: "Enum"
};
JsTypes.push(GameDisplayManager$VisibleType);
var IModuleModel = {
    fullname: "IModuleModel",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.IDisposable"],
    Kind: "Interface"
};
JsTypes.push(IModuleModel);
var UILayerType = {
    fullname: "UILayerType",
    staticDefinition: {
        Invalid: -100,
        JOYSTICK: -20,
        HudLayer: -10,
        BaseModule: 0,
        BarrageLayer: 3,
        SceneChange: 10,
        ChatModule: 20,
        DefaultModule: 30,
        SubModule: 40,
        ThreeModule: 50,
        FourModule: 60,
        FiveModule: 70,
        Guide: 100,
        Dialogue: 110,
        ItemTip: 120,
        FloatTip: 130,
        FadeInOut: 140,
        LockScreen: 150,
        TopDialogue: 160,
        TopLockScreen: 170,
        QRCodeScan: 180
    },
    Kind: "Enum"
};
JsTypes.push(UILayerType);
var UIMode = {
    fullname: "UIMode",
    staticDefinition: {
        NULL: 0,
        LOGIN: 1,
        GAME: 2,
        BATTLE: 3,
        STORY: 4,
        MARRY: 5
    },
    Kind: "Enum"
};
JsTypes.push(UIMode);
var AssetPipeline$ResourcePoolManager$PoolType = {
    fullname: "AssetPipeline.ResourcePoolManager.PoolType",
    staticDefinition: {
        UI: 0,
        Model: 1,
        Effect: 2,
        Scene: 3
    },
    Kind: "Enum"
};
JsTypes.push(AssetPipeline$ResourcePoolManager$PoolType);
var UIModuleDefinition$ModuleType = {
    fullname: "UIModuleDefinition.ModuleType",
    staticDefinition: {
        None: 0,
        MainModule: 1,
        SubModule: 2
    },
    Kind: "Enum"
};
JsTypes.push(UIModuleDefinition$ModuleType);
var IQuadObject$1 = {
    fullname: "IQuadObject$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["System.Collections.Generic.IEqualityComparer$1"],
    Kind: "Interface"
};
JsTypes.push(IQuadObject$1);
var QuadTree$Direction$1 = {
    fullname: "QuadTree.Direction$1",
    staticDefinition: {
        NW: 0,
        NE: 1,
        SW: 2,
        SE: 3
    },
    Kind: "Enum"
};
JsTypes.push(QuadTree$Direction$1);
var Equipment = {
    fullname: "Equipment",
    staticDefinition: {
        EquipPartType_Unknown: 0,
        EquipPartType_Weapon: 1,
        EquipPartType_Helmet: 2,
        EquipPartType_Armor: 3,
        EquipPartType_Necklace: 4,
        EquipPartType_Girdle: 5,
        EquipPartType_Shoe: 6
    },
    Kind: "Enum"
};
JsTypes.push(Equipment);
var ITempBackpackViewData = {
    fullname: "ITempBackpackViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITempBackpackViewData);
var IBackpackViewData = {
    fullname: "IBackpackViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IBackpackViewData);
var IBackpackData = {
    fullname: "IBackpackData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IBackpackData);
var BackpackViewTab = {
    fullname: "BackpackViewTab",
    staticDefinition: {
        Backpack: 0,
        Warehouse: 1
    },
    Kind: "Enum"
};
JsTypes.push(BackpackViewTab);
var ItemTypeTab = {
    fullname: "ItemTypeTab",
    staticDefinition: {
        Item: 0,
        Task: 1,
        Pet: 2
    },
    Kind: "Enum"
};
JsTypes.push(ItemTypeTab);
var IBackpackView = {
    fullname: "IBackpackView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IBackpackView);
var ITempBackPackView = {
    fullname: "ITempBackPackView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITempBackPackView);
var BattleAutoSkillConfigController$BattleConfigSkillType = {
    fullname: "BattleAutoSkillConfigController.BattleConfigSkillType",
    staticDefinition: {
        Undefined: 0,
        MainRoleAutoSkill: 1,
        MainPetAutoSkill: 2,
        MainRoleSubSkill: 3,
        MainPetSubSkill: 4
    },
    Kind: "Enum"
};
JsTypes.push(BattleAutoSkillConfigController$BattleConfigSkillType);
var BattleAutoSummonHeroController$PositionType = {
    fullname: "BattleAutoSummonHeroController.PositionType",
    staticDefinition: {
        Undefined: 0,
        CurrentUsed: 1,
        CurrentSelected: 2,
        ToBeSelected: 3
    },
    Kind: "Enum"
};
JsTypes.push(BattleAutoSummonHeroController$PositionType);
var ITabBtnController = {
    fullname: "ITabBtnController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITabBtnController);
var ItemType = {
    fullname: "ItemType",
    staticDefinition: {
        defaultType: 0
    },
    Kind: "Enum"
};
JsTypes.push(ItemType);
var OperatorType = {
    fullname: "OperatorType",
    staticDefinition: {
        defaultType: 0
    },
    Kind: "Enum"
};
JsTypes.push(OperatorType);
var MultipleSelectionManager$Side = {
    fullname: "MultipleSelectionManager.Side",
    staticDefinition: {
        Left: 0,
        LeftTop: 1,
        LeftBottom: 2,
        Right: 3,
        RightTop: 4,
        RightBottom: 5,
        Top: 6,
        TopLeft: 7,
        TopRight: 8,
        Bottom: 9,
        BottomLeft: 10,
        BottomRight: 11
    },
    Kind: "Enum"
};
JsTypes.push(MultipleSelectionManager$Side);
var IEmailContentData = {
    fullname: "IEmailContentData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IEmailContentData);
var IEmailContent = {
    fullname: "IEmailContent",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IEmailContent);
var IEmailView = {
    fullname: "IEmailView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IEmailView);
var eGeneralQuality = {
    fullname: "eGeneralQuality",
    staticDefinition: {
        NONE: 0,
        PURPLE: 1,
        ORANGE: 2,
        RED: 3,
        GOLD: 4
    },
    Kind: "Enum"
};
JsTypes.push(eGeneralQuality);
var eArmorType = {
    fullname: "eArmorType",
    staticDefinition: {
        NONE: 0,
        HEAVY: 1,
        LEATHER: 2,
        QUILTED: 3
    },
    Kind: "Enum"
};
JsTypes.push(eArmorType);
var IGeneralData = {
    fullname: "IGeneralData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IGeneralData);
var IGeneralView = {
    fullname: "IGeneralView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IGeneralView);
var IItemCellController = {
    fullname: "IItemCellController",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IItemCellController);
var IJoystickModuleData = {
    fullname: "IJoystickModuleData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IJoystickModuleData);
var MainUIExpandContentViewController$ExpandContentType = {
    fullname: "MainUIExpandContentViewController.ExpandContentType",
    staticDefinition: {
        nothing: 0,
        mission: 1,
        team: 2
    },
    Kind: "Enum"
};
JsTypes.push(MainUIExpandContentViewController$ExpandContentType);
var MainUIExpandContentViewController$OperateTeamType = {
    fullname: "MainUIExpandContentViewController.OperateTeamType",
    staticDefinition: {
        NONE: 0,
        LEAVETEAM: 1,
        BACKTEAM: 2,
        CHECKINFO: 3,
        LEADBYOTHER: 4,
        PLEASELEAVE: 5,
        SUMMON: 6,
        LEAVELITTLE: 7,
        APPLYLEADTEAM: 8,
        SAMERIDING: 9,
        RIDEOFF: 10,
        KICKRIDING: 11
    },
    Kind: "Enum"
};
JsTypes.push(MainUIExpandContentViewController$OperateTeamType);
var IMainUIData = {
    fullname: "IMainUIData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMainUIData);
var IMainUIView = {
    fullname: "IMainUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IMainUIView);
var IAddPointPlanData = {
    fullname: "IAddPointPlanData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IAddPointPlanData);
var IAddPointPlanView = {
    fullname: "IAddPointPlanView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IAddPointPlanView);
var PlayerPropertyDataMgr$ChangeNameViewController$ChangeNameProType = {
    fullname: "PlayerPropertyDataMgr.ChangeNameViewController.ChangeNameProType",
    Kind: "Enum"
};
JsTypes.push(PlayerPropertyDataMgr$ChangeNameViewController$ChangeNameProType);
var IChangeNameView = {
    fullname: "IChangeNameView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IChangeNameView);
var IConfirmView = {
    fullname: "IConfirmView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IConfirmView);
var IHighPropertyUIView = {
    fullname: "IHighPropertyUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IHighPropertyUIView);
var IHeroPropertyData = {
    fullname: "IHeroPropertyData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["IAddPointPlanData"],
    Kind: "Interface"
};
JsTypes.push(IHeroPropertyData);
var IPlayerPropertyView = {
    fullname: "IPlayerPropertyView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IPlayerPropertyView);
var IProfessionData = {
    fullname: "IProfessionData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IProfessionData);
var IProfessionView = {
    fullname: "IProfessionView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IProfessionView);
var IRecommendAddPointUIView = {
    fullname: "IRecommendAddPointUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IRecommendAddPointUIView);
var IResetPointUIView = {
    fullname: "IResetPointUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IResetPointUIView);
var IVigourUIView = {
    fullname: "IVigourUIView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IVigourUIView);
var ISocialityData = {
    fullname: "ISocialityData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ISocialityData);
var ISocialityView = {
    fullname: "ISocialityView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ISocialityView);
var ITeamBeInviteData = {
    fullname: "ITeamBeInviteData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamBeInviteData);
var IExpandTeamData = {
    fullname: "IExpandTeamData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IExpandTeamData);
var ITeamApplyViewData = {
    fullname: "ITeamApplyViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamApplyViewData);
var ITeamInviteViewData = {
    fullname: "ITeamInviteViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamInviteViewData);
var ITeamMainViewData = {
    fullname: "ITeamMainViewData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamMainViewData);
var TeamMainViewTab = {
    fullname: "TeamMainViewTab",
    staticDefinition: {
        Team: 0,
        CreateTeam: 1
    },
    Kind: "Enum"
};
JsTypes.push(TeamMainViewTab);
var ITeamData = {
    fullname: "ITeamData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(ITeamData);
var IMemberInfo = {
    fullname: "IMemberInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMemberInfo);
var TeamDataMgr$TeamAction = {
    fullname: "TeamDataMgr.TeamAction",
    staticDefinition: {
        Away: 0,
        Back: 1,
        Leave: 2,
        KickOutMember: 3,
        AssignLeader: 4
    },
    Kind: "Enum"
};
JsTypes.push(TeamDataMgr$TeamAction);
var ITeamApplicationView = {
    fullname: "ITeamApplicationView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamApplicationView);
var ITeamBeInviteView = {
    fullname: "ITeamBeInviteView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamBeInviteView);
var ITeamInvitationView = {
    fullname: "ITeamInvitationView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamInvitationView);
var ITeamMainView = {
    fullname: "ITeamMainView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(ITeamMainView);
var IMiniWorldMapData = {
    fullname: "IMiniWorldMapData",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(IMiniWorldMapData);
var IMiniWorldMapView = {
    fullname: "IMiniWorldMapView",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    interfaceNames: ["ICloseableView"],
    Kind: "Interface"
};
JsTypes.push(IMiniWorldMapView);
var MessageProcessor = {
    fullname: "MessageProcessor",
    baseTypeName: "System.Object",
    assemblyName: "SharpKitProj",
    Kind: "Interface"
};
JsTypes.push(MessageProcessor);
var ServiceRequestAction$RequestLockType = {
    fullname: "ServiceRequestAction.RequestLockType",
    staticDefinition: {
        LockScreen: 0,
        LockAction: 1,
        LockActionAndParam: 2,
        NoLock: 3
    },
    Kind: "Enum"
};
JsTypes.push(ServiceRequestAction$RequestLockType);
var UIModulePoolDefinition$ModulePoolType = {
    fullname: "UIModulePoolDefinition.ModulePoolType",
    staticDefinition: {
        NeverDestroy: 2147483647,
        Destroy: -1,
        Default: 30
    },
    Kind: "Enum"
};
JsTypes.push(UIModulePoolDefinition$ModulePoolType);
var SdkAccountDto$AccountDto$AccountType = {
    fullname: "SdkAccountDto.AccountDto.AccountType",
    staticDefinition: {
        free: 0,
        phone: 1,
        mail: 2,
        device: 3,
        qq: 4,
        weixin: 5
    },
    Kind: "Enum"
};
JsTypes.push(SdkAccountDto$AccountDto$AccountType);
var SdkModuleMgr$ModuleType = {
    fullname: "SdkModuleMgr.ModuleType",
    staticDefinition: {
        preLogin: 0,
        gameEnter: 1
    },
    Kind: "Enum"
};
JsTypes.push(SdkModuleMgr$ModuleType);

