package com.baoyugame.android.commons;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.UUID;

import android.app.Activity;
import android.app.ActivityManager;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.Intent;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiInfo;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Environment;
import android.os.StatFs;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.unity3d.player.UnityPlayer;

/**
 * @author Tony
 * 
 */
public final class DeviceUtils {

	private final static String TAG = "JNI_BAOYU_DeviceUtils";
	
	public static final String STORE_DIR_NAME = "com.baoyugame";

	public static final String NETWORK_TYPE_NONE = "NONE";

	public static final String NETWORK_TYPE_UNKNOWN = "UNKNOWN";

	public static final String NETWORK_TYPE_WIFI = "WIFI";

	public static final String NETWORK_TYPE_2G = "2G";

	public static final String NETWORK_TYPE_3G = "3G";

	public static final String NETWORK_TYPE_4G = "4G";

	public static long totalMemory;

	private static Activity activity = null;

	/**
	 * <pre>
	 * 鑾峰彇缃戠粶绫诲瀷
	 * 鏃犵綉缁� NONE
	 * 鏈煡绫诲瀷: UNKNOWN
	 * WIFI: WIFI
	 * 2G: 2G
	 * 3G: 3G
	 * 4G: 4G
	 * </pre>
	 * @return 缃戠粶绫诲瀷鏍囪瘑
	 */
	public static String getNetworkType() {
		ConnectivityManager cm = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
		NetworkInfo info = cm.getActiveNetworkInfo();
		String strType = null;
		int type = 0;
		int subType = 0;
		if (null == info || !info.isConnected()) {
			strType = NETWORK_TYPE_NONE;
		} else {
			type = info.getType();
			if (type == ConnectivityManager.TYPE_WIFI) {
				return NETWORK_TYPE_WIFI;
			} else if (type == ConnectivityManager.TYPE_MOBILE) {
				subType = info.getSubtype();
				switch (subType) {
				// ~ 50-100 kbps
				case TelephonyManager.NETWORK_TYPE_1xRTT:
					// ~ 100 kbps
				case TelephonyManager.NETWORK_TYPE_GPRS:
					strType =  NETWORK_TYPE_2G;
					break;
					// ~ 14-64 kbps
				case TelephonyManager.NETWORK_TYPE_CDMA:
					// ~ 50-100 kbps
				case TelephonyManager.NETWORK_TYPE_EDGE:
					// ~ 400-1000 kbps
				case TelephonyManager.NETWORK_TYPE_EVDO_0:
					// ~ 600-1400 kbps
				case TelephonyManager.NETWORK_TYPE_EVDO_A:
					// ~ 2-14 Mbps
				case TelephonyManager.NETWORK_TYPE_HSDPA:
					// ~ 700-1700 kbps
				case TelephonyManager.NETWORK_TYPE_HSPA:
					// ~ 1-23 Mbps
				case TelephonyManager.NETWORK_TYPE_HSUPA:
					// ~ 400-7000 kbps
				case TelephonyManager.NETWORK_TYPE_UMTS:
					strType =  NETWORK_TYPE_3G;
					break;
					/*
					 * Above API level 7, make sure to set android:targetSdkVersion
					 * to appropriate level to use these
					 */
				case TelephonyManager.NETWORK_TYPE_EHRPD: // API level 11
					strType =  NETWORK_TYPE_3G; // ~ 1-2 Mbps
					break;
				case TelephonyManager.NETWORK_TYPE_EVDO_B: // API level 9
					strType =  NETWORK_TYPE_3G; // ~ 5 Mbps
					break;
				case TelephonyManager.NETWORK_TYPE_HSPAP: // API level 13
					strType =  NETWORK_TYPE_3G; // ~ 10-20 Mbps
					break;
				case TelephonyManager.NETWORK_TYPE_IDEN: // API level 8
					strType =  NETWORK_TYPE_2G; // ~25 kbps
					break;
				case TelephonyManager.NETWORK_TYPE_LTE: // API level 11
					strType =  NETWORK_TYPE_3G; // ~ 10+ Mbps
					break;
					// Unknown
				case TelephonyManager.NETWORK_TYPE_UNKNOWN:
				default:
					strType =  NETWORK_TYPE_UNKNOWN;
					break;
				}
			} else {
				strType =  NETWORK_TYPE_UNKNOWN;
			}
		}
		Log.d(TAG, "get type: " + type + ", subType:" + subType + " return: " + strType);
		return strType;
	}

	/**
	 * wifi 信号 100-0
	 * 需要权限: <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
	 * @return
	 */
	public static int getWifiSignal()
	{
        try 
        {  
			WifiManager wifiMg = (WifiManager)getActivity().getSystemService(Context.WIFI_SERVICE);  
	          
	        // 当前连接
	        WifiInfo wifiInfo = wifiMg.getConnectionInfo();  
	        int nWSig = WifiManager.calculateSignalLevel(wifiInfo.getRssi(), 100);  
	        Log.d(TAG, "new SSID : " + wifiInfo.getSSID() + "   signal strength : "+wifiInfo.getRssi() + "   强度:" + nWSig); 
	        return nWSig;
        }
        catch (Exception e) 
        {  
            e.printStackTrace();  
        }  
		return 0;
	}
	
	/**
	 * 鑾峰緱鍙敤鍐呭瓨澶у皬(KB)
	 * 
	 * @return
	 */
	public static long getFreeMemory() {
		if (null != getActivity()) {
			Log.d(TAG, "read free memory from MemoryInfo api");
			final ActivityManager activityManager = (ActivityManager) activity
					.getSystemService(Context.ACTIVITY_SERVICE);
			ActivityManager.MemoryInfo info = new ActivityManager.MemoryInfo();
			activityManager.getMemoryInfo(info);

			long freeMemory = info.availMem / 1024;
			Log.d(TAG, "finish read free memory from MemoryInfo " + freeMemory);
			return freeMemory;
		}
		Log.d(TAG, "read free memory from /proc/meminfo");
		RandomAccessFile reader = null;
		long freeMemory = 0;
		try {
			reader = new RandomAccessFile("/proc/meminfo", "r");
			String line1 = reader.readLine();
			Log.d(TAG, "line1: " + line1);
			String strMemFree = reader.readLine();
			if (null != strMemFree) {
				String[] data = strMemFree.split("\\s+");
				if (data.length > 2) {
					try {
						Log.d(TAG, "src: " + strMemFree);
						freeMemory = Long.valueOf(data[1]);
					} catch (Exception e) {
					}
				}
			}
		} catch (Exception e) {
			Log.d(TAG, "read /proc/meminfo", e);
		} finally {
			if (null != reader) {
				try {
					reader.close();
				} catch (Exception e) {
				}
			}
		}
		Log.d(TAG, "finish read /proc/meminfo " + freeMemory);
		return freeMemory;
	}

	/**
	 * 鑾峰緱鎬诲唴瀛樺ぇ灏�KB)
	 * 
	 * @return
	 */
	public static long getTotalMemory() {
		checkAndGetMemoryInfo();
		return totalMemory;
	}
	
	/**
	 * 鍒ゆ柇鏄惁甯dcard
	 * @return
	 */
	public static boolean hasExternalStorage() {
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state) ||
				Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
			return true;
		}
		return false;
	}
	
	/**
	 * sdcard鏄惁鍙鍐�
	 * @return
	 */
	public static boolean externalStorageAvailable() {
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state)) {
			return true;
		}
		return false;
	}

	/**
	 * 鑾峰緱鎵╁睍鍌ㄥ瓨鍙敤瀹归噺(KB)
	 * 
	 * @return
	 */
	public static long getExternalStorageAvailable() {
		long kbAvailable = 0;
		String state = Environment.getExternalStorageState();
		boolean statAvailable = false;
		if (Environment.MEDIA_MOUNTED.equals(state)) {
			statAvailable = true;
		} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
			statAvailable = true;
		}
		File dir = null;
		if (statAvailable) {
			dir = Environment.getExternalStorageDirectory();
			Log.d(TAG, "get size from path " + dir);
		} else {
			dir = Environment.getDataDirectory();
			Log.d(TAG, "get size from path " + dir);
		}
		StatFs statFs = new StatFs(dir.getPath());
		kbAvailable = (long) statFs.getAvailableBlocks() * (long) statFs.getBlockSize() / 1024;
		Log.d(TAG, "storage " + kbAvailable);
		return kbAvailable;
	}

	/**
     * 鑾峰彇鏈満缃戝崱Mac鍦板潃
     * @return
     */
    public static String getLocalMacAddress() {
        WifiManager wifi = (WifiManager) getActivity().getSystemService(Context.WIFI_SERVICE);
        WifiInfo info = wifi.getConnectionInfo();
        return info.getMacAddress();
    }
    
    /**
     * 鑾峰彇鎵嬫満鍙风爜
     * @return
     */
    public static String getLocalPhoneNumber() {
    	TelephonyManager tm = (TelephonyManager) getActivity().getSystemService(Context.TELEPHONY_SERVICE);
    	String phoneId = tm.getLine1Number();
    	return phoneId;
    }
    
	/**
     * 鍙杝dcard瀹归噺涓庢湰鏈哄閲� 杩斿洖瀛楃涓�sdcard瀹归噺|鎵嬫満瀹归噺)
     * @return
     */
    public static String getStorageInfos() {
		String state = Environment.getExternalStorageState();
		boolean statAvailable = false;
		if (Environment.MEDIA_MOUNTED.equals(state)) {
			statAvailable = true;
		} else if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {
			statAvailable = true;
		}
		File dir = null;
		StringBuilder infos = new StringBuilder(128);
		if (statAvailable) {
			dir = Environment.getExternalStorageDirectory();
			StatFs statFs = new StatFs(dir.getPath());
			long total = getTotalKB(statFs);
			infos.append(total);
			Log.d(TAG, "get sdcard " + dir.getPath() + ": " + total);
		} else {
			infos.append('0');
		}
		infos.append('|');
		
		dir = Environment.getDataDirectory();
		StatFs statFs = new StatFs(dir.getPath());
		long total = getTotalKB(statFs);
		infos.append(total);
		Log.d(TAG, "get local " + dir.getPath() + ": " + total);
		Log.d(TAG, "get sizes sdcard|local " + infos);
		return infos.toString();
	}

	private static long getTotalKB(StatFs statFs) {
		long blockCount = statFs.getBlockCount();
		long blockSize = statFs.getBlockSize();
		long total = blockCount * blockSize / 1024;
		return total;
	}
	

    private static void checkAndGetMemoryInfo() {
		if (totalMemory > 0)
			return;
		Log.d(TAG, "calling checkAndGetMemoryInfo...");
		RandomAccessFile reader = null;
		try {
			reader = new RandomAccessFile("/proc/meminfo", "r");
			String strMemTotal = reader.readLine();
			if (null != strMemTotal) {
				String[] data = strMemTotal.split("\\s+");
				if (data.length > 2) {
					try {
						totalMemory = Long.valueOf(data[1]);
					} catch (Exception e) {
					}
				}
			}
		} catch (Exception e) {
			Log.d(TAG, "read /proc/meminfo", e);
		} finally {
			if (null != reader) {
				try {
					reader.close();
				} catch (Exception e) {
				}
			}
		}
		Log.d(TAG, "finish checkAndGetMemoryInfo " + totalMemory);
	}
    
    /**
     * 娓呴櫎UUID鏂囦欢
     */
    public static void clearUUID() {
    	File uuidFile = null;
		if ( uuidFile == null || !uuidFile.exists() ) {
			File localDir = getActivity().getDir("uuid", Context.MODE_PRIVATE);
			uuidFile = getUUIDFile(localDir);
		}
		if ( uuidFile != null && uuidFile.exists() ) {
			uuidFile.delete();
		}
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state)) {
			File exDir = new File(Environment.getExternalStorageDirectory().getPath()+File.separator+STORE_DIR_NAME, "uuid");
			if ( uuidFile == null )
				uuidFile = getUUIDFile(exDir);
		}
		if ( uuidFile != null && uuidFile.exists() ) {
			uuidFile.delete();
		}
    }
    
    /**
     * 鍙栧緱鐢熸垚搴旂敤鐨勫敮涓�覆,杩斿洖瀛楃涓�鏂扮敓鎴愭爣璁皘UUID)
     * 鏂扮敓鎴愭爣璁� 1棣栨鐢熸垚, 0璇诲彇缂撳瓨鐨�
     * @return
     */
    public static String getUUID() {
    	
    	// check local dir;
    	// if null check external dir
    	// if null create file in local and external dir
    	// else return uuid;
    	
    	File localDir = null;
    	File exDir = null;
		File uuidFile = null;
		if ( uuidFile == null || !uuidFile.exists() ) {
			localDir = getActivity().getDir("uuid", Context.MODE_PRIVATE);
			uuidFile = getUUIDFile(localDir);
		}
		String state = Environment.getExternalStorageState();
		if (Environment.MEDIA_MOUNTED.equals(state)) {
			exDir = new File(Environment.getExternalStorageDirectory().getPath()+File.separator+STORE_DIR_NAME, "uuid");
			if ( uuidFile == null )
				uuidFile = getUUIDFile(exDir);
		}
		String uuid = UUID.randomUUID().toString();
		if ( uuidFile == null ) {
			uuidFile = createUUIDFile(localDir,exDir,uuid);
			return "1|" + uuidFile.getName().replace(".uuid", "");
		}
		if ( uuidFile == null || !uuidFile.exists() ) {
			return "1|"+uuid;
		}
		return "0|" + uuidFile.getName().replace(".uuid", "");
    }
    
    private static File createUUIDFile(File localDir,File exDir, String uuid) {
    	File uuidFile = createFileAtDir(localDir,uuid);
    	if ( null == uuidFile ) {
    		uuidFile = createFileAtDir(exDir, uuid);
    	} else {
    		createFileAtDir(exDir, uuid);
    	}
		return uuidFile;
	}

	private static File createFileAtDir(File dir,String uuid) {
		if ( null == dir ) return null;
		File uuidFile = null;
		if ( !dir.exists() ) { 
			boolean success = dir.mkdirs();
			if ( !success ) {
				return null;
			}
		}
		uuidFile = new File(dir,uuid+".uuid");
		try {
			uuidFile.createNewFile();
		} catch (IOException e) {
			Log.d(TAG, "create file at "+dir, e);
		}
		return uuidFile;
	}

	private static File getUUIDFile(File dir) {
		File uuidFile = null;
		if ( !dir.exists() ) {
			return null;
		}
		File[] files = dir.listFiles(new FileFilter() {
			@Override
			public boolean accept(File file) {
				if ( file.getName().endsWith(".uuid") ) {
					return true;
				}
				return false;
			}
		});
		if ( files!=null && files.length>0 ) {
			uuidFile = files[0];
		}
		return uuidFile;
	}

	public static void installApk(String apkUrl){
		String fileName = apkUrl;
		Intent intent = new Intent(Intent.ACTION_VIEW);
		intent.setDataAndType(Uri.fromFile(new File(fileName)), "application/vnd.android.package-archive");
		getActivity().startActivity(intent);
	}
	
	/**
	 * 鏄惁鍙畨瑁呮湭绛惧悕APP
	 * @return
	 * 			0 涓嶅彲瀹夎
	 * 			1鍙畨瑁�
	 */
	public static int getOptionInstallNonMarketApps() {
		String key = null; 
		if ( Build.VERSION.SDK_INT >= 17 ) {
			key = Settings.Global.INSTALL_NON_MARKET_APPS;
		} else {
			key = Settings.Secure.INSTALL_NON_MARKET_APPS;
		}
		int result = Settings.Secure.getInt(getActivity().getContentResolver(), key, 0);
		return result;
	}
	
	/**
	 * 鏄剧ず瀹夎鏈鍚峚pp鐨勮缃獥鍙�
	 */
	public static void showSettingsInstallNonMarketApps() {
		Intent intent = new Intent();     
		if ( Build.VERSION.SDK_INT >= 14 ) {
			intent.setAction(Settings.ACTION_SECURITY_SETTINGS);
		} else {
			intent.setAction(Settings.ACTION_APPLICATION_SETTINGS);  
		}
		getActivity().startActivity(intent);
	}
	
	/**
	 * Restart this Game
	 */
	public static void RestartGame(){
		Activity currentActivity =  getActivity();
		Context baseContext = currentActivity.getBaseContext();
		
		String packageName = baseContext.getPackageName();
		
		Log.d(TAG, "RestartGame packageName="+packageName);
		
		Intent intent = baseContext.getPackageManager().getLaunchIntentForPackage(packageName);
		if (intent != null){
			Log.d(TAG, "Intent != null");	
		}
		intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		Log.d(TAG, "intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP)");
		baseContext.startActivity(intent);
		Log.d(TAG, "baseContext.startActivity(intent)");
		
	}
	
	public static Activity getActivity() {
		if (null == activity) {
			setActivity(UnityPlayer.currentActivity);
		}
		return activity;
	}

	public static void setActivity(Activity activity) {
		DeviceUtils.activity = activity;
	}
}